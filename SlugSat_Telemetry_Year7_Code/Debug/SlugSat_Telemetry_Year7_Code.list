
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009384  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080094c0  080094c0  000194c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a0  080096a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a8  080096a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080096b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a7c  200001e0  08009890  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  08009890  00021c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001104b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ac  00000000  00000000  00031254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00034300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00035168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec5  00000000  00000000  00035e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012690  00000000  00000000  0004ed4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b48a  00000000  00000000  000613dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df4  00000000  00000000  000ec8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	080094a8 	.word	0x080094a8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	080094a8 	.word	0x080094a8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b0a0      	sub	sp, #128	; 0x80
 8000488:	af02      	add	r7, sp, #8
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]
 8000490:	4613      	mov	r3, r2
 8000492:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
	char Message[100];
	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	2b2e      	cmp	r3, #46	; 0x2e
 8000498:	d836      	bhi.n	8000508 <CC1200_Write_Single_Register+0x84>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};
 80004a0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80004a4:	723b      	strb	r3, [r7, #8]
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	727b      	strb	r3, [r7, #9]
		(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	7a3a      	ldrb	r2, [r7, #8]
 80004b0:	701a      	strb	r2, [r3, #0]
		(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3301      	adds	r3, #1
 80004b8:	7a7a      	ldrb	r2, [r7, #9]
 80004ba:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6898      	ldr	r0, [r3, #8]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	899b      	ldrh	r3, [r3, #12]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4619      	mov	r1, r3
 80004c8:	f000 ff82 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_Delay(10); // delay 10 ms
 80004cc:	200a      	movs	r0, #10
 80004ce:	f000 fcbf 	bl	8000e50 <HAL_Delay>
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6918      	ldr	r0, [r3, #16]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	f107 0108 	add.w	r1, r7, #8
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2302      	movs	r3, #2
 80004e6:	f003 fa4e 	bl	8003986 <HAL_SPI_TransmitReceive>
		HAL_Delay(10); // delay 10 ms
 80004ea:	200a      	movs	r0, #10
 80004ec:	f000 fcb0 	bl	8000e50 <HAL_Delay>
		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6898      	ldr	r0, [r3, #8]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	899b      	ldrh	r3, [r3, #12]
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	f000 ff68 	bl	80013d0 <HAL_GPIO_WritePin>

		retval = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000506:	e018      	b.n	800053a <CC1200_Write_Single_Register+0xb6>
	}
	else
	{
		Message_Length = sprintf(Message, "Invalid Register Access\r\n");
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	490e      	ldr	r1, [pc, #56]	; (8000548 <CC1200_Write_Single_Register+0xc4>)
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fb50 	bl	8008bb4 <siprintf>
 8000514:	4603      	mov	r3, r0
 8000516:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 800051a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800051e:	3301      	adds	r3, #1
 8000520:	b29a      	uxth	r2, r3
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4611      	mov	r1, r2
 8000528:	4618      	mov	r0, r3
 800052a:	f007 ff1f 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f000 fc8e 	bl	8000e50 <HAL_Delay>
		retval = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return retval;
 800053a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800053e:	4618      	mov	r0, r3
 8000540:	3778      	adds	r7, #120	; 0x78
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	080094c0 	.word	0x080094c0

0800054c <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b0a0      	sub	sp, #128	; 0x80
 8000550:	af02      	add	r7, sp, #8
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
	char Message[100];
	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	2b2e      	cmp	r3, #46	; 0x2e
 800055c:	d838      	bhi.n	80005d0 <CC1200_Read_Single_Register+0x84>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 800055e:	78fb      	ldrb	r3, [r7, #3]
 8000560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000564:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		uint8_t MOSI_Data[2] = {Header_Byte, 0x00};
 8000568:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800056c:	723b      	strb	r3, [r7, #8]
 800056e:	2300      	movs	r3, #0
 8000570:	727b      	strb	r3, [r7, #9]
		(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	7a3a      	ldrb	r2, [r7, #8]
 8000578:	701a      	strb	r2, [r3, #0]
		(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	7a7a      	ldrb	r2, [r7, #9]
 8000582:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6898      	ldr	r0, [r3, #8]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	899b      	ldrh	r3, [r3, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	f000 ff1e 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_Delay(10); // delay 10 ms
 8000594:	200a      	movs	r0, #10
 8000596:	f000 fc5b 	bl	8000e50 <HAL_Delay>
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6918      	ldr	r0, [r3, #16]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	f107 0108 	add.w	r1, r7, #8
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2302      	movs	r3, #2
 80005ae:	f003 f9ea 	bl	8003986 <HAL_SPI_TransmitReceive>
		HAL_Delay(10); // delay 10 ms
 80005b2:	200a      	movs	r0, #10
 80005b4:	f000 fc4c 	bl	8000e50 <HAL_Delay>
		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6898      	ldr	r0, [r3, #8]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	899b      	ldrh	r3, [r3, #12]
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	f000 ff04 	bl	80013d0 <HAL_GPIO_WritePin>

		retval = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80005ce:	e018      	b.n	8000602 <CC1200_Read_Single_Register+0xb6>
	}
	else
	{
		Message_Length = sprintf(Message, "Invalid Register Access\r\n");
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	490e      	ldr	r1, [pc, #56]	; (8000610 <CC1200_Read_Single_Register+0xc4>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 faec 	bl	8008bb4 <siprintf>
 80005dc:	4603      	mov	r3, r0
 80005de:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 80005e2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80005e6:	3301      	adds	r3, #1
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f007 febb 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 80005f6:	2064      	movs	r0, #100	; 0x64
 80005f8:	f000 fc2a 	bl	8000e50 <HAL_Delay>
		retval = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return retval;
 8000602:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8000606:	4618      	mov	r0, r3
 8000608:	3778      	adds	r7, #120	; 0x78
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	080094c0 	.word	0x080094c0

08000614 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
	//RXTransmit function
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0a2      	sub	sp, #136	; 0x88
 800062c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800062e:	f000 fba0 	bl	8000d72 <HAL_Init>
	// CC1200 Functions Test
	uint8_t MCU_Data[2];    // data transmitted to CC1200
	uint8_t CC1200_Data[2]; // data received from CC1200

	CC1200_t SPI_Info;
	SPI_Info.MOSI_Data = MCU_Data;
 8000632:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000636:	66bb      	str	r3, [r7, #104]	; 0x68
	SPI_Info.MISO_Data = CC1200_Data;
 8000638:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800063c:	66fb      	str	r3, [r7, #108]	; 0x6c
	SPI_Info.CS_Port = GPIOB;
 800063e:	4b88      	ldr	r3, [pc, #544]	; (8000860 <main+0x238>)
 8000640:	673b      	str	r3, [r7, #112]	; 0x70
	SPI_Info.CS_Pin = GPIO_PIN_6;
 8000642:	2340      	movs	r3, #64	; 0x40
 8000644:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	SPI_Info.HSPI = &hspi1;
 8000648:	4b86      	ldr	r3, [pc, #536]	; (8000864 <main+0x23c>)
 800064a:	67bb      	str	r3, [r7, #120]	; 0x78

	uint8_t Register_Address = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	//uint8_t Register_Address = 0x2F;
	uint8_t Register_Value = 0xAA;
 8000652:	23aa      	movs	r3, #170	; 0xaa
 8000654:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	//uint8_t CC1200_STATUS_BYTES[2]; // receive status information

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000658:	f000 f914 	bl	8000884 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800065c:	f000 f9be 	bl	80009dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000660:	f000 f992 	bl	8000988 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000664:	f000 f95a 	bl	800091c <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000668:	f007 fdc2 	bl	80081f0 <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(SPI_Info.CS_Port, SPI_Info.CS_Pin, GPIO_PIN_SET); // pull CS high
 800066c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800066e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8000672:	2201      	movs	r2, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f000 feab 	bl	80013d0 <HAL_GPIO_WritePin>

		// CC1200 Functions Test
		char Message[100];
		uint16_t Message_Length;

		Message_Length = sprintf(Message, "CC1200 Single Register Read / Write Test\r\n");
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	497a      	ldr	r1, [pc, #488]	; (8000868 <main+0x240>)
 800067e:	4618      	mov	r0, r3
 8000680:	f008 fa98 	bl	8008bb4 <siprintf>
 8000684:	4603      	mov	r3, r0
 8000686:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 800068a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800068e:	3301      	adds	r3, #1
 8000690:	b29a      	uxth	r2, r3
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f007 fe68 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fbd7 	bl	8000e50 <HAL_Delay>

		CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 80006a2:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80006a6:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 80006aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fee8 	bl	8000484 <CC1200_Write_Single_Register>

		Message_Length = sprintf(Message, "Header: 0X%02X\r\n", MCU_Data[0]);
 80006b4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80006b8:	461a      	mov	r2, r3
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	496b      	ldr	r1, [pc, #428]	; (800086c <main+0x244>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f008 fa78 	bl	8008bb4 <siprintf>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 80006ca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80006ce:	3301      	adds	r3, #1
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 fe48 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f000 fbb7 	bl	8000e50 <HAL_Delay>

		Message_Length = sprintf(Message, "Register Value Transmitted: 0X%02X\r\n", MCU_Data[1]);
 80006e2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80006e6:	461a      	mov	r2, r3
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4961      	ldr	r1, [pc, #388]	; (8000870 <main+0x248>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f008 fa61 	bl	8008bb4 <siprintf>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 80006f8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80006fc:	3301      	adds	r3, #1
 80006fe:	b29a      	uxth	r2, r3
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f007 fe31 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f000 fba0 	bl	8000e50 <HAL_Delay>

		Message_Length = sprintf(Message, "CC1200 Status: 0X%02X\r\n", CC1200_Data[0]);
 8000710:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000714:	461a      	mov	r2, r3
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4956      	ldr	r1, [pc, #344]	; (8000874 <main+0x24c>)
 800071a:	4618      	mov	r0, r3
 800071c:	f008 fa4a 	bl	8008bb4 <siprintf>
 8000720:	4603      	mov	r3, r0
 8000722:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 8000726:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800072a:	3301      	adds	r3, #1
 800072c:	b29a      	uxth	r2, r3
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f007 fe1a 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f000 fb89 	bl	8000e50 <HAL_Delay>

		Message_Length = sprintf(Message, "CC1200 Status: 0X%02X\r\n", CC1200_Data[1]);
 800073e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000742:	461a      	mov	r2, r3
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	494b      	ldr	r1, [pc, #300]	; (8000874 <main+0x24c>)
 8000748:	4618      	mov	r0, r3
 800074a:	f008 fa33 	bl	8008bb4 <siprintf>
 800074e:	4603      	mov	r3, r0
 8000750:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 8000754:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000758:	3301      	adds	r3, #1
 800075a:	b29a      	uxth	r2, r3
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f007 fe03 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 fb72 	bl	8000e50 <HAL_Delay>

		CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 800076c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8000770:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fee8 	bl	800054c <CC1200_Read_Single_Register>

		Message_Length = sprintf(Message, "Header: 0X%02X\r\n", MCU_Data[0]);
 800077c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000780:	461a      	mov	r2, r3
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4939      	ldr	r1, [pc, #228]	; (800086c <main+0x244>)
 8000786:	4618      	mov	r0, r3
 8000788:	f008 fa14 	bl	8008bb4 <siprintf>
 800078c:	4603      	mov	r3, r0
 800078e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 8000792:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 fde4 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 80007a4:	2064      	movs	r0, #100	; 0x64
 80007a6:	f000 fb53 	bl	8000e50 <HAL_Delay>

		Message_Length = sprintf(Message, "Placeholder: 0X%02X\r\n", MCU_Data[1]);
 80007aa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80007ae:	461a      	mov	r2, r3
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4931      	ldr	r1, [pc, #196]	; (8000878 <main+0x250>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f008 f9fd 	bl	8008bb4 <siprintf>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 80007c0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80007c4:	3301      	adds	r3, #1
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f007 fdcd 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	f000 fb3c 	bl	8000e50 <HAL_Delay>

		Message_Length = sprintf(Message, "CC1200 Status: 0X%02X\r\n", CC1200_Data[0]);
 80007d8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80007dc:	461a      	mov	r2, r3
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4924      	ldr	r1, [pc, #144]	; (8000874 <main+0x24c>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f008 f9e6 	bl	8008bb4 <siprintf>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 80007ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80007f2:	3301      	adds	r3, #1
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f007 fdb6 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f000 fb25 	bl	8000e50 <HAL_Delay>

		Message_Length = sprintf(Message, "Register Value Received: 0X%02X\r\n", CC1200_Data[1]);
 8000806:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800080a:	461a      	mov	r2, r3
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	491b      	ldr	r1, [pc, #108]	; (800087c <main+0x254>)
 8000810:	4618      	mov	r0, r3
 8000812:	f008 f9cf 	bl	8008bb4 <siprintf>
 8000816:	4603      	mov	r3, r0
 8000818:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 800081c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000820:	3301      	adds	r3, #1
 8000822:	b29a      	uxth	r2, r3
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f007 fd9f 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f000 fb0e 	bl	8000e50 <HAL_Delay>

		//Register_Address++;

		Message_Length = sprintf(Message, "\r\n");
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4912      	ldr	r1, [pc, #72]	; (8000880 <main+0x258>)
 8000838:	4618      	mov	r0, r3
 800083a:	f008 f9bb 	bl	8008bb4 <siprintf>
 800083e:	4603      	mov	r3, r0
 8000840:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 8000844:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000848:	3301      	adds	r3, #1
 800084a:	b29a      	uxth	r2, r3
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f007 fd8b 	bl	800836c <CDC_Transmit_FS>
		HAL_Delay(500); // delay 500 ms
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f000 faf9 	bl	8000e50 <HAL_Delay>
	{
 800085e:	e70c      	b.n	800067a <main+0x52>
 8000860:	40020400 	.word	0x40020400
 8000864:	200001fc 	.word	0x200001fc
 8000868:	08009540 	.word	0x08009540
 800086c:	0800956c 	.word	0x0800956c
 8000870:	08009580 	.word	0x08009580
 8000874:	080095a8 	.word	0x080095a8
 8000878:	080095c0 	.word	0x080095c0
 800087c:	080095d8 	.word	0x080095d8
 8000880:	080095fc 	.word	0x080095fc

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b092      	sub	sp, #72	; 0x48
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2234      	movs	r2, #52	; 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f008 f986 	bl	8008ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <SystemClock_Config+0x94>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80008ae:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <SystemClock_Config+0x94>)
 80008b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ba:	2305      	movs	r3, #5
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80008c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80008ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f9d5 	bl	8002c88 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80008e4:	f000 f8e8 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ec:	2303      	movs	r3, #3
 80008ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	2101      	movs	r1, #1
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fcf1 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800090c:	f000 f8d4 	bl	8000ab8 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3748      	adds	r7, #72	; 0x48
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40007000 	.word	0x40007000

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI1_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_SPI1_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI1_Init+0x64>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI1_Init+0x64>)
 8000948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI1_Init+0x64>)
 8000950:	2210      	movs	r2, #16
 8000952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI1_Init+0x64>)
 8000968:	220a      	movs	r2, #10
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_SPI1_Init+0x64>)
 800096e:	f002 ff81 	bl	8003874 <HAL_SPI_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000978:	f000 f89e 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200001fc 	.word	0x200001fc
 8000984:	40013000 	.word	0x40013000

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART2_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f003 fa4e 	bl	8003e60 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f875 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000254 	.word	0x20000254
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <MX_GPIO_Init+0xd0>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a2d      	ldr	r2, [pc, #180]	; (8000aac <MX_GPIO_Init+0xd0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a27      	ldr	r2, [pc, #156]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_GPIO_Init+0xd0>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2140      	movs	r1, #64	; 0x40
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a58:	f000 fcba 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 8000a5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MX_GPIO_Init+0xd8>)
 8000a74:	f000 fb1c 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a90:	f000 fb0e 	bl	80010b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2028      	movs	r0, #40	; 0x28
 8000a9a:	f000 fad2 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a9e:	2028      	movs	r0, #40	; 0x28
 8000aa0:	f000 faeb 	bl	800107a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_MspInit+0x5c>)
 8000acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad4:	6253      	str	r3, [r2, #36]	; 0x24
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6213      	str	r3, [r2, #32]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x5c>)
 8000af0:	6a1b      	ldr	r3, [r3, #32]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x5c>)
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x5c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6253      	str	r3, [r2, #36]	; 0x24
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x5c>)
 8000b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fa8a 	bl	800102c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_SPI_MspInit+0x7c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d127      	bne.n	8000b96 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_SPI_MspInit+0x80>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <HAL_SPI_MspInit+0x80>)
 8000b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b50:	6213      	str	r3, [r2, #32]
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_SPI_MspInit+0x80>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_SPI_MspInit+0x80>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_SPI_MspInit+0x80>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_SPI_MspInit+0x80>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b76:	23e0      	movs	r3, #224	; 0xe0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_SPI_MspInit+0x84>)
 8000b92:	f000 fa8d 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40013000 	.word	0x40013000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0x7c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d127      	bne.n	8000c1e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0x80>)
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <HAL_UART_MspInit+0x80>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6253      	str	r3, [r2, #36]	; 0x24
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_UART_MspInit+0x80>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_UART_MspInit+0x80>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_UART_MspInit+0x80>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_UART_MspInit+0x80>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_UART_MspInit+0x84>)
 8000c1a:	f000 fa49 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f000 f8cd 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <USB_LP_IRQHandler+0x10>)
 8000c8a:	f000 fcd5 	bl	8001638 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20001740 	.word	0x20001740

08000c98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ca0:	f000 fbae 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ca8:	f000 fbaa 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f007 ff36 	bl	8008b50 <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20014000 	.word	0x20014000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	20000298 	.word	0x20000298
 8000d18:	20001c60 	.word	0x20001c60

08000d1c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d4e:	f7ff ffe5 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f007 ff03 	bl	8008b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fc67 	bl	8000628 <main>
  bx lr
 8000d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000d64:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 8000d68:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000d6c:	20001c5c 	.word	0x20001c5c

08000d70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_IRQHandler>

08000d72 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f955 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f80e 	bl	8000da4 <HAL_InitTick>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	e001      	b.n	8000d98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d94:	f7ff fe96 	bl	8000ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_InitTick+0x68>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d022      	beq.n	8000dfe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_InitTick+0x6c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_InitTick+0x68>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f962 	bl	8001096 <HAL_SYSTICK_Config>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10f      	bne.n	8000df8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d809      	bhi.n	8000df2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dde:	2200      	movs	r2, #0
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	f04f 30ff 	mov.w	r0, #4294967295
 8000de6:	f000 f92c 	bl	8001042 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_InitTick+0x70>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e007      	b.n	8000e02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e004      	b.n	8000e02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e001      	b.n	8000e02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x1c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x20>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_IncTick+0x1c>)
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	2000029c 	.word	0x2000029c
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <HAL_GetTick+0x10>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	2000029c 	.word	0x2000029c

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff fff0 	bl	8000e3c <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d004      	beq.n	8000e74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_Delay+0x40>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e74:	bf00      	nop
 8000e76:	f7ff ffe1 	bl	8000e3c <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d8f7      	bhi.n	8000e76 <HAL_Delay+0x26>
  {
  }
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4906      	ldr	r1, [pc, #24]	; (8000f2c <__NVIC_EnableIRQ+0x34>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff90 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff2d 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff42 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff90 	bl	8000f84 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5f 	bl	8000f30 <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff35 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffa2 	bl	8000fe8 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c6:	e160      	b.n	800138a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8152 	beq.w	8001384 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	f003 0201 	and.w	r2, r3, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b03      	cmp	r3, #3
 8001164:	d017      	beq.n	8001196 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80ac 	beq.w	8001384 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <HAL_GPIO_Init+0x2f8>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a5d      	ldr	r2, [pc, #372]	; (80013a8 <HAL_GPIO_Init+0x2f8>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6213      	str	r3, [r2, #32]
 8001238:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <HAL_GPIO_Init+0x2f8>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001244:	4a59      	ldr	r2, [pc, #356]	; (80013ac <HAL_GPIO_Init+0x2fc>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <HAL_GPIO_Init+0x300>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d025      	beq.n	80012bc <HAL_GPIO_Init+0x20c>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d01f      	beq.n	80012b8 <HAL_GPIO_Init+0x208>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x308>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d019      	beq.n	80012b4 <HAL_GPIO_Init+0x204>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <HAL_GPIO_Init+0x30c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <HAL_GPIO_Init+0x200>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x310>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d00d      	beq.n	80012ac <HAL_GPIO_Init+0x1fc>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x314>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x1f8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <HAL_GPIO_Init+0x318>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_GPIO_Init+0x1f4>
 80012a0:	2306      	movs	r3, #6
 80012a2:	e00c      	b.n	80012be <HAL_GPIO_Init+0x20e>
 80012a4:	2307      	movs	r3, #7
 80012a6:	e00a      	b.n	80012be <HAL_GPIO_Init+0x20e>
 80012a8:	2305      	movs	r3, #5
 80012aa:	e008      	b.n	80012be <HAL_GPIO_Init+0x20e>
 80012ac:	2304      	movs	r3, #4
 80012ae:	e006      	b.n	80012be <HAL_GPIO_Init+0x20e>
 80012b0:	2303      	movs	r3, #3
 80012b2:	e004      	b.n	80012be <HAL_GPIO_Init+0x20e>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x20e>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_GPIO_Init+0x20e>
 80012bc:	2300      	movs	r3, #0
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	f002 0203 	and.w	r2, r2, #3
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	4093      	lsls	r3, r2
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012ce:	4937      	ldr	r1, [pc, #220]	; (80013ac <HAL_GPIO_Init+0x2fc>)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_GPIO_Init+0x31c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001300:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_GPIO_Init+0x31c>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_GPIO_Init+0x31c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800132a:	4a28      	ldr	r2, [pc, #160]	; (80013cc <HAL_GPIO_Init+0x31c>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_GPIO_Init+0x31c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_GPIO_Init+0x31c>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_GPIO_Init+0x31c>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_GPIO_Init+0x31c>)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f ae97 	bne.w	80010c8 <HAL_GPIO_Init+0x18>
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40021400 	.word	0x40021400
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8f8 	bl	8000614 <HAL_GPIO_EXTI_Callback>
  }
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af06      	add	r7, sp, #24
 8001436:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0d0      	b.n	80015e4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f007 f8da 	bl	8008610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fe41 	bl	80040f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e04c      	b.n	800150e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	3301      	adds	r3, #1
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	b298      	uxth	r0, r3
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	3336      	adds	r3, #54	; 0x36
 80014b2:	4602      	mov	r2, r0
 80014b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	3303      	adds	r3, #3
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	3338      	adds	r3, #56	; 0x38
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	333c      	adds	r3, #60	; 0x3c
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	3340      	adds	r3, #64	; 0x40
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	3301      	adds	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	d3ad      	bcc.n	8001474 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e044      	b.n	80015a8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	3301      	adds	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3b5      	bcc.n	800151e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	687e      	ldr	r6, [r7, #4]
 80015ba:	466d      	mov	r5, sp
 80015bc:	f106 0410 	add.w	r4, r6, #16
 80015c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	1d33      	adds	r3, r6, #4
 80015ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f002 fda9 	bl	8004124 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_PCD_Start+0x16>
 80015fe:	2302      	movs	r3, #2
 8001600:	e016      	b.n	8001630 <HAL_PCD_Start+0x44>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fd58 	bl	80040c4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001614:	2101      	movs	r1, #1
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f006 ffdc 	bl	80085d4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f005 fa3d 	bl	8006aa0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f005 fa35 	bl	8006ab4 <USB_ReadInterrupts>
 800164a:	4603      	mov	r3, r0
 800164c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001654:	d102      	bne.n	800165c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 faf5 	bl	8001c46 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f005 fa27 	bl	8006ab4 <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001670:	d112      	bne.n	8001698 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f007 f83b 	bl	8008706 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f8c7 	bl	8001826 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f005 fa09 	bl	8006ab4 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016ac:	d10b      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 f9f2 	bl	8006ab4 <USB_ReadInterrupts>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016da:	d10b      	bne.n	80016f4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ee:	b292      	uxth	r2, r2
 80016f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 f9db 	bl	8006ab4 <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001708:	d126      	bne.n	8001758 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0204 	bic.w	r2, r2, #4
 800171c:	b292      	uxth	r2, r2
 800171e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0208 	bic.w	r2, r2, #8
 8001734:	b292      	uxth	r2, r2
 8001736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f007 f81c 	bl	8008778 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001752:	b292      	uxth	r2, r2
 8001754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f005 f9a9 	bl	8006ab4 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800176c:	d126      	bne.n	80017bc <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001776:	b29a      	uxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0208 	orr.w	r2, r2, #8
 8001780:	b292      	uxth	r2, r2
 8001782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001798:	b292      	uxth	r2, r2
 800179a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0204 	orr.w	r2, r2, #4
 80017b0:	b292      	uxth	r2, r2
 80017b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f006 ffc4 	bl	8008744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 f977 	bl	8006ab4 <USB_ReadInterrupts>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d0:	d10e      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e4:	b292      	uxth	r2, r2
 80017e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f006 ff7d 	bl	80086ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f005 f95d 	bl	8006ab4 <USB_ReadInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001804:	d10b      	bne.n	800181e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001818:	b292      	uxth	r2, r2
 800181a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_PCD_SetAddress+0x1a>
 800183c:	2302      	movs	r3, #2
 800183e:	e013      	b.n	8001868 <HAL_PCD_SetAddress+0x42>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f005 f90e 	bl	8006a7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	70fb      	strb	r3, [r7, #3]
 8001882:	460b      	mov	r3, r1
 8001884:	803b      	strh	r3, [r7, #0]
 8001886:	4613      	mov	r3, r2
 8001888:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800188e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da0e      	bge.n	80018b4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	705a      	strb	r2, [r3, #1]
 80018b2:	e00e      	b.n	80018d2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0207 	and.w	r2, r3, #7
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018de:	883a      	ldrh	r2, [r7, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	78ba      	ldrb	r2, [r7, #2]
 80018e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018fc:	78bb      	ldrb	r3, [r7, #2]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d102      	bne.n	8001908 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_PCD_EP_Open+0xa6>
 8001912:	2302      	movs	r3, #2
 8001914:	e00e      	b.n	8001934 <HAL_PCD_EP_Open+0xc4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fc1d 	bl	8004164 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001932:	7afb      	ldrb	r3, [r7, #11]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194c:	2b00      	cmp	r3, #0
 800194e:	da0e      	bge.n	800196e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	705a      	strb	r2, [r3, #1]
 800196c:	e00e      	b.n	800198c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 0207 	and.w	r2, r3, #7
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	b2da      	uxtb	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_PCD_EP_Close+0x6a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e00e      	b.n	80019c4 <HAL_PCD_EP_Close+0x88>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 ff3f 	bl	8004838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	460b      	mov	r3, r1
 80019da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	f003 0207 	and.w	r2, r3, #7
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6979      	ldr	r1, [r7, #20]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 f8f1 	bl	8004c10 <USB_EPStartXfer>
 8001a2e:	e005      	b.n	8001a3c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6979      	ldr	r1, [r7, #20]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f8ea 	bl	8004c10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 0207 	and.w	r2, r3, #7
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a68:	681b      	ldr	r3, [r3, #0]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	460b      	mov	r3, r1
 8001a82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a84:	7afb      	ldrb	r3, [r7, #11]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2201      	movs	r2, #1
 8001abe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6979      	ldr	r1, [r7, #20]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 f897 	bl	8004c10 <USB_EPStartXfer>
 8001ae2:	e005      	b.n	8001af0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6979      	ldr	r1, [r7, #20]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 f890 	bl	8004c10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0207 	and.w	r2, r3, #7
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d901      	bls.n	8001b18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e03e      	b.n	8001b96 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da0e      	bge.n	8001b3e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	705a      	strb	r2, [r3, #1]
 8001b3c:	e00c      	b.n	8001b58 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_PCD_EP_SetStall+0x7e>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e00e      	b.n	8001b96 <HAL_PCD_EP_SetStall+0x9c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fe7a 	bl	8006880 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d901      	bls.n	8001bbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e040      	b.n	8001c3e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da0e      	bge.n	8001be2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	705a      	strb	r2, [r3, #1]
 8001be0:	e00e      	b.n	8001c00 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0207 	and.w	r2, r3, #7
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_PCD_EP_ClrStall+0x82>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e00e      	b.n	8001c3e <HAL_PCD_EP_ClrStall+0xa0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68f9      	ldr	r1, [r7, #12]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fe76 	bl	8006920 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b08e      	sub	sp, #56	; 0x38
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c4e:	e2ec      	b.n	800222a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c58:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 8161 	bne.w	8001f32 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d152      	bne.n	8001d20 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8a:	81fb      	strh	r3, [r7, #14]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3328      	adds	r3, #40	; 0x28
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	441a      	add	r2, r3
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f006 fce8 	bl	80086b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 829b 	beq.w	800222a <PCD_EP_ISR_Handler+0x5e4>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 8296 	bne.w	800222a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b292      	uxth	r2, r2
 8001d12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d1e:	e284      	b.n	800222a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d034      	beq.n	8001da4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3306      	adds	r3, #6
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f004 feef 	bl	8006b5c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	823b      	strh	r3, [r7, #16]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	8a3a      	ldrh	r2, [r7, #16]
 8001d94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f006 fc5d 	bl	800865c <HAL_PCD_SetupStageCallback>
 8001da2:	e242      	b.n	800222a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001da4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f280 823e 	bge.w	800222a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dba:	4013      	ands	r3, r2
 8001dbc:	83bb      	strh	r3, [r7, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	8bba      	ldrh	r2, [r7, #28]
 8001dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	3306      	adds	r3, #6
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d019      	beq.n	8001e34 <PCD_EP_ISR_Handler+0x1ee>
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d015      	beq.n	8001e34 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	6959      	ldr	r1, [r3, #20]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f004 fe9f 	bl	8006b5c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	441a      	add	r2, r3
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f006 fc26 	bl	8008680 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 81f2 	bne.w	800222a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d112      	bne.n	8001e94 <PCD_EP_ISR_Handler+0x24e>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	e02f      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x2ae>
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b3e      	cmp	r3, #62	; 0x3e
 8001e9a:	d813      	bhi.n	8001ec4 <PCD_EP_ISR_Handler+0x27e>
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <PCD_EP_ISR_Handler+0x270>
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	e017      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x2ae>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <PCD_EP_ISR_Handler+0x298>
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	3b01      	subs	r3, #1
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f04:	827b      	strh	r3, [r7, #18]
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f0c:	827b      	strh	r3, [r7, #18]
 8001f0e:	8a7b      	ldrh	r3, [r7, #18]
 8001f10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f14:	827b      	strh	r3, [r7, #18]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	8a7b      	ldrh	r3, [r7, #18]
 8001f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	8013      	strh	r3, [r2, #0]
 8001f30:	e17b      	b.n	800222a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f280 80ea 	bge.w	8002122 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f64:	4013      	ands	r3, r2
 8001f66:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f80:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	7b1b      	ldrb	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d122      	bne.n	8001fe4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	6959      	ldr	r1, [r3, #20]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	88da      	ldrh	r2, [r3, #6]
 8001fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fde:	f004 fdbd 	bl	8006b5c <USB_ReadPMA>
 8001fe2:	e07c      	b.n	80020de <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d108      	bne.n	8001ffe <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f927 	bl	8002246 <HAL_PCD_EP_DB_Receive>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ffc:	e06f      	b.n	80020de <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002018:	847b      	strh	r3, [r7, #34]	; 0x22
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	441a      	add	r2, r3
 8002028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800202a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800202e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800203a:	b29b      	uxth	r3, r3
 800203c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d021      	beq.n	800209c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	3302      	adds	r3, #2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4413      	add	r3, r2
 8002076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002080:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002082:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02a      	beq.n	80020de <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	6959      	ldr	r1, [r3, #20]
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	891a      	ldrh	r2, [r3, #8]
 8002094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002096:	f004 fd61 	bl	8006b5c <USB_ReadPMA>
 800209a:	e020      	b.n	80020de <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	3306      	adds	r3, #6
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	895a      	ldrh	r2, [r3, #10]
 80020d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020da:	f004 fd3f 	bl	8006b5c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e4:	441a      	add	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f0:	441a      	add	r2, r3
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <PCD_EP_ISR_Handler+0x4c2>
 80020fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d206      	bcs.n	8002116 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f006 fab6 	bl	8008680 <HAL_PCD_DataOutStageCallback>
 8002114:	e005      	b.n	8002122 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fd77 	bl	8004c10 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	d07e      	beq.n	800222a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800212c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	843b      	strh	r3, [r7, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	441a      	add	r2, r3
 800216a:	8c3b      	ldrh	r3, [r7, #32]
 800216c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002174:	b29b      	uxth	r3, r3
 8002176:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d00c      	beq.n	800219a <PCD_EP_ISR_Handler+0x554>
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	78db      	ldrb	r3, [r3, #3]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800218c:	2b02      	cmp	r3, #2
 800218e:	d146      	bne.n	800221e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002190:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d141      	bne.n	800221e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	3302      	adds	r3, #2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	8bfb      	ldrh	r3, [r7, #30]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d906      	bls.n	80021dc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	8bfb      	ldrh	r3, [r7, #30]
 80021d4:	1ad2      	subs	r2, r2, r3
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	619a      	str	r2, [r3, #24]
 80021da:	e002      	b.n	80021e2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f006 fa60 	bl	80086b6 <HAL_PCD_DataInStageCallback>
 80021f6:	e018      	b.n	800222a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	8bfb      	ldrh	r3, [r7, #30]
 80021fe:	441a      	add	r2, r3
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	8bfb      	ldrh	r3, [r7, #30]
 800220a:	441a      	add	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002216:	4618      	mov	r0, r3
 8002218:	f002 fcfa 	bl	8004c10 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800221c:	e005      	b.n	800222a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800221e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002220:	461a      	mov	r2, r3
 8002222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f91b 	bl	8002460 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002232:	b29b      	uxth	r3, r3
 8002234:	b21b      	sxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f6ff ad0a 	blt.w	8001c50 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3738      	adds	r7, #56	; 0x38
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b088      	sub	sp, #32
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	4613      	mov	r3, r2
 8002252:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d07e      	beq.n	800235c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	3302      	adds	r3, #2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002286:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	8b7b      	ldrh	r3, [r7, #26]
 800228e:	429a      	cmp	r2, r3
 8002290:	d306      	bcc.n	80022a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	8b7b      	ldrh	r3, [r7, #26]
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	e002      	b.n	80022a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d123      	bne.n	80022f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c8:	833b      	strh	r3, [r7, #24]
 80022ca:	8b3b      	ldrh	r3, [r7, #24]
 80022cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022d0:	833b      	strh	r3, [r7, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	441a      	add	r2, r3
 80022e0:	8b3b      	ldrh	r3, [r7, #24]
 80022e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01f      	beq.n	8002340 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	82fb      	strh	r3, [r7, #22]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	441a      	add	r2, r3
 800232a:	8afb      	ldrh	r3, [r7, #22]
 800232c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800233c:	b29b      	uxth	r3, r3
 800233e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8087 	beq.w	8002456 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6959      	ldr	r1, [r3, #20]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	891a      	ldrh	r2, [r3, #8]
 8002354:	8b7b      	ldrh	r3, [r7, #26]
 8002356:	f004 fc01 	bl	8006b5c <USB_ReadPMA>
 800235a:	e07c      	b.n	8002456 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	3306      	adds	r3, #6
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002384:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	8b7b      	ldrh	r3, [r7, #26]
 800238c:	429a      	cmp	r2, r3
 800238e:	d306      	bcc.n	800239e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	8b7b      	ldrh	r3, [r7, #26]
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	e002      	b.n	80023a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d123      	bne.n	80023f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	83fb      	strh	r3, [r7, #30]
 80023c8:	8bfb      	ldrh	r3, [r7, #30]
 80023ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023ce:	83fb      	strh	r3, [r7, #30]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	441a      	add	r2, r3
 80023de:	8bfb      	ldrh	r3, [r7, #30]
 80023e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11f      	bne.n	800243e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002418:	83bb      	strh	r3, [r7, #28]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	8bbb      	ldrh	r3, [r7, #28]
 800242a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800243a:	b29b      	uxth	r3, r3
 800243c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800243e:	8b7b      	ldrh	r3, [r7, #26]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6959      	ldr	r1, [r3, #20]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	895a      	ldrh	r2, [r3, #10]
 8002450:	8b7b      	ldrh	r3, [r7, #26]
 8002452:	f004 fb83 	bl	8006b5c <USB_ReadPMA>
    }
  }

  return count;
 8002456:	8b7b      	ldrh	r3, [r7, #26]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0a2      	sub	sp, #136	; 0x88
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 81c7 	beq.w	8002808 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	3302      	adds	r3, #2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d907      	bls.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	619a      	str	r2, [r3, #24]
 80024c0:	e002      	b.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 80b9 	bne.w	8002644 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d126      	bne.n	8002528 <HAL_PCD_EP_DB_Transmit+0xc8>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	4413      	add	r3, r2
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	011a      	lsls	r2, r3, #4
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	4413      	add	r3, r2
 80024fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800250c:	b29a      	uxth	r2, r3
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800251c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002520:	b29a      	uxth	r2, r3
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e01a      	b.n	800255e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d116      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	4413      	add	r3, r2
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	011a      	lsls	r2, r3, #4
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	4413      	add	r3, r2
 8002552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d126      	bne.n	80025ba <HAL_PCD_EP_DB_Transmit+0x15a>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800259e:	b29a      	uxth	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e017      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d113      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	4413      	add	r3, r2
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	4413      	add	r3, r2
 80025de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2200      	movs	r2, #0
 80025e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f006 f860 	bl	80086b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 82d4 	beq.w	8002baa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261c:	827b      	strh	r3, [r7, #18]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	8a7b      	ldrh	r3, [r7, #18]
 800262e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263e:	b29b      	uxth	r3, r3
 8002640:	8013      	strh	r3, [r2, #0]
 8002642:	e2b2      	b.n	8002baa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d021      	beq.n	8002692 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002698:	2b01      	cmp	r3, #1
 800269a:	f040 8286 	bne.w	8002baa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a6:	441a      	add	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026b4:	441a      	add	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d309      	bcc.n	80026da <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	621a      	str	r2, [r3, #32]
 80026d8:	e015      	b.n	8002706 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026f0:	e009      	b.n	8002706 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2200      	movs	r2, #0
 8002704:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d155      	bne.n	80027ba <HAL_PCD_EP_DB_Transmit+0x35a>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002722:	4413      	add	r3, r2
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	011a      	lsls	r2, r3, #4
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	4413      	add	r3, r2
 8002730:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
 8002736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002738:	2b00      	cmp	r3, #0
 800273a:	d112      	bne.n	8002762 <HAL_PCD_EP_DB_Transmit+0x302>
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002746:	b29a      	uxth	r2, r3
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275a:	b29a      	uxth	r2, r3
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	801a      	strh	r2, [r3, #0]
 8002760:	e047      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002764:	2b3e      	cmp	r3, #62	; 0x3e
 8002766:	d811      	bhi.n	800278c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	64bb      	str	r3, [r7, #72]	; 0x48
 800276e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277a:	3301      	adds	r3, #1
 800277c:	64bb      	str	r3, [r7, #72]	; 0x48
 800277e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002780:	b29b      	uxth	r3, r3
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	b29a      	uxth	r2, r3
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	e032      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x392>
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x342>
 800279c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279e:	3b01      	subs	r3, #1
 80027a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	029b      	lsls	r3, r3, #10
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	801a      	strh	r2, [r3, #0]
 80027b8:	e01b      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d117      	bne.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d6:	4413      	add	r3, r2
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	011a      	lsls	r2, r3, #4
 80027e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e2:	4413      	add	r3, r2
 80027e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6959      	ldr	r1, [r3, #20]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	891a      	ldrh	r2, [r3, #8]
 80027fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002800:	b29b      	uxth	r3, r3
 8002802:	f004 f966 	bl	8006ad2 <USB_WritePMA>
 8002806:	e1d0      	b.n	8002baa <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	3306      	adds	r3, #6
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002830:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800283c:	429a      	cmp	r2, r3
 800283e:	d307      	bcc.n	8002850 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002848:	1ad2      	subs	r2, r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	619a      	str	r2, [r3, #24]
 800284e:	e002      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 80c4 	bne.w	80029e8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d126      	bne.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x456>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	4413      	add	r3, r2
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	011a      	lsls	r2, r3, #4
 8002886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002888:	4413      	add	r3, r2
 800288a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800288e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800289a:	b29a      	uxth	r2, r3
 800289c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e01a      	b.n	80028ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d116      	bne.n	80028ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	677b      	str	r3, [r7, #116]	; 0x74
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d2:	4413      	add	r3, r2
 80028d4:	677b      	str	r3, [r7, #116]	; 0x74
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	011a      	lsls	r2, r3, #4
 80028dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028de:	4413      	add	r3, r2
 80028e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028e4:	673b      	str	r3, [r7, #112]	; 0x70
 80028e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e8:	2200      	movs	r2, #0
 80028ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d12f      	bne.n	800295a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002912:	4413      	add	r3, r2
 8002914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	011a      	lsls	r2, r3, #4
 800291e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002922:	4413      	add	r3, r2
 8002924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800292c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002938:	b29a      	uxth	r2, r3
 800293a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002950:	b29a      	uxth	r2, r3
 8002952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002956:	801a      	strh	r2, [r3, #0]
 8002958:	e017      	b.n	800298a <HAL_PCD_EP_DB_Transmit+0x52a>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d113      	bne.n	800298a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002970:	4413      	add	r3, r2
 8002972:	67bb      	str	r3, [r7, #120]	; 0x78
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	011a      	lsls	r2, r3, #4
 800297a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297c:	4413      	add	r3, r2
 800297e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002982:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002986:	2200      	movs	r2, #0
 8002988:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f005 fe90 	bl	80086b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 8104 	bne.w	8002baa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	8013      	strh	r3, [r2, #0]
 80029e6:	e0e0      	b.n	8002baa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d121      	bne.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	f040 80b4 	bne.w	8002baa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4a:	441a      	add	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a58:	441a      	add	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d309      	bcc.n	8002a7e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a76:	1ad2      	subs	r2, r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	621a      	str	r2, [r3, #32]
 8002a7c:	e015      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002a86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a94:	e009      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	667b      	str	r3, [r7, #100]	; 0x64
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d155      	bne.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x704>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002acc:	4413      	add	r3, r2
 8002ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	011a      	lsls	r2, r3, #4
 8002ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad8:	4413      	add	r3, r2
 8002ada:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d112      	bne.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	e044      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b10:	d811      	bhi.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	657b      	str	r3, [r7, #84]	; 0x54
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b24:	3301      	adds	r3, #1
 8002b26:	657b      	str	r3, [r7, #84]	; 0x54
 8002b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e02f      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	029b      	lsls	r3, r3, #10
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e018      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d114      	bne.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b7a:	4413      	add	r3, r2
 8002b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	011a      	lsls	r2, r3, #4
 8002b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b86:	4413      	add	r3, r2
 8002b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b94:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6959      	ldr	r1, [r3, #20]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	895a      	ldrh	r2, [r3, #10]
 8002ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f003 ff94 	bl	8006ad2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc4:	823b      	strh	r3, [r7, #16]
 8002bc6:	8a3b      	ldrh	r3, [r7, #16]
 8002bc8:	f083 0310 	eor.w	r3, r3, #16
 8002bcc:	823b      	strh	r3, [r7, #16]
 8002bce:	8a3b      	ldrh	r3, [r7, #16]
 8002bd0:	f083 0320 	eor.w	r3, r3, #32
 8002bd4:	823b      	strh	r3, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	8a3b      	ldrh	r3, [r7, #16]
 8002be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3788      	adds	r7, #136	; 0x88
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	4613      	mov	r3, r2
 8002c14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e009      	b.n	8002c4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c3a:	897a      	ldrh	r2, [r7, #10]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2200      	movs	r2, #0
 8002c58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	80da      	strh	r2, [r3, #6]
 8002c62:	e00b      	b.n	8002c7c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2201      	movs	r2, #1
 8002c68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e31d      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9a:	4b94      	ldr	r3, [pc, #592]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca4:	4b91      	ldr	r3, [pc, #580]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d07b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d006      	beq.n	8002cce <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5e>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cce:	4b87      	ldr	r3, [pc, #540]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d06a      	beq.n	8002db0 <HAL_RCC_OscConfig+0x128>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d166      	bne.n	8002db0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e2f7      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x74>
 8002cee:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e02d      	b.n	8002d58 <HAL_RCC_OscConfig+0xd0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x96>
 8002d04:	4b79      	ldr	r3, [pc, #484]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a78      	ldr	r2, [pc, #480]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a75      	ldr	r2, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCC_OscConfig+0xd0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0xb8>
 8002d26:	4b71      	ldr	r3, [pc, #452]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a70      	ldr	r2, [pc, #448]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6e      	ldr	r3, [pc, #440]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6d      	ldr	r2, [pc, #436]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xd0>
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a69      	ldr	r2, [pc, #420]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b67      	ldr	r3, [pc, #412]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a66      	ldr	r2, [pc, #408]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe f86c 	bl	8000e3c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe f868 	bl	8000e3c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e2ad      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe f858 	bl	8000e3c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe f854 	bl	8000e3c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e299      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002da2:	4b52      	ldr	r3, [pc, #328]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x108>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d05a      	beq.n	8002e74 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d119      	bne.n	8002dfe <HAL_RCC_OscConfig+0x176>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd0:	4b46      	ldr	r3, [pc, #280]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x160>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e276      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b40      	ldr	r3, [pc, #256]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	493d      	ldr	r1, [pc, #244]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfc:	e03a      	b.n	8002e74 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d020      	beq.n	8002e48 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e06:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <HAL_RCC_OscConfig+0x268>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f816 	bl	8000e3c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe f812 	bl	8000e3c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e257      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e26:	4b31      	ldr	r3, [pc, #196]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	492a      	ldr	r1, [pc, #168]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 8002e46:	e015      	b.n	8002e74 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_RCC_OscConfig+0x268>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4e:	f7fd fff5 	bl	8000e3c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e56:	f7fd fff1 	bl	8000e3c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e236      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80b8 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d170      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x218>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e21a      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d921      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fc7d 	bl	80037b4 <RCC_SetFlashLatencyFromMSIRange>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e208      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4906      	ldr	r1, [pc, #24]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	061b      	lsls	r3, r3, #24
 8002ee4:	4901      	ldr	r1, [pc, #4]	; (8002eec <HAL_RCC_OscConfig+0x264>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
 8002eea:	e020      	b.n	8002f2e <HAL_RCC_OscConfig+0x2a6>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef4:	4b99      	ldr	r3, [pc, #612]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4996      	ldr	r1, [pc, #600]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f06:	4b95      	ldr	r3, [pc, #596]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	4991      	ldr	r1, [pc, #580]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fc48 	bl	80037b4 <RCC_SetFlashLatencyFromMSIRange>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e1d3      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	0b5b      	lsrs	r3, r3, #13
 8002f34:	3301      	adds	r3, #1
 8002f36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f3e:	4a87      	ldr	r2, [pc, #540]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	0912      	lsrs	r2, r2, #4
 8002f44:	f002 020f 	and.w	r2, r2, #15
 8002f48:	4985      	ldr	r1, [pc, #532]	; (8003160 <HAL_RCC_OscConfig+0x4d8>)
 8002f4a:	5c8a      	ldrb	r2, [r1, r2]
 8002f4c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f4e:	4a85      	ldr	r2, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f52:	4b85      	ldr	r3, [pc, #532]	; (8003168 <HAL_RCC_OscConfig+0x4e0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd ff24 	bl	8000da4 <HAL_InitTick>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d045      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	e1b5      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d029      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f72:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x4e4>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fd ff60 	bl	8000e3c <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f80:	f7fd ff5c 	bl	8000e3c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1a1      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f92:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	496c      	ldr	r1, [pc, #432]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	4967      	ldr	r1, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc6:	4b69      	ldr	r3, [pc, #420]	; (800316c <HAL_RCC_OscConfig+0x4e4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd ff36 	bl	8000e3c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd4:	f7fd ff32 	bl	8000e3c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e177      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d030      	beq.n	8003060 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fd ff16 	bl	8000e3c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003014:	f7fd ff12 	bl	8000e3c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e157      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003026:	4b4d      	ldr	r3, [pc, #308]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x38c>
 8003032:	e015      	b.n	8003060 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003034:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <HAL_RCC_OscConfig+0x4e8>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7fd feff 	bl	8000e3c <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003042:	f7fd fefb 	bl	8000e3c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e140      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80b5 	beq.w	80031d8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10d      	bne.n	800309a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	4a36      	ldr	r2, [pc, #216]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6253      	str	r3, [r2, #36]	; 0x24
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	2301      	movs	r3, #1
 8003098:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d118      	bne.n	80030d8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a32      	ldr	r2, [pc, #200]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b2:	f7fd fec3 	bl	8000e3c <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fd febf 	bl	8000e3c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b64      	cmp	r3, #100	; 0x64
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e104      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x466>
 80030e0:	4b1e      	ldr	r3, [pc, #120]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6353      	str	r3, [r2, #52]	; 0x34
 80030ec:	e02d      	b.n	800314a <HAL_RCC_OscConfig+0x4c2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x488>
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 80030fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003100:	6353      	str	r3, [r2, #52]	; 0x34
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800310c:	6353      	str	r3, [r2, #52]	; 0x34
 800310e:	e01c      	b.n	800314a <HAL_RCC_OscConfig+0x4c2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d10c      	bne.n	8003132 <HAL_RCC_OscConfig+0x4aa>
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	4a0f      	ldr	r2, [pc, #60]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003122:	6353      	str	r3, [r2, #52]	; 0x34
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	4a0c      	ldr	r2, [pc, #48]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6353      	str	r3, [r2, #52]	; 0x34
 8003130:	e00b      	b.n	800314a <HAL_RCC_OscConfig+0x4c2>
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	6353      	str	r3, [r2, #52]	; 0x34
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_RCC_OscConfig+0x4d4>)
 8003144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003148:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d024      	beq.n	800319c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003152:	f7fd fe73 	bl	8000e3c <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003158:	e019      	b.n	800318e <HAL_RCC_OscConfig+0x506>
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	08009654 	.word	0x08009654
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004
 800316c:	42470020 	.word	0x42470020
 8003170:	42470680 	.word	0x42470680
 8003174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003178:	f7fd fe60 	bl	8000e3c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0a3      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0ee      	beq.n	8003178 <HAL_RCC_OscConfig+0x4f0>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319c:	f7fd fe4e 	bl	8000e3c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fd fe4a 	bl	8000e3c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e08d      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1ee      	bne.n	80031a4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031cc:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	4a43      	ldr	r2, [pc, #268]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 80031d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d079      	beq.n	80032d4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d056      	beq.n	8003294 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d13b      	bne.n	8003266 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCC_OscConfig+0x65c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fd fe22 	bl	8000e3c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fd fe1e 	bl	8000e3c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e063      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321a:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	4319      	orrs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	430b      	orrs	r3, r1
 8003232:	492b      	ldr	r1, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0x65c>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fd fdfd 	bl	8000e3c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003246:	f7fd fdf9 	bl	8000e3c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e03e      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x5be>
 8003264:	e036      	b.n	80032d4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HAL_RCC_OscConfig+0x65c>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fd fde6 	bl	8000e3c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fd fde2 	bl	8000e3c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e027      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x5ec>
 8003292:	e01f      	b.n	80032d4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e01a      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_RCC_OscConfig+0x658>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470060 	.word	0x42470060

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e11a      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b8f      	ldr	r3, [pc, #572]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d919      	bls.n	800333e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_ClockConfig+0x34>
 8003310:	4b8a      	ldr	r3, [pc, #552]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a89      	ldr	r2, [pc, #548]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b87      	ldr	r3, [pc, #540]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0201 	bic.w	r2, r3, #1
 8003324:	4985      	ldr	r1, [pc, #532]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332c:	4b83      	ldr	r3, [pc, #524]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0f9      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334a:	4b7d      	ldr	r3, [pc, #500]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	497a      	ldr	r1, [pc, #488]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 808e 	beq.w	8003486 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003372:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d121      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0d7      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800338a:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d115      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0cb      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0bf      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0b7      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 0203 	bic.w	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	495c      	ldr	r1, [pc, #368]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fd fd32 	bl	8000e3c <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d112      	bne.n	8003408 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fd fd2a 	bl	8000e3c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e09b      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fa:	4b51      	ldr	r3, [pc, #324]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b08      	cmp	r3, #8
 8003404:	d1ee      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xfc>
 8003406:	e03e      	b.n	8003486 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d112      	bne.n	8003436 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003412:	f7fd fd13 	bl	8000e3c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e084      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b45      	ldr	r3, [pc, #276]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d1ee      	bne.n	8003412 <HAL_RCC_ClockConfig+0x12a>
 8003434:	e027      	b.n	8003486 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d11d      	bne.n	800347a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7fd fcfc 	bl	8000e3c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e06d      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003456:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_ClockConfig+0x158>
 8003462:	e010      	b.n	8003486 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fd fcea 	bl	8000e3c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e05b      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800347a:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1ee      	bne.n	8003464 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d219      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1be>
 800349a:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a27      	ldr	r2, [pc, #156]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	4923      	ldr	r1, [pc, #140]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_RCC_ClockConfig+0x254>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e034      	b.n	8003532 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4917      	ldr	r1, [pc, #92]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	490f      	ldr	r1, [pc, #60]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003506:	f000 f823 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350a:	4602      	mov	r2, r0
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCC_ClockConfig+0x258>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	490b      	ldr	r1, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003518:	5ccb      	ldrb	r3, [r1, r3]
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 8003520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x264>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fc3c 	bl	8000da4 <HAL_InitTick>
 800352c:	4603      	mov	r3, r0
 800352e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003530:	7afb      	ldrb	r3, [r7, #11]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023c00 	.word	0x40023c00
 8003540:	40023800 	.word	0x40023800
 8003544:	08009654 	.word	0x08009654
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b092      	sub	sp, #72	; 0x48
 8003556:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d00d      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x34>
 8003568:	2b0c      	cmp	r3, #12
 800356a:	f200 80d5 	bhi.w	8003718 <HAL_RCC_GetSysClockFreq+0x1c8>
 800356e:	2b04      	cmp	r3, #4
 8003570:	d002      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x28>
 8003572:	2b08      	cmp	r3, #8
 8003574:	d003      	beq.n	800357e <HAL_RCC_GetSysClockFreq+0x2e>
 8003576:	e0cf      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b72      	ldr	r3, [pc, #456]	; (8003744 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800357a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800357c:	e0da      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800357e:	4b72      	ldr	r3, [pc, #456]	; (8003748 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003582:	e0d7      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	f003 020f 	and.w	r2, r3, #15
 800358c:	4b6f      	ldr	r3, [pc, #444]	; (800374c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003594:	0d9b      	lsrs	r3, r3, #22
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800359e:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d05d      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	2200      	movs	r2, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	4611      	mov	r1, r2
 80035b2:	4604      	mov	r4, r0
 80035b4:	460d      	mov	r5, r1
 80035b6:	4622      	mov	r2, r4
 80035b8:	462b      	mov	r3, r5
 80035ba:	f04f 0000 	mov.w	r0, #0
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c8:	0150      	lsls	r0, r2, #5
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4621      	mov	r1, r4
 80035d0:	1a51      	subs	r1, r2, r1
 80035d2:	6139      	str	r1, [r7, #16]
 80035d4:	4629      	mov	r1, r5
 80035d6:	eb63 0301 	sbc.w	r3, r3, r1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e8:	4659      	mov	r1, fp
 80035ea:	018b      	lsls	r3, r1, #6
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035f2:	4651      	mov	r1, sl
 80035f4:	018a      	lsls	r2, r1, #6
 80035f6:	46d4      	mov	ip, sl
 80035f8:	ebb2 080c 	subs.w	r8, r2, ip
 80035fc:	4659      	mov	r1, fp
 80035fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800360e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003616:	4690      	mov	r8, r2
 8003618:	4699      	mov	r9, r3
 800361a:	4623      	mov	r3, r4
 800361c:	eb18 0303 	adds.w	r3, r8, r3
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	462b      	mov	r3, r5
 8003624:	eb49 0303 	adc.w	r3, r9, r3
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003636:	4629      	mov	r1, r5
 8003638:	024b      	lsls	r3, r1, #9
 800363a:	4620      	mov	r0, r4
 800363c:	4629      	mov	r1, r5
 800363e:	4604      	mov	r4, r0
 8003640:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003644:	4601      	mov	r1, r0
 8003646:	024a      	lsls	r2, r1, #9
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	2200      	movs	r2, #0
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003658:	f7fc fd90 	bl	800017c <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
 8003664:	e055      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2200      	movs	r2, #0
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	627a      	str	r2, [r7, #36]	; 0x24
 800366e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003672:	4642      	mov	r2, r8
 8003674:	464b      	mov	r3, r9
 8003676:	f04f 0000 	mov.w	r0, #0
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	0159      	lsls	r1, r3, #5
 8003680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003684:	0150      	lsls	r0, r2, #5
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	46c4      	mov	ip, r8
 800368c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003690:	4640      	mov	r0, r8
 8003692:	4649      	mov	r1, r9
 8003694:	468c      	mov	ip, r1
 8003696:	eb63 0b0c 	sbc.w	fp, r3, ip
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036aa:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036ae:	ebb2 040a 	subs.w	r4, r2, sl
 80036b2:	eb63 050b 	sbc.w	r5, r3, fp
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	00eb      	lsls	r3, r5, #3
 80036c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c4:	00e2      	lsls	r2, r4, #3
 80036c6:	4614      	mov	r4, r2
 80036c8:	461d      	mov	r5, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	18e3      	adds	r3, r4, r3
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	460b      	mov	r3, r1
 80036d2:	eb45 0303 	adc.w	r3, r5, r3
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036e4:	4629      	mov	r1, r5
 80036e6:	028b      	lsls	r3, r1, #10
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	4604      	mov	r4, r0
 80036ee:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80036f2:	4601      	mov	r1, r0
 80036f4:	028a      	lsls	r2, r1, #10
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2200      	movs	r2, #0
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003706:	f7fc fd39 	bl	800017c <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4613      	mov	r3, r2
 8003710:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003716:	e00d      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0b5b      	lsrs	r3, r3, #13
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3301      	adds	r3, #1
 8003728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003732:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003736:	4618      	mov	r0, r3
 8003738:	3748      	adds	r7, #72	; 0x48
 800373a:	46bd      	mov	sp, r7
 800373c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400
 8003748:	007a1200 	.word	0x007a1200
 800374c:	08009648 	.word	0x08009648

08003750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b02      	ldr	r3, [pc, #8]	; (8003760 <HAL_RCC_GetHCLKFreq+0x10>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003768:	f7ff fff2 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	08009664 	.word	0x08009664

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003790:	f7ff ffde 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0adb      	lsrs	r3, r3, #11
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08009664 	.word	0x08009664

080037b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d12c      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037cc:	4b26      	ldr	r3, [pc, #152]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e016      	b.n	8003812 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6253      	str	r3, [r2, #36]	; 0x24
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003804:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003810:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003818:	d105      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003820:	d101      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003822:	2301      	movs	r3, #1
 8003824:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 0201 	bic.w	r2, r3, #1
 8003840:	490b      	ldr	r1, [pc, #44]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000
 8003870:	40023c00 	.word	0x40023c00

08003874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e07b      	b.n	800397e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003896:	d009      	beq.n	80038ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
 800389e:	e005      	b.n	80038ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd f92c 	bl	8000b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	ea42 0103 	orr.w	r1, r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	f003 0104 	and.w	r1, r3, #4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0210 	and.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b08c      	sub	sp, #48	; 0x30
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003994:	2301      	movs	r3, #1
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x26>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e18a      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x33c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b4:	f7fd fa42 	bl	8000e3c <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d00f      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x70>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039dc:	d107      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x68>
 80039e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d003      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
 80039f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f4:	e15b      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x82>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x82>
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a0e:	e14e      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d003      	beq.n	8003a24 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2205      	movs	r2, #5
 8003a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d007      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a80:	d178      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x10a>
 8003a8a:	8b7b      	ldrh	r3, [r7, #26]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d166      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	1c9a      	adds	r2, r3, #2
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab4:	e053      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d11b      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x176>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_SPI_TransmitReceive+0x176>
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d113      	bne.n	8003afc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	881a      	ldrh	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	1c9a      	adds	r2, r3, #2
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d119      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x1b8>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d014      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	1c9a      	adds	r2, r3, #2
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b3e:	f7fd f97d 	bl	8000e3c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d807      	bhi.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d003      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b5c:	e0a7      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1a6      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x130>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1a1      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x130>
 8003b72:	e07c      	b.n	8003c6e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x1fc>
 8003b7c:	8b7b      	ldrh	r3, [r7, #26]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d16b      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba8:	e057      	b.n	8003c5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x26c>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <HAL_SPI_TransmitReceive+0x26c>
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d114      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d119      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x2ae>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c30:	2301      	movs	r3, #1
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c34:	f7fd f902 	bl	8000e3c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d803      	bhi.n	8003c4c <HAL_SPI_TransmitReceive+0x2c6>
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d102      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x2cc>
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c58:	e029      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1a2      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x224>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d19d      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f8b2 	bl	8003ddc <SPI_EndRxTxTransaction>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c8a:	e010      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	e000      	b.n	8003cae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3730      	adds	r7, #48	; 0x30
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cdc:	f7fd f8ae 	bl	8000e3c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cec:	f7fd f8a6 	bl	8000e3c <HAL_GetTick>
 8003cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	015b      	lsls	r3, r3, #5
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	e054      	b.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d050      	beq.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0c:	f7fd f896 	bl	8000e3c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d902      	bls.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d13d      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3a:	d111      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	d004      	beq.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d107      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d68:	d10f      	bne.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e017      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d19b      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <SPI_EndRxTxTransaction+0x7c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <SPI_EndRxTxTransaction+0x80>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0d5b      	lsrs	r3, r3, #21
 8003df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003df8:	fb02 f303 	mul.w	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e06:	d112      	bne.n	8003e2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2180      	movs	r1, #128	; 0x80
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff ff5a 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e00f      	b.n	8003e4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b80      	cmp	r3, #128	; 0x80
 8003e46:	d0f2      	beq.n	8003e2e <SPI_EndRxTxTransaction+0x52>
 8003e48:	e000      	b.n	8003e4c <SPI_EndRxTxTransaction+0x70>
        break;
 8003e4a:	bf00      	nop
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	165e9f81 	.word	0x165e9f81

08003e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e03f      	b.n	8003ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fc fe90 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f829 	bl	8003efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f3c:	f023 030c 	bic.w	r3, r3, #12
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	430b      	orrs	r3, r1
 8003f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a55      	ldr	r2, [pc, #340]	; (80040bc <UART_SetConfig+0x1c0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d103      	bne.n	8003f72 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f6a:	f7ff fc0f 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	e002      	b.n	8003f78 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f72:	f7ff fbf7 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8003f76:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f80:	d14c      	bne.n	800401c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	4a49      	ldr	r2, [pc, #292]	; (80040c0 <UART_SetConfig+0x1c4>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	0119      	lsls	r1, r3, #4
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009a      	lsls	r2, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb8:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <UART_SetConfig+0x1c4>)
 8003fba:	fba3 0302 	umull	r0, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2064      	movs	r0, #100	; 0x64
 8003fc2:	fb00 f303 	mul.w	r3, r0, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <UART_SetConfig+0x1c4>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fda:	4419      	add	r1, r3
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009a      	lsls	r2, r3, #2
 8003fe6:	441a      	add	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff2:	4b33      	ldr	r3, [pc, #204]	; (80040c0 <UART_SetConfig+0x1c4>)
 8003ff4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2064      	movs	r0, #100	; 0x64
 8003ffc:	fb00 f303 	mul.w	r3, r0, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a2e      	ldr	r2, [pc, #184]	; (80040c0 <UART_SetConfig+0x1c4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 0207 	and.w	r2, r3, #7
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	440a      	add	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800401a:	e04a      	b.n	80040b2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009a      	lsls	r2, r3, #2
 8004026:	441a      	add	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <UART_SetConfig+0x1c4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	0119      	lsls	r1, r3, #4
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <UART_SetConfig+0x1c4>)
 8004054:	fba3 0302 	umull	r0, r3, r3, r2
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2064      	movs	r0, #100	; 0x64
 800405c:	fb00 f303 	mul.w	r3, r0, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <UART_SetConfig+0x1c4>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004072:	4419      	add	r1, r3
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009a      	lsls	r2, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	fbb2 f2f3 	udiv	r2, r2, r3
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <UART_SetConfig+0x1c4>)
 800408c:	fba3 0302 	umull	r0, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	2064      	movs	r0, #100	; 0x64
 8004094:	fb00 f303 	mul.w	r3, r0, r3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	3332      	adds	r3, #50	; 0x32
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <UART_SetConfig+0x1c4>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	440a      	add	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40013800 	.word	0x40013800
 80040c0:	51eb851f 	.word	0x51eb851f

080040c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	b29b      	uxth	r3, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	b29b      	uxth	r3, r3
 800410e:	4013      	ands	r3, r2
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004124:	b084      	sub	sp, #16
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	f107 0014 	add.w	r0, r7, #20
 8004132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	b004      	add	sp, #16
 8004162:	4770      	bx	lr

08004164 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004164:	b480      	push	{r7}
 8004166:	b09b      	sub	sp, #108	; 0x6c
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	78db      	ldrb	r3, [r3, #3]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d81f      	bhi.n	80041d6 <USB_ActivateEndpoint+0x72>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <USB_ActivateEndpoint+0x38>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041c9 	.word	0x080041c9
 80041a4:	080041df 	.word	0x080041df
 80041a8:	080041bb 	.word	0x080041bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041b8:	e012      	b.n	80041e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80041c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041c6:	e00b      	b.n	80041e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041d4:	e004      	b.n	80041e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041dc:	e000      	b.n	80041e0 <USB_ActivateEndpoint+0x7c>
      break;
 80041de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fe:	b29b      	uxth	r3, r3
 8004200:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	b29a      	uxth	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	4313      	orrs	r3, r2
 8004222:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	7b1b      	ldrb	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f040 8149 	bne.w	80044e4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8084 	beq.w	8004364 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4413      	add	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	011a      	lsls	r2, r3, #4
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	88db      	ldrh	r3, [r3, #6]
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	b29b      	uxth	r3, r3
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	81fb      	strh	r3, [r7, #14]
 800429e:	89fb      	ldrh	r3, [r7, #14]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <USB_ActivateEndpoint+0x17c>
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	81bb      	strh	r3, [r7, #12]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	89bb      	ldrh	r3, [r7, #12]
 80042cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	78db      	ldrb	r3, [r3, #3]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d020      	beq.n	800432a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fe:	813b      	strh	r3, [r7, #8]
 8004300:	893b      	ldrh	r3, [r7, #8]
 8004302:	f083 0320 	eor.w	r3, r3, #32
 8004306:	813b      	strh	r3, [r7, #8]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	893b      	ldrh	r3, [r7, #8]
 8004314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004324:	b29b      	uxth	r3, r3
 8004326:	8013      	strh	r3, [r2, #0]
 8004328:	e27f      	b.n	800482a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	897b      	ldrh	r3, [r7, #10]
 800434e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]
 8004362:	e262      	b.n	800482a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	4413      	add	r3, r2
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	011a      	lsls	r2, r3, #4
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	4413      	add	r3, r2
 8004382:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	88db      	ldrh	r3, [r3, #6]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	4413      	add	r3, r2
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	011a      	lsls	r2, r3, #4
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	4413      	add	r3, r2
 80043b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d112      	bne.n	80043ea <USB_ActivateEndpoint+0x286>
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e02f      	b.n	800444a <USB_ActivateEndpoint+0x2e6>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b3e      	cmp	r3, #62	; 0x3e
 80043f0:	d813      	bhi.n	800441a <USB_ActivateEndpoint+0x2b6>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	663b      	str	r3, [r7, #96]	; 0x60
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <USB_ActivateEndpoint+0x2a8>
 8004406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004408:	3301      	adds	r3, #1
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
 800440c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440e:	b29b      	uxth	r3, r3
 8004410:	029b      	lsls	r3, r3, #10
 8004412:	b29a      	uxth	r2, r3
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	801a      	strh	r2, [r3, #0]
 8004418:	e017      	b.n	800444a <USB_ActivateEndpoint+0x2e6>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	663b      	str	r3, [r7, #96]	; 0x60
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <USB_ActivateEndpoint+0x2d0>
 800442e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004430:	3b01      	subs	r3, #1
 8004432:	663b      	str	r3, [r7, #96]	; 0x60
 8004434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004436:	b29b      	uxth	r3, r3
 8004438:	029b      	lsls	r3, r3, #10
 800443a:	b29b      	uxth	r3, r3
 800443c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004444:	b29a      	uxth	r2, r3
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	83fb      	strh	r3, [r7, #30]
 8004458:	8bfb      	ldrh	r3, [r7, #30]
 800445a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01b      	beq.n	800449a <USB_ActivateEndpoint+0x336>
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	83bb      	strh	r3, [r7, #28]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	441a      	add	r2, r3
 8004484:	8bbb      	ldrh	r3, [r7, #28]
 8004486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800448e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004496:	b29b      	uxth	r3, r3
 8004498:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b0:	837b      	strh	r3, [r7, #26]
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044b8:	837b      	strh	r3, [r7, #26]
 80044ba:	8b7b      	ldrh	r3, [r7, #26]
 80044bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044c0:	837b      	strh	r3, [r7, #26]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	441a      	add	r2, r3
 80044cc:	8b7b      	ldrh	r3, [r7, #26]
 80044ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044de:	b29b      	uxth	r3, r3
 80044e0:	8013      	strh	r3, [r2, #0]
 80044e2:	e1a2      	b.n	800482a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800450c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004514:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451c:	b29b      	uxth	r3, r3
 800451e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	65bb      	str	r3, [r7, #88]	; 0x58
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004530:	4413      	add	r3, r2
 8004532:	65bb      	str	r3, [r7, #88]	; 0x58
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	011a      	lsls	r2, r3, #4
 800453a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800453c:	4413      	add	r3, r2
 800453e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004542:	657b      	str	r3, [r7, #84]	; 0x54
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	891b      	ldrh	r3, [r3, #8]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	b29b      	uxth	r3, r3
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004564:	4413      	add	r3, r2
 8004566:	653b      	str	r3, [r7, #80]	; 0x50
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	011a      	lsls	r2, r3, #4
 800456e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004570:	4413      	add	r3, r2
 8004572:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	895b      	ldrh	r3, [r3, #10]
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	b29b      	uxth	r3, r3
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004586:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 8091 	bne.w	80046b4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80045a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80045a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01b      	beq.n	80045e2 <USB_ActivateEndpoint+0x47e>
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	441a      	add	r2, r3
 80045cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80045f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01b      	beq.n	8004632 <USB_ActivateEndpoint+0x4ce>
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004610:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004648:	86bb      	strh	r3, [r7, #52]	; 0x34
 800464a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800464c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004650:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004654:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004658:	86bb      	strh	r3, [r7, #52]	; 0x34
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	441a      	add	r2, r3
 8004664:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	867b      	strh	r3, [r7, #50]	; 0x32
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800469e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8013      	strh	r3, [r2, #0]
 80046b2:	e0ba      	b.n	800482a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01d      	beq.n	800470c <USB_ActivateEndpoint+0x5a8>
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800471c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01d      	beq.n	8004764 <USB_ActivateEndpoint+0x600>
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	441a      	add	r2, r3
 800474c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	78db      	ldrb	r3, [r3, #3]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d024      	beq.n	80047b6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004782:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004786:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800478a:	f083 0320 	eor.w	r3, r3, #32
 800478e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	441a      	add	r2, r3
 800479c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	8013      	strh	r3, [r2, #0]
 80047b4:	e01d      	b.n	80047f2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	441a      	add	r2, r3
 8004814:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800482a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800482e:	4618      	mov	r0, r3
 8004830:	376c      	adds	r7, #108	; 0x6c
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004838:	b480      	push	{r7}
 800483a:	b08d      	sub	sp, #52	; 0x34
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	7b1b      	ldrb	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 808e 	bne.w	8004968 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d044      	beq.n	80048de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	81bb      	strh	r3, [r7, #12]
 8004862:	89bb      	ldrh	r3, [r7, #12]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <USB_DeactivateEndpoint+0x6c>
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	817b      	strh	r3, [r7, #10]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ba:	813b      	strh	r3, [r7, #8]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	893b      	ldrh	r3, [r7, #8]
 80048c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	b29b      	uxth	r3, r3
 80048da:	8013      	strh	r3, [r2, #0]
 80048dc:	e192      	b.n	8004c04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	827b      	strh	r3, [r7, #18]
 80048ec:	8a7b      	ldrh	r3, [r7, #18]
 80048ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01b      	beq.n	800492e <USB_DeactivateEndpoint+0xf6>
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	823b      	strh	r3, [r7, #16]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	8a3b      	ldrh	r3, [r7, #16]
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	81fb      	strh	r3, [r7, #14]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	89fb      	ldrh	r3, [r7, #14]
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
 8004966:	e14d      	b.n	8004c04 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	785b      	ldrb	r3, [r3, #1]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 80a5 	bne.w	8004abc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	843b      	strh	r3, [r7, #32]
 8004980:	8c3b      	ldrh	r3, [r7, #32]
 8004982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <USB_DeactivateEndpoint+0x18a>
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	83fb      	strh	r3, [r7, #30]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	8bfb      	ldrh	r3, [r7, #30]
 80049ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049be:	b29b      	uxth	r3, r3
 80049c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	83bb      	strh	r3, [r7, #28]
 80049d0:	8bbb      	ldrh	r3, [r7, #28]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01b      	beq.n	8004a12 <USB_DeactivateEndpoint+0x1da>
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	837b      	strh	r3, [r7, #26]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	8b7b      	ldrh	r3, [r7, #26]
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	833b      	strh	r3, [r7, #24]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	8b3b      	ldrh	r3, [r7, #24]
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a60:	82fb      	strh	r3, [r7, #22]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	8afb      	ldrh	r3, [r7, #22]
 8004a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a98:	82bb      	strh	r3, [r7, #20]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	8abb      	ldrh	r3, [r7, #20]
 8004aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	8013      	strh	r3, [r2, #0]
 8004aba:	e0a3      	b.n	8004c04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <USB_DeactivateEndpoint+0x2d4>
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <USB_DeactivateEndpoint+0x324>
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004baa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3734      	adds	r7, #52	; 0x34
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b0cc      	sub	sp, #304	; 0x130
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c1e:	6018      	str	r0, [r3, #0]
 8004c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c28:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	f041 817d 	bne.w	8005f36 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d908      	bls.n	8004c6a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c68:	e007      	b.n	8004c7a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	7b1b      	ldrb	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d152      	bne.n	8004d30 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	88da      	ldrh	r2, [r3, #6]
 8004ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004cac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004cb0:	6800      	ldr	r0, [r0, #0]
 8004cb2:	f001 ff0e 	bl	8006ad2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cc2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ce4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ce8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	440a      	add	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	011a      	lsls	r2, r3, #4
 8004d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	f001 b8b5 	b.w	8005e9a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	78db      	ldrb	r3, [r3, #3]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f040 84c6 	bne.w	80056ce <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	f240 8443 	bls.w	80055e6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 823e 	beq.w	800527e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 809a 	bne.w	8004f5c <USB_EPStartXfer+0x34c>
 8004e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e5a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	440a      	add	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	011a      	lsls	r2, r3, #4
 8004e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d122      	bne.n	8004eda <USB_EPStartXfer+0x2ca>
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e079      	b.n	8004fce <USB_EPStartXfer+0x3be>
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ede:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee0:	d81b      	bhi.n	8004f1a <USB_EPStartXfer+0x30a>
 8004ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <USB_EPStartXfer+0x2f2>
 8004ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004efc:	3301      	adds	r3, #1
 8004efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	029b      	lsls	r3, r3, #10
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	e059      	b.n	8004fce <USB_EPStartXfer+0x3be>
 8004f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <USB_EPStartXfer+0x32a>
 8004f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f34:	3b01      	subs	r3, #1
 8004f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	029b      	lsls	r3, r3, #10
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e038      	b.n	8004fce <USB_EPStartXfer+0x3be>
 8004f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	785b      	ldrb	r3, [r3, #1]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d130      	bne.n	8004fce <USB_EPStartXfer+0x3be>
 8004f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f8a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	440a      	add	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	011a      	lsls	r2, r3, #4
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4413      	add	r3, r2
 8004fae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	895b      	ldrh	r3, [r3, #10]
 8004fda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6959      	ldr	r1, [r3, #20]
 8004fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ff4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ff8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ffc:	6800      	ldr	r0, [r0, #0]
 8004ffe:	f001 fd68 	bl	8006ad2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005012:	441a      	add	r2, r3
 8005014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d90f      	bls.n	800505c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800503c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	621a      	str	r2, [r3, #32]
 800505a:	e00e      	b.n	800507a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800505c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800506c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800507a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 809a 	bne.w	80051c0 <USB_EPStartXfer+0x5b0>
 800508c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005090:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005094:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005098:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050be:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	440a      	add	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	011a      	lsls	r2, r3, #4
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d122      	bne.n	800513e <USB_EPStartXfer+0x52e>
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800510a:	b29a      	uxth	r2, r3
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512e:	b29a      	uxth	r2, r3
 8005130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005134:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e083      	b.n	8005246 <USB_EPStartXfer+0x636>
 800513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005142:	2b3e      	cmp	r3, #62	; 0x3e
 8005144:	d81b      	bhi.n	800517e <USB_EPStartXfer+0x56e>
 8005146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <USB_EPStartXfer+0x556>
 800515c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005160:	3301      	adds	r3, #1
 8005162:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005166:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800516a:	b29b      	uxth	r3, r3
 800516c:	029b      	lsls	r3, r3, #10
 800516e:	b29a      	uxth	r2, r3
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e063      	b.n	8005246 <USB_EPStartXfer+0x636>
 800517e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <USB_EPStartXfer+0x58e>
 8005194:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005198:	3b01      	subs	r3, #1
 800519a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800519e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	029b      	lsls	r3, r3, #10
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	801a      	strh	r2, [r3, #0]
 80051be:	e042      	b.n	8005246 <USB_EPStartXfer+0x636>
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d13a      	bne.n	8005246 <USB_EPStartXfer+0x636>
 80051d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005202:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	440a      	add	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	011a      	lsls	r2, r3, #4
 800521a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4413      	add	r3, r2
 8005226:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005238:	b29a      	uxth	r2, r3
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	891b      	ldrh	r3, [r3, #8]
 8005252:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6959      	ldr	r1, [r3, #20]
 8005262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005266:	b29b      	uxth	r3, r3
 8005268:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800526c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005270:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005274:	6800      	ldr	r0, [r0, #0]
 8005276:	f001 fc2c 	bl	8006ad2 <USB_WritePMA>
 800527a:	f000 be0e 	b.w	8005e9a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d16d      	bne.n	800536a <USB_EPStartXfer+0x75a>
 800528e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
 800529a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ae:	4413      	add	r3, r2
 80052b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	011a      	lsls	r2, r3, #4
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	4413      	add	r3, r2
 80052c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d112      	bne.n	80052f8 <USB_EPStartXfer+0x6e8>
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	e063      	b.n	80053c0 <USB_EPStartXfer+0x7b0>
 80052f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fc:	2b3e      	cmp	r3, #62	; 0x3e
 80052fe:	d817      	bhi.n	8005330 <USB_EPStartXfer+0x720>
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800530a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <USB_EPStartXfer+0x710>
 8005316:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800531a:	3301      	adds	r3, #1
 800531c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005320:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29a      	uxth	r2, r3
 800532a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	e047      	b.n	80053c0 <USB_EPStartXfer+0x7b0>
 8005330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <USB_EPStartXfer+0x740>
 8005346:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800534a:	3b01      	subs	r3, #1
 800534c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005350:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005354:	b29b      	uxth	r3, r3
 8005356:	029b      	lsls	r3, r3, #10
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005362:	b29a      	uxth	r2, r3
 8005364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e02a      	b.n	80053c0 <USB_EPStartXfer+0x7b0>
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d122      	bne.n	80053c0 <USB_EPStartXfer+0x7b0>
 800537a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
 8005386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539a:	4413      	add	r3, r2
 800539c:	653b      	str	r3, [r7, #80]	; 0x50
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	011a      	lsls	r2, r3, #4
 80053ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ae:	4413      	add	r3, r2
 80053b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	891b      	ldrh	r3, [r3, #8]
 80053cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6959      	ldr	r1, [r3, #20]
 80053dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053ee:	6800      	ldr	r0, [r0, #0]
 80053f0:	f001 fb6f 	bl	8006ad2 <USB_WritePMA>
            ep->xfer_buff += len;
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005404:	441a      	add	r2, r3
 8005406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90f      	bls.n	800544e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	621a      	str	r2, [r3, #32]
 800544c:	e00e      	b.n	800546c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800545e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2200      	movs	r2, #0
 800546a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	643b      	str	r3, [r7, #64]	; 0x40
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d16d      	bne.n	8005564 <USB_EPStartXfer+0x954>
 8005488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
 8005494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	4413      	add	r3, r2
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	011a      	lsls	r2, r3, #4
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	4413      	add	r3, r2
 80054be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
 80054c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d112      	bne.n	80054f2 <USB_EPStartXfer+0x8e2>
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	e05d      	b.n	80055ae <USB_EPStartXfer+0x99e>
 80054f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f6:	2b3e      	cmp	r3, #62	; 0x3e
 80054f8:	d817      	bhi.n	800552a <USB_EPStartXfer+0x91a>
 80054fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <USB_EPStartXfer+0x90a>
 8005510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005514:	3301      	adds	r3, #1
 8005516:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800551a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29a      	uxth	r2, r3
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	801a      	strh	r2, [r3, #0]
 8005528:	e041      	b.n	80055ae <USB_EPStartXfer+0x99e>
 800552a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <USB_EPStartXfer+0x93a>
 8005540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005544:	3b01      	subs	r3, #1
 8005546:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800554a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800554e:	b29b      	uxth	r3, r3
 8005550:	029b      	lsls	r3, r3, #10
 8005552:	b29b      	uxth	r3, r3
 8005554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555c:	b29a      	uxth	r2, r3
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	e024      	b.n	80055ae <USB_EPStartXfer+0x99e>
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d11c      	bne.n	80055ae <USB_EPStartXfer+0x99e>
 8005574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005588:	4413      	add	r3, r2
 800558a:	643b      	str	r3, [r7, #64]	; 0x40
 800558c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	011a      	lsls	r2, r3, #4
 800559a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559c:	4413      	add	r3, r2
 800559e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	895b      	ldrh	r3, [r3, #10]
 80055ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6959      	ldr	r1, [r3, #20]
 80055ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055dc:	6800      	ldr	r0, [r0, #0]
 80055de:	f001 fa78 	bl	8006ad2 <USB_WritePMA>
 80055e2:	f000 bc5a 	b.w	8005e9a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	441a      	add	r2, r3
 800563a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800563e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564e:	b29b      	uxth	r3, r3
 8005650:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800565e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566c:	b29b      	uxth	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005672:	4413      	add	r3, r2
 8005674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	011a      	lsls	r2, r3, #4
 8005684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005686:	4413      	add	r3, r2
 8005688:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800568c:	65bb      	str	r3, [r7, #88]	; 0x58
 800568e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005692:	b29a      	uxth	r2, r3
 8005694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005696:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	891b      	ldrh	r3, [r3, #8]
 80056a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6959      	ldr	r1, [r3, #20]
 80056b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056c6:	6800      	ldr	r0, [r0, #0]
 80056c8:	f001 fa03 	bl	8006ad2 <USB_WritePMA>
 80056cc:	e3e5      	b.n	8005e9a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80056ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 81bc 	beq.w	8005ae8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005774:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800577e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d16d      	bne.n	800586a <USB_EPStartXfer+0xc5a>
 800578e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	67bb      	str	r3, [r7, #120]	; 0x78
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ae:	4413      	add	r3, r2
 80057b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80057b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	011a      	lsls	r2, r3, #4
 80057c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c2:	4413      	add	r3, r2
 80057c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057c8:	677b      	str	r3, [r7, #116]	; 0x74
 80057ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d112      	bne.n	80057f8 <USB_EPStartXfer+0xbe8>
 80057d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e060      	b.n	80058ba <USB_EPStartXfer+0xcaa>
 80057f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fc:	2b3e      	cmp	r3, #62	; 0x3e
 80057fe:	d817      	bhi.n	8005830 <USB_EPStartXfer+0xc20>
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800580a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <USB_EPStartXfer+0xc10>
 8005816:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800581a:	3301      	adds	r3, #1
 800581c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005820:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005824:	b29b      	uxth	r3, r3
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	b29a      	uxth	r2, r3
 800582a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e044      	b.n	80058ba <USB_EPStartXfer+0xcaa>
 8005830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800583a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <USB_EPStartXfer+0xc40>
 8005846:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800584a:	3b01      	subs	r3, #1
 800584c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005850:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005862:	b29a      	uxth	r2, r3
 8005864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e027      	b.n	80058ba <USB_EPStartXfer+0xcaa>
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d11f      	bne.n	80058ba <USB_EPStartXfer+0xcaa>
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005890:	4413      	add	r3, r2
 8005892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	011a      	lsls	r2, r3, #4
 80058a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	895b      	ldrh	r3, [r3, #10]
 80058c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6959      	ldr	r1, [r3, #20]
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058e8:	6800      	ldr	r0, [r0, #0]
 80058ea:	f001 f8f2 	bl	8006ad2 <USB_WritePMA>
          ep->xfer_buff += len;
 80058ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fe:	441a      	add	r2, r3
 8005900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800590c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	429a      	cmp	r2, r3
 8005926:	d90f      	bls.n	8005948 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005938:	1ad2      	subs	r2, r2, r3
 800593a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	621a      	str	r2, [r3, #32]
 8005946:	e00e      	b.n	8005966 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8295 	beq.w	8005e9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d16d      	bne.n	8005a5c <USB_EPStartXfer+0xe4c>
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	66bb      	str	r3, [r7, #104]	; 0x68
 800598c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599a:	b29b      	uxth	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a0:	4413      	add	r3, r2
 80059a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ba:	667b      	str	r3, [r7, #100]	; 0x64
 80059bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d112      	bne.n	80059ea <USB_EPStartXfer+0xdda>
 80059c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	e063      	b.n	8005ab2 <USB_EPStartXfer+0xea2>
 80059ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ee:	2b3e      	cmp	r3, #62	; 0x3e
 80059f0:	d817      	bhi.n	8005a22 <USB_EPStartXfer+0xe12>
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <USB_EPStartXfer+0xe02>
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	e047      	b.n	8005ab2 <USB_EPStartXfer+0xea2>
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <USB_EPStartXfer+0xe32>
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	029b      	lsls	r3, r3, #10
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	e02a      	b.n	8005ab2 <USB_EPStartXfer+0xea2>
 8005a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d122      	bne.n	8005ab2 <USB_EPStartXfer+0xea2>
 8005a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	673b      	str	r3, [r7, #112]	; 0x70
 8005a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a8c:	4413      	add	r3, r2
 8005a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	011a      	lsls	r2, r3, #4
 8005a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	891b      	ldrh	r3, [r3, #8]
 8005abe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6959      	ldr	r1, [r3, #20]
 8005ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ad8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005adc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ae0:	6800      	ldr	r0, [r0, #0]
 8005ae2:	f000 fff6 	bl	8006ad2 <USB_WritePMA>
 8005ae6:	e1d8      	b.n	8005e9a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d178      	bne.n	8005bea <USB_EPStartXfer+0xfda>
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	011a      	lsls	r2, r3, #4
 8005b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b34:	4413      	add	r3, r2
 8005b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d116      	bne.n	8005b74 <USB_EPStartXfer+0xf64>
 8005b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	e06b      	b.n	8005c4c <USB_EPStartXfer+0x103c>
 8005b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b78:	2b3e      	cmp	r3, #62	; 0x3e
 8005b7a:	d818      	bhi.n	8005bae <USB_EPStartXfer+0xf9e>
 8005b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <USB_EPStartXfer+0xf8c>
 8005b92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b96:	3301      	adds	r3, #1
 8005b98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	e04e      	b.n	8005c4c <USB_EPStartXfer+0x103c>
 8005bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <USB_EPStartXfer+0xfbe>
 8005bc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	029b      	lsls	r3, r3, #10
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	e030      	b.n	8005c4c <USB_EPStartXfer+0x103c>
 8005bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d128      	bne.n	8005c4c <USB_EPStartXfer+0x103c>
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c1e:	4413      	add	r3, r2
 8005c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	011a      	lsls	r2, r3, #4
 8005c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	891b      	ldrh	r3, [r3, #8]
 8005c58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6959      	ldr	r1, [r3, #20]
 8005c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c72:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c76:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c7a:	6800      	ldr	r0, [r0, #0]
 8005c7c:	f000 ff29 	bl	8006ad2 <USB_WritePMA>
          ep->xfer_buff += len;
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c90:	441a      	add	r2, r3
 8005c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d90f      	bls.n	8005cda <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	621a      	str	r2, [r3, #32]
 8005cd8:	e00e      	b.n	8005cf8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80cc 	beq.w	8005e9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d178      	bne.n	8005e12 <USB_EPStartXfer+0x1202>
 8005d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d44:	4413      	add	r3, r2
 8005d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d116      	bne.n	8005d9c <USB_EPStartXfer+0x118c>
 8005d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e064      	b.n	8005e66 <USB_EPStartXfer+0x1256>
 8005d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da0:	2b3e      	cmp	r3, #62	; 0x3e
 8005da2:	d818      	bhi.n	8005dd6 <USB_EPStartXfer+0x11c6>
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <USB_EPStartXfer+0x11b4>
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e047      	b.n	8005e66 <USB_EPStartXfer+0x1256>
 8005dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <USB_EPStartXfer+0x11e6>
 8005dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df0:	3b01      	subs	r3, #1
 8005df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	029b      	lsls	r3, r3, #10
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	e029      	b.n	8005e66 <USB_EPStartXfer+0x1256>
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d121      	bne.n	8005e66 <USB_EPStartXfer+0x1256>
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e38:	4413      	add	r3, r2
 8005e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	011a      	lsls	r2, r3, #4
 8005e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e50:	4413      	add	r3, r2
 8005e52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	895b      	ldrh	r3, [r3, #10]
 8005e72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6959      	ldr	r1, [r3, #20]
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e94:	6800      	ldr	r0, [r0, #0]
 8005e96:	f000 fe1c 	bl	8006ad2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ebc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec8:	8013      	strh	r3, [r2, #0]
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ed2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ed6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	f082 0210 	eor.w	r2, r2, #16
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005eea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ef2:	8812      	ldrh	r2, [r2, #0]
 8005ef4:	f082 0220 	eor.w	r2, r2, #32
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f18:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
 8005f32:	f000 bc9f 	b.w	8006874 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	7b1b      	ldrb	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 80ae 	bne.w	80060a4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d917      	bls.n	8005f94 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f84:	1ad2      	subs	r2, r2, r3
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	619a      	str	r2, [r3, #24]
 8005f92:	e00e      	b.n	8005fb2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	011a      	lsls	r2, r3, #4
 8005fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fee:	4413      	add	r3, r2
 8005ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d116      	bne.n	800602e <USB_EPStartXfer+0x141e>
 8006000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800600c:	b29a      	uxth	r2, r3
 800600e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e3e8      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
 800602e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006032:	2b3e      	cmp	r3, #62	; 0x3e
 8006034:	d818      	bhi.n	8006068 <USB_EPStartXfer+0x1458>
 8006036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <USB_EPStartXfer+0x1446>
 800604c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006050:	3301      	adds	r3, #1
 8006052:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006056:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800605a:	b29b      	uxth	r3, r3
 800605c:	029b      	lsls	r3, r3, #10
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e3cb      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
 8006068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <USB_EPStartXfer+0x1478>
 800607e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006082:	3b01      	subs	r3, #1
 8006084:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006088:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e3ad      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	78db      	ldrb	r3, [r3, #3]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	f040 8200 	bne.w	80064b6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 8091 	bne.w	80061ea <USB_EPStartXfer+0x15da>
 80060c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060ec:	4413      	add	r3, r2
 80060ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	011a      	lsls	r2, r3, #4
 8006100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006104:	4413      	add	r3, r2
 8006106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800610a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d116      	bne.n	800614c <USB_EPStartXfer+0x153c>
 800611e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800612a:	b29a      	uxth	r2, r3
 800612c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006142:	b29a      	uxth	r2, r3
 8006144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e083      	b.n	8006254 <USB_EPStartXfer+0x1644>
 800614c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b3e      	cmp	r3, #62	; 0x3e
 800615a:	d820      	bhi.n	800619e <USB_EPStartXfer+0x158e>
 800615c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800616e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <USB_EPStartXfer+0x157c>
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006190:	b29b      	uxth	r3, r3
 8006192:	029b      	lsls	r3, r3, #10
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e05a      	b.n	8006254 <USB_EPStartXfer+0x1644>
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <USB_EPStartXfer+0x15be>
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c8:	3b01      	subs	r3, #1
 80061ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	029b      	lsls	r3, r3, #10
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	e034      	b.n	8006254 <USB_EPStartXfer+0x1644>
 80061ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d12c      	bne.n	8006254 <USB_EPStartXfer+0x1644>
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800621e:	4413      	add	r3, r2
 8006220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006236:	4413      	add	r3, r2
 8006238:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800623c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	b29a      	uxth	r2, r3
 800624e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 8091 	bne.w	8006396 <USB_EPStartXfer+0x1786>
 8006274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006298:	4413      	add	r3, r2
 800629a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	011a      	lsls	r2, r3, #4
 80062ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d116      	bne.n	80062f8 <USB_EPStartXfer+0x16e8>
 80062ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e07c      	b.n	80063f2 <USB_EPStartXfer+0x17e2>
 80062f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b3e      	cmp	r3, #62	; 0x3e
 8006306:	d820      	bhi.n	800634a <USB_EPStartXfer+0x173a>
 8006308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	085b      	lsrs	r3, r3, #1
 8006316:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800631a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <USB_EPStartXfer+0x1728>
 800632e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006332:	3301      	adds	r3, #1
 8006334:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006338:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800633c:	b29b      	uxth	r3, r3
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	b29a      	uxth	r2, r3
 8006342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e053      	b.n	80063f2 <USB_EPStartXfer+0x17e2>
 800634a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800635c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <USB_EPStartXfer+0x176a>
 8006370:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006374:	3b01      	subs	r3, #1
 8006376:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800637a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800637e:	b29b      	uxth	r3, r3
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e02d      	b.n	80063f2 <USB_EPStartXfer+0x17e2>
 8006396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d125      	bne.n	80063f2 <USB_EPStartXfer+0x17e2>
 80063a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063bc:	4413      	add	r3, r2
 80063be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	011a      	lsls	r2, r3, #4
 80063d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063d4:	4413      	add	r3, r2
 80063d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 81fe 	beq.w	8006800 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006424:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <USB_EPStartXfer+0x182c>
 8006430:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10d      	bne.n	8006458 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800643c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 81db 	bne.w	8006800 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800644a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 81d4 	bne.w	8006800 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]
 80064b4:	e1a4      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	78db      	ldrb	r3, [r3, #3]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	f040 819a 	bne.w	80067fc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d917      	bls.n	8006514 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80064e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006504:	1ad2      	subs	r2, r2, r3
 8006506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	619a      	str	r2, [r3, #24]
 8006512:	e00e      	b.n	8006532 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2200      	movs	r2, #0
 8006530:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d178      	bne.n	8006634 <USB_EPStartXfer+0x1a24>
 8006542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006546:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655e:	b29b      	uxth	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006566:	4413      	add	r3, r2
 8006568:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800656c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	011a      	lsls	r2, r3, #4
 800657a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800657e:	4413      	add	r3, r2
 8006580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006584:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d116      	bne.n	80065be <USB_EPStartXfer+0x19ae>
 8006590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	e06b      	b.n	8006696 <USB_EPStartXfer+0x1a86>
 80065be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c2:	2b3e      	cmp	r3, #62	; 0x3e
 80065c4:	d818      	bhi.n	80065f8 <USB_EPStartXfer+0x19e8>
 80065c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <USB_EPStartXfer+0x19d6>
 80065dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e0:	3301      	adds	r3, #1
 80065e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	029b      	lsls	r3, r3, #10
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	e04e      	b.n	8006696 <USB_EPStartXfer+0x1a86>
 80065f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <USB_EPStartXfer+0x1a08>
 800660e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006612:	3b01      	subs	r3, #1
 8006614:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	e030      	b.n	8006696 <USB_EPStartXfer+0x1a86>
 8006634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d128      	bne.n	8006696 <USB_EPStartXfer+0x1a86>
 8006644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006668:	4413      	add	r3, r2
 800666a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	011a      	lsls	r2, r3, #4
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	4413      	add	r3, r2
 8006682:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006686:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800668a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668e:	b29a      	uxth	r2, r3
 8006690:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d178      	bne.n	80067a6 <USB_EPStartXfer+0x1b96>
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d8:	4413      	add	r3, r2
 80066da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	011a      	lsls	r2, r3, #4
 80066ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d116      	bne.n	8006730 <USB_EPStartXfer+0x1b20>
 8006702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	e067      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
 8006730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006734:	2b3e      	cmp	r3, #62	; 0x3e
 8006736:	d818      	bhi.n	800676a <USB_EPStartXfer+0x1b5a>
 8006738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673c:	085b      	lsrs	r3, r3, #1
 800673e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <USB_EPStartXfer+0x1b48>
 800674e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006752:	3301      	adds	r3, #1
 8006754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800675c:	b29b      	uxth	r3, r3
 800675e:	029b      	lsls	r3, r3, #10
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e04a      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
 800676a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <USB_EPStartXfer+0x1b7a>
 8006780:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006784:	3b01      	subs	r3, #1
 8006786:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800678a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800678e:	b29b      	uxth	r3, r3
 8006790:	029b      	lsls	r3, r3, #10
 8006792:	b29b      	uxth	r3, r3
 8006794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679c:	b29a      	uxth	r2, r3
 800679e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	e02c      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
 80067a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d124      	bne.n	8006800 <USB_EPStartXfer+0x1bf0>
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067cc:	4413      	add	r3, r2
 80067ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	011a      	lsls	r2, r3, #4
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e4:	4413      	add	r3, r2
 80067e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e001      	b.n	8006800 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e03a      	b.n	8006876 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800682a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800682e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006832:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006836:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800683a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800683e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	785b      	ldrb	r3, [r3, #1]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d020      	beq.n	80068d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a8:	81bb      	strh	r3, [r7, #12]
 80068aa:	89bb      	ldrh	r3, [r7, #12]
 80068ac:	f083 0310 	eor.w	r3, r3, #16
 80068b0:	81bb      	strh	r3, [r7, #12]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	89bb      	ldrh	r3, [r7, #12]
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
 80068d2:	e01f      	b.n	8006914 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	81fb      	strh	r3, [r7, #14]
 80068ec:	89fb      	ldrh	r3, [r7, #14]
 80068ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068f2:	81fb      	strh	r3, [r7, #14]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	441a      	add	r2, r3
 80068fe:	89fb      	ldrh	r3, [r7, #14]
 8006900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006910:	b29b      	uxth	r3, r3
 8006912:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	7b1b      	ldrb	r3, [r3, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 809d 	bne.w	8006a6e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d04c      	beq.n	80069d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	823b      	strh	r3, [r7, #16]
 800694a:	8a3b      	ldrh	r3, [r7, #16]
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01b      	beq.n	800698c <USB_EPClearStall+0x6c>
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	81fb      	strh	r3, [r7, #14]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	89fb      	ldrh	r3, [r7, #14]
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d06c      	beq.n	8006a6e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069aa:	81bb      	strh	r3, [r7, #12]
 80069ac:	89bb      	ldrh	r3, [r7, #12]
 80069ae:	f083 0320 	eor.w	r3, r3, #32
 80069b2:	81bb      	strh	r3, [r7, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	441a      	add	r2, r3
 80069be:	89bb      	ldrh	r3, [r7, #12]
 80069c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]
 80069d4:	e04b      	b.n	8006a6e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	82fb      	strh	r3, [r7, #22]
 80069e4:	8afb      	ldrh	r3, [r7, #22]
 80069e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d01b      	beq.n	8006a26 <USB_EPClearStall+0x106>
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a04:	82bb      	strh	r3, [r7, #20]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	441a      	add	r2, r3
 8006a10:	8abb      	ldrh	r3, [r7, #20]
 8006a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3c:	827b      	strh	r3, [r7, #18]
 8006a3e:	8a7b      	ldrh	r3, [r7, #18]
 8006a40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a44:	827b      	strh	r3, [r7, #18]
 8006a46:	8a7b      	ldrh	r3, [r7, #18]
 8006a48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a4c:	827b      	strh	r3, [r7, #18]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	8a7b      	ldrh	r3, [r7, #18]
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b08d      	sub	sp, #52	; 0x34
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	4611      	mov	r1, r2
 8006ade:	461a      	mov	r2, r3
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	80fb      	strh	r3, [r7, #6]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ae8:	88bb      	ldrh	r3, [r7, #4]
 8006aea:	3301      	adds	r3, #1
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	005a      	lsls	r2, r3, #1
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0a:	e01e      	b.n	8006b4a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	3301      	adds	r3, #1
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	3302      	adds	r3, #2
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	3302      	adds	r3, #2
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	3301      	adds	r3, #1
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	3b01      	subs	r3, #1
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1dd      	bne.n	8006b0c <USB_WritePMA+0x3a>
  }
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	3734      	adds	r7, #52	; 0x34
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b08b      	sub	sp, #44	; 0x2c
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4611      	mov	r1, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	80fb      	strh	r3, [r7, #6]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b72:	88bb      	ldrh	r3, [r7, #4]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	005a      	lsls	r2, r3, #1
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
 8006b94:	e01b      	b.n	8006bce <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	0a1b      	lsrs	r3, r3, #8
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e0      	bne.n	8006b96 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bd4:	88bb      	ldrh	r3, [r7, #4]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	701a      	strb	r2, [r3, #0]
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	372c      	adds	r7, #44	; 0x2c
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7c1b      	ldrb	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d115      	bne.n	8006c3e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c16:	2202      	movs	r2, #2
 8006c18:	2181      	movs	r1, #129	; 0x81
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fe2f 	bl	800887e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 fe25 	bl	800887e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006c3c:	e012      	b.n	8006c64 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c3e:	2340      	movs	r3, #64	; 0x40
 8006c40:	2202      	movs	r2, #2
 8006c42:	2181      	movs	r1, #129	; 0x81
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fe1a 	bl	800887e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	2202      	movs	r2, #2
 8006c54:	2101      	movs	r1, #1
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fe11 	bl	800887e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c64:	2308      	movs	r3, #8
 8006c66:	2203      	movs	r2, #3
 8006c68:	2182      	movs	r1, #130	; 0x82
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fe07 	bl	800887e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006c76:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c7a:	f001 ff27 	bl	8008acc <USBD_static_malloc>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e026      	b.n	8006ce4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c9c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7c1b      	ldrb	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cca:	2101      	movs	r1, #1
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fec7 	bl	8008a60 <USBD_LL_PrepareReceive>
 8006cd2:	e007      	b.n	8006ce4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 febe 	bl	8008a60 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cfe:	2181      	movs	r1, #129	; 0x81
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fde2 	bl	80088ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fddb 	bl	80088ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d1c:	2182      	movs	r1, #130	; 0x82
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fdd3 	bl	80088ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 fecd 	bl	8008ae4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d039      	beq.n	8006dfa <USBD_CDC_Setup+0x9e>
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d17f      	bne.n	8006e8a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d029      	beq.n	8006de6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	b25b      	sxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da11      	bge.n	8006dc0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006da8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	88d2      	ldrh	r2, [r2, #6]
 8006dae:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006db0:	6939      	ldr	r1, [r7, #16]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	88db      	ldrh	r3, [r3, #6]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f994 	bl	80080e6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006dbe:	e06b      	b.n	8006e98 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	785a      	ldrb	r2, [r3, #1]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	88db      	ldrh	r3, [r3, #6]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dd6:	6939      	ldr	r1, [r7, #16]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	88db      	ldrh	r3, [r3, #6]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 f9af 	bl	8008142 <USBD_CtlPrepareRx>
    break;
 8006de4:	e058      	b.n	8006e98 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	7850      	ldrb	r0, [r2, #1]
 8006df2:	2200      	movs	r2, #0
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	4798      	blx	r3
    break;
 8006df8:	e04e      	b.n	8006e98 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b0b      	cmp	r3, #11
 8006e00:	d02e      	beq.n	8006e60 <USBD_CDC_Setup+0x104>
 8006e02:	2b0b      	cmp	r3, #11
 8006e04:	dc38      	bgt.n	8006e78 <USBD_CDC_Setup+0x11c>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <USBD_CDC_Setup+0xb4>
 8006e0a:	2b0a      	cmp	r3, #10
 8006e0c:	d014      	beq.n	8006e38 <USBD_CDC_Setup+0xdc>
 8006e0e:	e033      	b.n	8006e78 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d107      	bne.n	8006e2a <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	2202      	movs	r2, #2
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f95f 	bl	80080e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006e28:	e02e      	b.n	8006e88 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f8f0 	bl	8008012 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e32:	2302      	movs	r3, #2
 8006e34:	75fb      	strb	r3, [r7, #23]
      break;
 8006e36:	e027      	b.n	8006e88 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d107      	bne.n	8006e52 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006e42:	f107 030f 	add.w	r3, r7, #15
 8006e46:	2201      	movs	r2, #1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 f94b 	bl	80080e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006e50:	e01a      	b.n	8006e88 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 f8dc 	bl	8008012 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5e:	e013      	b.n	8006e88 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d00d      	beq.n	8006e86 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f8d0 	bl	8008012 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e76:	e006      	b.n	8006e86 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f8c9 	bl	8008012 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e80:	2302      	movs	r3, #2
 8006e82:	75fb      	strb	r3, [r7, #23]
      break;
 8006e84:	e000      	b.n	8006e88 <USBD_CDC_Setup+0x12c>
      break;
 8006e86:	bf00      	nop
    }
    break;
 8006e88:	e006      	b.n	8006e98 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f8c0 	bl	8008012 <USBD_CtlError>
    ret = USBD_FAIL;
 8006e92:	2302      	movs	r3, #2
 8006e94:	75fb      	strb	r3, [r7, #23]
    break;
 8006e96:	bf00      	nop
  }

  return ret;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eb4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006ebc:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d03a      	beq.n	8006f3e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	331c      	adds	r3, #28
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d029      	beq.n	8006f32 <USBD_CDC_DataIn+0x90>
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	331c      	adds	r3, #28
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	78f9      	ldrb	r1, [r7, #3]
 8006ef2:	68b8      	ldr	r0, [r7, #8]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	4403      	add	r3, r0
 8006efe:	3338      	adds	r3, #56	; 0x38
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f06:	fb01 f303 	mul.w	r3, r1, r3
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d110      	bne.n	8006f32 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f10:	78fa      	ldrb	r2, [r7, #3]
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	331c      	adds	r3, #28
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006f24:	78f9      	ldrb	r1, [r7, #3]
 8006f26:	2300      	movs	r3, #0
 8006f28:	2200      	movs	r2, #0
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 fd75 	bl	8008a1a <USBD_LL_Transmit>
 8006f30:	e003      	b.n	8006f3a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e000      	b.n	8006f40 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f3e:	2302      	movs	r3, #2
  }
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 fda0 	bl	8008aa6 <USBD_LL_GetRxDataSize>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00d      	beq.n	8006f94 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4798      	blx	r3

    return USBD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fac:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d015      	beq.n	8006fe4 <USBD_CDC_EP0_RxReady+0x46>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d010      	beq.n	8006fe4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fd0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fd8:	b292      	uxth	r2, r2
 8006fda:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	22ff      	movs	r2, #255	; 0xff
 8006fe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2243      	movs	r2, #67	; 0x43
 8006ffc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	; (800700c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000094 	.word	0x20000094

08007010 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2243      	movs	r2, #67	; 0x43
 800701c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000050 	.word	0x20000050

08007030 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2243      	movs	r2, #67	; 0x43
 800703c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	200000d8 	.word	0x200000d8

08007050 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	220a      	movs	r2, #10
 800705c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800705e:	4b03      	ldr	r3, [pc, #12]	; (800706c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	2000000c 	.word	0x2000000c

08007070 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800707a:	2302      	movs	r3, #2
 800707c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007102:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01c      	beq.n	8007148 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007114:	2b00      	cmp	r3, #0
 8007116:	d115      	bne.n	8007144 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007136:	b29b      	uxth	r3, r3
 8007138:	2181      	movs	r1, #129	; 0x81
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 fc6d 	bl	8008a1a <USBD_LL_Transmit>

      return USBD_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e002      	b.n	800714a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007148:	2302      	movs	r3, #2
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007160:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007168:	2b00      	cmp	r3, #0
 800716a:	d017      	beq.n	800719c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7c1b      	ldrb	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d109      	bne.n	8007188 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800717a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fc6d 	bl	8008a60 <USBD_LL_PrepareReceive>
 8007186:	e007      	b.n	8007198 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800718e:	2340      	movs	r3, #64	; 0x40
 8007190:	2101      	movs	r1, #1
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fc64 	bl	8008a60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	4613      	mov	r3, r2
 80071b2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071ba:	2302      	movs	r3, #2
 80071bc:	e01a      	b.n	80071f4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	79fa      	ldrb	r2, [r7, #7]
 80071ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f001 fad1 	bl	8008794 <USBD_LL_Init>

  return USBD_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d006      	beq.n	800721e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]
 800721c:	e001      	b.n	8007222 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr

0800722e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fb06 	bl	8008848 <USBD_LL_Start>

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007266:	2302      	movs	r3, #2
 8007268:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00c      	beq.n	800728e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	4611      	mov	r1, r2
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	78fa      	ldrb	r2, [r7, #3]
 80072ae:	4611      	mov	r1, r2
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
  return USBD_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fe62 	bl	8007f9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d016      	beq.n	8007328 <USBD_LL_SetupStage+0x6a>
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d81c      	bhi.n	8007338 <USBD_LL_SetupStage+0x7a>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <USBD_LL_SetupStage+0x4a>
 8007302:	2b01      	cmp	r3, #1
 8007304:	d008      	beq.n	8007318 <USBD_LL_SetupStage+0x5a>
 8007306:	e017      	b.n	8007338 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f9c5 	bl	80076a0 <USBD_StdDevReq>
    break;
 8007316:	e01a      	b.n	800734e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa27 	bl	8007774 <USBD_StdItfReq>
    break;
 8007326:	e012      	b.n	800734e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fa67 	bl	8007804 <USBD_StdEPReq>
    break;
 8007336:	e00a      	b.n	800734e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800733e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fade 	bl	8008908 <USBD_LL_StallEP>
    break;
 800734c:	bf00      	nop
  }

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	460b      	mov	r3, r1
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d14b      	bne.n	8007404 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007372:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800737a:	2b03      	cmp	r3, #3
 800737c:	d134      	bne.n	80073e8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	429a      	cmp	r2, r3
 8007388:	d919      	bls.n	80073be <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d203      	bcs.n	80073ac <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	e002      	b.n	80073b2 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fee1 	bl	800817e <USBD_CtlContinueRx>
 80073bc:	e038      	b.n	8007430 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d105      	bne.n	80073e0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fede 	bl	80081a2 <USBD_CtlSendStatus>
 80073e6:	e023      	b.n	8007430 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80073ee:	2b05      	cmp	r3, #5
 80073f0:	d11e      	bne.n	8007430 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80073fa:	2100      	movs	r1, #0
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f001 fa83 	bl	8008908 <USBD_LL_StallEP>
 8007402:	e015      	b.n	8007430 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00d      	beq.n	800742c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007416:	2b03      	cmp	r3, #3
 8007418:	d108      	bne.n	800742c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	7afa      	ldrb	r2, [r7, #11]
 8007424:	4611      	mov	r1, r2
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	4798      	blx	r3
 800742a:	e001      	b.n	8007430 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800742c:	2302      	movs	r3, #2
 800742e:	e000      	b.n	8007432 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	460b      	mov	r3, r1
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d17f      	bne.n	800754e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3314      	adds	r3, #20
 8007452:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800745a:	2b02      	cmp	r3, #2
 800745c:	d15c      	bne.n	8007518 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d915      	bls.n	8007496 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	1ad2      	subs	r2, r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	b29b      	uxth	r3, r3
 800747e:	461a      	mov	r2, r3
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 fe4b 	bl	800811e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007488:	2300      	movs	r3, #0
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f001 fae6 	bl	8008a60 <USBD_LL_PrepareReceive>
 8007494:	e04e      	b.n	8007534 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	6912      	ldr	r2, [r2, #16]
 800749e:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a2:	fb01 f202 	mul.w	r2, r1, r2
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11c      	bne.n	80074e6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d316      	bcc.n	80074e6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d20f      	bcs.n	80074e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fe27 	bl	800811e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80074d8:	2300      	movs	r3, #0
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f001 fabe 	bl	8008a60 <USBD_LL_PrepareReceive>
 80074e4:	e026      	b.n	8007534 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d105      	bne.n	8007508 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007508:	2180      	movs	r1, #128	; 0x80
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f001 f9fc 	bl	8008908 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fe59 	bl	80081c8 <USBD_CtlReceiveStatus>
 8007516:	e00d      	b.n	8007534 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800751e:	2b04      	cmp	r3, #4
 8007520:	d004      	beq.n	800752c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f001 f9ea 	bl	8008908 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800753a:	2b01      	cmp	r3, #1
 800753c:	d11d      	bne.n	800757a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7ff fe81 	bl	8007246 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800754c:	e015      	b.n	800757a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00d      	beq.n	8007576 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007560:	2b03      	cmp	r3, #3
 8007562:	d108      	bne.n	8007576 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	7afa      	ldrb	r2, [r7, #11]
 800756e:	4611      	mov	r1, r2
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	4798      	blx	r3
 8007574:	e001      	b.n	800757a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007576:	2302      	movs	r3, #2
 8007578:	e000      	b.n	800757c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 f973 	bl	800887e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2240      	movs	r2, #64	; 0x40
 80075a4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a8:	2340      	movs	r3, #64	; 0x40
 80075aa:	2200      	movs	r2, #0
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 f965 	bl	800887e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2240      	movs	r2, #64	; 0x40
 80075be:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d009      	beq.n	80075fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6852      	ldr	r2, [r2, #4]
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	4611      	mov	r1, r2
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
  }

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2204      	movs	r2, #4
 800763c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr

0800764c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800767a:	2b03      	cmp	r3, #3
 800767c:	d10b      	bne.n	8007696 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d005      	beq.n	8007696 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076b6:	2b40      	cmp	r3, #64	; 0x40
 80076b8:	d005      	beq.n	80076c6 <USBD_StdDevReq+0x26>
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d84f      	bhi.n	800775e <USBD_StdDevReq+0xbe>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <USBD_StdDevReq+0x36>
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d14b      	bne.n	800775e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
    break;
 80076d4:	e048      	b.n	8007768 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d839      	bhi.n	8007752 <USBD_StdDevReq+0xb2>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <USBD_StdDevReq+0x44>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	08007735 	.word	0x08007735
 80076e8:	08007749 	.word	0x08007749
 80076ec:	08007753 	.word	0x08007753
 80076f0:	0800773f 	.word	0x0800773f
 80076f4:	08007753 	.word	0x08007753
 80076f8:	08007717 	.word	0x08007717
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	08007753 	.word	0x08007753
 8007704:	0800772b 	.word	0x0800772b
 8007708:	08007721 	.word	0x08007721
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f9da 	bl	8007ac8 <USBD_GetDescriptor>
      break;
 8007714:	e022      	b.n	800775c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 facf 	bl	8007cbc <USBD_SetAddress>
      break;
 800771e:	e01d      	b.n	800775c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb0e 	bl	8007d44 <USBD_SetConfig>
      break;
 8007728:	e018      	b.n	800775c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fb97 	bl	8007e60 <USBD_GetConfig>
      break;
 8007732:	e013      	b.n	800775c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fbc7 	bl	8007eca <USBD_GetStatus>
      break;
 800773c:	e00e      	b.n	800775c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fbf5 	bl	8007f30 <USBD_SetFeature>
      break;
 8007746:	e009      	b.n	800775c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fc04 	bl	8007f58 <USBD_ClrFeature>
      break;
 8007750:	e004      	b.n	800775c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fc5c 	bl	8008012 <USBD_CtlError>
      break;
 800775a:	bf00      	nop
    }
    break;
 800775c:	e004      	b.n	8007768 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc56 	bl	8008012 <USBD_CtlError>
    break;
 8007766:	bf00      	nop
  }

  return ret;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop

08007774 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d005      	beq.n	800779a <USBD_StdItfReq+0x26>
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d82e      	bhi.n	80077f0 <USBD_StdItfReq+0x7c>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <USBD_StdItfReq+0x26>
 8007796:	2b20      	cmp	r3, #32
 8007798:	d12a      	bne.n	80077f0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80077a0:	3b01      	subs	r3, #1
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d81d      	bhi.n	80077e2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	889b      	ldrh	r3, [r3, #4]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d813      	bhi.n	80077d8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	88db      	ldrh	r3, [r3, #6]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d110      	bne.n	80077ec <USBD_StdItfReq+0x78>
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10d      	bne.n	80077ec <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fce6 	bl	80081a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077d6:	e009      	b.n	80077ec <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fc19 	bl	8008012 <USBD_CtlError>
      break;
 80077e0:	e004      	b.n	80077ec <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc14 	bl	8008012 <USBD_CtlError>
      break;
 80077ea:	e000      	b.n	80077ee <USBD_StdItfReq+0x7a>
      break;
 80077ec:	bf00      	nop
    }
    break;
 80077ee:	e004      	b.n	80077fa <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fc0d 	bl	8008012 <USBD_CtlError>
    break;
 80077f8:	bf00      	nop
  }

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	889b      	ldrh	r3, [r3, #4]
 8007816:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007820:	2b40      	cmp	r3, #64	; 0x40
 8007822:	d007      	beq.n	8007834 <USBD_StdEPReq+0x30>
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	f200 8144 	bhi.w	8007ab2 <USBD_StdEPReq+0x2ae>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <USBD_StdEPReq+0x40>
 800782e:	2b20      	cmp	r3, #32
 8007830:	f040 813f 	bne.w	8007ab2 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
    break;
 8007842:	e13b      	b.n	8007abc <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800784c:	2b20      	cmp	r3, #32
 800784e:	d10a      	bne.n	8007866 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	e12b      	b.n	8007abe <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d007      	beq.n	800787e <USBD_StdEPReq+0x7a>
 800786e:	2b03      	cmp	r3, #3
 8007870:	f300 8119 	bgt.w	8007aa6 <USBD_StdEPReq+0x2a2>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d072      	beq.n	800795e <USBD_StdEPReq+0x15a>
 8007878:	2b01      	cmp	r3, #1
 800787a:	d03a      	beq.n	80078f2 <USBD_StdEPReq+0xee>
 800787c:	e113      	b.n	8007aa6 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007884:	2b02      	cmp	r3, #2
 8007886:	d002      	beq.n	800788e <USBD_StdEPReq+0x8a>
 8007888:	2b03      	cmp	r3, #3
 800788a:	d015      	beq.n	80078b8 <USBD_StdEPReq+0xb4>
 800788c:	e02b      	b.n	80078e6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00c      	beq.n	80078ae <USBD_StdEPReq+0xaa>
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d009      	beq.n	80078ae <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f832 	bl	8008908 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80078a4:	2180      	movs	r1, #128	; 0x80
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 f82e 	bl	8008908 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078ac:	e020      	b.n	80078f0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fbae 	bl	8008012 <USBD_CtlError>
        break;
 80078b6:	e01b      	b.n	80078f0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	885b      	ldrh	r3, [r3, #2]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10e      	bne.n	80078de <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <USBD_StdEPReq+0xda>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d008      	beq.n	80078de <USBD_StdEPReq+0xda>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	88db      	ldrh	r3, [r3, #6]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 f815 	bl	8008908 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc5f 	bl	80081a2 <USBD_CtlSendStatus>

        break;
 80078e4:	e004      	b.n	80078f0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fb92 	bl	8008012 <USBD_CtlError>
        break;
 80078ee:	bf00      	nop
      }
      break;
 80078f0:	e0de      	b.n	8007ab0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d002      	beq.n	8007902 <USBD_StdEPReq+0xfe>
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d015      	beq.n	800792c <USBD_StdEPReq+0x128>
 8007900:	e026      	b.n	8007950 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00c      	beq.n	8007922 <USBD_StdEPReq+0x11e>
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b80      	cmp	r3, #128	; 0x80
 800790c:	d009      	beq.n	8007922 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fff8 	bl	8008908 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007918:	2180      	movs	r1, #128	; 0x80
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fff4 	bl	8008908 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007920:	e01c      	b.n	800795c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fb74 	bl	8008012 <USBD_CtlError>
        break;
 800792a:	e017      	b.n	800795c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	885b      	ldrh	r3, [r3, #2]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d112      	bne.n	800795a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 ffff 	bl	8008946 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc2a 	bl	80081a2 <USBD_CtlSendStatus>
        }
        break;
 800794e:	e004      	b.n	800795a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fb5d 	bl	8008012 <USBD_CtlError>
        break;
 8007958:	e000      	b.n	800795c <USBD_StdEPReq+0x158>
        break;
 800795a:	bf00      	nop
      }
      break;
 800795c:	e0a8      	b.n	8007ab0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007964:	2b02      	cmp	r3, #2
 8007966:	d002      	beq.n	800796e <USBD_StdEPReq+0x16a>
 8007968:	2b03      	cmp	r3, #3
 800796a:	d031      	beq.n	80079d0 <USBD_StdEPReq+0x1cc>
 800796c:	e095      	b.n	8007a9a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <USBD_StdEPReq+0x180>
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d004      	beq.n	8007984 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fb48 	bl	8008012 <USBD_CtlError>
          break;
 8007982:	e08f      	b.n	8007aa4 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	da0b      	bge.n	80079a4 <USBD_StdEPReq+0x1a0>
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	3310      	adds	r3, #16
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	3304      	adds	r3, #4
 80079a2:	e00a      	b.n	80079ba <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2202      	movs	r2, #2
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fb8c 	bl	80080e6 <USBD_CtlSendData>
          break;
 80079ce:	e069      	b.n	8007aa4 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80079d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	da11      	bge.n	80079fc <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	f003 020f 	and.w	r2, r3, #15
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	3318      	adds	r3, #24
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d117      	bne.n	8007a22 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fb0c 	bl	8008012 <USBD_CtlError>
            break;
 80079fa:	e053      	b.n	8007aa4 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	f003 020f 	and.w	r2, r3, #15
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 faf9 	bl	8008012 <USBD_CtlError>
            break;
 8007a20:	e040      	b.n	8007aa4 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da0b      	bge.n	8007a42 <USBD_StdEPReq+0x23e>
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a30:	4613      	mov	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	3310      	adds	r3, #16
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3304      	adds	r3, #4
 8007a40:	e00a      	b.n	8007a58 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4413      	add	r3, r2
 8007a58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <USBD_StdEPReq+0x262>
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b80      	cmp	r3, #128	; 0x80
 8007a64:	d103      	bne.n	8007a6e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	e00e      	b.n	8007a8c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 ff86 	bl	8008984 <USBD_LL_IsStallEP>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e002      	b.n	8007a8c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fb27 	bl	80080e6 <USBD_CtlSendData>
          break;
 8007a98:	e004      	b.n	8007aa4 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fab8 	bl	8008012 <USBD_CtlError>
        break;
 8007aa2:	bf00      	nop
      }
      break;
 8007aa4:	e004      	b.n	8007ab0 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fab2 	bl	8008012 <USBD_CtlError>
      break;
 8007aae:	bf00      	nop
    }
    break;
 8007ab0:	e004      	b.n	8007abc <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 faac 	bl	8008012 <USBD_CtlError>
    break;
 8007aba:	bf00      	nop
  }

  return ret;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	0a1b      	lsrs	r3, r3, #8
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	f200 80c9 	bhi.w	8007c74 <USBD_GetDescriptor+0x1ac>
 8007ae2:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <USBD_GetDescriptor+0x20>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007b05 	.word	0x08007b05
 8007aec:	08007b1d 	.word	0x08007b1d
 8007af0:	08007b5d 	.word	0x08007b5d
 8007af4:	08007c75 	.word	0x08007c75
 8007af8:	08007c75 	.word	0x08007c75
 8007afc:	08007c21 	.word	0x08007c21
 8007b00:	08007c47 	.word	0x08007c47
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	7c12      	ldrb	r2, [r2, #16]
 8007b10:	f107 010a 	add.w	r1, r7, #10
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3
 8007b18:	60f8      	str	r0, [r7, #12]
    break;
 8007b1a:	e0b0      	b.n	8007c7e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	7c1b      	ldrb	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10d      	bne.n	8007b40 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	f107 020a 	add.w	r2, r7, #10
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b3e:	e09e      	b.n	8007c7e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f107 020a 	add.w	r2, r7, #10
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
 8007b50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	2202      	movs	r2, #2
 8007b58:	701a      	strb	r2, [r3, #0]
    break;
 8007b5a:	e090      	b.n	8007c7e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	885b      	ldrh	r3, [r3, #2]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b05      	cmp	r3, #5
 8007b64:	d856      	bhi.n	8007c14 <USBD_GetDescriptor+0x14c>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USBD_GetDescriptor+0xa4>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b85 	.word	0x08007b85
 8007b70:	08007b9d 	.word	0x08007b9d
 8007b74:	08007bb5 	.word	0x08007bb5
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007be5 	.word	0x08007be5
 8007b80:	08007bfd 	.word	0x08007bfd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	f107 010a 	add.w	r1, r7, #10
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
      break;
 8007b9a:	e040      	b.n	8007c1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 010a 	add.w	r1, r7, #10
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
      break;
 8007bb2:	e034      	b.n	8007c1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 010a 	add.w	r1, r7, #10
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
      break;
 8007bca:	e028      	b.n	8007c1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	7c12      	ldrb	r2, [r2, #16]
 8007bd8:	f107 010a 	add.w	r1, r7, #10
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	60f8      	str	r0, [r7, #12]
      break;
 8007be2:	e01c      	b.n	8007c1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 010a 	add.w	r1, r7, #10
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
      break;
 8007bfa:	e010      	b.n	8007c1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 010a 	add.w	r1, r7, #10
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
      break;
 8007c12:	e004      	b.n	8007c1e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f9fb 	bl	8008012 <USBD_CtlError>
      return;
 8007c1c:	e04b      	b.n	8007cb6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007c1e:	e02e      	b.n	8007c7e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7c1b      	ldrb	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d109      	bne.n	8007c3c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	f107 020a 	add.w	r2, r7, #10
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
      break;
 8007c3a:	e020      	b.n	8007c7e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f9e7 	bl	8008012 <USBD_CtlError>
      return;
 8007c44:	e037      	b.n	8007cb6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	7c1b      	ldrb	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	f107 020a 	add.w	r2, r7, #10
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	4798      	blx	r3
 8007c5e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	2207      	movs	r2, #7
 8007c66:	701a      	strb	r2, [r3, #0]
      break;
 8007c68:	e009      	b.n	8007c7e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f9d0 	bl	8008012 <USBD_CtlError>
      return;
 8007c72:	e020      	b.n	8007cb6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9cb 	bl	8008012 <USBD_CtlError>
    return;
 8007c7c:	e01b      	b.n	8007cb6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007c7e:	897b      	ldrh	r3, [r7, #10]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d011      	beq.n	8007ca8 <USBD_GetDescriptor+0x1e0>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	88db      	ldrh	r3, [r3, #6]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00d      	beq.n	8007ca8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	88da      	ldrh	r2, [r3, #6]
 8007c90:	897b      	ldrh	r3, [r7, #10]
 8007c92:	4293      	cmp	r3, r2
 8007c94:	bf28      	it	cs
 8007c96:	4613      	movcs	r3, r2
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007c9c:	897b      	ldrh	r3, [r7, #10]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68f9      	ldr	r1, [r7, #12]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa1f 	bl	80080e6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	88db      	ldrh	r3, [r3, #6]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa76 	bl	80081a2 <USBD_CtlSendStatus>
  }
}
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	889b      	ldrh	r3, [r3, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d130      	bne.n	8007d30 <USBD_SetAddress+0x74>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	88db      	ldrh	r3, [r3, #6]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d12c      	bne.n	8007d30 <USBD_SetAddress+0x74>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	885b      	ldrh	r3, [r3, #2]
 8007cda:	2b7f      	cmp	r3, #127	; 0x7f
 8007cdc:	d828      	bhi.n	8007d30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	885b      	ldrh	r3, [r3, #2]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d104      	bne.n	8007cfe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f98b 	bl	8008012 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfc:	e01d      	b.n	8007d3a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	7bfa      	ldrb	r2, [r7, #15]
 8007d02:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fe66 	bl	80089dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa46 	bl	80081a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d24:	e009      	b.n	8007d3a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2e:	e004      	b.n	8007d3a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f96d 	bl	8008012 <USBD_CtlError>
  }
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <USBD_SetConfig+0x118>)
 8007d56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d58:	4b40      	ldr	r3, [pc, #256]	; (8007e5c <USBD_SetConfig+0x118>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d904      	bls.n	8007d6a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f955 	bl	8008012 <USBD_CtlError>
 8007d68:	e075      	b.n	8007e56 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d002      	beq.n	8007d7a <USBD_SetConfig+0x36>
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d023      	beq.n	8007dc0 <USBD_SetConfig+0x7c>
 8007d78:	e062      	b.n	8007e40 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007d7a:	4b38      	ldr	r3, [pc, #224]	; (8007e5c <USBD_SetConfig+0x118>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01a      	beq.n	8007db8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007d82:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <USBD_SetConfig+0x118>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d94:	4b31      	ldr	r3, [pc, #196]	; (8007e5c <USBD_SetConfig+0x118>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fa5d 	bl	800725a <USBD_SetClassConfig>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d104      	bne.n	8007db0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f932 	bl	8008012 <USBD_CtlError>
          return;
 8007dae:	e052      	b.n	8007e56 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f9f6 	bl	80081a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007db6:	e04e      	b.n	8007e56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f9f2 	bl	80081a2 <USBD_CtlSendStatus>
      break;
 8007dbe:	e04a      	b.n	8007e56 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007dc0:	4b26      	ldr	r3, [pc, #152]	; (8007e5c <USBD_SetConfig+0x118>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d112      	bne.n	8007dee <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007dd0:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <USBD_SetConfig+0x118>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007dda:	4b20      	ldr	r3, [pc, #128]	; (8007e5c <USBD_SetConfig+0x118>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff fa59 	bl	8007298 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9db 	bl	80081a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007dec:	e033      	b.n	8007e56 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007dee:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <USBD_SetConfig+0x118>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d01d      	beq.n	8007e38 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff fa47 	bl	8007298 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e0a:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <USBD_SetConfig+0x118>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e14:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <USBD_SetConfig+0x118>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff fa1d 	bl	800725a <USBD_SetClassConfig>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d104      	bne.n	8007e30 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f8f2 	bl	8008012 <USBD_CtlError>
          return;
 8007e2e:	e012      	b.n	8007e56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f9b6 	bl	80081a2 <USBD_CtlSendStatus>
      break;
 8007e36:	e00e      	b.n	8007e56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f9b2 	bl	80081a2 <USBD_CtlSendStatus>
      break;
 8007e3e:	e00a      	b.n	8007e56 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f8e5 	bl	8008012 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <USBD_SetConfig+0x118>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fa22 	bl	8007298 <USBD_ClrClassConfig>
      break;
 8007e54:	bf00      	nop
    }
  }
}
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200002a0 	.word	0x200002a0

08007e60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	88db      	ldrh	r3, [r3, #6]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d004      	beq.n	8007e7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8cc 	bl	8008012 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007e7a:	e022      	b.n	8007ec2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	dc02      	bgt.n	8007e8c <USBD_GetConfig+0x2c>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dc03      	bgt.n	8007e92 <USBD_GetConfig+0x32>
 8007e8a:	e015      	b.n	8007eb8 <USBD_GetConfig+0x58>
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d00b      	beq.n	8007ea8 <USBD_GetConfig+0x48>
 8007e90:	e012      	b.n	8007eb8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f920 	bl	80080e6 <USBD_CtlSendData>
      break;
 8007ea6:	e00c      	b.n	8007ec2 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	2201      	movs	r2, #1
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f918 	bl	80080e6 <USBD_CtlSendData>
      break;
 8007eb6:	e004      	b.n	8007ec2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f8a9 	bl	8008012 <USBD_CtlError>
      break;
 8007ec0:	bf00      	nop
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007eda:	3b01      	subs	r3, #1
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d81e      	bhi.n	8007f1e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	88db      	ldrh	r3, [r3, #6]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d004      	beq.n	8007ef2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f891 	bl	8008012 <USBD_CtlError>
      break;
 8007ef0:	e01a      	b.n	8007f28 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f043 0202 	orr.w	r2, r3, #2
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	330c      	adds	r3, #12
 8007f12:	2202      	movs	r2, #2
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8e5 	bl	80080e6 <USBD_CtlSendData>
    break;
 8007f1c:	e004      	b.n	8007f28 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f876 	bl	8008012 <USBD_CtlError>
    break;
 8007f26:	bf00      	nop
  }
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d106      	bne.n	8007f50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f929 	bl	80081a2 <USBD_CtlSendStatus>
  }

}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d80b      	bhi.n	8007f86 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d10c      	bne.n	8007f90 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f90f 	bl	80081a2 <USBD_CtlSendStatus>
    }
    break;
 8007f84:	e004      	b.n	8007f90 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f842 	bl	8008012 <USBD_CtlError>
    break;
 8007f8e:	e000      	b.n	8007f92 <USBD_ClrFeature+0x3a>
    break;
 8007f90:	bf00      	nop
  }
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781a      	ldrb	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	785a      	ldrb	r2, [r3, #1]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	3303      	adds	r3, #3
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	4413      	add	r3, r2
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	3305      	adds	r3, #5
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	4413      	add	r3, r2
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	3306      	adds	r3, #6
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	3307      	adds	r3, #7
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4413      	add	r3, r2
 8008002:	b29a      	uxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	80da      	strh	r2, [r3, #6]

}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800801c:	2180      	movs	r1, #128	; 0x80
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fc72 	bl	8008908 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fc6e 	bl	8008908 <USBD_LL_StallEP>
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d032      	beq.n	80080b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 f834 	bl	80080b8 <USBD_GetLen>
 8008050:	4603      	mov	r3, r0
 8008052:	3301      	adds	r3, #1
 8008054:	b29b      	uxth	r3, r3
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	75fa      	strb	r2, [r7, #23]
 8008064:	461a      	mov	r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4413      	add	r3, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	75fa      	strb	r2, [r7, #23]
 8008076:	461a      	mov	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4413      	add	r3, r2
 800807c:	2203      	movs	r2, #3
 800807e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008080:	e012      	b.n	80080a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	60fa      	str	r2, [r7, #12]
 8008088:	7dfa      	ldrb	r2, [r7, #23]
 800808a:	1c51      	adds	r1, r2, #1
 800808c:	75f9      	strb	r1, [r7, #23]
 800808e:	4611      	mov	r1, r2
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	440a      	add	r2, r1
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	75fa      	strb	r2, [r7, #23]
 800809e:	461a      	mov	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4413      	add	r3, r2
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e8      	bne.n	8008082 <USBD_GetString+0x4e>
    }
  }
}
 80080b0:	bf00      	nop
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80080c4:	e005      	b.n	80080d2 <USBD_GetLen+0x1a>
    {
        len++;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	3301      	adds	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
        buf++;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3301      	adds	r3, #1
 80080d0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f5      	bne.n	80080c6 <USBD_GetLen+0xe>
    }

    return len;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr

080080e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80080fc:	88fa      	ldrh	r2, [r7, #6]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008102:	88fa      	ldrh	r2, [r7, #6]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	2100      	movs	r1, #0
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fc83 	bl	8008a1a <USBD_LL_Transmit>

  return USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	4613      	mov	r3, r2
 800812a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	2100      	movs	r1, #0
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fc71 	bl	8008a1a <USBD_LL_Transmit>

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	4613      	mov	r3, r2
 800814e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2203      	movs	r2, #3
 8008154:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008160:	88fa      	ldrh	r2, [r7, #6]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	2100      	movs	r1, #0
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fc76 	bl	8008a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	4613      	mov	r3, r2
 800818a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fc64 	bl	8008a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081b2:	2300      	movs	r3, #0
 80081b4:	2200      	movs	r2, #0
 80081b6:	2100      	movs	r1, #0
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fc2e 	bl	8008a1a <USBD_LL_Transmit>

  return USBD_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2205      	movs	r2, #5
 80081d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80081d8:	2300      	movs	r3, #0
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fc3e 	bl	8008a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081f4:	2200      	movs	r2, #0
 80081f6:	4912      	ldr	r1, [pc, #72]	; (8008240 <MX_USB_DEVICE_Init+0x50>)
 80081f8:	4812      	ldr	r0, [pc, #72]	; (8008244 <MX_USB_DEVICE_Init+0x54>)
 80081fa:	f7fe ffd4 	bl	80071a6 <USBD_Init>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008204:	f7f8 fc58 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008208:	490f      	ldr	r1, [pc, #60]	; (8008248 <MX_USB_DEVICE_Init+0x58>)
 800820a:	480e      	ldr	r0, [pc, #56]	; (8008244 <MX_USB_DEVICE_Init+0x54>)
 800820c:	f7fe fff6 	bl	80071fc <USBD_RegisterClass>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008216:	f7f8 fc4f 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800821a:	490c      	ldr	r1, [pc, #48]	; (800824c <MX_USB_DEVICE_Init+0x5c>)
 800821c:	4809      	ldr	r0, [pc, #36]	; (8008244 <MX_USB_DEVICE_Init+0x54>)
 800821e:	f7fe ff27 	bl	8007070 <USBD_CDC_RegisterInterface>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008228:	f7f8 fc46 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800822c:	4805      	ldr	r0, [pc, #20]	; (8008244 <MX_USB_DEVICE_Init+0x54>)
 800822e:	f7fe fffe 	bl	800722e <USBD_Start>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008238:	f7f8 fc3e 	bl	8000ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800823c:	bf00      	nop
 800823e:	bd80      	pop	{r7, pc}
 8008240:	2000012c 	.word	0x2000012c
 8008244:	200002a4 	.word	0x200002a4
 8008248:	20000018 	.word	0x20000018
 800824c:	2000011c 	.word	0x2000011c

08008250 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008254:	2200      	movs	r2, #0
 8008256:	4905      	ldr	r1, [pc, #20]	; (800826c <CDC_Init_FS+0x1c>)
 8008258:	4805      	ldr	r0, [pc, #20]	; (8008270 <CDC_Init_FS+0x20>)
 800825a:	f7fe ff1f 	bl	800709c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800825e:	4905      	ldr	r1, [pc, #20]	; (8008274 <CDC_Init_FS+0x24>)
 8008260:	4803      	ldr	r0, [pc, #12]	; (8008270 <CDC_Init_FS+0x20>)
 8008262:	f7fe ff34 	bl	80070ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008266:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008268:	4618      	mov	r0, r3
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20000d40 	.word	0x20000d40
 8008270:	200002a4 	.word	0x200002a4
 8008274:	20000540 	.word	0x20000540

08008278 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800827c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800827e:	4618      	mov	r0, r3
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr
	...

08008288 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	6039      	str	r1, [r7, #0]
 8008292:	71fb      	strb	r3, [r7, #7]
 8008294:	4613      	mov	r3, r2
 8008296:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	2b23      	cmp	r3, #35	; 0x23
 800829c:	d84a      	bhi.n	8008334 <CDC_Control_FS+0xac>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <CDC_Control_FS+0x1c>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	08008335 	.word	0x08008335
 80082a8:	08008335 	.word	0x08008335
 80082ac:	08008335 	.word	0x08008335
 80082b0:	08008335 	.word	0x08008335
 80082b4:	08008335 	.word	0x08008335
 80082b8:	08008335 	.word	0x08008335
 80082bc:	08008335 	.word	0x08008335
 80082c0:	08008335 	.word	0x08008335
 80082c4:	08008335 	.word	0x08008335
 80082c8:	08008335 	.word	0x08008335
 80082cc:	08008335 	.word	0x08008335
 80082d0:	08008335 	.word	0x08008335
 80082d4:	08008335 	.word	0x08008335
 80082d8:	08008335 	.word	0x08008335
 80082dc:	08008335 	.word	0x08008335
 80082e0:	08008335 	.word	0x08008335
 80082e4:	08008335 	.word	0x08008335
 80082e8:	08008335 	.word	0x08008335
 80082ec:	08008335 	.word	0x08008335
 80082f0:	08008335 	.word	0x08008335
 80082f4:	08008335 	.word	0x08008335
 80082f8:	08008335 	.word	0x08008335
 80082fc:	08008335 	.word	0x08008335
 8008300:	08008335 	.word	0x08008335
 8008304:	08008335 	.word	0x08008335
 8008308:	08008335 	.word	0x08008335
 800830c:	08008335 	.word	0x08008335
 8008310:	08008335 	.word	0x08008335
 8008314:	08008335 	.word	0x08008335
 8008318:	08008335 	.word	0x08008335
 800831c:	08008335 	.word	0x08008335
 8008320:	08008335 	.word	0x08008335
 8008324:	08008335 	.word	0x08008335
 8008328:	08008335 	.word	0x08008335
 800832c:	08008335 	.word	0x08008335
 8008330:	08008335 	.word	0x08008335
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008334:	bf00      	nop
  }

  return (USBD_OK);
 8008336:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop

08008344 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4805      	ldr	r0, [pc, #20]	; (8008368 <CDC_Receive_FS+0x24>)
 8008352:	f7fe febc 	bl	80070ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008356:	4804      	ldr	r0, [pc, #16]	; (8008368 <CDC_Receive_FS+0x24>)
 8008358:	f7fe fefb 	bl	8007152 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800835c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	200002a4 	.word	0x200002a4

0800836c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800837c:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <CDC_Transmit_FS+0x48>)
 800837e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008382:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800838e:	2301      	movs	r3, #1
 8008390:	e00b      	b.n	80083aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	461a      	mov	r2, r3
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4806      	ldr	r0, [pc, #24]	; (80083b4 <CDC_Transmit_FS+0x48>)
 800839a:	f7fe fe7f 	bl	800709c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <CDC_Transmit_FS+0x48>)
 80083a0:	f7fe fea8 	bl	80070f4 <USBD_CDC_TransmitPacket>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200002a4 	.word	0x200002a4

080083b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2212      	movs	r2, #18
 80083c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083ca:	4b03      	ldr	r3, [pc, #12]	; (80083d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000148 	.word	0x20000148

080083dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2204      	movs	r2, #4
 80083ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	2000015c 	.word	0x2000015c

08008400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4907      	ldr	r1, [pc, #28]	; (8008434 <USBD_FS_ProductStrDescriptor+0x34>)
 8008416:	4808      	ldr	r0, [pc, #32]	; (8008438 <USBD_FS_ProductStrDescriptor+0x38>)
 8008418:	f7ff fe0c 	bl	8008034 <USBD_GetString>
 800841c:	e004      	b.n	8008428 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	4904      	ldr	r1, [pc, #16]	; (8008434 <USBD_FS_ProductStrDescriptor+0x34>)
 8008422:	4805      	ldr	r0, [pc, #20]	; (8008438 <USBD_FS_ProductStrDescriptor+0x38>)
 8008424:	f7ff fe06 	bl	8008034 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20001540 	.word	0x20001540
 8008438:	08009600 	.word	0x08009600

0800843c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	4904      	ldr	r1, [pc, #16]	; (800845c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800844c:	4804      	ldr	r0, [pc, #16]	; (8008460 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800844e:	f7ff fdf1 	bl	8008034 <USBD_GetString>
  return USBD_StrDesc;
 8008452:	4b02      	ldr	r3, [pc, #8]	; (800845c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20001540 	.word	0x20001540
 8008460:	08009618 	.word	0x08009618

08008464 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	6039      	str	r1, [r7, #0]
 800846e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	221a      	movs	r2, #26
 8008474:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008476:	f000 f843 	bl	8008500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800847a:	4b02      	ldr	r3, [pc, #8]	; (8008484 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000160 	.word	0x20000160

08008488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4907      	ldr	r1, [pc, #28]	; (80084bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800849e:	4808      	ldr	r0, [pc, #32]	; (80084c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084a0:	f7ff fdc8 	bl	8008034 <USBD_GetString>
 80084a4:	e004      	b.n	80084b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80084aa:	4805      	ldr	r0, [pc, #20]	; (80084c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084ac:	f7ff fdc2 	bl	8008034 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20001540 	.word	0x20001540
 80084c0:	0800962c 	.word	0x0800962c

080084c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4907      	ldr	r1, [pc, #28]	; (80084f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084da:	4808      	ldr	r0, [pc, #32]	; (80084fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084dc:	f7ff fdaa 	bl	8008034 <USBD_GetString>
 80084e0:	e004      	b.n	80084ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4904      	ldr	r1, [pc, #16]	; (80084f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084e6:	4805      	ldr	r0, [pc, #20]	; (80084fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084e8:	f7ff fda4 	bl	8008034 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ec:	4b02      	ldr	r3, [pc, #8]	; (80084f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20001540 	.word	0x20001540
 80084fc:	08009638 	.word	0x08009638

08008500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <Get_SerialNum+0x44>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800850c:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <Get_SerialNum+0x48>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008512:	4b0e      	ldr	r3, [pc, #56]	; (800854c <Get_SerialNum+0x4c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008526:	2208      	movs	r2, #8
 8008528:	4909      	ldr	r1, [pc, #36]	; (8008550 <Get_SerialNum+0x50>)
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f814 	bl	8008558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008530:	2204      	movs	r2, #4
 8008532:	4908      	ldr	r1, [pc, #32]	; (8008554 <Get_SerialNum+0x54>)
 8008534:	68b8      	ldr	r0, [r7, #8]
 8008536:	f000 f80f 	bl	8008558 <IntToUnicode>
  }
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	1ff800d0 	.word	0x1ff800d0
 8008548:	1ff800d4 	.word	0x1ff800d4
 800854c:	1ff800d8 	.word	0x1ff800d8
 8008550:	20000162 	.word	0x20000162
 8008554:	20000172 	.word	0x20000172

08008558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]
 800856e:	e027      	b.n	80085c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	0f1b      	lsrs	r3, r3, #28
 8008574:	2b09      	cmp	r3, #9
 8008576:	d80b      	bhi.n	8008590 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	0f1b      	lsrs	r3, r3, #28
 800857c:	b2da      	uxtb	r2, r3
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	4619      	mov	r1, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	440b      	add	r3, r1
 8008588:	3230      	adds	r2, #48	; 0x30
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	e00a      	b.n	80085a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	0f1b      	lsrs	r3, r3, #28
 8008594:	b2da      	uxtb	r2, r3
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	4619      	mov	r1, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	440b      	add	r3, r1
 80085a0:	3237      	adds	r2, #55	; 0x37
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	3301      	adds	r3, #1
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4413      	add	r3, r2
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	3301      	adds	r3, #1
 80085be:	75fb      	strb	r3, [r7, #23]
 80085c0:	7dfa      	ldrb	r2, [r7, #23]
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d3d3      	bcc.n	8008570 <IntToUnicode+0x18>
  }
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr

080085d4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d106      	bne.n	80085f4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <HAL_PCDEx_SetConnectionState+0x38>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	4a08      	ldr	r2, [pc, #32]	; (800860c <HAL_PCDEx_SetConnectionState+0x38>)
 80085ec:	f043 0301 	orr.w	r3, r3, #1
 80085f0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80085f2:	e005      	b.n	8008600 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80085f4:	4b05      	ldr	r3, [pc, #20]	; (800860c <HAL_PCDEx_SetConnectionState+0x38>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	4a04      	ldr	r2, [pc, #16]	; (800860c <HAL_PCDEx_SetConnectionState+0x38>)
 80085fa:	f023 0301 	bic.w	r3, r3, #1
 80085fe:	6053      	str	r3, [r2, #4]
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40010000 	.word	0x40010000

08008610 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a0d      	ldr	r2, [pc, #52]	; (8008654 <HAL_PCD_MspInit+0x44>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d113      	bne.n	800864a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008622:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <HAL_PCD_MspInit+0x48>)
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <HAL_PCD_MspInit+0x48>)
 8008628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800862c:	6253      	str	r3, [r2, #36]	; 0x24
 800862e:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <HAL_PCD_MspInit+0x48>)
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	2014      	movs	r0, #20
 8008640:	f7f8 fcff 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008644:	2014      	movs	r0, #20
 8008646:	f7f8 fd18 	bl	800107a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40005c00 	.word	0x40005c00
 8008658:	40023800 	.word	0x40023800

0800865c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7fe fe23 	bl	80072be <USBD_LL_SetupStage>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008692:	78fa      	ldrb	r2, [r7, #3]
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	440b      	add	r3, r1
 80086a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	4619      	mov	r1, r3
 80086aa:	f7fe fe55 	bl	8007358 <USBD_LL_DataOutStage>
}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086c8:	78fa      	ldrb	r2, [r7, #3]
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	440b      	add	r3, r1
 80086d6:	333c      	adds	r3, #60	; 0x3c
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	4619      	mov	r1, r3
 80086de:	f7fe feac 	bl	800743a <USBD_LL_DataInStage>
}
 80086e2:	bf00      	nop
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe ffb7 	bl	800766c <USBD_LL_SOF>
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800870e:	2301      	movs	r3, #1
 8008710:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d001      	beq.n	800871e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800871a:	f7f8 f9cd 	bl	8000ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008724:	7bfa      	ldrb	r2, [r7, #15]
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe ff6c 	bl	8007606 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe ff25 	bl	8007584 <USBD_LL_Reset>
}
 800873a:	bf00      	nop
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe ff66 	bl	8007624 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008760:	4b04      	ldr	r3, [pc, #16]	; (8008774 <HAL_PCD_SuspendCallback+0x30>)
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	4a03      	ldr	r2, [pc, #12]	; (8008774 <HAL_PCD_SuspendCallback+0x30>)
 8008766:	f043 0306 	orr.w	r3, r3, #6
 800876a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	e000ed00 	.word	0xe000ed00

08008778 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe ff60 	bl	800764c <USBD_LL_Resume>
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800879c:	4a28      	ldr	r2, [pc, #160]	; (8008840 <USBD_LL_Init+0xac>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a26      	ldr	r2, [pc, #152]	; (8008840 <USBD_LL_Init+0xac>)
 80087a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80087ac:	4b24      	ldr	r3, [pc, #144]	; (8008840 <USBD_LL_Init+0xac>)
 80087ae:	4a25      	ldr	r2, [pc, #148]	; (8008844 <USBD_LL_Init+0xb0>)
 80087b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087b2:	4b23      	ldr	r3, [pc, #140]	; (8008840 <USBD_LL_Init+0xac>)
 80087b4:	2208      	movs	r2, #8
 80087b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087b8:	4b21      	ldr	r3, [pc, #132]	; (8008840 <USBD_LL_Init+0xac>)
 80087ba:	2202      	movs	r2, #2
 80087bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <USBD_LL_Init+0xac>)
 80087c0:	2202      	movs	r2, #2
 80087c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087c4:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <USBD_LL_Init+0xac>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <USBD_LL_Init+0xac>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087d0:	481b      	ldr	r0, [pc, #108]	; (8008840 <USBD_LL_Init+0xac>)
 80087d2:	f7f8 fe2d 	bl	8001430 <HAL_PCD_Init>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087dc:	f7f8 f96c 	bl	8000ab8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087e6:	2318      	movs	r3, #24
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	f7fa fa0a 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087f6:	2358      	movs	r3, #88	; 0x58
 80087f8:	2200      	movs	r2, #0
 80087fa:	2180      	movs	r1, #128	; 0x80
 80087fc:	f7fa fa02 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008806:	23c0      	movs	r3, #192	; 0xc0
 8008808:	2200      	movs	r2, #0
 800880a:	2181      	movs	r1, #129	; 0x81
 800880c:	f7fa f9fa 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008816:	f44f 7388 	mov.w	r3, #272	; 0x110
 800881a:	2200      	movs	r2, #0
 800881c:	2101      	movs	r1, #1
 800881e:	f7fa f9f1 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800882c:	2200      	movs	r2, #0
 800882e:	2182      	movs	r1, #130	; 0x82
 8008830:	f7fa f9e8 	bl	8002c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20001740 	.word	0x20001740
 8008844:	40005c00 	.word	0x40005c00

08008848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800885e:	4618      	mov	r0, r3
 8008860:	f7f8 fec4 	bl	80015ec <HAL_PCD_Start>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 f944 	bl	8008af8 <USBD_Get_USB_Status>
 8008870:	4603      	mov	r3, r0
 8008872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008874:	7bbb      	ldrb	r3, [r7, #14]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	461a      	mov	r2, r3
 800888c:	4603      	mov	r3, r0
 800888e:	70fb      	strb	r3, [r7, #3]
 8008890:	460b      	mov	r3, r1
 8008892:	70bb      	strb	r3, [r7, #2]
 8008894:	4613      	mov	r3, r2
 8008896:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80088a6:	78bb      	ldrb	r3, [r7, #2]
 80088a8:	883a      	ldrh	r2, [r7, #0]
 80088aa:	78f9      	ldrb	r1, [r7, #3]
 80088ac:	f7f8 ffe0 	bl	8001870 <HAL_PCD_EP_Open>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f91e 	bl	8008af8 <USBD_Get_USB_Status>
 80088bc:	4603      	mov	r3, r0
 80088be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7f9 f827 	bl	800193c <HAL_PCD_EP_Close>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f8ff 	bl	8008af8 <USBD_Get_USB_Status>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f7f9 f8e7 	bl	8001afa <HAL_PCD_EP_SetStall>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f8e0 	bl	8008af8 <USBD_Get_USB_Status>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7f9 f91a 	bl	8001b9e <HAL_PCD_EP_ClrStall>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f8c1 	bl	8008af8 <USBD_Get_USB_Status>
 8008976:	4603      	mov	r3, r0
 8008978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897a:	7bbb      	ldrb	r3, [r7, #14]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800899c:	2b00      	cmp	r3, #0
 800899e:	da0c      	bge.n	80089ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a6:	68f9      	ldr	r1, [r7, #12]
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	440b      	add	r3, r1
 80089b4:	3302      	adds	r3, #2
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	e00b      	b.n	80089d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089c0:	68f9      	ldr	r1, [r7, #12]
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	440b      	add	r3, r1
 80089cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bc80      	pop	{r7}
 80089da:	4770      	bx	lr

080089dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f8 ff13 	bl	8001826 <HAL_PCD_SetAddress>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f876 	bl	8008af8 <USBD_Get_USB_Status>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b086      	sub	sp, #24
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	461a      	mov	r2, r3
 8008a26:	460b      	mov	r3, r1
 8008a28:	72fb      	strb	r3, [r7, #11]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a3c:	893b      	ldrh	r3, [r7, #8]
 8008a3e:	7af9      	ldrb	r1, [r7, #11]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	f7f9 f817 	bl	8001a74 <HAL_PCD_EP_Transmit>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f853 	bl	8008af8 <USBD_Get_USB_Status>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a56:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	607a      	str	r2, [r7, #4]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	72fb      	strb	r3, [r7, #11]
 8008a70:	4613      	mov	r3, r2
 8008a72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a82:	893b      	ldrh	r3, [r7, #8]
 8008a84:	7af9      	ldrb	r1, [r7, #11]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	f7f8 ffa0 	bl	80019cc <HAL_PCD_EP_Receive>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f830 	bl	8008af8 <USBD_Get_USB_Status>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ab8:	78fa      	ldrb	r2, [r7, #3]
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7f8 ffc2 	bl	8001a46 <HAL_PCD_EP_GetRxCount>
 8008ac2:	4603      	mov	r3, r0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <USBD_static_malloc+0x14>)
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bc80      	pop	{r7}
 8008ade:	4770      	bx	lr
 8008ae0:	20001a2c 	.word	0x20001a2c

08008ae4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]

}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr
	...

08008af8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d817      	bhi.n	8008b3c <USBD_Get_USB_Status+0x44>
 8008b0c:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <USBD_Get_USB_Status+0x1c>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b2b 	.word	0x08008b2b
 8008b1c:	08008b31 	.word	0x08008b31
 8008b20:	08008b37 	.word	0x08008b37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e00b      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	e008      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e005      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b36:	2302      	movs	r3, #2
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	e002      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	bf00      	nop
  }
  return usb_status;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop

08008b50 <__errno>:
 8008b50:	4b01      	ldr	r3, [pc, #4]	; (8008b58 <__errno+0x8>)
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	2000017c 	.word	0x2000017c

08008b5c <__libc_init_array>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	2600      	movs	r6, #0
 8008b60:	4d0c      	ldr	r5, [pc, #48]	; (8008b94 <__libc_init_array+0x38>)
 8008b62:	4c0d      	ldr	r4, [pc, #52]	; (8008b98 <__libc_init_array+0x3c>)
 8008b64:	1b64      	subs	r4, r4, r5
 8008b66:	10a4      	asrs	r4, r4, #2
 8008b68:	42a6      	cmp	r6, r4
 8008b6a:	d109      	bne.n	8008b80 <__libc_init_array+0x24>
 8008b6c:	f000 fc9c 	bl	80094a8 <_init>
 8008b70:	2600      	movs	r6, #0
 8008b72:	4d0a      	ldr	r5, [pc, #40]	; (8008b9c <__libc_init_array+0x40>)
 8008b74:	4c0a      	ldr	r4, [pc, #40]	; (8008ba0 <__libc_init_array+0x44>)
 8008b76:	1b64      	subs	r4, r4, r5
 8008b78:	10a4      	asrs	r4, r4, #2
 8008b7a:	42a6      	cmp	r6, r4
 8008b7c:	d105      	bne.n	8008b8a <__libc_init_array+0x2e>
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b84:	4798      	blx	r3
 8008b86:	3601      	adds	r6, #1
 8008b88:	e7ee      	b.n	8008b68 <__libc_init_array+0xc>
 8008b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8e:	4798      	blx	r3
 8008b90:	3601      	adds	r6, #1
 8008b92:	e7f2      	b.n	8008b7a <__libc_init_array+0x1e>
 8008b94:	080096a8 	.word	0x080096a8
 8008b98:	080096a8 	.word	0x080096a8
 8008b9c:	080096a8 	.word	0x080096a8
 8008ba0:	080096ac 	.word	0x080096ac

08008ba4 <memset>:
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	4402      	add	r2, r0
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d100      	bne.n	8008bae <memset+0xa>
 8008bac:	4770      	bx	lr
 8008bae:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb2:	e7f9      	b.n	8008ba8 <memset+0x4>

08008bb4 <siprintf>:
 8008bb4:	b40e      	push	{r1, r2, r3}
 8008bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bba:	b500      	push	{lr}
 8008bbc:	b09c      	sub	sp, #112	; 0x70
 8008bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008bc0:	9002      	str	r0, [sp, #8]
 8008bc2:	9006      	str	r0, [sp, #24]
 8008bc4:	9107      	str	r1, [sp, #28]
 8008bc6:	9104      	str	r1, [sp, #16]
 8008bc8:	4808      	ldr	r0, [pc, #32]	; (8008bec <siprintf+0x38>)
 8008bca:	4909      	ldr	r1, [pc, #36]	; (8008bf0 <siprintf+0x3c>)
 8008bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd0:	9105      	str	r1, [sp, #20]
 8008bd2:	6800      	ldr	r0, [r0, #0]
 8008bd4:	a902      	add	r1, sp, #8
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	f000 f868 	bl	8008cac <_svfiprintf_r>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	9b02      	ldr	r3, [sp, #8]
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	b01c      	add	sp, #112	; 0x70
 8008be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be8:	b003      	add	sp, #12
 8008bea:	4770      	bx	lr
 8008bec:	2000017c 	.word	0x2000017c
 8008bf0:	ffff0208 	.word	0xffff0208

08008bf4 <__ssputs_r>:
 8008bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	688e      	ldr	r6, [r1, #8]
 8008bfa:	4682      	mov	sl, r0
 8008bfc:	429e      	cmp	r6, r3
 8008bfe:	460c      	mov	r4, r1
 8008c00:	4690      	mov	r8, r2
 8008c02:	461f      	mov	r7, r3
 8008c04:	d838      	bhi.n	8008c78 <__ssputs_r+0x84>
 8008c06:	898a      	ldrh	r2, [r1, #12]
 8008c08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c0c:	d032      	beq.n	8008c74 <__ssputs_r+0x80>
 8008c0e:	6825      	ldr	r5, [r4, #0]
 8008c10:	6909      	ldr	r1, [r1, #16]
 8008c12:	3301      	adds	r3, #1
 8008c14:	eba5 0901 	sub.w	r9, r5, r1
 8008c18:	6965      	ldr	r5, [r4, #20]
 8008c1a:	444b      	add	r3, r9
 8008c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c24:	106d      	asrs	r5, r5, #1
 8008c26:	429d      	cmp	r5, r3
 8008c28:	bf38      	it	cc
 8008c2a:	461d      	movcc	r5, r3
 8008c2c:	0553      	lsls	r3, r2, #21
 8008c2e:	d531      	bpl.n	8008c94 <__ssputs_r+0xa0>
 8008c30:	4629      	mov	r1, r5
 8008c32:	f000 fb6f 	bl	8009314 <_malloc_r>
 8008c36:	4606      	mov	r6, r0
 8008c38:	b950      	cbnz	r0, 8008c50 <__ssputs_r+0x5c>
 8008c3a:	230c      	movs	r3, #12
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	f8ca 3000 	str.w	r3, [sl]
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c50:	464a      	mov	r2, r9
 8008c52:	6921      	ldr	r1, [r4, #16]
 8008c54:	f000 face 	bl	80091f4 <memcpy>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	6126      	str	r6, [r4, #16]
 8008c66:	444e      	add	r6, r9
 8008c68:	6026      	str	r6, [r4, #0]
 8008c6a:	463e      	mov	r6, r7
 8008c6c:	6165      	str	r5, [r4, #20]
 8008c6e:	eba5 0509 	sub.w	r5, r5, r9
 8008c72:	60a5      	str	r5, [r4, #8]
 8008c74:	42be      	cmp	r6, r7
 8008c76:	d900      	bls.n	8008c7a <__ssputs_r+0x86>
 8008c78:	463e      	mov	r6, r7
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	f000 fac6 	bl	8009210 <memmove>
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	2000      	movs	r0, #0
 8008c88:	1b9b      	subs	r3, r3, r6
 8008c8a:	60a3      	str	r3, [r4, #8]
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	4433      	add	r3, r6
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	e7db      	b.n	8008c4c <__ssputs_r+0x58>
 8008c94:	462a      	mov	r2, r5
 8008c96:	f000 fbb1 	bl	80093fc <_realloc_r>
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d1e1      	bne.n	8008c64 <__ssputs_r+0x70>
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	6921      	ldr	r1, [r4, #16]
 8008ca4:	f000 face 	bl	8009244 <_free_r>
 8008ca8:	e7c7      	b.n	8008c3a <__ssputs_r+0x46>
	...

08008cac <_svfiprintf_r>:
 8008cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb0:	4698      	mov	r8, r3
 8008cb2:	898b      	ldrh	r3, [r1, #12]
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	061b      	lsls	r3, r3, #24
 8008cb8:	460d      	mov	r5, r1
 8008cba:	4614      	mov	r4, r2
 8008cbc:	b09d      	sub	sp, #116	; 0x74
 8008cbe:	d50e      	bpl.n	8008cde <_svfiprintf_r+0x32>
 8008cc0:	690b      	ldr	r3, [r1, #16]
 8008cc2:	b963      	cbnz	r3, 8008cde <_svfiprintf_r+0x32>
 8008cc4:	2140      	movs	r1, #64	; 0x40
 8008cc6:	f000 fb25 	bl	8009314 <_malloc_r>
 8008cca:	6028      	str	r0, [r5, #0]
 8008ccc:	6128      	str	r0, [r5, #16]
 8008cce:	b920      	cbnz	r0, 8008cda <_svfiprintf_r+0x2e>
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e0d1      	b.n	8008e7e <_svfiprintf_r+0x1d2>
 8008cda:	2340      	movs	r3, #64	; 0x40
 8008cdc:	616b      	str	r3, [r5, #20]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce2:	2320      	movs	r3, #32
 8008ce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ce8:	2330      	movs	r3, #48	; 0x30
 8008cea:	f04f 0901 	mov.w	r9, #1
 8008cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e98 <_svfiprintf_r+0x1ec>
 8008cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	469a      	mov	sl, r3
 8008cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d02:	b10a      	cbz	r2, 8008d08 <_svfiprintf_r+0x5c>
 8008d04:	2a25      	cmp	r2, #37	; 0x25
 8008d06:	d1f9      	bne.n	8008cfc <_svfiprintf_r+0x50>
 8008d08:	ebba 0b04 	subs.w	fp, sl, r4
 8008d0c:	d00b      	beq.n	8008d26 <_svfiprintf_r+0x7a>
 8008d0e:	465b      	mov	r3, fp
 8008d10:	4622      	mov	r2, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	4638      	mov	r0, r7
 8008d16:	f7ff ff6d 	bl	8008bf4 <__ssputs_r>
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	f000 80aa 	beq.w	8008e74 <_svfiprintf_r+0x1c8>
 8008d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d22:	445a      	add	r2, fp
 8008d24:	9209      	str	r2, [sp, #36]	; 0x24
 8008d26:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 80a2 	beq.w	8008e74 <_svfiprintf_r+0x1c8>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295
 8008d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d3a:	f10a 0a01 	add.w	sl, sl, #1
 8008d3e:	9304      	str	r3, [sp, #16]
 8008d40:	9307      	str	r3, [sp, #28]
 8008d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d46:	931a      	str	r3, [sp, #104]	; 0x68
 8008d48:	4654      	mov	r4, sl
 8008d4a:	2205      	movs	r2, #5
 8008d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d50:	4851      	ldr	r0, [pc, #324]	; (8008e98 <_svfiprintf_r+0x1ec>)
 8008d52:	f000 fa41 	bl	80091d8 <memchr>
 8008d56:	9a04      	ldr	r2, [sp, #16]
 8008d58:	b9d8      	cbnz	r0, 8008d92 <_svfiprintf_r+0xe6>
 8008d5a:	06d0      	lsls	r0, r2, #27
 8008d5c:	bf44      	itt	mi
 8008d5e:	2320      	movmi	r3, #32
 8008d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d64:	0711      	lsls	r1, r2, #28
 8008d66:	bf44      	itt	mi
 8008d68:	232b      	movmi	r3, #43	; 0x2b
 8008d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d72:	2b2a      	cmp	r3, #42	; 0x2a
 8008d74:	d015      	beq.n	8008da2 <_svfiprintf_r+0xf6>
 8008d76:	4654      	mov	r4, sl
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f04f 0c0a 	mov.w	ip, #10
 8008d7e:	9a07      	ldr	r2, [sp, #28]
 8008d80:	4621      	mov	r1, r4
 8008d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d86:	3b30      	subs	r3, #48	; 0x30
 8008d88:	2b09      	cmp	r3, #9
 8008d8a:	d94e      	bls.n	8008e2a <_svfiprintf_r+0x17e>
 8008d8c:	b1b0      	cbz	r0, 8008dbc <_svfiprintf_r+0x110>
 8008d8e:	9207      	str	r2, [sp, #28]
 8008d90:	e014      	b.n	8008dbc <_svfiprintf_r+0x110>
 8008d92:	eba0 0308 	sub.w	r3, r0, r8
 8008d96:	fa09 f303 	lsl.w	r3, r9, r3
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	46a2      	mov	sl, r4
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	e7d2      	b.n	8008d48 <_svfiprintf_r+0x9c>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	1d19      	adds	r1, r3, #4
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	9103      	str	r1, [sp, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	bfbb      	ittet	lt
 8008dae:	425b      	neglt	r3, r3
 8008db0:	f042 0202 	orrlt.w	r2, r2, #2
 8008db4:	9307      	strge	r3, [sp, #28]
 8008db6:	9307      	strlt	r3, [sp, #28]
 8008db8:	bfb8      	it	lt
 8008dba:	9204      	strlt	r2, [sp, #16]
 8008dbc:	7823      	ldrb	r3, [r4, #0]
 8008dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc0:	d10c      	bne.n	8008ddc <_svfiprintf_r+0x130>
 8008dc2:	7863      	ldrb	r3, [r4, #1]
 8008dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc6:	d135      	bne.n	8008e34 <_svfiprintf_r+0x188>
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	3402      	adds	r4, #2
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	9203      	str	r2, [sp, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	bfb8      	it	lt
 8008dd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dda:	9305      	str	r3, [sp, #20]
 8008ddc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008e9c <_svfiprintf_r+0x1f0>
 8008de0:	2203      	movs	r2, #3
 8008de2:	4650      	mov	r0, sl
 8008de4:	7821      	ldrb	r1, [r4, #0]
 8008de6:	f000 f9f7 	bl	80091d8 <memchr>
 8008dea:	b140      	cbz	r0, 8008dfe <_svfiprintf_r+0x152>
 8008dec:	2340      	movs	r3, #64	; 0x40
 8008dee:	eba0 000a 	sub.w	r0, r0, sl
 8008df2:	fa03 f000 	lsl.w	r0, r3, r0
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	3401      	adds	r4, #1
 8008dfa:	4303      	orrs	r3, r0
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e02:	2206      	movs	r2, #6
 8008e04:	4826      	ldr	r0, [pc, #152]	; (8008ea0 <_svfiprintf_r+0x1f4>)
 8008e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e0a:	f000 f9e5 	bl	80091d8 <memchr>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d038      	beq.n	8008e84 <_svfiprintf_r+0x1d8>
 8008e12:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <_svfiprintf_r+0x1f8>)
 8008e14:	bb1b      	cbnz	r3, 8008e5e <_svfiprintf_r+0x1b2>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	3307      	adds	r3, #7
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	3308      	adds	r3, #8
 8008e20:	9303      	str	r3, [sp, #12]
 8008e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e24:	4433      	add	r3, r6
 8008e26:	9309      	str	r3, [sp, #36]	; 0x24
 8008e28:	e767      	b.n	8008cfa <_svfiprintf_r+0x4e>
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e32:	e7a5      	b.n	8008d80 <_svfiprintf_r+0xd4>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f04f 0c0a 	mov.w	ip, #10
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	3401      	adds	r4, #1
 8008e3e:	9305      	str	r3, [sp, #20]
 8008e40:	4620      	mov	r0, r4
 8008e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e46:	3a30      	subs	r2, #48	; 0x30
 8008e48:	2a09      	cmp	r2, #9
 8008e4a:	d903      	bls.n	8008e54 <_svfiprintf_r+0x1a8>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d0c5      	beq.n	8008ddc <_svfiprintf_r+0x130>
 8008e50:	9105      	str	r1, [sp, #20]
 8008e52:	e7c3      	b.n	8008ddc <_svfiprintf_r+0x130>
 8008e54:	4604      	mov	r4, r0
 8008e56:	2301      	movs	r3, #1
 8008e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5c:	e7f0      	b.n	8008e40 <_svfiprintf_r+0x194>
 8008e5e:	ab03      	add	r3, sp, #12
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	462a      	mov	r2, r5
 8008e64:	4638      	mov	r0, r7
 8008e66:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <_svfiprintf_r+0x1fc>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	f3af 8000 	nop.w
 8008e6e:	1c42      	adds	r2, r0, #1
 8008e70:	4606      	mov	r6, r0
 8008e72:	d1d6      	bne.n	8008e22 <_svfiprintf_r+0x176>
 8008e74:	89ab      	ldrh	r3, [r5, #12]
 8008e76:	065b      	lsls	r3, r3, #25
 8008e78:	f53f af2c 	bmi.w	8008cd4 <_svfiprintf_r+0x28>
 8008e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e7e:	b01d      	add	sp, #116	; 0x74
 8008e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e84:	ab03      	add	r3, sp, #12
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	462a      	mov	r2, r5
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <_svfiprintf_r+0x1fc>)
 8008e8e:	a904      	add	r1, sp, #16
 8008e90:	f000 f87c 	bl	8008f8c <_printf_i>
 8008e94:	e7eb      	b.n	8008e6e <_svfiprintf_r+0x1c2>
 8008e96:	bf00      	nop
 8008e98:	0800966c 	.word	0x0800966c
 8008e9c:	08009672 	.word	0x08009672
 8008ea0:	08009676 	.word	0x08009676
 8008ea4:	00000000 	.word	0x00000000
 8008ea8:	08008bf5 	.word	0x08008bf5

08008eac <_printf_common>:
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	4699      	mov	r9, r3
 8008eb4:	688a      	ldr	r2, [r1, #8]
 8008eb6:	690b      	ldr	r3, [r1, #16]
 8008eb8:	4607      	mov	r7, r0
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	bfb8      	it	lt
 8008ebe:	4613      	movlt	r3, r2
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ecc:	b10a      	cbz	r2, 8008ed2 <_printf_common+0x26>
 8008ece:	3301      	adds	r3, #1
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	0699      	lsls	r1, r3, #26
 8008ed6:	bf42      	ittt	mi
 8008ed8:	6833      	ldrmi	r3, [r6, #0]
 8008eda:	3302      	addmi	r3, #2
 8008edc:	6033      	strmi	r3, [r6, #0]
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	f015 0506 	ands.w	r5, r5, #6
 8008ee4:	d106      	bne.n	8008ef4 <_printf_common+0x48>
 8008ee6:	f104 0a19 	add.w	sl, r4, #25
 8008eea:	68e3      	ldr	r3, [r4, #12]
 8008eec:	6832      	ldr	r2, [r6, #0]
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc28      	bgt.n	8008f46 <_printf_common+0x9a>
 8008ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ef8:	1e13      	subs	r3, r2, #0
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	bf18      	it	ne
 8008efe:	2301      	movne	r3, #1
 8008f00:	0692      	lsls	r2, r2, #26
 8008f02:	d42d      	bmi.n	8008f60 <_printf_common+0xb4>
 8008f04:	4649      	mov	r1, r9
 8008f06:	4638      	mov	r0, r7
 8008f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f0c:	47c0      	blx	r8
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d020      	beq.n	8008f54 <_printf_common+0xa8>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	68e5      	ldr	r5, [r4, #12]
 8008f16:	f003 0306 	and.w	r3, r3, #6
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	bf18      	it	ne
 8008f1e:	2500      	movne	r5, #0
 8008f20:	6832      	ldr	r2, [r6, #0]
 8008f22:	f04f 0600 	mov.w	r6, #0
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	bf08      	it	eq
 8008f2a:	1aad      	subeq	r5, r5, r2
 8008f2c:	6922      	ldr	r2, [r4, #16]
 8008f2e:	bf08      	it	eq
 8008f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f34:	4293      	cmp	r3, r2
 8008f36:	bfc4      	itt	gt
 8008f38:	1a9b      	subgt	r3, r3, r2
 8008f3a:	18ed      	addgt	r5, r5, r3
 8008f3c:	341a      	adds	r4, #26
 8008f3e:	42b5      	cmp	r5, r6
 8008f40:	d11a      	bne.n	8008f78 <_printf_common+0xcc>
 8008f42:	2000      	movs	r0, #0
 8008f44:	e008      	b.n	8008f58 <_printf_common+0xac>
 8008f46:	2301      	movs	r3, #1
 8008f48:	4652      	mov	r2, sl
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	47c0      	blx	r8
 8008f50:	3001      	adds	r0, #1
 8008f52:	d103      	bne.n	8008f5c <_printf_common+0xb0>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	e7c4      	b.n	8008eea <_printf_common+0x3e>
 8008f60:	2030      	movs	r0, #48	; 0x30
 8008f62:	18e1      	adds	r1, r4, r3
 8008f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f6e:	4422      	add	r2, r4
 8008f70:	3302      	adds	r3, #2
 8008f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f76:	e7c5      	b.n	8008f04 <_printf_common+0x58>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c0      	blx	r8
 8008f82:	3001      	adds	r0, #1
 8008f84:	d0e6      	beq.n	8008f54 <_printf_common+0xa8>
 8008f86:	3601      	adds	r6, #1
 8008f88:	e7d9      	b.n	8008f3e <_printf_common+0x92>
	...

08008f8c <_printf_i>:
 8008f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f90:	7e0f      	ldrb	r7, [r1, #24]
 8008f92:	4691      	mov	r9, r2
 8008f94:	2f78      	cmp	r7, #120	; 0x78
 8008f96:	4680      	mov	r8, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	469a      	mov	sl, r3
 8008f9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fa2:	d807      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fa4:	2f62      	cmp	r7, #98	; 0x62
 8008fa6:	d80a      	bhi.n	8008fbe <_printf_i+0x32>
 8008fa8:	2f00      	cmp	r7, #0
 8008faa:	f000 80d9 	beq.w	8009160 <_printf_i+0x1d4>
 8008fae:	2f58      	cmp	r7, #88	; 0x58
 8008fb0:	f000 80a4 	beq.w	80090fc <_printf_i+0x170>
 8008fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fbc:	e03a      	b.n	8009034 <_printf_i+0xa8>
 8008fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fc2:	2b15      	cmp	r3, #21
 8008fc4:	d8f6      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fc6:	a101      	add	r1, pc, #4	; (adr r1, 8008fcc <_printf_i+0x40>)
 8008fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fcc:	08009025 	.word	0x08009025
 8008fd0:	08009039 	.word	0x08009039
 8008fd4:	08008fb5 	.word	0x08008fb5
 8008fd8:	08008fb5 	.word	0x08008fb5
 8008fdc:	08008fb5 	.word	0x08008fb5
 8008fe0:	08008fb5 	.word	0x08008fb5
 8008fe4:	08009039 	.word	0x08009039
 8008fe8:	08008fb5 	.word	0x08008fb5
 8008fec:	08008fb5 	.word	0x08008fb5
 8008ff0:	08008fb5 	.word	0x08008fb5
 8008ff4:	08008fb5 	.word	0x08008fb5
 8008ff8:	08009147 	.word	0x08009147
 8008ffc:	08009069 	.word	0x08009069
 8009000:	08009129 	.word	0x08009129
 8009004:	08008fb5 	.word	0x08008fb5
 8009008:	08008fb5 	.word	0x08008fb5
 800900c:	08009169 	.word	0x08009169
 8009010:	08008fb5 	.word	0x08008fb5
 8009014:	08009069 	.word	0x08009069
 8009018:	08008fb5 	.word	0x08008fb5
 800901c:	08008fb5 	.word	0x08008fb5
 8009020:	08009131 	.word	0x08009131
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	1d1a      	adds	r2, r3, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	602a      	str	r2, [r5, #0]
 800902c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009034:	2301      	movs	r3, #1
 8009036:	e0a4      	b.n	8009182 <_printf_i+0x1f6>
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	6829      	ldr	r1, [r5, #0]
 800903c:	0606      	lsls	r6, r0, #24
 800903e:	f101 0304 	add.w	r3, r1, #4
 8009042:	d50a      	bpl.n	800905a <_printf_i+0xce>
 8009044:	680e      	ldr	r6, [r1, #0]
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	2e00      	cmp	r6, #0
 800904a:	da03      	bge.n	8009054 <_printf_i+0xc8>
 800904c:	232d      	movs	r3, #45	; 0x2d
 800904e:	4276      	negs	r6, r6
 8009050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009054:	230a      	movs	r3, #10
 8009056:	485e      	ldr	r0, [pc, #376]	; (80091d0 <_printf_i+0x244>)
 8009058:	e019      	b.n	800908e <_printf_i+0x102>
 800905a:	680e      	ldr	r6, [r1, #0]
 800905c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	bf18      	it	ne
 8009064:	b236      	sxthne	r6, r6
 8009066:	e7ef      	b.n	8009048 <_printf_i+0xbc>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	1d19      	adds	r1, r3, #4
 800906e:	6029      	str	r1, [r5, #0]
 8009070:	0601      	lsls	r1, r0, #24
 8009072:	d501      	bpl.n	8009078 <_printf_i+0xec>
 8009074:	681e      	ldr	r6, [r3, #0]
 8009076:	e002      	b.n	800907e <_printf_i+0xf2>
 8009078:	0646      	lsls	r6, r0, #25
 800907a:	d5fb      	bpl.n	8009074 <_printf_i+0xe8>
 800907c:	881e      	ldrh	r6, [r3, #0]
 800907e:	2f6f      	cmp	r7, #111	; 0x6f
 8009080:	bf0c      	ite	eq
 8009082:	2308      	moveq	r3, #8
 8009084:	230a      	movne	r3, #10
 8009086:	4852      	ldr	r0, [pc, #328]	; (80091d0 <_printf_i+0x244>)
 8009088:	2100      	movs	r1, #0
 800908a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800908e:	6865      	ldr	r5, [r4, #4]
 8009090:	2d00      	cmp	r5, #0
 8009092:	bfa8      	it	ge
 8009094:	6821      	ldrge	r1, [r4, #0]
 8009096:	60a5      	str	r5, [r4, #8]
 8009098:	bfa4      	itt	ge
 800909a:	f021 0104 	bicge.w	r1, r1, #4
 800909e:	6021      	strge	r1, [r4, #0]
 80090a0:	b90e      	cbnz	r6, 80090a6 <_printf_i+0x11a>
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	d04d      	beq.n	8009142 <_printf_i+0x1b6>
 80090a6:	4615      	mov	r5, r2
 80090a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80090ac:	fb03 6711 	mls	r7, r3, r1, r6
 80090b0:	5dc7      	ldrb	r7, [r0, r7]
 80090b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090b6:	4637      	mov	r7, r6
 80090b8:	42bb      	cmp	r3, r7
 80090ba:	460e      	mov	r6, r1
 80090bc:	d9f4      	bls.n	80090a8 <_printf_i+0x11c>
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d10b      	bne.n	80090da <_printf_i+0x14e>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	07de      	lsls	r6, r3, #31
 80090c6:	d508      	bpl.n	80090da <_printf_i+0x14e>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	6861      	ldr	r1, [r4, #4]
 80090cc:	4299      	cmp	r1, r3
 80090ce:	bfde      	ittt	le
 80090d0:	2330      	movle	r3, #48	; 0x30
 80090d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090da:	1b52      	subs	r2, r2, r5
 80090dc:	6122      	str	r2, [r4, #16]
 80090de:	464b      	mov	r3, r9
 80090e0:	4621      	mov	r1, r4
 80090e2:	4640      	mov	r0, r8
 80090e4:	f8cd a000 	str.w	sl, [sp]
 80090e8:	aa03      	add	r2, sp, #12
 80090ea:	f7ff fedf 	bl	8008eac <_printf_common>
 80090ee:	3001      	adds	r0, #1
 80090f0:	d14c      	bne.n	800918c <_printf_i+0x200>
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295
 80090f6:	b004      	add	sp, #16
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	4834      	ldr	r0, [pc, #208]	; (80091d0 <_printf_i+0x244>)
 80090fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009102:	6829      	ldr	r1, [r5, #0]
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	f851 6b04 	ldr.w	r6, [r1], #4
 800910a:	6029      	str	r1, [r5, #0]
 800910c:	061d      	lsls	r5, r3, #24
 800910e:	d514      	bpl.n	800913a <_printf_i+0x1ae>
 8009110:	07df      	lsls	r7, r3, #31
 8009112:	bf44      	itt	mi
 8009114:	f043 0320 	orrmi.w	r3, r3, #32
 8009118:	6023      	strmi	r3, [r4, #0]
 800911a:	b91e      	cbnz	r6, 8009124 <_printf_i+0x198>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	f023 0320 	bic.w	r3, r3, #32
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	2310      	movs	r3, #16
 8009126:	e7af      	b.n	8009088 <_printf_i+0xfc>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	f043 0320 	orr.w	r3, r3, #32
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	2378      	movs	r3, #120	; 0x78
 8009132:	4828      	ldr	r0, [pc, #160]	; (80091d4 <_printf_i+0x248>)
 8009134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009138:	e7e3      	b.n	8009102 <_printf_i+0x176>
 800913a:	0659      	lsls	r1, r3, #25
 800913c:	bf48      	it	mi
 800913e:	b2b6      	uxthmi	r6, r6
 8009140:	e7e6      	b.n	8009110 <_printf_i+0x184>
 8009142:	4615      	mov	r5, r2
 8009144:	e7bb      	b.n	80090be <_printf_i+0x132>
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	6826      	ldr	r6, [r4, #0]
 800914a:	1d18      	adds	r0, r3, #4
 800914c:	6961      	ldr	r1, [r4, #20]
 800914e:	6028      	str	r0, [r5, #0]
 8009150:	0635      	lsls	r5, r6, #24
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	d501      	bpl.n	800915a <_printf_i+0x1ce>
 8009156:	6019      	str	r1, [r3, #0]
 8009158:	e002      	b.n	8009160 <_printf_i+0x1d4>
 800915a:	0670      	lsls	r0, r6, #25
 800915c:	d5fb      	bpl.n	8009156 <_printf_i+0x1ca>
 800915e:	8019      	strh	r1, [r3, #0]
 8009160:	2300      	movs	r3, #0
 8009162:	4615      	mov	r5, r2
 8009164:	6123      	str	r3, [r4, #16]
 8009166:	e7ba      	b.n	80090de <_printf_i+0x152>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	2100      	movs	r1, #0
 800916c:	1d1a      	adds	r2, r3, #4
 800916e:	602a      	str	r2, [r5, #0]
 8009170:	681d      	ldr	r5, [r3, #0]
 8009172:	6862      	ldr	r2, [r4, #4]
 8009174:	4628      	mov	r0, r5
 8009176:	f000 f82f 	bl	80091d8 <memchr>
 800917a:	b108      	cbz	r0, 8009180 <_printf_i+0x1f4>
 800917c:	1b40      	subs	r0, r0, r5
 800917e:	6060      	str	r0, [r4, #4]
 8009180:	6863      	ldr	r3, [r4, #4]
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	2300      	movs	r3, #0
 8009186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800918a:	e7a8      	b.n	80090de <_printf_i+0x152>
 800918c:	462a      	mov	r2, r5
 800918e:	4649      	mov	r1, r9
 8009190:	4640      	mov	r0, r8
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	47d0      	blx	sl
 8009196:	3001      	adds	r0, #1
 8009198:	d0ab      	beq.n	80090f2 <_printf_i+0x166>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	079b      	lsls	r3, r3, #30
 800919e:	d413      	bmi.n	80091c8 <_printf_i+0x23c>
 80091a0:	68e0      	ldr	r0, [r4, #12]
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	4298      	cmp	r0, r3
 80091a6:	bfb8      	it	lt
 80091a8:	4618      	movlt	r0, r3
 80091aa:	e7a4      	b.n	80090f6 <_printf_i+0x16a>
 80091ac:	2301      	movs	r3, #1
 80091ae:	4632      	mov	r2, r6
 80091b0:	4649      	mov	r1, r9
 80091b2:	4640      	mov	r0, r8
 80091b4:	47d0      	blx	sl
 80091b6:	3001      	adds	r0, #1
 80091b8:	d09b      	beq.n	80090f2 <_printf_i+0x166>
 80091ba:	3501      	adds	r5, #1
 80091bc:	68e3      	ldr	r3, [r4, #12]
 80091be:	9903      	ldr	r1, [sp, #12]
 80091c0:	1a5b      	subs	r3, r3, r1
 80091c2:	42ab      	cmp	r3, r5
 80091c4:	dcf2      	bgt.n	80091ac <_printf_i+0x220>
 80091c6:	e7eb      	b.n	80091a0 <_printf_i+0x214>
 80091c8:	2500      	movs	r5, #0
 80091ca:	f104 0619 	add.w	r6, r4, #25
 80091ce:	e7f5      	b.n	80091bc <_printf_i+0x230>
 80091d0:	0800967d 	.word	0x0800967d
 80091d4:	0800968e 	.word	0x0800968e

080091d8 <memchr>:
 80091d8:	4603      	mov	r3, r0
 80091da:	b510      	push	{r4, lr}
 80091dc:	b2c9      	uxtb	r1, r1
 80091de:	4402      	add	r2, r0
 80091e0:	4293      	cmp	r3, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	d101      	bne.n	80091ea <memchr+0x12>
 80091e6:	2000      	movs	r0, #0
 80091e8:	e003      	b.n	80091f2 <memchr+0x1a>
 80091ea:	7804      	ldrb	r4, [r0, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	428c      	cmp	r4, r1
 80091f0:	d1f6      	bne.n	80091e0 <memchr+0x8>
 80091f2:	bd10      	pop	{r4, pc}

080091f4 <memcpy>:
 80091f4:	440a      	add	r2, r1
 80091f6:	4291      	cmp	r1, r2
 80091f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091fc:	d100      	bne.n	8009200 <memcpy+0xc>
 80091fe:	4770      	bx	lr
 8009200:	b510      	push	{r4, lr}
 8009202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009206:	4291      	cmp	r1, r2
 8009208:	f803 4f01 	strb.w	r4, [r3, #1]!
 800920c:	d1f9      	bne.n	8009202 <memcpy+0xe>
 800920e:	bd10      	pop	{r4, pc}

08009210 <memmove>:
 8009210:	4288      	cmp	r0, r1
 8009212:	b510      	push	{r4, lr}
 8009214:	eb01 0402 	add.w	r4, r1, r2
 8009218:	d902      	bls.n	8009220 <memmove+0x10>
 800921a:	4284      	cmp	r4, r0
 800921c:	4623      	mov	r3, r4
 800921e:	d807      	bhi.n	8009230 <memmove+0x20>
 8009220:	1e43      	subs	r3, r0, #1
 8009222:	42a1      	cmp	r1, r4
 8009224:	d008      	beq.n	8009238 <memmove+0x28>
 8009226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800922a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800922e:	e7f8      	b.n	8009222 <memmove+0x12>
 8009230:	4601      	mov	r1, r0
 8009232:	4402      	add	r2, r0
 8009234:	428a      	cmp	r2, r1
 8009236:	d100      	bne.n	800923a <memmove+0x2a>
 8009238:	bd10      	pop	{r4, pc}
 800923a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800923e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009242:	e7f7      	b.n	8009234 <memmove+0x24>

08009244 <_free_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4605      	mov	r5, r0
 8009248:	2900      	cmp	r1, #0
 800924a:	d040      	beq.n	80092ce <_free_r+0x8a>
 800924c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009250:	1f0c      	subs	r4, r1, #4
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfb8      	it	lt
 8009256:	18e4      	addlt	r4, r4, r3
 8009258:	f000 f910 	bl	800947c <__malloc_lock>
 800925c:	4a1c      	ldr	r2, [pc, #112]	; (80092d0 <_free_r+0x8c>)
 800925e:	6813      	ldr	r3, [r2, #0]
 8009260:	b933      	cbnz	r3, 8009270 <_free_r+0x2c>
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	6014      	str	r4, [r2, #0]
 8009266:	4628      	mov	r0, r5
 8009268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800926c:	f000 b90c 	b.w	8009488 <__malloc_unlock>
 8009270:	42a3      	cmp	r3, r4
 8009272:	d908      	bls.n	8009286 <_free_r+0x42>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	1821      	adds	r1, r4, r0
 8009278:	428b      	cmp	r3, r1
 800927a:	bf01      	itttt	eq
 800927c:	6819      	ldreq	r1, [r3, #0]
 800927e:	685b      	ldreq	r3, [r3, #4]
 8009280:	1809      	addeq	r1, r1, r0
 8009282:	6021      	streq	r1, [r4, #0]
 8009284:	e7ed      	b.n	8009262 <_free_r+0x1e>
 8009286:	461a      	mov	r2, r3
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	b10b      	cbz	r3, 8009290 <_free_r+0x4c>
 800928c:	42a3      	cmp	r3, r4
 800928e:	d9fa      	bls.n	8009286 <_free_r+0x42>
 8009290:	6811      	ldr	r1, [r2, #0]
 8009292:	1850      	adds	r0, r2, r1
 8009294:	42a0      	cmp	r0, r4
 8009296:	d10b      	bne.n	80092b0 <_free_r+0x6c>
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	4401      	add	r1, r0
 800929c:	1850      	adds	r0, r2, r1
 800929e:	4283      	cmp	r3, r0
 80092a0:	6011      	str	r1, [r2, #0]
 80092a2:	d1e0      	bne.n	8009266 <_free_r+0x22>
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4401      	add	r1, r0
 80092aa:	6011      	str	r1, [r2, #0]
 80092ac:	6053      	str	r3, [r2, #4]
 80092ae:	e7da      	b.n	8009266 <_free_r+0x22>
 80092b0:	d902      	bls.n	80092b8 <_free_r+0x74>
 80092b2:	230c      	movs	r3, #12
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	e7d6      	b.n	8009266 <_free_r+0x22>
 80092b8:	6820      	ldr	r0, [r4, #0]
 80092ba:	1821      	adds	r1, r4, r0
 80092bc:	428b      	cmp	r3, r1
 80092be:	bf01      	itttt	eq
 80092c0:	6819      	ldreq	r1, [r3, #0]
 80092c2:	685b      	ldreq	r3, [r3, #4]
 80092c4:	1809      	addeq	r1, r1, r0
 80092c6:	6021      	streq	r1, [r4, #0]
 80092c8:	6063      	str	r3, [r4, #4]
 80092ca:	6054      	str	r4, [r2, #4]
 80092cc:	e7cb      	b.n	8009266 <_free_r+0x22>
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	20001c4c 	.word	0x20001c4c

080092d4 <sbrk_aligned>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	4e0e      	ldr	r6, [pc, #56]	; (8009310 <sbrk_aligned+0x3c>)
 80092d8:	460c      	mov	r4, r1
 80092da:	6831      	ldr	r1, [r6, #0]
 80092dc:	4605      	mov	r5, r0
 80092de:	b911      	cbnz	r1, 80092e6 <sbrk_aligned+0x12>
 80092e0:	f000 f8bc 	bl	800945c <_sbrk_r>
 80092e4:	6030      	str	r0, [r6, #0]
 80092e6:	4621      	mov	r1, r4
 80092e8:	4628      	mov	r0, r5
 80092ea:	f000 f8b7 	bl	800945c <_sbrk_r>
 80092ee:	1c43      	adds	r3, r0, #1
 80092f0:	d00a      	beq.n	8009308 <sbrk_aligned+0x34>
 80092f2:	1cc4      	adds	r4, r0, #3
 80092f4:	f024 0403 	bic.w	r4, r4, #3
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d007      	beq.n	800930c <sbrk_aligned+0x38>
 80092fc:	1a21      	subs	r1, r4, r0
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f8ac 	bl	800945c <_sbrk_r>
 8009304:	3001      	adds	r0, #1
 8009306:	d101      	bne.n	800930c <sbrk_aligned+0x38>
 8009308:	f04f 34ff 	mov.w	r4, #4294967295
 800930c:	4620      	mov	r0, r4
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	20001c50 	.word	0x20001c50

08009314 <_malloc_r>:
 8009314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009318:	1ccd      	adds	r5, r1, #3
 800931a:	f025 0503 	bic.w	r5, r5, #3
 800931e:	3508      	adds	r5, #8
 8009320:	2d0c      	cmp	r5, #12
 8009322:	bf38      	it	cc
 8009324:	250c      	movcc	r5, #12
 8009326:	2d00      	cmp	r5, #0
 8009328:	4607      	mov	r7, r0
 800932a:	db01      	blt.n	8009330 <_malloc_r+0x1c>
 800932c:	42a9      	cmp	r1, r5
 800932e:	d905      	bls.n	800933c <_malloc_r+0x28>
 8009330:	230c      	movs	r3, #12
 8009332:	2600      	movs	r6, #0
 8009334:	603b      	str	r3, [r7, #0]
 8009336:	4630      	mov	r0, r6
 8009338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800933c:	4e2e      	ldr	r6, [pc, #184]	; (80093f8 <_malloc_r+0xe4>)
 800933e:	f000 f89d 	bl	800947c <__malloc_lock>
 8009342:	6833      	ldr	r3, [r6, #0]
 8009344:	461c      	mov	r4, r3
 8009346:	bb34      	cbnz	r4, 8009396 <_malloc_r+0x82>
 8009348:	4629      	mov	r1, r5
 800934a:	4638      	mov	r0, r7
 800934c:	f7ff ffc2 	bl	80092d4 <sbrk_aligned>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	4604      	mov	r4, r0
 8009354:	d14d      	bne.n	80093f2 <_malloc_r+0xde>
 8009356:	6834      	ldr	r4, [r6, #0]
 8009358:	4626      	mov	r6, r4
 800935a:	2e00      	cmp	r6, #0
 800935c:	d140      	bne.n	80093e0 <_malloc_r+0xcc>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	4631      	mov	r1, r6
 8009362:	4638      	mov	r0, r7
 8009364:	eb04 0803 	add.w	r8, r4, r3
 8009368:	f000 f878 	bl	800945c <_sbrk_r>
 800936c:	4580      	cmp	r8, r0
 800936e:	d13a      	bne.n	80093e6 <_malloc_r+0xd2>
 8009370:	6821      	ldr	r1, [r4, #0]
 8009372:	3503      	adds	r5, #3
 8009374:	1a6d      	subs	r5, r5, r1
 8009376:	f025 0503 	bic.w	r5, r5, #3
 800937a:	3508      	adds	r5, #8
 800937c:	2d0c      	cmp	r5, #12
 800937e:	bf38      	it	cc
 8009380:	250c      	movcc	r5, #12
 8009382:	4638      	mov	r0, r7
 8009384:	4629      	mov	r1, r5
 8009386:	f7ff ffa5 	bl	80092d4 <sbrk_aligned>
 800938a:	3001      	adds	r0, #1
 800938c:	d02b      	beq.n	80093e6 <_malloc_r+0xd2>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	442b      	add	r3, r5
 8009392:	6023      	str	r3, [r4, #0]
 8009394:	e00e      	b.n	80093b4 <_malloc_r+0xa0>
 8009396:	6822      	ldr	r2, [r4, #0]
 8009398:	1b52      	subs	r2, r2, r5
 800939a:	d41e      	bmi.n	80093da <_malloc_r+0xc6>
 800939c:	2a0b      	cmp	r2, #11
 800939e:	d916      	bls.n	80093ce <_malloc_r+0xba>
 80093a0:	1961      	adds	r1, r4, r5
 80093a2:	42a3      	cmp	r3, r4
 80093a4:	6025      	str	r5, [r4, #0]
 80093a6:	bf18      	it	ne
 80093a8:	6059      	strne	r1, [r3, #4]
 80093aa:	6863      	ldr	r3, [r4, #4]
 80093ac:	bf08      	it	eq
 80093ae:	6031      	streq	r1, [r6, #0]
 80093b0:	5162      	str	r2, [r4, r5]
 80093b2:	604b      	str	r3, [r1, #4]
 80093b4:	4638      	mov	r0, r7
 80093b6:	f104 060b 	add.w	r6, r4, #11
 80093ba:	f000 f865 	bl	8009488 <__malloc_unlock>
 80093be:	f026 0607 	bic.w	r6, r6, #7
 80093c2:	1d23      	adds	r3, r4, #4
 80093c4:	1af2      	subs	r2, r6, r3
 80093c6:	d0b6      	beq.n	8009336 <_malloc_r+0x22>
 80093c8:	1b9b      	subs	r3, r3, r6
 80093ca:	50a3      	str	r3, [r4, r2]
 80093cc:	e7b3      	b.n	8009336 <_malloc_r+0x22>
 80093ce:	6862      	ldr	r2, [r4, #4]
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	bf0c      	ite	eq
 80093d4:	6032      	streq	r2, [r6, #0]
 80093d6:	605a      	strne	r2, [r3, #4]
 80093d8:	e7ec      	b.n	80093b4 <_malloc_r+0xa0>
 80093da:	4623      	mov	r3, r4
 80093dc:	6864      	ldr	r4, [r4, #4]
 80093de:	e7b2      	b.n	8009346 <_malloc_r+0x32>
 80093e0:	4634      	mov	r4, r6
 80093e2:	6876      	ldr	r6, [r6, #4]
 80093e4:	e7b9      	b.n	800935a <_malloc_r+0x46>
 80093e6:	230c      	movs	r3, #12
 80093e8:	4638      	mov	r0, r7
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	f000 f84c 	bl	8009488 <__malloc_unlock>
 80093f0:	e7a1      	b.n	8009336 <_malloc_r+0x22>
 80093f2:	6025      	str	r5, [r4, #0]
 80093f4:	e7de      	b.n	80093b4 <_malloc_r+0xa0>
 80093f6:	bf00      	nop
 80093f8:	20001c4c 	.word	0x20001c4c

080093fc <_realloc_r>:
 80093fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009400:	4680      	mov	r8, r0
 8009402:	4614      	mov	r4, r2
 8009404:	460e      	mov	r6, r1
 8009406:	b921      	cbnz	r1, 8009412 <_realloc_r+0x16>
 8009408:	4611      	mov	r1, r2
 800940a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800940e:	f7ff bf81 	b.w	8009314 <_malloc_r>
 8009412:	b92a      	cbnz	r2, 8009420 <_realloc_r+0x24>
 8009414:	f7ff ff16 	bl	8009244 <_free_r>
 8009418:	4625      	mov	r5, r4
 800941a:	4628      	mov	r0, r5
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	f000 f838 	bl	8009494 <_malloc_usable_size_r>
 8009424:	4284      	cmp	r4, r0
 8009426:	4607      	mov	r7, r0
 8009428:	d802      	bhi.n	8009430 <_realloc_r+0x34>
 800942a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800942e:	d812      	bhi.n	8009456 <_realloc_r+0x5a>
 8009430:	4621      	mov	r1, r4
 8009432:	4640      	mov	r0, r8
 8009434:	f7ff ff6e 	bl	8009314 <_malloc_r>
 8009438:	4605      	mov	r5, r0
 800943a:	2800      	cmp	r0, #0
 800943c:	d0ed      	beq.n	800941a <_realloc_r+0x1e>
 800943e:	42bc      	cmp	r4, r7
 8009440:	4622      	mov	r2, r4
 8009442:	4631      	mov	r1, r6
 8009444:	bf28      	it	cs
 8009446:	463a      	movcs	r2, r7
 8009448:	f7ff fed4 	bl	80091f4 <memcpy>
 800944c:	4631      	mov	r1, r6
 800944e:	4640      	mov	r0, r8
 8009450:	f7ff fef8 	bl	8009244 <_free_r>
 8009454:	e7e1      	b.n	800941a <_realloc_r+0x1e>
 8009456:	4635      	mov	r5, r6
 8009458:	e7df      	b.n	800941a <_realloc_r+0x1e>
	...

0800945c <_sbrk_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	2300      	movs	r3, #0
 8009460:	4d05      	ldr	r5, [pc, #20]	; (8009478 <_sbrk_r+0x1c>)
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	f7f7 fc22 	bl	8000cb0 <_sbrk>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_sbrk_r+0x1a>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_sbrk_r+0x1a>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	20001c54 	.word	0x20001c54

0800947c <__malloc_lock>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__malloc_lock+0x8>)
 800947e:	f000 b811 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 8009482:	bf00      	nop
 8009484:	20001c58 	.word	0x20001c58

08009488 <__malloc_unlock>:
 8009488:	4801      	ldr	r0, [pc, #4]	; (8009490 <__malloc_unlock+0x8>)
 800948a:	f000 b80c 	b.w	80094a6 <__retarget_lock_release_recursive>
 800948e:	bf00      	nop
 8009490:	20001c58 	.word	0x20001c58

08009494 <_malloc_usable_size_r>:
 8009494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009498:	1f18      	subs	r0, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	bfbc      	itt	lt
 800949e:	580b      	ldrlt	r3, [r1, r0]
 80094a0:	18c0      	addlt	r0, r0, r3
 80094a2:	4770      	bx	lr

080094a4 <__retarget_lock_acquire_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <__retarget_lock_release_recursive>:
 80094a6:	4770      	bx	lr

080094a8 <_init>:
 80094a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094aa:	bf00      	nop
 80094ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ae:	bc08      	pop	{r3}
 80094b0:	469e      	mov	lr, r3
 80094b2:	4770      	bx	lr

080094b4 <_fini>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	bf00      	nop
 80094b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ba:	bc08      	pop	{r3}
 80094bc:	469e      	mov	lr, r3
 80094be:	4770      	bx	lr
