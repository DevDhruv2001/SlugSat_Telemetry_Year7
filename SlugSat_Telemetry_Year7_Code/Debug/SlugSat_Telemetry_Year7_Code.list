
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b90  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d84  08008d84  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d8c  08008d8c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae0  200001e0  08008f74  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc0  08008f74  00021cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112f4  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bf  00000000  00000000  000314fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000345c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193e1  00000000  00000000  000361a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012717  00000000  00000000  0004f589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c607  00000000  00000000  00061ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  000ee2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08008cb4 	.word	0x08008cb4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08008cb4 	.word	0x08008cb4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	887a      	ldrh	r2, [r7, #2]
 80004a2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	69ba      	ldr	r2, [r7, #24]
 80004a8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6858      	ldr	r0, [r3, #4]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	891b      	ldrh	r3, [r3, #8]
 80004b2:	2201      	movs	r2, #1
 80004b4:	4619      	mov	r1, r3
 80004b6:	f000 fde9 	bl	800108c <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	4603      	mov	r3, r0
 80004ca:	80fb      	strh	r3, [r7, #6]
	//RXTransmit function
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0a2      	sub	sp, #136	; 0x88
 80004dc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f000 faa6 	bl	8000a2e <HAL_Init>
//	};

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e2:	f000 f82d 	bl	8000540 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e6:	f000 f8d7 	bl	8000698 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ea:	f000 f8ab 	bl	8000644 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80004ee:	f000 f873 	bl	80005d8 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80004f2:	f007 fa6d 	bl	80079d0 <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	CC1200_t CC1200_SPI_Info; // struct for MISO data, CS Port/Pin, SPI Handler
	uint8_t CC1200_Data; // MISO data received from CC1200
	CC1200_Init(&CC1200_SPI_Info, &CC1200_Data, GPIOB, GPIO_PIN_6, &hspi1);
 80004f6:	f107 016b 	add.w	r1, r7, #107	; 0x6b
 80004fa:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <main+0x5c>)
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2340      	movs	r3, #64	; 0x40
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <main+0x60>)
 8000506:	f7ff ffbd 	bl	8000484 <CC1200_Init>

	// CC1200 Functions Test
	char Message[100];
	uint16_t Message_Length;
	Message_Length = sprintf(Message, "CC1200 Functions Test\r\n");
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	490b      	ldr	r1, [pc, #44]	; (800053c <main+0x64>)
 800050e:	4618      	mov	r0, r3
 8000510:	f007 ff64 	bl	80083dc <siprintf>
 8000514:	4603      	mov	r3, r0
 8000516:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 800051a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800051e:	3301      	adds	r3, #1
 8000520:	b29a      	uxth	r2, r3
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fb26 	bl	8007b78 <CDC_Transmit_FS>
	HAL_Delay(100); // delay 100 ms
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 faed 	bl	8000b0c <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000532:	e7fe      	b.n	8000532 <main+0x5a>
 8000534:	200001fc 	.word	0x200001fc
 8000538:	40020400 	.word	0x40020400
 800053c:	08008ccc 	.word	0x08008ccc

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 ff3c 	bl	80083cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <SystemClock_Config+0x94>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800056a:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <SystemClock_Config+0x94>)
 800056c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000570:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000572:	2301      	movs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000576:	2305      	movs	r3, #5
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000584:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800058a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f9d5 	bl	8002944 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005a0:	f000 f8e8 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fcf1 	bl	8002fa4 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005c8:	f000 f8d4 	bl	8000774 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3748      	adds	r7, #72	; 0x48
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_SPI1_Init+0x64>)
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_SPI1_Init+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_SPI1_Init+0x64>)
 80005e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_SPI1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_SPI1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_SPI1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_SPI1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_SPI1_Init+0x64>)
 8000604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_SPI1_Init+0x64>)
 800060c:	2210      	movs	r2, #16
 800060e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_SPI1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_SPI1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_SPI1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_SPI1_Init+0x64>)
 8000624:	220a      	movs	r2, #10
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_SPI1_Init+0x64>)
 800062a:	f002 ff81 	bl	8003530 <HAL_SPI_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000634:	f000 f89e 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200001fc 	.word	0x200001fc
 8000640:	40013000 	.word	0x40013000

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800067c:	f002 ffe1 	bl	8003642 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000686:	f000 f875 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000254 	.word	0x20000254
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 0320 	and.w	r3, r3, #32
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_GPIO_Init+0xd0>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <MX_GPIO_Init+0xd4>)
 8000714:	f000 fcba 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 8000718:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4810      	ldr	r0, [pc, #64]	; (8000770 <MX_GPIO_Init+0xd8>)
 8000730:	f000 fb1c 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <MX_GPIO_Init+0xd4>)
 800074c:	f000 fb0e 	bl	8000d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2028      	movs	r0, #40	; 0x28
 8000756:	f000 fad2 	bl	8000cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f000 faeb 	bl	8000d36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020400 	.word	0x40020400
 8000770:	40020800 	.word	0x40020800

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_MspInit+0x5c>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <HAL_MspInit+0x5c>)
 800078c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000790:	6253      	str	r3, [r2, #36]	; 0x24
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_MspInit+0x5c>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x5c>)
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_MspInit+0x5c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6213      	str	r3, [r2, #32]
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_MspInit+0x5c>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x5c>)
 80007b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x5c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6253      	str	r3, [r2, #36]	; 0x24
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x5c>)
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ce:	2007      	movs	r0, #7
 80007d0:	f000 fa8a 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_SPI_MspInit+0x7c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d127      	bne.n	8000852 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800080c:	6213      	str	r3, [r2, #32]
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_SPI_MspInit+0x80>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000832:	23e0      	movs	r3, #224	; 0xe0
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000842:	2305      	movs	r3, #5
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_SPI_MspInit+0x84>)
 800084e:	f000 fa8d 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40013000 	.word	0x40013000
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x7c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d127      	bne.n	80008da <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0x80>)
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0x80>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	6253      	str	r3, [r2, #36]	; 0x24
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0x80>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_UART_MspInit+0x80>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0x80>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_UART_MspInit+0x80>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ba:	230c      	movs	r3, #12
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ca:	2307      	movs	r3, #7
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_UART_MspInit+0x84>)
 80008d6:	f000 fa49 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f8cd 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <USB_LP_IRQHandler+0x10>)
 8000946:	f000 fcd5 	bl	80012f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200017a4 	.word	0x200017a4

08000954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000958:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800095c:	f000 fbae 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000960:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000964:	f000 fbaa 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f007 fcde 	bl	800835c <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20014000 	.word	0x20014000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	200002fc 	.word	0x200002fc
 80009d4:	20001cc0 	.word	0x20001cc0

080009d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0a:	f7ff ffe5 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f007 fcab 	bl	8008368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff fd61 	bl	80004d8 <main>
  bx lr
 8000a16:	4770      	bx	lr
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000a20:	08008d94 	.word	0x08008d94
  ldr r2, =_sbss
 8000a24:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a28:	20001cc0 	.word	0x20001cc0

08000a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_IRQHandler>

08000a2e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f955 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f80e 	bl	8000a60 <HAL_InitTick>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	e001      	b.n	8000a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a50:	f7ff fe96 	bl	8000780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_InitTick+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d022      	beq.n	8000aba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_InitTick+0x6c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_InitTick+0x68>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f962 	bl	8000d52 <HAL_SYSTICK_Config>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10f      	bne.n	8000ab4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	d809      	bhi.n	8000aae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa2:	f000 f92c 	bl	8000cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_InitTick+0x70>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	e007      	b.n	8000abe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e004      	b.n	8000abe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e001      	b.n	8000abe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x20>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <HAL_IncTick+0x1c>)
 8000ae4:	6013      	str	r3, [r2, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000300 	.word	0x20000300
 8000af4:	20000008 	.word	0x20000008

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000300 	.word	0x20000300

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d004      	beq.n	8000b30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_Delay+0x40>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b30:	bf00      	nop
 8000b32:	f7ff ffe1 	bl	8000af8 <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d8f7      	bhi.n	8000b32 <HAL_Delay+0x26>
  {
  }
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4906      	ldr	r1, [pc, #24]	; (8000be8 <__NVIC_EnableIRQ+0x34>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff90 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff2d 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff42 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff90 	bl	8000c40 <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5f 	bl	8000bec <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff35 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d82:	e160      	b.n	8001046 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8152 	beq.w	8001040 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	f003 0201 	and.w	r2, r3, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d017      	beq.n	8000e52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0203 	and.w	r2, r3, #3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 80ac 	beq.w	8001040 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b5e      	ldr	r3, [pc, #376]	; (8001064 <HAL_GPIO_Init+0x2f8>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a5d      	ldr	r2, [pc, #372]	; (8001064 <HAL_GPIO_Init+0x2f8>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6213      	str	r3, [r2, #32]
 8000ef4:	4b5b      	ldr	r3, [pc, #364]	; (8001064 <HAL_GPIO_Init+0x2f8>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f00:	4a59      	ldr	r2, [pc, #356]	; (8001068 <HAL_GPIO_Init+0x2fc>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a51      	ldr	r2, [pc, #324]	; (800106c <HAL_GPIO_Init+0x300>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d025      	beq.n	8000f78 <HAL_GPIO_Init+0x20c>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a50      	ldr	r2, [pc, #320]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d01f      	beq.n	8000f74 <HAL_GPIO_Init+0x208>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x308>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d019      	beq.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x30c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d013      	beq.n	8000f6c <HAL_GPIO_Init+0x200>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x310>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00d      	beq.n	8000f68 <HAL_GPIO_Init+0x1fc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_GPIO_Init+0x314>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x1f8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_GPIO_Init+0x318>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_GPIO_Init+0x1f4>
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	e00c      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f60:	2307      	movs	r3, #7
 8000f62:	e00a      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f64:	2305      	movs	r3, #5
 8000f66:	e008      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e004      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	f002 0203 	and.w	r2, r2, #3
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	4093      	lsls	r3, r2
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f8a:	4937      	ldr	r1, [pc, #220]	; (8001068 <HAL_GPIO_Init+0x2fc>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fbc:	4a32      	ldr	r2, [pc, #200]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fe6:	4a28      	ldr	r2, [pc, #160]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_GPIO_Init+0x31c>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	f47f ae97 	bne.w	8000d84 <HAL_GPIO_Init+0x18>
  }
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40010000 	.word	0x40010000
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9f1 	bl	80004c2 <HAL_GPIO_EXTI_Callback>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b08b      	sub	sp, #44	; 0x2c
 80010f0:	af06      	add	r7, sp, #24
 80010f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0d0      	b.n	80012a0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f006 fe82 	bl	8007e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fbd3 	bl	80038d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e04c      	b.n	80011ca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	3301      	adds	r3, #1
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	b298      	uxth	r0, r3
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	3336      	adds	r3, #54	; 0x36
 800116e:	4602      	mov	r2, r0
 8001170:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	3303      	adds	r3, #3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	440b      	add	r3, r1
 8001196:	3338      	adds	r3, #56	; 0x38
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	333c      	adds	r3, #60	; 0x3c
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	3340      	adds	r3, #64	; 0x40
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	3301      	adds	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3ad      	bcc.n	8001130 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e044      	b.n	8001264 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	440b      	add	r3, r1
 80011fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	440b      	add	r3, r1
 8001240:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	3301      	adds	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	d3b5      	bcc.n	80011da <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	687e      	ldr	r6, [r7, #4]
 8001276:	466d      	mov	r5, sp
 8001278:	f106 0410 	add.w	r4, r6, #16
 800127c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	1d33      	adds	r3, r6, #4
 8001286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001288:	6838      	ldr	r0, [r7, #0]
 800128a:	f002 fb3b 	bl	8003904 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_PCD_Start+0x16>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e016      	b.n	80012ec <HAL_PCD_Start+0x44>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 faea 	bl	80038a4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80012d0:	2101      	movs	r1, #1
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f006 fd84 	bl	8007de0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 ffcf 	bl	8006280 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f004 ffc7 	bl	8006294 <USB_ReadInterrupts>
 8001306:	4603      	mov	r3, r0
 8001308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800130c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001310:	d102      	bne.n	8001318 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 faf5 	bl	8001902 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f004 ffb9 	bl	8006294 <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132c:	d112      	bne.n	8001354 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001340:	b292      	uxth	r2, r2
 8001342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f006 fde3 	bl	8007f12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800134c:	2100      	movs	r1, #0
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f8c7 	bl	80014e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f004 ff9b 	bl	8006294 <USB_ReadInterrupts>
 800135e:	4603      	mov	r3, r0
 8001360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001368:	d10b      	bne.n	8001382 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800137c:	b292      	uxth	r2, r2
 800137e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f004 ff84 	bl	8006294 <USB_ReadInterrupts>
 800138c:	4603      	mov	r3, r0
 800138e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001396:	d10b      	bne.n	80013b0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013aa:	b292      	uxth	r2, r2
 80013ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 ff6d 	bl	8006294 <USB_ReadInterrupts>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c4:	d126      	bne.n	8001414 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0204 	bic.w	r2, r2, #4
 80013d8:	b292      	uxth	r2, r2
 80013da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0208 	bic.w	r2, r2, #8
 80013f0:	b292      	uxth	r2, r2
 80013f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f006 fdc4 	bl	8007f84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800140e:	b292      	uxth	r2, r2
 8001410:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f004 ff3b 	bl	8006294 <USB_ReadInterrupts>
 800141e:	4603      	mov	r3, r0
 8001420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001428:	d126      	bne.n	8001478 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f042 0208 	orr.w	r2, r2, #8
 800143c:	b292      	uxth	r2, r2
 800143e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001454:	b292      	uxth	r2, r2
 8001456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0204 	orr.w	r2, r2, #4
 800146c:	b292      	uxth	r2, r2
 800146e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f006 fd6c 	bl	8007f50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f004 ff09 	bl	8006294 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148c:	d10e      	bne.n	80014ac <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014a0:	b292      	uxth	r2, r2
 80014a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f006 fd25 	bl	8007ef6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 feef 	bl	8006294 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c0:	d10b      	bne.n	80014da <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d4:	b292      	uxth	r2, r2
 80014d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_PCD_SetAddress+0x1a>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e013      	b.n	8001524 <HAL_PCD_SetAddress+0x42>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fea0 	bl	800625a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4603      	mov	r3, r0
 800153c:	70fb      	strb	r3, [r7, #3]
 800153e:	460b      	mov	r3, r1
 8001540:	803b      	strh	r3, [r7, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800154a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800154e:	2b00      	cmp	r3, #0
 8001550:	da0e      	bge.n	8001570 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	705a      	strb	r2, [r3, #1]
 800156e:	e00e      	b.n	800158e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	f003 0207 	and.w	r2, r3, #7
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	b2da      	uxtb	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800159a:	883a      	ldrh	r2, [r7, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	78ba      	ldrb	r2, [r7, #2]
 80015a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015b8:	78bb      	ldrb	r3, [r7, #2]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d102      	bne.n	80015c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_PCD_EP_Open+0xa6>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e00e      	b.n	80015f0 <HAL_PCD_EP_Open+0xc4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68f9      	ldr	r1, [r7, #12]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 f9af 	bl	8003944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015ee:	7afb      	ldrb	r3, [r7, #11]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da0e      	bge.n	800162a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	705a      	strb	r2, [r3, #1]
 8001628:	e00e      	b.n	8001648 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	f003 0207 	and.w	r2, r3, #7
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	b2da      	uxtb	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_PCD_EP_Close+0x6a>
 800165e:	2302      	movs	r3, #2
 8001660:	e00e      	b.n	8001680 <HAL_PCD_EP_Close+0x88>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68f9      	ldr	r1, [r7, #12]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fcd1 	bl	8004018 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	f003 0207 	and.w	r2, r3, #7
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2200      	movs	r2, #0
 80016c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c8:	7afb      	ldrb	r3, [r7, #11]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6979      	ldr	r1, [r7, #20]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fe83 	bl	80043f0 <USB_EPStartXfer>
 80016ea:	e005      	b.n	80016f8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6979      	ldr	r1, [r7, #20]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fe7c 	bl	80043f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0207 	and.w	r2, r3, #7
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001724:	681b      	ldr	r3, [r3, #0]
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	460b      	mov	r3, r1
 800173e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2201      	movs	r2, #1
 800177a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	b2da      	uxtb	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6979      	ldr	r1, [r7, #20]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fe29 	bl	80043f0 <USB_EPStartXfer>
 800179e:	e005      	b.n	80017ac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 fe22 	bl	80043f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	f003 0207 	and.w	r2, r3, #7
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d901      	bls.n	80017d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e03e      	b.n	8001852 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da0e      	bge.n	80017fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	705a      	strb	r2, [r3, #1]
 80017f8:	e00c      	b.n	8001814 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_PCD_EP_SetStall+0x7e>
 8001830:	2302      	movs	r3, #2
 8001832:	e00e      	b.n	8001852 <HAL_PCD_EP_SetStall+0x9c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	f004 fc0c 	bl	8006060 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 020f 	and.w	r2, r3, #15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d901      	bls.n	8001878 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e040      	b.n	80018fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187c:	2b00      	cmp	r3, #0
 800187e:	da0e      	bge.n	800189e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	705a      	strb	r2, [r3, #1]
 800189c:	e00e      	b.n	80018bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	f003 0207 	and.w	r2, r3, #7
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_PCD_EP_ClrStall+0x82>
 80018d8:	2302      	movs	r3, #2
 80018da:	e00e      	b.n	80018fa <HAL_PCD_EP_ClrStall+0xa0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fc08 	bl	8006100 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b08e      	sub	sp, #56	; 0x38
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800190a:	e2ec      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001914:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001922:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 8161 	bne.w	8001bee <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800192c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b00      	cmp	r3, #0
 8001934:	d152      	bne.n	80019dc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001946:	81fb      	strh	r3, [r7, #14]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001956:	b29b      	uxth	r3, r3
 8001958:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3328      	adds	r3, #40	; 0x28
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001968:	b29b      	uxth	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	3302      	adds	r3, #2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	441a      	add	r2, r3
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800199a:	2100      	movs	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f006 fa90 	bl	8007ec2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 829b 	beq.w	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8296 	bne.w	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b292      	uxth	r2, r2
 80019ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019da:	e284      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d034      	beq.n	8001a60 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f004 fc81 	bl	800633c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a46:	4013      	ands	r3, r2
 8001a48:	823b      	strh	r3, [r7, #16]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	8a3a      	ldrh	r2, [r7, #16]
 8001a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a54:	b292      	uxth	r2, r2
 8001a56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f006 fa05 	bl	8007e68 <HAL_PCD_SetupStageCallback>
 8001a5e:	e242      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f280 823e 	bge.w	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a76:	4013      	ands	r3, r2
 8001a78:	83bb      	strh	r3, [r7, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	8bba      	ldrh	r2, [r7, #28]
 8001a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a84:	b292      	uxth	r2, r2
 8001a86:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3306      	adds	r3, #6
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d019      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x1ee>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	6959      	ldr	r1, [r3, #20]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f004 fc31 	bl	800633c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f006 f9ce 	bl	8007e8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 81f2 	bne.w	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	4413      	add	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d112      	bne.n	8001b50 <PCD_EP_ISR_Handler+0x24e>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	e02f      	b.n	8001bb0 <PCD_EP_ISR_Handler+0x2ae>
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b3e      	cmp	r3, #62	; 0x3e
 8001b56:	d813      	bhi.n	8001b80 <PCD_EP_ISR_Handler+0x27e>
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x270>
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6e:	3301      	adds	r3, #1
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	029b      	lsls	r3, r3, #10
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	e017      	b.n	8001bb0 <PCD_EP_ISR_Handler+0x2ae>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <PCD_EP_ISR_Handler+0x298>
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	3b01      	subs	r3, #1
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	029b      	lsls	r3, r3, #10
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc0:	827b      	strh	r3, [r7, #18]
 8001bc2:	8a7b      	ldrh	r3, [r7, #18]
 8001bc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bc8:	827b      	strh	r3, [r7, #18]
 8001bca:	8a7b      	ldrh	r3, [r7, #18]
 8001bcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bd0:	827b      	strh	r3, [r7, #18]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	8a7b      	ldrh	r3, [r7, #18]
 8001bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8013      	strh	r3, [r2, #0]
 8001bec:	e17b      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c00:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f280 80ea 	bge.w	8001dde <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c20:	4013      	ands	r3, r2
 8001c22:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c3c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	7b1b      	ldrb	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d122      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3306      	adds	r3, #6
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c82:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	6959      	ldr	r1, [r3, #20]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	88da      	ldrh	r2, [r3, #6]
 8001c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c9a:	f004 fb4f 	bl	800633c <USB_ReadPMA>
 8001c9e:	e07c      	b.n	8001d9a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	78db      	ldrb	r3, [r3, #3]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d108      	bne.n	8001cba <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ca8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001caa:	461a      	mov	r2, r3
 8001cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f927 	bl	8001f02 <HAL_PCD_EP_DB_Receive>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001cb8:	e06f      	b.n	8001d9a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	441a      	add	r2, r3
 8001ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d021      	beq.n	8001d58 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d02a      	beq.n	8001d9a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	6959      	ldr	r1, [r3, #20]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	891a      	ldrh	r2, [r3, #8]
 8001d50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d52:	f004 faf3 	bl	800633c <USB_ReadPMA>
 8001d56:	e020      	b.n	8001d9a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3306      	adds	r3, #6
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d80:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	6959      	ldr	r1, [r3, #20]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	895a      	ldrh	r2, [r3, #10]
 8001d94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d96:	f004 fad1 	bl	800633c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001da0:	441a      	add	r2, r3
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dac:	441a      	add	r2, r3
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <PCD_EP_ISR_Handler+0x4c2>
 8001dba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d206      	bcs.n	8001dd2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f006 f85e 	bl	8007e8c <HAL_PCD_DataOutStageCallback>
 8001dd0:	e005      	b.n	8001dde <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 fb09 	bl	80043f0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d07e      	beq.n	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	843b      	strh	r3, [r7, #32]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	441a      	add	r2, r3
 8001e26:	8c3b      	ldrh	r3, [r7, #32]
 8001e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	78db      	ldrb	r3, [r3, #3]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d00c      	beq.n	8001e56 <PCD_EP_ISR_Handler+0x554>
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	78db      	ldrb	r3, [r3, #3]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d146      	bne.n	8001eda <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d141      	bne.n	8001eda <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e7e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	8bfb      	ldrh	r3, [r7, #30]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d906      	bls.n	8001e98 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	8bfb      	ldrh	r3, [r7, #30]
 8001e90:	1ad2      	subs	r2, r2, r3
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	619a      	str	r2, [r3, #24]
 8001e96:	e002      	b.n	8001e9e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f006 f808 	bl	8007ec2 <HAL_PCD_DataInStageCallback>
 8001eb2:	e018      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	441a      	add	r2, r3
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	8bfb      	ldrh	r3, [r7, #30]
 8001ec6:	441a      	add	r2, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fa8c 	bl	80043f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ed8:	e005      	b.n	8001ee6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001eda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001edc:	461a      	mov	r2, r3
 8001ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f91b 	bl	800211c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f6ff ad0a 	blt.w	800190c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3738      	adds	r7, #56	; 0x38
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b088      	sub	sp, #32
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d07e      	beq.n	8002018 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	8b7b      	ldrh	r3, [r7, #26]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d306      	bcc.n	8001f5c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	8b7b      	ldrh	r3, [r7, #26]
 8001f54:	1ad2      	subs	r2, r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	619a      	str	r2, [r3, #24]
 8001f5a:	e002      	b.n	8001f62 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d123      	bne.n	8001fb2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f84:	833b      	strh	r3, [r7, #24]
 8001f86:	8b3b      	ldrh	r3, [r7, #24]
 8001f88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f8c:	833b      	strh	r3, [r7, #24]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	441a      	add	r2, r3
 8001f9c:	8b3b      	ldrh	r3, [r7, #24]
 8001f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01f      	beq.n	8001ffc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	82fb      	strh	r3, [r7, #22]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	8afb      	ldrh	r3, [r7, #22]
 8001fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ffc:	8b7b      	ldrh	r3, [r7, #26]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8087 	beq.w	8002112 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	6959      	ldr	r1, [r3, #20]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	891a      	ldrh	r2, [r3, #8]
 8002010:	8b7b      	ldrh	r3, [r7, #26]
 8002012:	f004 f993 	bl	800633c <USB_ReadPMA>
 8002016:	e07c      	b.n	8002112 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	3306      	adds	r3, #6
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002040:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	8b7b      	ldrh	r3, [r7, #26]
 8002048:	429a      	cmp	r2, r3
 800204a:	d306      	bcc.n	800205a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	8b7b      	ldrh	r3, [r7, #26]
 8002052:	1ad2      	subs	r2, r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	619a      	str	r2, [r3, #24]
 8002058:	e002      	b.n	8002060 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d123      	bne.n	80020b0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	83fb      	strh	r3, [r7, #30]
 8002084:	8bfb      	ldrh	r3, [r7, #30]
 8002086:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800208a:	83fb      	strh	r3, [r7, #30]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	8bfb      	ldrh	r3, [r7, #30]
 800209c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11f      	bne.n	80020fa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d4:	83bb      	strh	r3, [r7, #28]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	441a      	add	r2, r3
 80020e4:	8bbb      	ldrh	r3, [r7, #28]
 80020e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020fa:	8b7b      	ldrh	r3, [r7, #26]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6959      	ldr	r1, [r3, #20]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	895a      	ldrh	r2, [r3, #10]
 800210c:	8b7b      	ldrh	r3, [r7, #26]
 800210e:	f004 f915 	bl	800633c <USB_ReadPMA>
    }
  }

  return count;
 8002112:	8b7b      	ldrh	r3, [r7, #26]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0a2      	sub	sp, #136	; 0x88
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 81c7 	beq.w	80024c4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	3302      	adds	r3, #2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800216a:	429a      	cmp	r2, r3
 800216c:	d907      	bls.n	800217e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002176:	1ad2      	subs	r2, r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	619a      	str	r2, [r3, #24]
 800217c:	e002      	b.n	8002184 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 80b9 	bne.w	8002300 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d126      	bne.n	80021e4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	4413      	add	r3, r2
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	011a      	lsls	r2, r3, #4
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	4413      	add	r3, r2
 80021b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021dc:	b29a      	uxth	r2, r3
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	e01a      	b.n	800221a <HAL_PCD_EP_DB_Transmit+0xfe>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d116      	bne.n	800221a <HAL_PCD_EP_DB_Transmit+0xfe>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	4413      	add	r3, r2
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	011a      	lsls	r2, r3, #4
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	4413      	add	r3, r2
 800220e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	2200      	movs	r2, #0
 8002218:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	623b      	str	r3, [r7, #32]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d126      	bne.n	8002276 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002236:	b29b      	uxth	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4413      	add	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	011a      	lsls	r2, r3, #4
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4413      	add	r3, r2
 800224a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800225a:	b29a      	uxth	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	801a      	strh	r2, [r3, #0]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226e:	b29a      	uxth	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e017      	b.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d113      	bne.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	4413      	add	r3, r2
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	011a      	lsls	r2, r3, #4
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	4413      	add	r3, r2
 800229a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2200      	movs	r2, #0
 80022a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f005 fe08 	bl	8007ec2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 82d4 	beq.w	8002866 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d8:	827b      	strh	r3, [r7, #18]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	441a      	add	r2, r3
 80022e8:	8a7b      	ldrh	r3, [r7, #18]
 80022ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	8013      	strh	r3, [r2, #0]
 80022fe:	e2b2      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d021      	beq.n	800234e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002324:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800233a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800233e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234a:	b29b      	uxth	r3, r3
 800234c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 8286 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002362:	441a      	add	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002370:	441a      	add	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	d309      	bcc.n	8002396 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	621a      	str	r2, [r3, #32]
 8002394:	e015      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800239e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023ac:	e009      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d155      	bne.n	8002476 <HAL_PCD_EP_DB_Transmit+0x35a>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	4413      	add	r3, r2
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	011a      	lsls	r2, r3, #4
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	4413      	add	r3, r2
 80023ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
 80023f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d112      	bne.n	800241e <HAL_PCD_EP_DB_Transmit+0x302>
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002402:	b29a      	uxth	r2, r3
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002416:	b29a      	uxth	r2, r3
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	e047      	b.n	80024ae <HAL_PCD_EP_DB_Transmit+0x392>
 800241e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002420:	2b3e      	cmp	r3, #62	; 0x3e
 8002422:	d811      	bhi.n	8002448 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
 800242a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_PCD_EP_DB_Transmit+0x31e>
 8002434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002436:	3301      	adds	r3, #1
 8002438:	64bb      	str	r3, [r7, #72]	; 0x48
 800243a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243c:	b29b      	uxth	r3, r3
 800243e:	029b      	lsls	r3, r3, #10
 8002440:	b29a      	uxth	r2, r3
 8002442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	e032      	b.n	80024ae <HAL_PCD_EP_DB_Transmit+0x392>
 8002448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	64bb      	str	r3, [r7, #72]	; 0x48
 800244e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <HAL_PCD_EP_DB_Transmit+0x342>
 8002458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245a:	3b01      	subs	r3, #1
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
 800245e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002460:	b29b      	uxth	r3, r3
 8002462:	029b      	lsls	r3, r3, #10
 8002464:	b29b      	uxth	r3, r3
 8002466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800246e:	b29a      	uxth	r2, r3
 8002470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002472:	801a      	strh	r2, [r3, #0]
 8002474:	e01b      	b.n	80024ae <HAL_PCD_EP_DB_Transmit+0x392>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d117      	bne.n	80024ae <HAL_PCD_EP_DB_Transmit+0x392>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002492:	4413      	add	r3, r2
 8002494:	643b      	str	r3, [r7, #64]	; 0x40
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	011a      	lsls	r2, r3, #4
 800249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249e:	4413      	add	r3, r2
 80024a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	6959      	ldr	r1, [r3, #20]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	891a      	ldrh	r2, [r3, #8]
 80024ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f003 fef8 	bl	80062b2 <USB_WritePMA>
 80024c2:	e1d0      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	3306      	adds	r3, #6
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d307      	bcc.n	800250c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002504:	1ad2      	subs	r2, r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	619a      	str	r2, [r3, #24]
 800250a:	e002      	b.n	8002512 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 80c4 	bne.w	80026a4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d126      	bne.n	8002572 <HAL_PCD_EP_DB_Transmit+0x456>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	66fb      	str	r3, [r7, #108]	; 0x6c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002538:	4413      	add	r3, r2
 800253a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	011a      	lsls	r2, r3, #4
 8002542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002544:	4413      	add	r3, r2
 8002546:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800254a:	66bb      	str	r3, [r7, #104]	; 0x68
 800254c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002556:	b29a      	uxth	r2, r3
 8002558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29a      	uxth	r2, r3
 800256c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	e01a      	b.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	785b      	ldrb	r3, [r3, #1]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d116      	bne.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x48c>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	677b      	str	r3, [r7, #116]	; 0x74
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258e:	4413      	add	r3, r2
 8002590:	677b      	str	r3, [r7, #116]	; 0x74
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	011a      	lsls	r2, r3, #4
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	4413      	add	r3, r2
 800259c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025a0:	673b      	str	r3, [r7, #112]	; 0x70
 80025a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d12f      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ce:	4413      	add	r3, r2
 80025d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025de:	4413      	add	r3, r2
 80025e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260c:	b29a      	uxth	r2, r3
 800260e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e017      	b.n	8002646 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d113      	bne.n	8002646 <HAL_PCD_EP_DB_Transmit+0x52a>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262c:	4413      	add	r3, r2
 800262e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	011a      	lsls	r2, r3, #4
 8002636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002638:	4413      	add	r3, r2
 800263a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800263e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002640:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002642:	2200      	movs	r2, #0
 8002644:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f005 fc38 	bl	8007ec2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 8104 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002678:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	441a      	add	r2, r3
 800268a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800269a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
 80026a2:	e0e0      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d121      	bne.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 80b4 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002706:	441a      	add	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002714:	441a      	add	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6a1a      	ldr	r2, [r3, #32]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	429a      	cmp	r2, r3
 8002724:	d309      	bcc.n	800273a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	621a      	str	r2, [r3, #32]
 8002738:	e015      	b.n	8002766 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002742:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002746:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002750:	e009      	b.n	8002766 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	667b      	str	r3, [r7, #100]	; 0x64
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d155      	bne.n	8002820 <HAL_PCD_EP_DB_Transmit+0x704>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002788:	4413      	add	r3, r2
 800278a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	011a      	lsls	r2, r3, #4
 8002792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002794:	4413      	add	r3, r2
 8002796:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800279a:	65bb      	str	r3, [r7, #88]	; 0x58
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d112      	bne.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80027a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	e044      	b.n	8002852 <HAL_PCD_EP_DB_Transmit+0x736>
 80027c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ca:	2b3e      	cmp	r3, #62	; 0x3e
 80027cc:	d811      	bhi.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80027ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	657b      	str	r3, [r7, #84]	; 0x54
 80027d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	3301      	adds	r3, #1
 80027e2:	657b      	str	r3, [r7, #84]	; 0x54
 80027e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	029b      	lsls	r3, r3, #10
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	e02f      	b.n	8002852 <HAL_PCD_EP_DB_Transmit+0x736>
 80027f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	657b      	str	r3, [r7, #84]	; 0x54
 80027f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002804:	3b01      	subs	r3, #1
 8002806:	657b      	str	r3, [r7, #84]	; 0x54
 8002808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280a:	b29b      	uxth	r3, r3
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	b29b      	uxth	r3, r3
 8002810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002818:	b29a      	uxth	r2, r3
 800281a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	e018      	b.n	8002852 <HAL_PCD_EP_DB_Transmit+0x736>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d114      	bne.n	8002852 <HAL_PCD_EP_DB_Transmit+0x736>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002836:	4413      	add	r3, r2
 8002838:	667b      	str	r3, [r7, #100]	; 0x64
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	011a      	lsls	r2, r3, #4
 8002840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002842:	4413      	add	r3, r2
 8002844:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002848:	663b      	str	r3, [r7, #96]	; 0x60
 800284a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284c:	b29a      	uxth	r2, r3
 800284e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002850:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6959      	ldr	r1, [r3, #20]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	895a      	ldrh	r2, [r3, #10]
 800285e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002860:	b29b      	uxth	r3, r3
 8002862:	f003 fd26 	bl	80062b2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002880:	823b      	strh	r3, [r7, #16]
 8002882:	8a3b      	ldrh	r3, [r7, #16]
 8002884:	f083 0310 	eor.w	r3, r3, #16
 8002888:	823b      	strh	r3, [r7, #16]
 800288a:	8a3b      	ldrh	r3, [r7, #16]
 800288c:	f083 0320 	eor.w	r3, r3, #32
 8002890:	823b      	strh	r3, [r7, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	8a3b      	ldrh	r3, [r7, #16]
 80028a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3788      	adds	r7, #136	; 0x88
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	4613      	mov	r3, r2
 80028d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e009      	b.n	800290a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028f6:	897a      	ldrh	r2, [r7, #10]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800290a:	893b      	ldrh	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b29a      	uxth	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	80da      	strh	r2, [r3, #6]
 800291e:	e00b      	b.n	8002938 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2201      	movs	r2, #1
 8002924:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	b29a      	uxth	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b29a      	uxth	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e31d      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002960:	4b91      	ldr	r3, [pc, #580]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d07b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d006      	beq.n	800298a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d10f      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5e>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d10b      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298a:	4b87      	ldr	r3, [pc, #540]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d06a      	beq.n	8002a6c <HAL_RCC_OscConfig+0x128>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d166      	bne.n	8002a6c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e2f7      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x74>
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e02d      	b.n	8002a14 <HAL_RCC_OscConfig+0xd0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10c      	bne.n	80029da <HAL_RCC_OscConfig+0x96>
 80029c0:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a78      	ldr	r2, [pc, #480]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a75      	ldr	r2, [pc, #468]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e01c      	b.n	8002a14 <HAL_RCC_OscConfig+0xd0>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0xb8>
 80029e2:	4b71      	ldr	r3, [pc, #452]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a70      	ldr	r2, [pc, #448]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6d      	ldr	r2, [pc, #436]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0xd0>
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a69      	ldr	r2, [pc, #420]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a66      	ldr	r2, [pc, #408]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe f86c 	bl	8000af8 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe f868 	bl	8000af8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e2ad      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0xe0>
 8002a42:	e014      	b.n	8002a6e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe f858 	bl	8000af8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe f854 	bl	8000af8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e299      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a5e:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x108>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d05a      	beq.n	8002b30 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d119      	bne.n	8002aba <HAL_RCC_OscConfig+0x176>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d116      	bne.n	8002aba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x160>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e276      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	493d      	ldr	r1, [pc, #244]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab8:	e03a      	b.n	8002b30 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_RCC_OscConfig+0x268>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe f816 	bl	8000af8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7fe f812 	bl	8000af8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e257      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae2:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	492a      	ldr	r1, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
 8002b02:	e015      	b.n	8002b30 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b04:	4b29      	ldr	r3, [pc, #164]	; (8002bac <HAL_RCC_OscConfig+0x268>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fd fff5 	bl	8000af8 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fd fff1 	bl	8000af8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e236      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80b8 	beq.w	8002cae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d170      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_OscConfig+0x218>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e21a      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d921      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fc7d 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e208      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4906      	ldr	r1, [pc, #24]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	061b      	lsls	r3, r3, #24
 8002ba0:	4901      	ldr	r1, [pc, #4]	; (8002ba8 <HAL_RCC_OscConfig+0x264>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
 8002ba6:	e020      	b.n	8002bea <HAL_RCC_OscConfig+0x2a6>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb0:	4b99      	ldr	r3, [pc, #612]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4996      	ldr	r1, [pc, #600]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc2:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	4991      	ldr	r1, [pc, #580]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fc48 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1d3      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	0b5b      	lsrs	r3, r3, #13
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002bfa:	4a87      	ldr	r2, [pc, #540]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002bfc:	6892      	ldr	r2, [r2, #8]
 8002bfe:	0912      	lsrs	r2, r2, #4
 8002c00:	f002 020f 	and.w	r2, r2, #15
 8002c04:	4985      	ldr	r1, [pc, #532]	; (8002e1c <HAL_RCC_OscConfig+0x4d8>)
 8002c06:	5c8a      	ldrb	r2, [r1, r2]
 8002c08:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c0a:	4a85      	ldr	r2, [pc, #532]	; (8002e20 <HAL_RCC_OscConfig+0x4dc>)
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x4e0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd ff24 	bl	8000a60 <HAL_InitTick>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d045      	beq.n	8002cae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	e1b5      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d029      	beq.n	8002c82 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c2e:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x4e4>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fd ff60 	bl	8000af8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c3c:	f7fd ff5c 	bl	8000af8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1a1      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	496c      	ldr	r1, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	4967      	ldr	r1, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c82:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <HAL_RCC_OscConfig+0x4e4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fd ff36 	bl	8000af8 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c90:	f7fd ff32 	bl	8000af8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e177      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d030      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b5a      	ldr	r3, [pc, #360]	; (8002e2c <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fd ff16 	bl	8000af8 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fd ff12 	bl	8000af8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e157      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ce2:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x38c>
 8002cee:	e015      	b.n	8002d1c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf0:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7fd feff 	bl	8000af8 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fd fefb 	bl	8000af8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e140      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f0      	bne.n	8002cfe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80b5 	beq.w	8002e94 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	4a36      	ldr	r2, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6253      	str	r3, [r2, #36]	; 0x24
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	2301      	movs	r3, #1
 8002d54:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_OscConfig+0x4ec>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <HAL_RCC_OscConfig+0x4ec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <HAL_RCC_OscConfig+0x4ec>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fd fec3 	bl	8000af8 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fd febf 	bl	8000af8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e104      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_RCC_OscConfig+0x4ec>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x466>
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da6:	6353      	str	r3, [r2, #52]	; 0x34
 8002da8:	e02d      	b.n	8002e06 <HAL_RCC_OscConfig+0x4c2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x488>
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dc8:	6353      	str	r3, [r2, #52]	; 0x34
 8002dca:	e01c      	b.n	8002e06 <HAL_RCC_OscConfig+0x4c2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d10c      	bne.n	8002dee <HAL_RCC_OscConfig+0x4aa>
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dde:	6353      	str	r3, [r2, #52]	; 0x34
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dea:	6353      	str	r3, [r2, #52]	; 0x34
 8002dec:	e00b      	b.n	8002e06 <HAL_RCC_OscConfig+0x4c2>
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df8:	6353      	str	r3, [r2, #52]	; 0x34
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x4d4>)
 8002e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e04:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d024      	beq.n	8002e58 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fd fe73 	bl	8000af8 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e14:	e019      	b.n	8002e4a <HAL_RCC_OscConfig+0x506>
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	08008d38 	.word	0x08008d38
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004
 8002e28:	42470020 	.word	0x42470020
 8002e2c:	42470680 	.word	0x42470680
 8002e30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fd fe60 	bl	8000af8 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0a3      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e4a:	4b54      	ldr	r3, [pc, #336]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ee      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4f0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e58:	f7fd fe4e 	bl	8000af8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fd fe4a 	bl	8000af8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e08d      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e76:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ee      	bne.n	8002e60 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	4a43      	ldr	r2, [pc, #268]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d079      	beq.n	8002f90 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d056      	beq.n	8002f50 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d13b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_OscConfig+0x65c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fd fe22 	bl	8000af8 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fd fe1e 	bl	8000af8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e063      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eca:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	4319      	orrs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	430b      	orrs	r3, r1
 8002eee:	492b      	ldr	r1, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0x65c>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fd fdfd 	bl	8000af8 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fd fdf9 	bl	8000af8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e03e      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x5be>
 8002f20:	e036      	b.n	8002f90 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_RCC_OscConfig+0x65c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fd fde6 	bl	8000af8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fd fde2 	bl	8000af8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e027      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x5ec>
 8002f4e:	e01f      	b.n	8002f90 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01a      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_RCC_OscConfig+0x658>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470060 	.word	0x42470060

08002fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e11a      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b8f      	ldr	r3, [pc, #572]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d919      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x34>
 8002fcc:	4b8a      	ldr	r3, [pc, #552]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a89      	ldr	r2, [pc, #548]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b87      	ldr	r3, [pc, #540]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 0201 	bic.w	r2, r3, #1
 8002fe0:	4985      	ldr	r1, [pc, #532]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe8:	4b83      	ldr	r3, [pc, #524]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0f9      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003006:	4b7d      	ldr	r3, [pc, #500]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	497a      	ldr	r1, [pc, #488]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 808e 	beq.w	8003142 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800302e:	4b73      	ldr	r3, [pc, #460]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d121      	bne.n	800307e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0d7      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d115      	bne.n	800307e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0cb      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0bf      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0b7      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	495c      	ldr	r1, [pc, #368]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7fd fd32 	bl	8000af8 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7fd fd2a 	bl	8000af8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e09b      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b6:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d1ee      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xfc>
 80030c2:	e03e      	b.n	8003142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d112      	bne.n	80030f2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ce:	f7fd fd13 	bl	8000af8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e084      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e4:	4b45      	ldr	r3, [pc, #276]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d1ee      	bne.n	80030ce <HAL_RCC_ClockConfig+0x12a>
 80030f0:	e027      	b.n	8003142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d11d      	bne.n	8003136 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f7fd fcfc 	bl	8000af8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e06d      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003112:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b04      	cmp	r3, #4
 800311c:	d1ee      	bne.n	80030fc <HAL_RCC_ClockConfig+0x158>
 800311e:	e010      	b.n	8003142 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003120:	f7fd fcea 	bl	8000af8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e05b      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ee      	bne.n	8003120 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d219      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <HAL_RCC_ClockConfig+0x1be>
 8003156:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0201 	bic.w	r2, r3, #1
 800316a:	4923      	ldr	r1, [pc, #140]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_ClockConfig+0x254>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e034      	b.n	80031ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4917      	ldr	r1, [pc, #92]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490f      	ldr	r1, [pc, #60]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f823 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_RCC_ClockConfig+0x258>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490b      	ldr	r1, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x264>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fc3c 	bl	8000a60 <HAL_InitTick>
 80031e8:	4603      	mov	r3, r0
 80031ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ec:	7afb      	ldrb	r3, [r7, #11]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	08008d38 	.word	0x08008d38
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b092      	sub	sp, #72	; 0x48
 8003212:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003214:	4b79      	ldr	r3, [pc, #484]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d00d      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x34>
 8003224:	2b0c      	cmp	r3, #12
 8003226:	f200 80d5 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d002      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x28>
 800322e:	2b08      	cmp	r3, #8
 8003230:	d003      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x2e>
 8003232:	e0cf      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b72      	ldr	r3, [pc, #456]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003238:	e0da      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800323a:	4b72      	ldr	r3, [pc, #456]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800323c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800323e:	e0d7      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003242:	0c9b      	lsrs	r3, r3, #18
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	4b6f      	ldr	r3, [pc, #444]	; (8003408 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	0d9b      	lsrs	r3, r3, #22
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	3301      	adds	r3, #1
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325a:	4b68      	ldr	r3, [pc, #416]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d05d      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2200      	movs	r2, #0
 800326a:	4618      	mov	r0, r3
 800326c:	4611      	mov	r1, r2
 800326e:	4604      	mov	r4, r0
 8003270:	460d      	mov	r5, r1
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4621      	mov	r1, r4
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	6139      	str	r1, [r7, #16]
 8003290:	4629      	mov	r1, r5
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a4:	4659      	mov	r1, fp
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	4651      	mov	r1, sl
 80032aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ae:	4651      	mov	r1, sl
 80032b0:	018a      	lsls	r2, r1, #6
 80032b2:	46d4      	mov	ip, sl
 80032b4:	ebb2 080c 	subs.w	r8, r2, ip
 80032b8:	4659      	mov	r1, fp
 80032ba:	eb63 0901 	sbc.w	r9, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d2:	4690      	mov	r8, r2
 80032d4:	4699      	mov	r9, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	eb18 0303 	adds.w	r3, r8, r3
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	462b      	mov	r3, r5
 80032e0:	eb49 0303 	adc.w	r3, r9, r3
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032f2:	4629      	mov	r1, r5
 80032f4:	024b      	lsls	r3, r1, #9
 80032f6:	4620      	mov	r0, r4
 80032f8:	4629      	mov	r1, r5
 80032fa:	4604      	mov	r4, r0
 80032fc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003300:	4601      	mov	r1, r0
 8003302:	024a      	lsls	r2, r1, #9
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330a:	2200      	movs	r2, #0
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
 800330e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003314:	f7fc ff32 	bl	800017c <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
 8003320:	e055      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2200      	movs	r2, #0
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	627a      	str	r2, [r7, #36]	; 0x24
 800332a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800332e:	4642      	mov	r2, r8
 8003330:	464b      	mov	r3, r9
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	46c4      	mov	ip, r8
 8003348:	ebb2 0a0c 	subs.w	sl, r2, ip
 800334c:	4640      	mov	r0, r8
 800334e:	4649      	mov	r1, r9
 8003350:	468c      	mov	ip, r1
 8003352:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003362:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003366:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800336a:	ebb2 040a 	subs.w	r4, r2, sl
 800336e:	eb63 050b 	sbc.w	r5, r3, fp
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	00eb      	lsls	r3, r5, #3
 800337c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003380:	00e2      	lsls	r2, r4, #3
 8003382:	4614      	mov	r4, r2
 8003384:	461d      	mov	r5, r3
 8003386:	4603      	mov	r3, r0
 8003388:	18e3      	adds	r3, r4, r3
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	460b      	mov	r3, r1
 800338e:	eb45 0303 	adc.w	r3, r5, r3
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a0:	4629      	mov	r1, r5
 80033a2:	028b      	lsls	r3, r1, #10
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	4604      	mov	r4, r0
 80033aa:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80033ae:	4601      	mov	r1, r0
 80033b0:	028a      	lsls	r2, r1, #10
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	2200      	movs	r2, #0
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	61fa      	str	r2, [r7, #28]
 80033be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c2:	f7fc fedb 	bl	800017c <__aeabi_uldivmod>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4613      	mov	r3, r2
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80033ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80033d2:	e00d      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	0b5b      	lsrs	r3, r3, #13
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	3301      	adds	r3, #1
 80033e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80033ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3748      	adds	r7, #72	; 0x48
 80033f6:	46bd      	mov	sp, r7
 80033f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200
 8003408:	08008d2c 	.word	0x08008d2c

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <HAL_RCC_GetHCLKFreq+0x10>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	20000000 	.word	0x20000000

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003424:	f7ff fff2 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	08008d48 	.word	0x08008d48

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800344c:	f7ff ffde 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0adb      	lsrs	r3, r3, #11
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	08008d48 	.word	0x08008d48

08003470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d12c      	bne.n	80034e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e016      	b.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6253      	str	r3, [r2, #36]	; 0x24
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80034c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	4a17      	ldr	r2, [pc, #92]	; (8003524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80034d4:	d105      	bne.n	80034e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034dc:	d101      	bne.n	80034e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80034de:	2301      	movs	r3, #1
 80034e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80034e8:	4b10      	ldr	r3, [pc, #64]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0f      	ldr	r2, [pc, #60]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 0201 	bic.w	r2, r3, #1
 80034fc:	490b      	ldr	r1, [pc, #44]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	40023c00 	.word	0x40023c00

08003530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07b      	b.n	800363a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003552:	d009      	beq.n	8003568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
 800355a:	e005      	b.n	8003568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd f92c 	bl	80007e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	ea42 0103 	orr.w	r1, r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	f003 0104 	and.w	r1, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f003 0210 	and.w	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003628:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e03f      	b.n	80036d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd f8fd 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2224      	movs	r2, #36	; 0x24
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003684:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f828 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800369a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4313      	orrs	r3, r2
 8003710:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800371c:	f023 030c 	bic.w	r3, r3, #12
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	430b      	orrs	r3, r1
 8003728:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a55      	ldr	r2, [pc, #340]	; (800389c <UART_SetConfig+0x1c0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d103      	bne.n	8003752 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800374a:	f7ff fe7d 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	e002      	b.n	8003758 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003752:	f7ff fe65 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8003756:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003760:	d14c      	bne.n	80037fc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009a      	lsls	r2, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4a49      	ldr	r2, [pc, #292]	; (80038a0 <UART_SetConfig+0x1c4>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	0119      	lsls	r1, r3, #4
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <UART_SetConfig+0x1c4>)
 800379a:	fba3 0302 	umull	r0, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2064      	movs	r0, #100	; 0x64
 80037a2:	fb00 f303 	mul.w	r3, r0, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	3332      	adds	r3, #50	; 0x32
 80037ac:	4a3c      	ldr	r2, [pc, #240]	; (80038a0 <UART_SetConfig+0x1c4>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037ba:	4419      	add	r1, r3
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	441a      	add	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d2:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <UART_SetConfig+0x1c4>)
 80037d4:	fba3 0302 	umull	r0, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2064      	movs	r0, #100	; 0x64
 80037dc:	fb00 f303 	mul.w	r3, r0, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	3332      	adds	r3, #50	; 0x32
 80037e6:	4a2e      	ldr	r2, [pc, #184]	; (80038a0 <UART_SetConfig+0x1c4>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	f003 0207 	and.w	r2, r3, #7
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	440a      	add	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037fa:	e04a      	b.n	8003892 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009a      	lsls	r2, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <UART_SetConfig+0x1c4>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	0119      	lsls	r1, r3, #4
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <UART_SetConfig+0x1c4>)
 8003834:	fba3 0302 	umull	r0, r3, r3, r2
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	2064      	movs	r0, #100	; 0x64
 800383c:	fb00 f303 	mul.w	r3, r0, r3
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	3332      	adds	r3, #50	; 0x32
 8003846:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <UART_SetConfig+0x1c4>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003852:	4419      	add	r1, r3
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009a      	lsls	r2, r3, #2
 800385e:	441a      	add	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	fbb2 f2f3 	udiv	r2, r2, r3
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <UART_SetConfig+0x1c4>)
 800386c:	fba3 0302 	umull	r0, r3, r3, r2
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	2064      	movs	r0, #100	; 0x64
 8003874:	fb00 f303 	mul.w	r3, r0, r3
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	3332      	adds	r3, #50	; 0x32
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <UART_SetConfig+0x1c4>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	f003 020f 	and.w	r2, r3, #15
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	440a      	add	r2, r1
 8003890:	609a      	str	r2, [r3, #8]
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40013800 	.word	0x40013800
 80038a0:	51eb851f 	.word	0x51eb851f

080038a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003904:	b084      	sub	sp, #16
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	f107 0014 	add.w	r0, r7, #20
 8003912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	b004      	add	sp, #16
 8003942:	4770      	bx	lr

08003944 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003944:	b480      	push	{r7}
 8003946:	b09b      	sub	sp, #108	; 0x6c
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	78db      	ldrb	r3, [r3, #3]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d81f      	bhi.n	80039b6 <USB_ActivateEndpoint+0x72>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <USB_ActivateEndpoint+0x38>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	0800398d 	.word	0x0800398d
 8003980:	080039a9 	.word	0x080039a9
 8003984:	080039bf 	.word	0x080039bf
 8003988:	0800399b 	.word	0x0800399b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800398c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003994:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003998:	e012      	b.n	80039c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800399a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800399e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80039a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80039a6:	e00b      	b.n	80039c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80039a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80039b4:	e004      	b.n	80039c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80039bc:	e000      	b.n	80039c0 <USB_ActivateEndpoint+0x7c>
      break;
 80039be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	b29b      	uxth	r3, r3
 80039e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	441a      	add	r2, r3
 8003a10:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7b1b      	ldrb	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8149 	bne.w	8003cc4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8084 	beq.w	8003b44 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	011a      	lsls	r2, r3, #4
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	88db      	ldrh	r3, [r3, #6]
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	81fb      	strh	r3, [r7, #14]
 8003a7e:	89fb      	ldrh	r3, [r7, #14]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <USB_ActivateEndpoint+0x17c>
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	81bb      	strh	r3, [r7, #12]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	89bb      	ldrh	r3, [r7, #12]
 8003aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	78db      	ldrb	r3, [r3, #3]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d020      	beq.n	8003b0a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ade:	813b      	strh	r3, [r7, #8]
 8003ae0:	893b      	ldrh	r3, [r7, #8]
 8003ae2:	f083 0320 	eor.w	r3, r3, #32
 8003ae6:	813b      	strh	r3, [r7, #8]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	893b      	ldrh	r3, [r7, #8]
 8003af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	8013      	strh	r3, [r2, #0]
 8003b08:	e27f      	b.n	800400a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	441a      	add	r2, r3
 8003b2c:	897b      	ldrh	r3, [r7, #10]
 8003b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]
 8003b42:	e262      	b.n	800400a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	4413      	add	r3, r2
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	011a      	lsls	r2, r3, #4
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	88db      	ldrh	r3, [r3, #6]
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	4413      	add	r3, r2
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	011a      	lsls	r2, r3, #4
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	4413      	add	r3, r2
 8003b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b9a:	623b      	str	r3, [r7, #32]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d112      	bne.n	8003bca <USB_ActivateEndpoint+0x286>
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	e02f      	b.n	8003c2a <USB_ActivateEndpoint+0x2e6>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b3e      	cmp	r3, #62	; 0x3e
 8003bd0:	d813      	bhi.n	8003bfa <USB_ActivateEndpoint+0x2b6>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <USB_ActivateEndpoint+0x2a8>
 8003be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be8:	3301      	adds	r3, #1
 8003bea:	663b      	str	r3, [r7, #96]	; 0x60
 8003bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e017      	b.n	8003c2a <USB_ActivateEndpoint+0x2e6>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <USB_ActivateEndpoint+0x2d0>
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c10:	3b01      	subs	r3, #1
 8003c12:	663b      	str	r3, [r7, #96]	; 0x60
 8003c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	029b      	lsls	r3, r3, #10
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	83fb      	strh	r3, [r7, #30]
 8003c38:	8bfb      	ldrh	r3, [r7, #30]
 8003c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01b      	beq.n	8003c7a <USB_ActivateEndpoint+0x336>
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c58:	83bb      	strh	r3, [r7, #28]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	441a      	add	r2, r3
 8003c64:	8bbb      	ldrh	r3, [r7, #28]
 8003c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	837b      	strh	r3, [r7, #26]
 8003c92:	8b7b      	ldrh	r3, [r7, #26]
 8003c94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c98:	837b      	strh	r3, [r7, #26]
 8003c9a:	8b7b      	ldrh	r3, [r7, #26]
 8003c9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ca0:	837b      	strh	r3, [r7, #26]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	441a      	add	r2, r3
 8003cac:	8b7b      	ldrh	r3, [r7, #26]
 8003cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8013      	strh	r3, [r2, #0]
 8003cc2:	e1a2      	b.n	800400a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	441a      	add	r2, r3
 8003ce8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d10:	4413      	add	r3, r2
 8003d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	011a      	lsls	r2, r3, #4
 8003d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d22:	657b      	str	r3, [r7, #84]	; 0x54
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	891b      	ldrh	r3, [r3, #8]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d32:	801a      	strh	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	653b      	str	r3, [r7, #80]	; 0x50
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d44:	4413      	add	r3, r2
 8003d46:	653b      	str	r3, [r7, #80]	; 0x50
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	011a      	lsls	r2, r3, #4
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	895b      	ldrh	r3, [r3, #10]
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 8091 	bne.w	8003e94 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01b      	beq.n	8003dc2 <USB_ActivateEndpoint+0x47e>
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	873b      	strh	r3, [r7, #56]	; 0x38
 8003dd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01b      	beq.n	8003e12 <USB_ActivateEndpoint+0x4ce>
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e70:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	8013      	strh	r3, [r2, #0]
 8003e92:	e0ba      	b.n	800400a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01d      	beq.n	8003eec <USB_ActivateEndpoint+0x5a8>
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	441a      	add	r2, r3
 8003ed4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003efc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01d      	beq.n	8003f44 <USB_ActivateEndpoint+0x600>
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	78db      	ldrb	r3, [r3, #3]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d024      	beq.n	8003f96 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f6a:	f083 0320 	eor.w	r3, r3, #32
 8003f6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	441a      	add	r2, r3
 8003f7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	8013      	strh	r3, [r2, #0]
 8003f94:	e01d      	b.n	8003fd2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004006:	b29b      	uxth	r3, r3
 8004008:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800400a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800400e:	4618      	mov	r0, r3
 8004010:	376c      	adds	r7, #108	; 0x6c
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004018:	b480      	push	{r7}
 800401a:	b08d      	sub	sp, #52	; 0x34
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	7b1b      	ldrb	r3, [r3, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 808e 	bne.w	8004148 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d044      	beq.n	80040be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	81bb      	strh	r3, [r7, #12]
 8004042:	89bb      	ldrh	r3, [r7, #12]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <USB_DeactivateEndpoint+0x6c>
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	817b      	strh	r3, [r7, #10]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004080:	b29b      	uxth	r3, r3
 8004082:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409a:	813b      	strh	r3, [r7, #8]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	893b      	ldrh	r3, [r7, #8]
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]
 80040bc:	e192      	b.n	80043e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	827b      	strh	r3, [r7, #18]
 80040cc:	8a7b      	ldrh	r3, [r7, #18]
 80040ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01b      	beq.n	800410e <USB_DeactivateEndpoint+0xf6>
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	823b      	strh	r3, [r7, #16]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	8a3b      	ldrh	r3, [r7, #16]
 80040fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	81fb      	strh	r3, [r7, #14]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004142:	b29b      	uxth	r3, r3
 8004144:	8013      	strh	r3, [r2, #0]
 8004146:	e14d      	b.n	80043e4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f040 80a5 	bne.w	800429c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	843b      	strh	r3, [r7, #32]
 8004160:	8c3b      	ldrh	r3, [r7, #32]
 8004162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01b      	beq.n	80041a2 <USB_DeactivateEndpoint+0x18a>
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004180:	83fb      	strh	r3, [r7, #30]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	8bfb      	ldrh	r3, [r7, #30]
 800418e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	83bb      	strh	r3, [r7, #28]
 80041b0:	8bbb      	ldrh	r3, [r7, #28]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <USB_DeactivateEndpoint+0x1da>
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	837b      	strh	r3, [r7, #26]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	8b7b      	ldrh	r3, [r7, #26]
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	833b      	strh	r3, [r7, #24]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	441a      	add	r2, r3
 8004214:	8b3b      	ldrh	r3, [r7, #24]
 8004216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004226:	b29b      	uxth	r3, r3
 8004228:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004240:	82fb      	strh	r3, [r7, #22]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	8afb      	ldrh	r3, [r7, #22]
 800424e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	b29b      	uxth	r3, r3
 8004260:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	82bb      	strh	r3, [r7, #20]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	8abb      	ldrh	r3, [r7, #20]
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
 800429a:	e0a3      	b.n	80043e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01b      	beq.n	80042ec <USB_DeactivateEndpoint+0x2d4>
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80042d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <USB_DeactivateEndpoint+0x324>
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	853b      	strh	r3, [r7, #40]	; 0x28
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3734      	adds	r7, #52	; 0x34
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b0cc      	sub	sp, #304	; 0x130
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043fe:	6018      	str	r0, [r3, #0]
 8004400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004408:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800440a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800440e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	f041 817d 	bne.w	8005716 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800441c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800442c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	429a      	cmp	r2, r3
 8004436:	d908      	bls.n	800444a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004448:	e007      	b.n	800445a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800444a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800444e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800445a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	7b1b      	ldrb	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d152      	bne.n	8004510 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800446a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6959      	ldr	r1, [r3, #20]
 8004476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	88da      	ldrh	r2, [r3, #6]
 8004482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004486:	b29b      	uxth	r3, r3
 8004488:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800448c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004490:	6800      	ldr	r0, [r0, #0]
 8004492:	f001 ff0e 	bl	80062b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800449e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044a2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	4619      	mov	r1, r3
 80044bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80044c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044c8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	440a      	add	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	011a      	lsls	r2, r3, #4
 80044e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4413      	add	r3, r2
 80044ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80044f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004504:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	f001 b8b5 	b.w	800567a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	78db      	ldrb	r3, [r3, #3]
 800451c:	2b02      	cmp	r3, #2
 800451e:	f040 84c6 	bne.w	8004eae <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a1a      	ldr	r2, [r3, #32]
 800452e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	f240 8443 	bls.w	8004dc6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800456a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	441a      	add	r2, r3
 8004584:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004590:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800459c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ac:	1ad2      	subs	r2, r2, r3
 80045ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 823e 	beq.w	8004a5e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80045ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045ee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f040 809a 	bne.w	800473c <USB_EPStartXfer+0x34c>
 8004608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800460c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004610:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004614:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462a:	b29b      	uxth	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004636:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800463a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	440a      	add	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	011a      	lsls	r2, r3, #4
 8004652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4413      	add	r3, r2
 800465e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004666:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d122      	bne.n	80046ba <USB_EPStartXfer+0x2ca>
 8004674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004678:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004686:	b29a      	uxth	r2, r3
 8004688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004698:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	e079      	b.n	80047ae <USB_EPStartXfer+0x3be>
 80046ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046be:	2b3e      	cmp	r3, #62	; 0x3e
 80046c0:	d81b      	bhi.n	80046fa <USB_EPStartXfer+0x30a>
 80046c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c6:	085b      	lsrs	r3, r3, #1
 80046c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <USB_EPStartXfer+0x2f2>
 80046d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046dc:	3301      	adds	r3, #1
 80046de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	029b      	lsls	r3, r3, #10
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	801a      	strh	r2, [r3, #0]
 80046f8:	e059      	b.n	80047ae <USB_EPStartXfer+0x3be>
 80046fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <USB_EPStartXfer+0x32a>
 8004710:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004714:	3b01      	subs	r3, #1
 8004716:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800471a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800471e:	b29b      	uxth	r3, r3
 8004720:	029b      	lsls	r3, r3, #10
 8004722:	b29b      	uxth	r3, r3
 8004724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472c:	b29a      	uxth	r2, r3
 800472e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004732:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e038      	b.n	80047ae <USB_EPStartXfer+0x3be>
 800473c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d130      	bne.n	80047ae <USB_EPStartXfer+0x3be>
 800474c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800475a:	b29b      	uxth	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004762:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004766:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800476a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	440a      	add	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	011a      	lsls	r2, r3, #4
 8004782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004786:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4413      	add	r3, r2
 800478e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	895b      	ldrh	r3, [r3, #10]
 80047ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6959      	ldr	r1, [r3, #20]
 80047ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80047d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80047d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80047dc:	6800      	ldr	r0, [r0, #0]
 80047de:	f001 fd68 	bl	80062b2 <USB_WritePMA>
            ep->xfer_buff += len;
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047f2:	441a      	add	r2, r3
 80047f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	429a      	cmp	r2, r3
 800481a:	d90f      	bls.n	800483c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800481c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800482c:	1ad2      	subs	r2, r2, r3
 800482e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	621a      	str	r2, [r3, #32]
 800483a:	e00e      	b.n	800485a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800483c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800484c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800485a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 809a 	bne.w	80049a0 <USB_EPStartXfer+0x5b0>
 800486c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004870:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004874:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004878:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488e:	b29b      	uxth	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004896:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800489a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800489e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	440a      	add	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	011a      	lsls	r2, r3, #4
 80048b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4413      	add	r3, r2
 80048c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d122      	bne.n	800491e <USB_EPStartXfer+0x52e>
 80048d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800490e:	b29a      	uxth	r2, r3
 8004910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004914:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	e083      	b.n	8004a26 <USB_EPStartXfer+0x636>
 800491e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004922:	2b3e      	cmp	r3, #62	; 0x3e
 8004924:	d81b      	bhi.n	800495e <USB_EPStartXfer+0x56e>
 8004926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <USB_EPStartXfer+0x556>
 800493c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004940:	3301      	adds	r3, #1
 8004942:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004946:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800494a:	b29b      	uxth	r3, r3
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	b29a      	uxth	r2, r3
 8004950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004954:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e063      	b.n	8004a26 <USB_EPStartXfer+0x636>
 800495e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <USB_EPStartXfer+0x58e>
 8004974:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004978:	3b01      	subs	r3, #1
 800497a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800497e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004982:	b29b      	uxth	r3, r3
 8004984:	029b      	lsls	r3, r3, #10
 8004986:	b29b      	uxth	r3, r3
 8004988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004990:	b29a      	uxth	r2, r3
 8004992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004996:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	e042      	b.n	8004a26 <USB_EPStartXfer+0x636>
 80049a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d13a      	bne.n	8004a26 <USB_EPStartXfer+0x636>
 80049b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	4619      	mov	r1, r3
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049e2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	440a      	add	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	011a      	lsls	r2, r3, #4
 80049fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4413      	add	r3, r2
 8004a06:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	891b      	ldrh	r3, [r3, #8]
 8004a32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6959      	ldr	r1, [r3, #20]
 8004a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a54:	6800      	ldr	r0, [r0, #0]
 8004a56:	f001 fc2c 	bl	80062b2 <USB_WritePMA>
 8004a5a:	f000 be0e 	b.w	800567a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d16d      	bne.n	8004b4a <USB_EPStartXfer+0x75a>
 8004a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	4413      	add	r3, r2
 8004a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	011a      	lsls	r2, r3, #4
 8004aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d112      	bne.n	8004ad8 <USB_EPStartXfer+0x6e8>
 8004ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	e063      	b.n	8004ba0 <USB_EPStartXfer+0x7b0>
 8004ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004adc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ade:	d817      	bhi.n	8004b10 <USB_EPStartXfer+0x720>
 8004ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <USB_EPStartXfer+0x710>
 8004af6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004afa:	3301      	adds	r3, #1
 8004afc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	029b      	lsls	r3, r3, #10
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	e047      	b.n	8004ba0 <USB_EPStartXfer+0x7b0>
 8004b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d104      	bne.n	8004b30 <USB_EPStartXfer+0x740>
 8004b26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	029b      	lsls	r3, r3, #10
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e02a      	b.n	8004ba0 <USB_EPStartXfer+0x7b0>
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d122      	bne.n	8004ba0 <USB_EPStartXfer+0x7b0>
 8004b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	653b      	str	r3, [r7, #80]	; 0x50
 8004b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7a:	4413      	add	r3, r2
 8004b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	011a      	lsls	r2, r3, #4
 8004b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8e:	4413      	add	r3, r2
 8004b90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	891b      	ldrh	r3, [r3, #8]
 8004bac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6959      	ldr	r1, [r3, #20]
 8004bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bc6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bce:	6800      	ldr	r0, [r0, #0]
 8004bd0:	f001 fb6f 	bl	80062b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be4:	441a      	add	r2, r3
 8004be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d90f      	bls.n	8004c2e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1e:	1ad2      	subs	r2, r2, r3
 8004c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	621a      	str	r2, [r3, #32]
 8004c2c:	e00e      	b.n	8004c4c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
 8004c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d16d      	bne.n	8004d44 <USB_EPStartXfer+0x954>
 8004c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	4413      	add	r3, r2
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	011a      	lsls	r2, r3, #4
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d112      	bne.n	8004cd2 <USB_EPStartXfer+0x8e2>
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	801a      	strh	r2, [r3, #0]
 8004cd0:	e05d      	b.n	8004d8e <USB_EPStartXfer+0x99e>
 8004cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd8:	d817      	bhi.n	8004d0a <USB_EPStartXfer+0x91a>
 8004cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <USB_EPStartXfer+0x90a>
 8004cf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e041      	b.n	8004d8e <USB_EPStartXfer+0x99e>
 8004d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <USB_EPStartXfer+0x93a>
 8004d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	e024      	b.n	8004d8e <USB_EPStartXfer+0x99e>
 8004d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d11c      	bne.n	8004d8e <USB_EPStartXfer+0x99e>
 8004d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d68:	4413      	add	r3, r2
 8004d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	011a      	lsls	r2, r3, #4
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	895b      	ldrh	r3, [r3, #10]
 8004d9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6959      	ldr	r1, [r3, #20]
 8004daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004db4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004db8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f001 fa78 	bl	80062b2 <USB_WritePMA>
 8004dc2:	f000 bc5a 	b.w	800567a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e52:	4413      	add	r3, r2
 8004e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	011a      	lsls	r2, r3, #4
 8004e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e66:	4413      	add	r3, r2
 8004e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	891b      	ldrh	r3, [r3, #8]
 8004e84:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6959      	ldr	r1, [r3, #20]
 8004e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e9e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ea2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ea6:	6800      	ldr	r0, [r0, #0]
 8004ea8:	f001 fa03 	bl	80062b2 <USB_WritePMA>
 8004eac:	e3e5      	b.n	800567a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 81bc 	beq.w	80052c8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d16d      	bne.n	800504a <USB_EPStartXfer+0xc5a>
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8e:	4413      	add	r3, r2
 8004f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	011a      	lsls	r2, r3, #4
 8004fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fa8:	677b      	str	r3, [r7, #116]	; 0x74
 8004faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d112      	bne.n	8004fd8 <USB_EPStartXfer+0xbe8>
 8004fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	e060      	b.n	800509a <USB_EPStartXfer+0xcaa>
 8004fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8004fde:	d817      	bhi.n	8005010 <USB_EPStartXfer+0xc20>
 8004fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <USB_EPStartXfer+0xc10>
 8004ff6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005000:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005004:	b29b      	uxth	r3, r3
 8005006:	029b      	lsls	r3, r3, #10
 8005008:	b29a      	uxth	r2, r3
 800500a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	e044      	b.n	800509a <USB_EPStartXfer+0xcaa>
 8005010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800501a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <USB_EPStartXfer+0xc40>
 8005026:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800502a:	3b01      	subs	r3, #1
 800502c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005030:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005034:	b29b      	uxth	r3, r3
 8005036:	029b      	lsls	r3, r3, #10
 8005038:	b29b      	uxth	r3, r3
 800503a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005042:	b29a      	uxth	r2, r3
 8005044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e027      	b.n	800509a <USB_EPStartXfer+0xcaa>
 800504a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d11f      	bne.n	800509a <USB_EPStartXfer+0xcaa>
 800505a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005068:	b29b      	uxth	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005070:	4413      	add	r3, r2
 8005072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	011a      	lsls	r2, r3, #4
 8005084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005088:	4413      	add	r3, r2
 800508a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800508e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	b29a      	uxth	r2, r3
 8005096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005098:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	895b      	ldrh	r3, [r3, #10]
 80050a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6959      	ldr	r1, [r3, #20]
 80050b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050c8:	6800      	ldr	r0, [r0, #0]
 80050ca:	f001 f8f2 	bl	80062b2 <USB_WritePMA>
          ep->xfer_buff += len;
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050de:	441a      	add	r2, r3
 80050e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80050ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d90f      	bls.n	8005128 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005118:	1ad2      	subs	r2, r2, r3
 800511a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	621a      	str	r2, [r3, #32]
 8005126:	e00e      	b.n	8005146 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8295 	beq.w	800567a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d16d      	bne.n	800523c <USB_EPStartXfer+0xe4c>
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	66bb      	str	r3, [r7, #104]	; 0x68
 800516c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005180:	4413      	add	r3, r2
 8005182:	66bb      	str	r3, [r7, #104]	; 0x68
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005194:	4413      	add	r3, r2
 8005196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800519a:	667b      	str	r3, [r7, #100]	; 0x64
 800519c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d112      	bne.n	80051ca <USB_EPStartXfer+0xdda>
 80051a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	e063      	b.n	8005292 <USB_EPStartXfer+0xea2>
 80051ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ce:	2b3e      	cmp	r3, #62	; 0x3e
 80051d0:	d817      	bhi.n	8005202 <USB_EPStartXfer+0xe12>
 80051d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <USB_EPStartXfer+0xe02>
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ec:	3301      	adds	r3, #1
 80051ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e047      	b.n	8005292 <USB_EPStartXfer+0xea2>
 8005202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800520c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <USB_EPStartXfer+0xe32>
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521c:	3b01      	subs	r3, #1
 800521e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005226:	b29b      	uxth	r3, r3
 8005228:	029b      	lsls	r3, r3, #10
 800522a:	b29b      	uxth	r3, r3
 800522c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005234:	b29a      	uxth	r2, r3
 8005236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e02a      	b.n	8005292 <USB_EPStartXfer+0xea2>
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d122      	bne.n	8005292 <USB_EPStartXfer+0xea2>
 800524c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	673b      	str	r3, [r7, #112]	; 0x70
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005266:	b29b      	uxth	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800526c:	4413      	add	r3, r2
 800526e:	673b      	str	r3, [r7, #112]	; 0x70
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	011a      	lsls	r2, r3, #4
 800527e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005280:	4413      	add	r3, r2
 8005282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800528c:	b29a      	uxth	r2, r3
 800528e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005290:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	891b      	ldrh	r3, [r3, #8]
 800529e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6959      	ldr	r1, [r3, #20]
 80052ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052c0:	6800      	ldr	r0, [r0, #0]
 80052c2:	f000 fff6 	bl	80062b2 <USB_WritePMA>
 80052c6:	e1d8      	b.n	800567a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d178      	bne.n	80053ca <USB_EPStartXfer+0xfda>
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052fc:	4413      	add	r3, r2
 80052fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	011a      	lsls	r2, r3, #4
 8005310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005314:	4413      	add	r3, r2
 8005316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800531a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800531e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <USB_EPStartXfer+0xf64>
 8005326:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005332:	b29a      	uxth	r2, r3
 8005334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534a:	b29a      	uxth	r2, r3
 800534c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	e06b      	b.n	800542c <USB_EPStartXfer+0x103c>
 8005354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005358:	2b3e      	cmp	r3, #62	; 0x3e
 800535a:	d818      	bhi.n	800538e <USB_EPStartXfer+0xf9e>
 800535c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <USB_EPStartXfer+0xf8c>
 8005372:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005376:	3301      	adds	r3, #1
 8005378:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800537c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005380:	b29b      	uxth	r3, r3
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e04e      	b.n	800542c <USB_EPStartXfer+0x103c>
 800538e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <USB_EPStartXfer+0xfbe>
 80053a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053a8:	3b01      	subs	r3, #1
 80053aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80053ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e030      	b.n	800542c <USB_EPStartXfer+0x103c>
 80053ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d128      	bne.n	800542c <USB_EPStartXfer+0x103c>
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053fe:	4413      	add	r3, r2
 8005400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	011a      	lsls	r2, r3, #4
 8005412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005416:	4413      	add	r3, r2
 8005418:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800541c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	b29a      	uxth	r2, r3
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	891b      	ldrh	r3, [r3, #8]
 8005438:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6959      	ldr	r1, [r3, #20]
 8005448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544c:	b29b      	uxth	r3, r3
 800544e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005452:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005456:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	f000 ff29 	bl	80062b2 <USB_WritePMA>
          ep->xfer_buff += len;
 8005460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005470:	441a      	add	r2, r3
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800547e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a1a      	ldr	r2, [r3, #32]
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d90f      	bls.n	80054ba <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800549a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	621a      	str	r2, [r3, #32]
 80054b8:	e00e      	b.n	80054d8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80054d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80cc 	beq.w	800567a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d178      	bne.n	80055f2 <USB_EPStartXfer+0x1202>
 8005500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800550e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551c:	b29b      	uxth	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005524:	4413      	add	r3, r2
 8005526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800552a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	011a      	lsls	r2, r3, #4
 8005538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800553c:	4413      	add	r3, r2
 800553e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d116      	bne.n	800557c <USB_EPStartXfer+0x118c>
 800554e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800555a:	b29a      	uxth	r2, r3
 800555c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e064      	b.n	8005646 <USB_EPStartXfer+0x1256>
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	2b3e      	cmp	r3, #62	; 0x3e
 8005582:	d818      	bhi.n	80055b6 <USB_EPStartXfer+0x11c6>
 8005584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800558e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <USB_EPStartXfer+0x11b4>
 800559a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559e:	3301      	adds	r3, #1
 80055a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e047      	b.n	8005646 <USB_EPStartXfer+0x1256>
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <USB_EPStartXfer+0x11e6>
 80055cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d0:	3b01      	subs	r3, #1
 80055d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29b      	uxth	r3, r3
 80055e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e029      	b.n	8005646 <USB_EPStartXfer+0x1256>
 80055f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d121      	bne.n	8005646 <USB_EPStartXfer+0x1256>
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005610:	b29b      	uxth	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005618:	4413      	add	r3, r2
 800561a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	011a      	lsls	r2, r3, #4
 800562c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005630:	4413      	add	r3, r2
 8005632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800563a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005644:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	895b      	ldrh	r3, [r3, #10]
 8005652:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6959      	ldr	r1, [r3, #20]
 8005662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005666:	b29b      	uxth	r3, r3
 8005668:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800566c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005670:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005674:	6800      	ldr	r0, [r0, #0]
 8005676:	f000 fe1c 	bl	80062b2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800567a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800569c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80056a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a8:	8013      	strh	r3, [r2, #0]
 80056aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ae:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80056b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056b6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80056ba:	8812      	ldrh	r2, [r2, #0]
 80056bc:	f082 0210 	eor.w	r2, r2, #16
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80056ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056ce:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80056d2:	8812      	ldrh	r2, [r2, #0]
 80056d4:	f082 0220 	eor.w	r2, r2, #32
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	441a      	add	r2, r3
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570e:	b29b      	uxth	r3, r3
 8005710:	8013      	strh	r3, [r2, #0]
 8005712:	f000 bc9f 	b.w	8006054 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	7b1b      	ldrb	r3, [r3, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f040 80ae 	bne.w	8005884 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	d917      	bls.n	8005774 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005764:	1ad2      	subs	r2, r2, r3
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	619a      	str	r2, [r3, #24]
 8005772:	e00e      	b.n	8005792 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057b6:	4413      	add	r3, r2
 80057b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d116      	bne.n	800580e <USB_EPStartXfer+0x141e>
 80057e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005804:	b29a      	uxth	r2, r3
 8005806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e3e8      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
 800580e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005812:	2b3e      	cmp	r3, #62	; 0x3e
 8005814:	d818      	bhi.n	8005848 <USB_EPStartXfer+0x1458>
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <USB_EPStartXfer+0x1446>
 800582c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005830:	3301      	adds	r3, #1
 8005832:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005836:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800583a:	b29b      	uxth	r3, r3
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	b29a      	uxth	r2, r3
 8005840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e3cb      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
 8005848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2b00      	cmp	r3, #0
 800585c:	d104      	bne.n	8005868 <USB_EPStartXfer+0x1478>
 800585e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005862:	3b01      	subs	r3, #1
 8005864:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005868:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800586c:	b29b      	uxth	r3, r3
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	b29b      	uxth	r3, r3
 8005872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587a:	b29a      	uxth	r2, r3
 800587c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e3ad      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	78db      	ldrb	r3, [r3, #3]
 8005890:	2b02      	cmp	r3, #2
 8005892:	f040 8200 	bne.w	8005c96 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f040 8091 	bne.w	80059ca <USB_EPStartXfer+0x15da>
 80058a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058cc:	4413      	add	r3, r2
 80058ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	011a      	lsls	r2, r3, #4
 80058e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d116      	bne.n	800592c <USB_EPStartXfer+0x153c>
 80058fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005922:	b29a      	uxth	r2, r3
 8005924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	e083      	b.n	8005a34 <USB_EPStartXfer+0x1644>
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b3e      	cmp	r3, #62	; 0x3e
 800593a:	d820      	bhi.n	800597e <USB_EPStartXfer+0x158e>
 800593c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <USB_EPStartXfer+0x157c>
 8005962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005966:	3301      	adds	r3, #1
 8005968:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005970:	b29b      	uxth	r3, r3
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	b29a      	uxth	r2, r3
 8005976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	e05a      	b.n	8005a34 <USB_EPStartXfer+0x1644>
 800597e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <USB_EPStartXfer+0x15be>
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a8:	3b01      	subs	r3, #1
 80059aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059c6:	801a      	strh	r2, [r3, #0]
 80059c8:	e034      	b.n	8005a34 <USB_EPStartXfer+0x1644>
 80059ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d12c      	bne.n	8005a34 <USB_EPStartXfer+0x1644>
 80059da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80059e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059fe:	4413      	add	r3, r2
 8005a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	011a      	lsls	r2, r3, #4
 8005a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a16:	4413      	add	r3, r2
 8005a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8091 	bne.w	8005b76 <USB_EPStartXfer+0x1786>
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a78:	4413      	add	r3, r2
 8005a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a90:	4413      	add	r3, r2
 8005a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d116      	bne.n	8005ad8 <USB_EPStartXfer+0x16e8>
 8005aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	e07c      	b.n	8005bd2 <USB_EPStartXfer+0x17e2>
 8005ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae6:	d820      	bhi.n	8005b2a <USB_EPStartXfer+0x173a>
 8005ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d004      	beq.n	8005b18 <USB_EPStartXfer+0x1728>
 8005b0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b12:	3301      	adds	r3, #1
 8005b14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	029b      	lsls	r3, r3, #10
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e053      	b.n	8005bd2 <USB_EPStartXfer+0x17e2>
 8005b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <USB_EPStartXfer+0x176a>
 8005b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b54:	3b01      	subs	r3, #1
 8005b56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	e02d      	b.n	8005bd2 <USB_EPStartXfer+0x17e2>
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d125      	bne.n	8005bd2 <USB_EPStartXfer+0x17e2>
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	011a      	lsls	r2, r3, #4
 8005bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bd0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 81fe 	beq.w	8005fe0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c04:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <USB_EPStartXfer+0x182c>
 8005c10:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10d      	bne.n	8005c38 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c1c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 81db 	bne.w	8005fe0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c2a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 81d4 	bne.w	8005fe0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	441a      	add	r2, r3
 8005c7c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]
 8005c94:	e1a4      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	f040 819a 	bne.w	8005fdc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d917      	bls.n	8005cf4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	619a      	str	r2, [r3, #24]
 8005cf2:	e00e      	b.n	8005d12 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d178      	bne.n	8005e14 <USB_EPStartXfer+0x1a24>
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d46:	4413      	add	r3, r2
 8005d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	011a      	lsls	r2, r3, #4
 8005d5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d5e:	4413      	add	r3, r2
 8005d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <USB_EPStartXfer+0x19ae>
 8005d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e06b      	b.n	8005e76 <USB_EPStartXfer+0x1a86>
 8005d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da2:	2b3e      	cmp	r3, #62	; 0x3e
 8005da4:	d818      	bhi.n	8005dd8 <USB_EPStartXfer+0x19e8>
 8005da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <USB_EPStartXfer+0x19d6>
 8005dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e04e      	b.n	8005e76 <USB_EPStartXfer+0x1a86>
 8005dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <USB_EPStartXfer+0x1a08>
 8005dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df2:	3b01      	subs	r3, #1
 8005df4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e030      	b.n	8005e76 <USB_EPStartXfer+0x1a86>
 8005e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d128      	bne.n	8005e76 <USB_EPStartXfer+0x1a86>
 8005e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	4413      	add	r3, r2
 8005e4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	011a      	lsls	r2, r3, #4
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d178      	bne.n	8005f86 <USB_EPStartXfer+0x1b96>
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb8:	4413      	add	r3, r2
 8005eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d116      	bne.n	8005f10 <USB_EPStartXfer+0x1b20>
 8005ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	e067      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f14:	2b3e      	cmp	r3, #62	; 0x3e
 8005f16:	d818      	bhi.n	8005f4a <USB_EPStartXfer+0x1b5a>
 8005f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <USB_EPStartXfer+0x1b48>
 8005f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f32:	3301      	adds	r3, #1
 8005f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	029b      	lsls	r3, r3, #10
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e04a      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
 8005f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USB_EPStartXfer+0x1b7a>
 8005f60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f64:	3b01      	subs	r3, #1
 8005f66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	029b      	lsls	r3, r3, #10
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e02c      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d124      	bne.n	8005fe0 <USB_EPStartXfer+0x1bf0>
 8005f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fac:	4413      	add	r3, r2
 8005fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	011a      	lsls	r2, r3, #4
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e001      	b.n	8005fe0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e03a      	b.n	8006056 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800600a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800600e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006012:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006016:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800601a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800601e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	441a      	add	r2, r3
 800603c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006088:	81bb      	strh	r3, [r7, #12]
 800608a:	89bb      	ldrh	r3, [r7, #12]
 800608c:	f083 0310 	eor.w	r3, r3, #16
 8006090:	81bb      	strh	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	441a      	add	r2, r3
 800609c:	89bb      	ldrh	r3, [r7, #12]
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
 80060b2:	e01f      	b.n	80060f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ca:	81fb      	strh	r3, [r7, #14]
 80060cc:	89fb      	ldrh	r3, [r7, #14]
 80060ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060d2:	81fb      	strh	r3, [r7, #14]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	7b1b      	ldrb	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 809d 	bne.w	800624e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d04c      	beq.n	80061b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	823b      	strh	r3, [r7, #16]
 800612a:	8a3b      	ldrh	r3, [r7, #16]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01b      	beq.n	800616c <USB_EPClearStall+0x6c>
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	81fb      	strh	r3, [r7, #14]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	441a      	add	r2, r3
 8006156:	89fb      	ldrh	r3, [r7, #14]
 8006158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006168:	b29b      	uxth	r3, r3
 800616a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	78db      	ldrb	r3, [r3, #3]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d06c      	beq.n	800624e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618a:	81bb      	strh	r3, [r7, #12]
 800618c:	89bb      	ldrh	r3, [r7, #12]
 800618e:	f083 0320 	eor.w	r3, r3, #32
 8006192:	81bb      	strh	r3, [r7, #12]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	89bb      	ldrh	r3, [r7, #12]
 80061a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	8013      	strh	r3, [r2, #0]
 80061b4:	e04b      	b.n	800624e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	82fb      	strh	r3, [r7, #22]
 80061c4:	8afb      	ldrh	r3, [r7, #22]
 80061c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <USB_EPClearStall+0x106>
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	82bb      	strh	r3, [r7, #20]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8abb      	ldrh	r3, [r7, #20]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	827b      	strh	r3, [r7, #18]
 800621e:	8a7b      	ldrh	r3, [r7, #18]
 8006220:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006224:	827b      	strh	r3, [r7, #18]
 8006226:	8a7b      	ldrh	r3, [r7, #18]
 8006228:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800622c:	827b      	strh	r3, [r7, #18]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	8a7b      	ldrh	r3, [r7, #18]
 800623a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624a:	b29b      	uxth	r3, r3
 800624c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr

0800625a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2280      	movs	r2, #128	; 0x80
 8006270:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr

08006294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80062a6:	68fb      	ldr	r3, [r7, #12]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr

080062b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b08d      	sub	sp, #52	; 0x34
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	4611      	mov	r1, r2
 80062be:	461a      	mov	r2, r3
 80062c0:	460b      	mov	r3, r1
 80062c2:	80fb      	strh	r3, [r7, #6]
 80062c4:	4613      	mov	r3, r2
 80062c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062c8:	88bb      	ldrh	r3, [r7, #4]
 80062ca:	3301      	adds	r3, #1
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062d8:	88fb      	ldrh	r3, [r7, #6]
 80062da:	005a      	lsls	r2, r3, #1
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ea:	e01e      	b.n	800632a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	3301      	adds	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	b29b      	uxth	r3, r3
 8006302:	461a      	mov	r2, r3
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	b29a      	uxth	r2, r3
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	3302      	adds	r3, #2
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	3302      	adds	r3, #2
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	3301      	adds	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	3b01      	subs	r3, #1
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1dd      	bne.n	80062ec <USB_WritePMA+0x3a>
  }
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	3734      	adds	r7, #52	; 0x34
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800633c:	b480      	push	{r7}
 800633e:	b08b      	sub	sp, #44	; 0x2c
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4611      	mov	r1, r2
 8006348:	461a      	mov	r2, r3
 800634a:	460b      	mov	r3, r1
 800634c:	80fb      	strh	r3, [r7, #6]
 800634e:	4613      	mov	r3, r2
 8006350:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006352:	88bb      	ldrh	r3, [r7, #4]
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	b29b      	uxth	r3, r3
 8006358:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	005a      	lsls	r2, r3, #1
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
 8006374:	e01b      	b.n	80063ae <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	3302      	adds	r3, #2
 8006382:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	b2da      	uxtb	r2, r3
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	b2da      	uxtb	r2, r3
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	3301      	adds	r3, #1
 80063a0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	3302      	adds	r3, #2
 80063a6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	3b01      	subs	r3, #1
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e0      	bne.n	8006376 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80063b4:	88bb      	ldrh	r3, [r7, #4]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	701a      	strb	r2, [r3, #0]
  }
}
 80063d0:	bf00      	nop
 80063d2:	372c      	adds	r7, #44	; 0x2c
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr

080063da <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	7c1b      	ldrb	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d115      	bne.n	800641e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f6:	2202      	movs	r2, #2
 80063f8:	2181      	movs	r1, #129	; 0x81
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 fe45 	bl	800808a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800640a:	2202      	movs	r2, #2
 800640c:	2101      	movs	r1, #1
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 fe3b 	bl	800808a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800641c:	e012      	b.n	8006444 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800641e:	2340      	movs	r3, #64	; 0x40
 8006420:	2202      	movs	r2, #2
 8006422:	2181      	movs	r1, #129	; 0x81
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 fe30 	bl	800808a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006430:	2340      	movs	r3, #64	; 0x40
 8006432:	2202      	movs	r2, #2
 8006434:	2101      	movs	r1, #1
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fe27 	bl	800808a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006444:	2308      	movs	r3, #8
 8006446:	2203      	movs	r2, #3
 8006448:	2182      	movs	r1, #130	; 0x82
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fe1d 	bl	800808a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006456:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800645a:	f001 ff3d 	bl	80082d8 <USBD_static_malloc>
 800645e:	4602      	mov	r2, r0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	e026      	b.n	80064c4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800647c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	7c1b      	ldrb	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064aa:	2101      	movs	r1, #1
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fedd 	bl	800826c <USBD_LL_PrepareReceive>
 80064b2:	e007      	b.n	80064c4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	2101      	movs	r1, #1
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 fed4 	bl	800826c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80064de:	2181      	movs	r1, #129	; 0x81
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fdf8 	bl	80080d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064ec:	2101      	movs	r1, #1
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fdf1 	bl	80080d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064fc:	2182      	movs	r1, #130	; 0x82
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fde9 	bl	80080d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00e      	beq.n	8006532 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006524:	4618      	mov	r0, r3
 8006526:	f001 fee3 	bl	80082f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800654c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006562:	2b00      	cmp	r3, #0
 8006564:	d039      	beq.n	80065da <USBD_CDC_Setup+0x9e>
 8006566:	2b20      	cmp	r3, #32
 8006568:	d17f      	bne.n	800666a <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	88db      	ldrh	r3, [r3, #6]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d029      	beq.n	80065c6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	b25b      	sxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	da11      	bge.n	80065a0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006588:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	88d2      	ldrh	r2, [r2, #6]
 800658e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006590:	6939      	ldr	r1, [r7, #16]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	461a      	mov	r2, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 f994 	bl	80078c6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800659e:	e06b      	b.n	8006678 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785a      	ldrb	r2, [r3, #1]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	88db      	ldrh	r3, [r3, #6]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80065b6:	6939      	ldr	r1, [r7, #16]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	88db      	ldrh	r3, [r3, #6]
 80065bc:	461a      	mov	r2, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 f9af 	bl	8007922 <USBD_CtlPrepareRx>
    break;
 80065c4:	e058      	b.n	8006678 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	7850      	ldrb	r0, [r2, #1]
 80065d2:	2200      	movs	r2, #0
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	4798      	blx	r3
    break;
 80065d8:	e04e      	b.n	8006678 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	2b0b      	cmp	r3, #11
 80065e0:	d02e      	beq.n	8006640 <USBD_CDC_Setup+0x104>
 80065e2:	2b0b      	cmp	r3, #11
 80065e4:	dc38      	bgt.n	8006658 <USBD_CDC_Setup+0x11c>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <USBD_CDC_Setup+0xb4>
 80065ea:	2b0a      	cmp	r3, #10
 80065ec:	d014      	beq.n	8006618 <USBD_CDC_Setup+0xdc>
 80065ee:	e033      	b.n	8006658 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d107      	bne.n	800660a <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	2202      	movs	r2, #2
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 f95f 	bl	80078c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006608:	e02e      	b.n	8006668 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f8f0 	bl	80077f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006612:	2302      	movs	r3, #2
 8006614:	75fb      	strb	r3, [r7, #23]
      break;
 8006616:	e027      	b.n	8006668 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800661e:	2b03      	cmp	r3, #3
 8006620:	d107      	bne.n	8006632 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006622:	f107 030f 	add.w	r3, r7, #15
 8006626:	2201      	movs	r2, #1
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 f94b 	bl	80078c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006630:	e01a      	b.n	8006668 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 f8dc 	bl	80077f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800663a:	2302      	movs	r3, #2
 800663c:	75fb      	strb	r3, [r7, #23]
      break;
 800663e:	e013      	b.n	8006668 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006646:	2b03      	cmp	r3, #3
 8006648:	d00d      	beq.n	8006666 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f8d0 	bl	80077f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006652:	2302      	movs	r3, #2
 8006654:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006656:	e006      	b.n	8006666 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 f8c9 	bl	80077f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006660:	2302      	movs	r3, #2
 8006662:	75fb      	strb	r3, [r7, #23]
      break;
 8006664:	e000      	b.n	8006668 <USBD_CDC_Setup+0x12c>
      break;
 8006666:	bf00      	nop
    }
    break;
 8006668:	e006      	b.n	8006678 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f8c0 	bl	80077f2 <USBD_CtlError>
    ret = USBD_FAIL;
 8006672:	2302      	movs	r3, #2
 8006674:	75fb      	strb	r3, [r7, #23]
    break;
 8006676:	bf00      	nop
  }

  return ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006694:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800669c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d03a      	beq.n	800671e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	440b      	add	r3, r1
 80066b6:	331c      	adds	r3, #28
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d029      	beq.n	8006712 <USBD_CDC_DataIn+0x90>
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	331c      	adds	r3, #28
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	78f9      	ldrb	r1, [r7, #3]
 80066d2:	68b8      	ldr	r0, [r7, #8]
 80066d4:	460b      	mov	r3, r1
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4403      	add	r3, r0
 80066de:	3338      	adds	r3, #56	; 0x38
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	fbb2 f1f3 	udiv	r1, r2, r3
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d110      	bne.n	8006712 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	331c      	adds	r3, #28
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006704:	78f9      	ldrb	r1, [r7, #3]
 8006706:	2300      	movs	r3, #0
 8006708:	2200      	movs	r2, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fd8b 	bl	8008226 <USBD_LL_Transmit>
 8006710:	e003      	b.n	800671a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e000      	b.n	8006720 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800671e:	2302      	movs	r3, #2
  }
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800673a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fdb6 	bl	80082b2 <USBD_LL_GetRxDataSize>
 8006746:	4602      	mov	r2, r0
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00d      	beq.n	8006774 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800676c:	4611      	mov	r1, r2
 800676e:	4798      	blx	r3

    return USBD_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800678c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <USBD_CDC_EP0_RxReady+0x46>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800679e:	2bff      	cmp	r3, #255	; 0xff
 80067a0:	d010      	beq.n	80067c4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80067b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067b8:	b292      	uxth	r2, r2
 80067ba:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	22ff      	movs	r2, #255	; 0xff
 80067c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2243      	movs	r2, #67	; 0x43
 80067dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80067de:	4b03      	ldr	r3, [pc, #12]	; (80067ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000094 	.word	0x20000094

080067f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2243      	movs	r2, #67	; 0x43
 80067fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000050 	.word	0x20000050

08006810 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2243      	movs	r2, #67	; 0x43
 800681c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800681e:	4b03      	ldr	r3, [pc, #12]	; (800682c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	200000d8 	.word	0x200000d8

08006830 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	220a      	movs	r2, #10
 800683c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800683e:	4b03      	ldr	r3, [pc, #12]	; (800684c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	2000000c 	.word	0x2000000c

08006850 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800685a:	2302      	movs	r3, #2
 800685c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006890:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068e2:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01c      	beq.n	8006928 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d115      	bne.n	8006924 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006916:	b29b      	uxth	r3, r3
 8006918:	2181      	movs	r1, #129	; 0x81
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fc83 	bl	8008226 <USBD_LL_Transmit>

      return USBD_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e002      	b.n	800692a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006928:	2302      	movs	r3, #2
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006940:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006948:	2b00      	cmp	r3, #0
 800694a:	d017      	beq.n	800697c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7c1b      	ldrb	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d109      	bne.n	8006968 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800695a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695e:	2101      	movs	r1, #1
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 fc83 	bl	800826c <USBD_LL_PrepareReceive>
 8006966:	e007      	b.n	8006978 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800696e:	2340      	movs	r3, #64	; 0x40
 8006970:	2101      	movs	r1, #1
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fc7a 	bl	800826c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	e000      	b.n	800697e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800697c:	2302      	movs	r3, #2
  }
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	4613      	mov	r3, r2
 8006992:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800699a:	2302      	movs	r3, #2
 800699c:	e01a      	b.n	80069d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	79fa      	ldrb	r2, [r7, #7]
 80069ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f001 fae7 	bl	8007fa0 <USBD_LL_Init>

  return USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d006      	beq.n	80069fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]
 80069fc:	e001      	b.n	8006a02 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80069fe:	2302      	movs	r3, #2
 8006a00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fb1c 	bl	8008054 <USBD_LL_Start>

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006a46:	2302      	movs	r3, #2
 8006a48:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00c      	beq.n	8006a6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	78fa      	ldrb	r2, [r7, #3]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fe62 	bl	800777a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d016      	beq.n	8006b08 <USBD_LL_SetupStage+0x6a>
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d81c      	bhi.n	8006b18 <USBD_LL_SetupStage+0x7a>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <USBD_LL_SetupStage+0x4a>
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d008      	beq.n	8006af8 <USBD_LL_SetupStage+0x5a>
 8006ae6:	e017      	b.n	8006b18 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9c5 	bl	8006e80 <USBD_StdDevReq>
    break;
 8006af6:	e01a      	b.n	8006b2e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa27 	bl	8006f54 <USBD_StdItfReq>
    break;
 8006b06:	e012      	b.n	8006b2e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa67 	bl	8006fe4 <USBD_StdEPReq>
    break;
 8006b16:	e00a      	b.n	8006b2e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006b1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 faf4 	bl	8008114 <USBD_LL_StallEP>
    break;
 8006b2c:	bf00      	nop
  }

  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	460b      	mov	r3, r1
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d14b      	bne.n	8006be4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006b52:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d134      	bne.n	8006bc8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d919      	bls.n	8006b9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	1ad2      	subs	r2, r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d203      	bcs.n	8006b8c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	e002      	b.n	8006b92 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	461a      	mov	r2, r3
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fee1 	bl	800795e <USBD_CtlContinueRx>
 8006b9c:	e038      	b.n	8006c10 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d105      	bne.n	8006bc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fede 	bl	8007982 <USBD_CtlSendStatus>
 8006bc6:	e023      	b.n	8006c10 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d11e      	bne.n	8006c10 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006bda:	2100      	movs	r1, #0
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f001 fa99 	bl	8008114 <USBD_LL_StallEP>
 8006be2:	e015      	b.n	8006c10 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d108      	bne.n	8006c0c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	7afa      	ldrb	r2, [r7, #11]
 8006c04:	4611      	mov	r1, r2
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	4798      	blx	r3
 8006c0a:	e001      	b.n	8006c10 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e000      	b.n	8006c12 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b086      	sub	sp, #24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	460b      	mov	r3, r1
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006c28:	7afb      	ldrb	r3, [r7, #11]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d17f      	bne.n	8006d2e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3314      	adds	r3, #20
 8006c32:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d15c      	bne.n	8006cf8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d915      	bls.n	8006c76 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 fe4b 	bl	80078fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f001 fafc 	bl	800826c <USBD_LL_PrepareReceive>
 8006c74:	e04e      	b.n	8006d14 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	6912      	ldr	r2, [r2, #16]
 8006c7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c82:	fb01 f202 	mul.w	r2, r1, r2
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11c      	bne.n	8006cc6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d316      	bcc.n	8006cc6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d20f      	bcs.n	8006cc6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2100      	movs	r1, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fe27 	bl	80078fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f001 fad4 	bl	800826c <USBD_LL_PrepareReceive>
 8006cc4:	e026      	b.n	8006d14 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d105      	bne.n	8006ce8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ce8:	2180      	movs	r1, #128	; 0x80
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f001 fa12 	bl	8008114 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fe59 	bl	80079a8 <USBD_CtlReceiveStatus>
 8006cf6:	e00d      	b.n	8006d14 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d004      	beq.n	8006d0c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d103      	bne.n	8006d14 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d0c:	2180      	movs	r1, #128	; 0x80
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f001 fa00 	bl	8008114 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d11d      	bne.n	8006d5a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7ff fe81 	bl	8006a26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006d2c:	e015      	b.n	8006d5a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d108      	bne.n	8006d56 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	7afa      	ldrb	r2, [r7, #11]
 8006d4e:	4611      	mov	r1, r2
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	4798      	blx	r3
 8006d54:	e001      	b.n	8006d5a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d56:	2302      	movs	r3, #2
 8006d58:	e000      	b.n	8006d5c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2100      	movs	r1, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f989 	bl	800808a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2240      	movs	r2, #64	; 0x40
 8006d84:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2180      	movs	r1, #128	; 0x80
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 f97b 	bl	800808a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2240      	movs	r2, #64	; 0x40
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d009      	beq.n	8006ddc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6852      	ldr	r2, [r2, #4]
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
  }

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d10b      	bne.n	8006e76 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d005      	beq.n	8006ea6 <USBD_StdDevReq+0x26>
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d84f      	bhi.n	8006f3e <USBD_StdDevReq+0xbe>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d009      	beq.n	8006eb6 <USBD_StdDevReq+0x36>
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d14b      	bne.n	8006f3e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
    break;
 8006eb4:	e048      	b.n	8006f48 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b09      	cmp	r3, #9
 8006ebc:	d839      	bhi.n	8006f32 <USBD_StdDevReq+0xb2>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <USBD_StdDevReq+0x44>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006f15 	.word	0x08006f15
 8006ec8:	08006f29 	.word	0x08006f29
 8006ecc:	08006f33 	.word	0x08006f33
 8006ed0:	08006f1f 	.word	0x08006f1f
 8006ed4:	08006f33 	.word	0x08006f33
 8006ed8:	08006ef7 	.word	0x08006ef7
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006f33 	.word	0x08006f33
 8006ee4:	08006f0b 	.word	0x08006f0b
 8006ee8:	08006f01 	.word	0x08006f01
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f9da 	bl	80072a8 <USBD_GetDescriptor>
      break;
 8006ef4:	e022      	b.n	8006f3c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 facf 	bl	800749c <USBD_SetAddress>
      break;
 8006efe:	e01d      	b.n	8006f3c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fb0e 	bl	8007524 <USBD_SetConfig>
      break;
 8006f08:	e018      	b.n	8006f3c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb97 	bl	8007640 <USBD_GetConfig>
      break;
 8006f12:	e013      	b.n	8006f3c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fbc7 	bl	80076aa <USBD_GetStatus>
      break;
 8006f1c:	e00e      	b.n	8006f3c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fbf5 	bl	8007710 <USBD_SetFeature>
      break;
 8006f26:	e009      	b.n	8006f3c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fc04 	bl	8007738 <USBD_ClrFeature>
      break;
 8006f30:	e004      	b.n	8006f3c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fc5c 	bl	80077f2 <USBD_CtlError>
      break;
 8006f3a:	bf00      	nop
    }
    break;
 8006f3c:	e004      	b.n	8006f48 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc56 	bl	80077f2 <USBD_CtlError>
    break;
 8006f46:	bf00      	nop
  }

  return ret;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop

08006f54 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d005      	beq.n	8006f7a <USBD_StdItfReq+0x26>
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d82e      	bhi.n	8006fd0 <USBD_StdItfReq+0x7c>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <USBD_StdItfReq+0x26>
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d12a      	bne.n	8006fd0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f80:	3b01      	subs	r3, #1
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d81d      	bhi.n	8006fc2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	889b      	ldrh	r3, [r3, #4]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d813      	bhi.n	8006fb8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88db      	ldrh	r3, [r3, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <USBD_StdItfReq+0x78>
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10d      	bne.n	8006fcc <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fce6 	bl	8007982 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006fb6:	e009      	b.n	8006fcc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fc19 	bl	80077f2 <USBD_CtlError>
      break;
 8006fc0:	e004      	b.n	8006fcc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fc14 	bl	80077f2 <USBD_CtlError>
      break;
 8006fca:	e000      	b.n	8006fce <USBD_StdItfReq+0x7a>
      break;
 8006fcc:	bf00      	nop
    }
    break;
 8006fce:	e004      	b.n	8006fda <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc0d 	bl	80077f2 <USBD_CtlError>
    break;
 8006fd8:	bf00      	nop
  }

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	889b      	ldrh	r3, [r3, #4]
 8006ff6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d007      	beq.n	8007014 <USBD_StdEPReq+0x30>
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	f200 8144 	bhi.w	8007292 <USBD_StdEPReq+0x2ae>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <USBD_StdEPReq+0x40>
 800700e:	2b20      	cmp	r3, #32
 8007010:	f040 813f 	bne.w	8007292 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
    break;
 8007022:	e13b      	b.n	800729c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800702c:	2b20      	cmp	r3, #32
 800702e:	d10a      	bne.n	8007046 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	e12b      	b.n	800729e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d007      	beq.n	800705e <USBD_StdEPReq+0x7a>
 800704e:	2b03      	cmp	r3, #3
 8007050:	f300 8119 	bgt.w	8007286 <USBD_StdEPReq+0x2a2>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d072      	beq.n	800713e <USBD_StdEPReq+0x15a>
 8007058:	2b01      	cmp	r3, #1
 800705a:	d03a      	beq.n	80070d2 <USBD_StdEPReq+0xee>
 800705c:	e113      	b.n	8007286 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007064:	2b02      	cmp	r3, #2
 8007066:	d002      	beq.n	800706e <USBD_StdEPReq+0x8a>
 8007068:	2b03      	cmp	r3, #3
 800706a:	d015      	beq.n	8007098 <USBD_StdEPReq+0xb4>
 800706c:	e02b      	b.n	80070c6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00c      	beq.n	800708e <USBD_StdEPReq+0xaa>
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d009      	beq.n	800708e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f848 	bl	8008114 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007084:	2180      	movs	r1, #128	; 0x80
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 f844 	bl	8008114 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800708c:	e020      	b.n	80070d0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fbae 	bl	80077f2 <USBD_CtlError>
        break;
 8007096:	e01b      	b.n	80070d0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	885b      	ldrh	r3, [r3, #2]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10e      	bne.n	80070be <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00b      	beq.n	80070be <USBD_StdEPReq+0xda>
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b80      	cmp	r3, #128	; 0x80
 80070aa:	d008      	beq.n	80070be <USBD_StdEPReq+0xda>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	88db      	ldrh	r3, [r3, #6]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 f82b 	bl	8008114 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fc5f 	bl	8007982 <USBD_CtlSendStatus>

        break;
 80070c4:	e004      	b.n	80070d0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb92 	bl	80077f2 <USBD_CtlError>
        break;
 80070ce:	bf00      	nop
      }
      break;
 80070d0:	e0de      	b.n	8007290 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d002      	beq.n	80070e2 <USBD_StdEPReq+0xfe>
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d015      	beq.n	800710c <USBD_StdEPReq+0x128>
 80070e0:	e026      	b.n	8007130 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00c      	beq.n	8007102 <USBD_StdEPReq+0x11e>
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b80      	cmp	r3, #128	; 0x80
 80070ec:	d009      	beq.n	8007102 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 f80e 	bl	8008114 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 f80a 	bl	8008114 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007100:	e01c      	b.n	800713c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fb74 	bl	80077f2 <USBD_CtlError>
        break;
 800710a:	e017      	b.n	800713c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	885b      	ldrh	r3, [r3, #2]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d112      	bne.n	800713a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 f815 	bl	8008152 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc2a 	bl	8007982 <USBD_CtlSendStatus>
        }
        break;
 800712e:	e004      	b.n	800713a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb5d 	bl	80077f2 <USBD_CtlError>
        break;
 8007138:	e000      	b.n	800713c <USBD_StdEPReq+0x158>
        break;
 800713a:	bf00      	nop
      }
      break;
 800713c:	e0a8      	b.n	8007290 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007144:	2b02      	cmp	r3, #2
 8007146:	d002      	beq.n	800714e <USBD_StdEPReq+0x16a>
 8007148:	2b03      	cmp	r3, #3
 800714a:	d031      	beq.n	80071b0 <USBD_StdEPReq+0x1cc>
 800714c:	e095      	b.n	800727a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <USBD_StdEPReq+0x180>
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d004      	beq.n	8007164 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fb48 	bl	80077f2 <USBD_CtlError>
          break;
 8007162:	e08f      	b.n	8007284 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007168:	2b00      	cmp	r3, #0
 800716a:	da0b      	bge.n	8007184 <USBD_StdEPReq+0x1a0>
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	3310      	adds	r3, #16
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	4413      	add	r3, r2
 8007180:	3304      	adds	r3, #4
 8007182:	e00a      	b.n	800719a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2202      	movs	r2, #2
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fb8c 	bl	80078c6 <USBD_CtlSendData>
          break;
 80071ae:	e069      	b.n	8007284 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80071b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da11      	bge.n	80071dc <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	f003 020f 	and.w	r2, r3, #15
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	3318      	adds	r3, #24
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d117      	bne.n	8007202 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fb0c 	bl	80077f2 <USBD_CtlError>
            break;
 80071da:	e053      	b.n	8007284 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	f003 020f 	and.w	r2, r3, #15
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 faf9 	bl	80077f2 <USBD_CtlError>
            break;
 8007200:	e040      	b.n	8007284 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007206:	2b00      	cmp	r3, #0
 8007208:	da0b      	bge.n	8007222 <USBD_StdEPReq+0x23e>
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	3310      	adds	r3, #16
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	3304      	adds	r3, #4
 8007220:	e00a      	b.n	8007238 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	4413      	add	r3, r2
 8007238:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <USBD_StdEPReq+0x262>
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2b80      	cmp	r3, #128	; 0x80
 8007244:	d103      	bne.n	800724e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e00e      	b.n	800726c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 ff9c 	bl	8008190 <USBD_LL_IsStallEP>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2201      	movs	r2, #1
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e002      	b.n	800726c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2202      	movs	r2, #2
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fb27 	bl	80078c6 <USBD_CtlSendData>
          break;
 8007278:	e004      	b.n	8007284 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fab8 	bl	80077f2 <USBD_CtlError>
        break;
 8007282:	bf00      	nop
      }
      break;
 8007284:	e004      	b.n	8007290 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fab2 	bl	80077f2 <USBD_CtlError>
      break;
 800728e:	bf00      	nop
    }
    break;
 8007290:	e004      	b.n	800729c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 faac 	bl	80077f2 <USBD_CtlError>
    break;
 800729a:	bf00      	nop
  }

  return ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	885b      	ldrh	r3, [r3, #2]
 80072b6:	0a1b      	lsrs	r3, r3, #8
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	2b06      	cmp	r3, #6
 80072be:	f200 80c9 	bhi.w	8007454 <USBD_GetDescriptor+0x1ac>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <USBD_GetDescriptor+0x20>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072fd 	.word	0x080072fd
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	08007455 	.word	0x08007455
 80072d8:	08007455 	.word	0x08007455
 80072dc:	08007401 	.word	0x08007401
 80072e0:	08007427 	.word	0x08007427
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	7c12      	ldrb	r2, [r2, #16]
 80072f0:	f107 010a 	add.w	r1, r7, #10
 80072f4:	4610      	mov	r0, r2
 80072f6:	4798      	blx	r3
 80072f8:	60f8      	str	r0, [r7, #12]
    break;
 80072fa:	e0b0      	b.n	800745e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	7c1b      	ldrb	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10d      	bne.n	8007320 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	f107 020a 	add.w	r2, r7, #10
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	2202      	movs	r2, #2
 800731c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800731e:	e09e      	b.n	800745e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	f107 020a 	add.w	r2, r7, #10
 800732c:	4610      	mov	r0, r2
 800732e:	4798      	blx	r3
 8007330:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	2202      	movs	r2, #2
 8007338:	701a      	strb	r2, [r3, #0]
    break;
 800733a:	e090      	b.n	800745e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	885b      	ldrh	r3, [r3, #2]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b05      	cmp	r3, #5
 8007344:	d856      	bhi.n	80073f4 <USBD_GetDescriptor+0x14c>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBD_GetDescriptor+0xa4>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	08007365 	.word	0x08007365
 8007350:	0800737d 	.word	0x0800737d
 8007354:	08007395 	.word	0x08007395
 8007358:	080073ad 	.word	0x080073ad
 800735c:	080073c5 	.word	0x080073c5
 8007360:	080073dd 	.word	0x080073dd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	7c12      	ldrb	r2, [r2, #16]
 8007370:	f107 010a 	add.w	r1, r7, #10
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
 8007378:	60f8      	str	r0, [r7, #12]
      break;
 800737a:	e040      	b.n	80073fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	7c12      	ldrb	r2, [r2, #16]
 8007388:	f107 010a 	add.w	r1, r7, #10
 800738c:	4610      	mov	r0, r2
 800738e:	4798      	blx	r3
 8007390:	60f8      	str	r0, [r7, #12]
      break;
 8007392:	e034      	b.n	80073fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7c12      	ldrb	r2, [r2, #16]
 80073a0:	f107 010a 	add.w	r1, r7, #10
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
      break;
 80073aa:	e028      	b.n	80073fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7c12      	ldrb	r2, [r2, #16]
 80073b8:	f107 010a 	add.w	r1, r7, #10
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	60f8      	str	r0, [r7, #12]
      break;
 80073c2:	e01c      	b.n	80073fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	7c12      	ldrb	r2, [r2, #16]
 80073d0:	f107 010a 	add.w	r1, r7, #10
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	60f8      	str	r0, [r7, #12]
      break;
 80073da:	e010      	b.n	80073fe <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	7c12      	ldrb	r2, [r2, #16]
 80073e8:	f107 010a 	add.w	r1, r7, #10
 80073ec:	4610      	mov	r0, r2
 80073ee:	4798      	blx	r3
 80073f0:	60f8      	str	r0, [r7, #12]
      break;
 80073f2:	e004      	b.n	80073fe <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f9fb 	bl	80077f2 <USBD_CtlError>
      return;
 80073fc:	e04b      	b.n	8007496 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80073fe:	e02e      	b.n	800745e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7c1b      	ldrb	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d109      	bne.n	800741c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800740e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007410:	f107 020a 	add.w	r2, r7, #10
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
      break;
 800741a:	e020      	b.n	800745e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9e7 	bl	80077f2 <USBD_CtlError>
      return;
 8007424:	e037      	b.n	8007496 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	7c1b      	ldrb	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10d      	bne.n	800744a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f107 020a 	add.w	r2, r7, #10
 800743a:	4610      	mov	r0, r2
 800743c:	4798      	blx	r3
 800743e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3301      	adds	r3, #1
 8007444:	2207      	movs	r2, #7
 8007446:	701a      	strb	r2, [r3, #0]
      break;
 8007448:	e009      	b.n	800745e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f9d0 	bl	80077f2 <USBD_CtlError>
      return;
 8007452:	e020      	b.n	8007496 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f9cb 	bl	80077f2 <USBD_CtlError>
    return;
 800745c:	e01b      	b.n	8007496 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800745e:	897b      	ldrh	r3, [r7, #10]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <USBD_GetDescriptor+0x1e0>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	88db      	ldrh	r3, [r3, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	88da      	ldrh	r2, [r3, #6]
 8007470:	897b      	ldrh	r3, [r7, #10]
 8007472:	4293      	cmp	r3, r2
 8007474:	bf28      	it	cs
 8007476:	4613      	movcs	r3, r2
 8007478:	b29b      	uxth	r3, r3
 800747a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800747c:	897b      	ldrh	r3, [r7, #10]
 800747e:	461a      	mov	r2, r3
 8007480:	68f9      	ldr	r1, [r7, #12]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa1f 	bl	80078c6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	88db      	ldrh	r3, [r3, #6]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fa76 	bl	8007982 <USBD_CtlSendStatus>
  }
}
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	889b      	ldrh	r3, [r3, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d130      	bne.n	8007510 <USBD_SetAddress+0x74>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	88db      	ldrh	r3, [r3, #6]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d12c      	bne.n	8007510 <USBD_SetAddress+0x74>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	2b7f      	cmp	r3, #127	; 0x7f
 80074bc:	d828      	bhi.n	8007510 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	885b      	ldrh	r3, [r3, #2]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d104      	bne.n	80074de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f98b 	bl	80077f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074dc:	e01d      	b.n	800751a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7bfa      	ldrb	r2, [r7, #15]
 80074e2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fe7c 	bl	80081e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa46 	bl	8007982 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007504:	e009      	b.n	800751a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750e:	e004      	b.n	800751a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f96d 	bl	80077f2 <USBD_CtlError>
  }
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	885b      	ldrh	r3, [r3, #2]
 8007532:	b2da      	uxtb	r2, r3
 8007534:	4b41      	ldr	r3, [pc, #260]	; (800763c <USBD_SetConfig+0x118>)
 8007536:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007538:	4b40      	ldr	r3, [pc, #256]	; (800763c <USBD_SetConfig+0x118>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d904      	bls.n	800754a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f955 	bl	80077f2 <USBD_CtlError>
 8007548:	e075      	b.n	8007636 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007550:	2b02      	cmp	r3, #2
 8007552:	d002      	beq.n	800755a <USBD_SetConfig+0x36>
 8007554:	2b03      	cmp	r3, #3
 8007556:	d023      	beq.n	80075a0 <USBD_SetConfig+0x7c>
 8007558:	e062      	b.n	8007620 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800755a:	4b38      	ldr	r3, [pc, #224]	; (800763c <USBD_SetConfig+0x118>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01a      	beq.n	8007598 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007562:	4b36      	ldr	r3, [pc, #216]	; (800763c <USBD_SetConfig+0x118>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2203      	movs	r2, #3
 8007570:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007574:	4b31      	ldr	r3, [pc, #196]	; (800763c <USBD_SetConfig+0x118>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fa5d 	bl	8006a3a <USBD_SetClassConfig>
 8007580:	4603      	mov	r3, r0
 8007582:	2b02      	cmp	r3, #2
 8007584:	d104      	bne.n	8007590 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f932 	bl	80077f2 <USBD_CtlError>
          return;
 800758e:	e052      	b.n	8007636 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f9f6 	bl	8007982 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007596:	e04e      	b.n	8007636 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f9f2 	bl	8007982 <USBD_CtlSendStatus>
      break;
 800759e:	e04a      	b.n	8007636 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075a0:	4b26      	ldr	r3, [pc, #152]	; (800763c <USBD_SetConfig+0x118>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d112      	bne.n	80075ce <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80075b0:	4b22      	ldr	r3, [pc, #136]	; (800763c <USBD_SetConfig+0x118>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80075ba:	4b20      	ldr	r3, [pc, #128]	; (800763c <USBD_SetConfig+0x118>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fa59 	bl	8006a78 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9db 	bl	8007982 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80075cc:	e033      	b.n	8007636 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80075ce:	4b1b      	ldr	r3, [pc, #108]	; (800763c <USBD_SetConfig+0x118>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d01d      	beq.n	8007618 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff fa47 	bl	8006a78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075ea:	4b14      	ldr	r3, [pc, #80]	; (800763c <USBD_SetConfig+0x118>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f4:	4b11      	ldr	r3, [pc, #68]	; (800763c <USBD_SetConfig+0x118>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff fa1d 	bl	8006a3a <USBD_SetClassConfig>
 8007600:	4603      	mov	r3, r0
 8007602:	2b02      	cmp	r3, #2
 8007604:	d104      	bne.n	8007610 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f8f2 	bl	80077f2 <USBD_CtlError>
          return;
 800760e:	e012      	b.n	8007636 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f9b6 	bl	8007982 <USBD_CtlSendStatus>
      break;
 8007616:	e00e      	b.n	8007636 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f9b2 	bl	8007982 <USBD_CtlSendStatus>
      break;
 800761e:	e00a      	b.n	8007636 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f8e5 	bl	80077f2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007628:	4b04      	ldr	r3, [pc, #16]	; (800763c <USBD_SetConfig+0x118>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fa22 	bl	8006a78 <USBD_ClrClassConfig>
      break;
 8007634:	bf00      	nop
    }
  }
}
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000304 	.word	0x20000304

08007640 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	88db      	ldrh	r3, [r3, #6]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d004      	beq.n	800765c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f8cc 	bl	80077f2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800765a:	e022      	b.n	80076a2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007662:	2b02      	cmp	r3, #2
 8007664:	dc02      	bgt.n	800766c <USBD_GetConfig+0x2c>
 8007666:	2b00      	cmp	r3, #0
 8007668:	dc03      	bgt.n	8007672 <USBD_GetConfig+0x32>
 800766a:	e015      	b.n	8007698 <USBD_GetConfig+0x58>
 800766c:	2b03      	cmp	r3, #3
 800766e:	d00b      	beq.n	8007688 <USBD_GetConfig+0x48>
 8007670:	e012      	b.n	8007698 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3308      	adds	r3, #8
 800767c:	2201      	movs	r2, #1
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f920 	bl	80078c6 <USBD_CtlSendData>
      break;
 8007686:	e00c      	b.n	80076a2 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3304      	adds	r3, #4
 800768c:	2201      	movs	r2, #1
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f918 	bl	80078c6 <USBD_CtlSendData>
      break;
 8007696:	e004      	b.n	80076a2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f8a9 	bl	80077f2 <USBD_CtlError>
      break;
 80076a0:	bf00      	nop
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076ba:	3b01      	subs	r3, #1
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d81e      	bhi.n	80076fe <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d004      	beq.n	80076d2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f891 	bl	80077f2 <USBD_CtlError>
      break;
 80076d0:	e01a      	b.n	8007708 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f043 0202 	orr.w	r2, r3, #2
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	330c      	adds	r3, #12
 80076f2:	2202      	movs	r2, #2
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f8e5 	bl	80078c6 <USBD_CtlSendData>
    break;
 80076fc:	e004      	b.n	8007708 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f876 	bl	80077f2 <USBD_CtlError>
    break;
 8007706:	bf00      	nop
  }
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	885b      	ldrh	r3, [r3, #2]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d106      	bne.n	8007730 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f929 	bl	8007982 <USBD_CtlSendStatus>
  }

}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007748:	3b01      	subs	r3, #1
 800774a:	2b02      	cmp	r3, #2
 800774c:	d80b      	bhi.n	8007766 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d10c      	bne.n	8007770 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f90f 	bl	8007982 <USBD_CtlSendStatus>
    }
    break;
 8007764:	e004      	b.n	8007770 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f842 	bl	80077f2 <USBD_CtlError>
    break;
 800776e:	e000      	b.n	8007772 <USBD_ClrFeature+0x3a>
    break;
 8007770:	bf00      	nop
  }
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	785a      	ldrb	r2, [r3, #1]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	3302      	adds	r3, #2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b29a      	uxth	r2, r3
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	3303      	adds	r3, #3
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	4413      	add	r3, r2
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	3304      	adds	r3, #4
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	3305      	adds	r3, #5
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	3306      	adds	r3, #6
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	3307      	adds	r3, #7
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4413      	add	r3, r2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	80da      	strh	r2, [r3, #6]

}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80077fc:	2180      	movs	r1, #128	; 0x80
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fc88 	bl	8008114 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007804:	2100      	movs	r1, #0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fc84 	bl	8008114 <USBD_LL_StallEP>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d032      	beq.n	8007890 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f834 	bl	8007898 <USBD_GetLen>
 8007830:	4603      	mov	r3, r0
 8007832:	3301      	adds	r3, #1
 8007834:	b29b      	uxth	r3, r3
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	b29a      	uxth	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	75fa      	strb	r2, [r7, #23]
 8007844:	461a      	mov	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	75fa      	strb	r2, [r7, #23]
 8007856:	461a      	mov	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4413      	add	r3, r2
 800785c:	2203      	movs	r2, #3
 800785e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007860:	e012      	b.n	8007888 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	60fa      	str	r2, [r7, #12]
 8007868:	7dfa      	ldrb	r2, [r7, #23]
 800786a:	1c51      	adds	r1, r2, #1
 800786c:	75f9      	strb	r1, [r7, #23]
 800786e:	4611      	mov	r1, r2
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	440a      	add	r2, r1
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	75fa      	strb	r2, [r7, #23]
 800787e:	461a      	mov	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4413      	add	r3, r2
 8007884:	2200      	movs	r2, #0
 8007886:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e8      	bne.n	8007862 <USBD_GetString+0x4e>
    }
  }
}
 8007890:	bf00      	nop
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80078a4:	e005      	b.n	80078b2 <USBD_GetLen+0x1a>
    {
        len++;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	3301      	adds	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
        buf++;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3301      	adds	r3, #1
 80078b0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f5      	bne.n	80078a6 <USBD_GetLen+0xe>
    }

    return len;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	4613      	mov	r3, r2
 80078d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80078dc:	88fa      	ldrh	r2, [r7, #6]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	2100      	movs	r1, #0
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fc99 	bl	8008226 <USBD_LL_Transmit>

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	2100      	movs	r1, #0
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fc87 	bl	8008226 <USBD_LL_Transmit>

  return USBD_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	4613      	mov	r3, r2
 800792e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2203      	movs	r2, #3
 8007934:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007938:	88fa      	ldrh	r2, [r7, #6]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007940:	88fa      	ldrh	r2, [r7, #6]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	2100      	movs	r1, #0
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fc8c 	bl	800826c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	4613      	mov	r3, r2
 800796a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	2100      	movs	r1, #0
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fc7a 	bl	800826c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007992:	2300      	movs	r3, #0
 8007994:	2200      	movs	r2, #0
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fc44 	bl	8008226 <USBD_LL_Transmit>

  return USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2205      	movs	r2, #5
 80079b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80079b8:	2300      	movs	r3, #0
 80079ba:	2200      	movs	r2, #0
 80079bc:	2100      	movs	r1, #0
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fc54 	bl	800826c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079d4:	2200      	movs	r2, #0
 80079d6:	4912      	ldr	r1, [pc, #72]	; (8007a20 <MX_USB_DEVICE_Init+0x50>)
 80079d8:	4812      	ldr	r0, [pc, #72]	; (8007a24 <MX_USB_DEVICE_Init+0x54>)
 80079da:	f7fe ffd4 	bl	8006986 <USBD_Init>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079e4:	f7f8 fec6 	bl	8000774 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079e8:	490f      	ldr	r1, [pc, #60]	; (8007a28 <MX_USB_DEVICE_Init+0x58>)
 80079ea:	480e      	ldr	r0, [pc, #56]	; (8007a24 <MX_USB_DEVICE_Init+0x54>)
 80079ec:	f7fe fff6 	bl	80069dc <USBD_RegisterClass>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079f6:	f7f8 febd 	bl	8000774 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079fa:	490c      	ldr	r1, [pc, #48]	; (8007a2c <MX_USB_DEVICE_Init+0x5c>)
 80079fc:	4809      	ldr	r0, [pc, #36]	; (8007a24 <MX_USB_DEVICE_Init+0x54>)
 80079fe:	f7fe ff27 	bl	8006850 <USBD_CDC_RegisterInterface>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a08:	f7f8 feb4 	bl	8000774 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a0c:	4805      	ldr	r0, [pc, #20]	; (8007a24 <MX_USB_DEVICE_Init+0x54>)
 8007a0e:	f7fe fffe 	bl	8006a0e <USBD_Start>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a18:	f7f8 feac 	bl	8000774 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a1c:	bf00      	nop
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	2000012c 	.word	0x2000012c
 8007a24:	20000308 	.word	0x20000308
 8007a28:	20000018 	.word	0x20000018
 8007a2c:	2000011c 	.word	0x2000011c

08007a30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a34:	2200      	movs	r2, #0
 8007a36:	4905      	ldr	r1, [pc, #20]	; (8007a4c <CDC_Init_FS+0x1c>)
 8007a38:	4805      	ldr	r0, [pc, #20]	; (8007a50 <CDC_Init_FS+0x20>)
 8007a3a:	f7fe ff1f 	bl	800687c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a3e:	4905      	ldr	r1, [pc, #20]	; (8007a54 <CDC_Init_FS+0x24>)
 8007a40:	4803      	ldr	r0, [pc, #12]	; (8007a50 <CDC_Init_FS+0x20>)
 8007a42:	f7fe ff34 	bl	80068ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000da4 	.word	0x20000da4
 8007a50:	20000308 	.word	0x20000308
 8007a54:	200005a4 	.word	0x200005a4

08007a58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr
	...

08007a68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b23      	cmp	r3, #35	; 0x23
 8007a7c:	d84a      	bhi.n	8007b14 <CDC_Control_FS+0xac>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <CDC_Control_FS+0x1c>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007b15 	.word	0x08007b15
 8007a88:	08007b15 	.word	0x08007b15
 8007a8c:	08007b15 	.word	0x08007b15
 8007a90:	08007b15 	.word	0x08007b15
 8007a94:	08007b15 	.word	0x08007b15
 8007a98:	08007b15 	.word	0x08007b15
 8007a9c:	08007b15 	.word	0x08007b15
 8007aa0:	08007b15 	.word	0x08007b15
 8007aa4:	08007b15 	.word	0x08007b15
 8007aa8:	08007b15 	.word	0x08007b15
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007b15 	.word	0x08007b15
 8007ab4:	08007b15 	.word	0x08007b15
 8007ab8:	08007b15 	.word	0x08007b15
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007b15 	.word	0x08007b15
 8007ac8:	08007b15 	.word	0x08007b15
 8007acc:	08007b15 	.word	0x08007b15
 8007ad0:	08007b15 	.word	0x08007b15
 8007ad4:	08007b15 	.word	0x08007b15
 8007ad8:	08007b15 	.word	0x08007b15
 8007adc:	08007b15 	.word	0x08007b15
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007b15 	.word	0x08007b15
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b15 	.word	0x08007b15
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b15 	.word	0x08007b15
 8007af8:	08007b15 	.word	0x08007b15
 8007afc:	08007b15 	.word	0x08007b15
 8007b00:	08007b15 	.word	0x08007b15
 8007b04:	08007b15 	.word	0x08007b15
 8007b08:	08007b15 	.word	0x08007b15
 8007b0c:	08007b15 	.word	0x08007b15
 8007b10:	08007b15 	.word	0x08007b15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b14:	bf00      	nop
  }

  return (USBD_OK);
 8007b16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop

08007b24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	480f      	ldr	r0, [pc, #60]	; (8007b70 <CDC_Receive_FS+0x4c>)
 8007b32:	f7fe febc 	bl	80068ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b36:	480e      	ldr	r0, [pc, #56]	; (8007b70 <CDC_Receive_FS+0x4c>)
 8007b38:	f7fe fefb 	bl	8006932 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf,*Len); // Echo

  // process user input
  memset(User_Input_Buffer, '\0', 100);          // clear the external buffer
 8007b3c:	2264      	movs	r2, #100	; 0x64
 8007b3e:	2100      	movs	r1, #0
 8007b40:	480c      	ldr	r0, [pc, #48]	; (8007b74 <CDC_Receive_FS+0x50>)
 8007b42:	f000 fc43 	bl	80083cc <memset>
  memcpy(User_Input_Buffer, Buf, (uint8_t)*Len); // copy the received data from the function buffer to the external buffer
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4808      	ldr	r0, [pc, #32]	; (8007b74 <CDC_Receive_FS+0x50>)
 8007b52:	f000 fc2d 	bl	80083b0 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);              // clear the function buffer
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2100      	movs	r1, #0
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc33 	bl	80083cc <memset>

  /*if (User_Input_Buffer == " ") {
	  //
  }*/

  return (USBD_OK);
 8007b66:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000308 	.word	0x20000308
 8007b74:	20000298 	.word	0x20000298

08007b78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b88:	4b0d      	ldr	r3, [pc, #52]	; (8007bc0 <CDC_Transmit_FS+0x48>)
 8007b8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e00b      	b.n	8007bb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b9e:	887b      	ldrh	r3, [r7, #2]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <CDC_Transmit_FS+0x48>)
 8007ba6:	f7fe fe69 	bl	800687c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007baa:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <CDC_Transmit_FS+0x48>)
 8007bac:	f7fe fe92 	bl	80068d4 <USBD_CDC_TransmitPacket>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20000308 	.word	0x20000308

08007bc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2212      	movs	r2, #18
 8007bd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bd6:	4b03      	ldr	r3, [pc, #12]	; (8007be4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20000148 	.word	0x20000148

08007be8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bfa:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	2000015c 	.word	0x2000015c

08007c0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	6039      	str	r1, [r7, #0]
 8007c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	4907      	ldr	r1, [pc, #28]	; (8007c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c22:	4808      	ldr	r0, [pc, #32]	; (8007c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c24:	f7ff fdf6 	bl	8007814 <USBD_GetString>
 8007c28:	e004      	b.n	8007c34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4904      	ldr	r1, [pc, #16]	; (8007c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c2e:	4805      	ldr	r0, [pc, #20]	; (8007c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c30:	f7ff fdf0 	bl	8007814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200015a4 	.word	0x200015a4
 8007c44:	08008ce4 	.word	0x08008ce4

08007c48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	6039      	str	r1, [r7, #0]
 8007c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	4904      	ldr	r1, [pc, #16]	; (8007c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c58:	4804      	ldr	r0, [pc, #16]	; (8007c6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c5a:	f7ff fddb 	bl	8007814 <USBD_GetString>
  return USBD_StrDesc;
 8007c5e:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	200015a4 	.word	0x200015a4
 8007c6c:	08008cfc 	.word	0x08008cfc

08007c70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	221a      	movs	r2, #26
 8007c80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c82:	f000 f843 	bl	8007d0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c86:	4b02      	ldr	r3, [pc, #8]	; (8007c90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000160 	.word	0x20000160

08007c94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	4907      	ldr	r1, [pc, #28]	; (8007cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007caa:	4808      	ldr	r0, [pc, #32]	; (8007ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cac:	f7ff fdb2 	bl	8007814 <USBD_GetString>
 8007cb0:	e004      	b.n	8007cbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	4904      	ldr	r1, [pc, #16]	; (8007cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cb6:	4805      	ldr	r0, [pc, #20]	; (8007ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cb8:	f7ff fdac 	bl	8007814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200015a4 	.word	0x200015a4
 8007ccc:	08008d10 	.word	0x08008d10

08007cd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d105      	bne.n	8007cee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	4907      	ldr	r1, [pc, #28]	; (8007d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ce6:	4808      	ldr	r0, [pc, #32]	; (8007d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ce8:	f7ff fd94 	bl	8007814 <USBD_GetString>
 8007cec:	e004      	b.n	8007cf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	4904      	ldr	r1, [pc, #16]	; (8007d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cf2:	4805      	ldr	r0, [pc, #20]	; (8007d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cf4:	f7ff fd8e 	bl	8007814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	200015a4 	.word	0x200015a4
 8007d08:	08008d1c 	.word	0x08008d1c

08007d0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d12:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <Get_SerialNum+0x44>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d18:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <Get_SerialNum+0x48>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d1e:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <Get_SerialNum+0x4c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4413      	add	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d009      	beq.n	8007d46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d32:	2208      	movs	r2, #8
 8007d34:	4909      	ldr	r1, [pc, #36]	; (8007d5c <Get_SerialNum+0x50>)
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f814 	bl	8007d64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	4908      	ldr	r1, [pc, #32]	; (8007d60 <Get_SerialNum+0x54>)
 8007d40:	68b8      	ldr	r0, [r7, #8]
 8007d42:	f000 f80f 	bl	8007d64 <IntToUnicode>
  }
}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	1ff800d0 	.word	0x1ff800d0
 8007d54:	1ff800d4 	.word	0x1ff800d4
 8007d58:	1ff800d8 	.word	0x1ff800d8
 8007d5c:	20000162 	.word	0x20000162
 8007d60:	20000172 	.word	0x20000172

08007d64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d76:	2300      	movs	r3, #0
 8007d78:	75fb      	strb	r3, [r7, #23]
 8007d7a:	e027      	b.n	8007dcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	0f1b      	lsrs	r3, r3, #28
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d80b      	bhi.n	8007d9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	0f1b      	lsrs	r3, r3, #28
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	440b      	add	r3, r1
 8007d94:	3230      	adds	r2, #48	; 0x30
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	e00a      	b.n	8007db2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	0f1b      	lsrs	r3, r3, #28
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	4619      	mov	r1, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	440b      	add	r3, r1
 8007dac:	3237      	adds	r2, #55	; 0x37
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
 8007dcc:	7dfa      	ldrb	r2, [r7, #23]
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d3d3      	bcc.n	8007d7c <IntToUnicode+0x18>
  }
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bc80      	pop	{r7}
 8007dde:	4770      	bx	lr

08007de0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d106      	bne.n	8007e00 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8007df2:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <HAL_PCDEx_SetConnectionState+0x38>)
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	4a08      	ldr	r2, [pc, #32]	; (8007e18 <HAL_PCDEx_SetConnectionState+0x38>)
 8007df8:	f043 0301 	orr.w	r3, r3, #1
 8007dfc:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8007dfe:	e005      	b.n	8007e0c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <HAL_PCDEx_SetConnectionState+0x38>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	4a04      	ldr	r2, [pc, #16]	; (8007e18 <HAL_PCDEx_SetConnectionState+0x38>)
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	6053      	str	r3, [r2, #4]
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40010000 	.word	0x40010000

08007e1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a0d      	ldr	r2, [pc, #52]	; (8007e60 <HAL_PCD_MspInit+0x44>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d113      	bne.n	8007e56 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <HAL_PCD_MspInit+0x48>)
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <HAL_PCD_MspInit+0x48>)
 8007e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e38:	6253      	str	r3, [r2, #36]	; 0x24
 8007e3a:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <HAL_PCD_MspInit+0x48>)
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	2014      	movs	r0, #20
 8007e4c:	f7f8 ff57 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007e50:	2014      	movs	r0, #20
 8007e52:	f7f8 ff70 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40005c00 	.word	0x40005c00
 8007e64:	40023800 	.word	0x40023800

08007e68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f7fe fe0d 	bl	8006a9e <USBD_LL_SetupStage>
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e9e:	78fa      	ldrb	r2, [r7, #3]
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	440b      	add	r3, r1
 8007eac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f7fe fe3f 	bl	8006b38 <USBD_LL_DataOutStage>
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	440b      	add	r3, r1
 8007ee2:	333c      	adds	r3, #60	; 0x3c
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f7fe fe96 	bl	8006c1a <USBD_LL_DataInStage>
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe ffa1 	bl	8006e4c <USBD_LL_SOF>
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d001      	beq.n	8007f2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f26:	f7f8 fc25 	bl	8000774 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f30:	7bfa      	ldrb	r2, [r7, #15]
 8007f32:	4611      	mov	r1, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fe ff56 	bl	8006de6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe ff0f 	bl	8006d64 <USBD_LL_Reset>
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe ff50 	bl	8006e04 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <HAL_PCD_SuspendCallback+0x30>)
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <HAL_PCD_SuspendCallback+0x30>)
 8007f72:	f043 0306 	orr.w	r3, r3, #6
 8007f76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	e000ed00 	.word	0xe000ed00

08007f84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe ff4a 	bl	8006e2c <USBD_LL_Resume>
}
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007fa8:	4a28      	ldr	r2, [pc, #160]	; (800804c <USBD_LL_Init+0xac>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a26      	ldr	r2, [pc, #152]	; (800804c <USBD_LL_Init+0xac>)
 8007fb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8007fb8:	4b24      	ldr	r3, [pc, #144]	; (800804c <USBD_LL_Init+0xac>)
 8007fba:	4a25      	ldr	r2, [pc, #148]	; (8008050 <USBD_LL_Init+0xb0>)
 8007fbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fbe:	4b23      	ldr	r3, [pc, #140]	; (800804c <USBD_LL_Init+0xac>)
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fc4:	4b21      	ldr	r3, [pc, #132]	; (800804c <USBD_LL_Init+0xac>)
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <USBD_LL_Init+0xac>)
 8007fcc:	2202      	movs	r2, #2
 8007fce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007fd0:	4b1e      	ldr	r3, [pc, #120]	; (800804c <USBD_LL_Init+0xac>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <USBD_LL_Init+0xac>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007fdc:	481b      	ldr	r0, [pc, #108]	; (800804c <USBD_LL_Init+0xac>)
 8007fde:	f7f9 f885 	bl	80010ec <HAL_PCD_Init>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007fe8:	f7f8 fbc4 	bl	8000774 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007ff2:	2318      	movs	r3, #24
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	f7fa fc62 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008002:	2358      	movs	r3, #88	; 0x58
 8008004:	2200      	movs	r2, #0
 8008006:	2180      	movs	r1, #128	; 0x80
 8008008:	f7fa fc5a 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008012:	23c0      	movs	r3, #192	; 0xc0
 8008014:	2200      	movs	r2, #0
 8008016:	2181      	movs	r1, #129	; 0x81
 8008018:	f7fa fc52 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008022:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008026:	2200      	movs	r2, #0
 8008028:	2101      	movs	r1, #1
 800802a:	f7fa fc49 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008038:	2200      	movs	r2, #0
 800803a:	2182      	movs	r1, #130	; 0x82
 800803c:	f7fa fc40 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200017a4 	.word	0x200017a4
 8008050:	40005c00 	.word	0x40005c00

08008054 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800806a:	4618      	mov	r0, r3
 800806c:	f7f9 f91c 	bl	80012a8 <HAL_PCD_Start>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 f944 	bl	8008304 <USBD_Get_USB_Status>
 800807c:	4603      	mov	r3, r0
 800807e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008080:	7bbb      	ldrb	r3, [r7, #14]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	4608      	mov	r0, r1
 8008094:	4611      	mov	r1, r2
 8008096:	461a      	mov	r2, r3
 8008098:	4603      	mov	r3, r0
 800809a:	70fb      	strb	r3, [r7, #3]
 800809c:	460b      	mov	r3, r1
 800809e:	70bb      	strb	r3, [r7, #2]
 80080a0:	4613      	mov	r3, r2
 80080a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80080b2:	78bb      	ldrb	r3, [r7, #2]
 80080b4:	883a      	ldrh	r2, [r7, #0]
 80080b6:	78f9      	ldrb	r1, [r7, #3]
 80080b8:	f7f9 fa38 	bl	800152c <HAL_PCD_EP_Open>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f91e 	bl	8008304 <USBD_Get_USB_Status>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7f9 fa7f 	bl	80015f8 <HAL_PCD_EP_Close>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f8ff 	bl	8008304 <USBD_Get_USB_Status>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810a:	7bbb      	ldrb	r3, [r7, #14]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7f9 fb3f 	bl	80017b6 <HAL_PCD_EP_SetStall>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f8e0 	bl	8008304 <USBD_Get_USB_Status>
 8008144:	4603      	mov	r3, r0
 8008146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008148:	7bbb      	ldrb	r3, [r7, #14]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	4611      	mov	r1, r2
 8008170:	4618      	mov	r0, r3
 8008172:	f7f9 fb72 	bl	800185a <HAL_PCD_EP_ClrStall>
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 f8c1 	bl	8008304 <USBD_Get_USB_Status>
 8008182:	4603      	mov	r3, r0
 8008184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008186:	7bbb      	ldrb	r3, [r7, #14]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80081a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	da0c      	bge.n	80081c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	440b      	add	r3, r1
 80081c0:	3302      	adds	r3, #2
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	e00b      	b.n	80081de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	440b      	add	r3, r1
 80081d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80081dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f7f9 f96b 	bl	80014e2 <HAL_PCD_SetAddress>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f876 	bl	8008304 <USBD_Get_USB_Status>
 8008218:	4603      	mov	r3, r0
 800821a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800821c:	7bbb      	ldrb	r3, [r7, #14]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b086      	sub	sp, #24
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	461a      	mov	r2, r3
 8008232:	460b      	mov	r3, r1
 8008234:	72fb      	strb	r3, [r7, #11]
 8008236:	4613      	mov	r3, r2
 8008238:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008248:	893b      	ldrh	r3, [r7, #8]
 800824a:	7af9      	ldrb	r1, [r7, #11]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	f7f9 fa6f 	bl	8001730 <HAL_PCD_EP_Transmit>
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f853 	bl	8008304 <USBD_Get_USB_Status>
 800825e:	4603      	mov	r3, r0
 8008260:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008262:	7dbb      	ldrb	r3, [r7, #22]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	607a      	str	r2, [r7, #4]
 8008276:	461a      	mov	r2, r3
 8008278:	460b      	mov	r3, r1
 800827a:	72fb      	strb	r3, [r7, #11]
 800827c:	4613      	mov	r3, r2
 800827e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800828e:	893b      	ldrh	r3, [r7, #8]
 8008290:	7af9      	ldrb	r1, [r7, #11]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	f7f9 f9f8 	bl	8001688 <HAL_PCD_EP_Receive>
 8008298:	4603      	mov	r3, r0
 800829a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f830 	bl	8008304 <USBD_Get_USB_Status>
 80082a4:	4603      	mov	r3, r0
 80082a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7f9 fa1a 	bl	8001702 <HAL_PCD_EP_GetRxCount>
 80082ce:	4603      	mov	r3, r0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082e0:	4b02      	ldr	r3, [pc, #8]	; (80082ec <USBD_static_malloc+0x14>)
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr
 80082ec:	20001a90 	.word	0x20001a90

080082f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]

}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
	...

08008304 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d817      	bhi.n	8008348 <USBD_Get_USB_Status+0x44>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <USBD_Get_USB_Status+0x1c>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008331 	.word	0x08008331
 8008324:	08008337 	.word	0x08008337
 8008328:	0800833d 	.word	0x0800833d
 800832c:	08008343 	.word	0x08008343
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
    break;
 8008334:	e00b      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008336:	2302      	movs	r3, #2
 8008338:	73fb      	strb	r3, [r7, #15]
    break;
 800833a:	e008      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
    break;
 8008340:	e005      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008342:	2302      	movs	r3, #2
 8008344:	73fb      	strb	r3, [r7, #15]
    break;
 8008346:	e002      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	73fb      	strb	r3, [r7, #15]
    break;
 800834c:	bf00      	nop
  }
  return usb_status;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop

0800835c <__errno>:
 800835c:	4b01      	ldr	r3, [pc, #4]	; (8008364 <__errno+0x8>)
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	2000017c 	.word	0x2000017c

08008368 <__libc_init_array>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	2600      	movs	r6, #0
 800836c:	4d0c      	ldr	r5, [pc, #48]	; (80083a0 <__libc_init_array+0x38>)
 800836e:	4c0d      	ldr	r4, [pc, #52]	; (80083a4 <__libc_init_array+0x3c>)
 8008370:	1b64      	subs	r4, r4, r5
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	42a6      	cmp	r6, r4
 8008376:	d109      	bne.n	800838c <__libc_init_array+0x24>
 8008378:	f000 fc9c 	bl	8008cb4 <_init>
 800837c:	2600      	movs	r6, #0
 800837e:	4d0a      	ldr	r5, [pc, #40]	; (80083a8 <__libc_init_array+0x40>)
 8008380:	4c0a      	ldr	r4, [pc, #40]	; (80083ac <__libc_init_array+0x44>)
 8008382:	1b64      	subs	r4, r4, r5
 8008384:	10a4      	asrs	r4, r4, #2
 8008386:	42a6      	cmp	r6, r4
 8008388:	d105      	bne.n	8008396 <__libc_init_array+0x2e>
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008390:	4798      	blx	r3
 8008392:	3601      	adds	r6, #1
 8008394:	e7ee      	b.n	8008374 <__libc_init_array+0xc>
 8008396:	f855 3b04 	ldr.w	r3, [r5], #4
 800839a:	4798      	blx	r3
 800839c:	3601      	adds	r6, #1
 800839e:	e7f2      	b.n	8008386 <__libc_init_array+0x1e>
 80083a0:	08008d8c 	.word	0x08008d8c
 80083a4:	08008d8c 	.word	0x08008d8c
 80083a8:	08008d8c 	.word	0x08008d8c
 80083ac:	08008d90 	.word	0x08008d90

080083b0 <memcpy>:
 80083b0:	440a      	add	r2, r1
 80083b2:	4291      	cmp	r1, r2
 80083b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083b8:	d100      	bne.n	80083bc <memcpy+0xc>
 80083ba:	4770      	bx	lr
 80083bc:	b510      	push	{r4, lr}
 80083be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c8:	d1f9      	bne.n	80083be <memcpy+0xe>
 80083ca:	bd10      	pop	{r4, pc}

080083cc <memset>:
 80083cc:	4603      	mov	r3, r0
 80083ce:	4402      	add	r2, r0
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d100      	bne.n	80083d6 <memset+0xa>
 80083d4:	4770      	bx	lr
 80083d6:	f803 1b01 	strb.w	r1, [r3], #1
 80083da:	e7f9      	b.n	80083d0 <memset+0x4>

080083dc <siprintf>:
 80083dc:	b40e      	push	{r1, r2, r3}
 80083de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e2:	b500      	push	{lr}
 80083e4:	b09c      	sub	sp, #112	; 0x70
 80083e6:	ab1d      	add	r3, sp, #116	; 0x74
 80083e8:	9002      	str	r0, [sp, #8]
 80083ea:	9006      	str	r0, [sp, #24]
 80083ec:	9107      	str	r1, [sp, #28]
 80083ee:	9104      	str	r1, [sp, #16]
 80083f0:	4808      	ldr	r0, [pc, #32]	; (8008414 <siprintf+0x38>)
 80083f2:	4909      	ldr	r1, [pc, #36]	; (8008418 <siprintf+0x3c>)
 80083f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f8:	9105      	str	r1, [sp, #20]
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	a902      	add	r1, sp, #8
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	f000 f868 	bl	80084d4 <_svfiprintf_r>
 8008404:	2200      	movs	r2, #0
 8008406:	9b02      	ldr	r3, [sp, #8]
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	b01c      	add	sp, #112	; 0x70
 800840c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008410:	b003      	add	sp, #12
 8008412:	4770      	bx	lr
 8008414:	2000017c 	.word	0x2000017c
 8008418:	ffff0208 	.word	0xffff0208

0800841c <__ssputs_r>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	688e      	ldr	r6, [r1, #8]
 8008422:	4682      	mov	sl, r0
 8008424:	429e      	cmp	r6, r3
 8008426:	460c      	mov	r4, r1
 8008428:	4690      	mov	r8, r2
 800842a:	461f      	mov	r7, r3
 800842c:	d838      	bhi.n	80084a0 <__ssputs_r+0x84>
 800842e:	898a      	ldrh	r2, [r1, #12]
 8008430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008434:	d032      	beq.n	800849c <__ssputs_r+0x80>
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	6909      	ldr	r1, [r1, #16]
 800843a:	3301      	adds	r3, #1
 800843c:	eba5 0901 	sub.w	r9, r5, r1
 8008440:	6965      	ldr	r5, [r4, #20]
 8008442:	444b      	add	r3, r9
 8008444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800844c:	106d      	asrs	r5, r5, #1
 800844e:	429d      	cmp	r5, r3
 8008450:	bf38      	it	cc
 8008452:	461d      	movcc	r5, r3
 8008454:	0553      	lsls	r3, r2, #21
 8008456:	d531      	bpl.n	80084bc <__ssputs_r+0xa0>
 8008458:	4629      	mov	r1, r5
 800845a:	f000 fb61 	bl	8008b20 <_malloc_r>
 800845e:	4606      	mov	r6, r0
 8008460:	b950      	cbnz	r0, 8008478 <__ssputs_r+0x5c>
 8008462:	230c      	movs	r3, #12
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	f8ca 3000 	str.w	r3, [sl]
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008472:	81a3      	strh	r3, [r4, #12]
 8008474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008478:	464a      	mov	r2, r9
 800847a:	6921      	ldr	r1, [r4, #16]
 800847c:	f7ff ff98 	bl	80083b0 <memcpy>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	6126      	str	r6, [r4, #16]
 800848e:	444e      	add	r6, r9
 8008490:	6026      	str	r6, [r4, #0]
 8008492:	463e      	mov	r6, r7
 8008494:	6165      	str	r5, [r4, #20]
 8008496:	eba5 0509 	sub.w	r5, r5, r9
 800849a:	60a5      	str	r5, [r4, #8]
 800849c:	42be      	cmp	r6, r7
 800849e:	d900      	bls.n	80084a2 <__ssputs_r+0x86>
 80084a0:	463e      	mov	r6, r7
 80084a2:	4632      	mov	r2, r6
 80084a4:	4641      	mov	r1, r8
 80084a6:	6820      	ldr	r0, [r4, #0]
 80084a8:	f000 fab8 	bl	8008a1c <memmove>
 80084ac:	68a3      	ldr	r3, [r4, #8]
 80084ae:	2000      	movs	r0, #0
 80084b0:	1b9b      	subs	r3, r3, r6
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	4433      	add	r3, r6
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	e7db      	b.n	8008474 <__ssputs_r+0x58>
 80084bc:	462a      	mov	r2, r5
 80084be:	f000 fba3 	bl	8008c08 <_realloc_r>
 80084c2:	4606      	mov	r6, r0
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d1e1      	bne.n	800848c <__ssputs_r+0x70>
 80084c8:	4650      	mov	r0, sl
 80084ca:	6921      	ldr	r1, [r4, #16]
 80084cc:	f000 fac0 	bl	8008a50 <_free_r>
 80084d0:	e7c7      	b.n	8008462 <__ssputs_r+0x46>
	...

080084d4 <_svfiprintf_r>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4698      	mov	r8, r3
 80084da:	898b      	ldrh	r3, [r1, #12]
 80084dc:	4607      	mov	r7, r0
 80084de:	061b      	lsls	r3, r3, #24
 80084e0:	460d      	mov	r5, r1
 80084e2:	4614      	mov	r4, r2
 80084e4:	b09d      	sub	sp, #116	; 0x74
 80084e6:	d50e      	bpl.n	8008506 <_svfiprintf_r+0x32>
 80084e8:	690b      	ldr	r3, [r1, #16]
 80084ea:	b963      	cbnz	r3, 8008506 <_svfiprintf_r+0x32>
 80084ec:	2140      	movs	r1, #64	; 0x40
 80084ee:	f000 fb17 	bl	8008b20 <_malloc_r>
 80084f2:	6028      	str	r0, [r5, #0]
 80084f4:	6128      	str	r0, [r5, #16]
 80084f6:	b920      	cbnz	r0, 8008502 <_svfiprintf_r+0x2e>
 80084f8:	230c      	movs	r3, #12
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	e0d1      	b.n	80086a6 <_svfiprintf_r+0x1d2>
 8008502:	2340      	movs	r3, #64	; 0x40
 8008504:	616b      	str	r3, [r5, #20]
 8008506:	2300      	movs	r3, #0
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	2320      	movs	r3, #32
 800850c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008510:	2330      	movs	r3, #48	; 0x30
 8008512:	f04f 0901 	mov.w	r9, #1
 8008516:	f8cd 800c 	str.w	r8, [sp, #12]
 800851a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086c0 <_svfiprintf_r+0x1ec>
 800851e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008522:	4623      	mov	r3, r4
 8008524:	469a      	mov	sl, r3
 8008526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852a:	b10a      	cbz	r2, 8008530 <_svfiprintf_r+0x5c>
 800852c:	2a25      	cmp	r2, #37	; 0x25
 800852e:	d1f9      	bne.n	8008524 <_svfiprintf_r+0x50>
 8008530:	ebba 0b04 	subs.w	fp, sl, r4
 8008534:	d00b      	beq.n	800854e <_svfiprintf_r+0x7a>
 8008536:	465b      	mov	r3, fp
 8008538:	4622      	mov	r2, r4
 800853a:	4629      	mov	r1, r5
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ff6d 	bl	800841c <__ssputs_r>
 8008542:	3001      	adds	r0, #1
 8008544:	f000 80aa 	beq.w	800869c <_svfiprintf_r+0x1c8>
 8008548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800854a:	445a      	add	r2, fp
 800854c:	9209      	str	r2, [sp, #36]	; 0x24
 800854e:	f89a 3000 	ldrb.w	r3, [sl]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80a2 	beq.w	800869c <_svfiprintf_r+0x1c8>
 8008558:	2300      	movs	r3, #0
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008562:	f10a 0a01 	add.w	sl, sl, #1
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9307      	str	r3, [sp, #28]
 800856a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856e:	931a      	str	r3, [sp, #104]	; 0x68
 8008570:	4654      	mov	r4, sl
 8008572:	2205      	movs	r2, #5
 8008574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008578:	4851      	ldr	r0, [pc, #324]	; (80086c0 <_svfiprintf_r+0x1ec>)
 800857a:	f000 fa41 	bl	8008a00 <memchr>
 800857e:	9a04      	ldr	r2, [sp, #16]
 8008580:	b9d8      	cbnz	r0, 80085ba <_svfiprintf_r+0xe6>
 8008582:	06d0      	lsls	r0, r2, #27
 8008584:	bf44      	itt	mi
 8008586:	2320      	movmi	r3, #32
 8008588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858c:	0711      	lsls	r1, r2, #28
 800858e:	bf44      	itt	mi
 8008590:	232b      	movmi	r3, #43	; 0x2b
 8008592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008596:	f89a 3000 	ldrb.w	r3, [sl]
 800859a:	2b2a      	cmp	r3, #42	; 0x2a
 800859c:	d015      	beq.n	80085ca <_svfiprintf_r+0xf6>
 800859e:	4654      	mov	r4, sl
 80085a0:	2000      	movs	r0, #0
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	9a07      	ldr	r2, [sp, #28]
 80085a8:	4621      	mov	r1, r4
 80085aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ae:	3b30      	subs	r3, #48	; 0x30
 80085b0:	2b09      	cmp	r3, #9
 80085b2:	d94e      	bls.n	8008652 <_svfiprintf_r+0x17e>
 80085b4:	b1b0      	cbz	r0, 80085e4 <_svfiprintf_r+0x110>
 80085b6:	9207      	str	r2, [sp, #28]
 80085b8:	e014      	b.n	80085e4 <_svfiprintf_r+0x110>
 80085ba:	eba0 0308 	sub.w	r3, r0, r8
 80085be:	fa09 f303 	lsl.w	r3, r9, r3
 80085c2:	4313      	orrs	r3, r2
 80085c4:	46a2      	mov	sl, r4
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	e7d2      	b.n	8008570 <_svfiprintf_r+0x9c>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	1d19      	adds	r1, r3, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	9103      	str	r1, [sp, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfbb      	ittet	lt
 80085d6:	425b      	neglt	r3, r3
 80085d8:	f042 0202 	orrlt.w	r2, r2, #2
 80085dc:	9307      	strge	r3, [sp, #28]
 80085de:	9307      	strlt	r3, [sp, #28]
 80085e0:	bfb8      	it	lt
 80085e2:	9204      	strlt	r2, [sp, #16]
 80085e4:	7823      	ldrb	r3, [r4, #0]
 80085e6:	2b2e      	cmp	r3, #46	; 0x2e
 80085e8:	d10c      	bne.n	8008604 <_svfiprintf_r+0x130>
 80085ea:	7863      	ldrb	r3, [r4, #1]
 80085ec:	2b2a      	cmp	r3, #42	; 0x2a
 80085ee:	d135      	bne.n	800865c <_svfiprintf_r+0x188>
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	3402      	adds	r4, #2
 80085f4:	1d1a      	adds	r2, r3, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	9203      	str	r2, [sp, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfb8      	it	lt
 80085fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80086c4 <_svfiprintf_r+0x1f0>
 8008608:	2203      	movs	r2, #3
 800860a:	4650      	mov	r0, sl
 800860c:	7821      	ldrb	r1, [r4, #0]
 800860e:	f000 f9f7 	bl	8008a00 <memchr>
 8008612:	b140      	cbz	r0, 8008626 <_svfiprintf_r+0x152>
 8008614:	2340      	movs	r3, #64	; 0x40
 8008616:	eba0 000a 	sub.w	r0, r0, sl
 800861a:	fa03 f000 	lsl.w	r0, r3, r0
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	3401      	adds	r4, #1
 8008622:	4303      	orrs	r3, r0
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862a:	2206      	movs	r2, #6
 800862c:	4826      	ldr	r0, [pc, #152]	; (80086c8 <_svfiprintf_r+0x1f4>)
 800862e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008632:	f000 f9e5 	bl	8008a00 <memchr>
 8008636:	2800      	cmp	r0, #0
 8008638:	d038      	beq.n	80086ac <_svfiprintf_r+0x1d8>
 800863a:	4b24      	ldr	r3, [pc, #144]	; (80086cc <_svfiprintf_r+0x1f8>)
 800863c:	bb1b      	cbnz	r3, 8008686 <_svfiprintf_r+0x1b2>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	3307      	adds	r3, #7
 8008642:	f023 0307 	bic.w	r3, r3, #7
 8008646:	3308      	adds	r3, #8
 8008648:	9303      	str	r3, [sp, #12]
 800864a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864c:	4433      	add	r3, r6
 800864e:	9309      	str	r3, [sp, #36]	; 0x24
 8008650:	e767      	b.n	8008522 <_svfiprintf_r+0x4e>
 8008652:	460c      	mov	r4, r1
 8008654:	2001      	movs	r0, #1
 8008656:	fb0c 3202 	mla	r2, ip, r2, r3
 800865a:	e7a5      	b.n	80085a8 <_svfiprintf_r+0xd4>
 800865c:	2300      	movs	r3, #0
 800865e:	f04f 0c0a 	mov.w	ip, #10
 8008662:	4619      	mov	r1, r3
 8008664:	3401      	adds	r4, #1
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	4620      	mov	r0, r4
 800866a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866e:	3a30      	subs	r2, #48	; 0x30
 8008670:	2a09      	cmp	r2, #9
 8008672:	d903      	bls.n	800867c <_svfiprintf_r+0x1a8>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0c5      	beq.n	8008604 <_svfiprintf_r+0x130>
 8008678:	9105      	str	r1, [sp, #20]
 800867a:	e7c3      	b.n	8008604 <_svfiprintf_r+0x130>
 800867c:	4604      	mov	r4, r0
 800867e:	2301      	movs	r3, #1
 8008680:	fb0c 2101 	mla	r1, ip, r1, r2
 8008684:	e7f0      	b.n	8008668 <_svfiprintf_r+0x194>
 8008686:	ab03      	add	r3, sp, #12
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	462a      	mov	r2, r5
 800868c:	4638      	mov	r0, r7
 800868e:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <_svfiprintf_r+0x1fc>)
 8008690:	a904      	add	r1, sp, #16
 8008692:	f3af 8000 	nop.w
 8008696:	1c42      	adds	r2, r0, #1
 8008698:	4606      	mov	r6, r0
 800869a:	d1d6      	bne.n	800864a <_svfiprintf_r+0x176>
 800869c:	89ab      	ldrh	r3, [r5, #12]
 800869e:	065b      	lsls	r3, r3, #25
 80086a0:	f53f af2c 	bmi.w	80084fc <_svfiprintf_r+0x28>
 80086a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a6:	b01d      	add	sp, #116	; 0x74
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	462a      	mov	r2, r5
 80086b2:	4638      	mov	r0, r7
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <_svfiprintf_r+0x1fc>)
 80086b6:	a904      	add	r1, sp, #16
 80086b8:	f000 f87c 	bl	80087b4 <_printf_i>
 80086bc:	e7eb      	b.n	8008696 <_svfiprintf_r+0x1c2>
 80086be:	bf00      	nop
 80086c0:	08008d50 	.word	0x08008d50
 80086c4:	08008d56 	.word	0x08008d56
 80086c8:	08008d5a 	.word	0x08008d5a
 80086cc:	00000000 	.word	0x00000000
 80086d0:	0800841d 	.word	0x0800841d

080086d4 <_printf_common>:
 80086d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	4616      	mov	r6, r2
 80086da:	4699      	mov	r9, r3
 80086dc:	688a      	ldr	r2, [r1, #8]
 80086de:	690b      	ldr	r3, [r1, #16]
 80086e0:	4607      	mov	r7, r0
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bfb8      	it	lt
 80086e6:	4613      	movlt	r3, r2
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086ee:	460c      	mov	r4, r1
 80086f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086f4:	b10a      	cbz	r2, 80086fa <_printf_common+0x26>
 80086f6:	3301      	adds	r3, #1
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	0699      	lsls	r1, r3, #26
 80086fe:	bf42      	ittt	mi
 8008700:	6833      	ldrmi	r3, [r6, #0]
 8008702:	3302      	addmi	r3, #2
 8008704:	6033      	strmi	r3, [r6, #0]
 8008706:	6825      	ldr	r5, [r4, #0]
 8008708:	f015 0506 	ands.w	r5, r5, #6
 800870c:	d106      	bne.n	800871c <_printf_common+0x48>
 800870e:	f104 0a19 	add.w	sl, r4, #25
 8008712:	68e3      	ldr	r3, [r4, #12]
 8008714:	6832      	ldr	r2, [r6, #0]
 8008716:	1a9b      	subs	r3, r3, r2
 8008718:	42ab      	cmp	r3, r5
 800871a:	dc28      	bgt.n	800876e <_printf_common+0x9a>
 800871c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008720:	1e13      	subs	r3, r2, #0
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	bf18      	it	ne
 8008726:	2301      	movne	r3, #1
 8008728:	0692      	lsls	r2, r2, #26
 800872a:	d42d      	bmi.n	8008788 <_printf_common+0xb4>
 800872c:	4649      	mov	r1, r9
 800872e:	4638      	mov	r0, r7
 8008730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008734:	47c0      	blx	r8
 8008736:	3001      	adds	r0, #1
 8008738:	d020      	beq.n	800877c <_printf_common+0xa8>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	68e5      	ldr	r5, [r4, #12]
 800873e:	f003 0306 	and.w	r3, r3, #6
 8008742:	2b04      	cmp	r3, #4
 8008744:	bf18      	it	ne
 8008746:	2500      	movne	r5, #0
 8008748:	6832      	ldr	r2, [r6, #0]
 800874a:	f04f 0600 	mov.w	r6, #0
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	bf08      	it	eq
 8008752:	1aad      	subeq	r5, r5, r2
 8008754:	6922      	ldr	r2, [r4, #16]
 8008756:	bf08      	it	eq
 8008758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800875c:	4293      	cmp	r3, r2
 800875e:	bfc4      	itt	gt
 8008760:	1a9b      	subgt	r3, r3, r2
 8008762:	18ed      	addgt	r5, r5, r3
 8008764:	341a      	adds	r4, #26
 8008766:	42b5      	cmp	r5, r6
 8008768:	d11a      	bne.n	80087a0 <_printf_common+0xcc>
 800876a:	2000      	movs	r0, #0
 800876c:	e008      	b.n	8008780 <_printf_common+0xac>
 800876e:	2301      	movs	r3, #1
 8008770:	4652      	mov	r2, sl
 8008772:	4649      	mov	r1, r9
 8008774:	4638      	mov	r0, r7
 8008776:	47c0      	blx	r8
 8008778:	3001      	adds	r0, #1
 800877a:	d103      	bne.n	8008784 <_printf_common+0xb0>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008784:	3501      	adds	r5, #1
 8008786:	e7c4      	b.n	8008712 <_printf_common+0x3e>
 8008788:	2030      	movs	r0, #48	; 0x30
 800878a:	18e1      	adds	r1, r4, r3
 800878c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008796:	4422      	add	r2, r4
 8008798:	3302      	adds	r3, #2
 800879a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800879e:	e7c5      	b.n	800872c <_printf_common+0x58>
 80087a0:	2301      	movs	r3, #1
 80087a2:	4622      	mov	r2, r4
 80087a4:	4649      	mov	r1, r9
 80087a6:	4638      	mov	r0, r7
 80087a8:	47c0      	blx	r8
 80087aa:	3001      	adds	r0, #1
 80087ac:	d0e6      	beq.n	800877c <_printf_common+0xa8>
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7d9      	b.n	8008766 <_printf_common+0x92>
	...

080087b4 <_printf_i>:
 80087b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b8:	7e0f      	ldrb	r7, [r1, #24]
 80087ba:	4691      	mov	r9, r2
 80087bc:	2f78      	cmp	r7, #120	; 0x78
 80087be:	4680      	mov	r8, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	469a      	mov	sl, r3
 80087c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ca:	d807      	bhi.n	80087dc <_printf_i+0x28>
 80087cc:	2f62      	cmp	r7, #98	; 0x62
 80087ce:	d80a      	bhi.n	80087e6 <_printf_i+0x32>
 80087d0:	2f00      	cmp	r7, #0
 80087d2:	f000 80d9 	beq.w	8008988 <_printf_i+0x1d4>
 80087d6:	2f58      	cmp	r7, #88	; 0x58
 80087d8:	f000 80a4 	beq.w	8008924 <_printf_i+0x170>
 80087dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087e4:	e03a      	b.n	800885c <_printf_i+0xa8>
 80087e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ea:	2b15      	cmp	r3, #21
 80087ec:	d8f6      	bhi.n	80087dc <_printf_i+0x28>
 80087ee:	a101      	add	r1, pc, #4	; (adr r1, 80087f4 <_printf_i+0x40>)
 80087f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087f4:	0800884d 	.word	0x0800884d
 80087f8:	08008861 	.word	0x08008861
 80087fc:	080087dd 	.word	0x080087dd
 8008800:	080087dd 	.word	0x080087dd
 8008804:	080087dd 	.word	0x080087dd
 8008808:	080087dd 	.word	0x080087dd
 800880c:	08008861 	.word	0x08008861
 8008810:	080087dd 	.word	0x080087dd
 8008814:	080087dd 	.word	0x080087dd
 8008818:	080087dd 	.word	0x080087dd
 800881c:	080087dd 	.word	0x080087dd
 8008820:	0800896f 	.word	0x0800896f
 8008824:	08008891 	.word	0x08008891
 8008828:	08008951 	.word	0x08008951
 800882c:	080087dd 	.word	0x080087dd
 8008830:	080087dd 	.word	0x080087dd
 8008834:	08008991 	.word	0x08008991
 8008838:	080087dd 	.word	0x080087dd
 800883c:	08008891 	.word	0x08008891
 8008840:	080087dd 	.word	0x080087dd
 8008844:	080087dd 	.word	0x080087dd
 8008848:	08008959 	.word	0x08008959
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	1d1a      	adds	r2, r3, #4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	602a      	str	r2, [r5, #0]
 8008854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800885c:	2301      	movs	r3, #1
 800885e:	e0a4      	b.n	80089aa <_printf_i+0x1f6>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	6829      	ldr	r1, [r5, #0]
 8008864:	0606      	lsls	r6, r0, #24
 8008866:	f101 0304 	add.w	r3, r1, #4
 800886a:	d50a      	bpl.n	8008882 <_printf_i+0xce>
 800886c:	680e      	ldr	r6, [r1, #0]
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	2e00      	cmp	r6, #0
 8008872:	da03      	bge.n	800887c <_printf_i+0xc8>
 8008874:	232d      	movs	r3, #45	; 0x2d
 8008876:	4276      	negs	r6, r6
 8008878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800887c:	230a      	movs	r3, #10
 800887e:	485e      	ldr	r0, [pc, #376]	; (80089f8 <_printf_i+0x244>)
 8008880:	e019      	b.n	80088b6 <_printf_i+0x102>
 8008882:	680e      	ldr	r6, [r1, #0]
 8008884:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	bf18      	it	ne
 800888c:	b236      	sxthne	r6, r6
 800888e:	e7ef      	b.n	8008870 <_printf_i+0xbc>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	6820      	ldr	r0, [r4, #0]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	6029      	str	r1, [r5, #0]
 8008898:	0601      	lsls	r1, r0, #24
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0xec>
 800889c:	681e      	ldr	r6, [r3, #0]
 800889e:	e002      	b.n	80088a6 <_printf_i+0xf2>
 80088a0:	0646      	lsls	r6, r0, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0xe8>
 80088a4:	881e      	ldrh	r6, [r3, #0]
 80088a6:	2f6f      	cmp	r7, #111	; 0x6f
 80088a8:	bf0c      	ite	eq
 80088aa:	2308      	moveq	r3, #8
 80088ac:	230a      	movne	r3, #10
 80088ae:	4852      	ldr	r0, [pc, #328]	; (80089f8 <_printf_i+0x244>)
 80088b0:	2100      	movs	r1, #0
 80088b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088b6:	6865      	ldr	r5, [r4, #4]
 80088b8:	2d00      	cmp	r5, #0
 80088ba:	bfa8      	it	ge
 80088bc:	6821      	ldrge	r1, [r4, #0]
 80088be:	60a5      	str	r5, [r4, #8]
 80088c0:	bfa4      	itt	ge
 80088c2:	f021 0104 	bicge.w	r1, r1, #4
 80088c6:	6021      	strge	r1, [r4, #0]
 80088c8:	b90e      	cbnz	r6, 80088ce <_printf_i+0x11a>
 80088ca:	2d00      	cmp	r5, #0
 80088cc:	d04d      	beq.n	800896a <_printf_i+0x1b6>
 80088ce:	4615      	mov	r5, r2
 80088d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80088d4:	fb03 6711 	mls	r7, r3, r1, r6
 80088d8:	5dc7      	ldrb	r7, [r0, r7]
 80088da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088de:	4637      	mov	r7, r6
 80088e0:	42bb      	cmp	r3, r7
 80088e2:	460e      	mov	r6, r1
 80088e4:	d9f4      	bls.n	80088d0 <_printf_i+0x11c>
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d10b      	bne.n	8008902 <_printf_i+0x14e>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	07de      	lsls	r6, r3, #31
 80088ee:	d508      	bpl.n	8008902 <_printf_i+0x14e>
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	6861      	ldr	r1, [r4, #4]
 80088f4:	4299      	cmp	r1, r3
 80088f6:	bfde      	ittt	le
 80088f8:	2330      	movle	r3, #48	; 0x30
 80088fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008902:	1b52      	subs	r2, r2, r5
 8008904:	6122      	str	r2, [r4, #16]
 8008906:	464b      	mov	r3, r9
 8008908:	4621      	mov	r1, r4
 800890a:	4640      	mov	r0, r8
 800890c:	f8cd a000 	str.w	sl, [sp]
 8008910:	aa03      	add	r2, sp, #12
 8008912:	f7ff fedf 	bl	80086d4 <_printf_common>
 8008916:	3001      	adds	r0, #1
 8008918:	d14c      	bne.n	80089b4 <_printf_i+0x200>
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	b004      	add	sp, #16
 8008920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008924:	4834      	ldr	r0, [pc, #208]	; (80089f8 <_printf_i+0x244>)
 8008926:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800892a:	6829      	ldr	r1, [r5, #0]
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008932:	6029      	str	r1, [r5, #0]
 8008934:	061d      	lsls	r5, r3, #24
 8008936:	d514      	bpl.n	8008962 <_printf_i+0x1ae>
 8008938:	07df      	lsls	r7, r3, #31
 800893a:	bf44      	itt	mi
 800893c:	f043 0320 	orrmi.w	r3, r3, #32
 8008940:	6023      	strmi	r3, [r4, #0]
 8008942:	b91e      	cbnz	r6, 800894c <_printf_i+0x198>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	f023 0320 	bic.w	r3, r3, #32
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	2310      	movs	r3, #16
 800894e:	e7af      	b.n	80088b0 <_printf_i+0xfc>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	f043 0320 	orr.w	r3, r3, #32
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	2378      	movs	r3, #120	; 0x78
 800895a:	4828      	ldr	r0, [pc, #160]	; (80089fc <_printf_i+0x248>)
 800895c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008960:	e7e3      	b.n	800892a <_printf_i+0x176>
 8008962:	0659      	lsls	r1, r3, #25
 8008964:	bf48      	it	mi
 8008966:	b2b6      	uxthmi	r6, r6
 8008968:	e7e6      	b.n	8008938 <_printf_i+0x184>
 800896a:	4615      	mov	r5, r2
 800896c:	e7bb      	b.n	80088e6 <_printf_i+0x132>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	6826      	ldr	r6, [r4, #0]
 8008972:	1d18      	adds	r0, r3, #4
 8008974:	6961      	ldr	r1, [r4, #20]
 8008976:	6028      	str	r0, [r5, #0]
 8008978:	0635      	lsls	r5, r6, #24
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	d501      	bpl.n	8008982 <_printf_i+0x1ce>
 800897e:	6019      	str	r1, [r3, #0]
 8008980:	e002      	b.n	8008988 <_printf_i+0x1d4>
 8008982:	0670      	lsls	r0, r6, #25
 8008984:	d5fb      	bpl.n	800897e <_printf_i+0x1ca>
 8008986:	8019      	strh	r1, [r3, #0]
 8008988:	2300      	movs	r3, #0
 800898a:	4615      	mov	r5, r2
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	e7ba      	b.n	8008906 <_printf_i+0x152>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	2100      	movs	r1, #0
 8008994:	1d1a      	adds	r2, r3, #4
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	681d      	ldr	r5, [r3, #0]
 800899a:	6862      	ldr	r2, [r4, #4]
 800899c:	4628      	mov	r0, r5
 800899e:	f000 f82f 	bl	8008a00 <memchr>
 80089a2:	b108      	cbz	r0, 80089a8 <_printf_i+0x1f4>
 80089a4:	1b40      	subs	r0, r0, r5
 80089a6:	6060      	str	r0, [r4, #4]
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	2300      	movs	r3, #0
 80089ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089b2:	e7a8      	b.n	8008906 <_printf_i+0x152>
 80089b4:	462a      	mov	r2, r5
 80089b6:	4649      	mov	r1, r9
 80089b8:	4640      	mov	r0, r8
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	47d0      	blx	sl
 80089be:	3001      	adds	r0, #1
 80089c0:	d0ab      	beq.n	800891a <_printf_i+0x166>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	079b      	lsls	r3, r3, #30
 80089c6:	d413      	bmi.n	80089f0 <_printf_i+0x23c>
 80089c8:	68e0      	ldr	r0, [r4, #12]
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	4298      	cmp	r0, r3
 80089ce:	bfb8      	it	lt
 80089d0:	4618      	movlt	r0, r3
 80089d2:	e7a4      	b.n	800891e <_printf_i+0x16a>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4632      	mov	r2, r6
 80089d8:	4649      	mov	r1, r9
 80089da:	4640      	mov	r0, r8
 80089dc:	47d0      	blx	sl
 80089de:	3001      	adds	r0, #1
 80089e0:	d09b      	beq.n	800891a <_printf_i+0x166>
 80089e2:	3501      	adds	r5, #1
 80089e4:	68e3      	ldr	r3, [r4, #12]
 80089e6:	9903      	ldr	r1, [sp, #12]
 80089e8:	1a5b      	subs	r3, r3, r1
 80089ea:	42ab      	cmp	r3, r5
 80089ec:	dcf2      	bgt.n	80089d4 <_printf_i+0x220>
 80089ee:	e7eb      	b.n	80089c8 <_printf_i+0x214>
 80089f0:	2500      	movs	r5, #0
 80089f2:	f104 0619 	add.w	r6, r4, #25
 80089f6:	e7f5      	b.n	80089e4 <_printf_i+0x230>
 80089f8:	08008d61 	.word	0x08008d61
 80089fc:	08008d72 	.word	0x08008d72

08008a00 <memchr>:
 8008a00:	4603      	mov	r3, r0
 8008a02:	b510      	push	{r4, lr}
 8008a04:	b2c9      	uxtb	r1, r1
 8008a06:	4402      	add	r2, r0
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	d101      	bne.n	8008a12 <memchr+0x12>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e003      	b.n	8008a1a <memchr+0x1a>
 8008a12:	7804      	ldrb	r4, [r0, #0]
 8008a14:	3301      	adds	r3, #1
 8008a16:	428c      	cmp	r4, r1
 8008a18:	d1f6      	bne.n	8008a08 <memchr+0x8>
 8008a1a:	bd10      	pop	{r4, pc}

08008a1c <memmove>:
 8008a1c:	4288      	cmp	r0, r1
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	eb01 0402 	add.w	r4, r1, r2
 8008a24:	d902      	bls.n	8008a2c <memmove+0x10>
 8008a26:	4284      	cmp	r4, r0
 8008a28:	4623      	mov	r3, r4
 8008a2a:	d807      	bhi.n	8008a3c <memmove+0x20>
 8008a2c:	1e43      	subs	r3, r0, #1
 8008a2e:	42a1      	cmp	r1, r4
 8008a30:	d008      	beq.n	8008a44 <memmove+0x28>
 8008a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a3a:	e7f8      	b.n	8008a2e <memmove+0x12>
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	4402      	add	r2, r0
 8008a40:	428a      	cmp	r2, r1
 8008a42:	d100      	bne.n	8008a46 <memmove+0x2a>
 8008a44:	bd10      	pop	{r4, pc}
 8008a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a4e:	e7f7      	b.n	8008a40 <memmove+0x24>

08008a50 <_free_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4605      	mov	r5, r0
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d040      	beq.n	8008ada <_free_r+0x8a>
 8008a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5c:	1f0c      	subs	r4, r1, #4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	bfb8      	it	lt
 8008a62:	18e4      	addlt	r4, r4, r3
 8008a64:	f000 f910 	bl	8008c88 <__malloc_lock>
 8008a68:	4a1c      	ldr	r2, [pc, #112]	; (8008adc <_free_r+0x8c>)
 8008a6a:	6813      	ldr	r3, [r2, #0]
 8008a6c:	b933      	cbnz	r3, 8008a7c <_free_r+0x2c>
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	6014      	str	r4, [r2, #0]
 8008a72:	4628      	mov	r0, r5
 8008a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a78:	f000 b90c 	b.w	8008c94 <__malloc_unlock>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d908      	bls.n	8008a92 <_free_r+0x42>
 8008a80:	6820      	ldr	r0, [r4, #0]
 8008a82:	1821      	adds	r1, r4, r0
 8008a84:	428b      	cmp	r3, r1
 8008a86:	bf01      	itttt	eq
 8008a88:	6819      	ldreq	r1, [r3, #0]
 8008a8a:	685b      	ldreq	r3, [r3, #4]
 8008a8c:	1809      	addeq	r1, r1, r0
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	e7ed      	b.n	8008a6e <_free_r+0x1e>
 8008a92:	461a      	mov	r2, r3
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	b10b      	cbz	r3, 8008a9c <_free_r+0x4c>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d9fa      	bls.n	8008a92 <_free_r+0x42>
 8008a9c:	6811      	ldr	r1, [r2, #0]
 8008a9e:	1850      	adds	r0, r2, r1
 8008aa0:	42a0      	cmp	r0, r4
 8008aa2:	d10b      	bne.n	8008abc <_free_r+0x6c>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	4401      	add	r1, r0
 8008aa8:	1850      	adds	r0, r2, r1
 8008aaa:	4283      	cmp	r3, r0
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	d1e0      	bne.n	8008a72 <_free_r+0x22>
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	4401      	add	r1, r0
 8008ab6:	6011      	str	r1, [r2, #0]
 8008ab8:	6053      	str	r3, [r2, #4]
 8008aba:	e7da      	b.n	8008a72 <_free_r+0x22>
 8008abc:	d902      	bls.n	8008ac4 <_free_r+0x74>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	e7d6      	b.n	8008a72 <_free_r+0x22>
 8008ac4:	6820      	ldr	r0, [r4, #0]
 8008ac6:	1821      	adds	r1, r4, r0
 8008ac8:	428b      	cmp	r3, r1
 8008aca:	bf01      	itttt	eq
 8008acc:	6819      	ldreq	r1, [r3, #0]
 8008ace:	685b      	ldreq	r3, [r3, #4]
 8008ad0:	1809      	addeq	r1, r1, r0
 8008ad2:	6021      	streq	r1, [r4, #0]
 8008ad4:	6063      	str	r3, [r4, #4]
 8008ad6:	6054      	str	r4, [r2, #4]
 8008ad8:	e7cb      	b.n	8008a72 <_free_r+0x22>
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20001cb0 	.word	0x20001cb0

08008ae0 <sbrk_aligned>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	4e0e      	ldr	r6, [pc, #56]	; (8008b1c <sbrk_aligned+0x3c>)
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	6831      	ldr	r1, [r6, #0]
 8008ae8:	4605      	mov	r5, r0
 8008aea:	b911      	cbnz	r1, 8008af2 <sbrk_aligned+0x12>
 8008aec:	f000 f8bc 	bl	8008c68 <_sbrk_r>
 8008af0:	6030      	str	r0, [r6, #0]
 8008af2:	4621      	mov	r1, r4
 8008af4:	4628      	mov	r0, r5
 8008af6:	f000 f8b7 	bl	8008c68 <_sbrk_r>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	d00a      	beq.n	8008b14 <sbrk_aligned+0x34>
 8008afe:	1cc4      	adds	r4, r0, #3
 8008b00:	f024 0403 	bic.w	r4, r4, #3
 8008b04:	42a0      	cmp	r0, r4
 8008b06:	d007      	beq.n	8008b18 <sbrk_aligned+0x38>
 8008b08:	1a21      	subs	r1, r4, r0
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 f8ac 	bl	8008c68 <_sbrk_r>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d101      	bne.n	8008b18 <sbrk_aligned+0x38>
 8008b14:	f04f 34ff 	mov.w	r4, #4294967295
 8008b18:	4620      	mov	r0, r4
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	20001cb4 	.word	0x20001cb4

08008b20 <_malloc_r>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	1ccd      	adds	r5, r1, #3
 8008b26:	f025 0503 	bic.w	r5, r5, #3
 8008b2a:	3508      	adds	r5, #8
 8008b2c:	2d0c      	cmp	r5, #12
 8008b2e:	bf38      	it	cc
 8008b30:	250c      	movcc	r5, #12
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	4607      	mov	r7, r0
 8008b36:	db01      	blt.n	8008b3c <_malloc_r+0x1c>
 8008b38:	42a9      	cmp	r1, r5
 8008b3a:	d905      	bls.n	8008b48 <_malloc_r+0x28>
 8008b3c:	230c      	movs	r3, #12
 8008b3e:	2600      	movs	r6, #0
 8008b40:	603b      	str	r3, [r7, #0]
 8008b42:	4630      	mov	r0, r6
 8008b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b48:	4e2e      	ldr	r6, [pc, #184]	; (8008c04 <_malloc_r+0xe4>)
 8008b4a:	f000 f89d 	bl	8008c88 <__malloc_lock>
 8008b4e:	6833      	ldr	r3, [r6, #0]
 8008b50:	461c      	mov	r4, r3
 8008b52:	bb34      	cbnz	r4, 8008ba2 <_malloc_r+0x82>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7ff ffc2 	bl	8008ae0 <sbrk_aligned>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	4604      	mov	r4, r0
 8008b60:	d14d      	bne.n	8008bfe <_malloc_r+0xde>
 8008b62:	6834      	ldr	r4, [r6, #0]
 8008b64:	4626      	mov	r6, r4
 8008b66:	2e00      	cmp	r6, #0
 8008b68:	d140      	bne.n	8008bec <_malloc_r+0xcc>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4638      	mov	r0, r7
 8008b70:	eb04 0803 	add.w	r8, r4, r3
 8008b74:	f000 f878 	bl	8008c68 <_sbrk_r>
 8008b78:	4580      	cmp	r8, r0
 8008b7a:	d13a      	bne.n	8008bf2 <_malloc_r+0xd2>
 8008b7c:	6821      	ldr	r1, [r4, #0]
 8008b7e:	3503      	adds	r5, #3
 8008b80:	1a6d      	subs	r5, r5, r1
 8008b82:	f025 0503 	bic.w	r5, r5, #3
 8008b86:	3508      	adds	r5, #8
 8008b88:	2d0c      	cmp	r5, #12
 8008b8a:	bf38      	it	cc
 8008b8c:	250c      	movcc	r5, #12
 8008b8e:	4638      	mov	r0, r7
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7ff ffa5 	bl	8008ae0 <sbrk_aligned>
 8008b96:	3001      	adds	r0, #1
 8008b98:	d02b      	beq.n	8008bf2 <_malloc_r+0xd2>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	442b      	add	r3, r5
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	e00e      	b.n	8008bc0 <_malloc_r+0xa0>
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	1b52      	subs	r2, r2, r5
 8008ba6:	d41e      	bmi.n	8008be6 <_malloc_r+0xc6>
 8008ba8:	2a0b      	cmp	r2, #11
 8008baa:	d916      	bls.n	8008bda <_malloc_r+0xba>
 8008bac:	1961      	adds	r1, r4, r5
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	6025      	str	r5, [r4, #0]
 8008bb2:	bf18      	it	ne
 8008bb4:	6059      	strne	r1, [r3, #4]
 8008bb6:	6863      	ldr	r3, [r4, #4]
 8008bb8:	bf08      	it	eq
 8008bba:	6031      	streq	r1, [r6, #0]
 8008bbc:	5162      	str	r2, [r4, r5]
 8008bbe:	604b      	str	r3, [r1, #4]
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	f104 060b 	add.w	r6, r4, #11
 8008bc6:	f000 f865 	bl	8008c94 <__malloc_unlock>
 8008bca:	f026 0607 	bic.w	r6, r6, #7
 8008bce:	1d23      	adds	r3, r4, #4
 8008bd0:	1af2      	subs	r2, r6, r3
 8008bd2:	d0b6      	beq.n	8008b42 <_malloc_r+0x22>
 8008bd4:	1b9b      	subs	r3, r3, r6
 8008bd6:	50a3      	str	r3, [r4, r2]
 8008bd8:	e7b3      	b.n	8008b42 <_malloc_r+0x22>
 8008bda:	6862      	ldr	r2, [r4, #4]
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	bf0c      	ite	eq
 8008be0:	6032      	streq	r2, [r6, #0]
 8008be2:	605a      	strne	r2, [r3, #4]
 8008be4:	e7ec      	b.n	8008bc0 <_malloc_r+0xa0>
 8008be6:	4623      	mov	r3, r4
 8008be8:	6864      	ldr	r4, [r4, #4]
 8008bea:	e7b2      	b.n	8008b52 <_malloc_r+0x32>
 8008bec:	4634      	mov	r4, r6
 8008bee:	6876      	ldr	r6, [r6, #4]
 8008bf0:	e7b9      	b.n	8008b66 <_malloc_r+0x46>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	f000 f84c 	bl	8008c94 <__malloc_unlock>
 8008bfc:	e7a1      	b.n	8008b42 <_malloc_r+0x22>
 8008bfe:	6025      	str	r5, [r4, #0]
 8008c00:	e7de      	b.n	8008bc0 <_malloc_r+0xa0>
 8008c02:	bf00      	nop
 8008c04:	20001cb0 	.word	0x20001cb0

08008c08 <_realloc_r>:
 8008c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	4614      	mov	r4, r2
 8008c10:	460e      	mov	r6, r1
 8008c12:	b921      	cbnz	r1, 8008c1e <_realloc_r+0x16>
 8008c14:	4611      	mov	r1, r2
 8008c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1a:	f7ff bf81 	b.w	8008b20 <_malloc_r>
 8008c1e:	b92a      	cbnz	r2, 8008c2c <_realloc_r+0x24>
 8008c20:	f7ff ff16 	bl	8008a50 <_free_r>
 8008c24:	4625      	mov	r5, r4
 8008c26:	4628      	mov	r0, r5
 8008c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c2c:	f000 f838 	bl	8008ca0 <_malloc_usable_size_r>
 8008c30:	4284      	cmp	r4, r0
 8008c32:	4607      	mov	r7, r0
 8008c34:	d802      	bhi.n	8008c3c <_realloc_r+0x34>
 8008c36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c3a:	d812      	bhi.n	8008c62 <_realloc_r+0x5a>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4640      	mov	r0, r8
 8008c40:	f7ff ff6e 	bl	8008b20 <_malloc_r>
 8008c44:	4605      	mov	r5, r0
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d0ed      	beq.n	8008c26 <_realloc_r+0x1e>
 8008c4a:	42bc      	cmp	r4, r7
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4631      	mov	r1, r6
 8008c50:	bf28      	it	cs
 8008c52:	463a      	movcs	r2, r7
 8008c54:	f7ff fbac 	bl	80083b0 <memcpy>
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	f7ff fef8 	bl	8008a50 <_free_r>
 8008c60:	e7e1      	b.n	8008c26 <_realloc_r+0x1e>
 8008c62:	4635      	mov	r5, r6
 8008c64:	e7df      	b.n	8008c26 <_realloc_r+0x1e>
	...

08008c68 <_sbrk_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4d05      	ldr	r5, [pc, #20]	; (8008c84 <_sbrk_r+0x1c>)
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7f7 fe7a 	bl	800096c <_sbrk>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_sbrk_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_sbrk_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20001cb8 	.word	0x20001cb8

08008c88 <__malloc_lock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_lock+0x8>)
 8008c8a:	f000 b811 	b.w	8008cb0 <__retarget_lock_acquire_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20001cbc 	.word	0x20001cbc

08008c94 <__malloc_unlock>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__malloc_unlock+0x8>)
 8008c96:	f000 b80c 	b.w	8008cb2 <__retarget_lock_release_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20001cbc 	.word	0x20001cbc

08008ca0 <_malloc_usable_size_r>:
 8008ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca4:	1f18      	subs	r0, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfbc      	itt	lt
 8008caa:	580b      	ldrlt	r3, [r1, r0]
 8008cac:	18c0      	addlt	r0, r0, r3
 8008cae:	4770      	bx	lr

08008cb0 <__retarget_lock_acquire_recursive>:
 8008cb0:	4770      	bx	lr

08008cb2 <__retarget_lock_release_recursive>:
 8008cb2:	4770      	bx	lr

08008cb4 <_init>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	bf00      	nop
 8008cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cba:	bc08      	pop	{r3}
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	4770      	bx	lr

08008cc0 <_fini>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr
