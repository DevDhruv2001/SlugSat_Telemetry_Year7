
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c118  0800c118  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c118  0800c118  0001c118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c120  0800c120  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c120  0800c120  0001c120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0800c128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004770  200004a8  0800c5d0  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c18  0800c5d0  00024c18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165de  00000000  00000000  000204d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ab  00000000  00000000  00036aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0003a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afc5  00000000  00000000  0003c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b31  00000000  00000000  0005797d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c73  00000000  00000000  0006f4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ecc  00000000  00000000  00104174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200004a8 	.word	0x200004a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b918 	.word	0x0800b918

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200004ac 	.word	0x200004ac
 8000178:	0800b918 	.word	0x0800b918

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	891b      	ldrh	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 ff49 	bl	800235c <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	75fb      	strb	r3, [r7, #23]

	// CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip

	uint8_t Address;

	uint8_t ConfigIndex = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	757b      	strb	r3, [r7, #21]
	// configure standard registers
	for (Address = 0x00; Address < 0x2F; Address++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	75bb      	strb	r3, [r7, #22]
 80004ea:	e02e      	b.n	800054a <CC1200_Configure+0x78>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004ec:	7d7b      	ldrb	r3, [r7, #21]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	7dba      	ldrb	r2, [r7, #22]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d122      	bne.n	8000542 <CC1200_Configure+0x70>
		{
			retval = CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 80004fc:	7d7b      	ldrb	r3, [r7, #21]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	4413      	add	r3, r2
 8000504:	785a      	ldrb	r2, [r3, #1]
 8000506:	7dbb      	ldrb	r3, [r7, #22]
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f85c 	bl	80005c8 <CC1200_Write_Single_Register>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Register(SPI_Info, Address);
 8000514:	7dbb      	ldrb	r3, [r7, #22]
 8000516:	4619      	mov	r1, r3
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f000 f891 	bl	8000640 <CC1200_Read_Single_Register>
 800051e:	4603      	mov	r3, r0
 8000520:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Register_Setting[ConfigIndex].Value)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7d7b      	ldrb	r3, [r7, #21]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	429a      	cmp	r2, r3
 8000534:	d001      	beq.n	800053a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	3301      	adds	r3, #1
 800053e:	757b      	strb	r3, [r7, #21]
 8000540:	e000      	b.n	8000544 <CC1200_Configure+0x72>
		}
		else
		{
			continue;
 8000542:	bf00      	nop
	for (Address = 0x00; Address < 0x2F; Address++)
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	3301      	adds	r3, #1
 8000548:	75bb      	strb	r3, [r7, #22]
 800054a:	7dbb      	ldrb	r3, [r7, #22]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d9cd      	bls.n	80004ec <CC1200_Configure+0x1a>
		}
	}

	ConfigIndex = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000554:	2300      	movs	r3, #0
 8000556:	75bb      	strb	r3, [r7, #22]
 8000558:	e02e      	b.n	80005b8 <CC1200_Configure+0xe6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 800055a:	7d7b      	ldrb	r3, [r7, #21]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	7dba      	ldrb	r2, [r7, #22]
 8000566:	429a      	cmp	r2, r3
 8000568:	d122      	bne.n	80005b0 <CC1200_Configure+0xde>
		{
			retval = CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 800056a:	7d7b      	ldrb	r3, [r7, #21]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	785a      	ldrb	r2, [r3, #1]
 8000574:	7dbb      	ldrb	r3, [r7, #22]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 f8a1 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 8000582:	7dbb      	ldrb	r3, [r7, #22]
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f000 f8ec 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800058c:	4603      	mov	r3, r0
 800058e:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Extended_Register_Setting[ConfigIndex].Value)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7d7b      	ldrb	r3, [r7, #21]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	440b      	add	r3, r1
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <CC1200_Configure+0xd6>
			{
				retval = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	3301      	adds	r3, #1
 80005ac:	757b      	strb	r3, [r7, #21]
 80005ae:	e000      	b.n	80005b2 <CC1200_Configure+0xe0>
		}
		else
		{
			continue;
 80005b0:	bf00      	nop
	for (Address = 0x00; Address <= 0xDA; Address++)
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	3301      	adds	r3, #1
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2bda      	cmp	r3, #218	; 0xda
 80005bc:	d9cd      	bls.n	800055a <CC1200_Configure+0x88>
		}
	}

	return(retval);
 80005be:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if (Register_Address < 0x2F)
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2b2e      	cmp	r3, #46	; 0x2e
 80005dc:	d829      	bhi.n	8000632 <CC1200_Write_Single_Register+0x6a>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6858      	ldr	r0, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	891b      	ldrh	r3, [r3, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 feb5 	bl	800235c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68d8      	ldr	r0, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f107 010e 	add.w	r1, r7, #14
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f004 f985 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68d8      	ldr	r0, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	1cb9      	adds	r1, r7, #2
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	f004 f97b 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6858      	ldr	r0, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f001 fe98 	bl	800235c <HAL_GPIO_WritePin>

		retval = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e001      	b.n	8000636 <CC1200_Write_Single_Register+0x6e>
	}
	else
	{
		retval = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if (Register_Address < 0x2F)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b2e      	cmp	r3, #46	; 0x2e
 8000650:	d82f      	bhi.n	80006b2 <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f001 fe76 	bl	800235c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68d8      	ldr	r0, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f107 010e 	add.w	r1, r7, #14
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f004 f946 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68d8      	ldr	r0, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f107 010d 	add.w	r1, r7, #13
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	f004 f93b 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	891b      	ldrh	r3, [r3, #8]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 fe58 	bl	800235c <HAL_GPIO_WritePin>

		retval = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e001      	b.n	80006b6 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b39      	cmp	r3, #57	; 0x39
 80006d4:	d902      	bls.n	80006dc <CC1200_Write_Single_Extended_Register+0x1c>
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d908      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2ba2      	cmp	r3, #162	; 0xa2
 80006e0:	d902      	bls.n	80006e8 <CC1200_Write_Single_Extended_Register+0x28>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2bd1      	cmp	r3, #209	; 0xd1
 80006e6:	d902      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006e8:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006ea:	2bda      	cmp	r3, #218	; 0xda
 80006ec:	d902      	bls.n	80006f4 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e032      	b.n	800075a <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006f4:	232f      	movs	r3, #47	; 0x2f
 80006f6:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f001 fe2a 	bl	800235c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68d8      	ldr	r0, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f107 010e 	add.w	r1, r7, #14
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	f004 f8fa 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68d8      	ldr	r0, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	1cf9      	adds	r1, r7, #3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	f004 f8f0 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68d8      	ldr	r0, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	1cb9      	adds	r1, r7, #2
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f004 f8e6 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	891b      	ldrh	r3, [r3, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	f001 fe03 	bl	800235c <HAL_GPIO_WritePin>

		retval = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b39      	cmp	r3, #57	; 0x39
 8000774:	d902      	bls.n	800077c <CC1200_Read_Single_Extended_Register+0x18>
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b63      	cmp	r3, #99	; 0x63
 800077a:	d908      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2ba2      	cmp	r3, #162	; 0xa2
 8000780:	d902      	bls.n	8000788 <CC1200_Read_Single_Extended_Register+0x24>
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2bd1      	cmp	r3, #209	; 0xd1
 8000786:	d902      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000788:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800078a:	2bda      	cmp	r3, #218	; 0xda
 800078c:	d902      	bls.n	8000794 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e035      	b.n	8000800 <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6858      	ldr	r0, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891b      	ldrh	r3, [r3, #8]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f001 fdd8 	bl	800235c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68d8      	ldr	r0, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f107 010e 	add.w	r1, r7, #14
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f004 f8a8 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	1cf9      	adds	r1, r7, #3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	f004 f89e 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68d8      	ldr	r0, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	f107 010d 	add.w	r1, r7, #13
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	f004 f893 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 fdb0 	bl	800235c <HAL_GPIO_WritePin>

		retval = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b2f      	cmp	r3, #47	; 0x2f
 800081a:	d922      	bls.n	8000862 <CC1200_Command_Strobe+0x58>
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b3d      	cmp	r3, #61	; 0x3d
 8000820:	d81f      	bhi.n	8000862 <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	73bb      	strb	r3, [r7, #14]

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6858      	ldr	r0, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f001 fd93 	bl	800235c <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f107 010e 	add.w	r1, r7, #14
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	f004 f863 	bl	8004912 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f001 fd80 	bl	800235c <HAL_GPIO_WritePin>

		retval = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
	{
 8000860:	e001      	b.n	8000866 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1200_Transmit>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Transmit(CC1200_t* SPI_Info, uint8_t* TX_Packet, uint8_t TX_Packet_Length)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t Header_Byte = 0x40 | 0x3F; // 0100 0000 | 0011 1111
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	75bb      	strb	r3, [r7, #22]
	uint8_t i; // counter

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFTX); // flush TX FIFO (before loading data)
 8000882:	213b      	movs	r1, #59	; 0x3b
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffc0 	bl	800080a <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6858      	ldr	r0, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f001 fd61 	bl	800235c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68d8      	ldr	r0, [r3, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f107 0116 	add.w	r1, r7, #22
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	f004 f831 	bl	8004912 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &TX_Packet_Length, SPI_Info -> MISO_Data, 1, 100);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68d8      	ldr	r0, [r3, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	f004 f827 	bl	8004912 <HAL_SPI_TransmitReceive>

	for(i = 0; i < TX_Packet_Length; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00e      	b.n	80008e8 <CC1200_Transmit+0x78>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &(TX_Packet[i]), SPI_Info -> MISO_Data, 1, 100);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	18d1      	adds	r1, r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	f004 f818 	bl	8004912 <HAL_SPI_TransmitReceive>
	for(i = 0; i < TX_Packet_Length; i++)
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3301      	adds	r3, #1
 80008e6:	75fb      	strb	r3, [r7, #23]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7dfa      	ldrb	r2, [r7, #23]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3ec      	bcc.n	80008ca <CC1200_Transmit+0x5a>
	}

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6858      	ldr	r0, [r3, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f001 fd2e 	bl	800235c <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_STX); // enable TX
 8000900:	2135      	movs	r1, #53	; 0x35
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff81 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <CC1200_Read_RX_FIFO>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_RX_FIFO(CC1200_t* SPI_Info, uint8_t* RX_Packet)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af02      	add	r7, sp, #8
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
	uint8_t Header_Byte = 0xC0 | 0x3F; // 1100 0000 | 0011 1111
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	737b      	strb	r3, [r7, #13]
	uint8_t Placeholder = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	733b      	strb	r3, [r7, #12]
	uint8_t Packet_Length;
	uint8_t i; // counter

	CC1200_Read_Single_Register(SPI_Info, CC1200_NUM_RXBYTES);
 8000924:	21d7      	movs	r1, #215	; 0xd7
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fe8a 	bl	8000640 <CC1200_Read_Single_Register>
	Packet_Length = (SPI_Info -> MISO_Data) [0];
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	73bb      	strb	r3, [r7, #14]

    if (Packet_Length == 0)
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <CC1200_Read_RX_FIFO+0x2c>
    {
		return 1;
 800093a:	2301      	movs	r3, #1
 800093c:	e04f      	b.n	80009de <CC1200_Read_RX_FIFO+0xcc>
    }

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6858      	ldr	r0, [r3, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	891b      	ldrh	r3, [r3, #8]
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	f001 fd07 	bl	800235c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68d8      	ldr	r0, [r3, #12]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f107 010d 	add.w	r1, r7, #13
 800095a:	2364      	movs	r3, #100	; 0x64
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	f003 ffd7 	bl	8004912 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68d8      	ldr	r0, [r3, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	f107 010c 	add.w	r1, r7, #12
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	f003 ffcc 	bl	8004912 <HAL_SPI_TransmitReceive>

	Packet_Length = (SPI_Info -> MISO_Data) [0];
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < Packet_Length; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e014      	b.n	80009b2 <CC1200_Read_RX_FIFO+0xa0>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68d8      	ldr	r0, [r3, #12]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	f107 010c 	add.w	r1, r7, #12
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	f003 ffba 	bl	8004912 <HAL_SPI_TransmitReceive>
		RX_Packet[i] = (SPI_Info -> MISO_Data) [0];
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	6839      	ldr	r1, [r7, #0]
 80009a6:	440b      	add	r3, r1
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Packet_Length; i++)
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	3301      	adds	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	7bfa      	ldrb	r2, [r7, #15]
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3e6      	bcc.n	8000988 <CC1200_Read_RX_FIFO+0x76>
	}

	RX_Packet[Packet_Length] = '\0'; // null termination
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6858      	ldr	r0, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	891b      	ldrh	r3, [r3, #8]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4619      	mov	r1, r3
 80009d0:	f001 fcc4 	bl	800235c <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (after processing data)
 80009d4:	213a      	movs	r1, #58	; 0x3a
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff17 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <Configure>:
uint8_t TX_Packet_Length;

// Active Functions

void Configure(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Configure\r\n");
 80009f2:	4989      	ldr	r1, [pc, #548]	; (8000c18 <Configure+0x230>)
 80009f4:	4889      	ldr	r0, [pc, #548]	; (8000c1c <Configure+0x234>)
 80009f6:	f009 fcad 	bl	800a354 <siprintf>
	Token = strtok((char*) RX_Buffer, " "); // first token "configure"
 80009fa:	4989      	ldr	r1, [pc, #548]	; (8000c20 <Configure+0x238>)
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f009 fced 	bl	800a3dc <strtok>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a87      	ldr	r2, [pc, #540]	; (8000c24 <Configure+0x23c>)
 8000a06:	6013      	str	r3, [r2, #0]
	Token = strtok(NULL, "\r\n"); // second token "[mode]"
 8000a08:	4987      	ldr	r1, [pc, #540]	; (8000c28 <Configure+0x240>)
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f009 fce6 	bl	800a3dc <strtok>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a84      	ldr	r2, [pc, #528]	; (8000c24 <Configure+0x23c>)
 8000a14:	6013      	str	r3, [r2, #0]
	if (strncmp(Token, "transmit", strlen("transmit")) == 0)
 8000a16:	4b83      	ldr	r3, [pc, #524]	; (8000c24 <Configure+0x23c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	4983      	ldr	r1, [pc, #524]	; (8000c2c <Configure+0x244>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f009 fcc7 	bl	800a3b2 <strncmp>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d161      	bne.n	8000aee <Configure+0x106>
	{
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES); // reset the chip
 8000a2a:	2130      	movs	r1, #48	; 0x30
 8000a2c:	4880      	ldr	r0, [pc, #512]	; (8000c30 <Configure+0x248>)
 8000a2e:	f7ff feec 	bl	800080a <CC1200_Command_Strobe>
		sprintf(Message_Part, "Selected Mode: %s\r\n", Token);
 8000a32:	4b7c      	ldr	r3, [pc, #496]	; (8000c24 <Configure+0x23c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	497e      	ldr	r1, [pc, #504]	; (8000c34 <Configure+0x24c>)
 8000a3a:	487f      	ldr	r0, [pc, #508]	; (8000c38 <Configure+0x250>)
 8000a3c:	f009 fc8a 	bl	800a354 <siprintf>
		strcat(Message, Message_Part);
 8000a40:	497d      	ldr	r1, [pc, #500]	; (8000c38 <Configure+0x250>)
 8000a42:	4876      	ldr	r0, [pc, #472]	; (8000c1c <Configure+0x234>)
 8000a44:	f009 fca6 	bl	800a394 <strcat>
		strcat(Message, "Configured the CC1200 with Transmit Settings\r\n");
 8000a48:	4874      	ldr	r0, [pc, #464]	; (8000c1c <Configure+0x234>)
 8000a4a:	f7ff fb97 	bl	800017c <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b72      	ldr	r3, [pc, #456]	; (8000c1c <Configure+0x234>)
 8000a54:	4413      	add	r3, r2
 8000a56:	4a79      	ldr	r2, [pc, #484]	; (8000c3c <Configure+0x254>)
 8000a58:	4615      	mov	r5, r2
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	f105 0e20 	add.w	lr, r5, #32
 8000a60:	4664      	mov	r4, ip
 8000a62:	462e      	mov	r6, r5
 8000a64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a66:	6020      	str	r0, [r4, #0]
 8000a68:	6061      	str	r1, [r4, #4]
 8000a6a:	60a2      	str	r2, [r4, #8]
 8000a6c:	60e3      	str	r3, [r4, #12]
 8000a6e:	3510      	adds	r5, #16
 8000a70:	f10c 0c10 	add.w	ip, ip, #16
 8000a74:	4575      	cmp	r5, lr
 8000a76:	d1f3      	bne.n	8000a60 <Configure+0x78>
 8000a78:	4664      	mov	r4, ip
 8000a7a:	462b      	mov	r3, r5
 8000a7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a7e:	6020      	str	r0, [r4, #0]
 8000a80:	6061      	str	r1, [r4, #4]
 8000a82:	60a2      	str	r2, [r4, #8]
 8000a84:	881a      	ldrh	r2, [r3, #0]
 8000a86:	789b      	ldrb	r3, [r3, #2]
 8000a88:	81a2      	strh	r2, [r4, #12]
 8000a8a:	73a3      	strb	r3, [r4, #14]
		check = CC1200_Configure(&SPI_Info, Transmit_Register_Settings, Transmit_Extended_Register_Settings);
 8000a8c:	4a6c      	ldr	r2, [pc, #432]	; (8000c40 <Configure+0x258>)
 8000a8e:	496d      	ldr	r1, [pc, #436]	; (8000c44 <Configure+0x25c>)
 8000a90:	4867      	ldr	r0, [pc, #412]	; (8000c30 <Configure+0x248>)
 8000a92:	f7ff fd1e 	bl	80004d2 <CC1200_Configure>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b6b      	ldr	r3, [pc, #428]	; (8000c48 <Configure+0x260>)
 8000a9c:	701a      	strb	r2, [r3, #0]
		if (check == 1)
 8000a9e:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <Configure+0x260>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d111      	bne.n	8000aca <Configure+0xe2>
		{
			strcat(Message, "Error Occurred\r\n");
 8000aa6:	485d      	ldr	r0, [pc, #372]	; (8000c1c <Configure+0x234>)
 8000aa8:	f7ff fb68 	bl	800017c <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b5a      	ldr	r3, [pc, #360]	; (8000c1c <Configure+0x234>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a65      	ldr	r2, [pc, #404]	; (8000c4c <Configure+0x264>)
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	4614      	mov	r4, r2
 8000aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000abc:	6028      	str	r0, [r5, #0]
 8000abe:	6069      	str	r1, [r5, #4]
 8000ac0:	60aa      	str	r2, [r5, #8]
 8000ac2:	60eb      	str	r3, [r5, #12]
 8000ac4:	7823      	ldrb	r3, [r4, #0]
 8000ac6:	742b      	strb	r3, [r5, #16]
	{
		sprintf(Message_Part, "Invalid Mode: %s\r\n", Token);
		strcat(Message, Message_Part);
		strcat(Message, "Could Not Configure the CC1200\r\n");
	}
}
 8000ac8:	e0a2      	b.n	8000c10 <Configure+0x228>
			strcat(Message, "No Error Occurred\r\n");
 8000aca:	4854      	ldr	r0, [pc, #336]	; (8000c1c <Configure+0x234>)
 8000acc:	f7ff fb56 	bl	800017c <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <Configure+0x234>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a5d      	ldr	r2, [pc, #372]	; (8000c50 <Configure+0x268>)
 8000ada:	461d      	mov	r5, r3
 8000adc:	4614      	mov	r4, r2
 8000ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae0:	6028      	str	r0, [r5, #0]
 8000ae2:	6069      	str	r1, [r5, #4]
 8000ae4:	60aa      	str	r2, [r5, #8]
 8000ae6:	60eb      	str	r3, [r5, #12]
 8000ae8:	6820      	ldr	r0, [r4, #0]
 8000aea:	6128      	str	r0, [r5, #16]
}
 8000aec:	e090      	b.n	8000c10 <Configure+0x228>
	else if (strncmp(Token, "receive", strlen("receive")) == 0)
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <Configure+0x23c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2207      	movs	r2, #7
 8000af4:	4957      	ldr	r1, [pc, #348]	; (8000c54 <Configure+0x26c>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f009 fc5b 	bl	800a3b2 <strncmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d15f      	bne.n	8000bc2 <Configure+0x1da>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES); // reset the chip
 8000b02:	2130      	movs	r1, #48	; 0x30
 8000b04:	484a      	ldr	r0, [pc, #296]	; (8000c30 <Configure+0x248>)
 8000b06:	f7ff fe80 	bl	800080a <CC1200_Command_Strobe>
		sprintf(Message_Part, "Selected Mode: %s\r\n", Token);
 8000b0a:	4b46      	ldr	r3, [pc, #280]	; (8000c24 <Configure+0x23c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4948      	ldr	r1, [pc, #288]	; (8000c34 <Configure+0x24c>)
 8000b12:	4849      	ldr	r0, [pc, #292]	; (8000c38 <Configure+0x250>)
 8000b14:	f009 fc1e 	bl	800a354 <siprintf>
		strcat(Message, Message_Part);
 8000b18:	4947      	ldr	r1, [pc, #284]	; (8000c38 <Configure+0x250>)
 8000b1a:	4840      	ldr	r0, [pc, #256]	; (8000c1c <Configure+0x234>)
 8000b1c:	f009 fc3a 	bl	800a394 <strcat>
		strcat(Message, "Configured the CC1200 with Receive Settings\r\n");
 8000b20:	483e      	ldr	r0, [pc, #248]	; (8000c1c <Configure+0x234>)
 8000b22:	f7ff fb2b 	bl	800017c <strlen>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <Configure+0x234>)
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a4a      	ldr	r2, [pc, #296]	; (8000c58 <Configure+0x270>)
 8000b30:	4614      	mov	r4, r2
 8000b32:	469c      	mov	ip, r3
 8000b34:	f104 0e20 	add.w	lr, r4, #32
 8000b38:	4665      	mov	r5, ip
 8000b3a:	4626      	mov	r6, r4
 8000b3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b3e:	6028      	str	r0, [r5, #0]
 8000b40:	6069      	str	r1, [r5, #4]
 8000b42:	60aa      	str	r2, [r5, #8]
 8000b44:	60eb      	str	r3, [r5, #12]
 8000b46:	3410      	adds	r4, #16
 8000b48:	f10c 0c10 	add.w	ip, ip, #16
 8000b4c:	4574      	cmp	r4, lr
 8000b4e:	d1f3      	bne.n	8000b38 <Configure+0x150>
 8000b50:	4665      	mov	r5, ip
 8000b52:	4623      	mov	r3, r4
 8000b54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b56:	6028      	str	r0, [r5, #0]
 8000b58:	6069      	str	r1, [r5, #4]
 8000b5a:	60aa      	str	r2, [r5, #8]
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	81ab      	strh	r3, [r5, #12]
		check = CC1200_Configure(&SPI_Info, Receive_Register_Settings, Receive_Extended_Register_Settings);
 8000b60:	4a3e      	ldr	r2, [pc, #248]	; (8000c5c <Configure+0x274>)
 8000b62:	493f      	ldr	r1, [pc, #252]	; (8000c60 <Configure+0x278>)
 8000b64:	4832      	ldr	r0, [pc, #200]	; (8000c30 <Configure+0x248>)
 8000b66:	f7ff fcb4 	bl	80004d2 <CC1200_Configure>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <Configure+0x260>)
 8000b70:	701a      	strb	r2, [r3, #0]
		if (check == 1)
 8000b72:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <Configure+0x260>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d111      	bne.n	8000b9e <Configure+0x1b6>
			strcat(Message, "Error Occurred\r\n");
 8000b7a:	4828      	ldr	r0, [pc, #160]	; (8000c1c <Configure+0x234>)
 8000b7c:	f7ff fafe 	bl	800017c <strlen>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <Configure+0x234>)
 8000b86:	4413      	add	r3, r2
 8000b88:	4a30      	ldr	r2, [pc, #192]	; (8000c4c <Configure+0x264>)
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	4614      	mov	r4, r2
 8000b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b90:	6028      	str	r0, [r5, #0]
 8000b92:	6069      	str	r1, [r5, #4]
 8000b94:	60aa      	str	r2, [r5, #8]
 8000b96:	60eb      	str	r3, [r5, #12]
 8000b98:	7823      	ldrb	r3, [r4, #0]
 8000b9a:	742b      	strb	r3, [r5, #16]
}
 8000b9c:	e038      	b.n	8000c10 <Configure+0x228>
			strcat(Message, "No Error Occurred\r\n");
 8000b9e:	481f      	ldr	r0, [pc, #124]	; (8000c1c <Configure+0x234>)
 8000ba0:	f7ff faec 	bl	800017c <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <Configure+0x234>)
 8000baa:	4413      	add	r3, r2
 8000bac:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <Configure+0x268>)
 8000bae:	461d      	mov	r5, r3
 8000bb0:	4614      	mov	r4, r2
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	6028      	str	r0, [r5, #0]
 8000bb6:	6069      	str	r1, [r5, #4]
 8000bb8:	60aa      	str	r2, [r5, #8]
 8000bba:	60eb      	str	r3, [r5, #12]
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	6128      	str	r0, [r5, #16]
}
 8000bc0:	e026      	b.n	8000c10 <Configure+0x228>
		sprintf(Message_Part, "Invalid Mode: %s\r\n", Token);
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <Configure+0x23c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4926      	ldr	r1, [pc, #152]	; (8000c64 <Configure+0x27c>)
 8000bca:	481b      	ldr	r0, [pc, #108]	; (8000c38 <Configure+0x250>)
 8000bcc:	f009 fbc2 	bl	800a354 <siprintf>
		strcat(Message, Message_Part);
 8000bd0:	4919      	ldr	r1, [pc, #100]	; (8000c38 <Configure+0x250>)
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <Configure+0x234>)
 8000bd4:	f009 fbde 	bl	800a394 <strcat>
		strcat(Message, "Could Not Configure the CC1200\r\n");
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <Configure+0x234>)
 8000bda:	f7ff facf 	bl	800017c <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <Configure+0x234>)
 8000be4:	4413      	add	r3, r2
 8000be6:	4a20      	ldr	r2, [pc, #128]	; (8000c68 <Configure+0x280>)
 8000be8:	4614      	mov	r4, r2
 8000bea:	469c      	mov	ip, r3
 8000bec:	f104 0e20 	add.w	lr, r4, #32
 8000bf0:	4665      	mov	r5, ip
 8000bf2:	4626      	mov	r6, r4
 8000bf4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bf6:	6028      	str	r0, [r5, #0]
 8000bf8:	6069      	str	r1, [r5, #4]
 8000bfa:	60aa      	str	r2, [r5, #8]
 8000bfc:	60eb      	str	r3, [r5, #12]
 8000bfe:	3410      	adds	r4, #16
 8000c00:	f10c 0c10 	add.w	ip, ip, #16
 8000c04:	4574      	cmp	r4, lr
 8000c06:	d1f3      	bne.n	8000bf0 <Configure+0x208>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	701a      	strb	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	0800b930 	.word	0x0800b930
 8000c1c:	200004c4 	.word	0x200004c4
 8000c20:	0800b948 	.word	0x0800b948
 8000c24:	20002c70 	.word	0x20002c70
 8000c28:	0800b94c 	.word	0x0800b94c
 8000c2c:	0800b950 	.word	0x0800b950
 8000c30:	20002dd4 	.word	0x20002dd4
 8000c34:	0800b95c 	.word	0x0800b95c
 8000c38:	20002bd8 	.word	0x20002bd8
 8000c3c:	0800b970 	.word	0x0800b970
 8000c40:	20000060 	.word	0x20000060
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20002c75 	.word	0x20002c75
 8000c4c:	0800b9a0 	.word	0x0800b9a0
 8000c50:	0800b9b4 	.word	0x0800b9b4
 8000c54:	0800b9c8 	.word	0x0800b9c8
 8000c58:	0800b9d0 	.word	0x0800b9d0
 8000c5c:	200001c4 	.word	0x200001c4
 8000c60:	20000164 	.word	0x20000164
 8000c64:	0800ba00 	.word	0x0800ba00
 8000c68:	0800ba14 	.word	0x0800ba14

08000c6c <Transmit>:

void Transmit(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Transmit\r\n");
 8000c76:	4941      	ldr	r1, [pc, #260]	; (8000d7c <Transmit+0x110>)
 8000c78:	4841      	ldr	r0, [pc, #260]	; (8000d80 <Transmit+0x114>)
 8000c7a:	f009 fb6b 	bl	800a354 <siprintf>
	strcat(Message, "Set the CC1200 into Transmit Mode\r\n");
 8000c7e:	4840      	ldr	r0, [pc, #256]	; (8000d80 <Transmit+0x114>)
 8000c80:	f7ff fa7c 	bl	800017c <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <Transmit+0x114>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a3d      	ldr	r2, [pc, #244]	; (8000d84 <Transmit+0x118>)
 8000c8e:	4614      	mov	r4, r2
 8000c90:	469c      	mov	ip, r3
 8000c92:	f104 0e20 	add.w	lr, r4, #32
 8000c96:	4665      	mov	r5, ip
 8000c98:	4626      	mov	r6, r4
 8000c9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c9c:	6028      	str	r0, [r5, #0]
 8000c9e:	6069      	str	r1, [r5, #4]
 8000ca0:	60aa      	str	r2, [r5, #8]
 8000ca2:	60eb      	str	r3, [r5, #12]
 8000ca4:	3410      	adds	r4, #16
 8000ca6:	f10c 0c10 	add.w	ip, ip, #16
 8000caa:	4574      	cmp	r4, lr
 8000cac:	d1f3      	bne.n	8000c96 <Transmit+0x2a>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	6810      	ldr	r0, [r2, #0]
 8000cb4:	6018      	str	r0, [r3, #0]
	strcat(Message, "Transmitted the Following Message: ");
 8000cb6:	4832      	ldr	r0, [pc, #200]	; (8000d80 <Transmit+0x114>)
 8000cb8:	f7ff fa60 	bl	800017c <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <Transmit+0x114>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <Transmit+0x11c>)
 8000cc6:	4614      	mov	r4, r2
 8000cc8:	469c      	mov	ip, r3
 8000cca:	f104 0e20 	add.w	lr, r4, #32
 8000cce:	4665      	mov	r5, ip
 8000cd0:	4626      	mov	r6, r4
 8000cd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cd4:	6028      	str	r0, [r5, #0]
 8000cd6:	6069      	str	r1, [r5, #4]
 8000cd8:	60aa      	str	r2, [r5, #8]
 8000cda:	60eb      	str	r3, [r5, #12]
 8000cdc:	3410      	adds	r4, #16
 8000cde:	f10c 0c10 	add.w	ip, ip, #16
 8000ce2:	4574      	cmp	r4, lr
 8000ce4:	d1f3      	bne.n	8000cce <Transmit+0x62>
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	4622      	mov	r2, r4
 8000cea:	6810      	ldr	r0, [r2, #0]
 8000cec:	6018      	str	r0, [r3, #0]
	Token = strtok((char*) RX_Buffer, " "); // first token "transmit"
 8000cee:	4927      	ldr	r1, [pc, #156]	; (8000d8c <Transmit+0x120>)
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f009 fb73 	bl	800a3dc <strtok>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <Transmit+0x124>)
 8000cfa:	6013      	str	r3, [r2, #0]
	Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 8000cfc:	4925      	ldr	r1, [pc, #148]	; (8000d94 <Transmit+0x128>)
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f009 fb6c 	bl	800a3dc <strtok>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <Transmit+0x124>)
 8000d08:	6013      	str	r3, [r2, #0]
	TX_Packet_Length = strlen(Token);
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <Transmit+0x124>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fa34 	bl	800017c <strlen>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <Transmit+0x12c>)
 8000d1a:	701a      	strb	r2, [r3, #0]
	sprintf(Message_Part, "%s\r\n", Token);
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <Transmit+0x124>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	491e      	ldr	r1, [pc, #120]	; (8000d9c <Transmit+0x130>)
 8000d24:	481e      	ldr	r0, [pc, #120]	; (8000da0 <Transmit+0x134>)
 8000d26:	f009 fb15 	bl	800a354 <siprintf>
	strcat(Message, Message_Part);
 8000d2a:	491d      	ldr	r1, [pc, #116]	; (8000da0 <Transmit+0x134>)
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <Transmit+0x114>)
 8000d2e:	f009 fb31 	bl	800a394 <strcat>
	for (counter = 0; counter < TX_Packet_Length; counter++)
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <Transmit+0x138>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e00f      	b.n	8000d5a <Transmit+0xee>
	{
		TX_Packet[counter] = (uint8_t) (Token[counter]);
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <Transmit+0x124>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <Transmit+0x138>)
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <Transmit+0x138>)
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	7819      	ldrb	r1, [r3, #0]
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <Transmit+0x13c>)
 8000d4c:	5499      	strb	r1, [r3, r2]
	for (counter = 0; counter < TX_Packet_Length; counter++)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <Transmit+0x138>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <Transmit+0x138>)
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <Transmit+0x138>)
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <Transmit+0x12c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3e9      	bcc.n	8000d3a <Transmit+0xce>
	}
	CC1200_Transmit(&SPI_Info, TX_Packet, TX_Packet_Length);
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <Transmit+0x12c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	490e      	ldr	r1, [pc, #56]	; (8000da8 <Transmit+0x13c>)
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <Transmit+0x140>)
 8000d70:	f7ff fd7e 	bl	8000870 <CC1200_Transmit>
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7c:	0800ba38 	.word	0x0800ba38
 8000d80:	200004c4 	.word	0x200004c4
 8000d84:	0800ba50 	.word	0x0800ba50
 8000d88:	0800ba74 	.word	0x0800ba74
 8000d8c:	0800b948 	.word	0x0800b948
 8000d90:	20002c70 	.word	0x20002c70
 8000d94:	0800b94c 	.word	0x0800b94c
 8000d98:	20002cf7 	.word	0x20002cf7
 8000d9c:	0800ba98 	.word	0x0800ba98
 8000da0:	20002bd8 	.word	0x20002bd8
 8000da4:	20002c74 	.word	0x20002c74
 8000da8:	20002c78 	.word	0x20002c78
 8000dac:	20002dd4 	.word	0x20002dd4

08000db0 <Receive>:

void Receive(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Receive\r\n");
 8000dba:	4915      	ldr	r1, [pc, #84]	; (8000e10 <Receive+0x60>)
 8000dbc:	4815      	ldr	r0, [pc, #84]	; (8000e14 <Receive+0x64>)
 8000dbe:	f009 fac9 	bl	800a354 <siprintf>
	strcat(Message, "Set the CC1200 into Receive Mode\r\n");
 8000dc2:	4814      	ldr	r0, [pc, #80]	; (8000e14 <Receive+0x64>)
 8000dc4:	f7ff f9da 	bl	800017c <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <Receive+0x64>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <Receive+0x68>)
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	469c      	mov	ip, r3
 8000dd6:	f104 0e20 	add.w	lr, r4, #32
 8000dda:	4665      	mov	r5, ip
 8000ddc:	4626      	mov	r6, r4
 8000dde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000de0:	6028      	str	r0, [r5, #0]
 8000de2:	6069      	str	r1, [r5, #4]
 8000de4:	60aa      	str	r2, [r5, #8]
 8000de6:	60eb      	str	r3, [r5, #12]
 8000de8:	3410      	adds	r4, #16
 8000dea:	f10c 0c10 	add.w	ip, ip, #16
 8000dee:	4574      	cmp	r4, lr
 8000df0:	d1f3      	bne.n	8000dda <Receive+0x2a>
 8000df2:	4663      	mov	r3, ip
 8000df4:	4622      	mov	r2, r4
 8000df6:	8811      	ldrh	r1, [r2, #0]
 8000df8:	7892      	ldrb	r2, [r2, #2]
 8000dfa:	8019      	strh	r1, [r3, #0]
 8000dfc:	709a      	strb	r2, [r3, #2]
	CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // enable RX
 8000dfe:	2134      	movs	r1, #52	; 0x34
 8000e00:	4806      	ldr	r0, [pc, #24]	; (8000e1c <Receive+0x6c>)
 8000e02:	f7ff fd02 	bl	800080a <CC1200_Command_Strobe>
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800baa0 	.word	0x0800baa0
 8000e14:	200004c4 	.word	0x200004c4
 8000e18:	0800bab8 	.word	0x0800bab8
 8000e1c:	20002dd4 	.word	0x20002dd4

08000e20 <Read_RX_FIFO>:

// used with the GPIO interrupt
void Read_RX_FIFO(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

	check = CC1200_Read_RX_FIFO(&SPI_Info, RX_Packet);
 8000e24:	4911      	ldr	r1, [pc, #68]	; (8000e6c <Read_RX_FIFO+0x4c>)
 8000e26:	4812      	ldr	r0, [pc, #72]	; (8000e70 <Read_RX_FIFO+0x50>)
 8000e28:	f7ff fd73 	bl	8000912 <CC1200_Read_RX_FIFO>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <Read_RX_FIFO+0x54>)
 8000e32:	701a      	strb	r2, [r3, #0]

	if (check) // check == 1
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <Read_RX_FIFO+0x54>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <Read_RX_FIFO+0x26>
	{
		sprintf(Message, "RX FIFO Empty!\r\n");
 8000e3c:	490e      	ldr	r1, [pc, #56]	; (8000e78 <Read_RX_FIFO+0x58>)
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <Read_RX_FIFO+0x5c>)
 8000e40:	f009 fa88 	bl	800a354 <siprintf>
		sprintf(Message, "Received the Following Message: ");
		sprintf(Message_Part, "%s\r\n", (char*) RX_Packet);
		strcat(Message, Message_Part);
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // re-enter RX
	}
}
 8000e44:	e010      	b.n	8000e68 <Read_RX_FIFO+0x48>
		sprintf(Message, "Received the Following Message: ");
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <Read_RX_FIFO+0x60>)
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <Read_RX_FIFO+0x5c>)
 8000e4a:	f009 fa83 	bl	800a354 <siprintf>
		sprintf(Message_Part, "%s\r\n", (char*) RX_Packet);
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <Read_RX_FIFO+0x4c>)
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <Read_RX_FIFO+0x64>)
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <Read_RX_FIFO+0x68>)
 8000e54:	f009 fa7e 	bl	800a354 <siprintf>
		strcat(Message, Message_Part);
 8000e58:	490b      	ldr	r1, [pc, #44]	; (8000e88 <Read_RX_FIFO+0x68>)
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <Read_RX_FIFO+0x5c>)
 8000e5c:	f009 fa9a 	bl	800a394 <strcat>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // re-enter RX
 8000e60:	2134      	movs	r1, #52	; 0x34
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <Read_RX_FIFO+0x50>)
 8000e64:	f7ff fcd1 	bl	800080a <CC1200_Command_Strobe>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20002de8 	.word	0x20002de8
 8000e70:	20002dd4 	.word	0x20002dd4
 8000e74:	20002c75 	.word	0x20002c75
 8000e78:	0800badc 	.word	0x0800badc
 8000e7c:	200004c4 	.word	0x200004c4
 8000e80:	0800baf0 	.word	0x0800baf0
 8000e84:	0800ba98 	.word	0x0800ba98
 8000e88:	20002bd8 	.word	0x20002bd8

08000e8c <Status>:

void Status(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Status\r\n");
 8000e96:	4913      	ldr	r1, [pc, #76]	; (8000ee4 <Status+0x58>)
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <Status+0x5c>)
 8000e9a:	f009 fa5b 	bl	800a354 <siprintf>
	strcat(Message, "CC1200 Status: ");
 8000e9e:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <Status+0x5c>)
 8000ea0:	f7ff f96c 	bl	800017c <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <Status+0x5c>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <Status+0x60>)
 8000eae:	461c      	mov	r4, r3
 8000eb0:	4615      	mov	r5, r2
 8000eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb4:	6020      	str	r0, [r4, #0]
 8000eb6:	6061      	str	r1, [r4, #4]
 8000eb8:	60a2      	str	r2, [r4, #8]
 8000eba:	60e3      	str	r3, [r4, #12]
	CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8000ebc:	213d      	movs	r1, #61	; 0x3d
 8000ebe:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <Status+0x64>)
 8000ec0:	f7ff fca3 	bl	800080a <CC1200_Command_Strobe>
	sprintf(Message_Part, "0X%02X\r\n", MISO_Data[0]);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <Status+0x68>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	490b      	ldr	r1, [pc, #44]	; (8000ef8 <Status+0x6c>)
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <Status+0x70>)
 8000ece:	f009 fa41 	bl	800a354 <siprintf>
	strcat(Message, Message_Part);
 8000ed2:	490a      	ldr	r1, [pc, #40]	; (8000efc <Status+0x70>)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <Status+0x5c>)
 8000ed6:	f009 fa5d 	bl	800a394 <strcat>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	0800bb14 	.word	0x0800bb14
 8000ee8:	200004c4 	.word	0x200004c4
 8000eec:	0800bb2c 	.word	0x0800bb2c
 8000ef0:	20002dd4 	.word	0x20002dd4
 8000ef4:	20002de4 	.word	0x20002de4
 8000ef8:	0800bb3c 	.word	0x0800bb3c
 8000efc:	20002bd8 	.word	0x20002bd8

08000f00 <Register_Access>:

void Register_Access(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Register\r\n");
 8000f0a:	499d      	ldr	r1, [pc, #628]	; (8001180 <Register_Access+0x280>)
 8000f0c:	489d      	ldr	r0, [pc, #628]	; (8001184 <Register_Access+0x284>)
 8000f0e:	f009 fa21 	bl	800a354 <siprintf>
	Token = strtok((char*) RX_Buffer, " "); // first token "register"
 8000f12:	499d      	ldr	r1, [pc, #628]	; (8001188 <Register_Access+0x288>)
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f009 fa61 	bl	800a3dc <strtok>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a9b      	ldr	r2, [pc, #620]	; (800118c <Register_Access+0x28c>)
 8000f1e:	6013      	str	r3, [r2, #0]
	Token = strtok(NULL, " "); // second token "[access type]"
 8000f20:	4999      	ldr	r1, [pc, #612]	; (8001188 <Register_Access+0x288>)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f009 fa5a 	bl	800a3dc <strtok>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a98      	ldr	r2, [pc, #608]	; (800118c <Register_Access+0x28c>)
 8000f2c:	6013      	str	r3, [r2, #0]
	if (strncmp(Token, "print", strlen("print")) == 0)
 8000f2e:	4b97      	ldr	r3, [pc, #604]	; (800118c <Register_Access+0x28c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2205      	movs	r2, #5
 8000f34:	4996      	ldr	r1, [pc, #600]	; (8001190 <Register_Access+0x290>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 fa3b 	bl	800a3b2 <strncmp>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 80a7 	bne.w	8001092 <Register_Access+0x192>
	{
		sprintf(Message_Part, "Selected Access Type: %s\r\n", Token);
 8000f44:	4b91      	ldr	r3, [pc, #580]	; (800118c <Register_Access+0x28c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4992      	ldr	r1, [pc, #584]	; (8001194 <Register_Access+0x294>)
 8000f4c:	4892      	ldr	r0, [pc, #584]	; (8001198 <Register_Access+0x298>)
 8000f4e:	f009 fa01 	bl	800a354 <siprintf>
		strcat(Message, Message_Part);
 8000f52:	4991      	ldr	r1, [pc, #580]	; (8001198 <Register_Access+0x298>)
 8000f54:	488b      	ldr	r0, [pc, #556]	; (8001184 <Register_Access+0x284>)
 8000f56:	f009 fa1d 	bl	800a394 <strcat>
		strcat(Message, "Register Space\r\n");
 8000f5a:	488a      	ldr	r0, [pc, #552]	; (8001184 <Register_Access+0x284>)
 8000f5c:	f7ff f90e 	bl	800017c <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b87      	ldr	r3, [pc, #540]	; (8001184 <Register_Access+0x284>)
 8000f66:	4413      	add	r3, r2
 8000f68:	4a8c      	ldr	r2, [pc, #560]	; (800119c <Register_Access+0x29c>)
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f70:	6028      	str	r0, [r5, #0]
 8000f72:	6069      	str	r1, [r5, #4]
 8000f74:	60aa      	str	r2, [r5, #8]
 8000f76:	60eb      	str	r3, [r5, #12]
 8000f78:	7823      	ldrb	r3, [r4, #0]
 8000f7a:	742b      	strb	r3, [r5, #16]
		strcat(Message, "Address; Value\r\n");
 8000f7c:	4881      	ldr	r0, [pc, #516]	; (8001184 <Register_Access+0x284>)
 8000f7e:	f7ff f8fd 	bl	800017c <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b7f      	ldr	r3, [pc, #508]	; (8001184 <Register_Access+0x284>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a85      	ldr	r2, [pc, #532]	; (80011a0 <Register_Access+0x2a0>)
 8000f8c:	461d      	mov	r5, r3
 8000f8e:	4614      	mov	r4, r2
 8000f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f92:	6028      	str	r0, [r5, #0]
 8000f94:	6069      	str	r1, [r5, #4]
 8000f96:	60aa      	str	r2, [r5, #8]
 8000f98:	60eb      	str	r3, [r5, #12]
 8000f9a:	7823      	ldrb	r3, [r4, #0]
 8000f9c:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8000f9e:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <Register_Access+0x2a4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e01c      	b.n	8000fe0 <Register_Access+0xe0>
		{

			CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8000fa6:	4b7f      	ldr	r3, [pc, #508]	; (80011a4 <Register_Access+0x2a4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	487e      	ldr	r0, [pc, #504]	; (80011a8 <Register_Access+0x2a8>)
 8000fae:	f7ff fb47 	bl	8000640 <CC1200_Read_Single_Register>
			Register_Value = MISO_Data[0];
 8000fb2:	4b7e      	ldr	r3, [pc, #504]	; (80011ac <Register_Access+0x2ac>)
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	4b7e      	ldr	r3, [pc, #504]	; (80011b0 <Register_Access+0x2b0>)
 8000fb8:	701a      	strb	r2, [r3, #0]
			sprintf(Message_Part, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 8000fba:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <Register_Access+0x2a4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b7b      	ldr	r3, [pc, #492]	; (80011b0 <Register_Access+0x2b0>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	497b      	ldr	r1, [pc, #492]	; (80011b4 <Register_Access+0x2b4>)
 8000fc6:	4874      	ldr	r0, [pc, #464]	; (8001198 <Register_Access+0x298>)
 8000fc8:	f009 f9c4 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 8000fcc:	4972      	ldr	r1, [pc, #456]	; (8001198 <Register_Access+0x298>)
 8000fce:	486d      	ldr	r0, [pc, #436]	; (8001184 <Register_Access+0x284>)
 8000fd0:	f009 f9e0 	bl	800a394 <strcat>
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8000fd4:	4b73      	ldr	r3, [pc, #460]	; (80011a4 <Register_Access+0x2a4>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <Register_Access+0x2a4>)
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <Register_Access+0x2a4>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8000fe6:	d9de      	bls.n	8000fa6 <Register_Access+0xa6>
		}
		strcat(Message, "Extended Register Space\r\n");
 8000fe8:	4866      	ldr	r0, [pc, #408]	; (8001184 <Register_Access+0x284>)
 8000fea:	f7ff f8c7 	bl	800017c <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b64      	ldr	r3, [pc, #400]	; (8001184 <Register_Access+0x284>)
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a70      	ldr	r2, [pc, #448]	; (80011b8 <Register_Access+0x2b8>)
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	6028      	str	r0, [r5, #0]
 8001000:	6069      	str	r1, [r5, #4]
 8001002:	60aa      	str	r2, [r5, #8]
 8001004:	60eb      	str	r3, [r5, #12]
 8001006:	cc03      	ldmia	r4!, {r0, r1}
 8001008:	6128      	str	r0, [r5, #16]
 800100a:	6169      	str	r1, [r5, #20]
 800100c:	8823      	ldrh	r3, [r4, #0]
 800100e:	832b      	strh	r3, [r5, #24]
		strcat(Message, "Address; Value\r\n");
 8001010:	485c      	ldr	r0, [pc, #368]	; (8001184 <Register_Access+0x284>)
 8001012:	f7ff f8b3 	bl	800017c <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b5a      	ldr	r3, [pc, #360]	; (8001184 <Register_Access+0x284>)
 800101c:	4413      	add	r3, r2
 800101e:	4a60      	ldr	r2, [pc, #384]	; (80011a0 <Register_Access+0x2a0>)
 8001020:	461d      	mov	r5, r3
 8001022:	4614      	mov	r4, r2
 8001024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001026:	6028      	str	r0, [r5, #0]
 8001028:	6069      	str	r1, [r5, #4]
 800102a:	60aa      	str	r2, [r5, #8]
 800102c:	60eb      	str	r3, [r5, #12]
 800102e:	7823      	ldrb	r3, [r4, #0]
 8001030:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <Register_Access+0x2a4>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e026      	b.n	8001088 <Register_Access+0x188>
		{
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800103a:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <Register_Access+0x2a4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	4859      	ldr	r0, [pc, #356]	; (80011a8 <Register_Access+0x2a8>)
 8001042:	f7ff fb8f 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <Register_Access+0x2bc>)
 800104c:	701a      	strb	r2, [r3, #0]
			if (check == 0)
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <Register_Access+0x2bc>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d111      	bne.n	800107a <Register_Access+0x17a>
			{
				Register_Value = MISO_Data[0];
 8001056:	4b55      	ldr	r3, [pc, #340]	; (80011ac <Register_Access+0x2ac>)
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <Register_Access+0x2b0>)
 800105c:	701a      	strb	r2, [r3, #0]
				sprintf(Message_Part, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 800105e:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <Register_Access+0x2a4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <Register_Access+0x2b0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4952      	ldr	r1, [pc, #328]	; (80011b4 <Register_Access+0x2b4>)
 800106a:	484b      	ldr	r0, [pc, #300]	; (8001198 <Register_Access+0x298>)
 800106c:	f009 f972 	bl	800a354 <siprintf>
				strcat(Message, Message_Part);
 8001070:	4949      	ldr	r1, [pc, #292]	; (8001198 <Register_Access+0x298>)
 8001072:	4844      	ldr	r0, [pc, #272]	; (8001184 <Register_Access+0x284>)
 8001074:	f009 f98e 	bl	800a394 <strcat>
 8001078:	e000      	b.n	800107c <Register_Access+0x17c>
			}
			else
			{
				continue;
 800107a:	bf00      	nop
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 800107c:	4b49      	ldr	r3, [pc, #292]	; (80011a4 <Register_Access+0x2a4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <Register_Access+0x2a4>)
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <Register_Access+0x2a4>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2bda      	cmp	r3, #218	; 0xda
 800108e:	d9d4      	bls.n	800103a <Register_Access+0x13a>
	}
	else
	{
		strcat(Message, "Invalid Access\r\n");
	}
}
 8001090:	e262      	b.n	8001558 <Register_Access+0x658>
	else if (strncmp(Token, "read", strlen("read")) == 0)
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <Register_Access+0x28c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2204      	movs	r2, #4
 8001098:	4949      	ldr	r1, [pc, #292]	; (80011c0 <Register_Access+0x2c0>)
 800109a:	4618      	mov	r0, r3
 800109c:	f009 f989 	bl	800a3b2 <strncmp>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 810f 	bne.w	80012c6 <Register_Access+0x3c6>
		Token = strtok(NULL, " "); // third token "[register space]"
 80010a8:	4937      	ldr	r1, [pc, #220]	; (8001188 <Register_Access+0x288>)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f009 f996 	bl	800a3dc <strtok>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a36      	ldr	r2, [pc, #216]	; (800118c <Register_Access+0x28c>)
 80010b4:	6013      	str	r3, [r2, #0]
		if (strncmp(Token, "extended", strlen("extended")) == 0)
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <Register_Access+0x28c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2208      	movs	r2, #8
 80010bc:	4941      	ldr	r1, [pc, #260]	; (80011c4 <Register_Access+0x2c4>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f009 f977 	bl	800a3b2 <strncmp>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 8088 	bne.w	80011dc <Register_Access+0x2dc>
			strcat(Message, "Address to Read: ");
 80010cc:	482d      	ldr	r0, [pc, #180]	; (8001184 <Register_Access+0x284>)
 80010ce:	f7ff f855 	bl	800017c <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <Register_Access+0x284>)
 80010d8:	4413      	add	r3, r2
 80010da:	4a3b      	ldr	r2, [pc, #236]	; (80011c8 <Register_Access+0x2c8>)
 80010dc:	461d      	mov	r5, r3
 80010de:	4614      	mov	r4, r2
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	6028      	str	r0, [r5, #0]
 80010e4:	6069      	str	r1, [r5, #4]
 80010e6:	60aa      	str	r2, [r5, #8]
 80010e8:	60eb      	str	r3, [r5, #12]
 80010ea:	8823      	ldrh	r3, [r4, #0]
 80010ec:	822b      	strh	r3, [r5, #16]
			Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <Register_Access+0x2cc>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f009 f973 	bl	800a3dc <strtok>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <Register_Access+0x28c>)
 80010fa:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <Register_Access+0x28c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4933      	ldr	r1, [pc, #204]	; (80011d0 <Register_Access+0x2d0>)
 8001104:	4824      	ldr	r0, [pc, #144]	; (8001198 <Register_Access+0x298>)
 8001106:	f009 f925 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 800110a:	4923      	ldr	r1, [pc, #140]	; (8001198 <Register_Access+0x298>)
 800110c:	481d      	ldr	r0, [pc, #116]	; (8001184 <Register_Access+0x284>)
 800110e:	f009 f941 	bl	800a394 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <Register_Access+0x28c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2210      	movs	r2, #16
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f009 fa36 	bl	800a58c <strtol>
 8001120:	4603      	mov	r3, r0
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Register_Access+0x2a4>)
 8001126:	701a      	strb	r2, [r3, #0]
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <Register_Access+0x2a4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <Register_Access+0x2a8>)
 8001130:	f7ff fb18 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <Register_Access+0x2bc>)
 800113a:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Received: ");
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <Register_Access+0x284>)
 800113e:	f7ff f81d 	bl	800017c <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <Register_Access+0x284>)
 8001148:	4413      	add	r3, r2
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <Register_Access+0x2d4>)
 800114c:	461d      	mov	r5, r3
 800114e:	4614      	mov	r4, r2
 8001150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001152:	6028      	str	r0, [r5, #0]
 8001154:	6069      	str	r1, [r5, #4]
 8001156:	60aa      	str	r2, [r5, #8]
 8001158:	60eb      	str	r3, [r5, #12]
 800115a:	7823      	ldrb	r3, [r4, #0]
 800115c:	742b      	strb	r3, [r5, #16]
			Register_Value = MISO_Data[0];
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <Register_Access+0x2ac>)
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <Register_Access+0x2b0>)
 8001164:	701a      	strb	r2, [r3, #0]
			sprintf(Message_Part, "0X%02X\r\n", Register_Value);
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <Register_Access+0x2b0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	491a      	ldr	r1, [pc, #104]	; (80011d8 <Register_Access+0x2d8>)
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <Register_Access+0x298>)
 8001170:	f009 f8f0 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 8001174:	4908      	ldr	r1, [pc, #32]	; (8001198 <Register_Access+0x298>)
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <Register_Access+0x284>)
 8001178:	f009 f90c 	bl	800a394 <strcat>
}
 800117c:	e1ec      	b.n	8001558 <Register_Access+0x658>
 800117e:	bf00      	nop
 8001180:	0800bb48 	.word	0x0800bb48
 8001184:	200004c4 	.word	0x200004c4
 8001188:	0800b948 	.word	0x0800b948
 800118c:	20002c70 	.word	0x20002c70
 8001190:	0800bb60 	.word	0x0800bb60
 8001194:	0800bb68 	.word	0x0800bb68
 8001198:	20002bd8 	.word	0x20002bd8
 800119c:	0800bb84 	.word	0x0800bb84
 80011a0:	0800bb98 	.word	0x0800bb98
 80011a4:	20002c76 	.word	0x20002c76
 80011a8:	20002dd4 	.word	0x20002dd4
 80011ac:	20002de4 	.word	0x20002de4
 80011b0:	20002c77 	.word	0x20002c77
 80011b4:	0800bbac 	.word	0x0800bbac
 80011b8:	0800bbc0 	.word	0x0800bbc0
 80011bc:	20002c75 	.word	0x20002c75
 80011c0:	0800bbdc 	.word	0x0800bbdc
 80011c4:	0800bbe4 	.word	0x0800bbe4
 80011c8:	0800bbf0 	.word	0x0800bbf0
 80011cc:	0800b94c 	.word	0x0800b94c
 80011d0:	0800ba98 	.word	0x0800ba98
 80011d4:	0800bc04 	.word	0x0800bc04
 80011d8:	0800bb3c 	.word	0x0800bb3c
		else if (strncmp(Token, "regular", strlen("regular")) == 0)
 80011dc:	4b7e      	ldr	r3, [pc, #504]	; (80013d8 <Register_Access+0x4d8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2207      	movs	r2, #7
 80011e2:	497e      	ldr	r1, [pc, #504]	; (80013dc <Register_Access+0x4dc>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f009 f8e4 	bl	800a3b2 <strncmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d158      	bne.n	80012a2 <Register_Access+0x3a2>
			strcat(Message, "Address to Read: ");
 80011f0:	487b      	ldr	r0, [pc, #492]	; (80013e0 <Register_Access+0x4e0>)
 80011f2:	f7fe ffc3 	bl	800017c <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b79      	ldr	r3, [pc, #484]	; (80013e0 <Register_Access+0x4e0>)
 80011fc:	4413      	add	r3, r2
 80011fe:	4a79      	ldr	r2, [pc, #484]	; (80013e4 <Register_Access+0x4e4>)
 8001200:	461d      	mov	r5, r3
 8001202:	4614      	mov	r4, r2
 8001204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001206:	6028      	str	r0, [r5, #0]
 8001208:	6069      	str	r1, [r5, #4]
 800120a:	60aa      	str	r2, [r5, #8]
 800120c:	60eb      	str	r3, [r5, #12]
 800120e:	8823      	ldrh	r3, [r4, #0]
 8001210:	822b      	strh	r3, [r5, #16]
			Token = strtok(NULL, "\r\n"); // third token "[register address]"
 8001212:	4975      	ldr	r1, [pc, #468]	; (80013e8 <Register_Access+0x4e8>)
 8001214:	2000      	movs	r0, #0
 8001216:	f009 f8e1 	bl	800a3dc <strtok>
 800121a:	4603      	mov	r3, r0
 800121c:	4a6e      	ldr	r2, [pc, #440]	; (80013d8 <Register_Access+0x4d8>)
 800121e:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <Register_Access+0x4d8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4971      	ldr	r1, [pc, #452]	; (80013ec <Register_Access+0x4ec>)
 8001228:	4871      	ldr	r0, [pc, #452]	; (80013f0 <Register_Access+0x4f0>)
 800122a:	f009 f893 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 800122e:	4970      	ldr	r1, [pc, #448]	; (80013f0 <Register_Access+0x4f0>)
 8001230:	486b      	ldr	r0, [pc, #428]	; (80013e0 <Register_Access+0x4e0>)
 8001232:	f009 f8af 	bl	800a394 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8001236:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <Register_Access+0x4d8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2210      	movs	r2, #16
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f009 f9a4 	bl	800a58c <strtol>
 8001244:	4603      	mov	r3, r0
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <Register_Access+0x4f4>)
 800124a:	701a      	strb	r2, [r3, #0]
			check = CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 800124c:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <Register_Access+0x4f4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4869      	ldr	r0, [pc, #420]	; (80013f8 <Register_Access+0x4f8>)
 8001254:	f7ff f9f4 	bl	8000640 <CC1200_Read_Single_Register>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <Register_Access+0x4fc>)
 800125e:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Received: ");
 8001260:	485f      	ldr	r0, [pc, #380]	; (80013e0 <Register_Access+0x4e0>)
 8001262:	f7fe ff8b 	bl	800017c <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <Register_Access+0x4e0>)
 800126c:	4413      	add	r3, r2
 800126e:	4a64      	ldr	r2, [pc, #400]	; (8001400 <Register_Access+0x500>)
 8001270:	461d      	mov	r5, r3
 8001272:	4614      	mov	r4, r2
 8001274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001276:	6028      	str	r0, [r5, #0]
 8001278:	6069      	str	r1, [r5, #4]
 800127a:	60aa      	str	r2, [r5, #8]
 800127c:	60eb      	str	r3, [r5, #12]
 800127e:	7823      	ldrb	r3, [r4, #0]
 8001280:	742b      	strb	r3, [r5, #16]
			Register_Value = MISO_Data[0];
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <Register_Access+0x504>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b60      	ldr	r3, [pc, #384]	; (8001408 <Register_Access+0x508>)
 8001288:	701a      	strb	r2, [r3, #0]
			sprintf(Message_Part, "0X%02X\r\n", Register_Value);
 800128a:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <Register_Access+0x508>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	495e      	ldr	r1, [pc, #376]	; (800140c <Register_Access+0x50c>)
 8001292:	4857      	ldr	r0, [pc, #348]	; (80013f0 <Register_Access+0x4f0>)
 8001294:	f009 f85e 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 8001298:	4955      	ldr	r1, [pc, #340]	; (80013f0 <Register_Access+0x4f0>)
 800129a:	4851      	ldr	r0, [pc, #324]	; (80013e0 <Register_Access+0x4e0>)
 800129c:	f009 f87a 	bl	800a394 <strcat>
}
 80012a0:	e15a      	b.n	8001558 <Register_Access+0x658>
			strcat(Message, "Invalid Access\r\n");
 80012a2:	484f      	ldr	r0, [pc, #316]	; (80013e0 <Register_Access+0x4e0>)
 80012a4:	f7fe ff6a 	bl	800017c <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <Register_Access+0x4e0>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4a57      	ldr	r2, [pc, #348]	; (8001410 <Register_Access+0x510>)
 80012b2:	461d      	mov	r5, r3
 80012b4:	4614      	mov	r4, r2
 80012b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b8:	6028      	str	r0, [r5, #0]
 80012ba:	6069      	str	r1, [r5, #4]
 80012bc:	60aa      	str	r2, [r5, #8]
 80012be:	60eb      	str	r3, [r5, #12]
 80012c0:	7823      	ldrb	r3, [r4, #0]
 80012c2:	742b      	strb	r3, [r5, #16]
}
 80012c4:	e148      	b.n	8001558 <Register_Access+0x658>
	else if (strncmp(Token, "write", strlen("write")) == 0)
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <Register_Access+0x4d8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2205      	movs	r2, #5
 80012cc:	4951      	ldr	r1, [pc, #324]	; (8001414 <Register_Access+0x514>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f009 f86f 	bl	800a3b2 <strncmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 812d 	bne.w	8001536 <Register_Access+0x636>
		Token = strtok(NULL, " "); // third token "[register space]"
 80012dc:	494e      	ldr	r1, [pc, #312]	; (8001418 <Register_Access+0x518>)
 80012de:	2000      	movs	r0, #0
 80012e0:	f009 f87c 	bl	800a3dc <strtok>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a3c      	ldr	r2, [pc, #240]	; (80013d8 <Register_Access+0x4d8>)
 80012e8:	6013      	str	r3, [r2, #0]
		if (strncmp(Token, "extended", strlen("extended")) == 0)
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <Register_Access+0x4d8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2208      	movs	r2, #8
 80012f0:	494a      	ldr	r1, [pc, #296]	; (800141c <Register_Access+0x51c>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f009 f85d 	bl	800a3b2 <strncmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 8094 	bne.w	8001428 <Register_Access+0x528>
			strcat(Message, "Address to Write: ");
 8001300:	4837      	ldr	r0, [pc, #220]	; (80013e0 <Register_Access+0x4e0>)
 8001302:	f7fe ff3b 	bl	800017c <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <Register_Access+0x4e0>)
 800130c:	4413      	add	r3, r2
 800130e:	4a44      	ldr	r2, [pc, #272]	; (8001420 <Register_Access+0x520>)
 8001310:	461d      	mov	r5, r3
 8001312:	4614      	mov	r4, r2
 8001314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001316:	6028      	str	r0, [r5, #0]
 8001318:	6069      	str	r1, [r5, #4]
 800131a:	60aa      	str	r2, [r5, #8]
 800131c:	60eb      	str	r3, [r5, #12]
 800131e:	8823      	ldrh	r3, [r4, #0]
 8001320:	78a2      	ldrb	r2, [r4, #2]
 8001322:	822b      	strh	r3, [r5, #16]
 8001324:	4613      	mov	r3, r2
 8001326:	74ab      	strb	r3, [r5, #18]
			Token = strtok(NULL, " "); // fourth token "[register address]"
 8001328:	493b      	ldr	r1, [pc, #236]	; (8001418 <Register_Access+0x518>)
 800132a:	2000      	movs	r0, #0
 800132c:	f009 f856 	bl	800a3dc <strtok>
 8001330:	4603      	mov	r3, r0
 8001332:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <Register_Access+0x4d8>)
 8001334:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <Register_Access+0x4d8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	492b      	ldr	r1, [pc, #172]	; (80013ec <Register_Access+0x4ec>)
 800133e:	482c      	ldr	r0, [pc, #176]	; (80013f0 <Register_Access+0x4f0>)
 8001340:	f009 f808 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 8001344:	492a      	ldr	r1, [pc, #168]	; (80013f0 <Register_Access+0x4f0>)
 8001346:	4826      	ldr	r0, [pc, #152]	; (80013e0 <Register_Access+0x4e0>)
 8001348:	f009 f824 	bl	800a394 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <Register_Access+0x4d8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2210      	movs	r2, #16
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f009 f919 	bl	800a58c <strtol>
 800135a:	4603      	mov	r3, r0
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <Register_Access+0x4f4>)
 8001360:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Sent: ");
 8001362:	481f      	ldr	r0, [pc, #124]	; (80013e0 <Register_Access+0x4e0>)
 8001364:	f7fe ff0a 	bl	800017c <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <Register_Access+0x4e0>)
 800136e:	4413      	add	r3, r2
 8001370:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <Register_Access+0x524>)
 8001372:	461c      	mov	r4, r3
 8001374:	4613      	mov	r3, r2
 8001376:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001378:	6020      	str	r0, [r4, #0]
 800137a:	6061      	str	r1, [r4, #4]
 800137c:	60a2      	str	r2, [r4, #8]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	7323      	strb	r3, [r4, #12]
			Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8001382:	4919      	ldr	r1, [pc, #100]	; (80013e8 <Register_Access+0x4e8>)
 8001384:	2000      	movs	r0, #0
 8001386:	f009 f829 	bl	800a3dc <strtok>
 800138a:	4603      	mov	r3, r0
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <Register_Access+0x4d8>)
 800138e:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <Register_Access+0x4d8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4915      	ldr	r1, [pc, #84]	; (80013ec <Register_Access+0x4ec>)
 8001398:	4815      	ldr	r0, [pc, #84]	; (80013f0 <Register_Access+0x4f0>)
 800139a:	f008 ffdb 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 800139e:	4914      	ldr	r1, [pc, #80]	; (80013f0 <Register_Access+0x4f0>)
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <Register_Access+0x4e0>)
 80013a2:	f008 fff7 	bl	800a394 <strcat>
			Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <Register_Access+0x4d8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2210      	movs	r2, #16
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f009 f8ec 	bl	800a58c <strtol>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <Register_Access+0x508>)
 80013ba:	701a      	strb	r2, [r3, #0]
			check = CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <Register_Access+0x4f4>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <Register_Access+0x508>)
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <Register_Access+0x4f8>)
 80013c8:	f7ff f97a 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <Register_Access+0x4fc>)
 80013d2:	701a      	strb	r2, [r3, #0]
}
 80013d4:	e0c0      	b.n	8001558 <Register_Access+0x658>
 80013d6:	bf00      	nop
 80013d8:	20002c70 	.word	0x20002c70
 80013dc:	0800bc18 	.word	0x0800bc18
 80013e0:	200004c4 	.word	0x200004c4
 80013e4:	0800bbf0 	.word	0x0800bbf0
 80013e8:	0800b94c 	.word	0x0800b94c
 80013ec:	0800ba98 	.word	0x0800ba98
 80013f0:	20002bd8 	.word	0x20002bd8
 80013f4:	20002c76 	.word	0x20002c76
 80013f8:	20002dd4 	.word	0x20002dd4
 80013fc:	20002c75 	.word	0x20002c75
 8001400:	0800bc04 	.word	0x0800bc04
 8001404:	20002de4 	.word	0x20002de4
 8001408:	20002c77 	.word	0x20002c77
 800140c:	0800bb3c 	.word	0x0800bb3c
 8001410:	0800bc20 	.word	0x0800bc20
 8001414:	0800bc34 	.word	0x0800bc34
 8001418:	0800b948 	.word	0x0800b948
 800141c:	0800bbe4 	.word	0x0800bbe4
 8001420:	0800bc3c 	.word	0x0800bc3c
 8001424:	0800bc50 	.word	0x0800bc50
		else if (strncmp(Token, "regular", strlen("regular")) == 0)
 8001428:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <Register_Access+0x660>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2207      	movs	r2, #7
 800142e:	494d      	ldr	r1, [pc, #308]	; (8001564 <Register_Access+0x664>)
 8001430:	4618      	mov	r0, r3
 8001432:	f008 ffbe 	bl	800a3b2 <strncmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d16a      	bne.n	8001512 <Register_Access+0x612>
			strcat(Message, "Address to Write: ");
 800143c:	484a      	ldr	r0, [pc, #296]	; (8001568 <Register_Access+0x668>)
 800143e:	f7fe fe9d 	bl	800017c <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b48      	ldr	r3, [pc, #288]	; (8001568 <Register_Access+0x668>)
 8001448:	4413      	add	r3, r2
 800144a:	4a48      	ldr	r2, [pc, #288]	; (800156c <Register_Access+0x66c>)
 800144c:	461d      	mov	r5, r3
 800144e:	4614      	mov	r4, r2
 8001450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001452:	6028      	str	r0, [r5, #0]
 8001454:	6069      	str	r1, [r5, #4]
 8001456:	60aa      	str	r2, [r5, #8]
 8001458:	60eb      	str	r3, [r5, #12]
 800145a:	8823      	ldrh	r3, [r4, #0]
 800145c:	78a2      	ldrb	r2, [r4, #2]
 800145e:	822b      	strh	r3, [r5, #16]
 8001460:	4613      	mov	r3, r2
 8001462:	74ab      	strb	r3, [r5, #18]
			Token = strtok(NULL, " "); // fourth token "[register address]"
 8001464:	4942      	ldr	r1, [pc, #264]	; (8001570 <Register_Access+0x670>)
 8001466:	2000      	movs	r0, #0
 8001468:	f008 ffb8 	bl	800a3dc <strtok>
 800146c:	4603      	mov	r3, r0
 800146e:	4a3c      	ldr	r2, [pc, #240]	; (8001560 <Register_Access+0x660>)
 8001470:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <Register_Access+0x660>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	493e      	ldr	r1, [pc, #248]	; (8001574 <Register_Access+0x674>)
 800147a:	483f      	ldr	r0, [pc, #252]	; (8001578 <Register_Access+0x678>)
 800147c:	f008 ff6a 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 8001480:	493d      	ldr	r1, [pc, #244]	; (8001578 <Register_Access+0x678>)
 8001482:	4839      	ldr	r0, [pc, #228]	; (8001568 <Register_Access+0x668>)
 8001484:	f008 ff86 	bl	800a394 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <Register_Access+0x660>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2210      	movs	r2, #16
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f009 f87b 	bl	800a58c <strtol>
 8001496:	4603      	mov	r3, r0
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <Register_Access+0x67c>)
 800149c:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Sent: ");
 800149e:	4832      	ldr	r0, [pc, #200]	; (8001568 <Register_Access+0x668>)
 80014a0:	f7fe fe6c 	bl	800017c <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <Register_Access+0x668>)
 80014aa:	4413      	add	r3, r2
 80014ac:	4a34      	ldr	r2, [pc, #208]	; (8001580 <Register_Access+0x680>)
 80014ae:	461c      	mov	r4, r3
 80014b0:	4613      	mov	r3, r2
 80014b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014b4:	6020      	str	r0, [r4, #0]
 80014b6:	6061      	str	r1, [r4, #4]
 80014b8:	60a2      	str	r2, [r4, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	7323      	strb	r3, [r4, #12]
			Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 80014be:	4931      	ldr	r1, [pc, #196]	; (8001584 <Register_Access+0x684>)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f008 ff8b 	bl	800a3dc <strtok>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <Register_Access+0x660>)
 80014ca:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <Register_Access+0x660>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4928      	ldr	r1, [pc, #160]	; (8001574 <Register_Access+0x674>)
 80014d4:	4828      	ldr	r0, [pc, #160]	; (8001578 <Register_Access+0x678>)
 80014d6:	f008 ff3d 	bl	800a354 <siprintf>
			strcat(Message, Message_Part);
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <Register_Access+0x678>)
 80014dc:	4822      	ldr	r0, [pc, #136]	; (8001568 <Register_Access+0x668>)
 80014de:	f008 ff59 	bl	800a394 <strcat>
			Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <Register_Access+0x660>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2210      	movs	r2, #16
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f009 f84e 	bl	800a58c <strtol>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <Register_Access+0x688>)
 80014f6:	701a      	strb	r2, [r3, #0]
			check = CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <Register_Access+0x67c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4a22      	ldr	r2, [pc, #136]	; (8001588 <Register_Access+0x688>)
 80014fe:	7812      	ldrb	r2, [r2, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4822      	ldr	r0, [pc, #136]	; (800158c <Register_Access+0x68c>)
 8001504:	f7ff f860 	bl	80005c8 <CC1200_Write_Single_Register>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <Register_Access+0x690>)
 800150e:	701a      	strb	r2, [r3, #0]
}
 8001510:	e022      	b.n	8001558 <Register_Access+0x658>
			strcat(Message, "Invalid Access\r\n");
 8001512:	4815      	ldr	r0, [pc, #84]	; (8001568 <Register_Access+0x668>)
 8001514:	f7fe fe32 	bl	800017c <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <Register_Access+0x668>)
 800151e:	4413      	add	r3, r2
 8001520:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <Register_Access+0x694>)
 8001522:	461d      	mov	r5, r3
 8001524:	4614      	mov	r4, r2
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	6028      	str	r0, [r5, #0]
 800152a:	6069      	str	r1, [r5, #4]
 800152c:	60aa      	str	r2, [r5, #8]
 800152e:	60eb      	str	r3, [r5, #12]
 8001530:	7823      	ldrb	r3, [r4, #0]
 8001532:	742b      	strb	r3, [r5, #16]
}
 8001534:	e010      	b.n	8001558 <Register_Access+0x658>
		strcat(Message, "Invalid Access\r\n");
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <Register_Access+0x668>)
 8001538:	f7fe fe20 	bl	800017c <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <Register_Access+0x668>)
 8001542:	4413      	add	r3, r2
 8001544:	4a13      	ldr	r2, [pc, #76]	; (8001594 <Register_Access+0x694>)
 8001546:	461d      	mov	r5, r3
 8001548:	4614      	mov	r4, r2
 800154a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154c:	6028      	str	r0, [r5, #0]
 800154e:	6069      	str	r1, [r5, #4]
 8001550:	60aa      	str	r2, [r5, #8]
 8001552:	60eb      	str	r3, [r5, #12]
 8001554:	7823      	ldrb	r3, [r4, #0]
 8001556:	742b      	strb	r3, [r5, #16]
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}
 8001560:	20002c70 	.word	0x20002c70
 8001564:	0800bc18 	.word	0x0800bc18
 8001568:	200004c4 	.word	0x200004c4
 800156c:	0800bc3c 	.word	0x0800bc3c
 8001570:	0800b948 	.word	0x0800b948
 8001574:	0800ba98 	.word	0x0800ba98
 8001578:	20002bd8 	.word	0x20002bd8
 800157c:	20002c76 	.word	0x20002c76
 8001580:	0800bc50 	.word	0x0800bc50
 8001584:	0800b94c 	.word	0x0800b94c
 8001588:	20002c77 	.word	0x20002c77
 800158c:	20002dd4 	.word	0x20002dd4
 8001590:	20002c75 	.word	0x20002c75
 8001594:	0800bc20 	.word	0x0800bc20

08001598 <Print_Message>:

void Print_Message(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	Message_Length = strlen(Message);
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <Print_Message+0x24>)
 800159e:	f7fe fded 	bl	800017c <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <Print_Message+0x28>)
 80015a8:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <Print_Message+0x28>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <Print_Message+0x24>)
 80015b2:	f008 fa45 	bl	8009a40 <CDC_Transmit_FS>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200004c4 	.word	0x200004c4
 80015c0:	20002bd4 	.word	0x20002bd4

080015c4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
	Read_RX_FIFO();
 80015ce:	f7ff fc27 	bl	8000e20 <Read_RX_FIFO>
	Print_Message();
 80015d2:	f7ff ffe1 	bl	8001598 <Print_Message>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015e6:	f000 fbac 	bl	8001d42 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015ea:	f000 f81b 	bl	8001624 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015ee:	f000 f911 	bl	8001814 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80015f2:	f000 f8e5 	bl	80017c0 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80015f6:	f000 f861 	bl	80016bc <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80015fa:	f008 f92f 	bl	800985c <MX_USB_DEVICE_Init>
	MX_TIM2_Init();
 80015fe:	f000 f893 	bl	8001728 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <main+0x34>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <main+0x38>)
 800160a:	4904      	ldr	r1, [pc, #16]	; (800161c <main+0x3c>)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <main+0x40>)
 800160e:	f7fe ff41 	bl	8000494 <CC1200_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001612:	e7fe      	b.n	8001612 <main+0x32>
 8001614:	20002cf8 	.word	0x20002cf8
 8001618:	40020400 	.word	0x40020400
 800161c:	20002de4 	.word	0x20002de4
 8001620:	20002dd4 	.word	0x20002dd4

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b092      	sub	sp, #72	; 0x48
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2234      	movs	r2, #52	; 0x34
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f008 fe86 	bl	800a344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <SystemClock_Config+0x94>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800164e:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <SystemClock_Config+0x94>)
 8001650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001654:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800165a:	2305      	movs	r3, #5
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165e:	2302      	movs	r3, #2
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001668:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800166c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800166e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4618      	mov	r0, r3
 800167a:	f002 facb 	bl	8003c14 <HAL_RCC_OscConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001684:	f000 f94c 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001688:	230f      	movs	r3, #15
 800168a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	2303      	movs	r3, #3
 800168e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	2101      	movs	r1, #1
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fde7 	bl	8004274 <HAL_RCC_ClockConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016ac:	f000 f938 	bl	8001920 <Error_Handler>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3748      	adds	r7, #72	; 0x48
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_SPI1_Init+0x64>)
 80016c2:	4a18      	ldr	r2, [pc, #96]	; (8001724 <MX_SPI1_Init+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_SPI1_Init+0x64>)
 80016c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_SPI1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_SPI1_Init+0x64>)
 80016e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_SPI1_Init+0x64>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <MX_SPI1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_SPI1_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_SPI1_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_SPI1_Init+0x64>)
 8001708:	220a      	movs	r2, #10
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_SPI1_Init+0x64>)
 800170e:	f003 f877 	bl	8004800 <HAL_SPI_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001718:	f000 f902 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20002cf8 	.word	0x20002cf8
 8001724:	40013000 	.word	0x40013000

08001728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_TIM2_Init+0x94>)
 8001746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_TIM2_Init+0x94>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM2_Init+0x94>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_TIM2_Init+0x94>)
 800175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_TIM2_Init+0x94>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_TIM2_Init+0x94>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <MX_TIM2_Init+0x94>)
 800176e:	f003 fb3d 	bl	8004dec <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001778:	f000 f8d2 	bl	8001920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4619      	mov	r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <MX_TIM2_Init+0x94>)
 800178a:	f003 fc4a 	bl	8005022 <HAL_TIM_ConfigClockSource>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001794:	f000 f8c4 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_TIM2_Init+0x94>)
 80017a6:	f003 fe33 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017b0:	f000 f8b6 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20002d50 	.word	0x20002d50

080017c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART2_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f8:	f003 fe68 	bl	80054cc <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 f88d 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20002d90 	.word	0x20002d90
 8001810:	40004400 	.word	0x40004400

08001814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <MX_GPIO_Init+0xfc>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a38      	ldr	r2, [pc, #224]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	4b33      	ldr	r3, [pc, #204]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a32      	ldr	r2, [pc, #200]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <MX_GPIO_Init+0xfc>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a2c      	ldr	r2, [pc, #176]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a26      	ldr	r2, [pc, #152]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <MX_GPIO_Init+0xfc>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001890:	4820      	ldr	r0, [pc, #128]	; (8001914 <MX_GPIO_Init+0x100>)
 8001892:	f000 fd63 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2140      	movs	r1, #64	; 0x40
 800189a:	481f      	ldr	r0, [pc, #124]	; (8001918 <MX_GPIO_Init+0x104>)
 800189c:	f000 fd5e 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4816      	ldr	r0, [pc, #88]	; (8001914 <MX_GPIO_Init+0x100>)
 80018ba:	f000 fbbf 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4811      	ldr	r0, [pc, #68]	; (800191c <MX_GPIO_Init+0x108>)
 80018d6:	f000 fbb1 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <MX_GPIO_Init+0x104>)
 80018f2:	f000 fba3 	bl	800203c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2028      	movs	r0, #40	; 0x28
 80018fc:	f000 fb67 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001900:	2028      	movs	r0, #40	; 0x28
 8001902:	f000 fb80 	bl	8002006 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001928:	e7fe      	b.n	8001928 <Error_Handler+0x8>
	...

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_MspInit+0x5c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	4a14      	ldr	r2, [pc, #80]	; (8001988 <HAL_MspInit+0x5c>)
 8001938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800193c:	6253      	str	r3, [r2, #36]	; 0x24
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_MspInit+0x5c>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_MspInit+0x5c>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_MspInit+0x5c>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_MspInit+0x5c>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_MspInit+0x5c>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x5c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6253      	str	r3, [r2, #36]	; 0x24
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x5c>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800197a:	2007      	movs	r0, #7
 800197c:	f000 fb1c 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_SPI_MspInit+0x7c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d127      	bne.n	80019fe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_SPI_MspInit+0x80>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <HAL_SPI_MspInit+0x80>)
 80019b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_SPI_MspInit+0x80>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_SPI_MspInit+0x80>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_SPI_MspInit+0x80>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_SPI_MspInit+0x80>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23e0      	movs	r3, #224	; 0xe0
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ee:	2305      	movs	r3, #5
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_SPI_MspInit+0x84>)
 80019fa:	f000 fb1f 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a24:	d113      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_TIM_Base_MspInit+0x44>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_TIM_Base_MspInit+0x44>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6253      	str	r3, [r2, #36]	; 0x24
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_TIM_Base_MspInit+0x44>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	201c      	movs	r0, #28
 8001a44:	f000 fac3 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a48:	201c      	movs	r0, #28
 8001a4a:	f000 fadc 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0x7c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d127      	bne.n	8001ace <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_UART_MspInit+0x80>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	4a16      	ldr	r2, [pc, #88]	; (8001adc <HAL_UART_MspInit+0x80>)
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	6253      	str	r3, [r2, #36]	; 0x24
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_UART_MspInit+0x80>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_UART_MspInit+0x80>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_UART_MspInit+0x80>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_UART_MspInit+0x80>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aae:	230c      	movs	r3, #12
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_UART_MspInit+0x84>)
 8001aca:	f000 fab7 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2a:	f000 f95d 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USB_LP_IRQHandler+0x10>)
 8001b3a:	f000 fd43 	bl	80025c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200046fc 	.word	0x200046fc

08001b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM2_IRQHandler+0x10>)
 8001b4e:	f003 f98c 	bl	8004e6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20002d50 	.word	0x20002d50

08001b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b64:	f000 fc12 	bl	800238c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <_kill>:

int _kill(int pid, int sig)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b84:	f008 fbb4 	bl	800a2f0 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2216      	movs	r2, #22
 8001b8c:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_exit>:

void _exit (int status)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffe7 	bl	8001b7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bac:	e7fe      	b.n	8001bac <_exit+0x12>

08001bae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e00a      	b.n	8001bd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc0:	f3af 8000 	nop.w
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbf0      	blt.n	8001bc0 <_read+0x12>
  }

  return len;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e009      	b.n	8001c0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbf1      	blt.n	8001bfa <_write+0x12>
  }
  return len;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_close>:

int _close(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c46:	605a      	str	r2, [r3, #4]
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <_isatty>:

int _isatty(int file)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f008 fb1e 	bl	800a2f0 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20014000 	.word	0x20014000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	20002e68 	.word	0x20002e68
 8001ce8:	20004c18 	.word	0x20004c18

08001cec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfa:	490d      	ldr	r1, [pc, #52]	; (8001d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d10:	4c0a      	ldr	r4, [pc, #40]	; (8001d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d1e:	f7ff ffe5 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f008 faeb 	bl	800a2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d26:	f7ff fc5b 	bl	80015e0 <main>
  bx lr
 8001d2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8001d34:	0800c128 	.word	0x0800c128
  ldr r2, =_sbss
 8001d38:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8001d3c:	20004c18 	.word	0x20004c18

08001d40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC1_IRQHandler>

08001d42 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f933 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f80e 	bl	8001d74 <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	e001      	b.n	8001d68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d64:	f7ff fde2 	bl	800192c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_InitTick+0x68>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d022      	beq.n	8001dce <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_InitTick+0x6c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_InitTick+0x68>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f940 	bl	8002022 <HAL_SYSTICK_Config>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10f      	bne.n	8001dc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	d809      	bhi.n	8001dc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dae:	2200      	movs	r2, #0
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	f04f 30ff 	mov.w	r0, #4294967295
 8001db6:	f000 f90a 	bl	8001fce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_InitTick+0x70>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e004      	b.n	8001dd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200002d0 	.word	0x200002d0
 8001de0:	200002c8 	.word	0x200002c8
 8001de4:	200002cc 	.word	0x200002cc

08001de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x1c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x20>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <HAL_IncTick+0x1c>)
 8001df8:	6013      	str	r3, [r2, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20002e6c 	.word	0x20002e6c
 8001e08:	200002d0 	.word	0x200002d0

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_GetTick+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	20002e6c 	.word	0x20002e6c

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <__NVIC_EnableIRQ+0x34>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff90 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff2d 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff42 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff90 	bl	8001f10 <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5f 	bl	8001ebc <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff35 	bl	8001e84 <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002052:	e160      	b.n	8002316 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8152 	beq.w	8002310 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d005      	beq.n	8002084 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002080:	2b02      	cmp	r3, #2
 8002082:	d130      	bne.n	80020e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80020ba:	2201      	movs	r2, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 0201 	and.w	r2, r3, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d017      	beq.n	8002122 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d123      	bne.n	8002176 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0203 	and.w	r2, r3, #3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80ac 	beq.w	8002310 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b8:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_GPIO_Init+0x2f8>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a5d      	ldr	r2, [pc, #372]	; (8002334 <HAL_GPIO_Init+0x2f8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_GPIO_Init+0x2f8>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80021d0:	4a59      	ldr	r2, [pc, #356]	; (8002338 <HAL_GPIO_Init+0x2fc>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a51      	ldr	r2, [pc, #324]	; (800233c <HAL_GPIO_Init+0x300>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d025      	beq.n	8002248 <HAL_GPIO_Init+0x20c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a50      	ldr	r2, [pc, #320]	; (8002340 <HAL_GPIO_Init+0x304>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d01f      	beq.n	8002244 <HAL_GPIO_Init+0x208>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a4f      	ldr	r2, [pc, #316]	; (8002344 <HAL_GPIO_Init+0x308>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d019      	beq.n	8002240 <HAL_GPIO_Init+0x204>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a4e      	ldr	r2, [pc, #312]	; (8002348 <HAL_GPIO_Init+0x30c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <HAL_GPIO_Init+0x200>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a4d      	ldr	r2, [pc, #308]	; (800234c <HAL_GPIO_Init+0x310>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00d      	beq.n	8002238 <HAL_GPIO_Init+0x1fc>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_GPIO_Init+0x314>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_Init+0x1f8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <HAL_GPIO_Init+0x318>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_GPIO_Init+0x1f4>
 800222c:	2306      	movs	r3, #6
 800222e:	e00c      	b.n	800224a <HAL_GPIO_Init+0x20e>
 8002230:	2307      	movs	r3, #7
 8002232:	e00a      	b.n	800224a <HAL_GPIO_Init+0x20e>
 8002234:	2305      	movs	r3, #5
 8002236:	e008      	b.n	800224a <HAL_GPIO_Init+0x20e>
 8002238:	2304      	movs	r3, #4
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x20e>
 800223c:	2303      	movs	r3, #3
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x20e>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x20e>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x20e>
 8002248:	2300      	movs	r3, #0
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800225a:	4937      	ldr	r1, [pc, #220]	; (8002338 <HAL_GPIO_Init+0x2fc>)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <HAL_GPIO_Init+0x31c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800228c:	4a32      	ldr	r2, [pc, #200]	; (8002358 <HAL_GPIO_Init+0x31c>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_GPIO_Init+0x31c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022b6:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_GPIO_Init+0x31c>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_GPIO_Init+0x31c>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_GPIO_Init+0x31c>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_GPIO_Init+0x31c>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_GPIO_Init+0x31c>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f ae97 	bne.w	8002054 <HAL_GPIO_Init+0x18>
  }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40010000 	.word	0x40010000
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400
 8002344:	40020800 	.word	0x40020800
 8002348:	40020c00 	.word	0x40020c00
 800234c:	40021000 	.word	0x40021000
 8002350:	40021400 	.word	0x40021400
 8002354:	40021800 	.word	0x40021800
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f90a 	bl	80015c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40010400 	.word	0x40010400

080023bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	b08b      	sub	sp, #44	; 0x2c
 80023c0:	af06      	add	r7, sp, #24
 80023c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0d0      	b.n	8002570 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f007 fce4 	bl	8009db0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f9b1 	bl	800575c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e04c      	b.n	800249a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	3301      	adds	r3, #1
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	b298      	uxth	r0, r3
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3336      	adds	r3, #54	; 0x36
 800243e:	4602      	mov	r2, r0
 8002440:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3303      	adds	r3, #3
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	333c      	adds	r3, #60	; 0x3c
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	3340      	adds	r3, #64	; 0x40
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	3301      	adds	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3ad      	bcc.n	8002400 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e044      	b.n	8002534 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	3301      	adds	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d3b5      	bcc.n	80024aa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	687e      	ldr	r6, [r7, #4]
 8002546:	466d      	mov	r5, sp
 8002548:	f106 0410 	add.w	r4, r6, #16
 800254c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	602b      	str	r3, [r5, #0]
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f003 f919 	bl	8005790 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002578 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_PCD_Start+0x16>
 800258a:	2302      	movs	r3, #2
 800258c:	e016      	b.n	80025bc <HAL_PCD_Start+0x44>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 f8c8 	bl	8005730 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80025a0:	2101      	movs	r1, #1
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f007 fbe6 	bl	8009d74 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f005 fdad 	bl	800810c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f005 fda5 	bl	8008120 <USB_ReadInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e0:	d102      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 faf5 	bl	8002bd2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f005 fd97 	bl	8008120 <USB_ReadInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d112      	bne.n	8002624 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002606:	b29a      	uxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002610:	b292      	uxth	r2, r2
 8002612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f007 fc45 	bl	8009ea6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800261c:	2100      	movs	r1, #0
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8c7 	bl	80027b2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f005 fd79 	bl	8008120 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002638:	d10b      	bne.n	8002652 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800264c:	b292      	uxth	r2, r2
 800264e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f005 fd62 	bl	8008120 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	d10b      	bne.n	8002680 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002670:	b29a      	uxth	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800267a:	b292      	uxth	r2, r2
 800267c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f005 fd4b 	bl	8008120 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002694:	d126      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0204 	bic.w	r2, r2, #4
 80026a8:	b292      	uxth	r2, r2
 80026aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0208 	bic.w	r2, r2, #8
 80026c0:	b292      	uxth	r2, r2
 80026c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f007 fc26 	bl	8009f18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026de:	b292      	uxth	r2, r2
 80026e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f005 fd19 	bl	8008120 <USB_ReadInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f8:	d126      	bne.n	8002748 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002702:	b29a      	uxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0208 	orr.w	r2, r2, #8
 800270c:	b292      	uxth	r2, r2
 800270e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002724:	b292      	uxth	r2, r2
 8002726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0204 	orr.w	r2, r2, #4
 800273c:	b292      	uxth	r2, r2
 800273e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f007 fbce 	bl	8009ee4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f005 fce7 	bl	8008120 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d10e      	bne.n	800277c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002770:	b292      	uxth	r2, r2
 8002772:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f007 fb87 	bl	8009e8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f005 fccd 	bl	8008120 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002790:	d10b      	bne.n	80027aa <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a4:	b292      	uxth	r2, r2
 80027a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_PCD_SetAddress+0x1a>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e013      	b.n	80027f4 <HAL_PCD_SetAddress+0x42>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f005 fc7e 	bl	80080e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	70fb      	strb	r3, [r7, #3]
 800280e:	460b      	mov	r3, r1
 8002810:	803b      	strh	r3, [r7, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800281a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da0e      	bge.n	8002840 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	705a      	strb	r2, [r3, #1]
 800283e:	e00e      	b.n	800285e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 0207 	and.w	r2, r3, #7
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800286a:	883a      	ldrh	r2, [r7, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	78ba      	ldrb	r2, [r7, #2]
 8002874:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002888:	78bb      	ldrb	r3, [r7, #2]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d102      	bne.n	8002894 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_EP_Open+0xa6>
 800289e:	2302      	movs	r3, #2
 80028a0:	e00e      	b.n	80028c0 <HAL_PCD_EP_Open+0xc4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68f9      	ldr	r1, [r7, #12]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 ff8d 	bl	80057d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80028be:	7afb      	ldrb	r3, [r7, #11]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	da0e      	bge.n	80028fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	705a      	strb	r2, [r3, #1]
 80028f8:	e00e      	b.n	8002918 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	f003 0207 	and.w	r2, r3, #7
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_PCD_EP_Close+0x6a>
 800292e:	2302      	movs	r3, #2
 8002930:	e00e      	b.n	8002950 <HAL_PCD_EP_Close+0x88>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 faaf 	bl	8005ea4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002968:	7afb      	ldrb	r3, [r7, #11]
 800296a:	f003 0207 	and.w	r2, r3, #7
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029a4:	7afb      	ldrb	r3, [r7, #11]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6979      	ldr	r1, [r7, #20]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fc61 	bl	800627c <USB_EPStartXfer>
 80029ba:	e005      	b.n	80029c8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6979      	ldr	r1, [r7, #20]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 fc5a 	bl	800627c <USB_EPStartXfer>
  }

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f003 0207 	and.w	r2, r3, #7
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80029f4:	681b      	ldr	r3, [r3, #0]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a58:	7afb      	ldrb	r3, [r7, #11]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fc07 	bl	800627c <USB_EPStartXfer>
 8002a6e:	e005      	b.n	8002a7c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6979      	ldr	r1, [r7, #20]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fc00 	bl	800627c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 0207 	and.w	r2, r3, #7
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d901      	bls.n	8002aa4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e03e      	b.n	8002b22 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	da0e      	bge.n	8002aca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	705a      	strb	r2, [r3, #1]
 8002ac8:	e00c      	b.n	8002ae4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_PCD_EP_SetStall+0x7e>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e00e      	b.n	8002b22 <HAL_PCD_EP_SetStall+0x9c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 f9ea 	bl	8007eec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 020f 	and.w	r2, r3, #15
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d901      	bls.n	8002b48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e040      	b.n	8002bca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da0e      	bge.n	8002b6e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	705a      	strb	r2, [r3, #1]
 8002b6c:	e00e      	b.n	8002b8c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 0207 	and.w	r2, r3, #7
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_PCD_EP_ClrStall+0x82>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e00e      	b.n	8002bca <HAL_PCD_EP_ClrStall+0xa0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f005 f9e6 	bl	8007f8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b08e      	sub	sp, #56	; 0x38
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bda:	e2ec      	b.n	80031b6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002be4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002be6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002bf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 8161 	bne.w	8002ebe <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d152      	bne.n	8002cac <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	81fb      	strh	r3, [r7, #14]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3328      	adds	r3, #40	; 0x28
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	3302      	adds	r3, #2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	441a      	add	r2, r3
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f007 f8f2 	bl	8009e56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 829b 	beq.w	80031b6 <PCD_EP_ISR_Handler+0x5e4>
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 8296 	bne.w	80031b6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002caa:	e284      	b.n	80031b6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002cbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d034      	beq.n	8002d30 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3306      	adds	r3, #6
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f005 fa5f 	bl	80081c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d16:	4013      	ands	r3, r2
 8002d18:	823b      	strh	r3, [r7, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	8a3a      	ldrh	r2, [r7, #16]
 8002d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d24:	b292      	uxth	r2, r2
 8002d26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f007 f867 	bl	8009dfc <HAL_PCD_SetupStageCallback>
 8002d2e:	e242      	b.n	80031b6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f280 823e 	bge.w	80031b6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d46:	4013      	ands	r3, r2
 8002d48:	83bb      	strh	r3, [r7, #28]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	8bba      	ldrh	r2, [r7, #28]
 8002d50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d54:	b292      	uxth	r2, r2
 8002d56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3306      	adds	r3, #6
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d019      	beq.n	8002dc0 <PCD_EP_ISR_Handler+0x1ee>
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	6959      	ldr	r1, [r3, #20]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f005 fa0f 	bl	80081c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	441a      	add	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002db8:	2100      	movs	r1, #0
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f007 f830 	bl	8009e20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 81f2 	bne.w	80031b6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4413      	add	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d112      	bne.n	8002e20 <PCD_EP_ISR_Handler+0x24e>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	e02f      	b.n	8002e80 <PCD_EP_ISR_Handler+0x2ae>
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b3e      	cmp	r3, #62	; 0x3e
 8002e26:	d813      	bhi.n	8002e50 <PCD_EP_ISR_Handler+0x27e>
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <PCD_EP_ISR_Handler+0x270>
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	3301      	adds	r3, #1
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e017      	b.n	8002e80 <PCD_EP_ISR_Handler+0x2ae>
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <PCD_EP_ISR_Handler+0x298>
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	029b      	lsls	r3, r3, #10
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e90:	827b      	strh	r3, [r7, #18]
 8002e92:	8a7b      	ldrh	r3, [r7, #18]
 8002e94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e98:	827b      	strh	r3, [r7, #18]
 8002e9a:	8a7b      	ldrh	r3, [r7, #18]
 8002e9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ea0:	827b      	strh	r3, [r7, #18]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	8a7b      	ldrh	r3, [r7, #18]
 8002ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8013      	strh	r3, [r2, #0]
 8002ebc:	e17b      	b.n	80031b6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ed0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f280 80ea 	bge.w	80030ae <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	853b      	strh	r3, [r7, #40]	; 0x28
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	7b1b      	ldrb	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d122      	bne.n	8002f70 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3306      	adds	r3, #6
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f52:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002f54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8087 	beq.w	800306a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	6959      	ldr	r1, [r3, #20]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	88da      	ldrh	r2, [r3, #6]
 8002f68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f6a:	f005 f92d 	bl	80081c8 <USB_ReadPMA>
 8002f6e:	e07c      	b.n	800306a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	78db      	ldrb	r3, [r3, #3]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d108      	bne.n	8002f8a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f927 	bl	80031d2 <HAL_PCD_EP_DB_Receive>
 8002f84:	4603      	mov	r3, r0
 8002f86:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f88:	e06f      	b.n	800306a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d021      	beq.n	8003028 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800300c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800300e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02a      	beq.n	800306a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	6959      	ldr	r1, [r3, #20]
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	891a      	ldrh	r2, [r3, #8]
 8003020:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003022:	f005 f8d1 	bl	80081c8 <USB_ReadPMA>
 8003026:	e020      	b.n	800306a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003030:	b29b      	uxth	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	3306      	adds	r3, #6
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003050:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003052:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	6959      	ldr	r1, [r3, #20]
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	895a      	ldrh	r2, [r3, #10]
 8003064:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003066:	f005 f8af 	bl	80081c8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003070:	441a      	add	r2, r3
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800307c:	441a      	add	r2, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d004      	beq.n	8003094 <PCD_EP_ISR_Handler+0x4c2>
 800308a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	429a      	cmp	r2, r3
 8003092:	d206      	bcs.n	80030a2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f006 fec0 	bl	8009e20 <HAL_PCD_DataOutStageCallback>
 80030a0:	e005      	b.n	80030ae <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 f8e7 	bl	800627c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d07e      	beq.n	80031b6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80030b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	843b      	strh	r3, [r7, #32]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	8c3b      	ldrh	r3, [r7, #32]
 80030f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003100:	b29b      	uxth	r3, r3
 8003102:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d00c      	beq.n	8003126 <PCD_EP_ISR_Handler+0x554>
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	78db      	ldrb	r3, [r3, #3]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003118:	2b02      	cmp	r3, #2
 800311a:	d146      	bne.n	80031aa <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800311c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d141      	bne.n	80031aa <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	3302      	adds	r3, #2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	8bfb      	ldrh	r3, [r7, #30]
 8003156:	429a      	cmp	r2, r3
 8003158:	d906      	bls.n	8003168 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	8bfb      	ldrh	r3, [r7, #30]
 8003160:	1ad2      	subs	r2, r2, r3
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	619a      	str	r2, [r3, #24]
 8003166:	e002      	b.n	800316e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2200      	movs	r2, #0
 800316c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f006 fe6a 	bl	8009e56 <HAL_PCD_DataInStageCallback>
 8003182:	e018      	b.n	80031b6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	8bfb      	ldrh	r3, [r7, #30]
 800318a:	441a      	add	r2, r3
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	8bfb      	ldrh	r3, [r7, #30]
 8003196:	441a      	add	r2, r3
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 f86a 	bl	800627c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80031a8:	e005      	b.n	80031b6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031ac:	461a      	mov	r2, r3
 80031ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f91b 	bl	80033ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031be:	b29b      	uxth	r3, r3
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f6ff ad0a 	blt.w	8002bdc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3738      	adds	r7, #56	; 0x38
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b088      	sub	sp, #32
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	4613      	mov	r3, r2
 80031de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d07e      	beq.n	80032e8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	3302      	adds	r3, #2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003212:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	8b7b      	ldrh	r3, [r7, #26]
 800321a:	429a      	cmp	r2, r3
 800321c:	d306      	bcc.n	800322c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	8b7b      	ldrh	r3, [r7, #26]
 8003224:	1ad2      	subs	r2, r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	619a      	str	r2, [r3, #24]
 800322a:	e002      	b.n	8003232 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d123      	bne.n	8003282 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003254:	833b      	strh	r3, [r7, #24]
 8003256:	8b3b      	ldrh	r3, [r7, #24]
 8003258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800325c:	833b      	strh	r3, [r7, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	8b3b      	ldrh	r3, [r7, #24]
 800326e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327e:	b29b      	uxth	r3, r3
 8003280:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01f      	beq.n	80032cc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	82fb      	strh	r3, [r7, #22]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032cc:	8b7b      	ldrh	r3, [r7, #26]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8087 	beq.w	80033e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6959      	ldr	r1, [r3, #20]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	891a      	ldrh	r2, [r3, #8]
 80032e0:	8b7b      	ldrh	r3, [r7, #26]
 80032e2:	f004 ff71 	bl	80081c8 <USB_ReadPMA>
 80032e6:	e07c      	b.n	80033e2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	3306      	adds	r3, #6
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003310:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	8b7b      	ldrh	r3, [r7, #26]
 8003318:	429a      	cmp	r2, r3
 800331a:	d306      	bcc.n	800332a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	8b7b      	ldrh	r3, [r7, #26]
 8003322:	1ad2      	subs	r2, r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	619a      	str	r2, [r3, #24]
 8003328:	e002      	b.n	8003330 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d123      	bne.n	8003380 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	83fb      	strh	r3, [r7, #30]
 8003354:	8bfb      	ldrh	r3, [r7, #30]
 8003356:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800335a:	83fb      	strh	r3, [r7, #30]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	8bfb      	ldrh	r3, [r7, #30]
 800336c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337c:	b29b      	uxth	r3, r3
 800337e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11f      	bne.n	80033ca <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	83bb      	strh	r3, [r7, #28]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	441a      	add	r2, r3
 80033b4:	8bbb      	ldrh	r3, [r7, #28]
 80033b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033ca:	8b7b      	ldrh	r3, [r7, #26]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6959      	ldr	r1, [r3, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	895a      	ldrh	r2, [r3, #10]
 80033dc:	8b7b      	ldrh	r3, [r7, #26]
 80033de:	f004 fef3 	bl	80081c8 <USB_ReadPMA>
    }
  }

  return count;
 80033e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0a2      	sub	sp, #136	; 0x88
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 81c7 	beq.w	8003794 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	3302      	adds	r3, #2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800343a:	429a      	cmp	r2, r3
 800343c:	d907      	bls.n	800344e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003446:	1ad2      	subs	r2, r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	619a      	str	r2, [r3, #24]
 800344c:	e002      	b.n	8003454 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 80b9 	bne.w	80035d0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d126      	bne.n	80034b4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	4413      	add	r3, r2
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	011a      	lsls	r2, r3, #4
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	4413      	add	r3, r2
 8003488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003498:	b29a      	uxth	r2, r3
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	801a      	strh	r2, [r3, #0]
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	e01a      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d116      	bne.n	80034ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	4413      	add	r3, r2
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	011a      	lsls	r2, r3, #4
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	4413      	add	r3, r2
 80034de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	2200      	movs	r2, #0
 80034e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d126      	bne.n	8003546 <HAL_PCD_EP_DB_Transmit+0x15a>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003506:	b29b      	uxth	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	011a      	lsls	r2, r3, #4
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800352a:	b29a      	uxth	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353e:	b29a      	uxth	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	801a      	strh	r2, [r3, #0]
 8003544:	e017      	b.n	8003576 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d113      	bne.n	8003576 <HAL_PCD_EP_DB_Transmit+0x18a>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	4413      	add	r3, r2
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	011a      	lsls	r2, r3, #4
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	4413      	add	r3, r2
 800356a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2200      	movs	r2, #0
 8003574:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f006 fc6a 	bl	8009e56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 82d4 	beq.w	8003b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	827b      	strh	r3, [r7, #18]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	441a      	add	r2, r3
 80035b8:	8a7b      	ldrh	r3, [r7, #18]
 80035ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	8013      	strh	r3, [r2, #0]
 80035ce:	e2b2      	b.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d021      	beq.n	800361e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	441a      	add	r2, r3
 8003606:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800360a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361a:	b29b      	uxth	r3, r3
 800361c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 8286 	bne.w	8003b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003632:	441a      	add	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003640:	441a      	add	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d309      	bcc.n	8003666 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	621a      	str	r2, [r3, #32]
 8003664:	e015      	b.n	8003692 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d107      	bne.n	800367e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800366e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003672:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800367c:	e009      	b.n	8003692 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	785b      	ldrb	r3, [r3, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d155      	bne.n	8003746 <HAL_PCD_EP_DB_Transmit+0x35a>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	4413      	add	r3, r2
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	011a      	lsls	r2, r3, #4
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	4413      	add	r3, r2
 80036bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
 80036c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d112      	bne.n	80036ee <HAL_PCD_EP_DB_Transmit+0x302>
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	801a      	strh	r2, [r3, #0]
 80036d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	801a      	strh	r2, [r3, #0]
 80036ec:	e047      	b.n	800377e <HAL_PCD_EP_DB_Transmit+0x392>
 80036ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f0:	2b3e      	cmp	r3, #62	; 0x3e
 80036f2:	d811      	bhi.n	8003718 <HAL_PCD_EP_DB_Transmit+0x32c>
 80036f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_PCD_EP_DB_Transmit+0x31e>
 8003704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003706:	3301      	adds	r3, #1
 8003708:	64bb      	str	r3, [r7, #72]	; 0x48
 800370a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370c:	b29b      	uxth	r3, r3
 800370e:	029b      	lsls	r3, r3, #10
 8003710:	b29a      	uxth	r2, r3
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	e032      	b.n	800377e <HAL_PCD_EP_DB_Transmit+0x392>
 8003718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
 800371e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_PCD_EP_DB_Transmit+0x342>
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	3b01      	subs	r3, #1
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
 800372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003730:	b29b      	uxth	r3, r3
 8003732:	029b      	lsls	r3, r3, #10
 8003734:	b29b      	uxth	r3, r3
 8003736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800373a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800373e:	b29a      	uxth	r2, r3
 8003740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	e01b      	b.n	800377e <HAL_PCD_EP_DB_Transmit+0x392>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d117      	bne.n	800377e <HAL_PCD_EP_DB_Transmit+0x392>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800375c:	b29b      	uxth	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	4413      	add	r3, r2
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	011a      	lsls	r2, r3, #4
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	4413      	add	r3, r2
 8003770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003778:	b29a      	uxth	r2, r3
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6959      	ldr	r1, [r3, #20]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	891a      	ldrh	r2, [r3, #8]
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	b29b      	uxth	r3, r3
 800378e:	f004 fcd6 	bl	800813e <USB_WritePMA>
 8003792:	e1d0      	b.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	3306      	adds	r3, #6
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d307      	bcc.n	80037dc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037d4:	1ad2      	subs	r2, r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	e002      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80c4 	bne.w	8003974 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d126      	bne.n	8003842 <HAL_PCD_EP_DB_Transmit+0x456>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003808:	4413      	add	r3, r2
 800380a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	011a      	lsls	r2, r3, #4
 8003812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003814:	4413      	add	r3, r2
 8003816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800381a:	66bb      	str	r3, [r7, #104]	; 0x68
 800381c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003826:	b29a      	uxth	r2, r3
 8003828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382a:	801a      	strh	r2, [r3, #0]
 800382c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383a:	b29a      	uxth	r2, r3
 800383c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	e01a      	b.n	8003878 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d116      	bne.n	8003878 <HAL_PCD_EP_DB_Transmit+0x48c>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	677b      	str	r3, [r7, #116]	; 0x74
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385e:	4413      	add	r3, r2
 8003860:	677b      	str	r3, [r7, #116]	; 0x74
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	011a      	lsls	r2, r3, #4
 8003868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800386a:	4413      	add	r3, r2
 800386c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003870:	673b      	str	r3, [r7, #112]	; 0x70
 8003872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003874:	2200      	movs	r2, #0
 8003876:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	67bb      	str	r3, [r7, #120]	; 0x78
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	785b      	ldrb	r3, [r3, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d12f      	bne.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003896:	b29b      	uxth	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800389e:	4413      	add	r3, r2
 80038a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	011a      	lsls	r2, r3, #4
 80038aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ae:	4413      	add	r3, r2
 80038b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ca:	801a      	strh	r2, [r3, #0]
 80038cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038dc:	b29a      	uxth	r2, r3
 80038de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e017      	b.n	8003916 <HAL_PCD_EP_DB_Transmit+0x52a>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d113      	bne.n	8003916 <HAL_PCD_EP_DB_Transmit+0x52a>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038fc:	4413      	add	r3, r2
 80038fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	011a      	lsls	r2, r3, #4
 8003906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003908:	4413      	add	r3, r2
 800390a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800390e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f006 fa9a 	bl	8009e56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8104 	bne.w	8003b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800395e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800396a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]
 8003972:	e0e0      	b.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d121      	bne.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 80b4 	bne.w	8003b36 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039d6:	441a      	add	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039e4:	441a      	add	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d309      	bcc.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a02:	1ad2      	subs	r2, r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	621a      	str	r2, [r3, #32]
 8003a08:	e015      	b.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003a12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a20:	e009      	b.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d155      	bne.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x704>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a58:	4413      	add	r3, r2
 8003a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	011a      	lsls	r2, r3, #4
 8003a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a64:	4413      	add	r3, r2
 8003a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d112      	bne.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a80:	801a      	strh	r2, [r3, #0]
 8003a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	e044      	b.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8003a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8003a9c:	d811      	bhi.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8003aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003abe:	801a      	strh	r2, [r3, #0]
 8003ac0:	e02f      	b.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d102      	bne.n	8003ad8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aec:	801a      	strh	r2, [r3, #0]
 8003aee:	e018      	b.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d114      	bne.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x736>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b06:	4413      	add	r3, r2
 8003b08:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	011a      	lsls	r2, r3, #4
 8003b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b18:	663b      	str	r3, [r7, #96]	; 0x60
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6959      	ldr	r1, [r3, #20]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	895a      	ldrh	r2, [r3, #10]
 8003b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f004 fb04 	bl	800813e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b50:	823b      	strh	r3, [r7, #16]
 8003b52:	8a3b      	ldrh	r3, [r7, #16]
 8003b54:	f083 0310 	eor.w	r3, r3, #16
 8003b58:	823b      	strh	r3, [r7, #16]
 8003b5a:	8a3b      	ldrh	r3, [r7, #16]
 8003b5c:	f083 0320 	eor.w	r3, r3, #32
 8003b60:	823b      	strh	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	441a      	add	r2, r3
 8003b70:	8a3b      	ldrh	r3, [r7, #16]
 8003b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3788      	adds	r7, #136	; 0x88
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	817b      	strh	r3, [r7, #10]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ba2:	897b      	ldrh	r3, [r7, #10]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e009      	b.n	8003bda <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bc6:	897a      	ldrh	r2, [r7, #10]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003bda:	893b      	ldrh	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d107      	bne.n	8003bf0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2200      	movs	r2, #0
 8003be4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	80da      	strh	r2, [r3, #6]
 8003bee:	e00b      	b.n	8003c08 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e31d      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c26:	4b94      	ldr	r3, [pc, #592]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c30:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c38:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07b      	beq.n	8003d3e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d006      	beq.n	8003c5a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d10f      	bne.n	8003c72 <HAL_RCC_OscConfig+0x5e>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5a:	4b87      	ldr	r3, [pc, #540]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06a      	beq.n	8003d3c <HAL_RCC_OscConfig+0x128>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d166      	bne.n	8003d3c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e2f7      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x74>
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7e      	ldr	r2, [pc, #504]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e02d      	b.n	8003ce4 <HAL_RCC_OscConfig+0xd0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x96>
 8003c90:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a78      	ldr	r2, [pc, #480]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a75      	ldr	r2, [pc, #468]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCC_OscConfig+0xd0>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0xb8>
 8003cb2:	4b71      	ldr	r3, [pc, #452]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a70      	ldr	r2, [pc, #448]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6d      	ldr	r2, [pc, #436]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0xd0>
 8003ccc:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a66      	ldr	r2, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fe f88e 	bl	8001e0c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fe f88a 	bl	8001e0c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e2ad      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xe0>
 8003d12:	e014      	b.n	8003d3e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fe f87a 	bl	8001e0c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fe f876 	bl	8001e0c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e299      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d2e:	4b52      	ldr	r3, [pc, #328]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x108>
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d05a      	beq.n	8003e00 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d119      	bne.n	8003d8a <HAL_RCC_OscConfig+0x176>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d116      	bne.n	8003d8a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5c:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_OscConfig+0x160>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e276      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	493d      	ldr	r1, [pc, #244]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d88:	e03a      	b.n	8003e00 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d020      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCC_OscConfig+0x268>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe f838 	bl	8001e0c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da0:	f7fe f834 	bl	8001e0c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e257      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003db2:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	492a      	ldr	r1, [pc, #168]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
 8003dd2:	e015      	b.n	8003e00 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_RCC_OscConfig+0x268>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fe f817 	bl	8001e0c <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fe f813 	bl	8001e0c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e236      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80b8 	beq.w	8003f7e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d170      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e14:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_OscConfig+0x218>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e21a      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d921      	bls.n	8003e80 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fc7d 	bl	8004740 <RCC_SetFlashLatencyFromMSIRange>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e208      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4906      	ldr	r1, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	4901      	ldr	r1, [pc, #4]	; (8003e78 <HAL_RCC_OscConfig+0x264>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e020      	b.n	8003eba <HAL_RCC_OscConfig+0x2a6>
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e80:	4b99      	ldr	r3, [pc, #612]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4996      	ldr	r1, [pc, #600]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e92:	4b95      	ldr	r3, [pc, #596]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	4991      	ldr	r1, [pc, #580]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fc48 	bl	8004740 <RCC_SetFlashLatencyFromMSIRange>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1d3      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	0b5b      	lsrs	r3, r3, #13
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003eca:	4a87      	ldr	r2, [pc, #540]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	0912      	lsrs	r2, r2, #4
 8003ed0:	f002 020f 	and.w	r2, r2, #15
 8003ed4:	4985      	ldr	r1, [pc, #532]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003ed6:	5c8a      	ldrb	r2, [r1, r2]
 8003ed8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003eda:	4a85      	ldr	r2, [pc, #532]	; (80040f0 <HAL_RCC_OscConfig+0x4dc>)
 8003edc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ede:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_RCC_OscConfig+0x4e0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd ff46 	bl	8001d74 <HAL_InitTick>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d045      	beq.n	8003f7e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	e1b5      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d029      	beq.n	8003f52 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003efe:	4b7e      	ldr	r3, [pc, #504]	; (80040f8 <HAL_RCC_OscConfig+0x4e4>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fd ff82 	bl	8001e0c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f0c:	f7fd ff7e 	bl	8001e0c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e1a1      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f1e:	4b72      	ldr	r3, [pc, #456]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2a:	4b6f      	ldr	r3, [pc, #444]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	496c      	ldr	r1, [pc, #432]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	4967      	ldr	r1, [pc, #412]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
 8003f50:	e015      	b.n	8003f7e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f52:	4b69      	ldr	r3, [pc, #420]	; (80040f8 <HAL_RCC_OscConfig+0x4e4>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fd ff58 	bl	8001e0c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f60:	f7fd ff54 	bl	8001e0c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e177      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f72:	4b5d      	ldr	r3, [pc, #372]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d030      	beq.n	8003fec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f92:	4b5a      	ldr	r3, [pc, #360]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f98:	f7fd ff38 	bl	8001e0c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fd ff34 	bl	8001e0c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e157      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x38c>
 8003fbe:	e015      	b.n	8003fec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc0:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd ff21 	bl	8001e0c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fce:	f7fd ff1d 	bl	8001e0c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e140      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fe0:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80b5 	beq.w	8004164 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	4b37      	ldr	r3, [pc, #220]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	4a36      	ldr	r2, [pc, #216]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6253      	str	r3, [r2, #36]	; 0x24
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004022:	2301      	movs	r3, #1
 8004024:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b36      	ldr	r3, [pc, #216]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d118      	bne.n	8004064 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004032:	4b33      	ldr	r3, [pc, #204]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a32      	ldr	r2, [pc, #200]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fd fee5 	bl	8001e0c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004046:	f7fd fee1 	bl	8001e0c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b64      	cmp	r3, #100	; 0x64
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e104      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004058:	4b29      	ldr	r3, [pc, #164]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x466>
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6353      	str	r3, [r2, #52]	; 0x34
 8004078:	e02d      	b.n	80040d6 <HAL_RCC_OscConfig+0x4c2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10c      	bne.n	800409c <HAL_RCC_OscConfig+0x488>
 8004082:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	6353      	str	r3, [r2, #52]	; 0x34
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8004094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004098:	6353      	str	r3, [r2, #52]	; 0x34
 800409a:	e01c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4c2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	d10c      	bne.n	80040be <HAL_RCC_OscConfig+0x4aa>
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ae:	6353      	str	r3, [r2, #52]	; 0x34
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ba:	6353      	str	r3, [r2, #52]	; 0x34
 80040bc:	e00b      	b.n	80040d6 <HAL_RCC_OscConfig+0x4c2>
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c8:	6353      	str	r3, [r2, #52]	; 0x34
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	4a06      	ldr	r2, [pc, #24]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 80040d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d024      	beq.n	8004128 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040de:	f7fd fe95 	bl	8001e0c <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040e4:	e019      	b.n	800411a <HAL_RCC_OscConfig+0x506>
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800
 80040ec:	0800beb8 	.word	0x0800beb8
 80040f0:	200002c8 	.word	0x200002c8
 80040f4:	200002cc 	.word	0x200002cc
 80040f8:	42470020 	.word	0x42470020
 80040fc:	42470680 	.word	0x42470680
 8004100:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fd fe82 	bl	8001e0c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0a3      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800411a:	4b54      	ldr	r3, [pc, #336]	; (800426c <HAL_RCC_OscConfig+0x658>)
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ee      	beq.n	8004104 <HAL_RCC_OscConfig+0x4f0>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fd fe70 	bl	8001e0c <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fd fe6c 	bl	8001e0c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e08d      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004146:	4b49      	ldr	r3, [pc, #292]	; (800426c <HAL_RCC_OscConfig+0x658>)
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ee      	bne.n	8004130 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d105      	bne.n	8004164 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004158:	4b44      	ldr	r3, [pc, #272]	; (800426c <HAL_RCC_OscConfig+0x658>)
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	4a43      	ldr	r2, [pc, #268]	; (800426c <HAL_RCC_OscConfig+0x658>)
 800415e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004162:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d079      	beq.n	8004260 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d056      	beq.n	8004220 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b02      	cmp	r3, #2
 8004178:	d13b      	bne.n	80041f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b3d      	ldr	r3, [pc, #244]	; (8004270 <HAL_RCC_OscConfig+0x65c>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fd fe44 	bl	8001e0c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd fe40 	bl	8001e0c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e063      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCC_OscConfig+0x658>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a6:	4b31      	ldr	r3, [pc, #196]	; (800426c <HAL_RCC_OscConfig+0x658>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4319      	orrs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	430b      	orrs	r3, r1
 80041be:	492b      	ldr	r1, [pc, #172]	; (800426c <HAL_RCC_OscConfig+0x658>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_RCC_OscConfig+0x65c>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ca:	f7fd fe1f 	bl	8001e0c <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fd fe1b 	bl	8001e0c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e03e      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <HAL_RCC_OscConfig+0x658>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x5be>
 80041f0:	e036      	b.n	8004260 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <HAL_RCC_OscConfig+0x65c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fd fe08 	bl	8001e0c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004200:	f7fd fe04 	bl	8001e0c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e027      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <HAL_RCC_OscConfig+0x658>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x5ec>
 800421e:	e01f      	b.n	8004260 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e01a      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_RCC_OscConfig+0x658>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	429a      	cmp	r2, r3
 800423e:	d10d      	bne.n	800425c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	42470060 	.word	0x42470060

08004274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e11a      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004288:	4b8f      	ldr	r3, [pc, #572]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d919      	bls.n	80042ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x34>
 800429c:	4b8a      	ldr	r3, [pc, #552]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a89      	ldr	r2, [pc, #548]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b87      	ldr	r3, [pc, #540]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 0201 	bic.w	r2, r3, #1
 80042b0:	4985      	ldr	r1, [pc, #532]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b8:	4b83      	ldr	r3, [pc, #524]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0f9      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d6:	4b7d      	ldr	r3, [pc, #500]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	497a      	ldr	r1, [pc, #488]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 808e 	beq.w	8004412 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042fe:	4b73      	ldr	r3, [pc, #460]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d121      	bne.n	800434e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e0d7      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b03      	cmp	r3, #3
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004316:	4b6d      	ldr	r3, [pc, #436]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d115      	bne.n	800434e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0cb      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800432e:	4b67      	ldr	r3, [pc, #412]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0bf      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800433e:	4b63      	ldr	r3, [pc, #396]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0b7      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434e:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 0203 	bic.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	495c      	ldr	r1, [pc, #368]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004360:	f7fd fd54 	bl	8001e0c <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d112      	bne.n	8004394 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fd fd4c 	bl	8001e0c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e09b      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004386:	4b51      	ldr	r3, [pc, #324]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b08      	cmp	r3, #8
 8004390:	d1ee      	bne.n	8004370 <HAL_RCC_ClockConfig+0xfc>
 8004392:	e03e      	b.n	8004412 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d112      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439e:	f7fd fd35 	bl	8001e0c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e084      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043b4:	4b45      	ldr	r3, [pc, #276]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d1ee      	bne.n	800439e <HAL_RCC_ClockConfig+0x12a>
 80043c0:	e027      	b.n	8004412 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d11d      	bne.n	8004406 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fd fd1e 	bl	8001e0c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e06d      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043e2:	4b3a      	ldr	r3, [pc, #232]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d1ee      	bne.n	80043cc <HAL_RCC_ClockConfig+0x158>
 80043ee:	e010      	b.n	8004412 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fd fd0c 	bl	8001e0c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e05b      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004406:	4b31      	ldr	r3, [pc, #196]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ee      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004412:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d219      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <HAL_RCC_ClockConfig+0x1be>
 8004426:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 800442c:	f043 0304 	orr.w	r3, r3, #4
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	4923      	ldr	r1, [pc, #140]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_RCC_ClockConfig+0x254>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e034      	b.n	80044be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4917      	ldr	r1, [pc, #92]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	490f      	ldr	r1, [pc, #60]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004492:	f000 f823 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 8004496:	4602      	mov	r2, r0
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCC_ClockConfig+0x258>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	490b      	ldr	r1, [pc, #44]	; (80044d0 <HAL_RCC_ClockConfig+0x25c>)
 80044a4:	5ccb      	ldrb	r3, [r1, r3]
 80044a6:	fa22 f303 	lsr.w	r3, r2, r3
 80044aa:	4a0a      	ldr	r2, [pc, #40]	; (80044d4 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_RCC_ClockConfig+0x264>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fc5e 	bl	8001d74 <HAL_InitTick>
 80044b8:	4603      	mov	r3, r0
 80044ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80044bc:	7afb      	ldrb	r3, [r7, #11]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023c00 	.word	0x40023c00
 80044cc:	40023800 	.word	0x40023800
 80044d0:	0800beb8 	.word	0x0800beb8
 80044d4:	200002c8 	.word	0x200002c8
 80044d8:	200002cc 	.word	0x200002cc

080044dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e0:	b092      	sub	sp, #72	; 0x48
 80044e2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80044e4:	4b79      	ldr	r3, [pc, #484]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	d00d      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x34>
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	f200 80d5 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x1c8>
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d002      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x28>
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d003      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x2e>
 8004502:	e0cf      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004508:	e0da      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800450a:	4b72      	ldr	r3, [pc, #456]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800450c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800450e:	e0d7      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	0c9b      	lsrs	r3, r3, #18
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800451a:	5c9b      	ldrb	r3, [r3, r2]
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800451e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004520:	0d9b      	lsrs	r3, r3, #22
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800452a:	4b68      	ldr	r3, [pc, #416]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d05d      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	2200      	movs	r2, #0
 800453a:	4618      	mov	r0, r3
 800453c:	4611      	mov	r1, r2
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	4622      	mov	r2, r4
 8004544:	462b      	mov	r3, r5
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	0159      	lsls	r1, r3, #5
 8004550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004554:	0150      	lsls	r0, r2, #5
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4621      	mov	r1, r4
 800455c:	1a51      	subs	r1, r2, r1
 800455e:	6139      	str	r1, [r7, #16]
 8004560:	4629      	mov	r1, r5
 8004562:	eb63 0301 	sbc.w	r3, r3, r1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004574:	4659      	mov	r1, fp
 8004576:	018b      	lsls	r3, r1, #6
 8004578:	4651      	mov	r1, sl
 800457a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800457e:	4651      	mov	r1, sl
 8004580:	018a      	lsls	r2, r1, #6
 8004582:	46d4      	mov	ip, sl
 8004584:	ebb2 080c 	subs.w	r8, r2, ip
 8004588:	4659      	mov	r1, fp
 800458a:	eb63 0901 	sbc.w	r9, r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a2:	4690      	mov	r8, r2
 80045a4:	4699      	mov	r9, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	eb18 0303 	adds.w	r3, r8, r3
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	462b      	mov	r3, r5
 80045b0:	eb49 0303 	adc.w	r3, r9, r3
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045c2:	4629      	mov	r1, r5
 80045c4:	024b      	lsls	r3, r1, #9
 80045c6:	4620      	mov	r0, r4
 80045c8:	4629      	mov	r1, r5
 80045ca:	4604      	mov	r4, r0
 80045cc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80045d0:	4601      	mov	r1, r0
 80045d2:	024a      	lsls	r2, r1, #9
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045da:	2200      	movs	r2, #0
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045e4:	f7fb fdd2 	bl	800018c <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4613      	mov	r3, r2
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
 80045f0:	e055      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	2200      	movs	r2, #0
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	627a      	str	r2, [r7, #36]	; 0x24
 80045fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045fe:	4642      	mov	r2, r8
 8004600:	464b      	mov	r3, r9
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	46c4      	mov	ip, r8
 8004618:	ebb2 0a0c 	subs.w	sl, r2, ip
 800461c:	4640      	mov	r0, r8
 800461e:	4649      	mov	r1, r9
 8004620:	468c      	mov	ip, r1
 8004622:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004632:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004636:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800463a:	ebb2 040a 	subs.w	r4, r2, sl
 800463e:	eb63 050b 	sbc.w	r5, r3, fp
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	00eb      	lsls	r3, r5, #3
 800464c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004650:	00e2      	lsls	r2, r4, #3
 8004652:	4614      	mov	r4, r2
 8004654:	461d      	mov	r5, r3
 8004656:	4603      	mov	r3, r0
 8004658:	18e3      	adds	r3, r4, r3
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	460b      	mov	r3, r1
 800465e:	eb45 0303 	adc.w	r3, r5, r3
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004670:	4629      	mov	r1, r5
 8004672:	028b      	lsls	r3, r1, #10
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	4604      	mov	r4, r0
 800467a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800467e:	4601      	mov	r1, r0
 8004680:	028a      	lsls	r2, r1, #10
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	2200      	movs	r2, #0
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	61fa      	str	r2, [r7, #28]
 800468e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004692:	f7fb fd7b 	bl	800018c <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4613      	mov	r3, r2
 800469c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800469e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80046a2:	e00d      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	0b5b      	lsrs	r3, r3, #13
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	3301      	adds	r3, #1
 80046b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80046be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3748      	adds	r7, #72	; 0x48
 80046c6:	46bd      	mov	sp, r7
 80046c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046cc:	40023800 	.word	0x40023800
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	007a1200 	.word	0x007a1200
 80046d8:	0800beac 	.word	0x0800beac

080046dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e0:	4b02      	ldr	r3, [pc, #8]	; (80046ec <HAL_RCC_GetHCLKFreq+0x10>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	200002c8 	.word	0x200002c8

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f4:	f7ff fff2 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	0800bec8 	.word	0x0800bec8

08004718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800471c:	f7ff ffde 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0adb      	lsrs	r3, r3, #11
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	; (800473c <HAL_RCC_GetPCLK2Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40023800 	.word	0x40023800
 800473c:	0800bec8 	.word	0x0800bec8

08004740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800474c:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d12c      	bne.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e016      	b.n	800479e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004770:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477a:	6253      	str	r3, [r2, #36]	; 0x24
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004790:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047a4:	d105      	bne.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047ac:	d101      	bne.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80047ae:	2301      	movs	r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0f      	ldr	r2, [pc, #60]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047be:	f043 0304 	orr.w	r3, r3, #4
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f023 0201 	bic.w	r2, r3, #1
 80047cc:	490b      	ldr	r1, [pc, #44]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40007000 	.word	0x40007000
 80047fc:	40023c00 	.word	0x40023c00

08004800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e07b      	b.n	800490a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004822:	d009      	beq.n	8004838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]
 800482a:	e005      	b.n	8004838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fd f89a 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	ea42 0103 	orr.w	r1, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0104 	and.w	r1, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	f003 0210 	and.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b08c      	sub	sp, #48	; 0x30
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004920:	2301      	movs	r3, #1
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_SPI_TransmitReceive+0x26>
 8004934:	2302      	movs	r3, #2
 8004936:	e18a      	b.n	8004c4e <HAL_SPI_TransmitReceive+0x33c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004940:	f7fd fa64 	bl	8001e0c <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800495a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800495e:	2b01      	cmp	r3, #1
 8004960:	d00f      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x70>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004968:	d107      	bne.n	800497a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_SPI_TransmitReceive+0x68>
 8004972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004976:	2b04      	cmp	r3, #4
 8004978:	d003      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800497a:	2302      	movs	r3, #2
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004980:	e15b      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x82>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x82>
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800499a:	e14e      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d003      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2205      	movs	r2, #5
 80049ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	887a      	ldrh	r2, [r7, #2]
 80049d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d007      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0c:	d178      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_SPI_TransmitReceive+0x10a>
 8004a16:	8b7b      	ldrh	r3, [r7, #26]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d166      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a40:	e053      	b.n	8004aea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d11b      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x176>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x176>
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d113      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d119      	bne.n	8004aca <HAL_SPI_TransmitReceive+0x1b8>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d014      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004aca:	f7fd f99f 	bl	8001e0c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d807      	bhi.n	8004aea <HAL_SPI_TransmitReceive+0x1d8>
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d003      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ae8:	e0a7      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1a6      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x130>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1a1      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x130>
 8004afe:	e07c      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x1fc>
 8004b08:	8b7b      	ldrh	r3, [r7, #26]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d16b      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	7812      	ldrb	r2, [r2, #0]
 8004b1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b34:	e057      	b.n	8004be6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d11c      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x26c>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x26c>
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d114      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d119      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x2ae>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d014      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bc0:	f7fd f924 	bl	8001e0c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d803      	bhi.n	8004bd8 <HAL_SPI_TransmitReceive+0x2c6>
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d102      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x2cc>
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004be4:	e029      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1a2      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x224>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d19d      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f8b2 	bl	8004d68 <SPI_EndRxTxTransaction>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d006      	beq.n	8004c18 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c16:	e010      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	e000      	b.n	8004c3a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3730      	adds	r7, #48	; 0x30
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c68:	f7fd f8d0 	bl	8001e0c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c78:	f7fd f8c8 	bl	8001e0c <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c7e:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	015b      	lsls	r3, r3, #5
 8004c84:	0d1b      	lsrs	r3, r3, #20
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8e:	e054      	b.n	8004d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d050      	beq.n	8004d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c98:	f7fd f8b8 	bl	8001e0c <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d902      	bls.n	8004cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d13d      	bne.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc6:	d111      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd0:	d004      	beq.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cda:	d107      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf4:	d10f      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e017      	b.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d19b      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200002c8 	.word	0x200002c8

08004d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <SPI_EndRxTxTransaction+0x7c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <SPI_EndRxTxTransaction+0x80>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0d5b      	lsrs	r3, r3, #21
 8004d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d112      	bne.n	8004dba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff ff5a 	bl	8004c58 <SPI_WaitFlagStateUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e00f      	b.n	8004dda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d0f2      	beq.n	8004dba <SPI_EndRxTxTransaction+0x52>
 8004dd4:	e000      	b.n	8004dd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004dd6:	bf00      	nop
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	200002c8 	.word	0x200002c8
 8004de8:	165e9f81 	.word	0x165e9f81

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e031      	b.n	8004e62 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fdfe 	bl	8001a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 f9ea 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d122      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d11b      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0202 	mvn.w	r2, #2
 8004e96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f98e 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004eb2:	e005      	b.n	8004ec0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f981 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f990 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d122      	bne.n	8004f1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d11b      	bne.n	8004f1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f06f 0204 	mvn.w	r2, #4
 8004eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f964 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004f06:	e005      	b.n	8004f14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f957 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f966 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d122      	bne.n	8004f6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d11b      	bne.n	8004f6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0208 	mvn.w	r2, #8
 8004f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2204      	movs	r2, #4
 8004f44:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f93a 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004f5a:	e005      	b.n	8004f68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f92d 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f93c 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d122      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d11b      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f06f 0210 	mvn.w	r2, #16
 8004f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2208      	movs	r2, #8
 8004f98:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f910 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004fae:	e005      	b.n	8004fbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f903 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f912 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10e      	bne.n	8004fee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0201 	mvn.w	r2, #1
 8004fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8de 	bl	80051aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d10e      	bne.n	800501a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d107      	bne.n	800501a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8ec 	bl	80051f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_TIM_ConfigClockSource+0x18>
 8005036:	2302      	movs	r3, #2
 8005038:	e0b3      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x180>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005058:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005060:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	d03e      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0xd0>
 8005074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005078:	f200 8087 	bhi.w	800518a <HAL_TIM_ConfigClockSource+0x168>
 800507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005080:	f000 8085 	beq.w	800518e <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005088:	d87f      	bhi.n	800518a <HAL_TIM_ConfigClockSource+0x168>
 800508a:	2b70      	cmp	r3, #112	; 0x70
 800508c:	d01a      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0xa2>
 800508e:	2b70      	cmp	r3, #112	; 0x70
 8005090:	d87b      	bhi.n	800518a <HAL_TIM_ConfigClockSource+0x168>
 8005092:	2b60      	cmp	r3, #96	; 0x60
 8005094:	d050      	beq.n	8005138 <HAL_TIM_ConfigClockSource+0x116>
 8005096:	2b60      	cmp	r3, #96	; 0x60
 8005098:	d877      	bhi.n	800518a <HAL_TIM_ConfigClockSource+0x168>
 800509a:	2b50      	cmp	r3, #80	; 0x50
 800509c:	d03c      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0xf6>
 800509e:	2b50      	cmp	r3, #80	; 0x50
 80050a0:	d873      	bhi.n	800518a <HAL_TIM_ConfigClockSource+0x168>
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d058      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0x136>
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d86f      	bhi.n	800518a <HAL_TIM_ConfigClockSource+0x168>
 80050aa:	2b30      	cmp	r3, #48	; 0x30
 80050ac:	d064      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x156>
 80050ae:	2b30      	cmp	r3, #48	; 0x30
 80050b0:	d86b      	bhi.n	800518a <HAL_TIM_ConfigClockSource+0x168>
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d060      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x156>
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d867      	bhi.n	800518a <HAL_TIM_ConfigClockSource+0x168>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d05c      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x156>
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d05a      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050c2:	e062      	b.n	800518a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f000 f97d 	bl	80053d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
      break;
 80050f0:	e04e      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f000 f966 	bl	80053d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005114:	609a      	str	r2, [r3, #8]
      break;
 8005116:	e03b      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	461a      	mov	r2, r3
 8005126:	f000 f8dd 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2150      	movs	r1, #80	; 0x50
 8005130:	4618      	mov	r0, r3
 8005132:	f000 f934 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8005136:	e02b      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6859      	ldr	r1, [r3, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	461a      	mov	r2, r3
 8005146:	f000 f8fb 	bl	8005340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2160      	movs	r1, #96	; 0x60
 8005150:	4618      	mov	r0, r3
 8005152:	f000 f924 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8005156:	e01b      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	461a      	mov	r2, r3
 8005166:	f000 f8bd 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2140      	movs	r1, #64	; 0x40
 8005170:	4618      	mov	r0, r3
 8005172:	f000 f914 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8005176:	e00b      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 f90b 	bl	800539e <TIM_ITRx_SetConfig>
        break;
 8005188:	e002      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800518a:	bf00      	nop
 800518c:	e000      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800518e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <TIM_Base_SetConfig+0xc8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <TIM_Base_SetConfig+0xcc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a29      	ldr	r2, [pc, #164]	; (80052d4 <TIM_Base_SetConfig+0xd0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a28      	ldr	r2, [pc, #160]	; (80052d8 <TIM_Base_SetConfig+0xd4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d017      	beq.n	8005286 <TIM_Base_SetConfig+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <TIM_Base_SetConfig+0xc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <TIM_Base_SetConfig+0x82>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <TIM_Base_SetConfig+0xcc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00f      	beq.n	8005286 <TIM_Base_SetConfig+0x82>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <TIM_Base_SetConfig+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00b      	beq.n	8005286 <TIM_Base_SetConfig+0x82>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a19      	ldr	r2, [pc, #100]	; (80052d8 <TIM_Base_SetConfig+0xd4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_Base_SetConfig+0x82>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <TIM_Base_SetConfig+0xd8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_Base_SetConfig+0x82>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a17      	ldr	r2, [pc, #92]	; (80052e0 <TIM_Base_SetConfig+0xdc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d108      	bne.n	8005298 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	615a      	str	r2, [r3, #20]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40010800 	.word	0x40010800
 80052dc:	40010c00 	.word	0x40010c00
 80052e0:	40011000 	.word	0x40011000

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 030a 	bic.w	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 0210 	bic.w	r2, r3, #16
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	031b      	lsls	r3, r3, #12
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800537c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	621a      	str	r2, [r3, #32]
}
 8005394:	bf00      	nop
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f043 0307 	orr.w	r3, r3, #7
 80053c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	021a      	lsls	r2, r3, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	609a      	str	r2, [r3, #8]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e046      	b.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546a:	d00e      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a10      	ldr	r2, [pc, #64]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10c      	bne.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4313      	orrs	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40010800 	.word	0x40010800

080054cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e03f      	b.n	800555e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc fab2 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	; 0x24
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f829 	bl	8005568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80055a8:	f023 030c 	bic.w	r3, r3, #12
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	430b      	orrs	r3, r1
 80055b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a55      	ldr	r2, [pc, #340]	; (8005728 <UART_SetConfig+0x1c0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d103      	bne.n	80055de <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055d6:	f7ff f89f 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	e002      	b.n	80055e4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055de:	f7ff f887 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 80055e2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d14c      	bne.n	8005688 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009a      	lsls	r2, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	4a49      	ldr	r2, [pc, #292]	; (800572c <UART_SetConfig+0x1c4>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	0119      	lsls	r1, r3, #4
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009a      	lsls	r2, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fbb2 f2f3 	udiv	r2, r2, r3
 8005624:	4b41      	ldr	r3, [pc, #260]	; (800572c <UART_SetConfig+0x1c4>)
 8005626:	fba3 0302 	umull	r0, r3, r3, r2
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2064      	movs	r0, #100	; 0x64
 800562e:	fb00 f303 	mul.w	r3, r0, r3
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	3332      	adds	r3, #50	; 0x32
 8005638:	4a3c      	ldr	r2, [pc, #240]	; (800572c <UART_SetConfig+0x1c4>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005646:	4419      	add	r1, r3
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009a      	lsls	r2, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	fbb2 f2f3 	udiv	r2, r2, r3
 800565e:	4b33      	ldr	r3, [pc, #204]	; (800572c <UART_SetConfig+0x1c4>)
 8005660:	fba3 0302 	umull	r0, r3, r3, r2
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	2064      	movs	r0, #100	; 0x64
 8005668:	fb00 f303 	mul.w	r3, r0, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	3332      	adds	r3, #50	; 0x32
 8005672:	4a2e      	ldr	r2, [pc, #184]	; (800572c <UART_SetConfig+0x1c4>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	f003 0207 	and.w	r2, r3, #7
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	440a      	add	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005686:	e04a      	b.n	800571e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009a      	lsls	r2, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	4a23      	ldr	r2, [pc, #140]	; (800572c <UART_SetConfig+0x1c4>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	0119      	lsls	r1, r3, #4
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009a      	lsls	r2, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <UART_SetConfig+0x1c4>)
 80056c0:	fba3 0302 	umull	r0, r3, r3, r2
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	2064      	movs	r0, #100	; 0x64
 80056c8:	fb00 f303 	mul.w	r3, r0, r3
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	3332      	adds	r3, #50	; 0x32
 80056d2:	4a16      	ldr	r2, [pc, #88]	; (800572c <UART_SetConfig+0x1c4>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056de:	4419      	add	r1, r3
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009a      	lsls	r2, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <UART_SetConfig+0x1c4>)
 80056f8:	fba3 0302 	umull	r0, r3, r3, r2
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	2064      	movs	r0, #100	; 0x64
 8005700:	fb00 f303 	mul.w	r3, r0, r3
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	3332      	adds	r3, #50	; 0x32
 800570a:	4a08      	ldr	r2, [pc, #32]	; (800572c <UART_SetConfig+0x1c4>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f003 020f 	and.w	r2, r3, #15
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	440a      	add	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40013800 	.word	0x40013800
 800572c:	51eb851f 	.word	0x51eb851f

08005730 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005740:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005744:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005764:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005768:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	b29b      	uxth	r3, r3
 8005776:	43db      	mvns	r3, r3
 8005778:	b29b      	uxth	r3, r3
 800577a:	4013      	ands	r3, r2
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005790:	b084      	sub	sp, #16
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	f107 0014 	add.w	r0, r7, #20
 800579e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	b004      	add	sp, #16
 80057ce:	4770      	bx	lr

080057d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b09b      	sub	sp, #108	; 0x6c
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d81f      	bhi.n	8005842 <USB_ActivateEndpoint+0x72>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <USB_ActivateEndpoint+0x38>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005819 	.word	0x08005819
 800580c:	08005835 	.word	0x08005835
 8005810:	0800584b 	.word	0x0800584b
 8005814:	08005827 	.word	0x08005827
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005818:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800581c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005820:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005824:	e012      	b.n	800584c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005826:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800582a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800582e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005832:	e00b      	b.n	800584c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005834:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800583c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005840:	e004      	b.n	800584c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005848:	e000      	b.n	800584c <USB_ActivateEndpoint+0x7c>
      break;
 800584a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800585a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586a:	b29b      	uxth	r3, r3
 800586c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005884:	b29a      	uxth	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	4313      	orrs	r3, r2
 800588e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	441a      	add	r2, r3
 800589c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	7b1b      	ldrb	r3, [r3, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f040 8149 	bne.w	8005b50 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 8084 	beq.w	80059d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	011a      	lsls	r2, r3, #4
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	88db      	ldrh	r3, [r3, #6]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	81fb      	strh	r3, [r7, #14]
 800590a:	89fb      	ldrh	r3, [r7, #14]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <USB_ActivateEndpoint+0x17c>
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592a:	81bb      	strh	r3, [r7, #12]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	89bb      	ldrh	r3, [r7, #12]
 8005938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	78db      	ldrb	r3, [r3, #3]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d020      	beq.n	8005996 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800596a:	813b      	strh	r3, [r7, #8]
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	f083 0320 	eor.w	r3, r3, #32
 8005972:	813b      	strh	r3, [r7, #8]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	893b      	ldrh	r3, [r7, #8]
 8005980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005990:	b29b      	uxth	r3, r3
 8005992:	8013      	strh	r3, [r2, #0]
 8005994:	e27f      	b.n	8005e96 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	817b      	strh	r3, [r7, #10]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	897b      	ldrh	r3, [r7, #10]
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e262      	b.n	8005e96 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	4413      	add	r3, r2
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80059f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	88db      	ldrh	r3, [r3, #6]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	4413      	add	r3, r2
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	011a      	lsls	r2, r3, #4
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	4413      	add	r3, r2
 8005a22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d112      	bne.n	8005a56 <USB_ActivateEndpoint+0x286>
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e02f      	b.n	8005ab6 <USB_ActivateEndpoint+0x2e6>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a5c:	d813      	bhi.n	8005a86 <USB_ActivateEndpoint+0x2b6>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	663b      	str	r3, [r7, #96]	; 0x60
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <USB_ActivateEndpoint+0x2a8>
 8005a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a74:	3301      	adds	r3, #1
 8005a76:	663b      	str	r3, [r7, #96]	; 0x60
 8005a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	029b      	lsls	r3, r3, #10
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	e017      	b.n	8005ab6 <USB_ActivateEndpoint+0x2e6>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <USB_ActivateEndpoint+0x2d0>
 8005a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	83fb      	strh	r3, [r7, #30]
 8005ac4:	8bfb      	ldrh	r3, [r7, #30]
 8005ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01b      	beq.n	8005b06 <USB_ActivateEndpoint+0x336>
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	83bb      	strh	r3, [r7, #28]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	8bbb      	ldrh	r3, [r7, #28]
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	837b      	strh	r3, [r7, #26]
 8005b1e:	8b7b      	ldrh	r3, [r7, #26]
 8005b20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b24:	837b      	strh	r3, [r7, #26]
 8005b26:	8b7b      	ldrh	r3, [r7, #26]
 8005b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b2c:	837b      	strh	r3, [r7, #26]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	8b7b      	ldrh	r3, [r7, #26]
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]
 8005b4e:	e1a2      	b.n	8005e96 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b9c:	4413      	add	r3, r2
 8005b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bae:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	891b      	ldrh	r3, [r3, #8]
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd0:	4413      	add	r3, r2
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	895b      	ldrh	r3, [r3, #10]
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 8091 	bne.w	8005d20 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01b      	beq.n	8005c4e <USB_ActivateEndpoint+0x47e>
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01b      	beq.n	8005c9e <USB_ActivateEndpoint+0x4ce>
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfc:	867b      	strh	r3, [r7, #50]	; 0x32
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]
 8005d1e:	e0ba      	b.n	8005e96 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01d      	beq.n	8005d78 <USB_ActivateEndpoint+0x5a8>
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	441a      	add	r2, r3
 8005d60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01d      	beq.n	8005dd0 <USB_ActivateEndpoint+0x600>
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	78db      	ldrb	r3, [r3, #3]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d024      	beq.n	8005e22 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005df6:	f083 0320 	eor.w	r3, r3, #32
 8005dfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]
 8005e20:	e01d      	b.n	8005e5e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005e96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	376c      	adds	r7, #108	; 0x6c
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b08d      	sub	sp, #52	; 0x34
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	7b1b      	ldrb	r3, [r3, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f040 808e 	bne.w	8005fd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d044      	beq.n	8005f4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	81bb      	strh	r3, [r7, #12]
 8005ece:	89bb      	ldrh	r3, [r7, #12]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <USB_DeactivateEndpoint+0x6c>
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	817b      	strh	r3, [r7, #10]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	897b      	ldrh	r3, [r7, #10]
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f26:	813b      	strh	r3, [r7, #8]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	893b      	ldrh	r3, [r7, #8]
 8005f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	8013      	strh	r3, [r2, #0]
 8005f48:	e192      	b.n	8006270 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	827b      	strh	r3, [r7, #18]
 8005f58:	8a7b      	ldrh	r3, [r7, #18]
 8005f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01b      	beq.n	8005f9a <USB_DeactivateEndpoint+0xf6>
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	823b      	strh	r3, [r7, #16]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	8a3b      	ldrh	r3, [r7, #16]
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	81fb      	strh	r3, [r7, #14]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	441a      	add	r2, r3
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	8013      	strh	r3, [r2, #0]
 8005fd2:	e14d      	b.n	8006270 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 80a5 	bne.w	8006128 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	843b      	strh	r3, [r7, #32]
 8005fec:	8c3b      	ldrh	r3, [r7, #32]
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01b      	beq.n	800602e <USB_DeactivateEndpoint+0x18a>
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	83fb      	strh	r3, [r7, #30]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	8bfb      	ldrh	r3, [r7, #30]
 800601a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	83bb      	strh	r3, [r7, #28]
 800603c:	8bbb      	ldrh	r3, [r7, #28]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01b      	beq.n	800607e <USB_DeactivateEndpoint+0x1da>
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605c:	837b      	strh	r3, [r7, #26]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	8b7b      	ldrh	r3, [r7, #26]
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006094:	833b      	strh	r3, [r7, #24]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	8b3b      	ldrh	r3, [r7, #24]
 80060a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	82fb      	strh	r3, [r7, #22]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8afb      	ldrh	r3, [r7, #22]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006104:	82bb      	strh	r3, [r7, #20]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8abb      	ldrh	r3, [r7, #20]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
 8006126:	e0a3      	b.n	8006270 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01b      	beq.n	8006178 <USB_DeactivateEndpoint+0x2d4>
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	441a      	add	r2, r3
 8006162:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	b29b      	uxth	r3, r3
 8006176:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <USB_DeactivateEndpoint+0x324>
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006216:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3734      	adds	r7, #52	; 0x34
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b0cc      	sub	sp, #304	; 0x130
 8006280:	af00      	add	r7, sp, #0
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628a:	6018      	str	r0, [r3, #0]
 800628c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006294:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	f041 817d 	bne.w	80075a2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d908      	bls.n	80062d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80062c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062d4:	e007      	b.n	80062e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	7b1b      	ldrb	r3, [r3, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d152      	bne.n	800639c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6959      	ldr	r1, [r3, #20]
 8006302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	88da      	ldrh	r2, [r3, #6]
 800630e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006312:	b29b      	uxth	r3, r3
 8006314:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006318:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f001 ff0e 	bl	800813e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800632a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800632e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006344:	b29b      	uxth	r3, r3
 8006346:	4619      	mov	r1, r3
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006350:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006354:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	440a      	add	r2, r1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	011a      	lsls	r2, r3, #4
 800636c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006370:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4413      	add	r3, r2
 8006378:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800637c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638a:	b29a      	uxth	r2, r3
 800638c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006390:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	f001 b8b5 	b.w	8007506 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800639c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	78db      	ldrb	r3, [r3, #3]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	f040 84c6 	bne.w	8006d3a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6a1a      	ldr	r2, [r3, #32]
 80063ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	f240 8443 	bls.w	8006c52 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80063f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006438:	1ad2      	subs	r2, r2, r3
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 823e 	beq.w	80068ea <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006476:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800647a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 809a 	bne.w	80065c8 <USB_EPStartXfer+0x34c>
 8006494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064a0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064c6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	440a      	add	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	011a      	lsls	r2, r3, #4
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80064ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d122      	bne.n	8006546 <USB_EPStartXfer+0x2ca>
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006512:	b29a      	uxth	r2, r3
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006536:	b29a      	uxth	r2, r3
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e079      	b.n	800663a <USB_EPStartXfer+0x3be>
 8006546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654a:	2b3e      	cmp	r3, #62	; 0x3e
 800654c:	d81b      	bhi.n	8006586 <USB_EPStartXfer+0x30a>
 800654e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <USB_EPStartXfer+0x2f2>
 8006564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006568:	3301      	adds	r3, #1
 800656a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800656e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006572:	b29b      	uxth	r3, r3
 8006574:	029b      	lsls	r3, r3, #10
 8006576:	b29a      	uxth	r2, r3
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e059      	b.n	800663a <USB_EPStartXfer+0x3be>
 8006586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <USB_EPStartXfer+0x32a>
 800659c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065a0:	3b01      	subs	r3, #1
 80065a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	029b      	lsls	r3, r3, #10
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	e038      	b.n	800663a <USB_EPStartXfer+0x3be>
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d130      	bne.n	800663a <USB_EPStartXfer+0x3be>
 80065d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4619      	mov	r1, r3
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80065f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065f6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	440a      	add	r2, r1
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	011a      	lsls	r2, r3, #4
 800660e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006612:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4413      	add	r3, r2
 800661a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662c:	b29a      	uxth	r2, r3
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800663a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	895b      	ldrh	r3, [r3, #10]
 8006646:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800664a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6959      	ldr	r1, [r3, #20]
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	b29b      	uxth	r3, r3
 800665c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006660:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006664:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006668:	6800      	ldr	r0, [r0, #0]
 800666a:	f001 fd68 	bl	800813e <USB_WritePMA>
            ep->xfer_buff += len;
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667e:	441a      	add	r2, r3
 8006680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800668c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a1a      	ldr	r2, [r3, #32]
 8006698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d90f      	bls.n	80066c8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a1a      	ldr	r2, [r3, #32]
 80066b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b8:	1ad2      	subs	r2, r2, r3
 80066ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	621a      	str	r2, [r3, #32]
 80066c6:	e00e      	b.n	80066e6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80066c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80066d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 809a 	bne.w	800682c <USB_EPStartXfer+0x5b0>
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006704:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006708:	6812      	ldr	r2, [r2, #0]
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671a:	b29b      	uxth	r3, r3
 800671c:	4619      	mov	r1, r3
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006726:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800672a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	440a      	add	r2, r1
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	011a      	lsls	r2, r3, #4
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4413      	add	r3, r2
 800674e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d122      	bne.n	80067aa <USB_EPStartXfer+0x52e>
 8006764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006768:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006776:	b29a      	uxth	r2, r3
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e083      	b.n	80068b2 <USB_EPStartXfer+0x636>
 80067aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ae:	2b3e      	cmp	r3, #62	; 0x3e
 80067b0:	d81b      	bhi.n	80067ea <USB_EPStartXfer+0x56e>
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80067bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <USB_EPStartXfer+0x556>
 80067c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067cc:	3301      	adds	r3, #1
 80067ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80067d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	801a      	strh	r2, [r3, #0]
 80067e8:	e063      	b.n	80068b2 <USB_EPStartXfer+0x636>
 80067ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80067f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <USB_EPStartXfer+0x58e>
 8006800:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006804:	3b01      	subs	r3, #1
 8006806:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800680a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800680e:	b29b      	uxth	r3, r3
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	b29b      	uxth	r3, r3
 8006814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681c:	b29a      	uxth	r2, r3
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e042      	b.n	80068b2 <USB_EPStartXfer+0x636>
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d13a      	bne.n	80068b2 <USB_EPStartXfer+0x636>
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006844:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006848:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	4619      	mov	r1, r3
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800686a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800686e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	440a      	add	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4413      	add	r3, r2
 8006892:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	891b      	ldrh	r3, [r3, #8]
 80068be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6959      	ldr	r1, [r3, #20]
 80068ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068e0:	6800      	ldr	r0, [r0, #0]
 80068e2:	f001 fc2c 	bl	800813e <USB_WritePMA>
 80068e6:	f000 be0e 	b.w	8007506 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d16d      	bne.n	80069d6 <USB_EPStartXfer+0x75a>
 80068fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	64bb      	str	r3, [r7, #72]	; 0x48
 8006906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006914:	b29b      	uxth	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800691a:	4413      	add	r3, r2
 800691c:	64bb      	str	r3, [r7, #72]	; 0x48
 800691e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	011a      	lsls	r2, r3, #4
 800692c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692e:	4413      	add	r3, r2
 8006930:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006934:	647b      	str	r3, [r7, #68]	; 0x44
 8006936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d112      	bne.n	8006964 <USB_EPStartXfer+0x6e8>
 800693e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006948:	b29a      	uxth	r2, r3
 800694a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	e063      	b.n	8006a2c <USB_EPStartXfer+0x7b0>
 8006964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006968:	2b3e      	cmp	r3, #62	; 0x3e
 800696a:	d817      	bhi.n	800699c <USB_EPStartXfer+0x720>
 800696c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <USB_EPStartXfer+0x710>
 8006982:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006986:	3301      	adds	r3, #1
 8006988:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800698c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006990:	b29b      	uxth	r3, r3
 8006992:	029b      	lsls	r3, r3, #10
 8006994:	b29a      	uxth	r2, r3
 8006996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	e047      	b.n	8006a2c <USB_EPStartXfer+0x7b0>
 800699c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <USB_EPStartXfer+0x740>
 80069b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80069b6:	3b01      	subs	r3, #1
 80069b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80069bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	029b      	lsls	r3, r3, #10
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e02a      	b.n	8006a2c <USB_EPStartXfer+0x7b0>
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d122      	bne.n	8006a2c <USB_EPStartXfer+0x7b0>
 80069e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	653b      	str	r3, [r7, #80]	; 0x50
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a06:	4413      	add	r3, r2
 8006a08:	653b      	str	r3, [r7, #80]	; 0x50
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	011a      	lsls	r2, r3, #4
 8006a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	891b      	ldrh	r3, [r3, #8]
 8006a38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6959      	ldr	r1, [r3, #20]
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a52:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a56:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a5a:	6800      	ldr	r0, [r0, #0]
 8006a5c:	f001 fb6f 	bl	800813e <USB_WritePMA>
            ep->xfer_buff += len;
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a70:	441a      	add	r2, r3
 8006a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d90f      	bls.n	8006aba <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6a1a      	ldr	r2, [r3, #32]
 8006aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	621a      	str	r2, [r3, #32]
 8006ab8:	e00e      	b.n	8006ad8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d16d      	bne.n	8006bd0 <USB_EPStartXfer+0x954>
 8006af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	4413      	add	r3, r2
 8006b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	011a      	lsls	r2, r3, #4
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d112      	bne.n	8006b5e <USB_EPStartXfer+0x8e2>
 8006b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	801a      	strh	r2, [r3, #0]
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e05d      	b.n	8006c1a <USB_EPStartXfer+0x99e>
 8006b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b62:	2b3e      	cmp	r3, #62	; 0x3e
 8006b64:	d817      	bhi.n	8006b96 <USB_EPStartXfer+0x91a>
 8006b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <USB_EPStartXfer+0x90a>
 8006b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b80:	3301      	adds	r3, #1
 8006b82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	029b      	lsls	r3, r3, #10
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	801a      	strh	r2, [r3, #0]
 8006b94:	e041      	b.n	8006c1a <USB_EPStartXfer+0x99e>
 8006b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <USB_EPStartXfer+0x93a>
 8006bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	029b      	lsls	r3, r3, #10
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	e024      	b.n	8006c1a <USB_EPStartXfer+0x99e>
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d11c      	bne.n	8006c1a <USB_EPStartXfer+0x99e>
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf4:	4413      	add	r3, r2
 8006bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	895b      	ldrh	r3, [r3, #10]
 8006c26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6959      	ldr	r1, [r3, #20]
 8006c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c40:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c44:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c48:	6800      	ldr	r0, [r0, #0]
 8006c4a:	f001 fa78 	bl	800813e <USB_WritePMA>
 8006c4e:	f000 bc5a 	b.w	8007506 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c88:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cde:	4413      	add	r3, r2
 8006ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	011a      	lsls	r2, r3, #4
 8006cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	891b      	ldrh	r3, [r3, #8]
 8006d10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6959      	ldr	r1, [r3, #20]
 8006d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d2a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d2e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d32:	6800      	ldr	r0, [r0, #0]
 8006d34:	f001 fa03 	bl	800813e <USB_WritePMA>
 8006d38:	e3e5      	b.n	8007506 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d60:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 81bc 	beq.w	8007154 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d16d      	bne.n	8006ed6 <USB_EPStartXfer+0xc5a>
 8006dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1a:	4413      	add	r3, r2
 8006e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	011a      	lsls	r2, r3, #4
 8006e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2e:	4413      	add	r3, r2
 8006e30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e34:	677b      	str	r3, [r7, #116]	; 0x74
 8006e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d112      	bne.n	8006e64 <USB_EPStartXfer+0xbe8>
 8006e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	e060      	b.n	8006f26 <USB_EPStartXfer+0xcaa>
 8006e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e68:	2b3e      	cmp	r3, #62	; 0x3e
 8006e6a:	d817      	bhi.n	8006e9c <USB_EPStartXfer+0xc20>
 8006e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e70:	085b      	lsrs	r3, r3, #1
 8006e72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <USB_EPStartXfer+0xc10>
 8006e82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e86:	3301      	adds	r3, #1
 8006e88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	029b      	lsls	r3, r3, #10
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e044      	b.n	8006f26 <USB_EPStartXfer+0xcaa>
 8006e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d104      	bne.n	8006ebc <USB_EPStartXfer+0xc40>
 8006eb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ebc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	029b      	lsls	r3, r3, #10
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e027      	b.n	8006f26 <USB_EPStartXfer+0xcaa>
 8006ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d11f      	bne.n	8006f26 <USB_EPStartXfer+0xcaa>
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006efc:	4413      	add	r3, r2
 8006efe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	011a      	lsls	r2, r3, #4
 8006f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f14:	4413      	add	r3, r2
 8006f16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	895b      	ldrh	r3, [r3, #10]
 8006f32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6959      	ldr	r1, [r3, #20]
 8006f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f54:	6800      	ldr	r0, [r0, #0]
 8006f56:	f001 f8f2 	bl	800813e <USB_WritePMA>
          ep->xfer_buff += len;
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6a:	441a      	add	r2, r3
 8006f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d90f      	bls.n	8006fb4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a1a      	ldr	r2, [r3, #32]
 8006fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa4:	1ad2      	subs	r2, r2, r3
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	621a      	str	r2, [r3, #32]
 8006fb2:	e00e      	b.n	8006fd2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8295 	beq.w	8007506 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d16d      	bne.n	80070c8 <USB_EPStartXfer+0xe4c>
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800700c:	4413      	add	r3, r2
 800700e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	011a      	lsls	r2, r3, #4
 800701e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007020:	4413      	add	r3, r2
 8007022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007026:	667b      	str	r3, [r7, #100]	; 0x64
 8007028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <USB_EPStartXfer+0xdda>
 8007030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800703a:	b29a      	uxth	r2, r3
 800703c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703e:	801a      	strh	r2, [r3, #0]
 8007040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704e:	b29a      	uxth	r2, r3
 8007050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	e063      	b.n	800711e <USB_EPStartXfer+0xea2>
 8007056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705a:	2b3e      	cmp	r3, #62	; 0x3e
 800705c:	d817      	bhi.n	800708e <USB_EPStartXfer+0xe12>
 800705e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <USB_EPStartXfer+0xe02>
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007078:	3301      	adds	r3, #1
 800707a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007082:	b29b      	uxth	r3, r3
 8007084:	029b      	lsls	r3, r3, #10
 8007086:	b29a      	uxth	r2, r3
 8007088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	e047      	b.n	800711e <USB_EPStartXfer+0xea2>
 800708e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <USB_EPStartXfer+0xe32>
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a8:	3b01      	subs	r3, #1
 80070aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e02a      	b.n	800711e <USB_EPStartXfer+0xea2>
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d122      	bne.n	800711e <USB_EPStartXfer+0xea2>
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	673b      	str	r3, [r7, #112]	; 0x70
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070f8:	4413      	add	r3, r2
 80070fa:	673b      	str	r3, [r7, #112]	; 0x70
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	011a      	lsls	r2, r3, #4
 800710a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800710c:	4413      	add	r3, r2
 800710e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007118:	b29a      	uxth	r2, r3
 800711a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800711e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	891b      	ldrh	r3, [r3, #8]
 800712a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6959      	ldr	r1, [r3, #20]
 800713a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713e:	b29b      	uxth	r3, r3
 8007140:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007144:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007148:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f000 fff6 	bl	800813e <USB_WritePMA>
 8007152:	e1d8      	b.n	8007506 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d178      	bne.n	8007256 <USB_EPStartXfer+0xfda>
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007180:	b29b      	uxth	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007188:	4413      	add	r3, r2
 800718a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	011a      	lsls	r2, r3, #4
 800719c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071a0:	4413      	add	r3, r2
 80071a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d116      	bne.n	80071e0 <USB_EPStartXfer+0xf64>
 80071b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	e06b      	b.n	80072b8 <USB_EPStartXfer+0x103c>
 80071e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e4:	2b3e      	cmp	r3, #62	; 0x3e
 80071e6:	d818      	bhi.n	800721a <USB_EPStartXfer+0xf9e>
 80071e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80071f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <USB_EPStartXfer+0xf8c>
 80071fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007202:	3301      	adds	r3, #1
 8007204:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007208:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800720c:	b29b      	uxth	r3, r3
 800720e:	029b      	lsls	r3, r3, #10
 8007210:	b29a      	uxth	r2, r3
 8007212:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	e04e      	b.n	80072b8 <USB_EPStartXfer+0x103c>
 800721a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <USB_EPStartXfer+0xfbe>
 8007230:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007234:	3b01      	subs	r3, #1
 8007236:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800723a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800723e:	b29b      	uxth	r3, r3
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	b29b      	uxth	r3, r3
 8007244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724c:	b29a      	uxth	r2, r3
 800724e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	e030      	b.n	80072b8 <USB_EPStartXfer+0x103c>
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d128      	bne.n	80072b8 <USB_EPStartXfer+0x103c>
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800728a:	4413      	add	r3, r2
 800728c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	011a      	lsls	r2, r3, #4
 800729e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072a2:	4413      	add	r3, r2
 80072a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	891b      	ldrh	r3, [r3, #8]
 80072c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6959      	ldr	r1, [r3, #20]
 80072d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072de:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072e2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072e6:	6800      	ldr	r0, [r0, #0]
 80072e8:	f000 ff29 	bl	800813e <USB_WritePMA>
          ep->xfer_buff += len;
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695a      	ldr	r2, [r3, #20]
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	441a      	add	r2, r3
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800730a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90f      	bls.n	8007346 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	621a      	str	r2, [r3, #32]
 8007344:	e00e      	b.n	8007364 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2200      	movs	r2, #0
 8007362:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80cc 	beq.w	8007506 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800736e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800737c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d178      	bne.n	800747e <USB_EPStartXfer+0x1202>
 800738c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	461a      	mov	r2, r3
 80073ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073b0:	4413      	add	r3, r2
 80073b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	011a      	lsls	r2, r3, #4
 80073c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d116      	bne.n	8007408 <USB_EPStartXfer+0x118c>
 80073da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e064      	b.n	80074d2 <USB_EPStartXfer+0x1256>
 8007408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740c:	2b3e      	cmp	r3, #62	; 0x3e
 800740e:	d818      	bhi.n	8007442 <USB_EPStartXfer+0x11c6>
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800741a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <USB_EPStartXfer+0x11b4>
 8007426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800742a:	3301      	adds	r3, #1
 800742c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007434:	b29b      	uxth	r3, r3
 8007436:	029b      	lsls	r3, r3, #10
 8007438:	b29a      	uxth	r2, r3
 800743a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	e047      	b.n	80074d2 <USB_EPStartXfer+0x1256>
 8007442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800744c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <USB_EPStartXfer+0x11e6>
 8007458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800745c:	3b01      	subs	r3, #1
 800745e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007466:	b29b      	uxth	r3, r3
 8007468:	029b      	lsls	r3, r3, #10
 800746a:	b29b      	uxth	r3, r3
 800746c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007474:	b29a      	uxth	r2, r3
 8007476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	e029      	b.n	80074d2 <USB_EPStartXfer+0x1256>
 800747e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d121      	bne.n	80074d2 <USB_EPStartXfer+0x1256>
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749c:	b29b      	uxth	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074a4:	4413      	add	r3, r2
 80074a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	011a      	lsls	r2, r3, #4
 80074b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074bc:	4413      	add	r3, r2
 80074be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80074c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	895b      	ldrh	r3, [r3, #10]
 80074de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6959      	ldr	r1, [r3, #20]
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007500:	6800      	ldr	r0, [r0, #0]
 8007502:	f000 fe1c 	bl	800813e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007528:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800752c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007534:	8013      	strh	r3, [r2, #0]
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800753e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007542:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007546:	8812      	ldrh	r2, [r2, #0]
 8007548:	f082 0210 	eor.w	r2, r2, #16
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007556:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800755a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800755e:	8812      	ldrh	r2, [r2, #0]
 8007560:	f082 0220 	eor.w	r2, r2, #32
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]
 800759e:	f000 bc9f 	b.w	8007ee0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	7b1b      	ldrb	r3, [r3, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f040 80ae 	bne.w	8007710 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80075b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d917      	bls.n	8007600 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80075d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	699a      	ldr	r2, [r3, #24]
 80075ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f0:	1ad2      	subs	r2, r2, r3
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	619a      	str	r2, [r3, #24]
 80075fe:	e00e      	b.n	800761e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800761e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800762c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763a:	b29b      	uxth	r3, r3
 800763c:	461a      	mov	r2, r3
 800763e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007642:	4413      	add	r3, r2
 8007644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	011a      	lsls	r2, r3, #4
 8007656:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800765a:	4413      	add	r3, r2
 800765c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d116      	bne.n	800769a <USB_EPStartXfer+0x141e>
 800766c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007690:	b29a      	uxth	r2, r3
 8007692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	e3e8      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
 800769a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769e:	2b3e      	cmp	r3, #62	; 0x3e
 80076a0:	d818      	bhi.n	80076d4 <USB_EPStartXfer+0x1458>
 80076a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d004      	beq.n	80076c2 <USB_EPStartXfer+0x1446>
 80076b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076bc:	3301      	adds	r3, #1
 80076be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80076c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076d0:	801a      	strh	r2, [r3, #0]
 80076d2:	e3cb      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
 80076d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80076de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <USB_EPStartXfer+0x1478>
 80076ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076ee:	3b01      	subs	r3, #1
 80076f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80076f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	029b      	lsls	r3, r3, #10
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007706:	b29a      	uxth	r2, r3
 8007708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	e3ad      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	78db      	ldrb	r3, [r3, #3]
 800771c:	2b02      	cmp	r3, #2
 800771e:	f040 8200 	bne.w	8007b22 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f040 8091 	bne.w	8007856 <USB_EPStartXfer+0x15da>
 8007734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007750:	b29b      	uxth	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007758:	4413      	add	r3, r2
 800775a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800775e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	011a      	lsls	r2, r3, #4
 800776c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007770:	4413      	add	r3, r2
 8007772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800777a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d116      	bne.n	80077b8 <USB_EPStartXfer+0x153c>
 800778a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007796:	b29a      	uxth	r2, r3
 8007798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	e083      	b.n	80078c0 <USB_EPStartXfer+0x1644>
 80077b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b3e      	cmp	r3, #62	; 0x3e
 80077c6:	d820      	bhi.n	800780a <USB_EPStartXfer+0x158e>
 80077c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <USB_EPStartXfer+0x157c>
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	3301      	adds	r3, #1
 80077f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	029b      	lsls	r3, r3, #10
 8007800:	b29a      	uxth	r2, r3
 8007802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e05a      	b.n	80078c0 <USB_EPStartXfer+0x1644>
 800780a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800781c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2b00      	cmp	r3, #0
 800782e:	d104      	bne.n	800783a <USB_EPStartXfer+0x15be>
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007834:	3b01      	subs	r3, #1
 8007836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783e:	b29b      	uxth	r3, r3
 8007840:	029b      	lsls	r3, r3, #10
 8007842:	b29b      	uxth	r3, r3
 8007844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e034      	b.n	80078c0 <USB_EPStartXfer+0x1644>
 8007856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d12c      	bne.n	80078c0 <USB_EPStartXfer+0x1644>
 8007866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007882:	b29b      	uxth	r3, r3
 8007884:	461a      	mov	r2, r3
 8007886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800788a:	4413      	add	r3, r2
 800788c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	011a      	lsls	r2, r3, #4
 800789e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078a2:	4413      	add	r3, r2
 80078a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 8091 	bne.w	8007a02 <USB_EPStartXfer+0x1786>
 80078e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007904:	4413      	add	r3, r2
 8007906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800790a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	011a      	lsls	r2, r3, #4
 8007918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800791c:	4413      	add	r3, r2
 800791e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d116      	bne.n	8007964 <USB_EPStartXfer+0x16e8>
 8007936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800795a:	b29a      	uxth	r2, r3
 800795c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	e07c      	b.n	8007a5e <USB_EPStartXfer+0x17e2>
 8007964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b3e      	cmp	r3, #62	; 0x3e
 8007972:	d820      	bhi.n	80079b6 <USB_EPStartXfer+0x173a>
 8007974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <USB_EPStartXfer+0x1728>
 800799a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800799e:	3301      	adds	r3, #1
 80079a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	029b      	lsls	r3, r3, #10
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b2:	801a      	strh	r2, [r3, #0]
 80079b4:	e053      	b.n	8007a5e <USB_EPStartXfer+0x17e2>
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <USB_EPStartXfer+0x176a>
 80079dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079e0:	3b01      	subs	r3, #1
 80079e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e02d      	b.n	8007a5e <USB_EPStartXfer+0x17e2>
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d125      	bne.n	8007a5e <USB_EPStartXfer+0x17e2>
 8007a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a28:	4413      	add	r3, r2
 8007a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	011a      	lsls	r2, r3, #4
 8007a3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a40:	4413      	add	r3, r2
 8007a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a5c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 81fe 	beq.w	8007e6c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a90:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <USB_EPStartXfer+0x182c>
 8007a9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10d      	bne.n	8007ac4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007aa8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 81db 	bne.w	8007e6c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ab6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f040 81d4 	bne.w	8007e6c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aea:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	441a      	add	r2, r3
 8007b08:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	8013      	strh	r3, [r2, #0]
 8007b20:	e1a4      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	78db      	ldrb	r3, [r3, #3]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	f040 819a 	bne.w	8007e68 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d917      	bls.n	8007b80 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b70:	1ad2      	subs	r2, r2, r3
 8007b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	619a      	str	r2, [r3, #24]
 8007b7e:	e00e      	b.n	8007b9e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	785b      	ldrb	r3, [r3, #1]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d178      	bne.n	8007ca0 <USB_EPStartXfer+0x1a24>
 8007bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	011a      	lsls	r2, r3, #4
 8007be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bea:	4413      	add	r3, r2
 8007bec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d116      	bne.n	8007c2a <USB_EPStartXfer+0x19ae>
 8007bfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	e06b      	b.n	8007d02 <USB_EPStartXfer+0x1a86>
 8007c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c30:	d818      	bhi.n	8007c64 <USB_EPStartXfer+0x19e8>
 8007c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c36:	085b      	lsrs	r3, r3, #1
 8007c38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d004      	beq.n	8007c52 <USB_EPStartXfer+0x19d6>
 8007c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	029b      	lsls	r3, r3, #10
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	e04e      	b.n	8007d02 <USB_EPStartXfer+0x1a86>
 8007c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c68:	095b      	lsrs	r3, r3, #5
 8007c6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c72:	f003 031f 	and.w	r3, r3, #31
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d104      	bne.n	8007c84 <USB_EPStartXfer+0x1a08>
 8007c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	029b      	lsls	r3, r3, #10
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c9c:	801a      	strh	r2, [r3, #0]
 8007c9e:	e030      	b.n	8007d02 <USB_EPStartXfer+0x1a86>
 8007ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d128      	bne.n	8007d02 <USB_EPStartXfer+0x1a86>
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	011a      	lsls	r2, r3, #4
 8007ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cec:	4413      	add	r3, r2
 8007cee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d178      	bne.n	8007e12 <USB_EPStartXfer+0x1b96>
 8007d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d44:	4413      	add	r3, r2
 8007d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	011a      	lsls	r2, r3, #4
 8007d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d116      	bne.n	8007d9c <USB_EPStartXfer+0x1b20>
 8007d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	e067      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
 8007d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da0:	2b3e      	cmp	r3, #62	; 0x3e
 8007da2:	d818      	bhi.n	8007dd6 <USB_EPStartXfer+0x1b5a>
 8007da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da8:	085b      	lsrs	r3, r3, #1
 8007daa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <USB_EPStartXfer+0x1b48>
 8007dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007dc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	029b      	lsls	r3, r3, #10
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	e04a      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
 8007dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <USB_EPStartXfer+0x1b7a>
 8007dec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007df0:	3b01      	subs	r3, #1
 8007df2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	029b      	lsls	r3, r3, #10
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	e02c      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
 8007e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d124      	bne.n	8007e6c <USB_EPStartXfer+0x1bf0>
 8007e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e38:	4413      	add	r3, r2
 8007e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	011a      	lsls	r2, r3, #4
 8007e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e50:	4413      	add	r3, r2
 8007e52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	e001      	b.n	8007e6c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e03a      	b.n	8007ee2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007e96:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007e9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007ea2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ea6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007eaa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	441a      	add	r2, r3
 8007ec8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d020      	beq.n	8007f40 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f14:	81bb      	strh	r3, [r7, #12]
 8007f16:	89bb      	ldrh	r3, [r7, #12]
 8007f18:	f083 0310 	eor.w	r3, r3, #16
 8007f1c:	81bb      	strh	r3, [r7, #12]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	89bb      	ldrh	r3, [r7, #12]
 8007f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	8013      	strh	r3, [r2, #0]
 8007f3e:	e01f      	b.n	8007f80 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f56:	81fb      	strh	r3, [r7, #14]
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f5e:	81fb      	strh	r3, [r7, #14]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	441a      	add	r2, r3
 8007f6a:	89fb      	ldrh	r3, [r7, #14]
 8007f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr

08007f8c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	7b1b      	ldrb	r3, [r3, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 809d 	bne.w	80080da <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d04c      	beq.n	8008042 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	823b      	strh	r3, [r7, #16]
 8007fb6:	8a3b      	ldrh	r3, [r7, #16]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01b      	beq.n	8007ff8 <USB_EPClearStall+0x6c>
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd6:	81fb      	strh	r3, [r7, #14]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	89fb      	ldrh	r3, [r7, #14]
 8007fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	78db      	ldrb	r3, [r3, #3]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d06c      	beq.n	80080da <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008016:	81bb      	strh	r3, [r7, #12]
 8008018:	89bb      	ldrh	r3, [r7, #12]
 800801a:	f083 0320 	eor.w	r3, r3, #32
 800801e:	81bb      	strh	r3, [r7, #12]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	441a      	add	r2, r3
 800802a:	89bb      	ldrh	r3, [r7, #12]
 800802c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803c:	b29b      	uxth	r3, r3
 800803e:	8013      	strh	r3, [r2, #0]
 8008040:	e04b      	b.n	80080da <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	82fb      	strh	r3, [r7, #22]
 8008050:	8afb      	ldrh	r3, [r7, #22]
 8008052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d01b      	beq.n	8008092 <USB_EPClearStall+0x106>
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29b      	uxth	r3, r3
 8008068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008070:	82bb      	strh	r3, [r7, #20]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	441a      	add	r2, r3
 800807c:	8abb      	ldrh	r3, [r7, #20]
 800807e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800808a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808e:	b29b      	uxth	r3, r3
 8008090:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a8:	827b      	strh	r3, [r7, #18]
 80080aa:	8a7b      	ldrh	r3, [r7, #18]
 80080ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080b0:	827b      	strh	r3, [r7, #18]
 80080b2:	8a7b      	ldrh	r3, [r7, #18]
 80080b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080b8:	827b      	strh	r3, [r7, #18]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	441a      	add	r2, r3
 80080c4:	8a7b      	ldrh	r3, [r7, #18]
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr

080080e6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2280      	movs	r2, #128	; 0x80
 80080fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr

0800810c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr

08008120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800812e:	b29b      	uxth	r3, r3
 8008130:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr

0800813e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800813e:	b480      	push	{r7}
 8008140:	b08d      	sub	sp, #52	; 0x34
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	4611      	mov	r1, r2
 800814a:	461a      	mov	r2, r3
 800814c:	460b      	mov	r3, r1
 800814e:	80fb      	strh	r3, [r7, #6]
 8008150:	4613      	mov	r3, r2
 8008152:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008154:	88bb      	ldrh	r3, [r7, #4]
 8008156:	3301      	adds	r3, #1
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	005a      	lsls	r2, r3, #1
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008176:	e01e      	b.n	80081b6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	3301      	adds	r3, #1
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	b29b      	uxth	r3, r3
 800818e:	461a      	mov	r2, r3
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	b29a      	uxth	r2, r3
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	3302      	adds	r3, #2
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	3302      	adds	r3, #2
 80081a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	3301      	adds	r3, #1
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	3b01      	subs	r3, #1
 80081b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1dd      	bne.n	8008178 <USB_WritePMA+0x3a>
  }
}
 80081bc:	bf00      	nop
 80081be:	bf00      	nop
 80081c0:	3734      	adds	r7, #52	; 0x34
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr

080081c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b08b      	sub	sp, #44	; 0x2c
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4611      	mov	r1, r2
 80081d4:	461a      	mov	r2, r3
 80081d6:	460b      	mov	r3, r1
 80081d8:	80fb      	strh	r3, [r7, #6]
 80081da:	4613      	mov	r3, r2
 80081dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081de:	88bb      	ldrh	r3, [r7, #4]
 80081e0:	085b      	lsrs	r3, r3, #1
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081ee:	88fb      	ldrh	r3, [r7, #6]
 80081f0:	005a      	lsls	r2, r3, #1
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081fa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008200:	e01b      	b.n	800823a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	3302      	adds	r3, #2
 800820e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	b2da      	uxtb	r2, r3
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	3301      	adds	r3, #1
 800821c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	b2da      	uxtb	r2, r3
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	3301      	adds	r3, #1
 800822c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	3302      	adds	r3, #2
 8008232:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	3b01      	subs	r3, #1
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e0      	bne.n	8008202 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008240:	88bb      	ldrh	r3, [r7, #4]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	b29b      	uxth	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d007      	beq.n	800825c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	b2da      	uxtb	r2, r3
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	701a      	strb	r2, [r3, #0]
  }
}
 800825c:	bf00      	nop
 800825e:	372c      	adds	r7, #44	; 0x2c
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr

08008266 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7c1b      	ldrb	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d115      	bne.n	80082aa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800827e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008282:	2202      	movs	r2, #2
 8008284:	2181      	movs	r1, #129	; 0x81
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fec9 	bl	800a01e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008296:	2202      	movs	r2, #2
 8008298:	2101      	movs	r1, #1
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 febf 	bl	800a01e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80082a8:	e012      	b.n	80082d0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082aa:	2340      	movs	r3, #64	; 0x40
 80082ac:	2202      	movs	r2, #2
 80082ae:	2181      	movs	r1, #129	; 0x81
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 feb4 	bl	800a01e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	2202      	movs	r2, #2
 80082c0:	2101      	movs	r1, #1
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 feab 	bl	800a01e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082d0:	2308      	movs	r3, #8
 80082d2:	2203      	movs	r2, #3
 80082d4:	2182      	movs	r1, #130	; 0x82
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fea1 	bl	800a01e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80082e2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082e6:	f001 ffc1 	bl	800a26c <USBD_static_malloc>
 80082ea:	4602      	mov	r2, r0
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
 8008300:	e026      	b.n	8008350 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008308:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7c1b      	ldrb	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008336:	2101      	movs	r1, #1
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 ff61 	bl	800a200 <USBD_LL_PrepareReceive>
 800833e:	e007      	b.n	8008350 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008346:	2340      	movs	r3, #64	; 0x40
 8008348:	2101      	movs	r1, #1
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 ff58 	bl	800a200 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800836a:	2181      	movs	r1, #129	; 0x81
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fe7c 	bl	800a06a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008378:	2101      	movs	r1, #1
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fe75 	bl	800a06a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008388:	2182      	movs	r1, #130	; 0x82
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fe6d 	bl	800a06a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00e      	beq.n	80083be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 ff67 	bl	800a284 <USBD_static_free>
    pdev->pClassData = NULL;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80083d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d039      	beq.n	8008466 <USBD_CDC_Setup+0x9e>
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d17f      	bne.n	80084f6 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d029      	beq.n	8008452 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b25b      	sxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	da11      	bge.n	800842c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008414:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	88d2      	ldrh	r2, [r2, #6]
 800841a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800841c:	6939      	ldr	r1, [r7, #16]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	88db      	ldrh	r3, [r3, #6]
 8008422:	461a      	mov	r2, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 f994 	bl	8009752 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800842a:	e06b      	b.n	8008504 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	785a      	ldrb	r2, [r3, #1]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	88db      	ldrh	r3, [r3, #6]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008442:	6939      	ldr	r1, [r7, #16]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	88db      	ldrh	r3, [r3, #6]
 8008448:	461a      	mov	r2, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 f9af 	bl	80097ae <USBD_CtlPrepareRx>
    break;
 8008450:	e058      	b.n	8008504 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	7850      	ldrb	r0, [r2, #1]
 800845e:	2200      	movs	r2, #0
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	4798      	blx	r3
    break;
 8008464:	e04e      	b.n	8008504 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b0b      	cmp	r3, #11
 800846c:	d02e      	beq.n	80084cc <USBD_CDC_Setup+0x104>
 800846e:	2b0b      	cmp	r3, #11
 8008470:	dc38      	bgt.n	80084e4 <USBD_CDC_Setup+0x11c>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <USBD_CDC_Setup+0xb4>
 8008476:	2b0a      	cmp	r3, #10
 8008478:	d014      	beq.n	80084a4 <USBD_CDC_Setup+0xdc>
 800847a:	e033      	b.n	80084e4 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008482:	2b03      	cmp	r3, #3
 8008484:	d107      	bne.n	8008496 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008486:	f107 030c 	add.w	r3, r7, #12
 800848a:	2202      	movs	r2, #2
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 f95f 	bl	8009752 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008494:	e02e      	b.n	80084f4 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f8f0 	bl	800967e <USBD_CtlError>
			  ret = USBD_FAIL;
 800849e:	2302      	movs	r3, #2
 80084a0:	75fb      	strb	r3, [r7, #23]
      break;
 80084a2:	e027      	b.n	80084f4 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d107      	bne.n	80084be <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80084ae:	f107 030f 	add.w	r3, r7, #15
 80084b2:	2201      	movs	r2, #1
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f94b 	bl	8009752 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80084bc:	e01a      	b.n	80084f4 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f8dc 	bl	800967e <USBD_CtlError>
			  ret = USBD_FAIL;
 80084c6:	2302      	movs	r3, #2
 80084c8:	75fb      	strb	r3, [r7, #23]
      break;
 80084ca:	e013      	b.n	80084f4 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d00d      	beq.n	80084f2 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f8d0 	bl	800967e <USBD_CtlError>
			  ret = USBD_FAIL;
 80084de:	2302      	movs	r3, #2
 80084e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80084e2:	e006      	b.n	80084f2 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 f8c9 	bl	800967e <USBD_CtlError>
      ret = USBD_FAIL;
 80084ec:	2302      	movs	r3, #2
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e000      	b.n	80084f4 <USBD_CDC_Setup+0x12c>
      break;
 80084f2:	bf00      	nop
    }
    break;
 80084f4:	e006      	b.n	8008504 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 f8c0 	bl	800967e <USBD_CtlError>
    ret = USBD_FAIL;
 80084fe:	2302      	movs	r3, #2
 8008500:	75fb      	strb	r3, [r7, #23]
    break;
 8008502:	bf00      	nop
  }

  return ret;
 8008504:	7dfb      	ldrb	r3, [r7, #23]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008520:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008528:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008530:	2b00      	cmp	r3, #0
 8008532:	d03a      	beq.n	80085aa <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	331c      	adds	r3, #28
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d029      	beq.n	800859e <USBD_CDC_DataIn+0x90>
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	440b      	add	r3, r1
 8008558:	331c      	adds	r3, #28
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	78f9      	ldrb	r1, [r7, #3]
 800855e:	68b8      	ldr	r0, [r7, #8]
 8008560:	460b      	mov	r3, r1
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4403      	add	r3, r0
 800856a:	3338      	adds	r3, #56	; 0x38
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d110      	bne.n	800859e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	440b      	add	r3, r1
 800858a:	331c      	adds	r3, #28
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008590:	78f9      	ldrb	r1, [r7, #3]
 8008592:	2300      	movs	r3, #0
 8008594:	2200      	movs	r2, #0
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fe0f 	bl	800a1ba <USBD_LL_Transmit>
 800859c:	e003      	b.n	80085a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	e000      	b.n	80085ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80085aa:	2302      	movs	r3, #2
  }
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 fe3a 	bl	800a246 <USBD_LL_GetRxDataSize>
 80085d2:	4602      	mov	r2, r0
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00d      	beq.n	8008600 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80085f8:	4611      	mov	r1, r2
 80085fa:	4798      	blx	r3

    return USBD_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	e000      	b.n	8008602 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008600:	2302      	movs	r3, #2
  }
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008618:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008620:	2b00      	cmp	r3, #0
 8008622:	d015      	beq.n	8008650 <USBD_CDC_EP0_RxReady+0x46>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800862a:	2bff      	cmp	r3, #255	; 0xff
 800862c:	d010      	beq.n	8008650 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800863c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008644:	b292      	uxth	r2, r2
 8008646:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	22ff      	movs	r2, #255	; 0xff
 800864c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2243      	movs	r2, #67	; 0x43
 8008668:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800866a:	4b03      	ldr	r3, [pc, #12]	; (8008678 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	2000035c 	.word	0x2000035c

0800867c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2243      	movs	r2, #67	; 0x43
 8008688:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800868a:	4b03      	ldr	r3, [pc, #12]	; (8008698 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	20000318 	.word	0x20000318

0800869c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2243      	movs	r2, #67	; 0x43
 80086a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086aa:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	200003a0 	.word	0x200003a0

080086bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	220a      	movs	r2, #10
 80086c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80086ca:	4b03      	ldr	r3, [pc, #12]	; (80086d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	200002d4 	.word	0x200002d4

080086dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80086e6:	2302      	movs	r3, #2
 80086e8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	4613      	mov	r3, r2
 8008714:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800871c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008726:	88fa      	ldrh	r2, [r7, #6]
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr

0800873a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800874a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800876e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01c      	beq.n	80087b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008780:	2b00      	cmp	r3, #0
 8008782:	d115      	bne.n	80087b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	2181      	movs	r1, #129	; 0x81
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 fd07 	bl	800a1ba <USBD_LL_Transmit>

      return USBD_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e002      	b.n	80087b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80087b4:	2302      	movs	r3, #2
  }
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d017      	beq.n	8008808 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7c1b      	ldrb	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ea:	2101      	movs	r1, #1
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fd07 	bl	800a200 <USBD_LL_PrepareReceive>
 80087f2:	e007      	b.n	8008804 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087fa:	2340      	movs	r3, #64	; 0x40
 80087fc:	2101      	movs	r1, #1
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 fcfe 	bl	800a200 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	e000      	b.n	800880a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008808:	2302      	movs	r3, #2
  }
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	4613      	mov	r3, r2
 800881e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008826:	2302      	movs	r3, #2
 8008828:	e01a      	b.n	8008860 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	79fa      	ldrb	r2, [r7, #7]
 8008856:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f001 fb6b 	bl	8009f34 <USBD_LL_Init>

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d006      	beq.n	800888a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
 8008888:	e001      	b.n	800888e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr

0800889a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fba0 	bl	8009fe8 <USBD_LL_Start>

  return USBD_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr

080088c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80088d2:	2302      	movs	r3, #2
 80088d4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00c      	beq.n	80088fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	4611      	mov	r1, r2
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	4611      	mov	r1, r2
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fe62 	bl	8009606 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	2b02      	cmp	r3, #2
 8008964:	d016      	beq.n	8008994 <USBD_LL_SetupStage+0x6a>
 8008966:	2b02      	cmp	r3, #2
 8008968:	d81c      	bhi.n	80089a4 <USBD_LL_SetupStage+0x7a>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <USBD_LL_SetupStage+0x4a>
 800896e:	2b01      	cmp	r3, #1
 8008970:	d008      	beq.n	8008984 <USBD_LL_SetupStage+0x5a>
 8008972:	e017      	b.n	80089a4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f9c5 	bl	8008d0c <USBD_StdDevReq>
    break;
 8008982:	e01a      	b.n	80089ba <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fa27 	bl	8008de0 <USBD_StdItfReq>
    break;
 8008992:	e012      	b.n	80089ba <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fa67 	bl	8008e70 <USBD_StdEPReq>
    break;
 80089a2:	e00a      	b.n	80089ba <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80089aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fb78 	bl	800a0a8 <USBD_LL_StallEP>
    break;
 80089b8:	bf00      	nop
  }

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	460b      	mov	r3, r1
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80089d2:	7afb      	ldrb	r3, [r7, #11]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d14b      	bne.n	8008a70 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80089de:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d134      	bne.n	8008a54 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d919      	bls.n	8008a2a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d203      	bcs.n	8008a18 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	e002      	b.n	8008a1e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fee1 	bl	80097ea <USBD_CtlContinueRx>
 8008a28:	e038      	b.n	8008a9c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d105      	bne.n	8008a4c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fede 	bl	800980e <USBD_CtlSendStatus>
 8008a52:	e023      	b.n	8008a9c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	d11e      	bne.n	8008a9c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008a66:	2100      	movs	r1, #0
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f001 fb1d 	bl	800a0a8 <USBD_LL_StallEP>
 8008a6e:	e015      	b.n	8008a9c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00d      	beq.n	8008a98 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d108      	bne.n	8008a98 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	7afa      	ldrb	r2, [r7, #11]
 8008a90:	4611      	mov	r1, r2
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	4798      	blx	r3
 8008a96:	e001      	b.n	8008a9c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e000      	b.n	8008a9e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d17f      	bne.n	8008bba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3314      	adds	r3, #20
 8008abe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d15c      	bne.n	8008b84 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d915      	bls.n	8008b02 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	461a      	mov	r2, r3
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fe4b 	bl	800978a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	2100      	movs	r1, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f001 fb80 	bl	800a200 <USBD_LL_PrepareReceive>
 8008b00:	e04e      	b.n	8008ba0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	6912      	ldr	r2, [r2, #16]
 8008b0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b0e:	fb01 f202 	mul.w	r2, r1, r2
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11c      	bne.n	8008b52 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d316      	bcc.n	8008b52 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d20f      	bcs.n	8008b52 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b32:	2200      	movs	r2, #0
 8008b34:	2100      	movs	r1, #0
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fe27 	bl	800978a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008b44:	2300      	movs	r3, #0
 8008b46:	2200      	movs	r2, #0
 8008b48:	2100      	movs	r1, #0
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f001 fb58 	bl	800a200 <USBD_LL_PrepareReceive>
 8008b50:	e026      	b.n	8008ba0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d105      	bne.n	8008b74 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b74:	2180      	movs	r1, #128	; 0x80
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f001 fa96 	bl	800a0a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 fe59 	bl	8009834 <USBD_CtlReceiveStatus>
 8008b82:	e00d      	b.n	8008ba0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d004      	beq.n	8008b98 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b98:	2180      	movs	r1, #128	; 0x80
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f001 fa84 	bl	800a0a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d11d      	bne.n	8008be6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f7ff fe81 	bl	80088b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008bb8:	e015      	b.n	8008be6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00d      	beq.n	8008be2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d108      	bne.n	8008be2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	7afa      	ldrb	r2, [r7, #11]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	4798      	blx	r3
 8008be0:	e001      	b.n	8008be6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008be2:	2302      	movs	r3, #2
 8008be4:	e000      	b.n	8008be8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bf8:	2340      	movs	r3, #64	; 0x40
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 fa0d 	bl	800a01e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2240      	movs	r2, #64	; 0x40
 8008c10:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	2200      	movs	r2, #0
 8008c18:	2180      	movs	r1, #128	; 0x80
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 f9ff 	bl	800a01e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2240      	movs	r2, #64	; 0x40
 8008c2a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d009      	beq.n	8008c68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6852      	ldr	r2, [r2, #4]
 8008c60:	b2d2      	uxtb	r2, r2
 8008c62:	4611      	mov	r1, r2
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
  }

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	78fa      	ldrb	r2, [r7, #3]
 8008c82:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr

08008c90 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2204      	movs	r2, #4
 8008ca8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc80      	pop	{r7}
 8008cb6:	4770      	bx	lr

08008cb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr

08008cd8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d10b      	bne.n	8008d02 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d005      	beq.n	8008d02 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d005      	beq.n	8008d32 <USBD_StdDevReq+0x26>
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d84f      	bhi.n	8008dca <USBD_StdDevReq+0xbe>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <USBD_StdDevReq+0x36>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d14b      	bne.n	8008dca <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
    break;
 8008d40:	e048      	b.n	8008dd4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b09      	cmp	r3, #9
 8008d48:	d839      	bhi.n	8008dbe <USBD_StdDevReq+0xb2>
 8008d4a:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <USBD_StdDevReq+0x44>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008da1 	.word	0x08008da1
 8008d54:	08008db5 	.word	0x08008db5
 8008d58:	08008dbf 	.word	0x08008dbf
 8008d5c:	08008dab 	.word	0x08008dab
 8008d60:	08008dbf 	.word	0x08008dbf
 8008d64:	08008d83 	.word	0x08008d83
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008dbf 	.word	0x08008dbf
 8008d70:	08008d97 	.word	0x08008d97
 8008d74:	08008d8d 	.word	0x08008d8d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f9da 	bl	8009134 <USBD_GetDescriptor>
      break;
 8008d80:	e022      	b.n	8008dc8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 facf 	bl	8009328 <USBD_SetAddress>
      break;
 8008d8a:	e01d      	b.n	8008dc8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fb0e 	bl	80093b0 <USBD_SetConfig>
      break;
 8008d94:	e018      	b.n	8008dc8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb97 	bl	80094cc <USBD_GetConfig>
      break;
 8008d9e:	e013      	b.n	8008dc8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fbc7 	bl	8009536 <USBD_GetStatus>
      break;
 8008da8:	e00e      	b.n	8008dc8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fbf5 	bl	800959c <USBD_SetFeature>
      break;
 8008db2:	e009      	b.n	8008dc8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fc04 	bl	80095c4 <USBD_ClrFeature>
      break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc5c 	bl	800967e <USBD_CtlError>
      break;
 8008dc6:	bf00      	nop
    }
    break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fc56 	bl	800967e <USBD_CtlError>
    break;
 8008dd2:	bf00      	nop
  }

  return ret;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d005      	beq.n	8008e06 <USBD_StdItfReq+0x26>
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d82e      	bhi.n	8008e5c <USBD_StdItfReq+0x7c>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <USBD_StdItfReq+0x26>
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d12a      	bne.n	8008e5c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d81d      	bhi.n	8008e4e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	889b      	ldrh	r3, [r3, #4]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d813      	bhi.n	8008e44 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	88db      	ldrh	r3, [r3, #6]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d110      	bne.n	8008e58 <USBD_StdItfReq+0x78>
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10d      	bne.n	8008e58 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fce6 	bl	800980e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008e42:	e009      	b.n	8008e58 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fc19 	bl	800967e <USBD_CtlError>
      break;
 8008e4c:	e004      	b.n	8008e58 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fc14 	bl	800967e <USBD_CtlError>
      break;
 8008e56:	e000      	b.n	8008e5a <USBD_StdItfReq+0x7a>
      break;
 8008e58:	bf00      	nop
    }
    break;
 8008e5a:	e004      	b.n	8008e66 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fc0d 	bl	800967e <USBD_CtlError>
    break;
 8008e64:	bf00      	nop
  }

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	889b      	ldrh	r3, [r3, #4]
 8008e82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	d007      	beq.n	8008ea0 <USBD_StdEPReq+0x30>
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	f200 8144 	bhi.w	800911e <USBD_StdEPReq+0x2ae>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <USBD_StdEPReq+0x40>
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	f040 813f 	bne.w	800911e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
    break;
 8008eae:	e13b      	b.n	8009128 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d10a      	bne.n	8008ed2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	e12b      	b.n	800912a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d007      	beq.n	8008eea <USBD_StdEPReq+0x7a>
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	f300 8119 	bgt.w	8009112 <USBD_StdEPReq+0x2a2>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d072      	beq.n	8008fca <USBD_StdEPReq+0x15a>
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d03a      	beq.n	8008f5e <USBD_StdEPReq+0xee>
 8008ee8:	e113      	b.n	8009112 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d002      	beq.n	8008efa <USBD_StdEPReq+0x8a>
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d015      	beq.n	8008f24 <USBD_StdEPReq+0xb4>
 8008ef8:	e02b      	b.n	8008f52 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00c      	beq.n	8008f1a <USBD_StdEPReq+0xaa>
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	2b80      	cmp	r3, #128	; 0x80
 8008f04:	d009      	beq.n	8008f1a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 f8cc 	bl	800a0a8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008f10:	2180      	movs	r1, #128	; 0x80
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 f8c8 	bl	800a0a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008f18:	e020      	b.n	8008f5c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fbae 	bl	800967e <USBD_CtlError>
        break;
 8008f22:	e01b      	b.n	8008f5c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	885b      	ldrh	r3, [r3, #2]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10e      	bne.n	8008f4a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <USBD_StdEPReq+0xda>
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b80      	cmp	r3, #128	; 0x80
 8008f36:	d008      	beq.n	8008f4a <USBD_StdEPReq+0xda>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	88db      	ldrh	r3, [r3, #6]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 f8af 	bl	800a0a8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fc5f 	bl	800980e <USBD_CtlSendStatus>

        break;
 8008f50:	e004      	b.n	8008f5c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fb92 	bl	800967e <USBD_CtlError>
        break;
 8008f5a:	bf00      	nop
      }
      break;
 8008f5c:	e0de      	b.n	800911c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d002      	beq.n	8008f6e <USBD_StdEPReq+0xfe>
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d015      	beq.n	8008f98 <USBD_StdEPReq+0x128>
 8008f6c:	e026      	b.n	8008fbc <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00c      	beq.n	8008f8e <USBD_StdEPReq+0x11e>
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	2b80      	cmp	r3, #128	; 0x80
 8008f78:	d009      	beq.n	8008f8e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 f892 	bl	800a0a8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008f84:	2180      	movs	r1, #128	; 0x80
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 f88e 	bl	800a0a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008f8c:	e01c      	b.n	8008fc8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fb74 	bl	800967e <USBD_CtlError>
        break;
 8008f96:	e017      	b.n	8008fc8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d112      	bne.n	8008fc6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 f899 	bl	800a0e6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fc2a 	bl	800980e <USBD_CtlSendStatus>
        }
        break;
 8008fba:	e004      	b.n	8008fc6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fb5d 	bl	800967e <USBD_CtlError>
        break;
 8008fc4:	e000      	b.n	8008fc8 <USBD_StdEPReq+0x158>
        break;
 8008fc6:	bf00      	nop
      }
      break;
 8008fc8:	e0a8      	b.n	800911c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d002      	beq.n	8008fda <USBD_StdEPReq+0x16a>
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d031      	beq.n	800903c <USBD_StdEPReq+0x1cc>
 8008fd8:	e095      	b.n	8009106 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d007      	beq.n	8008ff0 <USBD_StdEPReq+0x180>
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d004      	beq.n	8008ff0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fb48 	bl	800967e <USBD_CtlError>
          break;
 8008fee:	e08f      	b.n	8009110 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da0b      	bge.n	8009010 <USBD_StdEPReq+0x1a0>
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	3310      	adds	r3, #16
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	4413      	add	r3, r2
 800900c:	3304      	adds	r3, #4
 800900e:	e00a      	b.n	8009026 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009016:	4613      	mov	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	4413      	add	r3, r2
 8009026:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2202      	movs	r2, #2
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fb8c 	bl	8009752 <USBD_CtlSendData>
          break;
 800903a:	e069      	b.n	8009110 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800903c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009040:	2b00      	cmp	r3, #0
 8009042:	da11      	bge.n	8009068 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	f003 020f 	and.w	r2, r3, #15
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	440b      	add	r3, r1
 8009056:	3318      	adds	r3, #24
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d117      	bne.n	800908e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fb0c 	bl	800967e <USBD_CtlError>
            break;
 8009066:	e053      	b.n	8009110 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	f003 020f 	and.w	r2, r3, #15
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 faf9 	bl	800967e <USBD_CtlError>
            break;
 800908c:	e040      	b.n	8009110 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800908e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009092:	2b00      	cmp	r3, #0
 8009094:	da0b      	bge.n	80090ae <USBD_StdEPReq+0x23e>
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	3310      	adds	r3, #16
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	4413      	add	r3, r2
 80090aa:	3304      	adds	r3, #4
 80090ac:	e00a      	b.n	80090c4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	4413      	add	r3, r2
 80090c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <USBD_StdEPReq+0x262>
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b80      	cmp	r3, #128	; 0x80
 80090d0:	d103      	bne.n	80090da <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	e00e      	b.n	80090f8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 f820 	bl	800a124 <USBD_LL_IsStallEP>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2201      	movs	r2, #1
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	e002      	b.n	80090f8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2202      	movs	r2, #2
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb27 	bl	8009752 <USBD_CtlSendData>
          break;
 8009104:	e004      	b.n	8009110 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fab8 	bl	800967e <USBD_CtlError>
        break;
 800910e:	bf00      	nop
      }
      break;
 8009110:	e004      	b.n	800911c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fab2 	bl	800967e <USBD_CtlError>
      break;
 800911a:	bf00      	nop
    }
    break;
 800911c:	e004      	b.n	8009128 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 faac 	bl	800967e <USBD_CtlError>
    break;
 8009126:	bf00      	nop
  }

  return ret;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	885b      	ldrh	r3, [r3, #2]
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	2b06      	cmp	r3, #6
 800914a:	f200 80c9 	bhi.w	80092e0 <USBD_GetDescriptor+0x1ac>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <USBD_GetDescriptor+0x20>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	08009171 	.word	0x08009171
 8009158:	08009189 	.word	0x08009189
 800915c:	080091c9 	.word	0x080091c9
 8009160:	080092e1 	.word	0x080092e1
 8009164:	080092e1 	.word	0x080092e1
 8009168:	0800928d 	.word	0x0800928d
 800916c:	080092b3 	.word	0x080092b3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	7c12      	ldrb	r2, [r2, #16]
 800917c:	f107 010a 	add.w	r1, r7, #10
 8009180:	4610      	mov	r0, r2
 8009182:	4798      	blx	r3
 8009184:	60f8      	str	r0, [r7, #12]
    break;
 8009186:	e0b0      	b.n	80092ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7c1b      	ldrb	r3, [r3, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10d      	bne.n	80091ac <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	f107 020a 	add.w	r2, r7, #10
 800919c:	4610      	mov	r0, r2
 800919e:	4798      	blx	r3
 80091a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3301      	adds	r3, #1
 80091a6:	2202      	movs	r2, #2
 80091a8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80091aa:	e09e      	b.n	80092ea <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	f107 020a 	add.w	r2, r7, #10
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
 80091bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	2202      	movs	r2, #2
 80091c4:	701a      	strb	r2, [r3, #0]
    break;
 80091c6:	e090      	b.n	80092ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	885b      	ldrh	r3, [r3, #2]
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	d856      	bhi.n	8009280 <USBD_GetDescriptor+0x14c>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <USBD_GetDescriptor+0xa4>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	080091f1 	.word	0x080091f1
 80091dc:	08009209 	.word	0x08009209
 80091e0:	08009221 	.word	0x08009221
 80091e4:	08009239 	.word	0x08009239
 80091e8:	08009251 	.word	0x08009251
 80091ec:	08009269 	.word	0x08009269
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 010a 	add.w	r1, r7, #10
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
      break;
 8009206:	e040      	b.n	800928a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 010a 	add.w	r1, r7, #10
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
      break;
 800921e:	e034      	b.n	800928a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	7c12      	ldrb	r2, [r2, #16]
 800922c:	f107 010a 	add.w	r1, r7, #10
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
 8009234:	60f8      	str	r0, [r7, #12]
      break;
 8009236:	e028      	b.n	800928a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	7c12      	ldrb	r2, [r2, #16]
 8009244:	f107 010a 	add.w	r1, r7, #10
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
      break;
 800924e:	e01c      	b.n	800928a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	7c12      	ldrb	r2, [r2, #16]
 800925c:	f107 010a 	add.w	r1, r7, #10
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
 8009264:	60f8      	str	r0, [r7, #12]
      break;
 8009266:	e010      	b.n	800928a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	7c12      	ldrb	r2, [r2, #16]
 8009274:	f107 010a 	add.w	r1, r7, #10
 8009278:	4610      	mov	r0, r2
 800927a:	4798      	blx	r3
 800927c:	60f8      	str	r0, [r7, #12]
      break;
 800927e:	e004      	b.n	800928a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f9fb 	bl	800967e <USBD_CtlError>
      return;
 8009288:	e04b      	b.n	8009322 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800928a:	e02e      	b.n	80092ea <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7c1b      	ldrb	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d109      	bne.n	80092a8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800929a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929c:	f107 020a 	add.w	r2, r7, #10
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
 80092a4:	60f8      	str	r0, [r7, #12]
      break;
 80092a6:	e020      	b.n	80092ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f9e7 	bl	800967e <USBD_CtlError>
      return;
 80092b0:	e037      	b.n	8009322 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	7c1b      	ldrb	r3, [r3, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10d      	bne.n	80092d6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	f107 020a 	add.w	r2, r7, #10
 80092c6:	4610      	mov	r0, r2
 80092c8:	4798      	blx	r3
 80092ca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3301      	adds	r3, #1
 80092d0:	2207      	movs	r2, #7
 80092d2:	701a      	strb	r2, [r3, #0]
      break;
 80092d4:	e009      	b.n	80092ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9d0 	bl	800967e <USBD_CtlError>
      return;
 80092de:	e020      	b.n	8009322 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9cb 	bl	800967e <USBD_CtlError>
    return;
 80092e8:	e01b      	b.n	8009322 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80092ea:	897b      	ldrh	r3, [r7, #10]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d011      	beq.n	8009314 <USBD_GetDescriptor+0x1e0>
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	88db      	ldrh	r3, [r3, #6]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00d      	beq.n	8009314 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	88da      	ldrh	r2, [r3, #6]
 80092fc:	897b      	ldrh	r3, [r7, #10]
 80092fe:	4293      	cmp	r3, r2
 8009300:	bf28      	it	cs
 8009302:	4613      	movcs	r3, r2
 8009304:	b29b      	uxth	r3, r3
 8009306:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009308:	897b      	ldrh	r3, [r7, #10]
 800930a:	461a      	mov	r2, r3
 800930c:	68f9      	ldr	r1, [r7, #12]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fa1f 	bl	8009752 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	88db      	ldrh	r3, [r3, #6]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fa76 	bl	800980e <USBD_CtlSendStatus>
  }
}
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	889b      	ldrh	r3, [r3, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d130      	bne.n	800939c <USBD_SetAddress+0x74>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	88db      	ldrh	r3, [r3, #6]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d12c      	bne.n	800939c <USBD_SetAddress+0x74>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	885b      	ldrh	r3, [r3, #2]
 8009346:	2b7f      	cmp	r3, #127	; 0x7f
 8009348:	d828      	bhi.n	800939c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	885b      	ldrh	r3, [r3, #2]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009354:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800935c:	2b03      	cmp	r3, #3
 800935e:	d104      	bne.n	800936a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f98b 	bl	800967e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009368:	e01d      	b.n	80093a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	7bfa      	ldrb	r2, [r7, #15]
 800936e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 ff00 	bl	800a17c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa46 	bl	800980e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009390:	e009      	b.n	80093a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939a:	e004      	b.n	80093a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f96d 	bl	800967e <USBD_CtlError>
  }
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	885b      	ldrh	r3, [r3, #2]
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	4b41      	ldr	r3, [pc, #260]	; (80094c8 <USBD_SetConfig+0x118>)
 80093c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093c4:	4b40      	ldr	r3, [pc, #256]	; (80094c8 <USBD_SetConfig+0x118>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d904      	bls.n	80093d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f955 	bl	800967e <USBD_CtlError>
 80093d4:	e075      	b.n	80094c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d002      	beq.n	80093e6 <USBD_SetConfig+0x36>
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d023      	beq.n	800942c <USBD_SetConfig+0x7c>
 80093e4:	e062      	b.n	80094ac <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80093e6:	4b38      	ldr	r3, [pc, #224]	; (80094c8 <USBD_SetConfig+0x118>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d01a      	beq.n	8009424 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80093ee:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <USBD_SetConfig+0x118>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2203      	movs	r2, #3
 80093fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009400:	4b31      	ldr	r3, [pc, #196]	; (80094c8 <USBD_SetConfig+0x118>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff fa5d 	bl	80088c6 <USBD_SetClassConfig>
 800940c:	4603      	mov	r3, r0
 800940e:	2b02      	cmp	r3, #2
 8009410:	d104      	bne.n	800941c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f932 	bl	800967e <USBD_CtlError>
          return;
 800941a:	e052      	b.n	80094c2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f9f6 	bl	800980e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009422:	e04e      	b.n	80094c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f9f2 	bl	800980e <USBD_CtlSendStatus>
      break;
 800942a:	e04a      	b.n	80094c2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800942c:	4b26      	ldr	r3, [pc, #152]	; (80094c8 <USBD_SetConfig+0x118>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d112      	bne.n	800945a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800943c:	4b22      	ldr	r3, [pc, #136]	; (80094c8 <USBD_SetConfig+0x118>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009446:	4b20      	ldr	r3, [pc, #128]	; (80094c8 <USBD_SetConfig+0x118>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff fa59 	bl	8008904 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f9db 	bl	800980e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009458:	e033      	b.n	80094c2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800945a:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <USBD_SetConfig+0x118>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	429a      	cmp	r2, r3
 8009466:	d01d      	beq.n	80094a4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff fa47 	bl	8008904 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <USBD_SetConfig+0x118>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <USBD_SetConfig+0x118>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fa1d 	bl	80088c6 <USBD_SetClassConfig>
 800948c:	4603      	mov	r3, r0
 800948e:	2b02      	cmp	r3, #2
 8009490:	d104      	bne.n	800949c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8f2 	bl	800967e <USBD_CtlError>
          return;
 800949a:	e012      	b.n	80094c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f9b6 	bl	800980e <USBD_CtlSendStatus>
      break;
 80094a2:	e00e      	b.n	80094c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9b2 	bl	800980e <USBD_CtlSendStatus>
      break;
 80094aa:	e00a      	b.n	80094c2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f8e5 	bl	800967e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80094b4:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <USBD_SetConfig+0x118>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff fa22 	bl	8008904 <USBD_ClrClassConfig>
      break;
 80094c0:	bf00      	nop
    }
  }
}
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20002e70 	.word	0x20002e70

080094cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d004      	beq.n	80094e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f8cc 	bl	800967e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80094e6:	e022      	b.n	800952e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	dc02      	bgt.n	80094f8 <USBD_GetConfig+0x2c>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dc03      	bgt.n	80094fe <USBD_GetConfig+0x32>
 80094f6:	e015      	b.n	8009524 <USBD_GetConfig+0x58>
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d00b      	beq.n	8009514 <USBD_GetConfig+0x48>
 80094fc:	e012      	b.n	8009524 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3308      	adds	r3, #8
 8009508:	2201      	movs	r2, #1
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f920 	bl	8009752 <USBD_CtlSendData>
      break;
 8009512:	e00c      	b.n	800952e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3304      	adds	r3, #4
 8009518:	2201      	movs	r2, #1
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f918 	bl	8009752 <USBD_CtlSendData>
      break;
 8009522:	e004      	b.n	800952e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f8a9 	bl	800967e <USBD_CtlError>
      break;
 800952c:	bf00      	nop
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009546:	3b01      	subs	r3, #1
 8009548:	2b02      	cmp	r3, #2
 800954a:	d81e      	bhi.n	800958a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	88db      	ldrh	r3, [r3, #6]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d004      	beq.n	800955e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f891 	bl	800967e <USBD_CtlError>
      break;
 800955c:	e01a      	b.n	8009594 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f043 0202 	orr.w	r2, r3, #2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	330c      	adds	r3, #12
 800957e:	2202      	movs	r2, #2
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f8e5 	bl	8009752 <USBD_CtlSendData>
    break;
 8009588:	e004      	b.n	8009594 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f876 	bl	800967e <USBD_CtlError>
    break;
 8009592:	bf00      	nop
  }
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	885b      	ldrh	r3, [r3, #2]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d106      	bne.n	80095bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f929 	bl	800980e <USBD_CtlSendStatus>
  }

}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095d4:	3b01      	subs	r3, #1
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d80b      	bhi.n	80095f2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	885b      	ldrh	r3, [r3, #2]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d10c      	bne.n	80095fc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f90f 	bl	800980e <USBD_CtlSendStatus>
    }
    break;
 80095f0:	e004      	b.n	80095fc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f842 	bl	800967e <USBD_CtlError>
    break;
 80095fa:	e000      	b.n	80095fe <USBD_ClrFeature+0x3a>
    break;
 80095fc:	bf00      	nop
  }
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	785a      	ldrb	r2, [r3, #1]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	3302      	adds	r3, #2
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	b29a      	uxth	r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	3303      	adds	r3, #3
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	b29b      	uxth	r3, r3
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	b29b      	uxth	r3, r3
 8009634:	4413      	add	r3, r2
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	3304      	adds	r3, #4
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	b29a      	uxth	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	3305      	adds	r3, #5
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	b29b      	uxth	r3, r3
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	b29b      	uxth	r3, r3
 8009650:	4413      	add	r3, r2
 8009652:	b29a      	uxth	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	3306      	adds	r3, #6
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b29a      	uxth	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	3307      	adds	r3, #7
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	b29b      	uxth	r3, r3
 8009668:	021b      	lsls	r3, r3, #8
 800966a:	b29b      	uxth	r3, r3
 800966c:	4413      	add	r3, r2
 800966e:	b29a      	uxth	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	80da      	strh	r2, [r3, #6]

}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	bc80      	pop	{r7}
 800967c:	4770      	bx	lr

0800967e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009688:	2180      	movs	r1, #128	; 0x80
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fd0c 	bl	800a0a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fd08 	bl	800a0a8 <USBD_LL_StallEP>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d032      	beq.n	800971c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f834 	bl	8009724 <USBD_GetLen>
 80096bc:	4603      	mov	r3, r0
 80096be:	3301      	adds	r3, #1
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	75fa      	strb	r2, [r7, #23]
 80096d0:	461a      	mov	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	4413      	add	r3, r2
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	7812      	ldrb	r2, [r2, #0]
 80096da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	75fa      	strb	r2, [r7, #23]
 80096e2:	461a      	mov	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4413      	add	r3, r2
 80096e8:	2203      	movs	r2, #3
 80096ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096ec:	e012      	b.n	8009714 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	60fa      	str	r2, [r7, #12]
 80096f4:	7dfa      	ldrb	r2, [r7, #23]
 80096f6:	1c51      	adds	r1, r2, #1
 80096f8:	75f9      	strb	r1, [r7, #23]
 80096fa:	4611      	mov	r1, r2
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	440a      	add	r2, r1
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009704:	7dfb      	ldrb	r3, [r7, #23]
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	75fa      	strb	r2, [r7, #23]
 800970a:	461a      	mov	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	4413      	add	r3, r2
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e8      	bne.n	80096ee <USBD_GetString+0x4e>
    }
  }
}
 800971c:	bf00      	nop
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009730:	e005      	b.n	800973e <USBD_GetLen+0x1a>
    {
        len++;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	3301      	adds	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3301      	adds	r3, #1
 800973c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f5      	bne.n	8009732 <USBD_GetLen+0xe>
    }

    return len;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	bc80      	pop	{r7}
 8009750:	4770      	bx	lr

08009752 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	4613      	mov	r3, r2
 800975e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2202      	movs	r2, #2
 8009764:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009768:	88fa      	ldrh	r2, [r7, #6]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	2100      	movs	r1, #0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fd1d 	bl	800a1ba <USBD_LL_Transmit>

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	4613      	mov	r3, r2
 8009796:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009798:	88fb      	ldrh	r3, [r7, #6]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	2100      	movs	r1, #0
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fd0b 	bl	800a1ba <USBD_LL_Transmit>

  return USBD_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	4613      	mov	r3, r2
 80097ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2203      	movs	r2, #3
 80097c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80097c4:	88fa      	ldrh	r2, [r7, #6]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80097d4:	88fb      	ldrh	r3, [r7, #6]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	2100      	movs	r1, #0
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 fd10 	bl	800a200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	4613      	mov	r3, r2
 80097f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097f8:	88fb      	ldrh	r3, [r7, #6]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	2100      	movs	r1, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 fcfe 	bl	800a200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2204      	movs	r2, #4
 800981a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800981e:	2300      	movs	r3, #0
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fcc8 	bl	800a1ba <USBD_LL_Transmit>

  return USBD_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2205      	movs	r2, #5
 8009840:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009844:	2300      	movs	r3, #0
 8009846:	2200      	movs	r2, #0
 8009848:	2100      	movs	r1, #0
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fcd8 	bl	800a200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009860:	2200      	movs	r2, #0
 8009862:	4912      	ldr	r1, [pc, #72]	; (80098ac <MX_USB_DEVICE_Init+0x50>)
 8009864:	4812      	ldr	r0, [pc, #72]	; (80098b0 <MX_USB_DEVICE_Init+0x54>)
 8009866:	f7fe ffd4 	bl	8008812 <USBD_Init>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009870:	f7f8 f856 	bl	8001920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009874:	490f      	ldr	r1, [pc, #60]	; (80098b4 <MX_USB_DEVICE_Init+0x58>)
 8009876:	480e      	ldr	r0, [pc, #56]	; (80098b0 <MX_USB_DEVICE_Init+0x54>)
 8009878:	f7fe fff6 	bl	8008868 <USBD_RegisterClass>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009882:	f7f8 f84d 	bl	8001920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009886:	490c      	ldr	r1, [pc, #48]	; (80098b8 <MX_USB_DEVICE_Init+0x5c>)
 8009888:	4809      	ldr	r0, [pc, #36]	; (80098b0 <MX_USB_DEVICE_Init+0x54>)
 800988a:	f7fe ff27 	bl	80086dc <USBD_CDC_RegisterInterface>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009894:	f7f8 f844 	bl	8001920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009898:	4805      	ldr	r0, [pc, #20]	; (80098b0 <MX_USB_DEVICE_Init+0x54>)
 800989a:	f7fe fffe 	bl	800889a <USBD_Start>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098a4:	f7f8 f83c 	bl	8001920 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098a8:	bf00      	nop
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	200003f4 	.word	0x200003f4
 80098b0:	20002e74 	.word	0x20002e74
 80098b4:	200002e0 	.word	0x200002e0
 80098b8:	200003e4 	.word	0x200003e4

080098bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098c0:	2200      	movs	r2, #0
 80098c2:	4905      	ldr	r1, [pc, #20]	; (80098d8 <CDC_Init_FS+0x1c>)
 80098c4:	4805      	ldr	r0, [pc, #20]	; (80098dc <CDC_Init_FS+0x20>)
 80098c6:	f7fe ff1f 	bl	8008708 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098ca:	4905      	ldr	r1, [pc, #20]	; (80098e0 <CDC_Init_FS+0x24>)
 80098cc:	4803      	ldr	r0, [pc, #12]	; (80098dc <CDC_Init_FS+0x20>)
 80098ce:	f7fe ff34 	bl	800873a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20003cfc 	.word	0x20003cfc
 80098dc:	20002e74 	.word	0x20002e74
 80098e0:	200034fc 	.word	0x200034fc

080098e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr
	...

080098f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	6039      	str	r1, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
 8009900:	4613      	mov	r3, r2
 8009902:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b23      	cmp	r3, #35	; 0x23
 8009908:	d84a      	bhi.n	80099a0 <CDC_Control_FS+0xac>
 800990a:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <CDC_Control_FS+0x1c>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	080099a1 	.word	0x080099a1
 8009914:	080099a1 	.word	0x080099a1
 8009918:	080099a1 	.word	0x080099a1
 800991c:	080099a1 	.word	0x080099a1
 8009920:	080099a1 	.word	0x080099a1
 8009924:	080099a1 	.word	0x080099a1
 8009928:	080099a1 	.word	0x080099a1
 800992c:	080099a1 	.word	0x080099a1
 8009930:	080099a1 	.word	0x080099a1
 8009934:	080099a1 	.word	0x080099a1
 8009938:	080099a1 	.word	0x080099a1
 800993c:	080099a1 	.word	0x080099a1
 8009940:	080099a1 	.word	0x080099a1
 8009944:	080099a1 	.word	0x080099a1
 8009948:	080099a1 	.word	0x080099a1
 800994c:	080099a1 	.word	0x080099a1
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099a1 	.word	0x080099a1
 8009958:	080099a1 	.word	0x080099a1
 800995c:	080099a1 	.word	0x080099a1
 8009960:	080099a1 	.word	0x080099a1
 8009964:	080099a1 	.word	0x080099a1
 8009968:	080099a1 	.word	0x080099a1
 800996c:	080099a1 	.word	0x080099a1
 8009970:	080099a1 	.word	0x080099a1
 8009974:	080099a1 	.word	0x080099a1
 8009978:	080099a1 	.word	0x080099a1
 800997c:	080099a1 	.word	0x080099a1
 8009980:	080099a1 	.word	0x080099a1
 8009984:	080099a1 	.word	0x080099a1
 8009988:	080099a1 	.word	0x080099a1
 800998c:	080099a1 	.word	0x080099a1
 8009990:	080099a1 	.word	0x080099a1
 8009994:	080099a1 	.word	0x080099a1
 8009998:	080099a1 	.word	0x080099a1
 800999c:	080099a1 	.word	0x080099a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099a0:	bf00      	nop
  }

  return (USBD_OK);
 80099a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop

080099b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e014      	b.n	80099ea <CDC_Receive_FS+0x3a>
	{
	if (RX_Buffer_Len < MAX_RX_BUFFER_SIZE)
 80099c0:	4b1c      	ldr	r3, [pc, #112]	; (8009a34 <CDC_Receive_FS+0x84>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099c8:	d20c      	bcs.n	80099e4 <CDC_Receive_FS+0x34>
	{
	  RX_Buffer[RX_Buffer_Len] = Buf[i];
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	441a      	add	r2, r3
 80099d0:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <CDC_Receive_FS+0x84>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	7811      	ldrb	r1, [r2, #0]
 80099d6:	4a18      	ldr	r2, [pc, #96]	; (8009a38 <CDC_Receive_FS+0x88>)
 80099d8:	54d1      	strb	r1, [r2, r3]
	  RX_Buffer_Len = RX_Buffer_Len + 1;
 80099da:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <CDC_Receive_FS+0x84>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3301      	adds	r3, #1
 80099e0:	4a14      	ldr	r2, [pc, #80]	; (8009a34 <CDC_Receive_FS+0x84>)
 80099e2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3301      	adds	r3, #1
 80099e8:	60fb      	str	r3, [r7, #12]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d8e5      	bhi.n	80099c0 <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (RX_Buffer_Len > 0 && RX_Buffer[RX_Buffer_Len - 1] == '\n')
 80099f4:	4b0f      	ldr	r3, [pc, #60]	; (8009a34 <CDC_Receive_FS+0x84>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00f      	beq.n	8009a1c <CDC_Receive_FS+0x6c>
 80099fc:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <CDC_Receive_FS+0x84>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	4a0d      	ldr	r2, [pc, #52]	; (8009a38 <CDC_Receive_FS+0x88>)
 8009a04:	5cd3      	ldrb	r3, [r2, r3]
 8009a06:	2b0a      	cmp	r3, #10
 8009a08:	d108      	bne.n	8009a1c <CDC_Receive_FS+0x6c>
	{
		// Process the received message
		Process_Received_Message(RX_Buffer, RX_Buffer_Len);
 8009a0a:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <CDC_Receive_FS+0x84>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4809      	ldr	r0, [pc, #36]	; (8009a38 <CDC_Receive_FS+0x88>)
 8009a12:	f000 f83b 	bl	8009a8c <Process_Received_Message>
		// Clear the receive buffer
		RX_Buffer_Len = 0;
 8009a16:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <CDC_Receive_FS+0x84>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	4807      	ldr	r0, [pc, #28]	; (8009a3c <CDC_Receive_FS+0x8c>)
 8009a20:	f7fe fe8b 	bl	800873a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a24:	4805      	ldr	r0, [pc, #20]	; (8009a3c <CDC_Receive_FS+0x8c>)
 8009a26:	f7fe feca 	bl	80087be <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8009a2a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	200034f8 	.word	0x200034f8
 8009a38:	20003110 	.word	0x20003110
 8009a3c:	20002e74 	.word	0x20002e74

08009a40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a50:	4b0d      	ldr	r3, [pc, #52]	; (8009a88 <CDC_Transmit_FS+0x48>)
 8009a52:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e00b      	b.n	8009a7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a66:	887b      	ldrh	r3, [r7, #2]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	4806      	ldr	r0, [pc, #24]	; (8009a88 <CDC_Transmit_FS+0x48>)
 8009a6e:	f7fe fe4b 	bl	8008708 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a72:	4805      	ldr	r0, [pc, #20]	; (8009a88 <CDC_Transmit_FS+0x48>)
 8009a74:	f7fe fe74 	bl	8008760 <USBD_CDC_TransmitPacket>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20002e74 	.word	0x20002e74

08009a8c <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	if (strncmp((char*) RX_Buffer, "configure", strlen("configure")) == 0) // if configure
 8009a96:	2209      	movs	r2, #9
 8009a98:	492a      	ldr	r1, [pc, #168]	; (8009b44 <Process_Received_Message+0xb8>)
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fc89 	bl	800a3b2 <strncmp>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <Process_Received_Message+0x28>
	{
		Configure(RX_Buffer, RX_Buffer_Len);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7f6 ff9d 	bl	80009e8 <Configure>
		Print_Message();
 8009aae:	f7f7 fd73 	bl	8001598 <Print_Message>
 8009ab2:	e041      	b.n	8009b38 <Process_Received_Message+0xac>
	}
	else if (strncmp((char*) RX_Buffer, "transmit", strlen("transmit")) == 0)
 8009ab4:	2208      	movs	r2, #8
 8009ab6:	4924      	ldr	r1, [pc, #144]	; (8009b48 <Process_Received_Message+0xbc>)
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fc7a 	bl	800a3b2 <strncmp>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <Process_Received_Message+0x46>
	{
		Transmit(RX_Buffer, RX_Buffer_Len);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7f7 f8d0 	bl	8000c6c <Transmit>
		Print_Message();
 8009acc:	f7f7 fd64 	bl	8001598 <Print_Message>
 8009ad0:	e032      	b.n	8009b38 <Process_Received_Message+0xac>
	}
	else if (strncmp((char*) RX_Buffer, "receive", strlen("receive")) == 0)
 8009ad2:	2207      	movs	r2, #7
 8009ad4:	491d      	ldr	r1, [pc, #116]	; (8009b4c <Process_Received_Message+0xc0>)
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fc6b 	bl	800a3b2 <strncmp>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <Process_Received_Message+0x64>
	{
		Receive(RX_Buffer, RX_Buffer_Len);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7f7 f963 	bl	8000db0 <Receive>
		Print_Message();
 8009aea:	f7f7 fd55 	bl	8001598 <Print_Message>
 8009aee:	e023      	b.n	8009b38 <Process_Received_Message+0xac>
	}
	else if (strncmp((char*) RX_Buffer, "status", strlen("status")) == 0)
 8009af0:	2206      	movs	r2, #6
 8009af2:	4917      	ldr	r1, [pc, #92]	; (8009b50 <Process_Received_Message+0xc4>)
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fc5c 	bl	800a3b2 <strncmp>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d106      	bne.n	8009b0e <Process_Received_Message+0x82>
	{
		Status(RX_Buffer, RX_Buffer_Len);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7f7 f9c2 	bl	8000e8c <Status>
		Print_Message();
 8009b08:	f7f7 fd46 	bl	8001598 <Print_Message>
 8009b0c:	e014      	b.n	8009b38 <Process_Received_Message+0xac>
	}
	else if (strncmp((char*) RX_Buffer, "register", strlen("register")) == 0)
 8009b0e:	2208      	movs	r2, #8
 8009b10:	4910      	ldr	r1, [pc, #64]	; (8009b54 <Process_Received_Message+0xc8>)
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fc4d 	bl	800a3b2 <strncmp>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <Process_Received_Message+0xa0>
	{
		Register_Access(RX_Buffer, RX_Buffer_Len);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7f7 f9ed 	bl	8000f00 <Register_Access>
		Print_Message();
 8009b26:	f7f7 fd37 	bl	8001598 <Print_Message>
 8009b2a:	e005      	b.n	8009b38 <Process_Received_Message+0xac>
		Print_Message();
	}
	*/
	else
	{
		CDC_Transmit_FS(RX_Buffer, RX_Buffer_Len);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff ff84 	bl	8009a40 <CDC_Transmit_FS>
	}
	return 0;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	0800be30 	.word	0x0800be30
 8009b48:	0800be3c 	.word	0x0800be3c
 8009b4c:	0800be48 	.word	0x0800be48
 8009b50:	0800be50 	.word	0x0800be50
 8009b54:	0800be58 	.word	0x0800be58

08009b58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	6039      	str	r1, [r7, #0]
 8009b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2212      	movs	r2, #18
 8009b68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b6a:	4b03      	ldr	r3, [pc, #12]	; (8009b78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000410 	.word	0x20000410

08009b7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	6039      	str	r1, [r7, #0]
 8009b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2204      	movs	r2, #4
 8009b8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b8e:	4b03      	ldr	r3, [pc, #12]	; (8009b9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bc80      	pop	{r7}
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	20000424 	.word	0x20000424

08009ba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	6039      	str	r1, [r7, #0]
 8009baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d105      	bne.n	8009bbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4907      	ldr	r1, [pc, #28]	; (8009bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bb6:	4808      	ldr	r0, [pc, #32]	; (8009bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bb8:	f7ff fd72 	bl	80096a0 <USBD_GetString>
 8009bbc:	e004      	b.n	8009bc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4904      	ldr	r1, [pc, #16]	; (8009bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bc2:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bc4:	f7ff fd6c 	bl	80096a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bc8:	4b02      	ldr	r3, [pc, #8]	; (8009bd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200044fc 	.word	0x200044fc
 8009bd8:	0800be64 	.word	0x0800be64

08009bdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	4904      	ldr	r1, [pc, #16]	; (8009bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bec:	4804      	ldr	r0, [pc, #16]	; (8009c00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bee:	f7ff fd57 	bl	80096a0 <USBD_GetString>
  return USBD_StrDesc;
 8009bf2:	4b02      	ldr	r3, [pc, #8]	; (8009bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	200044fc 	.word	0x200044fc
 8009c00:	0800be7c 	.word	0x0800be7c

08009c04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	6039      	str	r1, [r7, #0]
 8009c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	221a      	movs	r2, #26
 8009c14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c16:	f000 f843 	bl	8009ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c1a:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20000428 	.word	0x20000428

08009c28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6039      	str	r1, [r7, #0]
 8009c32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c34:	79fb      	ldrb	r3, [r7, #7]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	4907      	ldr	r1, [pc, #28]	; (8009c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c3e:	4808      	ldr	r0, [pc, #32]	; (8009c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c40:	f7ff fd2e 	bl	80096a0 <USBD_GetString>
 8009c44:	e004      	b.n	8009c50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	4904      	ldr	r1, [pc, #16]	; (8009c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c4a:	4805      	ldr	r0, [pc, #20]	; (8009c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c4c:	f7ff fd28 	bl	80096a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c50:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200044fc 	.word	0x200044fc
 8009c60:	0800be90 	.word	0x0800be90

08009c64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	6039      	str	r1, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4907      	ldr	r1, [pc, #28]	; (8009c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c7a:	4808      	ldr	r0, [pc, #32]	; (8009c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c7c:	f7ff fd10 	bl	80096a0 <USBD_GetString>
 8009c80:	e004      	b.n	8009c8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4904      	ldr	r1, [pc, #16]	; (8009c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c88:	f7ff fd0a 	bl	80096a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	200044fc 	.word	0x200044fc
 8009c9c:	0800be9c 	.word	0x0800be9c

08009ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <Get_SerialNum+0x44>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cac:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <Get_SerialNum+0x48>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cb2:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <Get_SerialNum+0x4c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cc6:	2208      	movs	r2, #8
 8009cc8:	4909      	ldr	r1, [pc, #36]	; (8009cf0 <Get_SerialNum+0x50>)
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 f814 	bl	8009cf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cd0:	2204      	movs	r2, #4
 8009cd2:	4908      	ldr	r1, [pc, #32]	; (8009cf4 <Get_SerialNum+0x54>)
 8009cd4:	68b8      	ldr	r0, [r7, #8]
 8009cd6:	f000 f80f 	bl	8009cf8 <IntToUnicode>
  }
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	1ff800d0 	.word	0x1ff800d0
 8009ce8:	1ff800d4 	.word	0x1ff800d4
 8009cec:	1ff800d8 	.word	0x1ff800d8
 8009cf0:	2000042a 	.word	0x2000042a
 8009cf4:	2000043a 	.word	0x2000043a

08009cf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]
 8009d0e:	e027      	b.n	8009d60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	0f1b      	lsrs	r3, r3, #28
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	d80b      	bhi.n	8009d30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	0f1b      	lsrs	r3, r3, #28
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	4619      	mov	r1, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	440b      	add	r3, r1
 8009d28:	3230      	adds	r2, #48	; 0x30
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	e00a      	b.n	8009d46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	0f1b      	lsrs	r3, r3, #28
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	440b      	add	r3, r1
 8009d40:	3237      	adds	r2, #55	; 0x37
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	3301      	adds	r3, #1
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	4413      	add	r3, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
 8009d60:	7dfa      	ldrb	r2, [r7, #23]
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d3d3      	bcc.n	8009d10 <IntToUnicode+0x18>
  }
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bc80      	pop	{r7}
 8009d72:	4770      	bx	lr

08009d74 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d106      	bne.n	8009d94 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009d86:	4b09      	ldr	r3, [pc, #36]	; (8009dac <HAL_PCDEx_SetConnectionState+0x38>)
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	4a08      	ldr	r2, [pc, #32]	; (8009dac <HAL_PCDEx_SetConnectionState+0x38>)
 8009d8c:	f043 0301 	orr.w	r3, r3, #1
 8009d90:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009d92:	e005      	b.n	8009da0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009d94:	4b05      	ldr	r3, [pc, #20]	; (8009dac <HAL_PCDEx_SetConnectionState+0x38>)
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a04      	ldr	r2, [pc, #16]	; (8009dac <HAL_PCDEx_SetConnectionState+0x38>)
 8009d9a:	f023 0301 	bic.w	r3, r3, #1
 8009d9e:	6053      	str	r3, [r2, #4]
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	40010000 	.word	0x40010000

08009db0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a0d      	ldr	r2, [pc, #52]	; (8009df4 <HAL_PCD_MspInit+0x44>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d113      	bne.n	8009dea <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	; (8009df8 <HAL_PCD_MspInit+0x48>)
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	4a0c      	ldr	r2, [pc, #48]	; (8009df8 <HAL_PCD_MspInit+0x48>)
 8009dc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009dcc:	6253      	str	r3, [r2, #36]	; 0x24
 8009dce:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <HAL_PCD_MspInit+0x48>)
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2100      	movs	r1, #0
 8009dde:	2014      	movs	r0, #20
 8009de0:	f7f8 f8f5 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009de4:	2014      	movs	r0, #20
 8009de6:	f7f8 f90e 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	40005c00 	.word	0x40005c00
 8009df8:	40023800 	.word	0x40023800

08009dfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e10:	4619      	mov	r1, r3
 8009e12:	4610      	mov	r0, r2
 8009e14:	f7fe fd89 	bl	800892a <USBD_LL_SetupStage>
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e32:	78fa      	ldrb	r2, [r7, #3]
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	00db      	lsls	r3, r3, #3
 8009e3e:	440b      	add	r3, r1
 8009e40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f7fe fdbb 	bl	80089c4 <USBD_LL_DataOutStage>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e68:	78fa      	ldrb	r2, [r7, #3]
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	440b      	add	r3, r1
 8009e76:	333c      	adds	r3, #60	; 0x3c
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	f7fe fe12 	bl	8008aa6 <USBD_LL_DataInStage>
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe ff1d 	bl	8008cd8 <USBD_LL_SOF>
}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d001      	beq.n	8009ebe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009eba:	f7f7 fd31 	bl	8001920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ec4:	7bfa      	ldrb	r2, [r7, #15]
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fe fed2 	bl	8008c72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe fe8b 	bl	8008bf0 <USBD_LL_Reset>
}
 8009eda:	bf00      	nop
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fecc 	bl	8008c90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d005      	beq.n	8009f0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f00:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <HAL_PCD_SuspendCallback+0x30>)
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	4a03      	ldr	r2, [pc, #12]	; (8009f14 <HAL_PCD_SuspendCallback+0x30>)
 8009f06:	f043 0306 	orr.w	r3, r3, #6
 8009f0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	e000ed00 	.word	0xe000ed00

08009f18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fec6 	bl	8008cb8 <USBD_LL_Resume>
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f3c:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a26      	ldr	r2, [pc, #152]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009f4c:	4b24      	ldr	r3, [pc, #144]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f4e:	4a25      	ldr	r2, [pc, #148]	; (8009fe4 <USBD_LL_Init+0xb0>)
 8009f50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f52:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f54:	2208      	movs	r2, #8
 8009f56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f58:	4b21      	ldr	r3, [pc, #132]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f5e:	4b20      	ldr	r3, [pc, #128]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f60:	2202      	movs	r2, #2
 8009f62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f64:	4b1e      	ldr	r3, [pc, #120]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f6a:	4b1d      	ldr	r3, [pc, #116]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f70:	481b      	ldr	r0, [pc, #108]	; (8009fe0 <USBD_LL_Init+0xac>)
 8009f72:	f7f8 fa23 	bl	80023bc <HAL_PCD_Init>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009f7c:	f7f7 fcd0 	bl	8001920 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009f86:	2318      	movs	r3, #24
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f7f9 fe00 	bl	8003b90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009f96:	2358      	movs	r3, #88	; 0x58
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2180      	movs	r1, #128	; 0x80
 8009f9c:	f7f9 fdf8 	bl	8003b90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fa6:	23c0      	movs	r3, #192	; 0xc0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2181      	movs	r1, #129	; 0x81
 8009fac:	f7f9 fdf0 	bl	8003b90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fb6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	f7f9 fde7 	bl	8003b90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2182      	movs	r1, #130	; 0x82
 8009fd0:	f7f9 fdde 	bl	8003b90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	200046fc 	.word	0x200046fc
 8009fe4:	40005c00 	.word	0x40005c00

08009fe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f8 faba 	bl	8002578 <HAL_PCD_Start>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f944 	bl	800a298 <USBD_Get_USB_Status>
 800a010:	4603      	mov	r3, r0
 800a012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a014:	7bbb      	ldrb	r3, [r7, #14]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	4608      	mov	r0, r1
 800a028:	4611      	mov	r1, r2
 800a02a:	461a      	mov	r2, r3
 800a02c:	4603      	mov	r3, r0
 800a02e:	70fb      	strb	r3, [r7, #3]
 800a030:	460b      	mov	r3, r1
 800a032:	70bb      	strb	r3, [r7, #2]
 800a034:	4613      	mov	r3, r2
 800a036:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a046:	78bb      	ldrb	r3, [r7, #2]
 800a048:	883a      	ldrh	r2, [r7, #0]
 800a04a:	78f9      	ldrb	r1, [r7, #3]
 800a04c:	f7f8 fbd6 	bl	80027fc <HAL_PCD_EP_Open>
 800a050:	4603      	mov	r3, r0
 800a052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	4618      	mov	r0, r3
 800a058:	f000 f91e 	bl	800a298 <USBD_Get_USB_Status>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a060:	7bbb      	ldrb	r3, [r7, #14]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f7f8 fc1d 	bl	80028c8 <HAL_PCD_EP_Close>
 800a08e:	4603      	mov	r3, r0
 800a090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	4618      	mov	r0, r3
 800a096:	f000 f8ff 	bl	800a298 <USBD_Get_USB_Status>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7f8 fcdd 	bl	8002a86 <HAL_PCD_EP_SetStall>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f8e0 	bl	800a298 <USBD_Get_USB_Status>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f7f8 fd10 	bl	8002b2a <HAL_PCD_EP_ClrStall>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 f8c1 	bl	800a298 <USBD_Get_USB_Status>
 800a116:	4603      	mov	r3, r0
 800a118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a136:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	da0c      	bge.n	800a15a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a146:	68f9      	ldr	r1, [r7, #12]
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	4613      	mov	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	440b      	add	r3, r1
 800a154:	3302      	adds	r3, #2
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	e00b      	b.n	800a172 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a160:	68f9      	ldr	r1, [r7, #12]
 800a162:	4613      	mov	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	00db      	lsls	r3, r3, #3
 800a16a:	440b      	add	r3, r1
 800a16c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a170:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	bc80      	pop	{r7}
 800a17a:	4770      	bx	lr

0800a17c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a196:	78fa      	ldrb	r2, [r7, #3]
 800a198:	4611      	mov	r1, r2
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f8 fb09 	bl	80027b2 <HAL_PCD_SetAddress>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 f876 	bl	800a298 <USBD_Get_USB_Status>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	72fb      	strb	r3, [r7, #11]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a1dc:	893b      	ldrh	r3, [r7, #8]
 800a1de:	7af9      	ldrb	r1, [r7, #11]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	f7f8 fc0d 	bl	8002a00 <HAL_PCD_EP_Transmit>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 f853 	bl	800a298 <USBD_Get_USB_Status>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	461a      	mov	r2, r3
 800a20c:	460b      	mov	r3, r1
 800a20e:	72fb      	strb	r3, [r7, #11]
 800a210:	4613      	mov	r3, r2
 800a212:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a222:	893b      	ldrh	r3, [r7, #8]
 800a224:	7af9      	ldrb	r1, [r7, #11]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	f7f8 fb96 	bl	8002958 <HAL_PCD_EP_Receive>
 800a22c:	4603      	mov	r3, r0
 800a22e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f830 	bl	800a298 <USBD_Get_USB_Status>
 800a238:	4603      	mov	r3, r0
 800a23a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a23c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b082      	sub	sp, #8
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	460b      	mov	r3, r1
 800a250:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a258:	78fa      	ldrb	r2, [r7, #3]
 800a25a:	4611      	mov	r1, r2
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f8 fbb8 	bl	80029d2 <HAL_PCD_EP_GetRxCount>
 800a262:	4603      	mov	r3, r0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a274:	4b02      	ldr	r3, [pc, #8]	; (800a280 <USBD_static_malloc+0x14>)
}
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bc80      	pop	{r7}
 800a27e:	4770      	bx	lr
 800a280:	200049e8 	.word	0x200049e8

0800a284 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]

}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	bc80      	pop	{r7}
 800a294:	4770      	bx	lr
	...

0800a298 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d817      	bhi.n	800a2dc <USBD_Get_USB_Status+0x44>
 800a2ac:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <USBD_Get_USB_Status+0x1c>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2c5 	.word	0x0800a2c5
 800a2b8:	0800a2cb 	.word	0x0800a2cb
 800a2bc:	0800a2d1 	.word	0x0800a2d1
 800a2c0:	0800a2d7 	.word	0x0800a2d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c8:	e00b      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ce:	e008      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d4:	e005      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2da:	e002      	b.n	800a2e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e0:	bf00      	nop
  }
  return usb_status;
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop

0800a2f0 <__errno>:
 800a2f0:	4b01      	ldr	r3, [pc, #4]	; (800a2f8 <__errno+0x8>)
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20000444 	.word	0x20000444

0800a2fc <__libc_init_array>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	2600      	movs	r6, #0
 800a300:	4d0c      	ldr	r5, [pc, #48]	; (800a334 <__libc_init_array+0x38>)
 800a302:	4c0d      	ldr	r4, [pc, #52]	; (800a338 <__libc_init_array+0x3c>)
 800a304:	1b64      	subs	r4, r4, r5
 800a306:	10a4      	asrs	r4, r4, #2
 800a308:	42a6      	cmp	r6, r4
 800a30a:	d109      	bne.n	800a320 <__libc_init_array+0x24>
 800a30c:	f001 fb04 	bl	800b918 <_init>
 800a310:	2600      	movs	r6, #0
 800a312:	4d0a      	ldr	r5, [pc, #40]	; (800a33c <__libc_init_array+0x40>)
 800a314:	4c0a      	ldr	r4, [pc, #40]	; (800a340 <__libc_init_array+0x44>)
 800a316:	1b64      	subs	r4, r4, r5
 800a318:	10a4      	asrs	r4, r4, #2
 800a31a:	42a6      	cmp	r6, r4
 800a31c:	d105      	bne.n	800a32a <__libc_init_array+0x2e>
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	f855 3b04 	ldr.w	r3, [r5], #4
 800a324:	4798      	blx	r3
 800a326:	3601      	adds	r6, #1
 800a328:	e7ee      	b.n	800a308 <__libc_init_array+0xc>
 800a32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32e:	4798      	blx	r3
 800a330:	3601      	adds	r6, #1
 800a332:	e7f2      	b.n	800a31a <__libc_init_array+0x1e>
 800a334:	0800c120 	.word	0x0800c120
 800a338:	0800c120 	.word	0x0800c120
 800a33c:	0800c120 	.word	0x0800c120
 800a340:	0800c124 	.word	0x0800c124

0800a344 <memset>:
 800a344:	4603      	mov	r3, r0
 800a346:	4402      	add	r2, r0
 800a348:	4293      	cmp	r3, r2
 800a34a:	d100      	bne.n	800a34e <memset+0xa>
 800a34c:	4770      	bx	lr
 800a34e:	f803 1b01 	strb.w	r1, [r3], #1
 800a352:	e7f9      	b.n	800a348 <memset+0x4>

0800a354 <siprintf>:
 800a354:	b40e      	push	{r1, r2, r3}
 800a356:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a35a:	b500      	push	{lr}
 800a35c:	b09c      	sub	sp, #112	; 0x70
 800a35e:	ab1d      	add	r3, sp, #116	; 0x74
 800a360:	9002      	str	r0, [sp, #8]
 800a362:	9006      	str	r0, [sp, #24]
 800a364:	9107      	str	r1, [sp, #28]
 800a366:	9104      	str	r1, [sp, #16]
 800a368:	4808      	ldr	r0, [pc, #32]	; (800a38c <siprintf+0x38>)
 800a36a:	4909      	ldr	r1, [pc, #36]	; (800a390 <siprintf+0x3c>)
 800a36c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a370:	9105      	str	r1, [sp, #20]
 800a372:	6800      	ldr	r0, [r0, #0]
 800a374:	a902      	add	r1, sp, #8
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	f000 fa82 	bl	800a880 <_svfiprintf_r>
 800a37c:	2200      	movs	r2, #0
 800a37e:	9b02      	ldr	r3, [sp, #8]
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	b01c      	add	sp, #112	; 0x70
 800a384:	f85d eb04 	ldr.w	lr, [sp], #4
 800a388:	b003      	add	sp, #12
 800a38a:	4770      	bx	lr
 800a38c:	20000444 	.word	0x20000444
 800a390:	ffff0208 	.word	0xffff0208

0800a394 <strcat>:
 800a394:	4602      	mov	r2, r0
 800a396:	b510      	push	{r4, lr}
 800a398:	7814      	ldrb	r4, [r2, #0]
 800a39a:	4613      	mov	r3, r2
 800a39c:	3201      	adds	r2, #1
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	d1fa      	bne.n	800a398 <strcat+0x4>
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	d1f9      	bne.n	800a3a4 <strcat+0x10>
 800a3b0:	bd10      	pop	{r4, pc}

0800a3b2 <strncmp>:
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	b172      	cbz	r2, 800a3d6 <strncmp+0x24>
 800a3b8:	3901      	subs	r1, #1
 800a3ba:	1884      	adds	r4, r0, r2
 800a3bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a3c4:	4290      	cmp	r0, r2
 800a3c6:	d101      	bne.n	800a3cc <strncmp+0x1a>
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	d101      	bne.n	800a3d0 <strncmp+0x1e>
 800a3cc:	1a80      	subs	r0, r0, r2
 800a3ce:	bd10      	pop	{r4, pc}
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d1f3      	bne.n	800a3bc <strncmp+0xa>
 800a3d4:	e7fa      	b.n	800a3cc <strncmp+0x1a>
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	e7f9      	b.n	800a3ce <strncmp+0x1c>
	...

0800a3dc <strtok>:
 800a3dc:	4b16      	ldr	r3, [pc, #88]	; (800a438 <strtok+0x5c>)
 800a3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	681f      	ldr	r7, [r3, #0]
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	b9ec      	cbnz	r4, 800a428 <strtok+0x4c>
 800a3ec:	2050      	movs	r0, #80	; 0x50
 800a3ee:	f000 f907 	bl	800a600 <malloc>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	65b8      	str	r0, [r7, #88]	; 0x58
 800a3f6:	b920      	cbnz	r0, 800a402 <strtok+0x26>
 800a3f8:	2157      	movs	r1, #87	; 0x57
 800a3fa:	4b10      	ldr	r3, [pc, #64]	; (800a43c <strtok+0x60>)
 800a3fc:	4810      	ldr	r0, [pc, #64]	; (800a440 <strtok+0x64>)
 800a3fe:	f000 f8cf 	bl	800a5a0 <__assert_func>
 800a402:	e9c0 4400 	strd	r4, r4, [r0]
 800a406:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a40a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a40e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a412:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a416:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a41a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a41e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a422:	6184      	str	r4, [r0, #24]
 800a424:	7704      	strb	r4, [r0, #28]
 800a426:	6244      	str	r4, [r0, #36]	; 0x24
 800a428:	4631      	mov	r1, r6
 800a42a:	4628      	mov	r0, r5
 800a42c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a42e:	2301      	movs	r3, #1
 800a430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a434:	f000 b806 	b.w	800a444 <__strtok_r>
 800a438:	20000444 	.word	0x20000444
 800a43c:	0800bed4 	.word	0x0800bed4
 800a440:	0800beeb 	.word	0x0800beeb

0800a444 <__strtok_r>:
 800a444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a446:	b908      	cbnz	r0, 800a44c <__strtok_r+0x8>
 800a448:	6810      	ldr	r0, [r2, #0]
 800a44a:	b188      	cbz	r0, 800a470 <__strtok_r+0x2c>
 800a44c:	4604      	mov	r4, r0
 800a44e:	460f      	mov	r7, r1
 800a450:	4620      	mov	r0, r4
 800a452:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a456:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a45a:	b91e      	cbnz	r6, 800a464 <__strtok_r+0x20>
 800a45c:	b965      	cbnz	r5, 800a478 <__strtok_r+0x34>
 800a45e:	4628      	mov	r0, r5
 800a460:	6015      	str	r5, [r2, #0]
 800a462:	e005      	b.n	800a470 <__strtok_r+0x2c>
 800a464:	42b5      	cmp	r5, r6
 800a466:	d1f6      	bne.n	800a456 <__strtok_r+0x12>
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1f0      	bne.n	800a44e <__strtok_r+0xa>
 800a46c:	6014      	str	r4, [r2, #0]
 800a46e:	7003      	strb	r3, [r0, #0]
 800a470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a472:	461c      	mov	r4, r3
 800a474:	e00c      	b.n	800a490 <__strtok_r+0x4c>
 800a476:	b915      	cbnz	r5, 800a47e <__strtok_r+0x3a>
 800a478:	460e      	mov	r6, r1
 800a47a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a47e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a482:	42ab      	cmp	r3, r5
 800a484:	d1f7      	bne.n	800a476 <__strtok_r+0x32>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0f3      	beq.n	800a472 <__strtok_r+0x2e>
 800a48a:	2300      	movs	r3, #0
 800a48c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a490:	6014      	str	r4, [r2, #0]
 800a492:	e7ed      	b.n	800a470 <__strtok_r+0x2c>

0800a494 <_strtol_l.constprop.0>:
 800a494:	2b01      	cmp	r3, #1
 800a496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49a:	4680      	mov	r8, r0
 800a49c:	d001      	beq.n	800a4a2 <_strtol_l.constprop.0+0xe>
 800a49e:	2b24      	cmp	r3, #36	; 0x24
 800a4a0:	d906      	bls.n	800a4b0 <_strtol_l.constprop.0+0x1c>
 800a4a2:	f7ff ff25 	bl	800a2f0 <__errno>
 800a4a6:	2316      	movs	r3, #22
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	4f35      	ldr	r7, [pc, #212]	; (800a588 <_strtol_l.constprop.0+0xf4>)
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4ba:	5de6      	ldrb	r6, [r4, r7]
 800a4bc:	f016 0608 	ands.w	r6, r6, #8
 800a4c0:	d1f8      	bne.n	800a4b4 <_strtol_l.constprop.0+0x20>
 800a4c2:	2c2d      	cmp	r4, #45	; 0x2d
 800a4c4:	d12f      	bne.n	800a526 <_strtol_l.constprop.0+0x92>
 800a4c6:	2601      	movs	r6, #1
 800a4c8:	782c      	ldrb	r4, [r5, #0]
 800a4ca:	1c85      	adds	r5, r0, #2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d057      	beq.n	800a580 <_strtol_l.constprop.0+0xec>
 800a4d0:	2b10      	cmp	r3, #16
 800a4d2:	d109      	bne.n	800a4e8 <_strtol_l.constprop.0+0x54>
 800a4d4:	2c30      	cmp	r4, #48	; 0x30
 800a4d6:	d107      	bne.n	800a4e8 <_strtol_l.constprop.0+0x54>
 800a4d8:	7828      	ldrb	r0, [r5, #0]
 800a4da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a4de:	2858      	cmp	r0, #88	; 0x58
 800a4e0:	d149      	bne.n	800a576 <_strtol_l.constprop.0+0xe2>
 800a4e2:	2310      	movs	r3, #16
 800a4e4:	786c      	ldrb	r4, [r5, #1]
 800a4e6:	3502      	adds	r5, #2
 800a4e8:	2700      	movs	r7, #0
 800a4ea:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a4ee:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a4f2:	fbbe f9f3 	udiv	r9, lr, r3
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a4fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a500:	f1bc 0f09 	cmp.w	ip, #9
 800a504:	d814      	bhi.n	800a530 <_strtol_l.constprop.0+0x9c>
 800a506:	4664      	mov	r4, ip
 800a508:	42a3      	cmp	r3, r4
 800a50a:	dd22      	ble.n	800a552 <_strtol_l.constprop.0+0xbe>
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	db1d      	blt.n	800a54c <_strtol_l.constprop.0+0xb8>
 800a510:	4581      	cmp	r9, r0
 800a512:	d31b      	bcc.n	800a54c <_strtol_l.constprop.0+0xb8>
 800a514:	d101      	bne.n	800a51a <_strtol_l.constprop.0+0x86>
 800a516:	45a2      	cmp	sl, r4
 800a518:	db18      	blt.n	800a54c <_strtol_l.constprop.0+0xb8>
 800a51a:	2701      	movs	r7, #1
 800a51c:	fb00 4003 	mla	r0, r0, r3, r4
 800a520:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a524:	e7ea      	b.n	800a4fc <_strtol_l.constprop.0+0x68>
 800a526:	2c2b      	cmp	r4, #43	; 0x2b
 800a528:	bf04      	itt	eq
 800a52a:	782c      	ldrbeq	r4, [r5, #0]
 800a52c:	1c85      	addeq	r5, r0, #2
 800a52e:	e7cd      	b.n	800a4cc <_strtol_l.constprop.0+0x38>
 800a530:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a534:	f1bc 0f19 	cmp.w	ip, #25
 800a538:	d801      	bhi.n	800a53e <_strtol_l.constprop.0+0xaa>
 800a53a:	3c37      	subs	r4, #55	; 0x37
 800a53c:	e7e4      	b.n	800a508 <_strtol_l.constprop.0+0x74>
 800a53e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a542:	f1bc 0f19 	cmp.w	ip, #25
 800a546:	d804      	bhi.n	800a552 <_strtol_l.constprop.0+0xbe>
 800a548:	3c57      	subs	r4, #87	; 0x57
 800a54a:	e7dd      	b.n	800a508 <_strtol_l.constprop.0+0x74>
 800a54c:	f04f 37ff 	mov.w	r7, #4294967295
 800a550:	e7e6      	b.n	800a520 <_strtol_l.constprop.0+0x8c>
 800a552:	2f00      	cmp	r7, #0
 800a554:	da07      	bge.n	800a566 <_strtol_l.constprop.0+0xd2>
 800a556:	2322      	movs	r3, #34	; 0x22
 800a558:	4670      	mov	r0, lr
 800a55a:	f8c8 3000 	str.w	r3, [r8]
 800a55e:	2a00      	cmp	r2, #0
 800a560:	d0a4      	beq.n	800a4ac <_strtol_l.constprop.0+0x18>
 800a562:	1e69      	subs	r1, r5, #1
 800a564:	e005      	b.n	800a572 <_strtol_l.constprop.0+0xde>
 800a566:	b106      	cbz	r6, 800a56a <_strtol_l.constprop.0+0xd6>
 800a568:	4240      	negs	r0, r0
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	d09e      	beq.n	800a4ac <_strtol_l.constprop.0+0x18>
 800a56e:	2f00      	cmp	r7, #0
 800a570:	d1f7      	bne.n	800a562 <_strtol_l.constprop.0+0xce>
 800a572:	6011      	str	r1, [r2, #0]
 800a574:	e79a      	b.n	800a4ac <_strtol_l.constprop.0+0x18>
 800a576:	2430      	movs	r4, #48	; 0x30
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1b5      	bne.n	800a4e8 <_strtol_l.constprop.0+0x54>
 800a57c:	2308      	movs	r3, #8
 800a57e:	e7b3      	b.n	800a4e8 <_strtol_l.constprop.0+0x54>
 800a580:	2c30      	cmp	r4, #48	; 0x30
 800a582:	d0a9      	beq.n	800a4d8 <_strtol_l.constprop.0+0x44>
 800a584:	230a      	movs	r3, #10
 800a586:	e7af      	b.n	800a4e8 <_strtol_l.constprop.0+0x54>
 800a588:	0800bf85 	.word	0x0800bf85

0800a58c <strtol>:
 800a58c:	4613      	mov	r3, r2
 800a58e:	460a      	mov	r2, r1
 800a590:	4601      	mov	r1, r0
 800a592:	4802      	ldr	r0, [pc, #8]	; (800a59c <strtol+0x10>)
 800a594:	6800      	ldr	r0, [r0, #0]
 800a596:	f7ff bf7d 	b.w	800a494 <_strtol_l.constprop.0>
 800a59a:	bf00      	nop
 800a59c:	20000444 	.word	0x20000444

0800a5a0 <__assert_func>:
 800a5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5a2:	4614      	mov	r4, r2
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <__assert_func+0x2c>)
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68d8      	ldr	r0, [r3, #12]
 800a5ae:	b14c      	cbz	r4, 800a5c4 <__assert_func+0x24>
 800a5b0:	4b07      	ldr	r3, [pc, #28]	; (800a5d0 <__assert_func+0x30>)
 800a5b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5b6:	9100      	str	r1, [sp, #0]
 800a5b8:	462b      	mov	r3, r5
 800a5ba:	4906      	ldr	r1, [pc, #24]	; (800a5d4 <__assert_func+0x34>)
 800a5bc:	f000 f80e 	bl	800a5dc <fiprintf>
 800a5c0:	f000 fe1c 	bl	800b1fc <abort>
 800a5c4:	4b04      	ldr	r3, [pc, #16]	; (800a5d8 <__assert_func+0x38>)
 800a5c6:	461c      	mov	r4, r3
 800a5c8:	e7f3      	b.n	800a5b2 <__assert_func+0x12>
 800a5ca:	bf00      	nop
 800a5cc:	20000444 	.word	0x20000444
 800a5d0:	0800bf48 	.word	0x0800bf48
 800a5d4:	0800bf55 	.word	0x0800bf55
 800a5d8:	0800bf83 	.word	0x0800bf83

0800a5dc <fiprintf>:
 800a5dc:	b40e      	push	{r1, r2, r3}
 800a5de:	b503      	push	{r0, r1, lr}
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	ab03      	add	r3, sp, #12
 800a5e4:	4805      	ldr	r0, [pc, #20]	; (800a5fc <fiprintf+0x20>)
 800a5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ea:	6800      	ldr	r0, [r0, #0]
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	f000 fa6f 	bl	800aad0 <_vfiprintf_r>
 800a5f2:	b002      	add	sp, #8
 800a5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f8:	b003      	add	sp, #12
 800a5fa:	4770      	bx	lr
 800a5fc:	20000444 	.word	0x20000444

0800a600 <malloc>:
 800a600:	4b02      	ldr	r3, [pc, #8]	; (800a60c <malloc+0xc>)
 800a602:	4601      	mov	r1, r0
 800a604:	6818      	ldr	r0, [r3, #0]
 800a606:	f000 b86b 	b.w	800a6e0 <_malloc_r>
 800a60a:	bf00      	nop
 800a60c:	20000444 	.word	0x20000444

0800a610 <_free_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4605      	mov	r5, r0
 800a614:	2900      	cmp	r1, #0
 800a616:	d040      	beq.n	800a69a <_free_r+0x8a>
 800a618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a61c:	1f0c      	subs	r4, r1, #4
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bfb8      	it	lt
 800a622:	18e4      	addlt	r4, r4, r3
 800a624:	f001 f844 	bl	800b6b0 <__malloc_lock>
 800a628:	4a1c      	ldr	r2, [pc, #112]	; (800a69c <_free_r+0x8c>)
 800a62a:	6813      	ldr	r3, [r2, #0]
 800a62c:	b933      	cbnz	r3, 800a63c <_free_r+0x2c>
 800a62e:	6063      	str	r3, [r4, #4]
 800a630:	6014      	str	r4, [r2, #0]
 800a632:	4628      	mov	r0, r5
 800a634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a638:	f001 b840 	b.w	800b6bc <__malloc_unlock>
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	d908      	bls.n	800a652 <_free_r+0x42>
 800a640:	6820      	ldr	r0, [r4, #0]
 800a642:	1821      	adds	r1, r4, r0
 800a644:	428b      	cmp	r3, r1
 800a646:	bf01      	itttt	eq
 800a648:	6819      	ldreq	r1, [r3, #0]
 800a64a:	685b      	ldreq	r3, [r3, #4]
 800a64c:	1809      	addeq	r1, r1, r0
 800a64e:	6021      	streq	r1, [r4, #0]
 800a650:	e7ed      	b.n	800a62e <_free_r+0x1e>
 800a652:	461a      	mov	r2, r3
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	b10b      	cbz	r3, 800a65c <_free_r+0x4c>
 800a658:	42a3      	cmp	r3, r4
 800a65a:	d9fa      	bls.n	800a652 <_free_r+0x42>
 800a65c:	6811      	ldr	r1, [r2, #0]
 800a65e:	1850      	adds	r0, r2, r1
 800a660:	42a0      	cmp	r0, r4
 800a662:	d10b      	bne.n	800a67c <_free_r+0x6c>
 800a664:	6820      	ldr	r0, [r4, #0]
 800a666:	4401      	add	r1, r0
 800a668:	1850      	adds	r0, r2, r1
 800a66a:	4283      	cmp	r3, r0
 800a66c:	6011      	str	r1, [r2, #0]
 800a66e:	d1e0      	bne.n	800a632 <_free_r+0x22>
 800a670:	6818      	ldr	r0, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	4401      	add	r1, r0
 800a676:	6011      	str	r1, [r2, #0]
 800a678:	6053      	str	r3, [r2, #4]
 800a67a:	e7da      	b.n	800a632 <_free_r+0x22>
 800a67c:	d902      	bls.n	800a684 <_free_r+0x74>
 800a67e:	230c      	movs	r3, #12
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	e7d6      	b.n	800a632 <_free_r+0x22>
 800a684:	6820      	ldr	r0, [r4, #0]
 800a686:	1821      	adds	r1, r4, r0
 800a688:	428b      	cmp	r3, r1
 800a68a:	bf01      	itttt	eq
 800a68c:	6819      	ldreq	r1, [r3, #0]
 800a68e:	685b      	ldreq	r3, [r3, #4]
 800a690:	1809      	addeq	r1, r1, r0
 800a692:	6021      	streq	r1, [r4, #0]
 800a694:	6063      	str	r3, [r4, #4]
 800a696:	6054      	str	r4, [r2, #4]
 800a698:	e7cb      	b.n	800a632 <_free_r+0x22>
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20004c08 	.word	0x20004c08

0800a6a0 <sbrk_aligned>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	4e0e      	ldr	r6, [pc, #56]	; (800a6dc <sbrk_aligned+0x3c>)
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	6831      	ldr	r1, [r6, #0]
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	b911      	cbnz	r1, 800a6b2 <sbrk_aligned+0x12>
 800a6ac:	f000 fcd6 	bl	800b05c <_sbrk_r>
 800a6b0:	6030      	str	r0, [r6, #0]
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f000 fcd1 	bl	800b05c <_sbrk_r>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d00a      	beq.n	800a6d4 <sbrk_aligned+0x34>
 800a6be:	1cc4      	adds	r4, r0, #3
 800a6c0:	f024 0403 	bic.w	r4, r4, #3
 800a6c4:	42a0      	cmp	r0, r4
 800a6c6:	d007      	beq.n	800a6d8 <sbrk_aligned+0x38>
 800a6c8:	1a21      	subs	r1, r4, r0
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f000 fcc6 	bl	800b05c <_sbrk_r>
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	d101      	bne.n	800a6d8 <sbrk_aligned+0x38>
 800a6d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a6d8:	4620      	mov	r0, r4
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
 800a6dc:	20004c0c 	.word	0x20004c0c

0800a6e0 <_malloc_r>:
 800a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	1ccd      	adds	r5, r1, #3
 800a6e6:	f025 0503 	bic.w	r5, r5, #3
 800a6ea:	3508      	adds	r5, #8
 800a6ec:	2d0c      	cmp	r5, #12
 800a6ee:	bf38      	it	cc
 800a6f0:	250c      	movcc	r5, #12
 800a6f2:	2d00      	cmp	r5, #0
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	db01      	blt.n	800a6fc <_malloc_r+0x1c>
 800a6f8:	42a9      	cmp	r1, r5
 800a6fa:	d905      	bls.n	800a708 <_malloc_r+0x28>
 800a6fc:	230c      	movs	r3, #12
 800a6fe:	2600      	movs	r6, #0
 800a700:	603b      	str	r3, [r7, #0]
 800a702:	4630      	mov	r0, r6
 800a704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a708:	4e2e      	ldr	r6, [pc, #184]	; (800a7c4 <_malloc_r+0xe4>)
 800a70a:	f000 ffd1 	bl	800b6b0 <__malloc_lock>
 800a70e:	6833      	ldr	r3, [r6, #0]
 800a710:	461c      	mov	r4, r3
 800a712:	bb34      	cbnz	r4, 800a762 <_malloc_r+0x82>
 800a714:	4629      	mov	r1, r5
 800a716:	4638      	mov	r0, r7
 800a718:	f7ff ffc2 	bl	800a6a0 <sbrk_aligned>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	4604      	mov	r4, r0
 800a720:	d14d      	bne.n	800a7be <_malloc_r+0xde>
 800a722:	6834      	ldr	r4, [r6, #0]
 800a724:	4626      	mov	r6, r4
 800a726:	2e00      	cmp	r6, #0
 800a728:	d140      	bne.n	800a7ac <_malloc_r+0xcc>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	4631      	mov	r1, r6
 800a72e:	4638      	mov	r0, r7
 800a730:	eb04 0803 	add.w	r8, r4, r3
 800a734:	f000 fc92 	bl	800b05c <_sbrk_r>
 800a738:	4580      	cmp	r8, r0
 800a73a:	d13a      	bne.n	800a7b2 <_malloc_r+0xd2>
 800a73c:	6821      	ldr	r1, [r4, #0]
 800a73e:	3503      	adds	r5, #3
 800a740:	1a6d      	subs	r5, r5, r1
 800a742:	f025 0503 	bic.w	r5, r5, #3
 800a746:	3508      	adds	r5, #8
 800a748:	2d0c      	cmp	r5, #12
 800a74a:	bf38      	it	cc
 800a74c:	250c      	movcc	r5, #12
 800a74e:	4638      	mov	r0, r7
 800a750:	4629      	mov	r1, r5
 800a752:	f7ff ffa5 	bl	800a6a0 <sbrk_aligned>
 800a756:	3001      	adds	r0, #1
 800a758:	d02b      	beq.n	800a7b2 <_malloc_r+0xd2>
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	442b      	add	r3, r5
 800a75e:	6023      	str	r3, [r4, #0]
 800a760:	e00e      	b.n	800a780 <_malloc_r+0xa0>
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	1b52      	subs	r2, r2, r5
 800a766:	d41e      	bmi.n	800a7a6 <_malloc_r+0xc6>
 800a768:	2a0b      	cmp	r2, #11
 800a76a:	d916      	bls.n	800a79a <_malloc_r+0xba>
 800a76c:	1961      	adds	r1, r4, r5
 800a76e:	42a3      	cmp	r3, r4
 800a770:	6025      	str	r5, [r4, #0]
 800a772:	bf18      	it	ne
 800a774:	6059      	strne	r1, [r3, #4]
 800a776:	6863      	ldr	r3, [r4, #4]
 800a778:	bf08      	it	eq
 800a77a:	6031      	streq	r1, [r6, #0]
 800a77c:	5162      	str	r2, [r4, r5]
 800a77e:	604b      	str	r3, [r1, #4]
 800a780:	4638      	mov	r0, r7
 800a782:	f104 060b 	add.w	r6, r4, #11
 800a786:	f000 ff99 	bl	800b6bc <__malloc_unlock>
 800a78a:	f026 0607 	bic.w	r6, r6, #7
 800a78e:	1d23      	adds	r3, r4, #4
 800a790:	1af2      	subs	r2, r6, r3
 800a792:	d0b6      	beq.n	800a702 <_malloc_r+0x22>
 800a794:	1b9b      	subs	r3, r3, r6
 800a796:	50a3      	str	r3, [r4, r2]
 800a798:	e7b3      	b.n	800a702 <_malloc_r+0x22>
 800a79a:	6862      	ldr	r2, [r4, #4]
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	bf0c      	ite	eq
 800a7a0:	6032      	streq	r2, [r6, #0]
 800a7a2:	605a      	strne	r2, [r3, #4]
 800a7a4:	e7ec      	b.n	800a780 <_malloc_r+0xa0>
 800a7a6:	4623      	mov	r3, r4
 800a7a8:	6864      	ldr	r4, [r4, #4]
 800a7aa:	e7b2      	b.n	800a712 <_malloc_r+0x32>
 800a7ac:	4634      	mov	r4, r6
 800a7ae:	6876      	ldr	r6, [r6, #4]
 800a7b0:	e7b9      	b.n	800a726 <_malloc_r+0x46>
 800a7b2:	230c      	movs	r3, #12
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	f000 ff80 	bl	800b6bc <__malloc_unlock>
 800a7bc:	e7a1      	b.n	800a702 <_malloc_r+0x22>
 800a7be:	6025      	str	r5, [r4, #0]
 800a7c0:	e7de      	b.n	800a780 <_malloc_r+0xa0>
 800a7c2:	bf00      	nop
 800a7c4:	20004c08 	.word	0x20004c08

0800a7c8 <__ssputs_r>:
 800a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7cc:	688e      	ldr	r6, [r1, #8]
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	429e      	cmp	r6, r3
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	4690      	mov	r8, r2
 800a7d6:	461f      	mov	r7, r3
 800a7d8:	d838      	bhi.n	800a84c <__ssputs_r+0x84>
 800a7da:	898a      	ldrh	r2, [r1, #12]
 800a7dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7e0:	d032      	beq.n	800a848 <__ssputs_r+0x80>
 800a7e2:	6825      	ldr	r5, [r4, #0]
 800a7e4:	6909      	ldr	r1, [r1, #16]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	eba5 0901 	sub.w	r9, r5, r1
 800a7ec:	6965      	ldr	r5, [r4, #20]
 800a7ee:	444b      	add	r3, r9
 800a7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7f8:	106d      	asrs	r5, r5, #1
 800a7fa:	429d      	cmp	r5, r3
 800a7fc:	bf38      	it	cc
 800a7fe:	461d      	movcc	r5, r3
 800a800:	0553      	lsls	r3, r2, #21
 800a802:	d531      	bpl.n	800a868 <__ssputs_r+0xa0>
 800a804:	4629      	mov	r1, r5
 800a806:	f7ff ff6b 	bl	800a6e0 <_malloc_r>
 800a80a:	4606      	mov	r6, r0
 800a80c:	b950      	cbnz	r0, 800a824 <__ssputs_r+0x5c>
 800a80e:	230c      	movs	r3, #12
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	f8ca 3000 	str.w	r3, [sl]
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a81e:	81a3      	strh	r3, [r4, #12]
 800a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a824:	464a      	mov	r2, r9
 800a826:	6921      	ldr	r1, [r4, #16]
 800a828:	f000 ff1a 	bl	800b660 <memcpy>
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	6126      	str	r6, [r4, #16]
 800a83a:	444e      	add	r6, r9
 800a83c:	6026      	str	r6, [r4, #0]
 800a83e:	463e      	mov	r6, r7
 800a840:	6165      	str	r5, [r4, #20]
 800a842:	eba5 0509 	sub.w	r5, r5, r9
 800a846:	60a5      	str	r5, [r4, #8]
 800a848:	42be      	cmp	r6, r7
 800a84a:	d900      	bls.n	800a84e <__ssputs_r+0x86>
 800a84c:	463e      	mov	r6, r7
 800a84e:	4632      	mov	r2, r6
 800a850:	4641      	mov	r1, r8
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	f000 ff12 	bl	800b67c <memmove>
 800a858:	68a3      	ldr	r3, [r4, #8]
 800a85a:	2000      	movs	r0, #0
 800a85c:	1b9b      	subs	r3, r3, r6
 800a85e:	60a3      	str	r3, [r4, #8]
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	4433      	add	r3, r6
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	e7db      	b.n	800a820 <__ssputs_r+0x58>
 800a868:	462a      	mov	r2, r5
 800a86a:	f000 ff2d 	bl	800b6c8 <_realloc_r>
 800a86e:	4606      	mov	r6, r0
 800a870:	2800      	cmp	r0, #0
 800a872:	d1e1      	bne.n	800a838 <__ssputs_r+0x70>
 800a874:	4650      	mov	r0, sl
 800a876:	6921      	ldr	r1, [r4, #16]
 800a878:	f7ff feca 	bl	800a610 <_free_r>
 800a87c:	e7c7      	b.n	800a80e <__ssputs_r+0x46>
	...

0800a880 <_svfiprintf_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	4698      	mov	r8, r3
 800a886:	898b      	ldrh	r3, [r1, #12]
 800a888:	4607      	mov	r7, r0
 800a88a:	061b      	lsls	r3, r3, #24
 800a88c:	460d      	mov	r5, r1
 800a88e:	4614      	mov	r4, r2
 800a890:	b09d      	sub	sp, #116	; 0x74
 800a892:	d50e      	bpl.n	800a8b2 <_svfiprintf_r+0x32>
 800a894:	690b      	ldr	r3, [r1, #16]
 800a896:	b963      	cbnz	r3, 800a8b2 <_svfiprintf_r+0x32>
 800a898:	2140      	movs	r1, #64	; 0x40
 800a89a:	f7ff ff21 	bl	800a6e0 <_malloc_r>
 800a89e:	6028      	str	r0, [r5, #0]
 800a8a0:	6128      	str	r0, [r5, #16]
 800a8a2:	b920      	cbnz	r0, 800a8ae <_svfiprintf_r+0x2e>
 800a8a4:	230c      	movs	r3, #12
 800a8a6:	603b      	str	r3, [r7, #0]
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	e0d1      	b.n	800aa52 <_svfiprintf_r+0x1d2>
 800a8ae:	2340      	movs	r3, #64	; 0x40
 800a8b0:	616b      	str	r3, [r5, #20]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b6:	2320      	movs	r3, #32
 800a8b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8bc:	2330      	movs	r3, #48	; 0x30
 800a8be:	f04f 0901 	mov.w	r9, #1
 800a8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa6c <_svfiprintf_r+0x1ec>
 800a8ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8ce:	4623      	mov	r3, r4
 800a8d0:	469a      	mov	sl, r3
 800a8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8d6:	b10a      	cbz	r2, 800a8dc <_svfiprintf_r+0x5c>
 800a8d8:	2a25      	cmp	r2, #37	; 0x25
 800a8da:	d1f9      	bne.n	800a8d0 <_svfiprintf_r+0x50>
 800a8dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a8e0:	d00b      	beq.n	800a8fa <_svfiprintf_r+0x7a>
 800a8e2:	465b      	mov	r3, fp
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7ff ff6d 	bl	800a7c8 <__ssputs_r>
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	f000 80aa 	beq.w	800aa48 <_svfiprintf_r+0x1c8>
 800a8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f6:	445a      	add	r2, fp
 800a8f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 80a2 	beq.w	800aa48 <_svfiprintf_r+0x1c8>
 800a904:	2300      	movs	r3, #0
 800a906:	f04f 32ff 	mov.w	r2, #4294967295
 800a90a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a90e:	f10a 0a01 	add.w	sl, sl, #1
 800a912:	9304      	str	r3, [sp, #16]
 800a914:	9307      	str	r3, [sp, #28]
 800a916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a91a:	931a      	str	r3, [sp, #104]	; 0x68
 800a91c:	4654      	mov	r4, sl
 800a91e:	2205      	movs	r2, #5
 800a920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a924:	4851      	ldr	r0, [pc, #324]	; (800aa6c <_svfiprintf_r+0x1ec>)
 800a926:	f000 fe8d 	bl	800b644 <memchr>
 800a92a:	9a04      	ldr	r2, [sp, #16]
 800a92c:	b9d8      	cbnz	r0, 800a966 <_svfiprintf_r+0xe6>
 800a92e:	06d0      	lsls	r0, r2, #27
 800a930:	bf44      	itt	mi
 800a932:	2320      	movmi	r3, #32
 800a934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a938:	0711      	lsls	r1, r2, #28
 800a93a:	bf44      	itt	mi
 800a93c:	232b      	movmi	r3, #43	; 0x2b
 800a93e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a942:	f89a 3000 	ldrb.w	r3, [sl]
 800a946:	2b2a      	cmp	r3, #42	; 0x2a
 800a948:	d015      	beq.n	800a976 <_svfiprintf_r+0xf6>
 800a94a:	4654      	mov	r4, sl
 800a94c:	2000      	movs	r0, #0
 800a94e:	f04f 0c0a 	mov.w	ip, #10
 800a952:	9a07      	ldr	r2, [sp, #28]
 800a954:	4621      	mov	r1, r4
 800a956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a95a:	3b30      	subs	r3, #48	; 0x30
 800a95c:	2b09      	cmp	r3, #9
 800a95e:	d94e      	bls.n	800a9fe <_svfiprintf_r+0x17e>
 800a960:	b1b0      	cbz	r0, 800a990 <_svfiprintf_r+0x110>
 800a962:	9207      	str	r2, [sp, #28]
 800a964:	e014      	b.n	800a990 <_svfiprintf_r+0x110>
 800a966:	eba0 0308 	sub.w	r3, r0, r8
 800a96a:	fa09 f303 	lsl.w	r3, r9, r3
 800a96e:	4313      	orrs	r3, r2
 800a970:	46a2      	mov	sl, r4
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	e7d2      	b.n	800a91c <_svfiprintf_r+0x9c>
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	1d19      	adds	r1, r3, #4
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	9103      	str	r1, [sp, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	bfbb      	ittet	lt
 800a982:	425b      	neglt	r3, r3
 800a984:	f042 0202 	orrlt.w	r2, r2, #2
 800a988:	9307      	strge	r3, [sp, #28]
 800a98a:	9307      	strlt	r3, [sp, #28]
 800a98c:	bfb8      	it	lt
 800a98e:	9204      	strlt	r2, [sp, #16]
 800a990:	7823      	ldrb	r3, [r4, #0]
 800a992:	2b2e      	cmp	r3, #46	; 0x2e
 800a994:	d10c      	bne.n	800a9b0 <_svfiprintf_r+0x130>
 800a996:	7863      	ldrb	r3, [r4, #1]
 800a998:	2b2a      	cmp	r3, #42	; 0x2a
 800a99a:	d135      	bne.n	800aa08 <_svfiprintf_r+0x188>
 800a99c:	9b03      	ldr	r3, [sp, #12]
 800a99e:	3402      	adds	r4, #2
 800a9a0:	1d1a      	adds	r2, r3, #4
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	9203      	str	r2, [sp, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	bfb8      	it	lt
 800a9aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9ae:	9305      	str	r3, [sp, #20]
 800a9b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800aa70 <_svfiprintf_r+0x1f0>
 800a9b4:	2203      	movs	r2, #3
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	7821      	ldrb	r1, [r4, #0]
 800a9ba:	f000 fe43 	bl	800b644 <memchr>
 800a9be:	b140      	cbz	r0, 800a9d2 <_svfiprintf_r+0x152>
 800a9c0:	2340      	movs	r3, #64	; 0x40
 800a9c2:	eba0 000a 	sub.w	r0, r0, sl
 800a9c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	3401      	adds	r4, #1
 800a9ce:	4303      	orrs	r3, r0
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d6:	2206      	movs	r2, #6
 800a9d8:	4826      	ldr	r0, [pc, #152]	; (800aa74 <_svfiprintf_r+0x1f4>)
 800a9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9de:	f000 fe31 	bl	800b644 <memchr>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d038      	beq.n	800aa58 <_svfiprintf_r+0x1d8>
 800a9e6:	4b24      	ldr	r3, [pc, #144]	; (800aa78 <_svfiprintf_r+0x1f8>)
 800a9e8:	bb1b      	cbnz	r3, 800aa32 <_svfiprintf_r+0x1b2>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	3307      	adds	r3, #7
 800a9ee:	f023 0307 	bic.w	r3, r3, #7
 800a9f2:	3308      	adds	r3, #8
 800a9f4:	9303      	str	r3, [sp, #12]
 800a9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f8:	4433      	add	r3, r6
 800a9fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a9fc:	e767      	b.n	800a8ce <_svfiprintf_r+0x4e>
 800a9fe:	460c      	mov	r4, r1
 800aa00:	2001      	movs	r0, #1
 800aa02:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa06:	e7a5      	b.n	800a954 <_svfiprintf_r+0xd4>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f04f 0c0a 	mov.w	ip, #10
 800aa0e:	4619      	mov	r1, r3
 800aa10:	3401      	adds	r4, #1
 800aa12:	9305      	str	r3, [sp, #20]
 800aa14:	4620      	mov	r0, r4
 800aa16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa1a:	3a30      	subs	r2, #48	; 0x30
 800aa1c:	2a09      	cmp	r2, #9
 800aa1e:	d903      	bls.n	800aa28 <_svfiprintf_r+0x1a8>
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0c5      	beq.n	800a9b0 <_svfiprintf_r+0x130>
 800aa24:	9105      	str	r1, [sp, #20]
 800aa26:	e7c3      	b.n	800a9b0 <_svfiprintf_r+0x130>
 800aa28:	4604      	mov	r4, r0
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa30:	e7f0      	b.n	800aa14 <_svfiprintf_r+0x194>
 800aa32:	ab03      	add	r3, sp, #12
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	462a      	mov	r2, r5
 800aa38:	4638      	mov	r0, r7
 800aa3a:	4b10      	ldr	r3, [pc, #64]	; (800aa7c <_svfiprintf_r+0x1fc>)
 800aa3c:	a904      	add	r1, sp, #16
 800aa3e:	f3af 8000 	nop.w
 800aa42:	1c42      	adds	r2, r0, #1
 800aa44:	4606      	mov	r6, r0
 800aa46:	d1d6      	bne.n	800a9f6 <_svfiprintf_r+0x176>
 800aa48:	89ab      	ldrh	r3, [r5, #12]
 800aa4a:	065b      	lsls	r3, r3, #25
 800aa4c:	f53f af2c 	bmi.w	800a8a8 <_svfiprintf_r+0x28>
 800aa50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa52:	b01d      	add	sp, #116	; 0x74
 800aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa58:	ab03      	add	r3, sp, #12
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	462a      	mov	r2, r5
 800aa5e:	4638      	mov	r0, r7
 800aa60:	4b06      	ldr	r3, [pc, #24]	; (800aa7c <_svfiprintf_r+0x1fc>)
 800aa62:	a904      	add	r1, sp, #16
 800aa64:	f000 f9d4 	bl	800ae10 <_printf_i>
 800aa68:	e7eb      	b.n	800aa42 <_svfiprintf_r+0x1c2>
 800aa6a:	bf00      	nop
 800aa6c:	0800c085 	.word	0x0800c085
 800aa70:	0800c08b 	.word	0x0800c08b
 800aa74:	0800c08f 	.word	0x0800c08f
 800aa78:	00000000 	.word	0x00000000
 800aa7c:	0800a7c9 	.word	0x0800a7c9

0800aa80 <__sfputc_r>:
 800aa80:	6893      	ldr	r3, [r2, #8]
 800aa82:	b410      	push	{r4}
 800aa84:	3b01      	subs	r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	6093      	str	r3, [r2, #8]
 800aa8a:	da07      	bge.n	800aa9c <__sfputc_r+0x1c>
 800aa8c:	6994      	ldr	r4, [r2, #24]
 800aa8e:	42a3      	cmp	r3, r4
 800aa90:	db01      	blt.n	800aa96 <__sfputc_r+0x16>
 800aa92:	290a      	cmp	r1, #10
 800aa94:	d102      	bne.n	800aa9c <__sfputc_r+0x1c>
 800aa96:	bc10      	pop	{r4}
 800aa98:	f000 baf0 	b.w	800b07c <__swbuf_r>
 800aa9c:	6813      	ldr	r3, [r2, #0]
 800aa9e:	1c58      	adds	r0, r3, #1
 800aaa0:	6010      	str	r0, [r2, #0]
 800aaa2:	7019      	strb	r1, [r3, #0]
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	bc10      	pop	{r4}
 800aaa8:	4770      	bx	lr

0800aaaa <__sfputs_r>:
 800aaaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaac:	4606      	mov	r6, r0
 800aaae:	460f      	mov	r7, r1
 800aab0:	4614      	mov	r4, r2
 800aab2:	18d5      	adds	r5, r2, r3
 800aab4:	42ac      	cmp	r4, r5
 800aab6:	d101      	bne.n	800aabc <__sfputs_r+0x12>
 800aab8:	2000      	movs	r0, #0
 800aaba:	e007      	b.n	800aacc <__sfputs_r+0x22>
 800aabc:	463a      	mov	r2, r7
 800aabe:	4630      	mov	r0, r6
 800aac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac4:	f7ff ffdc 	bl	800aa80 <__sfputc_r>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d1f3      	bne.n	800aab4 <__sfputs_r+0xa>
 800aacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aad0 <_vfiprintf_r>:
 800aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	460d      	mov	r5, r1
 800aad6:	4614      	mov	r4, r2
 800aad8:	4698      	mov	r8, r3
 800aada:	4606      	mov	r6, r0
 800aadc:	b09d      	sub	sp, #116	; 0x74
 800aade:	b118      	cbz	r0, 800aae8 <_vfiprintf_r+0x18>
 800aae0:	6983      	ldr	r3, [r0, #24]
 800aae2:	b90b      	cbnz	r3, 800aae8 <_vfiprintf_r+0x18>
 800aae4:	f000 fca8 	bl	800b438 <__sinit>
 800aae8:	4b89      	ldr	r3, [pc, #548]	; (800ad10 <_vfiprintf_r+0x240>)
 800aaea:	429d      	cmp	r5, r3
 800aaec:	d11b      	bne.n	800ab26 <_vfiprintf_r+0x56>
 800aaee:	6875      	ldr	r5, [r6, #4]
 800aaf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaf2:	07d9      	lsls	r1, r3, #31
 800aaf4:	d405      	bmi.n	800ab02 <_vfiprintf_r+0x32>
 800aaf6:	89ab      	ldrh	r3, [r5, #12]
 800aaf8:	059a      	lsls	r2, r3, #22
 800aafa:	d402      	bmi.n	800ab02 <_vfiprintf_r+0x32>
 800aafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aafe:	f000 fd39 	bl	800b574 <__retarget_lock_acquire_recursive>
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	071b      	lsls	r3, r3, #28
 800ab06:	d501      	bpl.n	800ab0c <_vfiprintf_r+0x3c>
 800ab08:	692b      	ldr	r3, [r5, #16]
 800ab0a:	b9eb      	cbnz	r3, 800ab48 <_vfiprintf_r+0x78>
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f000 fb06 	bl	800b120 <__swsetup_r>
 800ab14:	b1c0      	cbz	r0, 800ab48 <_vfiprintf_r+0x78>
 800ab16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab18:	07dc      	lsls	r4, r3, #31
 800ab1a:	d50e      	bpl.n	800ab3a <_vfiprintf_r+0x6a>
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	b01d      	add	sp, #116	; 0x74
 800ab22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab26:	4b7b      	ldr	r3, [pc, #492]	; (800ad14 <_vfiprintf_r+0x244>)
 800ab28:	429d      	cmp	r5, r3
 800ab2a:	d101      	bne.n	800ab30 <_vfiprintf_r+0x60>
 800ab2c:	68b5      	ldr	r5, [r6, #8]
 800ab2e:	e7df      	b.n	800aaf0 <_vfiprintf_r+0x20>
 800ab30:	4b79      	ldr	r3, [pc, #484]	; (800ad18 <_vfiprintf_r+0x248>)
 800ab32:	429d      	cmp	r5, r3
 800ab34:	bf08      	it	eq
 800ab36:	68f5      	ldreq	r5, [r6, #12]
 800ab38:	e7da      	b.n	800aaf0 <_vfiprintf_r+0x20>
 800ab3a:	89ab      	ldrh	r3, [r5, #12]
 800ab3c:	0598      	lsls	r0, r3, #22
 800ab3e:	d4ed      	bmi.n	800ab1c <_vfiprintf_r+0x4c>
 800ab40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab42:	f000 fd18 	bl	800b576 <__retarget_lock_release_recursive>
 800ab46:	e7e9      	b.n	800ab1c <_vfiprintf_r+0x4c>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab4c:	2320      	movs	r3, #32
 800ab4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab52:	2330      	movs	r3, #48	; 0x30
 800ab54:	f04f 0901 	mov.w	r9, #1
 800ab58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab5c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ad1c <_vfiprintf_r+0x24c>
 800ab60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab64:	4623      	mov	r3, r4
 800ab66:	469a      	mov	sl, r3
 800ab68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab6c:	b10a      	cbz	r2, 800ab72 <_vfiprintf_r+0xa2>
 800ab6e:	2a25      	cmp	r2, #37	; 0x25
 800ab70:	d1f9      	bne.n	800ab66 <_vfiprintf_r+0x96>
 800ab72:	ebba 0b04 	subs.w	fp, sl, r4
 800ab76:	d00b      	beq.n	800ab90 <_vfiprintf_r+0xc0>
 800ab78:	465b      	mov	r3, fp
 800ab7a:	4622      	mov	r2, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f7ff ff93 	bl	800aaaa <__sfputs_r>
 800ab84:	3001      	adds	r0, #1
 800ab86:	f000 80aa 	beq.w	800acde <_vfiprintf_r+0x20e>
 800ab8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab8c:	445a      	add	r2, fp
 800ab8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab90:	f89a 3000 	ldrb.w	r3, [sl]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80a2 	beq.w	800acde <_vfiprintf_r+0x20e>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba4:	f10a 0a01 	add.w	sl, sl, #1
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	9307      	str	r3, [sp, #28]
 800abac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abb0:	931a      	str	r3, [sp, #104]	; 0x68
 800abb2:	4654      	mov	r4, sl
 800abb4:	2205      	movs	r2, #5
 800abb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abba:	4858      	ldr	r0, [pc, #352]	; (800ad1c <_vfiprintf_r+0x24c>)
 800abbc:	f000 fd42 	bl	800b644 <memchr>
 800abc0:	9a04      	ldr	r2, [sp, #16]
 800abc2:	b9d8      	cbnz	r0, 800abfc <_vfiprintf_r+0x12c>
 800abc4:	06d1      	lsls	r1, r2, #27
 800abc6:	bf44      	itt	mi
 800abc8:	2320      	movmi	r3, #32
 800abca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abce:	0713      	lsls	r3, r2, #28
 800abd0:	bf44      	itt	mi
 800abd2:	232b      	movmi	r3, #43	; 0x2b
 800abd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abd8:	f89a 3000 	ldrb.w	r3, [sl]
 800abdc:	2b2a      	cmp	r3, #42	; 0x2a
 800abde:	d015      	beq.n	800ac0c <_vfiprintf_r+0x13c>
 800abe0:	4654      	mov	r4, sl
 800abe2:	2000      	movs	r0, #0
 800abe4:	f04f 0c0a 	mov.w	ip, #10
 800abe8:	9a07      	ldr	r2, [sp, #28]
 800abea:	4621      	mov	r1, r4
 800abec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abf0:	3b30      	subs	r3, #48	; 0x30
 800abf2:	2b09      	cmp	r3, #9
 800abf4:	d94e      	bls.n	800ac94 <_vfiprintf_r+0x1c4>
 800abf6:	b1b0      	cbz	r0, 800ac26 <_vfiprintf_r+0x156>
 800abf8:	9207      	str	r2, [sp, #28]
 800abfa:	e014      	b.n	800ac26 <_vfiprintf_r+0x156>
 800abfc:	eba0 0308 	sub.w	r3, r0, r8
 800ac00:	fa09 f303 	lsl.w	r3, r9, r3
 800ac04:	4313      	orrs	r3, r2
 800ac06:	46a2      	mov	sl, r4
 800ac08:	9304      	str	r3, [sp, #16]
 800ac0a:	e7d2      	b.n	800abb2 <_vfiprintf_r+0xe2>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	1d19      	adds	r1, r3, #4
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	9103      	str	r1, [sp, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bfbb      	ittet	lt
 800ac18:	425b      	neglt	r3, r3
 800ac1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac1e:	9307      	strge	r3, [sp, #28]
 800ac20:	9307      	strlt	r3, [sp, #28]
 800ac22:	bfb8      	it	lt
 800ac24:	9204      	strlt	r2, [sp, #16]
 800ac26:	7823      	ldrb	r3, [r4, #0]
 800ac28:	2b2e      	cmp	r3, #46	; 0x2e
 800ac2a:	d10c      	bne.n	800ac46 <_vfiprintf_r+0x176>
 800ac2c:	7863      	ldrb	r3, [r4, #1]
 800ac2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac30:	d135      	bne.n	800ac9e <_vfiprintf_r+0x1ce>
 800ac32:	9b03      	ldr	r3, [sp, #12]
 800ac34:	3402      	adds	r4, #2
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	9203      	str	r2, [sp, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bfb8      	it	lt
 800ac40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ad20 <_vfiprintf_r+0x250>
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	7821      	ldrb	r1, [r4, #0]
 800ac50:	f000 fcf8 	bl	800b644 <memchr>
 800ac54:	b140      	cbz	r0, 800ac68 <_vfiprintf_r+0x198>
 800ac56:	2340      	movs	r3, #64	; 0x40
 800ac58:	eba0 000a 	sub.w	r0, r0, sl
 800ac5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ac60:	9b04      	ldr	r3, [sp, #16]
 800ac62:	3401      	adds	r4, #1
 800ac64:	4303      	orrs	r3, r0
 800ac66:	9304      	str	r3, [sp, #16]
 800ac68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6c:	2206      	movs	r2, #6
 800ac6e:	482d      	ldr	r0, [pc, #180]	; (800ad24 <_vfiprintf_r+0x254>)
 800ac70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac74:	f000 fce6 	bl	800b644 <memchr>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d03f      	beq.n	800acfc <_vfiprintf_r+0x22c>
 800ac7c:	4b2a      	ldr	r3, [pc, #168]	; (800ad28 <_vfiprintf_r+0x258>)
 800ac7e:	bb1b      	cbnz	r3, 800acc8 <_vfiprintf_r+0x1f8>
 800ac80:	9b03      	ldr	r3, [sp, #12]
 800ac82:	3307      	adds	r3, #7
 800ac84:	f023 0307 	bic.w	r3, r3, #7
 800ac88:	3308      	adds	r3, #8
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac8e:	443b      	add	r3, r7
 800ac90:	9309      	str	r3, [sp, #36]	; 0x24
 800ac92:	e767      	b.n	800ab64 <_vfiprintf_r+0x94>
 800ac94:	460c      	mov	r4, r1
 800ac96:	2001      	movs	r0, #1
 800ac98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac9c:	e7a5      	b.n	800abea <_vfiprintf_r+0x11a>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f04f 0c0a 	mov.w	ip, #10
 800aca4:	4619      	mov	r1, r3
 800aca6:	3401      	adds	r4, #1
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	4620      	mov	r0, r4
 800acac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb0:	3a30      	subs	r2, #48	; 0x30
 800acb2:	2a09      	cmp	r2, #9
 800acb4:	d903      	bls.n	800acbe <_vfiprintf_r+0x1ee>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0c5      	beq.n	800ac46 <_vfiprintf_r+0x176>
 800acba:	9105      	str	r1, [sp, #20]
 800acbc:	e7c3      	b.n	800ac46 <_vfiprintf_r+0x176>
 800acbe:	4604      	mov	r4, r0
 800acc0:	2301      	movs	r3, #1
 800acc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acc6:	e7f0      	b.n	800acaa <_vfiprintf_r+0x1da>
 800acc8:	ab03      	add	r3, sp, #12
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	462a      	mov	r2, r5
 800acce:	4630      	mov	r0, r6
 800acd0:	4b16      	ldr	r3, [pc, #88]	; (800ad2c <_vfiprintf_r+0x25c>)
 800acd2:	a904      	add	r1, sp, #16
 800acd4:	f3af 8000 	nop.w
 800acd8:	4607      	mov	r7, r0
 800acda:	1c78      	adds	r0, r7, #1
 800acdc:	d1d6      	bne.n	800ac8c <_vfiprintf_r+0x1bc>
 800acde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace0:	07d9      	lsls	r1, r3, #31
 800ace2:	d405      	bmi.n	800acf0 <_vfiprintf_r+0x220>
 800ace4:	89ab      	ldrh	r3, [r5, #12]
 800ace6:	059a      	lsls	r2, r3, #22
 800ace8:	d402      	bmi.n	800acf0 <_vfiprintf_r+0x220>
 800acea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acec:	f000 fc43 	bl	800b576 <__retarget_lock_release_recursive>
 800acf0:	89ab      	ldrh	r3, [r5, #12]
 800acf2:	065b      	lsls	r3, r3, #25
 800acf4:	f53f af12 	bmi.w	800ab1c <_vfiprintf_r+0x4c>
 800acf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfa:	e711      	b.n	800ab20 <_vfiprintf_r+0x50>
 800acfc:	ab03      	add	r3, sp, #12
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	462a      	mov	r2, r5
 800ad02:	4630      	mov	r0, r6
 800ad04:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <_vfiprintf_r+0x25c>)
 800ad06:	a904      	add	r1, sp, #16
 800ad08:	f000 f882 	bl	800ae10 <_printf_i>
 800ad0c:	e7e4      	b.n	800acd8 <_vfiprintf_r+0x208>
 800ad0e:	bf00      	nop
 800ad10:	0800c0d8 	.word	0x0800c0d8
 800ad14:	0800c0f8 	.word	0x0800c0f8
 800ad18:	0800c0b8 	.word	0x0800c0b8
 800ad1c:	0800c085 	.word	0x0800c085
 800ad20:	0800c08b 	.word	0x0800c08b
 800ad24:	0800c08f 	.word	0x0800c08f
 800ad28:	00000000 	.word	0x00000000
 800ad2c:	0800aaab 	.word	0x0800aaab

0800ad30 <_printf_common>:
 800ad30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad34:	4616      	mov	r6, r2
 800ad36:	4699      	mov	r9, r3
 800ad38:	688a      	ldr	r2, [r1, #8]
 800ad3a:	690b      	ldr	r3, [r1, #16]
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	bfb8      	it	lt
 800ad42:	4613      	movlt	r3, r2
 800ad44:	6033      	str	r3, [r6, #0]
 800ad46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad50:	b10a      	cbz	r2, 800ad56 <_printf_common+0x26>
 800ad52:	3301      	adds	r3, #1
 800ad54:	6033      	str	r3, [r6, #0]
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	0699      	lsls	r1, r3, #26
 800ad5a:	bf42      	ittt	mi
 800ad5c:	6833      	ldrmi	r3, [r6, #0]
 800ad5e:	3302      	addmi	r3, #2
 800ad60:	6033      	strmi	r3, [r6, #0]
 800ad62:	6825      	ldr	r5, [r4, #0]
 800ad64:	f015 0506 	ands.w	r5, r5, #6
 800ad68:	d106      	bne.n	800ad78 <_printf_common+0x48>
 800ad6a:	f104 0a19 	add.w	sl, r4, #25
 800ad6e:	68e3      	ldr	r3, [r4, #12]
 800ad70:	6832      	ldr	r2, [r6, #0]
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	dc28      	bgt.n	800adca <_printf_common+0x9a>
 800ad78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad7c:	1e13      	subs	r3, r2, #0
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	bf18      	it	ne
 800ad82:	2301      	movne	r3, #1
 800ad84:	0692      	lsls	r2, r2, #26
 800ad86:	d42d      	bmi.n	800ade4 <_printf_common+0xb4>
 800ad88:	4649      	mov	r1, r9
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad90:	47c0      	blx	r8
 800ad92:	3001      	adds	r0, #1
 800ad94:	d020      	beq.n	800add8 <_printf_common+0xa8>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	68e5      	ldr	r5, [r4, #12]
 800ad9a:	f003 0306 	and.w	r3, r3, #6
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	bf18      	it	ne
 800ada2:	2500      	movne	r5, #0
 800ada4:	6832      	ldr	r2, [r6, #0]
 800ada6:	f04f 0600 	mov.w	r6, #0
 800adaa:	68a3      	ldr	r3, [r4, #8]
 800adac:	bf08      	it	eq
 800adae:	1aad      	subeq	r5, r5, r2
 800adb0:	6922      	ldr	r2, [r4, #16]
 800adb2:	bf08      	it	eq
 800adb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adb8:	4293      	cmp	r3, r2
 800adba:	bfc4      	itt	gt
 800adbc:	1a9b      	subgt	r3, r3, r2
 800adbe:	18ed      	addgt	r5, r5, r3
 800adc0:	341a      	adds	r4, #26
 800adc2:	42b5      	cmp	r5, r6
 800adc4:	d11a      	bne.n	800adfc <_printf_common+0xcc>
 800adc6:	2000      	movs	r0, #0
 800adc8:	e008      	b.n	800addc <_printf_common+0xac>
 800adca:	2301      	movs	r3, #1
 800adcc:	4652      	mov	r2, sl
 800adce:	4649      	mov	r1, r9
 800add0:	4638      	mov	r0, r7
 800add2:	47c0      	blx	r8
 800add4:	3001      	adds	r0, #1
 800add6:	d103      	bne.n	800ade0 <_printf_common+0xb0>
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade0:	3501      	adds	r5, #1
 800ade2:	e7c4      	b.n	800ad6e <_printf_common+0x3e>
 800ade4:	2030      	movs	r0, #48	; 0x30
 800ade6:	18e1      	adds	r1, r4, r3
 800ade8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800adf2:	4422      	add	r2, r4
 800adf4:	3302      	adds	r3, #2
 800adf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adfa:	e7c5      	b.n	800ad88 <_printf_common+0x58>
 800adfc:	2301      	movs	r3, #1
 800adfe:	4622      	mov	r2, r4
 800ae00:	4649      	mov	r1, r9
 800ae02:	4638      	mov	r0, r7
 800ae04:	47c0      	blx	r8
 800ae06:	3001      	adds	r0, #1
 800ae08:	d0e6      	beq.n	800add8 <_printf_common+0xa8>
 800ae0a:	3601      	adds	r6, #1
 800ae0c:	e7d9      	b.n	800adc2 <_printf_common+0x92>
	...

0800ae10 <_printf_i>:
 800ae10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae14:	7e0f      	ldrb	r7, [r1, #24]
 800ae16:	4691      	mov	r9, r2
 800ae18:	2f78      	cmp	r7, #120	; 0x78
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	469a      	mov	sl, r3
 800ae20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae26:	d807      	bhi.n	800ae38 <_printf_i+0x28>
 800ae28:	2f62      	cmp	r7, #98	; 0x62
 800ae2a:	d80a      	bhi.n	800ae42 <_printf_i+0x32>
 800ae2c:	2f00      	cmp	r7, #0
 800ae2e:	f000 80d9 	beq.w	800afe4 <_printf_i+0x1d4>
 800ae32:	2f58      	cmp	r7, #88	; 0x58
 800ae34:	f000 80a4 	beq.w	800af80 <_printf_i+0x170>
 800ae38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae40:	e03a      	b.n	800aeb8 <_printf_i+0xa8>
 800ae42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae46:	2b15      	cmp	r3, #21
 800ae48:	d8f6      	bhi.n	800ae38 <_printf_i+0x28>
 800ae4a:	a101      	add	r1, pc, #4	; (adr r1, 800ae50 <_printf_i+0x40>)
 800ae4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae50:	0800aea9 	.word	0x0800aea9
 800ae54:	0800aebd 	.word	0x0800aebd
 800ae58:	0800ae39 	.word	0x0800ae39
 800ae5c:	0800ae39 	.word	0x0800ae39
 800ae60:	0800ae39 	.word	0x0800ae39
 800ae64:	0800ae39 	.word	0x0800ae39
 800ae68:	0800aebd 	.word	0x0800aebd
 800ae6c:	0800ae39 	.word	0x0800ae39
 800ae70:	0800ae39 	.word	0x0800ae39
 800ae74:	0800ae39 	.word	0x0800ae39
 800ae78:	0800ae39 	.word	0x0800ae39
 800ae7c:	0800afcb 	.word	0x0800afcb
 800ae80:	0800aeed 	.word	0x0800aeed
 800ae84:	0800afad 	.word	0x0800afad
 800ae88:	0800ae39 	.word	0x0800ae39
 800ae8c:	0800ae39 	.word	0x0800ae39
 800ae90:	0800afed 	.word	0x0800afed
 800ae94:	0800ae39 	.word	0x0800ae39
 800ae98:	0800aeed 	.word	0x0800aeed
 800ae9c:	0800ae39 	.word	0x0800ae39
 800aea0:	0800ae39 	.word	0x0800ae39
 800aea4:	0800afb5 	.word	0x0800afb5
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	1d1a      	adds	r2, r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	602a      	str	r2, [r5, #0]
 800aeb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e0a4      	b.n	800b006 <_printf_i+0x1f6>
 800aebc:	6820      	ldr	r0, [r4, #0]
 800aebe:	6829      	ldr	r1, [r5, #0]
 800aec0:	0606      	lsls	r6, r0, #24
 800aec2:	f101 0304 	add.w	r3, r1, #4
 800aec6:	d50a      	bpl.n	800aede <_printf_i+0xce>
 800aec8:	680e      	ldr	r6, [r1, #0]
 800aeca:	602b      	str	r3, [r5, #0]
 800aecc:	2e00      	cmp	r6, #0
 800aece:	da03      	bge.n	800aed8 <_printf_i+0xc8>
 800aed0:	232d      	movs	r3, #45	; 0x2d
 800aed2:	4276      	negs	r6, r6
 800aed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aed8:	230a      	movs	r3, #10
 800aeda:	485e      	ldr	r0, [pc, #376]	; (800b054 <_printf_i+0x244>)
 800aedc:	e019      	b.n	800af12 <_printf_i+0x102>
 800aede:	680e      	ldr	r6, [r1, #0]
 800aee0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aee4:	602b      	str	r3, [r5, #0]
 800aee6:	bf18      	it	ne
 800aee8:	b236      	sxthne	r6, r6
 800aeea:	e7ef      	b.n	800aecc <_printf_i+0xbc>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	6820      	ldr	r0, [r4, #0]
 800aef0:	1d19      	adds	r1, r3, #4
 800aef2:	6029      	str	r1, [r5, #0]
 800aef4:	0601      	lsls	r1, r0, #24
 800aef6:	d501      	bpl.n	800aefc <_printf_i+0xec>
 800aef8:	681e      	ldr	r6, [r3, #0]
 800aefa:	e002      	b.n	800af02 <_printf_i+0xf2>
 800aefc:	0646      	lsls	r6, r0, #25
 800aefe:	d5fb      	bpl.n	800aef8 <_printf_i+0xe8>
 800af00:	881e      	ldrh	r6, [r3, #0]
 800af02:	2f6f      	cmp	r7, #111	; 0x6f
 800af04:	bf0c      	ite	eq
 800af06:	2308      	moveq	r3, #8
 800af08:	230a      	movne	r3, #10
 800af0a:	4852      	ldr	r0, [pc, #328]	; (800b054 <_printf_i+0x244>)
 800af0c:	2100      	movs	r1, #0
 800af0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af12:	6865      	ldr	r5, [r4, #4]
 800af14:	2d00      	cmp	r5, #0
 800af16:	bfa8      	it	ge
 800af18:	6821      	ldrge	r1, [r4, #0]
 800af1a:	60a5      	str	r5, [r4, #8]
 800af1c:	bfa4      	itt	ge
 800af1e:	f021 0104 	bicge.w	r1, r1, #4
 800af22:	6021      	strge	r1, [r4, #0]
 800af24:	b90e      	cbnz	r6, 800af2a <_printf_i+0x11a>
 800af26:	2d00      	cmp	r5, #0
 800af28:	d04d      	beq.n	800afc6 <_printf_i+0x1b6>
 800af2a:	4615      	mov	r5, r2
 800af2c:	fbb6 f1f3 	udiv	r1, r6, r3
 800af30:	fb03 6711 	mls	r7, r3, r1, r6
 800af34:	5dc7      	ldrb	r7, [r0, r7]
 800af36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af3a:	4637      	mov	r7, r6
 800af3c:	42bb      	cmp	r3, r7
 800af3e:	460e      	mov	r6, r1
 800af40:	d9f4      	bls.n	800af2c <_printf_i+0x11c>
 800af42:	2b08      	cmp	r3, #8
 800af44:	d10b      	bne.n	800af5e <_printf_i+0x14e>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	07de      	lsls	r6, r3, #31
 800af4a:	d508      	bpl.n	800af5e <_printf_i+0x14e>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	6861      	ldr	r1, [r4, #4]
 800af50:	4299      	cmp	r1, r3
 800af52:	bfde      	ittt	le
 800af54:	2330      	movle	r3, #48	; 0x30
 800af56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af5e:	1b52      	subs	r2, r2, r5
 800af60:	6122      	str	r2, [r4, #16]
 800af62:	464b      	mov	r3, r9
 800af64:	4621      	mov	r1, r4
 800af66:	4640      	mov	r0, r8
 800af68:	f8cd a000 	str.w	sl, [sp]
 800af6c:	aa03      	add	r2, sp, #12
 800af6e:	f7ff fedf 	bl	800ad30 <_printf_common>
 800af72:	3001      	adds	r0, #1
 800af74:	d14c      	bne.n	800b010 <_printf_i+0x200>
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	b004      	add	sp, #16
 800af7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af80:	4834      	ldr	r0, [pc, #208]	; (800b054 <_printf_i+0x244>)
 800af82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af86:	6829      	ldr	r1, [r5, #0]
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	f851 6b04 	ldr.w	r6, [r1], #4
 800af8e:	6029      	str	r1, [r5, #0]
 800af90:	061d      	lsls	r5, r3, #24
 800af92:	d514      	bpl.n	800afbe <_printf_i+0x1ae>
 800af94:	07df      	lsls	r7, r3, #31
 800af96:	bf44      	itt	mi
 800af98:	f043 0320 	orrmi.w	r3, r3, #32
 800af9c:	6023      	strmi	r3, [r4, #0]
 800af9e:	b91e      	cbnz	r6, 800afa8 <_printf_i+0x198>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	f023 0320 	bic.w	r3, r3, #32
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	2310      	movs	r3, #16
 800afaa:	e7af      	b.n	800af0c <_printf_i+0xfc>
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	f043 0320 	orr.w	r3, r3, #32
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	2378      	movs	r3, #120	; 0x78
 800afb6:	4828      	ldr	r0, [pc, #160]	; (800b058 <_printf_i+0x248>)
 800afb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800afbc:	e7e3      	b.n	800af86 <_printf_i+0x176>
 800afbe:	0659      	lsls	r1, r3, #25
 800afc0:	bf48      	it	mi
 800afc2:	b2b6      	uxthmi	r6, r6
 800afc4:	e7e6      	b.n	800af94 <_printf_i+0x184>
 800afc6:	4615      	mov	r5, r2
 800afc8:	e7bb      	b.n	800af42 <_printf_i+0x132>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	6826      	ldr	r6, [r4, #0]
 800afce:	1d18      	adds	r0, r3, #4
 800afd0:	6961      	ldr	r1, [r4, #20]
 800afd2:	6028      	str	r0, [r5, #0]
 800afd4:	0635      	lsls	r5, r6, #24
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	d501      	bpl.n	800afde <_printf_i+0x1ce>
 800afda:	6019      	str	r1, [r3, #0]
 800afdc:	e002      	b.n	800afe4 <_printf_i+0x1d4>
 800afde:	0670      	lsls	r0, r6, #25
 800afe0:	d5fb      	bpl.n	800afda <_printf_i+0x1ca>
 800afe2:	8019      	strh	r1, [r3, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	4615      	mov	r5, r2
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	e7ba      	b.n	800af62 <_printf_i+0x152>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	2100      	movs	r1, #0
 800aff0:	1d1a      	adds	r2, r3, #4
 800aff2:	602a      	str	r2, [r5, #0]
 800aff4:	681d      	ldr	r5, [r3, #0]
 800aff6:	6862      	ldr	r2, [r4, #4]
 800aff8:	4628      	mov	r0, r5
 800affa:	f000 fb23 	bl	800b644 <memchr>
 800affe:	b108      	cbz	r0, 800b004 <_printf_i+0x1f4>
 800b000:	1b40      	subs	r0, r0, r5
 800b002:	6060      	str	r0, [r4, #4]
 800b004:	6863      	ldr	r3, [r4, #4]
 800b006:	6123      	str	r3, [r4, #16]
 800b008:	2300      	movs	r3, #0
 800b00a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b00e:	e7a8      	b.n	800af62 <_printf_i+0x152>
 800b010:	462a      	mov	r2, r5
 800b012:	4649      	mov	r1, r9
 800b014:	4640      	mov	r0, r8
 800b016:	6923      	ldr	r3, [r4, #16]
 800b018:	47d0      	blx	sl
 800b01a:	3001      	adds	r0, #1
 800b01c:	d0ab      	beq.n	800af76 <_printf_i+0x166>
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	079b      	lsls	r3, r3, #30
 800b022:	d413      	bmi.n	800b04c <_printf_i+0x23c>
 800b024:	68e0      	ldr	r0, [r4, #12]
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	4298      	cmp	r0, r3
 800b02a:	bfb8      	it	lt
 800b02c:	4618      	movlt	r0, r3
 800b02e:	e7a4      	b.n	800af7a <_printf_i+0x16a>
 800b030:	2301      	movs	r3, #1
 800b032:	4632      	mov	r2, r6
 800b034:	4649      	mov	r1, r9
 800b036:	4640      	mov	r0, r8
 800b038:	47d0      	blx	sl
 800b03a:	3001      	adds	r0, #1
 800b03c:	d09b      	beq.n	800af76 <_printf_i+0x166>
 800b03e:	3501      	adds	r5, #1
 800b040:	68e3      	ldr	r3, [r4, #12]
 800b042:	9903      	ldr	r1, [sp, #12]
 800b044:	1a5b      	subs	r3, r3, r1
 800b046:	42ab      	cmp	r3, r5
 800b048:	dcf2      	bgt.n	800b030 <_printf_i+0x220>
 800b04a:	e7eb      	b.n	800b024 <_printf_i+0x214>
 800b04c:	2500      	movs	r5, #0
 800b04e:	f104 0619 	add.w	r6, r4, #25
 800b052:	e7f5      	b.n	800b040 <_printf_i+0x230>
 800b054:	0800c096 	.word	0x0800c096
 800b058:	0800c0a7 	.word	0x0800c0a7

0800b05c <_sbrk_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	2300      	movs	r3, #0
 800b060:	4d05      	ldr	r5, [pc, #20]	; (800b078 <_sbrk_r+0x1c>)
 800b062:	4604      	mov	r4, r0
 800b064:	4608      	mov	r0, r1
 800b066:	602b      	str	r3, [r5, #0]
 800b068:	f7f6 fe0a 	bl	8001c80 <_sbrk>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_sbrk_r+0x1a>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_sbrk_r+0x1a>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	20004c14 	.word	0x20004c14

0800b07c <__swbuf_r>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	460e      	mov	r6, r1
 800b080:	4614      	mov	r4, r2
 800b082:	4605      	mov	r5, r0
 800b084:	b118      	cbz	r0, 800b08e <__swbuf_r+0x12>
 800b086:	6983      	ldr	r3, [r0, #24]
 800b088:	b90b      	cbnz	r3, 800b08e <__swbuf_r+0x12>
 800b08a:	f000 f9d5 	bl	800b438 <__sinit>
 800b08e:	4b21      	ldr	r3, [pc, #132]	; (800b114 <__swbuf_r+0x98>)
 800b090:	429c      	cmp	r4, r3
 800b092:	d12b      	bne.n	800b0ec <__swbuf_r+0x70>
 800b094:	686c      	ldr	r4, [r5, #4]
 800b096:	69a3      	ldr	r3, [r4, #24]
 800b098:	60a3      	str	r3, [r4, #8]
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	071a      	lsls	r2, r3, #28
 800b09e:	d52f      	bpl.n	800b100 <__swbuf_r+0x84>
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	b36b      	cbz	r3, 800b100 <__swbuf_r+0x84>
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	6820      	ldr	r0, [r4, #0]
 800b0a8:	b2f6      	uxtb	r6, r6
 800b0aa:	1ac0      	subs	r0, r0, r3
 800b0ac:	6963      	ldr	r3, [r4, #20]
 800b0ae:	4637      	mov	r7, r6
 800b0b0:	4283      	cmp	r3, r0
 800b0b2:	dc04      	bgt.n	800b0be <__swbuf_r+0x42>
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f000 f92a 	bl	800b310 <_fflush_r>
 800b0bc:	bb30      	cbnz	r0, 800b10c <__swbuf_r+0x90>
 800b0be:	68a3      	ldr	r3, [r4, #8]
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	60a3      	str	r3, [r4, #8]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	6022      	str	r2, [r4, #0]
 800b0cc:	701e      	strb	r6, [r3, #0]
 800b0ce:	6963      	ldr	r3, [r4, #20]
 800b0d0:	4283      	cmp	r3, r0
 800b0d2:	d004      	beq.n	800b0de <__swbuf_r+0x62>
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	07db      	lsls	r3, r3, #31
 800b0d8:	d506      	bpl.n	800b0e8 <__swbuf_r+0x6c>
 800b0da:	2e0a      	cmp	r6, #10
 800b0dc:	d104      	bne.n	800b0e8 <__swbuf_r+0x6c>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f000 f915 	bl	800b310 <_fflush_r>
 800b0e6:	b988      	cbnz	r0, 800b10c <__swbuf_r+0x90>
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	; (800b118 <__swbuf_r+0x9c>)
 800b0ee:	429c      	cmp	r4, r3
 800b0f0:	d101      	bne.n	800b0f6 <__swbuf_r+0x7a>
 800b0f2:	68ac      	ldr	r4, [r5, #8]
 800b0f4:	e7cf      	b.n	800b096 <__swbuf_r+0x1a>
 800b0f6:	4b09      	ldr	r3, [pc, #36]	; (800b11c <__swbuf_r+0xa0>)
 800b0f8:	429c      	cmp	r4, r3
 800b0fa:	bf08      	it	eq
 800b0fc:	68ec      	ldreq	r4, [r5, #12]
 800b0fe:	e7ca      	b.n	800b096 <__swbuf_r+0x1a>
 800b100:	4621      	mov	r1, r4
 800b102:	4628      	mov	r0, r5
 800b104:	f000 f80c 	bl	800b120 <__swsetup_r>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d0cb      	beq.n	800b0a4 <__swbuf_r+0x28>
 800b10c:	f04f 37ff 	mov.w	r7, #4294967295
 800b110:	e7ea      	b.n	800b0e8 <__swbuf_r+0x6c>
 800b112:	bf00      	nop
 800b114:	0800c0d8 	.word	0x0800c0d8
 800b118:	0800c0f8 	.word	0x0800c0f8
 800b11c:	0800c0b8 	.word	0x0800c0b8

0800b120 <__swsetup_r>:
 800b120:	4b32      	ldr	r3, [pc, #200]	; (800b1ec <__swsetup_r+0xcc>)
 800b122:	b570      	push	{r4, r5, r6, lr}
 800b124:	681d      	ldr	r5, [r3, #0]
 800b126:	4606      	mov	r6, r0
 800b128:	460c      	mov	r4, r1
 800b12a:	b125      	cbz	r5, 800b136 <__swsetup_r+0x16>
 800b12c:	69ab      	ldr	r3, [r5, #24]
 800b12e:	b913      	cbnz	r3, 800b136 <__swsetup_r+0x16>
 800b130:	4628      	mov	r0, r5
 800b132:	f000 f981 	bl	800b438 <__sinit>
 800b136:	4b2e      	ldr	r3, [pc, #184]	; (800b1f0 <__swsetup_r+0xd0>)
 800b138:	429c      	cmp	r4, r3
 800b13a:	d10f      	bne.n	800b15c <__swsetup_r+0x3c>
 800b13c:	686c      	ldr	r4, [r5, #4]
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b144:	0719      	lsls	r1, r3, #28
 800b146:	d42c      	bmi.n	800b1a2 <__swsetup_r+0x82>
 800b148:	06dd      	lsls	r5, r3, #27
 800b14a:	d411      	bmi.n	800b170 <__swsetup_r+0x50>
 800b14c:	2309      	movs	r3, #9
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b154:	f04f 30ff 	mov.w	r0, #4294967295
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	e03e      	b.n	800b1da <__swsetup_r+0xba>
 800b15c:	4b25      	ldr	r3, [pc, #148]	; (800b1f4 <__swsetup_r+0xd4>)
 800b15e:	429c      	cmp	r4, r3
 800b160:	d101      	bne.n	800b166 <__swsetup_r+0x46>
 800b162:	68ac      	ldr	r4, [r5, #8]
 800b164:	e7eb      	b.n	800b13e <__swsetup_r+0x1e>
 800b166:	4b24      	ldr	r3, [pc, #144]	; (800b1f8 <__swsetup_r+0xd8>)
 800b168:	429c      	cmp	r4, r3
 800b16a:	bf08      	it	eq
 800b16c:	68ec      	ldreq	r4, [r5, #12]
 800b16e:	e7e6      	b.n	800b13e <__swsetup_r+0x1e>
 800b170:	0758      	lsls	r0, r3, #29
 800b172:	d512      	bpl.n	800b19a <__swsetup_r+0x7a>
 800b174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b176:	b141      	cbz	r1, 800b18a <__swsetup_r+0x6a>
 800b178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b17c:	4299      	cmp	r1, r3
 800b17e:	d002      	beq.n	800b186 <__swsetup_r+0x66>
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff fa45 	bl	800a610 <_free_r>
 800b186:	2300      	movs	r3, #0
 800b188:	6363      	str	r3, [r4, #52]	; 0x34
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b190:	81a3      	strh	r3, [r4, #12]
 800b192:	2300      	movs	r3, #0
 800b194:	6063      	str	r3, [r4, #4]
 800b196:	6923      	ldr	r3, [r4, #16]
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f043 0308 	orr.w	r3, r3, #8
 800b1a0:	81a3      	strh	r3, [r4, #12]
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	b94b      	cbnz	r3, 800b1ba <__swsetup_r+0x9a>
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1b0:	d003      	beq.n	800b1ba <__swsetup_r+0x9a>
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f000 fa05 	bl	800b5c4 <__smakebuf_r>
 800b1ba:	89a0      	ldrh	r0, [r4, #12]
 800b1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1c0:	f010 0301 	ands.w	r3, r0, #1
 800b1c4:	d00a      	beq.n	800b1dc <__swsetup_r+0xbc>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60a3      	str	r3, [r4, #8]
 800b1ca:	6963      	ldr	r3, [r4, #20]
 800b1cc:	425b      	negs	r3, r3
 800b1ce:	61a3      	str	r3, [r4, #24]
 800b1d0:	6923      	ldr	r3, [r4, #16]
 800b1d2:	b943      	cbnz	r3, 800b1e6 <__swsetup_r+0xc6>
 800b1d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1d8:	d1ba      	bne.n	800b150 <__swsetup_r+0x30>
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	0781      	lsls	r1, r0, #30
 800b1de:	bf58      	it	pl
 800b1e0:	6963      	ldrpl	r3, [r4, #20]
 800b1e2:	60a3      	str	r3, [r4, #8]
 800b1e4:	e7f4      	b.n	800b1d0 <__swsetup_r+0xb0>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	e7f7      	b.n	800b1da <__swsetup_r+0xba>
 800b1ea:	bf00      	nop
 800b1ec:	20000444 	.word	0x20000444
 800b1f0:	0800c0d8 	.word	0x0800c0d8
 800b1f4:	0800c0f8 	.word	0x0800c0f8
 800b1f8:	0800c0b8 	.word	0x0800c0b8

0800b1fc <abort>:
 800b1fc:	2006      	movs	r0, #6
 800b1fe:	b508      	push	{r3, lr}
 800b200:	f000 faba 	bl	800b778 <raise>
 800b204:	2001      	movs	r0, #1
 800b206:	f7f6 fcc8 	bl	8001b9a <_exit>
	...

0800b20c <__sflush_r>:
 800b20c:	898a      	ldrh	r2, [r1, #12]
 800b20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b210:	4605      	mov	r5, r0
 800b212:	0710      	lsls	r0, r2, #28
 800b214:	460c      	mov	r4, r1
 800b216:	d457      	bmi.n	800b2c8 <__sflush_r+0xbc>
 800b218:	684b      	ldr	r3, [r1, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dc04      	bgt.n	800b228 <__sflush_r+0x1c>
 800b21e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b220:	2b00      	cmp	r3, #0
 800b222:	dc01      	bgt.n	800b228 <__sflush_r+0x1c>
 800b224:	2000      	movs	r0, #0
 800b226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b22a:	2e00      	cmp	r6, #0
 800b22c:	d0fa      	beq.n	800b224 <__sflush_r+0x18>
 800b22e:	2300      	movs	r3, #0
 800b230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b234:	682f      	ldr	r7, [r5, #0]
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	d032      	beq.n	800b2a0 <__sflush_r+0x94>
 800b23a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	075a      	lsls	r2, r3, #29
 800b240:	d505      	bpl.n	800b24e <__sflush_r+0x42>
 800b242:	6863      	ldr	r3, [r4, #4]
 800b244:	1ac0      	subs	r0, r0, r3
 800b246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b248:	b10b      	cbz	r3, 800b24e <__sflush_r+0x42>
 800b24a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b24c:	1ac0      	subs	r0, r0, r3
 800b24e:	2300      	movs	r3, #0
 800b250:	4602      	mov	r2, r0
 800b252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b254:	4628      	mov	r0, r5
 800b256:	6a21      	ldr	r1, [r4, #32]
 800b258:	47b0      	blx	r6
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	d106      	bne.n	800b26e <__sflush_r+0x62>
 800b260:	6829      	ldr	r1, [r5, #0]
 800b262:	291d      	cmp	r1, #29
 800b264:	d82c      	bhi.n	800b2c0 <__sflush_r+0xb4>
 800b266:	4a29      	ldr	r2, [pc, #164]	; (800b30c <__sflush_r+0x100>)
 800b268:	40ca      	lsrs	r2, r1
 800b26a:	07d6      	lsls	r6, r2, #31
 800b26c:	d528      	bpl.n	800b2c0 <__sflush_r+0xb4>
 800b26e:	2200      	movs	r2, #0
 800b270:	6062      	str	r2, [r4, #4]
 800b272:	6922      	ldr	r2, [r4, #16]
 800b274:	04d9      	lsls	r1, r3, #19
 800b276:	6022      	str	r2, [r4, #0]
 800b278:	d504      	bpl.n	800b284 <__sflush_r+0x78>
 800b27a:	1c42      	adds	r2, r0, #1
 800b27c:	d101      	bne.n	800b282 <__sflush_r+0x76>
 800b27e:	682b      	ldr	r3, [r5, #0]
 800b280:	b903      	cbnz	r3, 800b284 <__sflush_r+0x78>
 800b282:	6560      	str	r0, [r4, #84]	; 0x54
 800b284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b286:	602f      	str	r7, [r5, #0]
 800b288:	2900      	cmp	r1, #0
 800b28a:	d0cb      	beq.n	800b224 <__sflush_r+0x18>
 800b28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b290:	4299      	cmp	r1, r3
 800b292:	d002      	beq.n	800b29a <__sflush_r+0x8e>
 800b294:	4628      	mov	r0, r5
 800b296:	f7ff f9bb 	bl	800a610 <_free_r>
 800b29a:	2000      	movs	r0, #0
 800b29c:	6360      	str	r0, [r4, #52]	; 0x34
 800b29e:	e7c2      	b.n	800b226 <__sflush_r+0x1a>
 800b2a0:	6a21      	ldr	r1, [r4, #32]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b0      	blx	r6
 800b2a8:	1c41      	adds	r1, r0, #1
 800b2aa:	d1c7      	bne.n	800b23c <__sflush_r+0x30>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0c4      	beq.n	800b23c <__sflush_r+0x30>
 800b2b2:	2b1d      	cmp	r3, #29
 800b2b4:	d001      	beq.n	800b2ba <__sflush_r+0xae>
 800b2b6:	2b16      	cmp	r3, #22
 800b2b8:	d101      	bne.n	800b2be <__sflush_r+0xb2>
 800b2ba:	602f      	str	r7, [r5, #0]
 800b2bc:	e7b2      	b.n	800b224 <__sflush_r+0x18>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	e7ae      	b.n	800b226 <__sflush_r+0x1a>
 800b2c8:	690f      	ldr	r7, [r1, #16]
 800b2ca:	2f00      	cmp	r7, #0
 800b2cc:	d0aa      	beq.n	800b224 <__sflush_r+0x18>
 800b2ce:	0793      	lsls	r3, r2, #30
 800b2d0:	bf18      	it	ne
 800b2d2:	2300      	movne	r3, #0
 800b2d4:	680e      	ldr	r6, [r1, #0]
 800b2d6:	bf08      	it	eq
 800b2d8:	694b      	ldreq	r3, [r1, #20]
 800b2da:	1bf6      	subs	r6, r6, r7
 800b2dc:	600f      	str	r7, [r1, #0]
 800b2de:	608b      	str	r3, [r1, #8]
 800b2e0:	2e00      	cmp	r6, #0
 800b2e2:	dd9f      	ble.n	800b224 <__sflush_r+0x18>
 800b2e4:	4633      	mov	r3, r6
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	6a21      	ldr	r1, [r4, #32]
 800b2ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b2f0:	47e0      	blx	ip
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	dc06      	bgt.n	800b304 <__sflush_r+0xf8>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b300:	81a3      	strh	r3, [r4, #12]
 800b302:	e790      	b.n	800b226 <__sflush_r+0x1a>
 800b304:	4407      	add	r7, r0
 800b306:	1a36      	subs	r6, r6, r0
 800b308:	e7ea      	b.n	800b2e0 <__sflush_r+0xd4>
 800b30a:	bf00      	nop
 800b30c:	20400001 	.word	0x20400001

0800b310 <_fflush_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	690b      	ldr	r3, [r1, #16]
 800b314:	4605      	mov	r5, r0
 800b316:	460c      	mov	r4, r1
 800b318:	b913      	cbnz	r3, 800b320 <_fflush_r+0x10>
 800b31a:	2500      	movs	r5, #0
 800b31c:	4628      	mov	r0, r5
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	b118      	cbz	r0, 800b32a <_fflush_r+0x1a>
 800b322:	6983      	ldr	r3, [r0, #24]
 800b324:	b90b      	cbnz	r3, 800b32a <_fflush_r+0x1a>
 800b326:	f000 f887 	bl	800b438 <__sinit>
 800b32a:	4b14      	ldr	r3, [pc, #80]	; (800b37c <_fflush_r+0x6c>)
 800b32c:	429c      	cmp	r4, r3
 800b32e:	d11b      	bne.n	800b368 <_fflush_r+0x58>
 800b330:	686c      	ldr	r4, [r5, #4]
 800b332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0ef      	beq.n	800b31a <_fflush_r+0xa>
 800b33a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b33c:	07d0      	lsls	r0, r2, #31
 800b33e:	d404      	bmi.n	800b34a <_fflush_r+0x3a>
 800b340:	0599      	lsls	r1, r3, #22
 800b342:	d402      	bmi.n	800b34a <_fflush_r+0x3a>
 800b344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b346:	f000 f915 	bl	800b574 <__retarget_lock_acquire_recursive>
 800b34a:	4628      	mov	r0, r5
 800b34c:	4621      	mov	r1, r4
 800b34e:	f7ff ff5d 	bl	800b20c <__sflush_r>
 800b352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b354:	4605      	mov	r5, r0
 800b356:	07da      	lsls	r2, r3, #31
 800b358:	d4e0      	bmi.n	800b31c <_fflush_r+0xc>
 800b35a:	89a3      	ldrh	r3, [r4, #12]
 800b35c:	059b      	lsls	r3, r3, #22
 800b35e:	d4dd      	bmi.n	800b31c <_fflush_r+0xc>
 800b360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b362:	f000 f908 	bl	800b576 <__retarget_lock_release_recursive>
 800b366:	e7d9      	b.n	800b31c <_fflush_r+0xc>
 800b368:	4b05      	ldr	r3, [pc, #20]	; (800b380 <_fflush_r+0x70>)
 800b36a:	429c      	cmp	r4, r3
 800b36c:	d101      	bne.n	800b372 <_fflush_r+0x62>
 800b36e:	68ac      	ldr	r4, [r5, #8]
 800b370:	e7df      	b.n	800b332 <_fflush_r+0x22>
 800b372:	4b04      	ldr	r3, [pc, #16]	; (800b384 <_fflush_r+0x74>)
 800b374:	429c      	cmp	r4, r3
 800b376:	bf08      	it	eq
 800b378:	68ec      	ldreq	r4, [r5, #12]
 800b37a:	e7da      	b.n	800b332 <_fflush_r+0x22>
 800b37c:	0800c0d8 	.word	0x0800c0d8
 800b380:	0800c0f8 	.word	0x0800c0f8
 800b384:	0800c0b8 	.word	0x0800c0b8

0800b388 <std>:
 800b388:	2300      	movs	r3, #0
 800b38a:	b510      	push	{r4, lr}
 800b38c:	4604      	mov	r4, r0
 800b38e:	e9c0 3300 	strd	r3, r3, [r0]
 800b392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b396:	6083      	str	r3, [r0, #8]
 800b398:	8181      	strh	r1, [r0, #12]
 800b39a:	6643      	str	r3, [r0, #100]	; 0x64
 800b39c:	81c2      	strh	r2, [r0, #14]
 800b39e:	6183      	str	r3, [r0, #24]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	2208      	movs	r2, #8
 800b3a4:	305c      	adds	r0, #92	; 0x5c
 800b3a6:	f7fe ffcd 	bl	800a344 <memset>
 800b3aa:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <std+0x38>)
 800b3ac:	6224      	str	r4, [r4, #32]
 800b3ae:	6263      	str	r3, [r4, #36]	; 0x24
 800b3b0:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <std+0x3c>)
 800b3b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3b4:	4b04      	ldr	r3, [pc, #16]	; (800b3c8 <std+0x40>)
 800b3b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3b8:	4b04      	ldr	r3, [pc, #16]	; (800b3cc <std+0x44>)
 800b3ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b3bc:	bd10      	pop	{r4, pc}
 800b3be:	bf00      	nop
 800b3c0:	0800b7b1 	.word	0x0800b7b1
 800b3c4:	0800b7d3 	.word	0x0800b7d3
 800b3c8:	0800b80b 	.word	0x0800b80b
 800b3cc:	0800b82f 	.word	0x0800b82f

0800b3d0 <_cleanup_r>:
 800b3d0:	4901      	ldr	r1, [pc, #4]	; (800b3d8 <_cleanup_r+0x8>)
 800b3d2:	f000 b8af 	b.w	800b534 <_fwalk_reent>
 800b3d6:	bf00      	nop
 800b3d8:	0800b311 	.word	0x0800b311

0800b3dc <__sfmoreglue>:
 800b3dc:	2268      	movs	r2, #104	; 0x68
 800b3de:	b570      	push	{r4, r5, r6, lr}
 800b3e0:	1e4d      	subs	r5, r1, #1
 800b3e2:	4355      	muls	r5, r2
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3ea:	f7ff f979 	bl	800a6e0 <_malloc_r>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	b140      	cbz	r0, 800b404 <__sfmoreglue+0x28>
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b3f8:	300c      	adds	r0, #12
 800b3fa:	60a0      	str	r0, [r4, #8]
 800b3fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b400:	f7fe ffa0 	bl	800a344 <memset>
 800b404:	4620      	mov	r0, r4
 800b406:	bd70      	pop	{r4, r5, r6, pc}

0800b408 <__sfp_lock_acquire>:
 800b408:	4801      	ldr	r0, [pc, #4]	; (800b410 <__sfp_lock_acquire+0x8>)
 800b40a:	f000 b8b3 	b.w	800b574 <__retarget_lock_acquire_recursive>
 800b40e:	bf00      	nop
 800b410:	20004c11 	.word	0x20004c11

0800b414 <__sfp_lock_release>:
 800b414:	4801      	ldr	r0, [pc, #4]	; (800b41c <__sfp_lock_release+0x8>)
 800b416:	f000 b8ae 	b.w	800b576 <__retarget_lock_release_recursive>
 800b41a:	bf00      	nop
 800b41c:	20004c11 	.word	0x20004c11

0800b420 <__sinit_lock_acquire>:
 800b420:	4801      	ldr	r0, [pc, #4]	; (800b428 <__sinit_lock_acquire+0x8>)
 800b422:	f000 b8a7 	b.w	800b574 <__retarget_lock_acquire_recursive>
 800b426:	bf00      	nop
 800b428:	20004c12 	.word	0x20004c12

0800b42c <__sinit_lock_release>:
 800b42c:	4801      	ldr	r0, [pc, #4]	; (800b434 <__sinit_lock_release+0x8>)
 800b42e:	f000 b8a2 	b.w	800b576 <__retarget_lock_release_recursive>
 800b432:	bf00      	nop
 800b434:	20004c12 	.word	0x20004c12

0800b438 <__sinit>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	4604      	mov	r4, r0
 800b43c:	f7ff fff0 	bl	800b420 <__sinit_lock_acquire>
 800b440:	69a3      	ldr	r3, [r4, #24]
 800b442:	b11b      	cbz	r3, 800b44c <__sinit+0x14>
 800b444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b448:	f7ff bff0 	b.w	800b42c <__sinit_lock_release>
 800b44c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b450:	6523      	str	r3, [r4, #80]	; 0x50
 800b452:	4b13      	ldr	r3, [pc, #76]	; (800b4a0 <__sinit+0x68>)
 800b454:	4a13      	ldr	r2, [pc, #76]	; (800b4a4 <__sinit+0x6c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	62a2      	str	r2, [r4, #40]	; 0x28
 800b45a:	42a3      	cmp	r3, r4
 800b45c:	bf08      	it	eq
 800b45e:	2301      	moveq	r3, #1
 800b460:	4620      	mov	r0, r4
 800b462:	bf08      	it	eq
 800b464:	61a3      	streq	r3, [r4, #24]
 800b466:	f000 f81f 	bl	800b4a8 <__sfp>
 800b46a:	6060      	str	r0, [r4, #4]
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 f81b 	bl	800b4a8 <__sfp>
 800b472:	60a0      	str	r0, [r4, #8]
 800b474:	4620      	mov	r0, r4
 800b476:	f000 f817 	bl	800b4a8 <__sfp>
 800b47a:	2200      	movs	r2, #0
 800b47c:	2104      	movs	r1, #4
 800b47e:	60e0      	str	r0, [r4, #12]
 800b480:	6860      	ldr	r0, [r4, #4]
 800b482:	f7ff ff81 	bl	800b388 <std>
 800b486:	2201      	movs	r2, #1
 800b488:	2109      	movs	r1, #9
 800b48a:	68a0      	ldr	r0, [r4, #8]
 800b48c:	f7ff ff7c 	bl	800b388 <std>
 800b490:	2202      	movs	r2, #2
 800b492:	2112      	movs	r1, #18
 800b494:	68e0      	ldr	r0, [r4, #12]
 800b496:	f7ff ff77 	bl	800b388 <std>
 800b49a:	2301      	movs	r3, #1
 800b49c:	61a3      	str	r3, [r4, #24]
 800b49e:	e7d1      	b.n	800b444 <__sinit+0xc>
 800b4a0:	0800bed0 	.word	0x0800bed0
 800b4a4:	0800b3d1 	.word	0x0800b3d1

0800b4a8 <__sfp>:
 800b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	f7ff ffac 	bl	800b408 <__sfp_lock_acquire>
 800b4b0:	4b1e      	ldr	r3, [pc, #120]	; (800b52c <__sfp+0x84>)
 800b4b2:	681e      	ldr	r6, [r3, #0]
 800b4b4:	69b3      	ldr	r3, [r6, #24]
 800b4b6:	b913      	cbnz	r3, 800b4be <__sfp+0x16>
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f7ff ffbd 	bl	800b438 <__sinit>
 800b4be:	3648      	adds	r6, #72	; 0x48
 800b4c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	d503      	bpl.n	800b4d0 <__sfp+0x28>
 800b4c8:	6833      	ldr	r3, [r6, #0]
 800b4ca:	b30b      	cbz	r3, 800b510 <__sfp+0x68>
 800b4cc:	6836      	ldr	r6, [r6, #0]
 800b4ce:	e7f7      	b.n	800b4c0 <__sfp+0x18>
 800b4d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4d4:	b9d5      	cbnz	r5, 800b50c <__sfp+0x64>
 800b4d6:	4b16      	ldr	r3, [pc, #88]	; (800b530 <__sfp+0x88>)
 800b4d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4dc:	60e3      	str	r3, [r4, #12]
 800b4de:	6665      	str	r5, [r4, #100]	; 0x64
 800b4e0:	f000 f847 	bl	800b572 <__retarget_lock_init_recursive>
 800b4e4:	f7ff ff96 	bl	800b414 <__sfp_lock_release>
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4f4:	6025      	str	r5, [r4, #0]
 800b4f6:	61a5      	str	r5, [r4, #24]
 800b4f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4fc:	f7fe ff22 	bl	800a344 <memset>
 800b500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b508:	4620      	mov	r0, r4
 800b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b50c:	3468      	adds	r4, #104	; 0x68
 800b50e:	e7d9      	b.n	800b4c4 <__sfp+0x1c>
 800b510:	2104      	movs	r1, #4
 800b512:	4638      	mov	r0, r7
 800b514:	f7ff ff62 	bl	800b3dc <__sfmoreglue>
 800b518:	4604      	mov	r4, r0
 800b51a:	6030      	str	r0, [r6, #0]
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d1d5      	bne.n	800b4cc <__sfp+0x24>
 800b520:	f7ff ff78 	bl	800b414 <__sfp_lock_release>
 800b524:	230c      	movs	r3, #12
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	e7ee      	b.n	800b508 <__sfp+0x60>
 800b52a:	bf00      	nop
 800b52c:	0800bed0 	.word	0x0800bed0
 800b530:	ffff0001 	.word	0xffff0001

0800b534 <_fwalk_reent>:
 800b534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b538:	4606      	mov	r6, r0
 800b53a:	4688      	mov	r8, r1
 800b53c:	2700      	movs	r7, #0
 800b53e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b546:	f1b9 0901 	subs.w	r9, r9, #1
 800b54a:	d505      	bpl.n	800b558 <_fwalk_reent+0x24>
 800b54c:	6824      	ldr	r4, [r4, #0]
 800b54e:	2c00      	cmp	r4, #0
 800b550:	d1f7      	bne.n	800b542 <_fwalk_reent+0xe>
 800b552:	4638      	mov	r0, r7
 800b554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b558:	89ab      	ldrh	r3, [r5, #12]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d907      	bls.n	800b56e <_fwalk_reent+0x3a>
 800b55e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b562:	3301      	adds	r3, #1
 800b564:	d003      	beq.n	800b56e <_fwalk_reent+0x3a>
 800b566:	4629      	mov	r1, r5
 800b568:	4630      	mov	r0, r6
 800b56a:	47c0      	blx	r8
 800b56c:	4307      	orrs	r7, r0
 800b56e:	3568      	adds	r5, #104	; 0x68
 800b570:	e7e9      	b.n	800b546 <_fwalk_reent+0x12>

0800b572 <__retarget_lock_init_recursive>:
 800b572:	4770      	bx	lr

0800b574 <__retarget_lock_acquire_recursive>:
 800b574:	4770      	bx	lr

0800b576 <__retarget_lock_release_recursive>:
 800b576:	4770      	bx	lr

0800b578 <__swhatbuf_r>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	460e      	mov	r6, r1
 800b57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b580:	4614      	mov	r4, r2
 800b582:	2900      	cmp	r1, #0
 800b584:	461d      	mov	r5, r3
 800b586:	b096      	sub	sp, #88	; 0x58
 800b588:	da08      	bge.n	800b59c <__swhatbuf_r+0x24>
 800b58a:	2200      	movs	r2, #0
 800b58c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b590:	602a      	str	r2, [r5, #0]
 800b592:	061a      	lsls	r2, r3, #24
 800b594:	d410      	bmi.n	800b5b8 <__swhatbuf_r+0x40>
 800b596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b59a:	e00e      	b.n	800b5ba <__swhatbuf_r+0x42>
 800b59c:	466a      	mov	r2, sp
 800b59e:	f000 f96d 	bl	800b87c <_fstat_r>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	dbf1      	blt.n	800b58a <__swhatbuf_r+0x12>
 800b5a6:	9a01      	ldr	r2, [sp, #4]
 800b5a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5b0:	425a      	negs	r2, r3
 800b5b2:	415a      	adcs	r2, r3
 800b5b4:	602a      	str	r2, [r5, #0]
 800b5b6:	e7ee      	b.n	800b596 <__swhatbuf_r+0x1e>
 800b5b8:	2340      	movs	r3, #64	; 0x40
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	b016      	add	sp, #88	; 0x58
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5c4 <__smakebuf_r>:
 800b5c4:	898b      	ldrh	r3, [r1, #12]
 800b5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5c8:	079d      	lsls	r5, r3, #30
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	d507      	bpl.n	800b5e0 <__smakebuf_r+0x1c>
 800b5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	6123      	str	r3, [r4, #16]
 800b5d8:	2301      	movs	r3, #1
 800b5da:	6163      	str	r3, [r4, #20]
 800b5dc:	b002      	add	sp, #8
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	466a      	mov	r2, sp
 800b5e2:	ab01      	add	r3, sp, #4
 800b5e4:	f7ff ffc8 	bl	800b578 <__swhatbuf_r>
 800b5e8:	9900      	ldr	r1, [sp, #0]
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff f877 	bl	800a6e0 <_malloc_r>
 800b5f2:	b948      	cbnz	r0, 800b608 <__smakebuf_r+0x44>
 800b5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f8:	059a      	lsls	r2, r3, #22
 800b5fa:	d4ef      	bmi.n	800b5dc <__smakebuf_r+0x18>
 800b5fc:	f023 0303 	bic.w	r3, r3, #3
 800b600:	f043 0302 	orr.w	r3, r3, #2
 800b604:	81a3      	strh	r3, [r4, #12]
 800b606:	e7e3      	b.n	800b5d0 <__smakebuf_r+0xc>
 800b608:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <__smakebuf_r+0x7c>)
 800b60a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	6020      	str	r0, [r4, #0]
 800b610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b614:	81a3      	strh	r3, [r4, #12]
 800b616:	9b00      	ldr	r3, [sp, #0]
 800b618:	6120      	str	r0, [r4, #16]
 800b61a:	6163      	str	r3, [r4, #20]
 800b61c:	9b01      	ldr	r3, [sp, #4]
 800b61e:	b15b      	cbz	r3, 800b638 <__smakebuf_r+0x74>
 800b620:	4630      	mov	r0, r6
 800b622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b626:	f000 f93b 	bl	800b8a0 <_isatty_r>
 800b62a:	b128      	cbz	r0, 800b638 <__smakebuf_r+0x74>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f023 0303 	bic.w	r3, r3, #3
 800b632:	f043 0301 	orr.w	r3, r3, #1
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	89a0      	ldrh	r0, [r4, #12]
 800b63a:	4305      	orrs	r5, r0
 800b63c:	81a5      	strh	r5, [r4, #12]
 800b63e:	e7cd      	b.n	800b5dc <__smakebuf_r+0x18>
 800b640:	0800b3d1 	.word	0x0800b3d1

0800b644 <memchr>:
 800b644:	4603      	mov	r3, r0
 800b646:	b510      	push	{r4, lr}
 800b648:	b2c9      	uxtb	r1, r1
 800b64a:	4402      	add	r2, r0
 800b64c:	4293      	cmp	r3, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	d101      	bne.n	800b656 <memchr+0x12>
 800b652:	2000      	movs	r0, #0
 800b654:	e003      	b.n	800b65e <memchr+0x1a>
 800b656:	7804      	ldrb	r4, [r0, #0]
 800b658:	3301      	adds	r3, #1
 800b65a:	428c      	cmp	r4, r1
 800b65c:	d1f6      	bne.n	800b64c <memchr+0x8>
 800b65e:	bd10      	pop	{r4, pc}

0800b660 <memcpy>:
 800b660:	440a      	add	r2, r1
 800b662:	4291      	cmp	r1, r2
 800b664:	f100 33ff 	add.w	r3, r0, #4294967295
 800b668:	d100      	bne.n	800b66c <memcpy+0xc>
 800b66a:	4770      	bx	lr
 800b66c:	b510      	push	{r4, lr}
 800b66e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b672:	4291      	cmp	r1, r2
 800b674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b678:	d1f9      	bne.n	800b66e <memcpy+0xe>
 800b67a:	bd10      	pop	{r4, pc}

0800b67c <memmove>:
 800b67c:	4288      	cmp	r0, r1
 800b67e:	b510      	push	{r4, lr}
 800b680:	eb01 0402 	add.w	r4, r1, r2
 800b684:	d902      	bls.n	800b68c <memmove+0x10>
 800b686:	4284      	cmp	r4, r0
 800b688:	4623      	mov	r3, r4
 800b68a:	d807      	bhi.n	800b69c <memmove+0x20>
 800b68c:	1e43      	subs	r3, r0, #1
 800b68e:	42a1      	cmp	r1, r4
 800b690:	d008      	beq.n	800b6a4 <memmove+0x28>
 800b692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b69a:	e7f8      	b.n	800b68e <memmove+0x12>
 800b69c:	4601      	mov	r1, r0
 800b69e:	4402      	add	r2, r0
 800b6a0:	428a      	cmp	r2, r1
 800b6a2:	d100      	bne.n	800b6a6 <memmove+0x2a>
 800b6a4:	bd10      	pop	{r4, pc}
 800b6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ae:	e7f7      	b.n	800b6a0 <memmove+0x24>

0800b6b0 <__malloc_lock>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <__malloc_lock+0x8>)
 800b6b2:	f7ff bf5f 	b.w	800b574 <__retarget_lock_acquire_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	20004c10 	.word	0x20004c10

0800b6bc <__malloc_unlock>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__malloc_unlock+0x8>)
 800b6be:	f7ff bf5a 	b.w	800b576 <__retarget_lock_release_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	20004c10 	.word	0x20004c10

0800b6c8 <_realloc_r>:
 800b6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6cc:	4680      	mov	r8, r0
 800b6ce:	4614      	mov	r4, r2
 800b6d0:	460e      	mov	r6, r1
 800b6d2:	b921      	cbnz	r1, 800b6de <_realloc_r+0x16>
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6da:	f7ff b801 	b.w	800a6e0 <_malloc_r>
 800b6de:	b92a      	cbnz	r2, 800b6ec <_realloc_r+0x24>
 800b6e0:	f7fe ff96 	bl	800a610 <_free_r>
 800b6e4:	4625      	mov	r5, r4
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	f000 f8fa 	bl	800b8e4 <_malloc_usable_size_r>
 800b6f0:	4284      	cmp	r4, r0
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	d802      	bhi.n	800b6fc <_realloc_r+0x34>
 800b6f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6fa:	d812      	bhi.n	800b722 <_realloc_r+0x5a>
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	4640      	mov	r0, r8
 800b700:	f7fe ffee 	bl	800a6e0 <_malloc_r>
 800b704:	4605      	mov	r5, r0
 800b706:	2800      	cmp	r0, #0
 800b708:	d0ed      	beq.n	800b6e6 <_realloc_r+0x1e>
 800b70a:	42bc      	cmp	r4, r7
 800b70c:	4622      	mov	r2, r4
 800b70e:	4631      	mov	r1, r6
 800b710:	bf28      	it	cs
 800b712:	463a      	movcs	r2, r7
 800b714:	f7ff ffa4 	bl	800b660 <memcpy>
 800b718:	4631      	mov	r1, r6
 800b71a:	4640      	mov	r0, r8
 800b71c:	f7fe ff78 	bl	800a610 <_free_r>
 800b720:	e7e1      	b.n	800b6e6 <_realloc_r+0x1e>
 800b722:	4635      	mov	r5, r6
 800b724:	e7df      	b.n	800b6e6 <_realloc_r+0x1e>

0800b726 <_raise_r>:
 800b726:	291f      	cmp	r1, #31
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4604      	mov	r4, r0
 800b72c:	460d      	mov	r5, r1
 800b72e:	d904      	bls.n	800b73a <_raise_r+0x14>
 800b730:	2316      	movs	r3, #22
 800b732:	6003      	str	r3, [r0, #0]
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b73c:	b112      	cbz	r2, 800b744 <_raise_r+0x1e>
 800b73e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b742:	b94b      	cbnz	r3, 800b758 <_raise_r+0x32>
 800b744:	4620      	mov	r0, r4
 800b746:	f000 f831 	bl	800b7ac <_getpid_r>
 800b74a:	462a      	mov	r2, r5
 800b74c:	4601      	mov	r1, r0
 800b74e:	4620      	mov	r0, r4
 800b750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b754:	f000 b818 	b.w	800b788 <_kill_r>
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d00a      	beq.n	800b772 <_raise_r+0x4c>
 800b75c:	1c59      	adds	r1, r3, #1
 800b75e:	d103      	bne.n	800b768 <_raise_r+0x42>
 800b760:	2316      	movs	r3, #22
 800b762:	6003      	str	r3, [r0, #0]
 800b764:	2001      	movs	r0, #1
 800b766:	e7e7      	b.n	800b738 <_raise_r+0x12>
 800b768:	2400      	movs	r4, #0
 800b76a:	4628      	mov	r0, r5
 800b76c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b770:	4798      	blx	r3
 800b772:	2000      	movs	r0, #0
 800b774:	e7e0      	b.n	800b738 <_raise_r+0x12>
	...

0800b778 <raise>:
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <raise+0xc>)
 800b77a:	4601      	mov	r1, r0
 800b77c:	6818      	ldr	r0, [r3, #0]
 800b77e:	f7ff bfd2 	b.w	800b726 <_raise_r>
 800b782:	bf00      	nop
 800b784:	20000444 	.word	0x20000444

0800b788 <_kill_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	2300      	movs	r3, #0
 800b78c:	4d06      	ldr	r5, [pc, #24]	; (800b7a8 <_kill_r+0x20>)
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	4611      	mov	r1, r2
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	f7f6 f9f0 	bl	8001b7a <_kill>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d102      	bne.n	800b7a4 <_kill_r+0x1c>
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	b103      	cbz	r3, 800b7a4 <_kill_r+0x1c>
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	bd38      	pop	{r3, r4, r5, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20004c14 	.word	0x20004c14

0800b7ac <_getpid_r>:
 800b7ac:	f7f6 b9de 	b.w	8001b6c <_getpid>

0800b7b0 <__sread>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	f000 f89c 	bl	800b8f4 <_read_r>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	bfab      	itete	ge
 800b7c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7c4:	181b      	addge	r3, r3, r0
 800b7c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7ca:	bfac      	ite	ge
 800b7cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7ce:	81a3      	strhlt	r3, [r4, #12]
 800b7d0:	bd10      	pop	{r4, pc}

0800b7d2 <__swrite>:
 800b7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d6:	461f      	mov	r7, r3
 800b7d8:	898b      	ldrh	r3, [r1, #12]
 800b7da:	4605      	mov	r5, r0
 800b7dc:	05db      	lsls	r3, r3, #23
 800b7de:	460c      	mov	r4, r1
 800b7e0:	4616      	mov	r6, r2
 800b7e2:	d505      	bpl.n	800b7f0 <__swrite+0x1e>
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ec:	f000 f868 	bl	800b8c0 <_lseek_r>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	4632      	mov	r2, r6
 800b7f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	463b      	mov	r3, r7
 800b7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b806:	f000 b817 	b.w	800b838 <_write_r>

0800b80a <__sseek>:
 800b80a:	b510      	push	{r4, lr}
 800b80c:	460c      	mov	r4, r1
 800b80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b812:	f000 f855 	bl	800b8c0 <_lseek_r>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	bf15      	itete	ne
 800b81c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b81e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b826:	81a3      	strheq	r3, [r4, #12]
 800b828:	bf18      	it	ne
 800b82a:	81a3      	strhne	r3, [r4, #12]
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <__sclose>:
 800b82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b832:	f000 b813 	b.w	800b85c <_close_r>
	...

0800b838 <_write_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4604      	mov	r4, r0
 800b83c:	4608      	mov	r0, r1
 800b83e:	4611      	mov	r1, r2
 800b840:	2200      	movs	r2, #0
 800b842:	4d05      	ldr	r5, [pc, #20]	; (800b858 <_write_r+0x20>)
 800b844:	602a      	str	r2, [r5, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	f7f6 f9ce 	bl	8001be8 <_write>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_write_r+0x1e>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_write_r+0x1e>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	20004c14 	.word	0x20004c14

0800b85c <_close_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	2300      	movs	r3, #0
 800b860:	4d05      	ldr	r5, [pc, #20]	; (800b878 <_close_r+0x1c>)
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f6 f9da 	bl	8001c20 <_close>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_close_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_close_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20004c14 	.word	0x20004c14

0800b87c <_fstat_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	2300      	movs	r3, #0
 800b880:	4d06      	ldr	r5, [pc, #24]	; (800b89c <_fstat_r+0x20>)
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	4611      	mov	r1, r2
 800b888:	602b      	str	r3, [r5, #0]
 800b88a:	f7f6 f9d4 	bl	8001c36 <_fstat>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	d102      	bne.n	800b898 <_fstat_r+0x1c>
 800b892:	682b      	ldr	r3, [r5, #0]
 800b894:	b103      	cbz	r3, 800b898 <_fstat_r+0x1c>
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	bd38      	pop	{r3, r4, r5, pc}
 800b89a:	bf00      	nop
 800b89c:	20004c14 	.word	0x20004c14

0800b8a0 <_isatty_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	4d05      	ldr	r5, [pc, #20]	; (800b8bc <_isatty_r+0x1c>)
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	602b      	str	r3, [r5, #0]
 800b8ac:	f7f6 f9d2 	bl	8001c54 <_isatty>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_isatty_r+0x1a>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_isatty_r+0x1a>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	20004c14 	.word	0x20004c14

0800b8c0 <_lseek_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4d05      	ldr	r5, [pc, #20]	; (800b8e0 <_lseek_r+0x20>)
 800b8cc:	602a      	str	r2, [r5, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f7f6 f9ca 	bl	8001c68 <_lseek>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	d102      	bne.n	800b8de <_lseek_r+0x1e>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	b103      	cbz	r3, 800b8de <_lseek_r+0x1e>
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20004c14 	.word	0x20004c14

0800b8e4 <_malloc_usable_size_r>:
 800b8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e8:	1f18      	subs	r0, r3, #4
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	bfbc      	itt	lt
 800b8ee:	580b      	ldrlt	r3, [r1, r0]
 800b8f0:	18c0      	addlt	r0, r0, r3
 800b8f2:	4770      	bx	lr

0800b8f4 <_read_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4d05      	ldr	r5, [pc, #20]	; (800b914 <_read_r+0x20>)
 800b900:	602a      	str	r2, [r5, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	f7f6 f953 	bl	8001bae <_read>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_read_r+0x1e>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_read_r+0x1e>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	20004c14 	.word	0x20004c14

0800b918 <_init>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	bf00      	nop
 800b91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b91e:	bc08      	pop	{r3}
 800b920:	469e      	mov	lr, r3
 800b922:	4770      	bx	lr

0800b924 <_fini>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	bf00      	nop
 800b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92a:	bc08      	pop	{r3}
 800b92c:	469e      	mov	lr, r3
 800b92e:	4770      	bx	lr
