
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009158  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009380  08009380  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009380  08009380  00019380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009388  08009388  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a7c  200001e0  08009570  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  08009570  00021c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011296  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cb  00000000  00000000  0003149f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00034570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00035408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193e1  00000000  00000000  00036158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001273c  00000000  00000000  0004f539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5e7  00000000  00000000  00061c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  000ee2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800927c 	.word	0x0800927c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	0800927c 	.word	0x0800927c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	887a      	ldrh	r2, [r7, #2]
 80004a2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	69ba      	ldr	r2, [r7, #24]
 80004a8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6858      	ldr	r0, [r3, #4]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	891b      	ldrh	r3, [r3, #8]
 80004b2:	2201      	movs	r2, #1
 80004b4:	4619      	mov	r1, r3
 80004b6:	f000 fe75 	bl	80011a4 <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b0a0      	sub	sp, #128	; 0x80
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
	char Message[100];
	uint16_t Message_Length;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	2b2f      	cmp	r3, #47	; 0x2f
 80004d4:	d955      	bls.n	8000582 <CC1200_Command_Strobe+0xbe>
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	2b3d      	cmp	r3, #61	; 0x3d
 80004da:	d852      	bhi.n	8000582 <CC1200_Command_Strobe+0xbe>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	73fb      	strb	r3, [r7, #15]
		//SPI_Info -> MOSI_Data = &Header_Byte;

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6858      	ldr	r0, [r3, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	891b      	ldrh	r3, [r3, #8]
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	f000 fe5a 	bl	80011a4 <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	68d8      	ldr	r0, [r3, #12]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	f107 010f 	add.w	r1, r7, #15
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	f003 f92a 	bl	800375a <HAL_SPI_TransmitReceive>
		Message_Length = sprintf(Message, "Header: 0X%02X\r\n", Header_Byte);
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	461a      	mov	r2, r3
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4921      	ldr	r1, [pc, #132]	; (8000594 <CC1200_Command_Strobe+0xd0>)
 8000510:	4618      	mov	r0, r3
 8000512:	f008 fa39 	bl	8008988 <siprintf>
 8000516:	4603      	mov	r3, r0
 8000518:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 800051c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000520:	3301      	adds	r3, #1
 8000522:	b29a      	uxth	r2, r3
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fe08 	bl	8008140 <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f000 fb77 	bl	8000c24 <HAL_Delay>
		Message_Length = sprintf(Message, "Status: 0X%02X\r\n", *(SPI_Info -> MISO_Data));
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4915      	ldr	r1, [pc, #84]	; (8000598 <CC1200_Command_Strobe+0xd4>)
 8000544:	4618      	mov	r0, r3
 8000546:	f008 fa1f 	bl	8008988 <siprintf>
 800054a:	4603      	mov	r3, r0
 800054c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 8000550:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000554:	3301      	adds	r3, #1
 8000556:	b29a      	uxth	r2, r3
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4611      	mov	r1, r2
 800055e:	4618      	mov	r0, r3
 8000560:	f007 fdee 	bl	8008140 <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 8000564:	2064      	movs	r0, #100	; 0x64
 8000566:	f000 fb5d 	bl	8000c24 <HAL_Delay>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6858      	ldr	r0, [r3, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	891b      	ldrh	r3, [r3, #8]
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	f000 fe15 	bl	80011a4 <HAL_GPIO_WritePin>

		retval = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	{
 8000580:	e002      	b.n	8000588 <CC1200_Command_Strobe+0xc4>
	else
	{
//		Message_Length = sprintf(Message, "Invalid Register Access\r\n");
//		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
//		HAL_Delay(100); // delay 100 ms
		retval = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return retval;
 8000588:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800058c:	4618      	mov	r0, r3
 800058e:	3778      	adds	r7, #120	; 0x78
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	08009294 	.word	0x08009294
 8000598:	080092a8 	.word	0x080092a8

0800059c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	//RXTransmit function
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0a2      	sub	sp, #136	; 0x88
 80005b4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b6:	f000 fac6 	bl	8000b46 <HAL_Init>
//	};

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ba:	f000 f84d 	bl	8000658 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005be:	f000 f8f7 	bl	80007b0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005c2:	f000 f8cb 	bl	800075c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80005c6:	f000 f893 	bl	80006f0 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80005ca:	f007 fcfb 	bl	8007fc4 <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	CC1200_Init(&CC1200_SPI_Info, CC1200_Data, GPIOB, GPIO_PIN_6, &hspi1);
 80005ce:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80005d2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <main+0x98>)
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	4a1b      	ldr	r2, [pc, #108]	; (800064c <main+0x9c>)
 80005de:	f7ff ff51 	bl	8000484 <CC1200_Init>

		// CC1200 Functions Test
		char Message[100];
		uint16_t Message_Length;

		Message_Length = sprintf(Message, "CC1200 Command Strobe Test\r\n");
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	491a      	ldr	r1, [pc, #104]	; (8000650 <main+0xa0>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 f9ce 	bl	8008988 <siprintf>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 80005f2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80005f6:	3301      	adds	r3, #1
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 fd9e 	bl	8008140 <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fb0d 	bl	8000c24 <HAL_Delay>

		CC1200_Command_Strobe(&CC1200_SPI_Info, CC1200_COMMAND_SRES); // reset the chip
 800060a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800060e:	2130      	movs	r1, #48	; 0x30
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff57 	bl	80004c4 <CC1200_Command_Strobe>

		//CC1200_Write_Single_Register();
		//CC1200_Read_Single_Register();

		Message_Length = sprintf(Message, "\r\n");
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	490e      	ldr	r1, [pc, #56]	; (8000654 <main+0xa4>)
 800061a:	4618      	mov	r0, r3
 800061c:	f008 f9b4 	bl	8008988 <siprintf>
 8000620:	4603      	mov	r3, r0
 8000622:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		CDC_Transmit_FS((uint8_t*) Message, (Message_Length + 1));
 8000626:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800062a:	3301      	adds	r3, #1
 800062c:	b29a      	uxth	r2, r3
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f007 fd84 	bl	8008140 <CDC_Transmit_FS>
		HAL_Delay(100); // delay 100 ms
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 faf3 	bl	8000c24 <HAL_Delay>

		HAL_Delay(1000); // wait 1 s
 800063e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000642:	f000 faef 	bl	8000c24 <HAL_Delay>
	{
 8000646:	e7cc      	b.n	80005e2 <main+0x32>
 8000648:	200001fc 	.word	0x200001fc
 800064c:	40020400 	.word	0x40020400
 8000650:	080092bc 	.word	0x080092bc
 8000654:	080092dc 	.word	0x080092dc

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b092      	sub	sp, #72	; 0x48
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f008 f986 	bl	8008978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <SystemClock_Config+0x94>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <SystemClock_Config+0x94>)
 8000684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000688:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068e:	2305      	movs	r3, #5
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800069c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80006a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f9d5 	bl	8002a5c <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006b8:	f000 f8e8 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2303      	movs	r3, #3
 80006c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fcf1 	bl	80030bc <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e0:	f000 f8d4 	bl	800088c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3748      	adds	r7, #72	; 0x48
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_SPI1_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_SPI1_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI1_Init+0x64>)
 8000724:	2210      	movs	r2, #16
 8000726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI1_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_SPI1_Init+0x64>)
 8000742:	f002 ff81 	bl	8003648 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f89e 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001fc 	.word	0x200001fc
 8000758:	40013000 	.word	0x40013000

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f003 fa4e 	bl	8003c34 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f875 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000254 	.word	0x20000254
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a27      	ldr	r2, [pc, #156]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_GPIO_Init+0xd0>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	4816      	ldr	r0, [pc, #88]	; (8000884 <MX_GPIO_Init+0xd4>)
 800082c:	f000 fcba 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 8000830:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <MX_GPIO_Init+0xd8>)
 8000848:	f000 fb1c 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800084c:	2340      	movs	r3, #64	; 0x40
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000864:	f000 fb0e 	bl	8000e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2028      	movs	r0, #40	; 0x28
 800086e:	f000 fad2 	bl	8000e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000872:	2028      	movs	r0, #40	; 0x28
 8000874:	f000 faeb 	bl	8000e4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a8:	6253      	str	r3, [r2, #36]	; 0x24
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	6a1b      	ldr	r3, [r3, #32]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6213      	str	r3, [r2, #32]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x5c>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x5c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6253      	str	r3, [r2, #36]	; 0x24
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x5c>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e6:	2007      	movs	r0, #7
 80008e8:	f000 fa8a 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_SPI_MspInit+0x7c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d127      	bne.n	800096a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_SPI_MspInit+0x80>)
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <HAL_SPI_MspInit+0x80>)
 8000920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000924:	6213      	str	r3, [r2, #32]
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_SPI_MspInit+0x80>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_SPI_MspInit+0x80>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_SPI_MspInit+0x80>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_SPI_MspInit+0x80>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800094a:	23e0      	movs	r3, #224	; 0xe0
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800095a:	2305      	movs	r3, #5
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_SPI_MspInit+0x84>)
 8000966:	f000 fa8d 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40013000 	.word	0x40013000
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x7c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d127      	bne.n	80009f2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6253      	str	r3, [r2, #36]	; 0x24
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_UART_MspInit+0x84>)
 80009ee:	f000 fa49 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 f8cd 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <USB_LP_IRQHandler+0x10>)
 8000a5e:	f000 fcd5 	bl	800140c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20001740 	.word	0x20001740

08000a6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a74:	f000 fbae 	bl	80011d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a7c:	f000 fbaa 	bl	80011d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f007 ff36 	bl	8008924 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20014000 	.word	0x20014000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20000298 	.word	0x20000298
 8000aec:	20001c60 	.word	0x20001c60

08000af0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	; (8000b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b22:	f7ff ffe5 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f007 ff03 	bl	8008930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff fd41 	bl	80005b0 <main>
  bx lr
 8000b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000b38:	08009390 	.word	0x08009390
  ldr r2, =_sbss
 8000b3c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000b40:	20001c5c 	.word	0x20001c5c

08000b44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_IRQHandler>

08000b46 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f955 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f80e 	bl	8000b78 <HAL_InitTick>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	e001      	b.n	8000b6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b68:	f7ff fe96 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_InitTick+0x68>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d022      	beq.n	8000bd2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_InitTick+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f962 	bl	8000e6a <HAL_SYSTICK_Config>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10f      	bne.n	8000bcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b0f      	cmp	r3, #15
 8000bb0:	d809      	bhi.n	8000bc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bba:	f000 f92c 	bl	8000e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_InitTick+0x70>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e007      	b.n	8000bd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e004      	b.n	8000bd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e001      	b.n	8000bd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x1c>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <HAL_IncTick+0x1c>)
 8000bfc:	6013      	str	r3, [r2, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000029c 	.word	0x2000029c
 8000c0c:	20000008 	.word	0x20000008

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <HAL_GetTick+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	2000029c 	.word	0x2000029c

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff fff0 	bl	8000c10 <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d004      	beq.n	8000c48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_Delay+0x40>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c48:	bf00      	nop
 8000c4a:	f7ff ffe1 	bl	8000c10 <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d8f7      	bhi.n	8000c4a <HAL_Delay+0x26>
  {
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4906      	ldr	r1, [pc, #24]	; (8000d00 <__NVIC_EnableIRQ+0x34>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff90 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff2d 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff42 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff90 	bl	8000d58 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5f 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff35 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e9a:	e160      	b.n	800115e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8152 	beq.w	8001158 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d005      	beq.n	8000ecc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d130      	bne.n	8000f2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f02:	2201      	movs	r2, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	f003 0201 	and.w	r2, r3, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d017      	beq.n	8000f6a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d123      	bne.n	8000fbe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	6939      	ldr	r1, [r7, #16]
 8000fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0203 	and.w	r2, r3, #3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80ac 	beq.w	8001158 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_GPIO_Init+0x2f8>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a5d      	ldr	r2, [pc, #372]	; (800117c <HAL_GPIO_Init+0x2f8>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_GPIO_Init+0x2f8>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001018:	4a59      	ldr	r2, [pc, #356]	; (8001180 <HAL_GPIO_Init+0x2fc>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x300>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d025      	beq.n	8001090 <HAL_GPIO_Init+0x20c>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x304>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d01f      	beq.n	800108c <HAL_GPIO_Init+0x208>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x308>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d019      	beq.n	8001088 <HAL_GPIO_Init+0x204>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x30c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d013      	beq.n	8001084 <HAL_GPIO_Init+0x200>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x310>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d00d      	beq.n	8001080 <HAL_GPIO_Init+0x1fc>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x314>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d007      	beq.n	800107c <HAL_GPIO_Init+0x1f8>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x318>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d101      	bne.n	8001078 <HAL_GPIO_Init+0x1f4>
 8001074:	2306      	movs	r3, #6
 8001076:	e00c      	b.n	8001092 <HAL_GPIO_Init+0x20e>
 8001078:	2307      	movs	r3, #7
 800107a:	e00a      	b.n	8001092 <HAL_GPIO_Init+0x20e>
 800107c:	2305      	movs	r3, #5
 800107e:	e008      	b.n	8001092 <HAL_GPIO_Init+0x20e>
 8001080:	2304      	movs	r3, #4
 8001082:	e006      	b.n	8001092 <HAL_GPIO_Init+0x20e>
 8001084:	2303      	movs	r3, #3
 8001086:	e004      	b.n	8001092 <HAL_GPIO_Init+0x20e>
 8001088:	2302      	movs	r3, #2
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0x20e>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_GPIO_Init+0x20e>
 8001090:	2300      	movs	r3, #0
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	f002 0203 	and.w	r2, r2, #3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4093      	lsls	r3, r2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010a2:	4937      	ldr	r1, [pc, #220]	; (8001180 <HAL_GPIO_Init+0x2fc>)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d4:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010fe:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	f47f ae97 	bne.w	8000e9c <HAL_GPIO_Init+0x18>
  }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40010000 	.word	0x40010000
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9d2 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40010400 	.word	0x40010400

08001204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	b08b      	sub	sp, #44	; 0x2c
 8001208:	af06      	add	r7, sp, #24
 800120a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0d0      	b.n	80013b8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f007 f8da 	bl	80083e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2203      	movs	r2, #3
 8001234:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fe41 	bl	8003ec4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	e04c      	b.n	80012e2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	3301      	adds	r3, #1
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b298      	uxth	r0, r3
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	3336      	adds	r3, #54	; 0x36
 8001286:	4602      	mov	r2, r0
 8001288:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3303      	adds	r3, #3
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	3338      	adds	r3, #56	; 0x38
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	333c      	adds	r3, #60	; 0x3c
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	3340      	adds	r3, #64	; 0x40
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	3301      	adds	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3ad      	bcc.n	8001248 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e044      	b.n	800137c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3301      	adds	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3b5      	bcc.n	80012f2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	687e      	ldr	r6, [r7, #4]
 800138e:	466d      	mov	r5, sp
 8001390:	f106 0410 	add.w	r4, r6, #16
 8001394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	602b      	str	r3, [r5, #0]
 800139c:	1d33      	adds	r3, r6, #4
 800139e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f002 fda9 	bl	8003ef8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_PCD_Start+0x16>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e016      	b.n	8001404 <HAL_PCD_Start+0x44>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fd58 	bl	8003e98 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013e8:	2101      	movs	r1, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f006 ffdc 	bl	80083a8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fa3d 	bl	8006874 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f005 fa35 	bl	8006888 <USB_ReadInterrupts>
 800141e:	4603      	mov	r3, r0
 8001420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001428:	d102      	bne.n	8001430 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 faf5 	bl	8001a1a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fa27 	bl	8006888 <USB_ReadInterrupts>
 800143a:	4603      	mov	r3, r0
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001444:	d112      	bne.n	800146c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001458:	b292      	uxth	r2, r2
 800145a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f007 f83b 	bl	80084da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001464:	2100      	movs	r1, #0
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8c7 	bl	80015fa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f005 fa09 	bl	8006888 <USB_ReadInterrupts>
 8001476:	4603      	mov	r3, r0
 8001478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001480:	d10b      	bne.n	800149a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 f9f2 	bl	8006888 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ae:	d10b      	bne.n	80014c8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 f9db 	bl	8006888 <USB_ReadInterrupts>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014dc:	d126      	bne.n	800152c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0204 	bic.w	r2, r2, #4
 80014f0:	b292      	uxth	r2, r2
 80014f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014fe:	b29a      	uxth	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	b292      	uxth	r2, r2
 800150a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f007 f81c 	bl	800854c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001526:	b292      	uxth	r2, r2
 8001528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f005 f9a9 	bl	8006888 <USB_ReadInterrupts>
 8001536:	4603      	mov	r3, r0
 8001538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800153c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001540:	d126      	bne.n	8001590 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0208 	orr.w	r2, r2, #8
 8001554:	b292      	uxth	r2, r2
 8001556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800156c:	b292      	uxth	r2, r2
 800156e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0204 	orr.w	r2, r2, #4
 8001584:	b292      	uxth	r2, r2
 8001586:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f006 ffc4 	bl	8008518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f005 f977 	bl	8006888 <USB_ReadInterrupts>
 800159a:	4603      	mov	r3, r0
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d10e      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b8:	b292      	uxth	r2, r2
 80015ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f006 ff7d 	bl	80084be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f005 f95d 	bl	8006888 <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d8:	d10b      	bne.n	80015f2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ec:	b292      	uxth	r2, r2
 80015ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_PCD_SetAddress+0x1a>
 8001610:	2302      	movs	r3, #2
 8001612:	e013      	b.n	800163c <HAL_PCD_SetAddress+0x42>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f005 f90e 	bl	800684e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	70fb      	strb	r3, [r7, #3]
 8001656:	460b      	mov	r3, r1
 8001658:	803b      	strh	r3, [r7, #0]
 800165a:	4613      	mov	r3, r2
 800165c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001666:	2b00      	cmp	r3, #0
 8001668:	da0e      	bge.n	8001688 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	705a      	strb	r2, [r3, #1]
 8001686:	e00e      	b.n	80016a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	f003 0207 	and.w	r2, r3, #7
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016b2:	883a      	ldrh	r2, [r7, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	78ba      	ldrb	r2, [r7, #2]
 80016bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	785b      	ldrb	r3, [r3, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016d0:	78bb      	ldrb	r3, [r7, #2]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d102      	bne.n	80016dc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_PCD_EP_Open+0xa6>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e00e      	b.n	8001708 <HAL_PCD_EP_Open+0xc4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68f9      	ldr	r1, [r7, #12]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fc1d 	bl	8003f38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001706:	7afb      	ldrb	r3, [r7, #11]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800171c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001720:	2b00      	cmp	r3, #0
 8001722:	da0e      	bge.n	8001742 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	705a      	strb	r2, [r3, #1]
 8001740:	e00e      	b.n	8001760 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	f003 0207 	and.w	r2, r3, #7
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	b2da      	uxtb	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_PCD_EP_Close+0x6a>
 8001776:	2302      	movs	r3, #2
 8001778:	e00e      	b.n	8001798 <HAL_PCD_EP_Close+0x88>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 ff3f 	bl	800460c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	460b      	mov	r3, r1
 80017ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	f003 0207 	and.w	r2, r3, #7
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2200      	movs	r2, #0
 80017de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e0:	7afb      	ldrb	r3, [r7, #11]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ec:	7afb      	ldrb	r3, [r7, #11]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6979      	ldr	r1, [r7, #20]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 f8f1 	bl	80049e4 <USB_EPStartXfer>
 8001802:	e005      	b.n	8001810 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 f8ea 	bl	80049e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	f003 0207 	and.w	r2, r3, #7
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800183c:	681b      	ldr	r3, [r3, #0]
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	460b      	mov	r3, r1
 8001856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001858:	7afb      	ldrb	r3, [r7, #11]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2201      	movs	r2, #1
 8001892:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	b2da      	uxtb	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6979      	ldr	r1, [r7, #20]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 f897 	bl	80049e4 <USB_EPStartXfer>
 80018b6:	e005      	b.n	80018c4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6979      	ldr	r1, [r7, #20]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 f890 	bl	80049e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d901      	bls.n	80018ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e03e      	b.n	800196a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da0e      	bge.n	8001912 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	705a      	strb	r2, [r3, #1]
 8001910:	e00c      	b.n	800192c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_PCD_EP_SetStall+0x7e>
 8001948:	2302      	movs	r3, #2
 800194a:	e00e      	b.n	800196a <HAL_PCD_EP_SetStall+0x9c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 fe7a 	bl	8006654 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f003 020f 	and.w	r2, r3, #15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d901      	bls.n	8001990 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e040      	b.n	8001a12 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001994:	2b00      	cmp	r3, #0
 8001996:	da0e      	bge.n	80019b6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	705a      	strb	r2, [r3, #1]
 80019b4:	e00e      	b.n	80019d4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 0207 	and.w	r2, r3, #7
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_PCD_EP_ClrStall+0x82>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e00e      	b.n	8001a12 <HAL_PCD_EP_ClrStall+0xa0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 fe76 	bl	80066f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b08e      	sub	sp, #56	; 0x38
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a22:	e2ec      	b.n	8001ffe <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001a3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 8161 	bne.w	8001d06 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d152      	bne.n	8001af4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5e:	81fb      	strh	r3, [r7, #14]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	89fb      	ldrh	r3, [r7, #14]
 8001a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3328      	adds	r3, #40	; 0x28
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	441a      	add	r2, r3
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f006 fce8 	bl	800848a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 829b 	beq.w	8001ffe <PCD_EP_ISR_Handler+0x5e4>
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 8296 	bne.w	8001ffe <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b292      	uxth	r2, r2
 8001ae6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001af2:	e284      	b.n	8001ffe <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d034      	beq.n	8001b78 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	3306      	adds	r3, #6
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f004 feef 	bl	8006930 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b5e:	4013      	ands	r3, r2
 8001b60:	823b      	strh	r3, [r7, #16]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	8a3a      	ldrh	r2, [r7, #16]
 8001b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f006 fc5d 	bl	8008430 <HAL_PCD_SetupStageCallback>
 8001b76:	e242      	b.n	8001ffe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b78:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f280 823e 	bge.w	8001ffe <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b8e:	4013      	ands	r3, r2
 8001b90:	83bb      	strh	r3, [r7, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	8bba      	ldrh	r2, [r7, #28]
 8001b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3306      	adds	r3, #6
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d019      	beq.n	8001c08 <PCD_EP_ISR_Handler+0x1ee>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d015      	beq.n	8001c08 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	6959      	ldr	r1, [r3, #20]
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f004 fe9f 	bl	8006930 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	441a      	add	r2, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c00:	2100      	movs	r1, #0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f006 fc26 	bl	8008454 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 81f2 	bne.w	8001ffe <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4413      	add	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d112      	bne.n	8001c68 <PCD_EP_ISR_Handler+0x24e>
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	e02f      	b.n	8001cc8 <PCD_EP_ISR_Handler+0x2ae>
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8001c6e:	d813      	bhi.n	8001c98 <PCD_EP_ISR_Handler+0x27e>
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <PCD_EP_ISR_Handler+0x270>
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c86:	3301      	adds	r3, #1
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	029b      	lsls	r3, r3, #10
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	e017      	b.n	8001cc8 <PCD_EP_ISR_Handler+0x2ae>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	095b      	lsrs	r3, r3, #5
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <PCD_EP_ISR_Handler+0x298>
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd8:	827b      	strh	r3, [r7, #18]
 8001cda:	8a7b      	ldrh	r3, [r7, #18]
 8001cdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ce0:	827b      	strh	r3, [r7, #18]
 8001ce2:	8a7b      	ldrh	r3, [r7, #18]
 8001ce4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ce8:	827b      	strh	r3, [r7, #18]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	8a7b      	ldrh	r3, [r7, #18]
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]
 8001d04:	e17b      	b.n	8001ffe <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d18:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f280 80ea 	bge.w	8001ef6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d38:	4013      	ands	r3, r2
 8001d3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d50:	b292      	uxth	r2, r2
 8001d52:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	7b1b      	ldrb	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d122      	bne.n	8001db8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	3306      	adds	r3, #6
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d9a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001d9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8087 	beq.w	8001eb2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	6959      	ldr	r1, [r3, #20]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	88da      	ldrh	r2, [r3, #6]
 8001db0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001db2:	f004 fdbd 	bl	8006930 <USB_ReadPMA>
 8001db6:	e07c      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	78db      	ldrb	r3, [r3, #3]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d108      	bne.n	8001dd2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f927 	bl	800201a <HAL_PCD_EP_DB_Receive>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001dd0:	e06f      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dec:	847b      	strh	r3, [r7, #34]	; 0x22
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	441a      	add	r2, r3
 8001dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d021      	beq.n	8001e70 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	3302      	adds	r3, #2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e54:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02a      	beq.n	8001eb2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	891a      	ldrh	r2, [r3, #8]
 8001e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e6a:	f004 fd61 	bl	8006930 <USB_ReadPMA>
 8001e6e:	e020      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	3306      	adds	r3, #6
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e98:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	6959      	ldr	r1, [r3, #20]
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	895a      	ldrh	r2, [r3, #10]
 8001eac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eae:	f004 fd3f 	bl	8006930 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eb8:	441a      	add	r2, r3
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ec4:	441a      	add	r2, r3
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <PCD_EP_ISR_Handler+0x4c2>
 8001ed2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d206      	bcs.n	8001eea <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f006 fab6 	bl	8008454 <HAL_PCD_DataOutStageCallback>
 8001ee8:	e005      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fd77 	bl	80049e4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d07e      	beq.n	8001ffe <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	843b      	strh	r3, [r7, #32]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	441a      	add	r2, r3
 8001f3e:	8c3b      	ldrh	r3, [r7, #32]
 8001f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	78db      	ldrb	r3, [r3, #3]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d00c      	beq.n	8001f6e <PCD_EP_ISR_Handler+0x554>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	78db      	ldrb	r3, [r3, #3]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d146      	bne.n	8001ff2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d141      	bne.n	8001ff2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	3302      	adds	r3, #2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f96:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	8bfb      	ldrh	r3, [r7, #30]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d906      	bls.n	8001fb0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	8bfb      	ldrh	r3, [r7, #30]
 8001fa8:	1ad2      	subs	r2, r2, r3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	e002      	b.n	8001fb6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f006 fa60 	bl	800848a <HAL_PCD_DataInStageCallback>
 8001fca:	e018      	b.n	8001ffe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	8bfb      	ldrh	r3, [r7, #30]
 8001fd2:	441a      	add	r2, r3
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	8bfb      	ldrh	r3, [r7, #30]
 8001fde:	441a      	add	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fcfa 	bl	80049e4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ff0:	e005      	b.n	8001ffe <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ff2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f91b 	bl	8002234 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002006:	b29b      	uxth	r3, r3
 8002008:	b21b      	sxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f6ff ad0a 	blt.w	8001a24 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3738      	adds	r7, #56	; 0x38
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b088      	sub	sp, #32
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	4613      	mov	r3, r2
 8002026:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d07e      	beq.n	8002130 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	3302      	adds	r3, #2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	4413      	add	r3, r2
 8002050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	8b7b      	ldrh	r3, [r7, #26]
 8002062:	429a      	cmp	r2, r3
 8002064:	d306      	bcc.n	8002074 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	8b7b      	ldrh	r3, [r7, #26]
 800206c:	1ad2      	subs	r2, r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	e002      	b.n	800207a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d123      	bne.n	80020ca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209c:	833b      	strh	r3, [r7, #24]
 800209e:	8b3b      	ldrh	r3, [r7, #24]
 80020a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020a4:	833b      	strh	r3, [r7, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	441a      	add	r2, r3
 80020b4:	8b3b      	ldrh	r3, [r7, #24]
 80020b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01f      	beq.n	8002114 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	82fb      	strh	r3, [r7, #22]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	8afb      	ldrh	r3, [r7, #22]
 8002100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002110:	b29b      	uxth	r3, r3
 8002112:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002114:	8b7b      	ldrh	r3, [r7, #26]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8087 	beq.w	800222a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6959      	ldr	r1, [r3, #20]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	891a      	ldrh	r2, [r3, #8]
 8002128:	8b7b      	ldrh	r3, [r7, #26]
 800212a:	f004 fc01 	bl	8006930 <USB_ReadPMA>
 800212e:	e07c      	b.n	800222a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002138:	b29b      	uxth	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	3306      	adds	r3, #6
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002158:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	8b7b      	ldrh	r3, [r7, #26]
 8002160:	429a      	cmp	r2, r3
 8002162:	d306      	bcc.n	8002172 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	8b7b      	ldrh	r3, [r7, #26]
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	619a      	str	r2, [r3, #24]
 8002170:	e002      	b.n	8002178 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d123      	bne.n	80021c8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	83fb      	strh	r3, [r7, #30]
 800219c:	8bfb      	ldrh	r3, [r7, #30]
 800219e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021a2:	83fb      	strh	r3, [r7, #30]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	8bfb      	ldrh	r3, [r7, #30]
 80021b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11f      	bne.n	8002212 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ec:	83bb      	strh	r3, [r7, #28]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	441a      	add	r2, r3
 80021fc:	8bbb      	ldrh	r3, [r7, #28]
 80021fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800220e:	b29b      	uxth	r3, r3
 8002210:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002212:	8b7b      	ldrh	r3, [r7, #26]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6959      	ldr	r1, [r3, #20]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	895a      	ldrh	r2, [r3, #10]
 8002224:	8b7b      	ldrh	r3, [r7, #26]
 8002226:	f004 fb83 	bl	8006930 <USB_ReadPMA>
    }
  }

  return count;
 800222a:	8b7b      	ldrh	r3, [r7, #26]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0a2      	sub	sp, #136	; 0x88
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 81c7 	beq.w	80025dc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	3302      	adds	r3, #2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002276:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002282:	429a      	cmp	r2, r3
 8002284:	d907      	bls.n	8002296 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800228e:	1ad2      	subs	r2, r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	619a      	str	r2, [r3, #24]
 8002294:	e002      	b.n	800229c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 80b9 	bne.w	8002418 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d126      	bne.n	80022fc <HAL_PCD_EP_DB_Transmit+0xc8>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	4413      	add	r3, r2
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	011a      	lsls	r2, r3, #4
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	4413      	add	r3, r2
 80022d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	e01a      	b.n	8002332 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d116      	bne.n	8002332 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	4413      	add	r3, r2
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	011a      	lsls	r2, r3, #4
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	4413      	add	r3, r2
 8002326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	2200      	movs	r2, #0
 8002330:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d126      	bne.n	800238e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4413      	add	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	011a      	lsls	r2, r3, #4
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4413      	add	r3, r2
 8002362:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002372:	b29a      	uxth	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	801a      	strh	r2, [r3, #0]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002386:	b29a      	uxth	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	e017      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x18a>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d113      	bne.n	80023be <HAL_PCD_EP_DB_Transmit+0x18a>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	4413      	add	r3, r2
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	011a      	lsls	r2, r3, #4
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	4413      	add	r3, r2
 80023b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2200      	movs	r2, #0
 80023bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f006 f860 	bl	800848a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 82d4 	beq.w	800297e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f0:	827b      	strh	r3, [r7, #18]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	441a      	add	r2, r3
 8002400:	8a7b      	ldrh	r3, [r7, #18]
 8002402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002412:	b29b      	uxth	r3, r3
 8002414:	8013      	strh	r3, [r2, #0]
 8002416:	e2b2      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d021      	beq.n	8002466 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800245e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	f040 8286 	bne.w	800297e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	441a      	add	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002488:	441a      	add	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6a1a      	ldr	r2, [r3, #32]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	429a      	cmp	r2, r3
 8002498:	d309      	bcc.n	80024ae <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	621a      	str	r2, [r3, #32]
 80024ac:	e015      	b.n	80024da <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80024b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024c4:	e009      	b.n	80024da <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d155      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0x35a>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f6:	4413      	add	r3, r2
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	011a      	lsls	r2, r3, #4
 8002500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002502:	4413      	add	r3, r2
 8002504:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
 800250a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250c:	2b00      	cmp	r3, #0
 800250e:	d112      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x302>
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
 8002516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800251a:	b29a      	uxth	r2, r3
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252e:	b29a      	uxth	r2, r3
 8002530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	e047      	b.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002538:	2b3e      	cmp	r3, #62	; 0x3e
 800253a:	d811      	bhi.n	8002560 <HAL_PCD_EP_DB_Transmit+0x32c>
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
 8002542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_PCD_EP_DB_Transmit+0x31e>
 800254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254e:	3301      	adds	r3, #1
 8002550:	64bb      	str	r3, [r7, #72]	; 0x48
 8002552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002554:	b29b      	uxth	r3, r3
 8002556:	029b      	lsls	r3, r3, #10
 8002558:	b29a      	uxth	r2, r3
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	e032      	b.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <HAL_PCD_EP_DB_Transmit+0x342>
 8002570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002572:	3b01      	subs	r3, #1
 8002574:	64bb      	str	r3, [r7, #72]	; 0x48
 8002576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002578:	b29b      	uxth	r3, r3
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	b29b      	uxth	r3, r3
 800257e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002586:	b29a      	uxth	r2, r3
 8002588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	e01b      	b.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x392>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d117      	bne.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025aa:	4413      	add	r3, r2
 80025ac:	643b      	str	r3, [r7, #64]	; 0x40
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	011a      	lsls	r2, r3, #4
 80025b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6959      	ldr	r1, [r3, #20]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	891a      	ldrh	r2, [r3, #8]
 80025d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f004 f966 	bl	80068a6 <USB_WritePMA>
 80025da:	e1d0      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	3306      	adds	r3, #6
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002604:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002610:	429a      	cmp	r2, r3
 8002612:	d307      	bcc.n	8002624 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261c:	1ad2      	subs	r2, r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	619a      	str	r2, [r3, #24]
 8002622:	e002      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 80c4 	bne.w	80027bc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d126      	bne.n	800268a <HAL_PCD_EP_DB_Transmit+0x456>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002650:	4413      	add	r3, r2
 8002652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	011a      	lsls	r2, r3, #4
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	4413      	add	r3, r2
 800265e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002662:	66bb      	str	r3, [r7, #104]	; 0x68
 8002664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800266e:	b29a      	uxth	r2, r3
 8002670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002672:	801a      	strh	r2, [r3, #0]
 8002674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800267e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002682:	b29a      	uxth	r2, r3
 8002684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	e01a      	b.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x48c>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d116      	bne.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	677b      	str	r3, [r7, #116]	; 0x74
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a6:	4413      	add	r3, r2
 80026a8:	677b      	str	r3, [r7, #116]	; 0x74
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	011a      	lsls	r2, r3, #4
 80026b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b2:	4413      	add	r3, r2
 80026b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026b8:	673b      	str	r3, [r7, #112]	; 0x70
 80026ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026bc:	2200      	movs	r2, #0
 80026be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12f      	bne.n	800272e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e6:	4413      	add	r3, r2
 80026e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	011a      	lsls	r2, r3, #4
 80026f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f6:	4413      	add	r3, r2
 80026f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800270c:	b29a      	uxth	r2, r3
 800270e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002724:	b29a      	uxth	r2, r3
 8002726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e017      	b.n	800275e <HAL_PCD_EP_DB_Transmit+0x52a>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d113      	bne.n	800275e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002744:	4413      	add	r3, r2
 8002746:	67bb      	str	r3, [r7, #120]	; 0x78
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	011a      	lsls	r2, r3, #4
 800274e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002750:	4413      	add	r3, r2
 8002752:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002756:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800275a:	2200      	movs	r2, #0
 800275c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f005 fe90 	bl	800848a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8104 	bne.w	800297e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002790:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	441a      	add	r2, r3
 80027a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80027a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	8013      	strh	r3, [r2, #0]
 80027ba:	e0e0      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d121      	bne.n	800280a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002806:	b29b      	uxth	r3, r3
 8002808:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002810:	2b01      	cmp	r3, #1
 8002812:	f040 80b4 	bne.w	800297e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	441a      	add	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800282c:	441a      	add	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6a1a      	ldr	r2, [r3, #32]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d309      	bcc.n	8002852 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284a:	1ad2      	subs	r2, r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	621a      	str	r2, [r3, #32]
 8002850:	e015      	b.n	800287e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800285a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800285e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002868:	e009      	b.n	800287e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	667b      	str	r3, [r7, #100]	; 0x64
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d155      	bne.n	8002938 <HAL_PCD_EP_DB_Transmit+0x704>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a0:	4413      	add	r3, r2
 80028a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	011a      	lsls	r2, r3, #4
 80028aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ac:	4413      	add	r3, r2
 80028ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80028b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d112      	bne.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80028ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c8:	801a      	strh	r2, [r3, #0]
 80028ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	e044      	b.n	800296a <HAL_PCD_EP_DB_Transmit+0x736>
 80028e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e2:	2b3e      	cmp	r3, #62	; 0x3e
 80028e4:	d811      	bhi.n	800290a <HAL_PCD_EP_DB_Transmit+0x6d6>
 80028e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	657b      	str	r3, [r7, #84]	; 0x54
 80028ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_PCD_EP_DB_Transmit+0x6c8>
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	3301      	adds	r3, #1
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
 80028fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fe:	b29b      	uxth	r3, r3
 8002900:	029b      	lsls	r3, r3, #10
 8002902:	b29a      	uxth	r2, r3
 8002904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	e02f      	b.n	800296a <HAL_PCD_EP_DB_Transmit+0x736>
 800290a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	657b      	str	r3, [r7, #84]	; 0x54
 8002910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800291a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291c:	3b01      	subs	r3, #1
 800291e:	657b      	str	r3, [r7, #84]	; 0x54
 8002920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002922:	b29b      	uxth	r3, r3
 8002924:	029b      	lsls	r3, r3, #10
 8002926:	b29b      	uxth	r3, r3
 8002928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002930:	b29a      	uxth	r2, r3
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	e018      	b.n	800296a <HAL_PCD_EP_DB_Transmit+0x736>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d114      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x736>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800294e:	4413      	add	r3, r2
 8002950:	667b      	str	r3, [r7, #100]	; 0x64
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	011a      	lsls	r2, r3, #4
 8002958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800295a:	4413      	add	r3, r2
 800295c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002960:	663b      	str	r3, [r7, #96]	; 0x60
 8002962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002964:	b29a      	uxth	r2, r3
 8002966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002968:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6959      	ldr	r1, [r3, #20]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	895a      	ldrh	r2, [r3, #10]
 8002976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	f003 ff94 	bl	80068a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002998:	823b      	strh	r3, [r7, #16]
 800299a:	8a3b      	ldrh	r3, [r7, #16]
 800299c:	f083 0310 	eor.w	r3, r3, #16
 80029a0:	823b      	strh	r3, [r7, #16]
 80029a2:	8a3b      	ldrh	r3, [r7, #16]
 80029a4:	f083 0320 	eor.w	r3, r3, #32
 80029a8:	823b      	strh	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	441a      	add	r2, r3
 80029b8:	8a3b      	ldrh	r3, [r7, #16]
 80029ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3788      	adds	r7, #136	; 0x88
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	4613      	mov	r3, r2
 80029e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e009      	b.n	8002a22 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a0e:	897a      	ldrh	r2, [r7, #10]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a22:	893b      	ldrh	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	80da      	strh	r2, [r3, #6]
 8002a36:	e00b      	b.n	8002a50 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e31d      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	4b91      	ldr	r3, [pc, #580]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d07b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d006      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d10f      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b87      	ldr	r3, [pc, #540]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d06a      	beq.n	8002b84 <HAL_RCC_OscConfig+0x128>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d166      	bne.n	8002b84 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e2f7      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x74>
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7e      	ldr	r2, [pc, #504]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e02d      	b.n	8002b2c <HAL_RCC_OscConfig+0xd0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x96>
 8002ad8:	4b79      	ldr	r3, [pc, #484]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a75      	ldr	r2, [pc, #468]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0xd0>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0xb8>
 8002afa:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a70      	ldr	r2, [pc, #448]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b6e      	ldr	r3, [pc, #440]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6d      	ldr	r2, [pc, #436]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xd0>
 8002b14:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a69      	ldr	r2, [pc, #420]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a66      	ldr	r2, [pc, #408]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe f86c 	bl	8000c10 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f868 	bl	8000c10 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e2ad      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe0>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe f858 	bl	8000c10 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe f854 	bl	8000c10 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e299      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b76:	4b52      	ldr	r3, [pc, #328]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x108>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d05a      	beq.n	8002c48 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d119      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x176>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x160>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e276      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	493d      	ldr	r1, [pc, #244]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd0:	e03a      	b.n	8002c48 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d020      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_RCC_OscConfig+0x268>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe f816 	bl	8000c10 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe f812 	bl	8000c10 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e257      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	492a      	ldr	r1, [pc, #168]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
 8002c1a:	e015      	b.n	8002c48 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <HAL_RCC_OscConfig+0x268>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fd fff5 	bl	8000c10 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fd fff1 	bl	8000c10 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e236      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b8 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d170      	bne.n	8002d3e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_OscConfig+0x218>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e21a      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1a      	ldr	r2, [r3, #32]
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d921      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fc7d 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e208      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	061b      	lsls	r3, r3, #24
 8002cb8:	4901      	ldr	r1, [pc, #4]	; (8002cc0 <HAL_RCC_OscConfig+0x264>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
 8002cbe:	e020      	b.n	8002d02 <HAL_RCC_OscConfig+0x2a6>
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc8:	4b99      	ldr	r3, [pc, #612]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4996      	ldr	r1, [pc, #600]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cda:	4b95      	ldr	r3, [pc, #596]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	4991      	ldr	r1, [pc, #580]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fc48 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1d3      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d12:	4a87      	ldr	r2, [pc, #540]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	0912      	lsrs	r2, r2, #4
 8002d18:	f002 020f 	and.w	r2, r2, #15
 8002d1c:	4985      	ldr	r1, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x4d8>)
 8002d1e:	5c8a      	ldrb	r2, [r1, r2]
 8002d20:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d22:	4a85      	ldr	r2, [pc, #532]	; (8002f38 <HAL_RCC_OscConfig+0x4dc>)
 8002d24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d26:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <HAL_RCC_OscConfig+0x4e0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd ff24 	bl	8000b78 <HAL_InitTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d045      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	e1b5      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d029      	beq.n	8002d9a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d46:	4b7e      	ldr	r3, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x4e4>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fd ff60 	bl	8000c10 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d54:	f7fd ff5c 	bl	8000c10 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1a1      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d66:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d72:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	496c      	ldr	r1, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d84:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	4967      	ldr	r1, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d9a:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <HAL_RCC_OscConfig+0x4e4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fd ff36 	bl	8000c10 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002da8:	f7fd ff32 	bl	8000c10 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e177      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dba:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d030      	beq.n	8002e34 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7fd ff16 	bl	8000c10 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fd ff12 	bl	8000c10 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e157      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dfa:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x38c>
 8002e06:	e015      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b4e      	ldr	r3, [pc, #312]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fd feff 	bl	8000c10 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fd fefb 	bl	8000c10 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e140      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e28:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80b5 	beq.w	8002fac <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	4a36      	ldr	r2, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6253      	str	r3, [r2, #36]	; 0x24
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a32      	ldr	r2, [pc, #200]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e86:	f7fd fec3 	bl	8000c10 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7fd febf 	bl	8000c10 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e104      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x466>
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebe:	6353      	str	r3, [r2, #52]	; 0x34
 8002ec0:	e02d      	b.n	8002f1e <HAL_RCC_OscConfig+0x4c2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x488>
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed4:	6353      	str	r3, [r2, #52]	; 0x34
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ee2:	e01c      	b.n	8002f1e <HAL_RCC_OscConfig+0x4c2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4aa>
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	4a0c      	ldr	r2, [pc, #48]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6353      	str	r3, [r2, #52]	; 0x34
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0x4c2>
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f10:	6353      	str	r3, [r2, #52]	; 0x34
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	4a06      	ldr	r2, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x4d4>)
 8002f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d024      	beq.n	8002f70 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fd fe73 	bl	8000c10 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2c:	e019      	b.n	8002f62 <HAL_RCC_OscConfig+0x506>
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	08009334 	.word	0x08009334
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	42470020 	.word	0x42470020
 8002f44:	42470680 	.word	0x42470680
 8002f48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fd fe60 	bl	8000c10 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0a3      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f62:	4b54      	ldr	r3, [pc, #336]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ee      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4f0>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fd fe4e 	bl	8000c10 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fd fe4a 	bl	8000c10 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e08d      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f8e:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ee      	bne.n	8002f78 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b44      	ldr	r3, [pc, #272]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	4a43      	ldr	r2, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d079      	beq.n	80030a8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d056      	beq.n	8003068 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d13b      	bne.n	800303a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_OscConfig+0x65c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fd fe22 	bl	8000c10 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fd fe1e 	bl	8000c10 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e063      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	4319      	orrs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	430b      	orrs	r3, r1
 8003006:	492b      	ldr	r1, [pc, #172]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x65c>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fd fdfd 	bl	8000c10 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7fd fdf9 	bl	8000c10 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e03e      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800302c:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x5be>
 8003038:	e036      	b.n	80030a8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_RCC_OscConfig+0x65c>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fd fde6 	bl	8000c10 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fd fde2 	bl	8000c10 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e027      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x5ec>
 8003066:	e01f      	b.n	80030a8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e01a      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCC_OscConfig+0x658>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	429a      	cmp	r2, r3
 8003086:	d10d      	bne.n	80030a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d106      	bne.n	80030a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	42470060 	.word	0x42470060

080030bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e11a      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b8f      	ldr	r3, [pc, #572]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d919      	bls.n	8003112 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x34>
 80030e4:	4b8a      	ldr	r3, [pc, #552]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a89      	ldr	r2, [pc, #548]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b87      	ldr	r3, [pc, #540]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 0201 	bic.w	r2, r3, #1
 80030f8:	4985      	ldr	r1, [pc, #532]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003100:	4b83      	ldr	r3, [pc, #524]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0f9      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311e:	4b7d      	ldr	r3, [pc, #500]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	497a      	ldr	r1, [pc, #488]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 808e 	beq.w	800325a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d121      	bne.n	8003196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0d7      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800315e:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0bf      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0b7      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	495c      	ldr	r1, [pc, #368]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd fd32 	bl	8000c10 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d112      	bne.n	80031dc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fd fd2a 	bl	8000c10 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e09b      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ce:	4b51      	ldr	r3, [pc, #324]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xfc>
 80031da:	e03e      	b.n	800325a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d112      	bne.n	800320a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e6:	f7fd fd13 	bl	8000c10 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e084      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031fc:	4b45      	ldr	r3, [pc, #276]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b0c      	cmp	r3, #12
 8003206:	d1ee      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x12a>
 8003208:	e027      	b.n	800325a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d11d      	bne.n	800324e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fd fcfc 	bl	8000c10 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e06d      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b04      	cmp	r3, #4
 8003234:	d1ee      	bne.n	8003214 <HAL_RCC_ClockConfig+0x158>
 8003236:	e010      	b.n	800325a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fd fcea 	bl	8000c10 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e05b      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ee      	bne.n	8003238 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d219      	bcs.n	800329c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_ClockConfig+0x1be>
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	4923      	ldr	r1, [pc, #140]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_ClockConfig+0x254>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e034      	b.n	8003306 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4917      	ldr	r1, [pc, #92]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	490f      	ldr	r1, [pc, #60]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032da:	f000 f823 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032de:	4602      	mov	r2, r0
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCC_ClockConfig+0x258>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	490b      	ldr	r1, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x25c>)
 80032ec:	5ccb      	ldrb	r3, [r1, r3]
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x260>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd fc3c 	bl	8000b78 <HAL_InitTick>
 8003300:	4603      	mov	r3, r0
 8003302:	72fb      	strb	r3, [r7, #11]

  return status;
 8003304:	7afb      	ldrb	r3, [r7, #11]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00
 8003314:	40023800 	.word	0x40023800
 8003318:	08009334 	.word	0x08009334
 800331c:	20000000 	.word	0x20000000
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003328:	b092      	sub	sp, #72	; 0x48
 800332a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800332c:	4b79      	ldr	r3, [pc, #484]	; (8003514 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d00d      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x34>
 800333c:	2b0c      	cmp	r3, #12
 800333e:	f200 80d5 	bhi.w	80034ec <HAL_RCC_GetSysClockFreq+0x1c8>
 8003342:	2b04      	cmp	r3, #4
 8003344:	d002      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x28>
 8003346:	2b08      	cmp	r3, #8
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x2e>
 800334a:	e0cf      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800334c:	4b72      	ldr	r3, [pc, #456]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003350:	e0da      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003352:	4b72      	ldr	r3, [pc, #456]	; (800351c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003354:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003356:	e0d7      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	0c9b      	lsrs	r3, r3, #18
 800335c:	f003 020f 	and.w	r2, r3, #15
 8003360:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003362:	5c9b      	ldrb	r3, [r3, r2]
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003368:	0d9b      	lsrs	r3, r3, #22
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003372:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d05d      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2200      	movs	r2, #0
 8003382:	4618      	mov	r0, r3
 8003384:	4611      	mov	r1, r2
 8003386:	4604      	mov	r4, r0
 8003388:	460d      	mov	r5, r1
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339c:	0150      	lsls	r0, r2, #5
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4621      	mov	r1, r4
 80033a4:	1a51      	subs	r1, r2, r1
 80033a6:	6139      	str	r1, [r7, #16]
 80033a8:	4629      	mov	r1, r5
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033bc:	4659      	mov	r1, fp
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c6:	4651      	mov	r1, sl
 80033c8:	018a      	lsls	r2, r1, #6
 80033ca:	46d4      	mov	ip, sl
 80033cc:	ebb2 080c 	subs.w	r8, r2, ip
 80033d0:	4659      	mov	r1, fp
 80033d2:	eb63 0901 	sbc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	462b      	mov	r3, r5
 80033f8:	eb49 0303 	adc.w	r3, r9, r3
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800340a:	4629      	mov	r1, r5
 800340c:	024b      	lsls	r3, r1, #9
 800340e:	4620      	mov	r0, r4
 8003410:	4629      	mov	r1, r5
 8003412:	4604      	mov	r4, r0
 8003414:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003418:	4601      	mov	r1, r0
 800341a:	024a      	lsls	r2, r1, #9
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003422:	2200      	movs	r2, #0
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342c:	f7fc fea6 	bl	800017c <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	647b      	str	r3, [r7, #68]	; 0x44
 8003438:	e055      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	2200      	movs	r2, #0
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	627a      	str	r2, [r7, #36]	; 0x24
 8003442:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003446:	4642      	mov	r2, r8
 8003448:	464b      	mov	r3, r9
 800344a:	f04f 0000 	mov.w	r0, #0
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	0159      	lsls	r1, r3, #5
 8003454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003458:	0150      	lsls	r0, r2, #5
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	46c4      	mov	ip, r8
 8003460:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003464:	4640      	mov	r0, r8
 8003466:	4649      	mov	r1, r9
 8003468:	468c      	mov	ip, r1
 800346a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800347a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800347e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003482:	ebb2 040a 	subs.w	r4, r2, sl
 8003486:	eb63 050b 	sbc.w	r5, r3, fp
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	00eb      	lsls	r3, r5, #3
 8003494:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003498:	00e2      	lsls	r2, r4, #3
 800349a:	4614      	mov	r4, r2
 800349c:	461d      	mov	r5, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	18e3      	adds	r3, r4, r3
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	460b      	mov	r3, r1
 80034a6:	eb45 0303 	adc.w	r3, r5, r3
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b8:	4629      	mov	r1, r5
 80034ba:	028b      	lsls	r3, r1, #10
 80034bc:	4620      	mov	r0, r4
 80034be:	4629      	mov	r1, r5
 80034c0:	4604      	mov	r4, r0
 80034c2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80034c6:	4601      	mov	r1, r0
 80034c8:	028a      	lsls	r2, r1, #10
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	2200      	movs	r2, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	61fa      	str	r2, [r7, #28]
 80034d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034da:	f7fc fe4f 	bl	800017c <__aeabi_uldivmod>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4613      	mov	r3, r2
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80034e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80034ea:	e00d      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0b5b      	lsrs	r3, r3, #13
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	3301      	adds	r3, #1
 80034fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800350a:	4618      	mov	r0, r3
 800350c:	3748      	adds	r7, #72	; 0x48
 800350e:	46bd      	mov	sp, r7
 8003510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	00f42400 	.word	0x00f42400
 800351c:	007a1200 	.word	0x007a1200
 8003520:	08009328 	.word	0x08009328

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <HAL_RCC_GetHCLKFreq+0x10>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff2 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	08009344 	.word	0x08009344

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003564:	f7ff ffde 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0adb      	lsrs	r3, r3, #11
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	08009344 	.word	0x08009344

08003588 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d12c      	bne.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e016      	b.n	80035e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	4a1f      	ldr	r2, [pc, #124]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6253      	str	r3, [r2, #36]	; 0x24
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035d8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80035ec:	d105      	bne.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x72>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f4:	d101      	bne.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80035f6:	2301      	movs	r3, #1
 80035f8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 0201 	bic.w	r2, r3, #1
 8003614:	490b      	ldr	r1, [pc, #44]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000
 8003644:	40023c00 	.word	0x40023c00

08003648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e07b      	b.n	8003752 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	2b00      	cmp	r3, #0
 8003660:	d108      	bne.n	8003674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	d009      	beq.n	8003680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
 8003672:	e005      	b.n	8003680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd f92c 	bl	80008f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	ea42 0103 	orr.w	r1, r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0104 	and.w	r1, r3, #4
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	f003 0210 	and.w	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003740:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08c      	sub	sp, #48	; 0x30
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_TransmitReceive+0x26>
 800377c:	2302      	movs	r3, #2
 800377e:	e18a      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x33c>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003788:	f7fd fa42 	bl	8000c10 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d00f      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x70>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b0:	d107      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x68>
 80037ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
 80037c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037c8:	e15b      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_SPI_TransmitReceive+0x82>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_TransmitReceive+0x82>
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037e2:	e14e      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d003      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2205      	movs	r2, #5
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	887a      	ldrh	r2, [r7, #2]
 800381a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	887a      	ldrh	r2, [r7, #2]
 8003820:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d007      	beq.n	800384c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d178      	bne.n	8003948 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x10a>
 800385e:	8b7b      	ldrh	r3, [r7, #26]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d166      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003888:	e053      	b.n	8003932 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11b      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x176>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x176>
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d113      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d119      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x1b8>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d014      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	b292      	uxth	r2, r2
 80038f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	1c9a      	adds	r2, r3, #2
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390e:	2301      	movs	r3, #1
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003912:	f7fd f97d 	bl	8000c10 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800391e:	429a      	cmp	r2, r3
 8003920:	d807      	bhi.n	8003932 <HAL_SPI_TransmitReceive+0x1d8>
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d003      	beq.n	8003932 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003930:	e0a7      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1a6      	bne.n	800388a <HAL_SPI_TransmitReceive+0x130>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1a1      	bne.n	800388a <HAL_SPI_TransmitReceive+0x130>
 8003946:	e07c      	b.n	8003a42 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x1fc>
 8003950:	8b7b      	ldrh	r3, [r7, #26]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d16b      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800397c:	e057      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b02      	cmp	r3, #2
 800398a:	d11c      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x26c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0x26c>
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d114      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d119      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x2ae>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d014      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a04:	2301      	movs	r3, #1
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a08:	f7fd f902 	bl	8000c10 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d803      	bhi.n	8003a20 <HAL_SPI_TransmitReceive+0x2c6>
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x2cc>
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a2c:	e029      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1a2      	bne.n	800397e <HAL_SPI_TransmitReceive+0x224>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d19d      	bne.n	800397e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f8b2 	bl	8003bb0 <SPI_EndRxTxTransaction>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a5e:	e010      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	e000      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3730      	adds	r7, #48	; 0x30
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ab0:	f7fd f8ae 	bl	8000c10 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ac0:	f7fd f8a6 	bl	8000c10 <HAL_GetTick>
 8003ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	0d1b      	lsrs	r3, r3, #20
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	fb02 f303 	mul.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ad6:	e054      	b.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d050      	beq.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ae0:	f7fd f896 	bl	8000c10 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d902      	bls.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d13d      	bne.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0e:	d111      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b18:	d004      	beq.n	8003b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d107      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3c:	d10f      	bne.n	8003b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e017      	b.n	8003ba2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d19b      	bne.n	8003ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <SPI_EndRxTxTransaction+0x7c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <SPI_EndRxTxTransaction+0x80>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0d5b      	lsrs	r3, r3, #21
 8003bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bcc:	fb02 f303 	mul.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d112      	bne.n	8003c02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff ff5a 	bl	8003aa0 <SPI_WaitFlagStateUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e00f      	b.n	8003c22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d0f2      	beq.n	8003c02 <SPI_EndRxTxTransaction+0x52>
 8003c1c:	e000      	b.n	8003c20 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c1e:	bf00      	nop
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	165e9f81 	.word	0x165e9f81

08003c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e03f      	b.n	8003cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fc fe90 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f829 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d10:	f023 030c 	bic.w	r3, r3, #12
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a55      	ldr	r2, [pc, #340]	; (8003e90 <UART_SetConfig+0x1c0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d103      	bne.n	8003d46 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d3e:	f7ff fc0f 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	e002      	b.n	8003d4c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d46:	f7ff fbf7 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8003d4a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d54:	d14c      	bne.n	8003df0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	0119      	lsls	r1, r3, #4
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d8c:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2064      	movs	r0, #100	; 0x64
 8003d96:	fb00 f303 	mul.w	r3, r0, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	3332      	adds	r3, #50	; 0x32
 8003da0:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dae:	4419      	add	r1, r3
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	009a      	lsls	r2, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc6:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003dc8:	fba3 0302 	umull	r0, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2064      	movs	r0, #100	; 0x64
 8003dd0:	fb00 f303 	mul.w	r3, r0, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	3332      	adds	r3, #50	; 0x32
 8003dda:	4a2e      	ldr	r2, [pc, #184]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 0207 	and.w	r2, r3, #7
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	440a      	add	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dee:	e04a      	b.n	8003e86 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009a      	lsls	r2, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	0119      	lsls	r1, r3, #4
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009a      	lsls	r2, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003e28:	fba3 0302 	umull	r0, r3, r3, r2
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	2064      	movs	r0, #100	; 0x64
 8003e30:	fb00 f303 	mul.w	r3, r0, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	3332      	adds	r3, #50	; 0x32
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e46:	4419      	add	r1, r3
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009a      	lsls	r2, r3, #2
 8003e52:	441a      	add	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003e60:	fba3 0302 	umull	r0, r3, r3, r2
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	2064      	movs	r0, #100	; 0x64
 8003e68:	fb00 f303 	mul.w	r3, r0, r3
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	3332      	adds	r3, #50	; 0x32
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <UART_SetConfig+0x1c4>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	440a      	add	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40013800 	.word	0x40013800
 8003e94:	51eb851f 	.word	0x51eb851f

08003e98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ea8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003eac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ecc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ed0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ef8:	b084      	sub	sp, #16
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	f107 0014 	add.w	r0, r7, #20
 8003f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	b004      	add	sp, #16
 8003f36:	4770      	bx	lr

08003f38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b09b      	sub	sp, #108	; 0x6c
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	78db      	ldrb	r3, [r3, #3]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d81f      	bhi.n	8003faa <USB_ActivateEndpoint+0x72>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <USB_ActivateEndpoint+0x38>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f9d 	.word	0x08003f9d
 8003f78:	08003fb3 	.word	0x08003fb3
 8003f7c:	08003f8f 	.word	0x08003f8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f88:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f8c:	e012      	b.n	8003fb4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f92:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f9a:	e00b      	b.n	8003fb4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003fa8:	e004      	b.n	8003fb4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003fb0:	e000      	b.n	8003fb4 <USB_ActivateEndpoint+0x7c>
      break;
 8003fb2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	441a      	add	r2, r3
 8004004:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800400c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004018:	b29b      	uxth	r3, r3
 800401a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	7b1b      	ldrb	r3, [r3, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 8149 	bne.w	80042b8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	785b      	ldrb	r3, [r3, #1]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8084 	beq.w	8004138 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4413      	add	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	88db      	ldrh	r3, [r3, #6]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	b29b      	uxth	r3, r3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	81fb      	strh	r3, [r7, #14]
 8004072:	89fb      	ldrh	r3, [r7, #14]
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <USB_ActivateEndpoint+0x17c>
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	81bb      	strh	r3, [r7, #12]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	89bb      	ldrh	r3, [r7, #12]
 80040a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	78db      	ldrb	r3, [r3, #3]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d020      	beq.n	80040fe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d2:	813b      	strh	r3, [r7, #8]
 80040d4:	893b      	ldrh	r3, [r7, #8]
 80040d6:	f083 0320 	eor.w	r3, r3, #32
 80040da:	813b      	strh	r3, [r7, #8]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	893b      	ldrh	r3, [r7, #8]
 80040e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	8013      	strh	r3, [r2, #0]
 80040fc:	e27f      	b.n	80045fe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]
 8004136:	e262      	b.n	80045fe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	4413      	add	r3, r2
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	011a      	lsls	r2, r3, #4
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	4413      	add	r3, r2
 8004156:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	88db      	ldrh	r3, [r3, #6]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	b29b      	uxth	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004176:	b29b      	uxth	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	4413      	add	r3, r2
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	011a      	lsls	r2, r3, #4
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	4413      	add	r3, r2
 800418a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d112      	bne.n	80041be <USB_ActivateEndpoint+0x286>
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	801a      	strh	r2, [r3, #0]
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	e02f      	b.n	800421e <USB_ActivateEndpoint+0x2e6>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b3e      	cmp	r3, #62	; 0x3e
 80041c4:	d813      	bhi.n	80041ee <USB_ActivateEndpoint+0x2b6>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	663b      	str	r3, [r7, #96]	; 0x60
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <USB_ActivateEndpoint+0x2a8>
 80041da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041dc:	3301      	adds	r3, #1
 80041de:	663b      	str	r3, [r7, #96]	; 0x60
 80041e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	e017      	b.n	800421e <USB_ActivateEndpoint+0x2e6>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <USB_ActivateEndpoint+0x2d0>
 8004202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004204:	3b01      	subs	r3, #1
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
 8004208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420a:	b29b      	uxth	r3, r3
 800420c:	029b      	lsls	r3, r3, #10
 800420e:	b29b      	uxth	r3, r3
 8004210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004218:	b29a      	uxth	r2, r3
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	83fb      	strh	r3, [r7, #30]
 800422c:	8bfb      	ldrh	r3, [r7, #30]
 800422e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01b      	beq.n	800426e <USB_ActivateEndpoint+0x336>
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	83bb      	strh	r3, [r7, #28]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	8bbb      	ldrh	r3, [r7, #28]
 800425a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	b29b      	uxth	r3, r3
 800426c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	837b      	strh	r3, [r7, #26]
 8004286:	8b7b      	ldrh	r3, [r7, #26]
 8004288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800428c:	837b      	strh	r3, [r7, #26]
 800428e:	8b7b      	ldrh	r3, [r7, #26]
 8004290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004294:	837b      	strh	r3, [r7, #26]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	8b7b      	ldrh	r3, [r7, #26]
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]
 80042b6:	e1a2      	b.n	80045fe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	441a      	add	r2, r3
 80042dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80042e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80042ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004304:	4413      	add	r3, r2
 8004306:	65bb      	str	r3, [r7, #88]	; 0x58
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	011a      	lsls	r2, r3, #4
 800430e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004310:	4413      	add	r3, r2
 8004312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	891b      	ldrh	r3, [r3, #8]
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004326:	801a      	strh	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	653b      	str	r3, [r7, #80]	; 0x50
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004338:	4413      	add	r3, r2
 800433a:	653b      	str	r3, [r7, #80]	; 0x50
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	011a      	lsls	r2, r3, #4
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	4413      	add	r3, r2
 8004346:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	895b      	ldrh	r3, [r3, #10]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 8091 	bne.w	8004488 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01b      	beq.n	80043b6 <USB_ActivateEndpoint+0x47e>
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004394:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80043a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	873b      	strh	r3, [r7, #56]	; 0x38
 80043c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01b      	beq.n	8004406 <USB_ActivateEndpoint+0x4ce>
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800441e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004424:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004426:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004428:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800442c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800443a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004464:	867b      	strh	r3, [r7, #50]	; 0x32
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	441a      	add	r2, r3
 8004470:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]
 8004486:	e0ba      	b.n	80045fe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004498:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800449c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01d      	beq.n	80044e0 <USB_ActivateEndpoint+0x5a8>
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80044f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01d      	beq.n	8004538 <USB_ActivateEndpoint+0x600>
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	78db      	ldrb	r3, [r3, #3]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d024      	beq.n	800458a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004556:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800455a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800455e:	f083 0320 	eor.w	r3, r3, #32
 8004562:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	441a      	add	r2, r3
 8004570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	b29b      	uxth	r3, r3
 8004586:	8013      	strh	r3, [r2, #0]
 8004588:	e01d      	b.n	80045c6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80045fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004602:	4618      	mov	r0, r3
 8004604:	376c      	adds	r7, #108	; 0x6c
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800460c:	b480      	push	{r7}
 800460e:	b08d      	sub	sp, #52	; 0x34
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	7b1b      	ldrb	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 808e 	bne.w	800473c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d044      	beq.n	80046b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	81bb      	strh	r3, [r7, #12]
 8004636:	89bb      	ldrh	r3, [r7, #12]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <USB_DeactivateEndpoint+0x6c>
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	817b      	strh	r3, [r7, #10]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468e:	813b      	strh	r3, [r7, #8]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	893b      	ldrh	r3, [r7, #8]
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]
 80046b0:	e192      	b.n	80049d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	827b      	strh	r3, [r7, #18]
 80046c0:	8a7b      	ldrh	r3, [r7, #18]
 80046c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01b      	beq.n	8004702 <USB_DeactivateEndpoint+0xf6>
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e0:	823b      	strh	r3, [r7, #16]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	441a      	add	r2, r3
 80046ec:	8a3b      	ldrh	r3, [r7, #16]
 80046ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	81fb      	strh	r3, [r7, #14]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	89fb      	ldrh	r3, [r7, #14]
 8004726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]
 800473a:	e14d      	b.n	80049d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 80a5 	bne.w	8004890 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	843b      	strh	r3, [r7, #32]
 8004754:	8c3b      	ldrh	r3, [r7, #32]
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01b      	beq.n	8004796 <USB_DeactivateEndpoint+0x18a>
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	83fb      	strh	r3, [r7, #30]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	8bfb      	ldrh	r3, [r7, #30]
 8004782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	b29b      	uxth	r3, r3
 8004794:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	83bb      	strh	r3, [r7, #28]
 80047a4:	8bbb      	ldrh	r3, [r7, #28]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01b      	beq.n	80047e6 <USB_DeactivateEndpoint+0x1da>
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c4:	837b      	strh	r3, [r7, #26]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	8b7b      	ldrh	r3, [r7, #26]
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	833b      	strh	r3, [r7, #24]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	8b3b      	ldrh	r3, [r7, #24]
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	82fb      	strh	r3, [r7, #22]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	8afb      	ldrh	r3, [r7, #22]
 8004842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004852:	b29b      	uxth	r3, r3
 8004854:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486c:	82bb      	strh	r3, [r7, #20]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	8abb      	ldrh	r3, [r7, #20]
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]
 800488e:	e0a3      	b.n	80049d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800489e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01b      	beq.n	80048e0 <USB_DeactivateEndpoint+0x2d4>
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80048ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <USB_DeactivateEndpoint+0x324>
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800491c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	441a      	add	r2, r3
 8004952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800498c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3734      	adds	r7, #52	; 0x34
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b0cc      	sub	sp, #304	; 0x130
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049f2:	6018      	str	r0, [r3, #0]
 80049f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049fc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	f041 817d 	bne.w	8005d0a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d908      	bls.n	8004a3e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004a3c:	e007      	b.n	8004a4e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	7b1b      	ldrb	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d152      	bne.n	8004b04 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	88da      	ldrh	r2, [r3, #6]
 8004a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a84:	6800      	ldr	r0, [r0, #0]
 8004a86:	f001 ff0e 	bl	80068a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a96:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ab8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004abc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	011a      	lsls	r2, r3, #4
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	f001 b8b5 	b.w	8005c6e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	78db      	ldrb	r3, [r3, #3]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	f040 84c6 	bne.w	80054a2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	f240 8443 	bls.w	80053ba <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba0:	1ad2      	subs	r2, r2, r3
 8004ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 823e 	beq.w	8005052 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004be2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 809a 	bne.w	8004d30 <USB_EPStartXfer+0x34c>
 8004bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c08:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4619      	mov	r1, r3
 8004c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c2e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	440a      	add	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	011a      	lsls	r2, r3, #4
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d122      	bne.n	8004cae <USB_EPStartXfer+0x2ca>
 8004c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e079      	b.n	8004da2 <USB_EPStartXfer+0x3be>
 8004cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb4:	d81b      	bhi.n	8004cee <USB_EPStartXfer+0x30a>
 8004cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <USB_EPStartXfer+0x2f2>
 8004ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	029b      	lsls	r3, r3, #10
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e059      	b.n	8004da2 <USB_EPStartXfer+0x3be>
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <USB_EPStartXfer+0x32a>
 8004d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e038      	b.n	8004da2 <USB_EPStartXfer+0x3be>
 8004d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d130      	bne.n	8004da2 <USB_EPStartXfer+0x3be>
 8004d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	4619      	mov	r1, r3
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d5e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	440a      	add	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	011a      	lsls	r2, r3, #4
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4413      	add	r3, r2
 8004d82:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	895b      	ldrh	r3, [r3, #10]
 8004dae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6959      	ldr	r1, [r3, #20]
 8004dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004dcc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dd0:	6800      	ldr	r0, [r0, #0]
 8004dd2:	f001 fd68 	bl	80068a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de6:	441a      	add	r2, r3
 8004de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d90f      	bls.n	8004e30 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	621a      	str	r2, [r3, #32]
 8004e2e:	e00e      	b.n	8004e4e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 809a 	bne.w	8004f94 <USB_EPStartXfer+0x5b0>
 8004e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e6c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e92:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	440a      	add	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d122      	bne.n	8004f12 <USB_EPStartXfer+0x52e>
 8004ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e083      	b.n	800501a <USB_EPStartXfer+0x636>
 8004f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f16:	2b3e      	cmp	r3, #62	; 0x3e
 8004f18:	d81b      	bhi.n	8004f52 <USB_EPStartXfer+0x56e>
 8004f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <USB_EPStartXfer+0x556>
 8004f30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f34:	3301      	adds	r3, #1
 8004f36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	029b      	lsls	r3, r3, #10
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e063      	b.n	800501a <USB_EPStartXfer+0x636>
 8004f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <USB_EPStartXfer+0x58e>
 8004f68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e042      	b.n	800501a <USB_EPStartXfer+0x636>
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d13a      	bne.n	800501a <USB_EPStartXfer+0x636>
 8004fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fb0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fd6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	440a      	add	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	011a      	lsls	r2, r3, #4
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500c:	b29a      	uxth	r2, r3
 800500e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005012:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	891b      	ldrh	r3, [r3, #8]
 8005026:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6959      	ldr	r1, [r3, #20]
 8005036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800503a:	b29b      	uxth	r3, r3
 800503c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005040:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005044:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005048:	6800      	ldr	r0, [r0, #0]
 800504a:	f001 fc2c 	bl	80068a6 <USB_WritePMA>
 800504e:	f000 be0e 	b.w	8005c6e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d16d      	bne.n	800513e <USB_EPStartXfer+0x75a>
 8005062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	64bb      	str	r3, [r7, #72]	; 0x48
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507c:	b29b      	uxth	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005082:	4413      	add	r3, r2
 8005084:	64bb      	str	r3, [r7, #72]	; 0x48
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	011a      	lsls	r2, r3, #4
 8005094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005096:	4413      	add	r3, r2
 8005098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d112      	bne.n	80050cc <USB_EPStartXfer+0x6e8>
 80050a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	e063      	b.n	8005194 <USB_EPStartXfer+0x7b0>
 80050cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d0:	2b3e      	cmp	r3, #62	; 0x3e
 80050d2:	d817      	bhi.n	8005104 <USB_EPStartXfer+0x720>
 80050d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <USB_EPStartXfer+0x710>
 80050ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050ee:	3301      	adds	r3, #1
 80050f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	e047      	b.n	8005194 <USB_EPStartXfer+0x7b0>
 8005104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800510e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <USB_EPStartXfer+0x740>
 800511a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800511e:	3b01      	subs	r3, #1
 8005120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005128:	b29b      	uxth	r3, r3
 800512a:	029b      	lsls	r3, r3, #10
 800512c:	b29b      	uxth	r3, r3
 800512e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005136:	b29a      	uxth	r2, r3
 8005138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e02a      	b.n	8005194 <USB_EPStartXfer+0x7b0>
 800513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	785b      	ldrb	r3, [r3, #1]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d122      	bne.n	8005194 <USB_EPStartXfer+0x7b0>
 800514e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
 800515a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516e:	4413      	add	r3, r2
 8005170:	653b      	str	r3, [r7, #80]	; 0x50
 8005172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	011a      	lsls	r2, r3, #4
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	4413      	add	r3, r2
 8005184:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	b29a      	uxth	r2, r3
 8005190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	891b      	ldrh	r3, [r3, #8]
 80051a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6959      	ldr	r1, [r3, #20]
 80051b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051c2:	6800      	ldr	r0, [r0, #0]
 80051c4:	f001 fb6f 	bl	80068a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d8:	441a      	add	r2, r3
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d90f      	bls.n	8005222 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005212:	1ad2      	subs	r2, r2, r3
 8005214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	621a      	str	r2, [r3, #32]
 8005220:	e00e      	b.n	8005240 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2200      	movs	r2, #0
 800523e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
 800524c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d16d      	bne.n	8005338 <USB_EPStartXfer+0x954>
 800525c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
 8005268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005276:	b29b      	uxth	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	4413      	add	r3, r2
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	011a      	lsls	r2, r3, #4
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	4413      	add	r3, r2
 8005292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
 8005298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d112      	bne.n	80052c6 <USB_EPStartXfer+0x8e2>
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052be:	b29a      	uxth	r2, r3
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e05d      	b.n	8005382 <USB_EPStartXfer+0x99e>
 80052c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ca:	2b3e      	cmp	r3, #62	; 0x3e
 80052cc:	d817      	bhi.n	80052fe <USB_EPStartXfer+0x91a>
 80052ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <USB_EPStartXfer+0x90a>
 80052e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052e8:	3301      	adds	r3, #1
 80052ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	e041      	b.n	8005382 <USB_EPStartXfer+0x99e>
 80052fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <USB_EPStartXfer+0x93a>
 8005314:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005318:	3b01      	subs	r3, #1
 800531a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800531e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005322:	b29b      	uxth	r3, r3
 8005324:	029b      	lsls	r3, r3, #10
 8005326:	b29b      	uxth	r3, r3
 8005328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005330:	b29a      	uxth	r2, r3
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e024      	b.n	8005382 <USB_EPStartXfer+0x99e>
 8005338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d11c      	bne.n	8005382 <USB_EPStartXfer+0x99e>
 8005348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535c:	4413      	add	r3, r2
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
 8005360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	4413      	add	r3, r2
 8005372:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537c:	b29a      	uxth	r2, r3
 800537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005380:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	895b      	ldrh	r3, [r3, #10]
 800538e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6959      	ldr	r1, [r3, #20]
 800539e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053b0:	6800      	ldr	r0, [r0, #0]
 80053b2:	f001 fa78 	bl	80068a6 <USB_WritePMA>
 80053b6:	f000 bc5a 	b.w	8005c6e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80053ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005440:	b29b      	uxth	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005446:	4413      	add	r3, r2
 8005448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800544a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	011a      	lsls	r2, r3, #4
 8005458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545a:	4413      	add	r3, r2
 800545c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005460:	65bb      	str	r3, [r7, #88]	; 0x58
 8005462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005466:	b29a      	uxth	r2, r3
 8005468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800546a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	891b      	ldrh	r3, [r3, #8]
 8005478:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6959      	ldr	r1, [r3, #20]
 8005488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548c:	b29b      	uxth	r3, r3
 800548e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005492:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005496:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	f001 fa03 	bl	80068a6 <USB_WritePMA>
 80054a0:	e3e5      	b.n	8005c6e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	441a      	add	r2, r3
 80054e6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80054ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80054fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800551c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 81bc 	beq.w	80058bc <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d16d      	bne.n	800563e <USB_EPStartXfer+0xc5a>
 8005562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005566:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	67bb      	str	r3, [r7, #120]	; 0x78
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557c:	b29b      	uxth	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005582:	4413      	add	r3, r2
 8005584:	67bb      	str	r3, [r7, #120]	; 0x78
 8005586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	011a      	lsls	r2, r3, #4
 8005594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005596:	4413      	add	r3, r2
 8005598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800559c:	677b      	str	r3, [r7, #116]	; 0x74
 800559e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d112      	bne.n	80055cc <USB_EPStartXfer+0xbe8>
 80055a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	e060      	b.n	800568e <USB_EPStartXfer+0xcaa>
 80055cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d0:	2b3e      	cmp	r3, #62	; 0x3e
 80055d2:	d817      	bhi.n	8005604 <USB_EPStartXfer+0xc20>
 80055d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <USB_EPStartXfer+0xc10>
 80055ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055ee:	3301      	adds	r3, #1
 80055f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	029b      	lsls	r3, r3, #10
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	e044      	b.n	800568e <USB_EPStartXfer+0xcaa>
 8005604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800560e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <USB_EPStartXfer+0xc40>
 800561a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800561e:	3b01      	subs	r3, #1
 8005620:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005624:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005628:	b29b      	uxth	r3, r3
 800562a:	029b      	lsls	r3, r3, #10
 800562c:	b29b      	uxth	r3, r3
 800562e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005636:	b29a      	uxth	r2, r3
 8005638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e027      	b.n	800568e <USB_EPStartXfer+0xcaa>
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d11f      	bne.n	800568e <USB_EPStartXfer+0xcaa>
 800564e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565c:	b29b      	uxth	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005664:	4413      	add	r3, r2
 8005666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	011a      	lsls	r2, r3, #4
 8005678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800567c:	4413      	add	r3, r2
 800567e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005682:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005688:	b29a      	uxth	r2, r3
 800568a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800568c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	895b      	ldrh	r3, [r3, #10]
 800569a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6959      	ldr	r1, [r3, #20]
 80056aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f001 f8f2 	bl	80068a6 <USB_WritePMA>
          ep->xfer_buff += len;
 80056c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d2:	441a      	add	r2, r3
 80056d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d90f      	bls.n	800571c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80056fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570c:	1ad2      	subs	r2, r2, r3
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	621a      	str	r2, [r3, #32]
 800571a:	e00e      	b.n	800573a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800571c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800573a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8295 	beq.w	8005c6e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d16d      	bne.n	8005830 <USB_EPStartXfer+0xe4c>
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005774:	4413      	add	r3, r2
 8005776:	66bb      	str	r3, [r7, #104]	; 0x68
 8005778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	011a      	lsls	r2, r3, #4
 8005786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005788:	4413      	add	r3, r2
 800578a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800578e:	667b      	str	r3, [r7, #100]	; 0x64
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d112      	bne.n	80057be <USB_EPStartXfer+0xdda>
 8005798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	e063      	b.n	8005886 <USB_EPStartXfer+0xea2>
 80057be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c2:	2b3e      	cmp	r3, #62	; 0x3e
 80057c4:	d817      	bhi.n	80057f6 <USB_EPStartXfer+0xe12>
 80057c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <USB_EPStartXfer+0xe02>
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e0:	3301      	adds	r3, #1
 80057e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	e047      	b.n	8005886 <USB_EPStartXfer+0xea2>
 80057f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <USB_EPStartXfer+0xe32>
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005810:	3b01      	subs	r3, #1
 8005812:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581a:	b29b      	uxth	r3, r3
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	b29b      	uxth	r3, r3
 8005820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005828:	b29a      	uxth	r2, r3
 800582a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e02a      	b.n	8005886 <USB_EPStartXfer+0xea2>
 8005830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d122      	bne.n	8005886 <USB_EPStartXfer+0xea2>
 8005840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	673b      	str	r3, [r7, #112]	; 0x70
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005860:	4413      	add	r3, r2
 8005862:	673b      	str	r3, [r7, #112]	; 0x70
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	011a      	lsls	r2, r3, #4
 8005872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005874:	4413      	add	r3, r2
 8005876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800587a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800587c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005880:	b29a      	uxth	r2, r3
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	891b      	ldrh	r3, [r3, #8]
 8005892:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6959      	ldr	r1, [r3, #20]
 80058a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058b4:	6800      	ldr	r0, [r0, #0]
 80058b6:	f000 fff6 	bl	80068a6 <USB_WritePMA>
 80058ba:	e1d8      	b.n	8005c6e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d178      	bne.n	80059be <USB_EPStartXfer+0xfda>
 80058cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058f0:	4413      	add	r3, r2
 80058f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	011a      	lsls	r2, r3, #4
 8005904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005908:	4413      	add	r3, r2
 800590a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800590e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d116      	bne.n	8005948 <USB_EPStartXfer+0xf64>
 800591a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593e:	b29a      	uxth	r2, r3
 8005940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e06b      	b.n	8005a20 <USB_EPStartXfer+0x103c>
 8005948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594c:	2b3e      	cmp	r3, #62	; 0x3e
 800594e:	d818      	bhi.n	8005982 <USB_EPStartXfer+0xf9e>
 8005950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800595a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <USB_EPStartXfer+0xf8c>
 8005966:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800596a:	3301      	adds	r3, #1
 800596c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005970:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005974:	b29b      	uxth	r3, r3
 8005976:	029b      	lsls	r3, r3, #10
 8005978:	b29a      	uxth	r2, r3
 800597a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e04e      	b.n	8005a20 <USB_EPStartXfer+0x103c>
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800598c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <USB_EPStartXfer+0xfbe>
 8005998:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800599c:	3b01      	subs	r3, #1
 800599e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80059a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	029b      	lsls	r3, r3, #10
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e030      	b.n	8005a20 <USB_EPStartXfer+0x103c>
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d128      	bne.n	8005a20 <USB_EPStartXfer+0x103c>
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059f2:	4413      	add	r3, r2
 80059f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	011a      	lsls	r2, r3, #4
 8005a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	891b      	ldrh	r3, [r3, #8]
 8005a2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6959      	ldr	r1, [r3, #20]
 8005a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a46:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a4a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a4e:	6800      	ldr	r0, [r0, #0]
 8005a50:	f000 ff29 	bl	80068a6 <USB_WritePMA>
          ep->xfer_buff += len;
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a64:	441a      	add	r2, r3
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d90f      	bls.n	8005aae <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	621a      	str	r2, [r3, #32]
 8005aac:	e00e      	b.n	8005acc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80cc 	beq.w	8005c6e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d178      	bne.n	8005be6 <USB_EPStartXfer+0x1202>
 8005af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b18:	4413      	add	r3, r2
 8005b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	011a      	lsls	r2, r3, #4
 8005b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b30:	4413      	add	r3, r2
 8005b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d116      	bne.n	8005b70 <USB_EPStartXfer+0x118c>
 8005b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	e064      	b.n	8005c3a <USB_EPStartXfer+0x1256>
 8005b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b74:	2b3e      	cmp	r3, #62	; 0x3e
 8005b76:	d818      	bhi.n	8005baa <USB_EPStartXfer+0x11c6>
 8005b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <USB_EPStartXfer+0x11b4>
 8005b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b92:	3301      	adds	r3, #1
 8005b94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e047      	b.n	8005c3a <USB_EPStartXfer+0x1256>
 8005baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <USB_EPStartXfer+0x11e6>
 8005bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e029      	b.n	8005c3a <USB_EPStartXfer+0x1256>
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d121      	bne.n	8005c3a <USB_EPStartXfer+0x1256>
 8005bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	011a      	lsls	r2, r3, #4
 8005c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	895b      	ldrh	r3, [r3, #10]
 8005c46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6959      	ldr	r1, [r3, #20]
 8005c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c60:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c64:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c68:	6800      	ldr	r0, [r0, #0]
 8005c6a:	f000 fe1c 	bl	80068a6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c90:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9c:	8013      	strh	r3, [r2, #0]
 8005c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ca6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005caa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005cae:	8812      	ldrh	r2, [r2, #0]
 8005cb0:	f082 0210 	eor.w	r2, r2, #16
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005cbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cc2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005cc6:	8812      	ldrh	r2, [r2, #0]
 8005cc8:	f082 0220 	eor.w	r2, r2, #32
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	8013      	strh	r3, [r2, #0]
 8005d06:	f000 bc9f 	b.w	8006648 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	7b1b      	ldrb	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f040 80ae 	bne.w	8005e78 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d917      	bls.n	8005d68 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	619a      	str	r2, [r3, #24]
 8005d66:	e00e      	b.n	8005d86 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005daa:	4413      	add	r3, r2
 8005dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	011a      	lsls	r2, r3, #4
 8005dbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d116      	bne.n	8005e02 <USB_EPStartXfer+0x141e>
 8005dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	e3e8      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
 8005e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e06:	2b3e      	cmp	r3, #62	; 0x3e
 8005e08:	d818      	bhi.n	8005e3c <USB_EPStartXfer+0x1458>
 8005e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <USB_EPStartXfer+0x1446>
 8005e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e24:	3301      	adds	r3, #1
 8005e26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	e3cb      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d104      	bne.n	8005e5c <USB_EPStartXfer+0x1478>
 8005e52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e56:	3b01      	subs	r3, #1
 8005e58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	029b      	lsls	r3, r3, #10
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	e3ad      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	f040 8200 	bne.w	800628a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 8091 	bne.w	8005fbe <USB_EPStartXfer+0x15da>
 8005e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	011a      	lsls	r2, r3, #4
 8005ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ed8:	4413      	add	r3, r2
 8005eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d116      	bne.n	8005f20 <USB_EPStartXfer+0x153c>
 8005ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e083      	b.n	8006028 <USB_EPStartXfer+0x1644>
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f2e:	d820      	bhi.n	8005f72 <USB_EPStartXfer+0x158e>
 8005f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <USB_EPStartXfer+0x157c>
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e05a      	b.n	8006028 <USB_EPStartXfer+0x1644>
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <USB_EPStartXfer+0x15be>
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	029b      	lsls	r3, r3, #10
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e034      	b.n	8006028 <USB_EPStartXfer+0x1644>
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d12c      	bne.n	8006028 <USB_EPStartXfer+0x1644>
 8005fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	011a      	lsls	r2, r3, #4
 8006006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600a:	4413      	add	r3, r2
 800600c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 8091 	bne.w	800616a <USB_EPStartXfer+0x1786>
 8006048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800606c:	4413      	add	r3, r2
 800606e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	011a      	lsls	r2, r3, #4
 8006080:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006084:	4413      	add	r3, r2
 8006086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800608a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d116      	bne.n	80060cc <USB_EPStartXfer+0x16e8>
 800609e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e07c      	b.n	80061c6 <USB_EPStartXfer+0x17e2>
 80060cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b3e      	cmp	r3, #62	; 0x3e
 80060da:	d820      	bhi.n	800611e <USB_EPStartXfer+0x173a>
 80060dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <USB_EPStartXfer+0x1728>
 8006102:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006106:	3301      	adds	r3, #1
 8006108:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800610c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	e053      	b.n	80061c6 <USB_EPStartXfer+0x17e2>
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	2b00      	cmp	r3, #0
 8006142:	d104      	bne.n	800614e <USB_EPStartXfer+0x176a>
 8006144:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006148:	3b01      	subs	r3, #1
 800614a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800614e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006152:	b29b      	uxth	r3, r3
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	b29b      	uxth	r3, r3
 8006158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006160:	b29a      	uxth	r2, r3
 8006162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e02d      	b.n	80061c6 <USB_EPStartXfer+0x17e2>
 800616a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d125      	bne.n	80061c6 <USB_EPStartXfer+0x17e2>
 800617a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006188:	b29b      	uxth	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006190:	4413      	add	r3, r2
 8006192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	011a      	lsls	r2, r3, #4
 80061a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061a8:	4413      	add	r3, r2
 80061aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061c4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 81fe 	beq.w	80065d4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <USB_EPStartXfer+0x182c>
 8006204:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10d      	bne.n	800622c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006210:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 81db 	bne.w	80065d4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800621e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 81d4 	bne.w	80065d4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	441a      	add	r2, r3
 8006270:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006284:	b29b      	uxth	r3, r3
 8006286:	8013      	strh	r3, [r2, #0]
 8006288:	e1a4      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800628a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	2b01      	cmp	r3, #1
 8006298:	f040 819a 	bne.w	80065d0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800629c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d917      	bls.n	80062e8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80062b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80062c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d8:	1ad2      	subs	r2, r2, r3
 80062da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	619a      	str	r2, [r3, #24]
 80062e6:	e00e      	b.n	8006306 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80062e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80062f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2200      	movs	r2, #0
 8006304:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d178      	bne.n	8006408 <USB_EPStartXfer+0x1a24>
 8006316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006332:	b29b      	uxth	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800633a:	4413      	add	r3, r2
 800633c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	011a      	lsls	r2, r3, #4
 800634e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006352:	4413      	add	r3, r2
 8006354:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006358:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800635c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d116      	bne.n	8006392 <USB_EPStartXfer+0x19ae>
 8006364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006370:	b29a      	uxth	r2, r3
 8006372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006376:	801a      	strh	r2, [r3, #0]
 8006378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006388:	b29a      	uxth	r2, r3
 800638a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	e06b      	b.n	800646a <USB_EPStartXfer+0x1a86>
 8006392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006396:	2b3e      	cmp	r3, #62	; 0x3e
 8006398:	d818      	bhi.n	80063cc <USB_EPStartXfer+0x19e8>
 800639a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <USB_EPStartXfer+0x19d6>
 80063b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063be:	b29b      	uxth	r3, r3
 80063c0:	029b      	lsls	r3, r3, #10
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e04e      	b.n	800646a <USB_EPStartXfer+0x1a86>
 80063cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <USB_EPStartXfer+0x1a08>
 80063e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	029b      	lsls	r3, r3, #10
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e030      	b.n	800646a <USB_EPStartXfer+0x1a86>
 8006408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d128      	bne.n	800646a <USB_EPStartXfer+0x1a86>
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006434:	b29b      	uxth	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	4413      	add	r3, r2
 800643e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	011a      	lsls	r2, r3, #4
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006454:	4413      	add	r3, r2
 8006456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800645a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800645e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d178      	bne.n	800657a <USB_EPStartXfer+0x1b96>
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ac:	4413      	add	r3, r2
 80064ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	011a      	lsls	r2, r3, #4
 80064c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c4:	4413      	add	r3, r2
 80064c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d116      	bne.n	8006504 <USB_EPStartXfer+0x1b20>
 80064d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e067      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
 8006504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006508:	2b3e      	cmp	r3, #62	; 0x3e
 800650a:	d818      	bhi.n	800653e <USB_EPStartXfer+0x1b5a>
 800650c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <USB_EPStartXfer+0x1b48>
 8006522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006526:	3301      	adds	r3, #1
 8006528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800652c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29a      	uxth	r2, r3
 8006536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e04a      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
 800653e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <USB_EPStartXfer+0x1b7a>
 8006554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006558:	3b01      	subs	r3, #1
 800655a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800655e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29b      	uxth	r3, r3
 8006568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e02c      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d124      	bne.n	80065d4 <USB_EPStartXfer+0x1bf0>
 800658a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006598:	b29b      	uxth	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a0:	4413      	add	r3, r2
 80065a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	011a      	lsls	r2, r3, #4
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	4413      	add	r3, r2
 80065ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e001      	b.n	80065d4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e03a      	b.n	800664a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80065fe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006602:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006606:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800660a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800660e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006612:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	b29b      	uxth	r3, r3
 8006646:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d020      	beq.n	80066a8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667c:	81bb      	strh	r3, [r7, #12]
 800667e:	89bb      	ldrh	r3, [r7, #12]
 8006680:	f083 0310 	eor.w	r3, r3, #16
 8006684:	81bb      	strh	r3, [r7, #12]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	441a      	add	r2, r3
 8006690:	89bb      	ldrh	r3, [r7, #12]
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]
 80066a6:	e01f      	b.n	80066e8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	81fb      	strh	r3, [r7, #14]
 80066c0:	89fb      	ldrh	r3, [r7, #14]
 80066c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066c6:	81fb      	strh	r3, [r7, #14]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	89fb      	ldrh	r3, [r7, #14]
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	7b1b      	ldrb	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 809d 	bne.w	8006842 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d04c      	beq.n	80067aa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	823b      	strh	r3, [r7, #16]
 800671e:	8a3b      	ldrh	r3, [r7, #16]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01b      	beq.n	8006760 <USB_EPClearStall+0x6c>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	81fb      	strh	r3, [r7, #14]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	89fb      	ldrh	r3, [r7, #14]
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	78db      	ldrb	r3, [r3, #3]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d06c      	beq.n	8006842 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677e:	81bb      	strh	r3, [r7, #12]
 8006780:	89bb      	ldrh	r3, [r7, #12]
 8006782:	f083 0320 	eor.w	r3, r3, #32
 8006786:	81bb      	strh	r3, [r7, #12]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	89bb      	ldrh	r3, [r7, #12]
 8006794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	8013      	strh	r3, [r2, #0]
 80067a8:	e04b      	b.n	8006842 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	82fb      	strh	r3, [r7, #22]
 80067b8:	8afb      	ldrh	r3, [r7, #22]
 80067ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01b      	beq.n	80067fa <USB_EPClearStall+0x106>
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	82bb      	strh	r3, [r7, #20]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	441a      	add	r2, r3
 80067e4:	8abb      	ldrh	r3, [r7, #20]
 80067e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006810:	827b      	strh	r3, [r7, #18]
 8006812:	8a7b      	ldrh	r3, [r7, #18]
 8006814:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006818:	827b      	strh	r3, [r7, #18]
 800681a:	8a7b      	ldrh	r3, [r7, #18]
 800681c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006820:	827b      	strh	r3, [r7, #18]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	8a7b      	ldrh	r3, [r7, #18]
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2280      	movs	r2, #128	; 0x80
 8006864:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006896:	b29b      	uxth	r3, r3
 8006898:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800689a:	68fb      	ldr	r3, [r7, #12]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b08d      	sub	sp, #52	; 0x34
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	4611      	mov	r1, r2
 80068b2:	461a      	mov	r2, r3
 80068b4:	460b      	mov	r3, r1
 80068b6:	80fb      	strh	r3, [r7, #6]
 80068b8:	4613      	mov	r3, r2
 80068ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068bc:	88bb      	ldrh	r3, [r7, #4]
 80068be:	3301      	adds	r3, #1
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	005a      	lsls	r2, r3, #1
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068de:	e01e      	b.n	800691e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	3301      	adds	r3, #1
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	b29a      	uxth	r2, r3
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	3302      	adds	r3, #2
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	3302      	adds	r3, #2
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	3301      	adds	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	3b01      	subs	r3, #1
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1dd      	bne.n	80068e0 <USB_WritePMA+0x3a>
  }
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	3734      	adds	r7, #52	; 0x34
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006930:	b480      	push	{r7}
 8006932:	b08b      	sub	sp, #44	; 0x2c
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	460b      	mov	r3, r1
 8006940:	80fb      	strh	r3, [r7, #6]
 8006942:	4613      	mov	r3, r2
 8006944:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006946:	88bb      	ldrh	r3, [r7, #4]
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	b29b      	uxth	r3, r3
 800694c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	005a      	lsls	r2, r3, #1
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006962:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	e01b      	b.n	80069a2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	3302      	adds	r3, #2
 8006976:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	b2da      	uxtb	r2, r3
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	3302      	adds	r3, #2
 800699a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	3b01      	subs	r3, #1
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e0      	bne.n	800696a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069a8:	88bb      	ldrh	r3, [r7, #4]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	701a      	strb	r2, [r3, #0]
  }
}
 80069c4:	bf00      	nop
 80069c6:	372c      	adds	r7, #44	; 0x2c
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	460b      	mov	r3, r1
 80069d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7c1b      	ldrb	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d115      	bne.n	8006a12 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ea:	2202      	movs	r2, #2
 80069ec:	2181      	movs	r1, #129	; 0x81
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fe2f 	bl	8008652 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069fe:	2202      	movs	r2, #2
 8006a00:	2101      	movs	r1, #1
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fe25 	bl	8008652 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006a10:	e012      	b.n	8006a38 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	2202      	movs	r2, #2
 8006a16:	2181      	movs	r1, #129	; 0x81
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fe1a 	bl	8008652 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a24:	2340      	movs	r3, #64	; 0x40
 8006a26:	2202      	movs	r2, #2
 8006a28:	2101      	movs	r1, #1
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fe11 	bl	8008652 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a38:	2308      	movs	r3, #8
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	2182      	movs	r1, #130	; 0x82
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fe07 	bl	8008652 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006a4a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a4e:	f001 ff27 	bl	80088a0 <USBD_static_malloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
 8006a68:	e026      	b.n	8006ab8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a70:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7c1b      	ldrb	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 fec7 	bl	8008834 <USBD_LL_PrepareReceive>
 8006aa6:	e007      	b.n	8006ab8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aae:	2340      	movs	r3, #64	; 0x40
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 febe 	bl	8008834 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ad2:	2181      	movs	r1, #129	; 0x81
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fde2 	bl	800869e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fddb 	bl	800869e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006af0:	2182      	movs	r1, #130	; 0x82
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fdd3 	bl	800869e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00e      	beq.n	8006b26 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 fecd 	bl	80088b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d039      	beq.n	8006bce <USBD_CDC_Setup+0x9e>
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d17f      	bne.n	8006c5e <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	88db      	ldrh	r3, [r3, #6]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d029      	beq.n	8006bba <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da11      	bge.n	8006b94 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006b7c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	88d2      	ldrh	r2, [r2, #6]
 8006b82:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b84:	6939      	ldr	r1, [r7, #16]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	88db      	ldrh	r3, [r3, #6]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f994 	bl	8007eba <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006b92:	e06b      	b.n	8006c6c <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	785a      	ldrb	r2, [r3, #1]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	88db      	ldrh	r3, [r3, #6]
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006baa:	6939      	ldr	r1, [r7, #16]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	88db      	ldrh	r3, [r3, #6]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f9af 	bl	8007f16 <USBD_CtlPrepareRx>
    break;
 8006bb8:	e058      	b.n	8006c6c <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	7850      	ldrb	r0, [r2, #1]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	4798      	blx	r3
    break;
 8006bcc:	e04e      	b.n	8006c6c <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	2b0b      	cmp	r3, #11
 8006bd4:	d02e      	beq.n	8006c34 <USBD_CDC_Setup+0x104>
 8006bd6:	2b0b      	cmp	r3, #11
 8006bd8:	dc38      	bgt.n	8006c4c <USBD_CDC_Setup+0x11c>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <USBD_CDC_Setup+0xb4>
 8006bde:	2b0a      	cmp	r3, #10
 8006be0:	d014      	beq.n	8006c0c <USBD_CDC_Setup+0xdc>
 8006be2:	e033      	b.n	8006c4c <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d107      	bne.n	8006bfe <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bee:	f107 030c 	add.w	r3, r7, #12
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 f95f 	bl	8007eba <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006bfc:	e02e      	b.n	8006c5c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 f8f0 	bl	8007de6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c06:	2302      	movs	r3, #2
 8006c08:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0a:	e027      	b.n	8006c5c <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d107      	bne.n	8006c26 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006c16:	f107 030f 	add.w	r3, r7, #15
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 f94b 	bl	8007eba <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c24:	e01a      	b.n	8006c5c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 f8dc 	bl	8007de6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c2e:	2302      	movs	r3, #2
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e013      	b.n	8006c5c <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d00d      	beq.n	8006c5a <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 f8d0 	bl	8007de6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c4a:	e006      	b.n	8006c5a <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f8c9 	bl	8007de6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	e000      	b.n	8006c5c <USBD_CDC_Setup+0x12c>
      break;
 8006c5a:	bf00      	nop
    }
    break;
 8006c5c:	e006      	b.n	8006c6c <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 f8c0 	bl	8007de6 <USBD_CtlError>
    ret = USBD_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	75fb      	strb	r3, [r7, #23]
    break;
 8006c6a:	bf00      	nop
  }

  return ret;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c88:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006c90:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d03a      	beq.n	8006d12 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	331c      	adds	r3, #28
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d029      	beq.n	8006d06 <USBD_CDC_DataIn+0x90>
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	331c      	adds	r3, #28
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	78f9      	ldrb	r1, [r7, #3]
 8006cc6:	68b8      	ldr	r0, [r7, #8]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4403      	add	r3, r0
 8006cd2:	3338      	adds	r3, #56	; 0x38
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cda:	fb01 f303 	mul.w	r3, r1, r3
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d110      	bne.n	8006d06 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	331c      	adds	r3, #28
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006cf8:	78f9      	ldrb	r1, [r7, #3]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fd75 	bl	80087ee <USBD_LL_Transmit>
 8006d04:	e003      	b.n	8006d0e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e000      	b.n	8006d14 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d12:	2302      	movs	r3, #2
  }
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fda0 	bl	800887a <USBD_LL_GetRxDataSize>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00d      	beq.n	8006d68 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d60:	4611      	mov	r1, r2
 8006d62:	4798      	blx	r3

    return USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d80:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <USBD_CDC_EP0_RxReady+0x46>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d92:	2bff      	cmp	r3, #255	; 0xff
 8006d94:	d010      	beq.n	8006db8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006da4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dac:	b292      	uxth	r2, r2
 8006dae:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	22ff      	movs	r2, #255	; 0xff
 8006db4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2243      	movs	r2, #67	; 0x43
 8006dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dd2:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000094 	.word	0x20000094

08006de4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2243      	movs	r2, #67	; 0x43
 8006df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006df2:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000050 	.word	0x20000050

08006e04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2243      	movs	r2, #67	; 0x43
 8006e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	200000d8 	.word	0x200000d8

08006e24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	220a      	movs	r2, #10
 8006e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e32:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	2000000c 	.word	0x2000000c

08006e44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr

08006e70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eb2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ed6:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01c      	beq.n	8006f1c <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d115      	bne.n	8006f18 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2181      	movs	r1, #129	; 0x81
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fc6d 	bl	80087ee <USBD_LL_Transmit>

      return USBD_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e002      	b.n	8006f1e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f1c:	2302      	movs	r3, #2
  }
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d017      	beq.n	8006f70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7c1b      	ldrb	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f52:	2101      	movs	r1, #1
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fc6d 	bl	8008834 <USBD_LL_PrepareReceive>
 8006f5a:	e007      	b.n	8006f6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	2101      	movs	r1, #1
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fc64 	bl	8008834 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e01a      	b.n	8006fc8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	79fa      	ldrb	r2, [r7, #7]
 8006fbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fad1 	bl	8008568 <USBD_LL_Init>

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e001      	b.n	8006ff6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fb06 	bl	800861c <USBD_LL_Start>

  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800703a:	2302      	movs	r3, #2
 800703c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	4611      	mov	r1, r2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4798      	blx	r3
  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fe62 	bl	8007d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d016      	beq.n	80070fc <USBD_LL_SetupStage+0x6a>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d81c      	bhi.n	800710c <USBD_LL_SetupStage+0x7a>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <USBD_LL_SetupStage+0x4a>
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d008      	beq.n	80070ec <USBD_LL_SetupStage+0x5a>
 80070da:	e017      	b.n	800710c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f9c5 	bl	8007474 <USBD_StdDevReq>
    break;
 80070ea:	e01a      	b.n	8007122 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa27 	bl	8007548 <USBD_StdItfReq>
    break;
 80070fa:	e012      	b.n	8007122 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa67 	bl	80075d8 <USBD_StdEPReq>
    break;
 800710a:	e00a      	b.n	8007122 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007116:	b2db      	uxtb	r3, r3
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fade 	bl	80086dc <USBD_LL_StallEP>
    break;
 8007120:	bf00      	nop
  }

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d14b      	bne.n	80071d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007146:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800714e:	2b03      	cmp	r3, #3
 8007150:	d134      	bne.n	80071bc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d919      	bls.n	8007192 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007174:	429a      	cmp	r2, r3
 8007176:	d203      	bcs.n	8007180 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800717c:	b29b      	uxth	r3, r3
 800717e:	e002      	b.n	8007186 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fee1 	bl	8007f52 <USBD_CtlContinueRx>
 8007190:	e038      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d105      	bne.n	80071b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 fede 	bl	8007f76 <USBD_CtlSendStatus>
 80071ba:	e023      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	d11e      	bne.n	8007204 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f001 fa83 	bl	80086dc <USBD_LL_StallEP>
 80071d6:	e015      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d108      	bne.n	8007200 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	7afa      	ldrb	r2, [r7, #11]
 80071f8:	4611      	mov	r1, r2
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	4798      	blx	r3
 80071fe:	e001      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007200:	2302      	movs	r3, #2
 8007202:	e000      	b.n	8007206 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	460b      	mov	r3, r1
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d17f      	bne.n	8007322 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3314      	adds	r3, #20
 8007226:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800722e:	2b02      	cmp	r3, #2
 8007230:	d15c      	bne.n	80072ec <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	d915      	bls.n	800726a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	b29b      	uxth	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fe4b 	bl	8007ef2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800725c:	2300      	movs	r3, #0
 800725e:	2200      	movs	r2, #0
 8007260:	2100      	movs	r1, #0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f001 fae6 	bl	8008834 <USBD_LL_PrepareReceive>
 8007268:	e04e      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	6912      	ldr	r2, [r2, #16]
 8007272:	fbb3 f1f2 	udiv	r1, r3, r2
 8007276:	fb01 f202 	mul.w	r2, r1, r2
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11c      	bne.n	80072ba <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007288:	429a      	cmp	r2, r3
 800728a:	d316      	bcc.n	80072ba <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007296:	429a      	cmp	r2, r3
 8007298:	d20f      	bcs.n	80072ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fe27 	bl	8007ef2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80072ac:	2300      	movs	r3, #0
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f001 fabe 	bl	8008834 <USBD_LL_PrepareReceive>
 80072b8:	e026      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d105      	bne.n	80072dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f001 f9fc 	bl	80086dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fe59 	bl	8007f9c <USBD_CtlReceiveStatus>
 80072ea:	e00d      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d004      	beq.n	8007300 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f9ea 	bl	80086dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800730e:	2b01      	cmp	r3, #1
 8007310:	d11d      	bne.n	800734e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fe81 	bl	800701a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007320:	e015      	b.n	800734e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007334:	2b03      	cmp	r3, #3
 8007336:	d108      	bne.n	800734a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	7afa      	ldrb	r2, [r7, #11]
 8007342:	4611      	mov	r1, r2
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	4798      	blx	r3
 8007348:	e001      	b.n	800734e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800734a:	2302      	movs	r3, #2
 800734c:	e000      	b.n	8007350 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f973 	bl	8008652 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2240      	movs	r2, #64	; 0x40
 8007378:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	2200      	movs	r2, #0
 8007380:	2180      	movs	r1, #128	; 0x80
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f965 	bl	8008652 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2240      	movs	r2, #64	; 0x40
 8007392:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d009      	beq.n	80073d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6852      	ldr	r2, [r2, #4]
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	4611      	mov	r1, r2
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
  }

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2204      	movs	r2, #4
 8007410:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	bc80      	pop	{r7}
 800743e:	4770      	bx	lr

08007440 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800744e:	2b03      	cmp	r3, #3
 8007450:	d10b      	bne.n	800746a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d005      	beq.n	800749a <USBD_StdDevReq+0x26>
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d84f      	bhi.n	8007532 <USBD_StdDevReq+0xbe>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <USBD_StdDevReq+0x36>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d14b      	bne.n	8007532 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
    break;
 80074a8:	e048      	b.n	800753c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d839      	bhi.n	8007526 <USBD_StdDevReq+0xb2>
 80074b2:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <USBD_StdDevReq+0x44>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	08007509 	.word	0x08007509
 80074bc:	0800751d 	.word	0x0800751d
 80074c0:	08007527 	.word	0x08007527
 80074c4:	08007513 	.word	0x08007513
 80074c8:	08007527 	.word	0x08007527
 80074cc:	080074eb 	.word	0x080074eb
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	08007527 	.word	0x08007527
 80074d8:	080074ff 	.word	0x080074ff
 80074dc:	080074f5 	.word	0x080074f5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9da 	bl	800789c <USBD_GetDescriptor>
      break;
 80074e8:	e022      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 facf 	bl	8007a90 <USBD_SetAddress>
      break;
 80074f2:	e01d      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fb0e 	bl	8007b18 <USBD_SetConfig>
      break;
 80074fc:	e018      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb97 	bl	8007c34 <USBD_GetConfig>
      break;
 8007506:	e013      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fbc7 	bl	8007c9e <USBD_GetStatus>
      break;
 8007510:	e00e      	b.n	8007530 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fbf5 	bl	8007d04 <USBD_SetFeature>
      break;
 800751a:	e009      	b.n	8007530 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fc04 	bl	8007d2c <USBD_ClrFeature>
      break;
 8007524:	e004      	b.n	8007530 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fc5c 	bl	8007de6 <USBD_CtlError>
      break;
 800752e:	bf00      	nop
    }
    break;
 8007530:	e004      	b.n	800753c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc56 	bl	8007de6 <USBD_CtlError>
    break;
 800753a:	bf00      	nop
  }

  return ret;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop

08007548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d005      	beq.n	800756e <USBD_StdItfReq+0x26>
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d82e      	bhi.n	80075c4 <USBD_StdItfReq+0x7c>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <USBD_StdItfReq+0x26>
 800756a:	2b20      	cmp	r3, #32
 800756c:	d12a      	bne.n	80075c4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007574:	3b01      	subs	r3, #1
 8007576:	2b02      	cmp	r3, #2
 8007578:	d81d      	bhi.n	80075b6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	889b      	ldrh	r3, [r3, #4]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	d813      	bhi.n	80075ac <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
 8007592:	4603      	mov	r3, r0
 8007594:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d110      	bne.n	80075c0 <USBD_StdItfReq+0x78>
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10d      	bne.n	80075c0 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fce6 	bl	8007f76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80075aa:	e009      	b.n	80075c0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fc19 	bl	8007de6 <USBD_CtlError>
      break;
 80075b4:	e004      	b.n	80075c0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc14 	bl	8007de6 <USBD_CtlError>
      break;
 80075be:	e000      	b.n	80075c2 <USBD_StdItfReq+0x7a>
      break;
 80075c0:	bf00      	nop
    }
    break;
 80075c2:	e004      	b.n	80075ce <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fc0d 	bl	8007de6 <USBD_CtlError>
    break;
 80075cc:	bf00      	nop
  }

  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	889b      	ldrh	r3, [r3, #4]
 80075ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d007      	beq.n	8007608 <USBD_StdEPReq+0x30>
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	f200 8144 	bhi.w	8007886 <USBD_StdEPReq+0x2ae>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <USBD_StdEPReq+0x40>
 8007602:	2b20      	cmp	r3, #32
 8007604:	f040 813f 	bne.w	8007886 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
    break;
 8007616:	e13b      	b.n	8007890 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007620:	2b20      	cmp	r3, #32
 8007622:	d10a      	bne.n	800763a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
 8007632:	4603      	mov	r3, r0
 8007634:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	e12b      	b.n	8007892 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d007      	beq.n	8007652 <USBD_StdEPReq+0x7a>
 8007642:	2b03      	cmp	r3, #3
 8007644:	f300 8119 	bgt.w	800787a <USBD_StdEPReq+0x2a2>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d072      	beq.n	8007732 <USBD_StdEPReq+0x15a>
 800764c:	2b01      	cmp	r3, #1
 800764e:	d03a      	beq.n	80076c6 <USBD_StdEPReq+0xee>
 8007650:	e113      	b.n	800787a <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007658:	2b02      	cmp	r3, #2
 800765a:	d002      	beq.n	8007662 <USBD_StdEPReq+0x8a>
 800765c:	2b03      	cmp	r3, #3
 800765e:	d015      	beq.n	800768c <USBD_StdEPReq+0xb4>
 8007660:	e02b      	b.n	80076ba <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00c      	beq.n	8007682 <USBD_StdEPReq+0xaa>
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	2b80      	cmp	r3, #128	; 0x80
 800766c:	d009      	beq.n	8007682 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 f832 	bl	80086dc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f82e 	bl	80086dc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007680:	e020      	b.n	80076c4 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fbae 	bl	8007de6 <USBD_CtlError>
        break;
 800768a:	e01b      	b.n	80076c4 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	885b      	ldrh	r3, [r3, #2]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10e      	bne.n	80076b2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <USBD_StdEPReq+0xda>
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b80      	cmp	r3, #128	; 0x80
 800769e:	d008      	beq.n	80076b2 <USBD_StdEPReq+0xda>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f815 	bl	80086dc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fc5f 	bl	8007f76 <USBD_CtlSendStatus>

        break;
 80076b8:	e004      	b.n	80076c4 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb92 	bl	8007de6 <USBD_CtlError>
        break;
 80076c2:	bf00      	nop
      }
      break;
 80076c4:	e0de      	b.n	8007884 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d002      	beq.n	80076d6 <USBD_StdEPReq+0xfe>
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d015      	beq.n	8007700 <USBD_StdEPReq+0x128>
 80076d4:	e026      	b.n	8007724 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00c      	beq.n	80076f6 <USBD_StdEPReq+0x11e>
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d009      	beq.n	80076f6 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fff8 	bl	80086dc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80076ec:	2180      	movs	r1, #128	; 0x80
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fff4 	bl	80086dc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80076f4:	e01c      	b.n	8007730 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fb74 	bl	8007de6 <USBD_CtlError>
        break;
 80076fe:	e017      	b.n	8007730 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	885b      	ldrh	r3, [r3, #2]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d112      	bne.n	800772e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 ffff 	bl	800871a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fc2a 	bl	8007f76 <USBD_CtlSendStatus>
        }
        break;
 8007722:	e004      	b.n	800772e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fb5d 	bl	8007de6 <USBD_CtlError>
        break;
 800772c:	e000      	b.n	8007730 <USBD_StdEPReq+0x158>
        break;
 800772e:	bf00      	nop
      }
      break;
 8007730:	e0a8      	b.n	8007884 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007738:	2b02      	cmp	r3, #2
 800773a:	d002      	beq.n	8007742 <USBD_StdEPReq+0x16a>
 800773c:	2b03      	cmp	r3, #3
 800773e:	d031      	beq.n	80077a4 <USBD_StdEPReq+0x1cc>
 8007740:	e095      	b.n	800786e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <USBD_StdEPReq+0x180>
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	2b80      	cmp	r3, #128	; 0x80
 800774c:	d004      	beq.n	8007758 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb48 	bl	8007de6 <USBD_CtlError>
          break;
 8007756:	e08f      	b.n	8007878 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0b      	bge.n	8007778 <USBD_StdEPReq+0x1a0>
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	3310      	adds	r3, #16
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	3304      	adds	r3, #4
 8007776:	e00a      	b.n	800778e <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2202      	movs	r2, #2
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fb8c 	bl	8007eba <USBD_CtlSendData>
          break;
 80077a2:	e069      	b.n	8007878 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80077a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	da11      	bge.n	80077d0 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	f003 020f 	and.w	r2, r3, #15
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	3318      	adds	r3, #24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d117      	bne.n	80077f6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fb0c 	bl	8007de6 <USBD_CtlError>
            break;
 80077ce:	e053      	b.n	8007878 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	f003 020f 	and.w	r2, r3, #15
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 faf9 	bl	8007de6 <USBD_CtlError>
            break;
 80077f4:	e040      	b.n	8007878 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da0b      	bge.n	8007816 <USBD_StdEPReq+0x23e>
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	3310      	adds	r3, #16
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	3304      	adds	r3, #4
 8007814:	e00a      	b.n	800782c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <USBD_StdEPReq+0x262>
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b80      	cmp	r3, #128	; 0x80
 8007838:	d103      	bne.n	8007842 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e00e      	b.n	8007860 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 ff86 	bl	8008758 <USBD_LL_IsStallEP>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e002      	b.n	8007860 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2202      	movs	r2, #2
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fb27 	bl	8007eba <USBD_CtlSendData>
          break;
 800786c:	e004      	b.n	8007878 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fab8 	bl	8007de6 <USBD_CtlError>
        break;
 8007876:	bf00      	nop
      }
      break;
 8007878:	e004      	b.n	8007884 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fab2 	bl	8007de6 <USBD_CtlError>
      break;
 8007882:	bf00      	nop
    }
    break;
 8007884:	e004      	b.n	8007890 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 faac 	bl	8007de6 <USBD_CtlError>
    break;
 800788e:	bf00      	nop
  }

  return ret;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	f200 80c9 	bhi.w	8007a48 <USBD_GetDescriptor+0x1ac>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_GetDescriptor+0x20>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	080078f1 	.word	0x080078f1
 80078c4:	08007931 	.word	0x08007931
 80078c8:	08007a49 	.word	0x08007a49
 80078cc:	08007a49 	.word	0x08007a49
 80078d0:	080079f5 	.word	0x080079f5
 80078d4:	08007a1b 	.word	0x08007a1b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	7c12      	ldrb	r2, [r2, #16]
 80078e4:	f107 010a 	add.w	r1, r7, #10
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
    break;
 80078ee:	e0b0      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7c1b      	ldrb	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10d      	bne.n	8007914 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f107 020a 	add.w	r2, r7, #10
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	2202      	movs	r2, #2
 8007910:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007912:	e09e      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	f107 020a 	add.w	r2, r7, #10
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	2202      	movs	r2, #2
 800792c:	701a      	strb	r2, [r3, #0]
    break;
 800792e:	e090      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	885b      	ldrh	r3, [r3, #2]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b05      	cmp	r3, #5
 8007938:	d856      	bhi.n	80079e8 <USBD_GetDescriptor+0x14c>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <USBD_GetDescriptor+0xa4>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007959 	.word	0x08007959
 8007944:	08007971 	.word	0x08007971
 8007948:	08007989 	.word	0x08007989
 800794c:	080079a1 	.word	0x080079a1
 8007950:	080079b9 	.word	0x080079b9
 8007954:	080079d1 	.word	0x080079d1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	7c12      	ldrb	r2, [r2, #16]
 8007964:	f107 010a 	add.w	r1, r7, #10
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
 800796c:	60f8      	str	r0, [r7, #12]
      break;
 800796e:	e040      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7c12      	ldrb	r2, [r2, #16]
 800797c:	f107 010a 	add.w	r1, r7, #10
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
      break;
 8007986:	e034      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 010a 	add.w	r1, r7, #10
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
      break;
 800799e:	e028      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	7c12      	ldrb	r2, [r2, #16]
 80079ac:	f107 010a 	add.w	r1, r7, #10
 80079b0:	4610      	mov	r0, r2
 80079b2:	4798      	blx	r3
 80079b4:	60f8      	str	r0, [r7, #12]
      break;
 80079b6:	e01c      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7c12      	ldrb	r2, [r2, #16]
 80079c4:	f107 010a 	add.w	r1, r7, #10
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
      break;
 80079ce:	e010      	b.n	80079f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	7c12      	ldrb	r2, [r2, #16]
 80079dc:	f107 010a 	add.w	r1, r7, #10
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
 80079e4:	60f8      	str	r0, [r7, #12]
      break;
 80079e6:	e004      	b.n	80079f2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9fb 	bl	8007de6 <USBD_CtlError>
      return;
 80079f0:	e04b      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80079f2:	e02e      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7c1b      	ldrb	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	f107 020a 	add.w	r2, r7, #10
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
      break;
 8007a0e:	e020      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9e7 	bl	8007de6 <USBD_CtlError>
      return;
 8007a18:	e037      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10d      	bne.n	8007a3e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	f107 020a 	add.w	r2, r7, #10
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4798      	blx	r3
 8007a32:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	2207      	movs	r2, #7
 8007a3a:	701a      	strb	r2, [r3, #0]
      break;
 8007a3c:	e009      	b.n	8007a52 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f9d0 	bl	8007de6 <USBD_CtlError>
      return;
 8007a46:	e020      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9cb 	bl	8007de6 <USBD_CtlError>
    return;
 8007a50:	e01b      	b.n	8007a8a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007a52:	897b      	ldrh	r3, [r7, #10]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d011      	beq.n	8007a7c <USBD_GetDescriptor+0x1e0>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00d      	beq.n	8007a7c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88da      	ldrh	r2, [r3, #6]
 8007a64:	897b      	ldrh	r3, [r7, #10]
 8007a66:	4293      	cmp	r3, r2
 8007a68:	bf28      	it	cs
 8007a6a:	4613      	movcs	r3, r2
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007a70:	897b      	ldrh	r3, [r7, #10]
 8007a72:	461a      	mov	r2, r3
 8007a74:	68f9      	ldr	r1, [r7, #12]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa1f 	bl	8007eba <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	88db      	ldrh	r3, [r3, #6]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fa76 	bl	8007f76 <USBD_CtlSendStatus>
  }
}
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	889b      	ldrh	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d130      	bne.n	8007b04 <USBD_SetAddress+0x74>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88db      	ldrh	r3, [r3, #6]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d12c      	bne.n	8007b04 <USBD_SetAddress+0x74>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	2b7f      	cmp	r3, #127	; 0x7f
 8007ab0:	d828      	bhi.n	8007b04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	885b      	ldrh	r3, [r3, #2]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d104      	bne.n	8007ad2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f98b 	bl	8007de6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad0:	e01d      	b.n	8007b0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7bfa      	ldrb	r2, [r7, #15]
 8007ad6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fe66 	bl	80087b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fa46 	bl	8007f76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	e009      	b.n	8007b0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	e004      	b.n	8007b0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f96d 	bl	8007de6 <USBD_CtlError>
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d904      	bls.n	8007b3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f955 	bl	8007de6 <USBD_CtlError>
 8007b3c:	e075      	b.n	8007c2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d002      	beq.n	8007b4e <USBD_SetConfig+0x36>
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d023      	beq.n	8007b94 <USBD_SetConfig+0x7c>
 8007b4c:	e062      	b.n	8007c14 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007b4e:	4b38      	ldr	r3, [pc, #224]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d01a      	beq.n	8007b8c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007b56:	4b36      	ldr	r3, [pc, #216]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2203      	movs	r2, #3
 8007b64:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b68:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff fa5d 	bl	800702e <USBD_SetClassConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d104      	bne.n	8007b84 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f932 	bl	8007de6 <USBD_CtlError>
          return;
 8007b82:	e052      	b.n	8007c2a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f9f6 	bl	8007f76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007b8a:	e04e      	b.n	8007c2a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f9f2 	bl	8007f76 <USBD_CtlSendStatus>
      break;
 8007b92:	e04a      	b.n	8007c2a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b94:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <USBD_SetConfig+0x118>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d112      	bne.n	8007bc2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <USBD_SetConfig+0x118>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007bae:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <USBD_SetConfig+0x118>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fa59 	bl	800706c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9db 	bl	8007f76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007bc0:	e033      	b.n	8007c2a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <USBD_SetConfig+0x118>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d01d      	beq.n	8007c0c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fa47 	bl	800706c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bde:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <USBD_SetConfig+0x118>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <USBD_SetConfig+0x118>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fa1d 	bl	800702e <USBD_SetClassConfig>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d104      	bne.n	8007c04 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f8f2 	bl	8007de6 <USBD_CtlError>
          return;
 8007c02:	e012      	b.n	8007c2a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f9b6 	bl	8007f76 <USBD_CtlSendStatus>
      break;
 8007c0a:	e00e      	b.n	8007c2a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f9b2 	bl	8007f76 <USBD_CtlSendStatus>
      break;
 8007c12:	e00a      	b.n	8007c2a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8e5 	bl	8007de6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <USBD_SetConfig+0x118>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fa22 	bl	800706c <USBD_ClrClassConfig>
      break;
 8007c28:	bf00      	nop
    }
  }
}
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	200002a0 	.word	0x200002a0

08007c34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	88db      	ldrh	r3, [r3, #6]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d004      	beq.n	8007c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f8cc 	bl	8007de6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007c4e:	e022      	b.n	8007c96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	dc02      	bgt.n	8007c60 <USBD_GetConfig+0x2c>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	dc03      	bgt.n	8007c66 <USBD_GetConfig+0x32>
 8007c5e:	e015      	b.n	8007c8c <USBD_GetConfig+0x58>
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetConfig+0x48>
 8007c64:	e012      	b.n	8007c8c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3308      	adds	r3, #8
 8007c70:	2201      	movs	r2, #1
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f920 	bl	8007eba <USBD_CtlSendData>
      break;
 8007c7a:	e00c      	b.n	8007c96 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	2201      	movs	r2, #1
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f918 	bl	8007eba <USBD_CtlSendData>
      break;
 8007c8a:	e004      	b.n	8007c96 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f8a9 	bl	8007de6 <USBD_CtlError>
      break;
 8007c94:	bf00      	nop
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d81e      	bhi.n	8007cf2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	88db      	ldrh	r3, [r3, #6]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d004      	beq.n	8007cc6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f891 	bl	8007de6 <USBD_CtlError>
      break;
 8007cc4:	e01a      	b.n	8007cfc <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f043 0202 	orr.w	r2, r3, #2
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8e5 	bl	8007eba <USBD_CtlSendData>
    break;
 8007cf0:	e004      	b.n	8007cfc <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f876 	bl	8007de6 <USBD_CtlError>
    break;
 8007cfa:	bf00      	nop
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	885b      	ldrh	r3, [r3, #2]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d106      	bne.n	8007d24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f929 	bl	8007f76 <USBD_CtlSendStatus>
  }

}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d80b      	bhi.n	8007d5a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	885b      	ldrh	r3, [r3, #2]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d10c      	bne.n	8007d64 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f90f 	bl	8007f76 <USBD_CtlSendStatus>
    }
    break;
 8007d58:	e004      	b.n	8007d64 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f842 	bl	8007de6 <USBD_CtlError>
    break;
 8007d62:	e000      	b.n	8007d66 <USBD_ClrFeature+0x3a>
    break;
 8007d64:	bf00      	nop
  }
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785a      	ldrb	r2, [r3, #1]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	3303      	adds	r3, #3
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	3304      	adds	r3, #4
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	3305      	adds	r3, #5
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4413      	add	r3, r2
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	3306      	adds	r3, #6
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	3307      	adds	r3, #7
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	80da      	strh	r2, [r3, #6]

}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fc72 	bl	80086dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fc6e 	bl	80086dc <USBD_LL_StallEP>
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d032      	beq.n	8007e84 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f834 	bl	8007e8c <USBD_GetLen>
 8007e24:	4603      	mov	r3, r0
 8007e26:	3301      	adds	r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	75fa      	strb	r2, [r7, #23]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	75fa      	strb	r2, [r7, #23]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4413      	add	r3, r2
 8007e50:	2203      	movs	r2, #3
 8007e52:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e54:	e012      	b.n	8007e7c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	60fa      	str	r2, [r7, #12]
 8007e5c:	7dfa      	ldrb	r2, [r7, #23]
 8007e5e:	1c51      	adds	r1, r2, #1
 8007e60:	75f9      	strb	r1, [r7, #23]
 8007e62:	4611      	mov	r1, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	440a      	add	r2, r1
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	75fa      	strb	r2, [r7, #23]
 8007e72:	461a      	mov	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4413      	add	r3, r2
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e8      	bne.n	8007e56 <USBD_GetString+0x4e>
    }
  }
}
 8007e84:	bf00      	nop
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007e98:	e005      	b.n	8007ea6 <USBD_GetLen+0x1a>
    {
        len++;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f5      	bne.n	8007e9a <USBD_GetLen+0xe>
    }

    return len;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr

08007eba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fc83 	bl	80087ee <USBD_LL_Transmit>

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	4613      	mov	r3, r2
 8007efe:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	2100      	movs	r1, #0
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fc71 	bl	80087ee <USBD_LL_Transmit>

  return USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	4613      	mov	r3, r2
 8007f22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2203      	movs	r2, #3
 8007f28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	2100      	movs	r1, #0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fc76 	bl	8008834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	2100      	movs	r1, #0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fc64 	bl	8008834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2204      	movs	r2, #4
 8007f82:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f86:	2300      	movs	r3, #0
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc2e 	bl	80087ee <USBD_LL_Transmit>

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2205      	movs	r2, #5
 8007fa8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007fac:	2300      	movs	r3, #0
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fc3e 	bl	8008834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4912      	ldr	r1, [pc, #72]	; (8008014 <MX_USB_DEVICE_Init+0x50>)
 8007fcc:	4812      	ldr	r0, [pc, #72]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007fce:	f7fe ffd4 	bl	8006f7a <USBD_Init>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fd8:	f7f8 fc58 	bl	800088c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fdc:	490f      	ldr	r1, [pc, #60]	; (800801c <MX_USB_DEVICE_Init+0x58>)
 8007fde:	480e      	ldr	r0, [pc, #56]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007fe0:	f7fe fff6 	bl	8006fd0 <USBD_RegisterClass>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fea:	f7f8 fc4f 	bl	800088c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fee:	490c      	ldr	r1, [pc, #48]	; (8008020 <MX_USB_DEVICE_Init+0x5c>)
 8007ff0:	4809      	ldr	r0, [pc, #36]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8007ff2:	f7fe ff27 	bl	8006e44 <USBD_CDC_RegisterInterface>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ffc:	f7f8 fc46 	bl	800088c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008000:	4805      	ldr	r0, [pc, #20]	; (8008018 <MX_USB_DEVICE_Init+0x54>)
 8008002:	f7fe fffe 	bl	8007002 <USBD_Start>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800800c:	f7f8 fc3e 	bl	800088c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008010:	bf00      	nop
 8008012:	bd80      	pop	{r7, pc}
 8008014:	2000012c 	.word	0x2000012c
 8008018:	200002a4 	.word	0x200002a4
 800801c:	20000018 	.word	0x20000018
 8008020:	2000011c 	.word	0x2000011c

08008024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008028:	2200      	movs	r2, #0
 800802a:	4905      	ldr	r1, [pc, #20]	; (8008040 <CDC_Init_FS+0x1c>)
 800802c:	4805      	ldr	r0, [pc, #20]	; (8008044 <CDC_Init_FS+0x20>)
 800802e:	f7fe ff1f 	bl	8006e70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008032:	4905      	ldr	r1, [pc, #20]	; (8008048 <CDC_Init_FS+0x24>)
 8008034:	4803      	ldr	r0, [pc, #12]	; (8008044 <CDC_Init_FS+0x20>)
 8008036:	f7fe ff34 	bl	8006ea2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800803a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800803c:	4618      	mov	r0, r3
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000d40 	.word	0x20000d40
 8008044:	200002a4 	.word	0x200002a4
 8008048:	20000540 	.word	0x20000540

0800804c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008052:	4618      	mov	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr
	...

0800805c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
 8008068:	4613      	mov	r3, r2
 800806a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	2b23      	cmp	r3, #35	; 0x23
 8008070:	d84a      	bhi.n	8008108 <CDC_Control_FS+0xac>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <CDC_Control_FS+0x1c>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	08008109 	.word	0x08008109
 800807c:	08008109 	.word	0x08008109
 8008080:	08008109 	.word	0x08008109
 8008084:	08008109 	.word	0x08008109
 8008088:	08008109 	.word	0x08008109
 800808c:	08008109 	.word	0x08008109
 8008090:	08008109 	.word	0x08008109
 8008094:	08008109 	.word	0x08008109
 8008098:	08008109 	.word	0x08008109
 800809c:	08008109 	.word	0x08008109
 80080a0:	08008109 	.word	0x08008109
 80080a4:	08008109 	.word	0x08008109
 80080a8:	08008109 	.word	0x08008109
 80080ac:	08008109 	.word	0x08008109
 80080b0:	08008109 	.word	0x08008109
 80080b4:	08008109 	.word	0x08008109
 80080b8:	08008109 	.word	0x08008109
 80080bc:	08008109 	.word	0x08008109
 80080c0:	08008109 	.word	0x08008109
 80080c4:	08008109 	.word	0x08008109
 80080c8:	08008109 	.word	0x08008109
 80080cc:	08008109 	.word	0x08008109
 80080d0:	08008109 	.word	0x08008109
 80080d4:	08008109 	.word	0x08008109
 80080d8:	08008109 	.word	0x08008109
 80080dc:	08008109 	.word	0x08008109
 80080e0:	08008109 	.word	0x08008109
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008109 	.word	0x08008109
 80080ec:	08008109 	.word	0x08008109
 80080f0:	08008109 	.word	0x08008109
 80080f4:	08008109 	.word	0x08008109
 80080f8:	08008109 	.word	0x08008109
 80080fc:	08008109 	.word	0x08008109
 8008100:	08008109 	.word	0x08008109
 8008104:	08008109 	.word	0x08008109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008108:	bf00      	nop
  }

  return (USBD_OK);
 800810a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop

08008118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	4805      	ldr	r0, [pc, #20]	; (800813c <CDC_Receive_FS+0x24>)
 8008126:	f7fe febc 	bl	8006ea2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800812a:	4804      	ldr	r0, [pc, #16]	; (800813c <CDC_Receive_FS+0x24>)
 800812c:	f7fe fefb 	bl	8006f26 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8008130:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	200002a4 	.word	0x200002a4

08008140 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008150:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <CDC_Transmit_FS+0x48>)
 8008152:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008156:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008162:	2301      	movs	r3, #1
 8008164:	e00b      	b.n	800817e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008166:	887b      	ldrh	r3, [r7, #2]
 8008168:	461a      	mov	r2, r3
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	4806      	ldr	r0, [pc, #24]	; (8008188 <CDC_Transmit_FS+0x48>)
 800816e:	f7fe fe7f 	bl	8006e70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008172:	4805      	ldr	r0, [pc, #20]	; (8008188 <CDC_Transmit_FS+0x48>)
 8008174:	f7fe fea8 	bl	8006ec8 <USBD_CDC_TransmitPacket>
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200002a4 	.word	0x200002a4

0800818c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2212      	movs	r2, #18
 800819c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800819e:	4b03      	ldr	r3, [pc, #12]	; (80081ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000148 	.word	0x20000148

080081b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2204      	movs	r2, #4
 80081c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081c2:	4b03      	ldr	r3, [pc, #12]	; (80081d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	2000015c 	.word	0x2000015c

080081d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4907      	ldr	r1, [pc, #28]	; (8008208 <USBD_FS_ProductStrDescriptor+0x34>)
 80081ea:	4808      	ldr	r0, [pc, #32]	; (800820c <USBD_FS_ProductStrDescriptor+0x38>)
 80081ec:	f7ff fe0c 	bl	8007e08 <USBD_GetString>
 80081f0:	e004      	b.n	80081fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4904      	ldr	r1, [pc, #16]	; (8008208 <USBD_FS_ProductStrDescriptor+0x34>)
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <USBD_FS_ProductStrDescriptor+0x38>)
 80081f8:	f7ff fe06 	bl	8007e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20001540 	.word	0x20001540
 800820c:	080092e0 	.word	0x080092e0

08008210 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	4904      	ldr	r1, [pc, #16]	; (8008230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008220:	4804      	ldr	r0, [pc, #16]	; (8008234 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008222:	f7ff fdf1 	bl	8007e08 <USBD_GetString>
  return USBD_StrDesc;
 8008226:	4b02      	ldr	r3, [pc, #8]	; (8008230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20001540 	.word	0x20001540
 8008234:	080092f8 	.word	0x080092f8

08008238 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	221a      	movs	r2, #26
 8008248:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800824a:	f000 f843 	bl	80082d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800824e:	4b02      	ldr	r3, [pc, #8]	; (8008258 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000160 	.word	0x20000160

0800825c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d105      	bne.n	800827a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4907      	ldr	r1, [pc, #28]	; (8008290 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008272:	4808      	ldr	r0, [pc, #32]	; (8008294 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008274:	f7ff fdc8 	bl	8007e08 <USBD_GetString>
 8008278:	e004      	b.n	8008284 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4904      	ldr	r1, [pc, #16]	; (8008290 <USBD_FS_ConfigStrDescriptor+0x34>)
 800827e:	4805      	ldr	r0, [pc, #20]	; (8008294 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008280:	f7ff fdc2 	bl	8007e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008284:	4b02      	ldr	r3, [pc, #8]	; (8008290 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20001540 	.word	0x20001540
 8008294:	0800930c 	.word	0x0800930c

08008298 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4907      	ldr	r1, [pc, #28]	; (80082cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ae:	4808      	ldr	r0, [pc, #32]	; (80082d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082b0:	f7ff fdaa 	bl	8007e08 <USBD_GetString>
 80082b4:	e004      	b.n	80082c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4904      	ldr	r1, [pc, #16]	; (80082cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ba:	4805      	ldr	r0, [pc, #20]	; (80082d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082bc:	f7ff fda4 	bl	8007e08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c0:	4b02      	ldr	r3, [pc, #8]	; (80082cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20001540 	.word	0x20001540
 80082d0:	08009318 	.word	0x08009318

080082d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082da:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <Get_SerialNum+0x44>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082e0:	4b0e      	ldr	r3, [pc, #56]	; (800831c <Get_SerialNum+0x48>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082e6:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <Get_SerialNum+0x4c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082fa:	2208      	movs	r2, #8
 80082fc:	4909      	ldr	r1, [pc, #36]	; (8008324 <Get_SerialNum+0x50>)
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f814 	bl	800832c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008304:	2204      	movs	r2, #4
 8008306:	4908      	ldr	r1, [pc, #32]	; (8008328 <Get_SerialNum+0x54>)
 8008308:	68b8      	ldr	r0, [r7, #8]
 800830a:	f000 f80f 	bl	800832c <IntToUnicode>
  }
}
 800830e:	bf00      	nop
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	1ff800d0 	.word	0x1ff800d0
 800831c:	1ff800d4 	.word	0x1ff800d4
 8008320:	1ff800d8 	.word	0x1ff800d8
 8008324:	20000162 	.word	0x20000162
 8008328:	20000172 	.word	0x20000172

0800832c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]
 8008342:	e027      	b.n	8008394 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	0f1b      	lsrs	r3, r3, #28
 8008348:	2b09      	cmp	r3, #9
 800834a:	d80b      	bhi.n	8008364 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	0f1b      	lsrs	r3, r3, #28
 8008350:	b2da      	uxtb	r2, r3
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	4619      	mov	r1, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	440b      	add	r3, r1
 800835c:	3230      	adds	r2, #48	; 0x30
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	e00a      	b.n	800837a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	0f1b      	lsrs	r3, r3, #28
 8008368:	b2da      	uxtb	r2, r3
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	4619      	mov	r1, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	440b      	add	r3, r1
 8008374:	3237      	adds	r2, #55	; 0x37
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	3301      	adds	r3, #1
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4413      	add	r3, r2
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	3301      	adds	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
 8008394:	7dfa      	ldrb	r2, [r7, #23]
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	429a      	cmp	r2, r3
 800839a:	d3d3      	bcc.n	8008344 <IntToUnicode+0x18>
  }
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d106      	bne.n	80083c8 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	4a08      	ldr	r2, [pc, #32]	; (80083e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80083c6:	e005      	b.n	80083d4 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	4a04      	ldr	r2, [pc, #16]	; (80083e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	6053      	str	r3, [r2, #4]
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40010000 	.word	0x40010000

080083e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0d      	ldr	r2, [pc, #52]	; (8008428 <HAL_PCD_MspInit+0x44>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d113      	bne.n	800841e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083f6:	4b0d      	ldr	r3, [pc, #52]	; (800842c <HAL_PCD_MspInit+0x48>)
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	4a0c      	ldr	r2, [pc, #48]	; (800842c <HAL_PCD_MspInit+0x48>)
 80083fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008400:	6253      	str	r3, [r2, #36]	; 0x24
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <HAL_PCD_MspInit+0x48>)
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800840e:	2200      	movs	r2, #0
 8008410:	2100      	movs	r1, #0
 8008412:	2014      	movs	r0, #20
 8008414:	f7f8 fcff 	bl	8000e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008418:	2014      	movs	r0, #20
 800841a:	f7f8 fd18 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800841e:	bf00      	nop
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40005c00 	.word	0x40005c00
 800842c:	40023800 	.word	0x40023800

08008430 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7fe fe23 	bl	8007092 <USBD_LL_SetupStage>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	440b      	add	r3, r1
 8008474:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	4619      	mov	r1, r3
 800847e:	f7fe fe55 	bl	800712c <USBD_LL_DataOutStage>
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	440b      	add	r3, r1
 80084aa:	333c      	adds	r3, #60	; 0x3c
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f7fe feac 	bl	800720e <USBD_LL_DataInStage>
}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe ffb7 	bl	8007440 <USBD_LL_SOF>
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d001      	beq.n	80084f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084ee:	f7f8 f9cd 	bl	800088c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe ff6c 	bl	80073da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe ff25 	bl	8007358 <USBD_LL_Reset>
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe ff66 	bl	80073f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008534:	4b04      	ldr	r3, [pc, #16]	; (8008548 <HAL_PCD_SuspendCallback+0x30>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	4a03      	ldr	r2, [pc, #12]	; (8008548 <HAL_PCD_SuspendCallback+0x30>)
 800853a:	f043 0306 	orr.w	r3, r3, #6
 800853e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	e000ed00 	.word	0xe000ed00

0800854c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe ff60 	bl	8007420 <USBD_LL_Resume>
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008570:	4a28      	ldr	r2, [pc, #160]	; (8008614 <USBD_LL_Init+0xac>)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a26      	ldr	r2, [pc, #152]	; (8008614 <USBD_LL_Init+0xac>)
 800857c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008580:	4b24      	ldr	r3, [pc, #144]	; (8008614 <USBD_LL_Init+0xac>)
 8008582:	4a25      	ldr	r2, [pc, #148]	; (8008618 <USBD_LL_Init+0xb0>)
 8008584:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008586:	4b23      	ldr	r3, [pc, #140]	; (8008614 <USBD_LL_Init+0xac>)
 8008588:	2208      	movs	r2, #8
 800858a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800858c:	4b21      	ldr	r3, [pc, #132]	; (8008614 <USBD_LL_Init+0xac>)
 800858e:	2202      	movs	r2, #2
 8008590:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008592:	4b20      	ldr	r3, [pc, #128]	; (8008614 <USBD_LL_Init+0xac>)
 8008594:	2202      	movs	r2, #2
 8008596:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <USBD_LL_Init+0xac>)
 800859a:	2200      	movs	r2, #0
 800859c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800859e:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <USBD_LL_Init+0xac>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085a4:	481b      	ldr	r0, [pc, #108]	; (8008614 <USBD_LL_Init+0xac>)
 80085a6:	f7f8 fe2d 	bl	8001204 <HAL_PCD_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085b0:	f7f8 f96c 	bl	800088c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085ba:	2318      	movs	r3, #24
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	f7fa fa0a 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085ca:	2358      	movs	r3, #88	; 0x58
 80085cc:	2200      	movs	r2, #0
 80085ce:	2180      	movs	r1, #128	; 0x80
 80085d0:	f7fa fa02 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085da:	23c0      	movs	r3, #192	; 0xc0
 80085dc:	2200      	movs	r2, #0
 80085de:	2181      	movs	r1, #129	; 0x81
 80085e0:	f7fa f9fa 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80085ee:	2200      	movs	r2, #0
 80085f0:	2101      	movs	r1, #1
 80085f2:	f7fa f9f1 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008600:	2200      	movs	r2, #0
 8008602:	2182      	movs	r1, #130	; 0x82
 8008604:	f7fa f9e8 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20001740 	.word	0x20001740
 8008618:	40005c00 	.word	0x40005c00

0800861c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008632:	4618      	mov	r0, r3
 8008634:	f7f8 fec4 	bl	80013c0 <HAL_PCD_Start>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f944 	bl	80088cc <USBD_Get_USB_Status>
 8008644:	4603      	mov	r3, r0
 8008646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008648:	7bbb      	ldrb	r3, [r7, #14]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	4608      	mov	r0, r1
 800865c:	4611      	mov	r1, r2
 800865e:	461a      	mov	r2, r3
 8008660:	4603      	mov	r3, r0
 8008662:	70fb      	strb	r3, [r7, #3]
 8008664:	460b      	mov	r3, r1
 8008666:	70bb      	strb	r3, [r7, #2]
 8008668:	4613      	mov	r3, r2
 800866a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800867a:	78bb      	ldrb	r3, [r7, #2]
 800867c:	883a      	ldrh	r2, [r7, #0]
 800867e:	78f9      	ldrb	r1, [r7, #3]
 8008680:	f7f8 ffe0 	bl	8001644 <HAL_PCD_EP_Open>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f91e 	bl	80088cc <USBD_Get_USB_Status>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086b8:	78fa      	ldrb	r2, [r7, #3]
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f7f9 f827 	bl	8001710 <HAL_PCD_EP_Close>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 f8ff 	bl	80088cc <USBD_Get_USB_Status>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7f9 f8e7 	bl	80018ce <HAL_PCD_EP_SetStall>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f8e0 	bl	80088cc <USBD_Get_USB_Status>
 800870c:	4603      	mov	r3, r0
 800870e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008710:	7bbb      	ldrb	r3, [r7, #14]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008734:	78fa      	ldrb	r2, [r7, #3]
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7f9 f91a 	bl	8001972 <HAL_PCD_EP_ClrStall>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f8c1 	bl	80088cc <USBD_Get_USB_Status>
 800874a:	4603      	mov	r3, r0
 800874c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800876a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800876c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da0c      	bge.n	800878e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877a:	68f9      	ldr	r1, [r7, #12]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	440b      	add	r3, r1
 8008788:	3302      	adds	r3, #2
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	e00b      	b.n	80087a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008794:	68f9      	ldr	r1, [r7, #12]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	440b      	add	r3, r1
 80087a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80087a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr

080087b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087ca:	78fa      	ldrb	r2, [r7, #3]
 80087cc:	4611      	mov	r1, r2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7f8 ff13 	bl	80015fa <HAL_PCD_SetAddress>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f876 	bl	80088cc <USBD_Get_USB_Status>
 80087e0:	4603      	mov	r3, r0
 80087e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	461a      	mov	r2, r3
 80087fa:	460b      	mov	r3, r1
 80087fc:	72fb      	strb	r3, [r7, #11]
 80087fe:	4613      	mov	r3, r2
 8008800:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008810:	893b      	ldrh	r3, [r7, #8]
 8008812:	7af9      	ldrb	r1, [r7, #11]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	f7f9 f817 	bl	8001848 <HAL_PCD_EP_Transmit>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f853 	bl	80088cc <USBD_Get_USB_Status>
 8008826:	4603      	mov	r3, r0
 8008828:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800882a:	7dbb      	ldrb	r3, [r7, #22]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	461a      	mov	r2, r3
 8008840:	460b      	mov	r3, r1
 8008842:	72fb      	strb	r3, [r7, #11]
 8008844:	4613      	mov	r3, r2
 8008846:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008856:	893b      	ldrh	r3, [r7, #8]
 8008858:	7af9      	ldrb	r1, [r7, #11]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	f7f8 ffa0 	bl	80017a0 <HAL_PCD_EP_Receive>
 8008860:	4603      	mov	r3, r0
 8008862:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f830 	bl	80088cc <USBD_Get_USB_Status>
 800886c:	4603      	mov	r3, r0
 800886e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008870:	7dbb      	ldrb	r3, [r7, #22]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800888c:	78fa      	ldrb	r2, [r7, #3]
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f7f8 ffc2 	bl	800181a <HAL_PCD_EP_GetRxCount>
 8008896:	4603      	mov	r3, r0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <USBD_static_malloc+0x14>)
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc80      	pop	{r7}
 80088b2:	4770      	bx	lr
 80088b4:	20001a2c 	.word	0x20001a2c

080088b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
	...

080088cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d817      	bhi.n	8008910 <USBD_Get_USB_Status+0x44>
 80088e0:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <USBD_Get_USB_Status+0x1c>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	080088ff 	.word	0x080088ff
 80088f0:	08008905 	.word	0x08008905
 80088f4:	0800890b 	.word	0x0800890b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	e00b      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	73fb      	strb	r3, [r7, #15]
    break;
 8008902:	e008      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008904:	2301      	movs	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
    break;
 8008908:	e005      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800890a:	2302      	movs	r3, #2
 800890c:	73fb      	strb	r3, [r7, #15]
    break;
 800890e:	e002      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008910:	2302      	movs	r3, #2
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	bf00      	nop
  }
  return usb_status;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	bc80      	pop	{r7}
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop

08008924 <__errno>:
 8008924:	4b01      	ldr	r3, [pc, #4]	; (800892c <__errno+0x8>)
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	2000017c 	.word	0x2000017c

08008930 <__libc_init_array>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	2600      	movs	r6, #0
 8008934:	4d0c      	ldr	r5, [pc, #48]	; (8008968 <__libc_init_array+0x38>)
 8008936:	4c0d      	ldr	r4, [pc, #52]	; (800896c <__libc_init_array+0x3c>)
 8008938:	1b64      	subs	r4, r4, r5
 800893a:	10a4      	asrs	r4, r4, #2
 800893c:	42a6      	cmp	r6, r4
 800893e:	d109      	bne.n	8008954 <__libc_init_array+0x24>
 8008940:	f000 fc9c 	bl	800927c <_init>
 8008944:	2600      	movs	r6, #0
 8008946:	4d0a      	ldr	r5, [pc, #40]	; (8008970 <__libc_init_array+0x40>)
 8008948:	4c0a      	ldr	r4, [pc, #40]	; (8008974 <__libc_init_array+0x44>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	42a6      	cmp	r6, r4
 8008950:	d105      	bne.n	800895e <__libc_init_array+0x2e>
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	f855 3b04 	ldr.w	r3, [r5], #4
 8008958:	4798      	blx	r3
 800895a:	3601      	adds	r6, #1
 800895c:	e7ee      	b.n	800893c <__libc_init_array+0xc>
 800895e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008962:	4798      	blx	r3
 8008964:	3601      	adds	r6, #1
 8008966:	e7f2      	b.n	800894e <__libc_init_array+0x1e>
 8008968:	08009388 	.word	0x08009388
 800896c:	08009388 	.word	0x08009388
 8008970:	08009388 	.word	0x08009388
 8008974:	0800938c 	.word	0x0800938c

08008978 <memset>:
 8008978:	4603      	mov	r3, r0
 800897a:	4402      	add	r2, r0
 800897c:	4293      	cmp	r3, r2
 800897e:	d100      	bne.n	8008982 <memset+0xa>
 8008980:	4770      	bx	lr
 8008982:	f803 1b01 	strb.w	r1, [r3], #1
 8008986:	e7f9      	b.n	800897c <memset+0x4>

08008988 <siprintf>:
 8008988:	b40e      	push	{r1, r2, r3}
 800898a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800898e:	b500      	push	{lr}
 8008990:	b09c      	sub	sp, #112	; 0x70
 8008992:	ab1d      	add	r3, sp, #116	; 0x74
 8008994:	9002      	str	r0, [sp, #8]
 8008996:	9006      	str	r0, [sp, #24]
 8008998:	9107      	str	r1, [sp, #28]
 800899a:	9104      	str	r1, [sp, #16]
 800899c:	4808      	ldr	r0, [pc, #32]	; (80089c0 <siprintf+0x38>)
 800899e:	4909      	ldr	r1, [pc, #36]	; (80089c4 <siprintf+0x3c>)
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	9105      	str	r1, [sp, #20]
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	a902      	add	r1, sp, #8
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	f000 f868 	bl	8008a80 <_svfiprintf_r>
 80089b0:	2200      	movs	r2, #0
 80089b2:	9b02      	ldr	r3, [sp, #8]
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	b01c      	add	sp, #112	; 0x70
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	b003      	add	sp, #12
 80089be:	4770      	bx	lr
 80089c0:	2000017c 	.word	0x2000017c
 80089c4:	ffff0208 	.word	0xffff0208

080089c8 <__ssputs_r>:
 80089c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	688e      	ldr	r6, [r1, #8]
 80089ce:	4682      	mov	sl, r0
 80089d0:	429e      	cmp	r6, r3
 80089d2:	460c      	mov	r4, r1
 80089d4:	4690      	mov	r8, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	d838      	bhi.n	8008a4c <__ssputs_r+0x84>
 80089da:	898a      	ldrh	r2, [r1, #12]
 80089dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089e0:	d032      	beq.n	8008a48 <__ssputs_r+0x80>
 80089e2:	6825      	ldr	r5, [r4, #0]
 80089e4:	6909      	ldr	r1, [r1, #16]
 80089e6:	3301      	adds	r3, #1
 80089e8:	eba5 0901 	sub.w	r9, r5, r1
 80089ec:	6965      	ldr	r5, [r4, #20]
 80089ee:	444b      	add	r3, r9
 80089f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089f8:	106d      	asrs	r5, r5, #1
 80089fa:	429d      	cmp	r5, r3
 80089fc:	bf38      	it	cc
 80089fe:	461d      	movcc	r5, r3
 8008a00:	0553      	lsls	r3, r2, #21
 8008a02:	d531      	bpl.n	8008a68 <__ssputs_r+0xa0>
 8008a04:	4629      	mov	r1, r5
 8008a06:	f000 fb6f 	bl	80090e8 <_malloc_r>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	b950      	cbnz	r0, 8008a24 <__ssputs_r+0x5c>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	f04f 30ff 	mov.w	r0, #4294967295
 8008a14:	f8ca 3000 	str.w	r3, [sl]
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	464a      	mov	r2, r9
 8008a26:	6921      	ldr	r1, [r4, #16]
 8008a28:	f000 face 	bl	8008fc8 <memcpy>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	6126      	str	r6, [r4, #16]
 8008a3a:	444e      	add	r6, r9
 8008a3c:	6026      	str	r6, [r4, #0]
 8008a3e:	463e      	mov	r6, r7
 8008a40:	6165      	str	r5, [r4, #20]
 8008a42:	eba5 0509 	sub.w	r5, r5, r9
 8008a46:	60a5      	str	r5, [r4, #8]
 8008a48:	42be      	cmp	r6, r7
 8008a4a:	d900      	bls.n	8008a4e <__ssputs_r+0x86>
 8008a4c:	463e      	mov	r6, r7
 8008a4e:	4632      	mov	r2, r6
 8008a50:	4641      	mov	r1, r8
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	f000 fac6 	bl	8008fe4 <memmove>
 8008a58:	68a3      	ldr	r3, [r4, #8]
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	1b9b      	subs	r3, r3, r6
 8008a5e:	60a3      	str	r3, [r4, #8]
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	4433      	add	r3, r6
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	e7db      	b.n	8008a20 <__ssputs_r+0x58>
 8008a68:	462a      	mov	r2, r5
 8008a6a:	f000 fbb1 	bl	80091d0 <_realloc_r>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1e1      	bne.n	8008a38 <__ssputs_r+0x70>
 8008a74:	4650      	mov	r0, sl
 8008a76:	6921      	ldr	r1, [r4, #16]
 8008a78:	f000 face 	bl	8009018 <_free_r>
 8008a7c:	e7c7      	b.n	8008a0e <__ssputs_r+0x46>
	...

08008a80 <_svfiprintf_r>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4698      	mov	r8, r3
 8008a86:	898b      	ldrh	r3, [r1, #12]
 8008a88:	4607      	mov	r7, r0
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	4614      	mov	r4, r2
 8008a90:	b09d      	sub	sp, #116	; 0x74
 8008a92:	d50e      	bpl.n	8008ab2 <_svfiprintf_r+0x32>
 8008a94:	690b      	ldr	r3, [r1, #16]
 8008a96:	b963      	cbnz	r3, 8008ab2 <_svfiprintf_r+0x32>
 8008a98:	2140      	movs	r1, #64	; 0x40
 8008a9a:	f000 fb25 	bl	80090e8 <_malloc_r>
 8008a9e:	6028      	str	r0, [r5, #0]
 8008aa0:	6128      	str	r0, [r5, #16]
 8008aa2:	b920      	cbnz	r0, 8008aae <_svfiprintf_r+0x2e>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	e0d1      	b.n	8008c52 <_svfiprintf_r+0x1d2>
 8008aae:	2340      	movs	r3, #64	; 0x40
 8008ab0:	616b      	str	r3, [r5, #20]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008abc:	2330      	movs	r3, #48	; 0x30
 8008abe:	f04f 0901 	mov.w	r9, #1
 8008ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c6c <_svfiprintf_r+0x1ec>
 8008aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ace:	4623      	mov	r3, r4
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad6:	b10a      	cbz	r2, 8008adc <_svfiprintf_r+0x5c>
 8008ad8:	2a25      	cmp	r2, #37	; 0x25
 8008ada:	d1f9      	bne.n	8008ad0 <_svfiprintf_r+0x50>
 8008adc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ae0:	d00b      	beq.n	8008afa <_svfiprintf_r+0x7a>
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7ff ff6d 	bl	80089c8 <__ssputs_r>
 8008aee:	3001      	adds	r0, #1
 8008af0:	f000 80aa 	beq.w	8008c48 <_svfiprintf_r+0x1c8>
 8008af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af6:	445a      	add	r2, fp
 8008af8:	9209      	str	r2, [sp, #36]	; 0x24
 8008afa:	f89a 3000 	ldrb.w	r3, [sl]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80a2 	beq.w	8008c48 <_svfiprintf_r+0x1c8>
 8008b04:	2300      	movs	r3, #0
 8008b06:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0e:	f10a 0a01 	add.w	sl, sl, #1
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	9307      	str	r3, [sp, #28]
 8008b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b1c:	4654      	mov	r4, sl
 8008b1e:	2205      	movs	r2, #5
 8008b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b24:	4851      	ldr	r0, [pc, #324]	; (8008c6c <_svfiprintf_r+0x1ec>)
 8008b26:	f000 fa41 	bl	8008fac <memchr>
 8008b2a:	9a04      	ldr	r2, [sp, #16]
 8008b2c:	b9d8      	cbnz	r0, 8008b66 <_svfiprintf_r+0xe6>
 8008b2e:	06d0      	lsls	r0, r2, #27
 8008b30:	bf44      	itt	mi
 8008b32:	2320      	movmi	r3, #32
 8008b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b38:	0711      	lsls	r1, r2, #28
 8008b3a:	bf44      	itt	mi
 8008b3c:	232b      	movmi	r3, #43	; 0x2b
 8008b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b42:	f89a 3000 	ldrb.w	r3, [sl]
 8008b46:	2b2a      	cmp	r3, #42	; 0x2a
 8008b48:	d015      	beq.n	8008b76 <_svfiprintf_r+0xf6>
 8008b4a:	4654      	mov	r4, sl
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f04f 0c0a 	mov.w	ip, #10
 8008b52:	9a07      	ldr	r2, [sp, #28]
 8008b54:	4621      	mov	r1, r4
 8008b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b5a:	3b30      	subs	r3, #48	; 0x30
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	d94e      	bls.n	8008bfe <_svfiprintf_r+0x17e>
 8008b60:	b1b0      	cbz	r0, 8008b90 <_svfiprintf_r+0x110>
 8008b62:	9207      	str	r2, [sp, #28]
 8008b64:	e014      	b.n	8008b90 <_svfiprintf_r+0x110>
 8008b66:	eba0 0308 	sub.w	r3, r0, r8
 8008b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	46a2      	mov	sl, r4
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	e7d2      	b.n	8008b1c <_svfiprintf_r+0x9c>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	1d19      	adds	r1, r3, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	9103      	str	r1, [sp, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bfbb      	ittet	lt
 8008b82:	425b      	neglt	r3, r3
 8008b84:	f042 0202 	orrlt.w	r2, r2, #2
 8008b88:	9307      	strge	r3, [sp, #28]
 8008b8a:	9307      	strlt	r3, [sp, #28]
 8008b8c:	bfb8      	it	lt
 8008b8e:	9204      	strlt	r2, [sp, #16]
 8008b90:	7823      	ldrb	r3, [r4, #0]
 8008b92:	2b2e      	cmp	r3, #46	; 0x2e
 8008b94:	d10c      	bne.n	8008bb0 <_svfiprintf_r+0x130>
 8008b96:	7863      	ldrb	r3, [r4, #1]
 8008b98:	2b2a      	cmp	r3, #42	; 0x2a
 8008b9a:	d135      	bne.n	8008c08 <_svfiprintf_r+0x188>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	3402      	adds	r4, #2
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	9203      	str	r2, [sp, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bfb8      	it	lt
 8008baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008c70 <_svfiprintf_r+0x1f0>
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	7821      	ldrb	r1, [r4, #0]
 8008bba:	f000 f9f7 	bl	8008fac <memchr>
 8008bbe:	b140      	cbz	r0, 8008bd2 <_svfiprintf_r+0x152>
 8008bc0:	2340      	movs	r3, #64	; 0x40
 8008bc2:	eba0 000a 	sub.w	r0, r0, sl
 8008bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	3401      	adds	r4, #1
 8008bce:	4303      	orrs	r3, r0
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	2206      	movs	r2, #6
 8008bd8:	4826      	ldr	r0, [pc, #152]	; (8008c74 <_svfiprintf_r+0x1f4>)
 8008bda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bde:	f000 f9e5 	bl	8008fac <memchr>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d038      	beq.n	8008c58 <_svfiprintf_r+0x1d8>
 8008be6:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <_svfiprintf_r+0x1f8>)
 8008be8:	bb1b      	cbnz	r3, 8008c32 <_svfiprintf_r+0x1b2>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	3307      	adds	r3, #7
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	4433      	add	r3, r6
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	e767      	b.n	8008ace <_svfiprintf_r+0x4e>
 8008bfe:	460c      	mov	r4, r1
 8008c00:	2001      	movs	r0, #1
 8008c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c06:	e7a5      	b.n	8008b54 <_svfiprintf_r+0xd4>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f04f 0c0a 	mov.w	ip, #10
 8008c0e:	4619      	mov	r1, r3
 8008c10:	3401      	adds	r4, #1
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	4620      	mov	r0, r4
 8008c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c1a:	3a30      	subs	r2, #48	; 0x30
 8008c1c:	2a09      	cmp	r2, #9
 8008c1e:	d903      	bls.n	8008c28 <_svfiprintf_r+0x1a8>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0c5      	beq.n	8008bb0 <_svfiprintf_r+0x130>
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	e7c3      	b.n	8008bb0 <_svfiprintf_r+0x130>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c30:	e7f0      	b.n	8008c14 <_svfiprintf_r+0x194>
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4638      	mov	r0, r7
 8008c3a:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <_svfiprintf_r+0x1fc>)
 8008c3c:	a904      	add	r1, sp, #16
 8008c3e:	f3af 8000 	nop.w
 8008c42:	1c42      	adds	r2, r0, #1
 8008c44:	4606      	mov	r6, r0
 8008c46:	d1d6      	bne.n	8008bf6 <_svfiprintf_r+0x176>
 8008c48:	89ab      	ldrh	r3, [r5, #12]
 8008c4a:	065b      	lsls	r3, r3, #25
 8008c4c:	f53f af2c 	bmi.w	8008aa8 <_svfiprintf_r+0x28>
 8008c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c52:	b01d      	add	sp, #116	; 0x74
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <_svfiprintf_r+0x1fc>)
 8008c62:	a904      	add	r1, sp, #16
 8008c64:	f000 f87c 	bl	8008d60 <_printf_i>
 8008c68:	e7eb      	b.n	8008c42 <_svfiprintf_r+0x1c2>
 8008c6a:	bf00      	nop
 8008c6c:	0800934c 	.word	0x0800934c
 8008c70:	08009352 	.word	0x08009352
 8008c74:	08009356 	.word	0x08009356
 8008c78:	00000000 	.word	0x00000000
 8008c7c:	080089c9 	.word	0x080089c9

08008c80 <_printf_common>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	4616      	mov	r6, r2
 8008c86:	4699      	mov	r9, r3
 8008c88:	688a      	ldr	r2, [r1, #8]
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfb8      	it	lt
 8008c92:	4613      	movlt	r3, r2
 8008c94:	6033      	str	r3, [r6, #0]
 8008c96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_printf_common+0x26>
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	0699      	lsls	r1, r3, #26
 8008caa:	bf42      	ittt	mi
 8008cac:	6833      	ldrmi	r3, [r6, #0]
 8008cae:	3302      	addmi	r3, #2
 8008cb0:	6033      	strmi	r3, [r6, #0]
 8008cb2:	6825      	ldr	r5, [r4, #0]
 8008cb4:	f015 0506 	ands.w	r5, r5, #6
 8008cb8:	d106      	bne.n	8008cc8 <_printf_common+0x48>
 8008cba:	f104 0a19 	add.w	sl, r4, #25
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	6832      	ldr	r2, [r6, #0]
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dc28      	bgt.n	8008d1a <_printf_common+0x9a>
 8008cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ccc:	1e13      	subs	r3, r2, #0
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	bf18      	it	ne
 8008cd2:	2301      	movne	r3, #1
 8008cd4:	0692      	lsls	r2, r2, #26
 8008cd6:	d42d      	bmi.n	8008d34 <_printf_common+0xb4>
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ce0:	47c0      	blx	r8
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d020      	beq.n	8008d28 <_printf_common+0xa8>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	68e5      	ldr	r5, [r4, #12]
 8008cea:	f003 0306 	and.w	r3, r3, #6
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	bf18      	it	ne
 8008cf2:	2500      	movne	r5, #0
 8008cf4:	6832      	ldr	r2, [r6, #0]
 8008cf6:	f04f 0600 	mov.w	r6, #0
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	bf08      	it	eq
 8008cfe:	1aad      	subeq	r5, r5, r2
 8008d00:	6922      	ldr	r2, [r4, #16]
 8008d02:	bf08      	it	eq
 8008d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bfc4      	itt	gt
 8008d0c:	1a9b      	subgt	r3, r3, r2
 8008d0e:	18ed      	addgt	r5, r5, r3
 8008d10:	341a      	adds	r4, #26
 8008d12:	42b5      	cmp	r5, r6
 8008d14:	d11a      	bne.n	8008d4c <_printf_common+0xcc>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e008      	b.n	8008d2c <_printf_common+0xac>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4652      	mov	r2, sl
 8008d1e:	4649      	mov	r1, r9
 8008d20:	4638      	mov	r0, r7
 8008d22:	47c0      	blx	r8
 8008d24:	3001      	adds	r0, #1
 8008d26:	d103      	bne.n	8008d30 <_printf_common+0xb0>
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d30:	3501      	adds	r5, #1
 8008d32:	e7c4      	b.n	8008cbe <_printf_common+0x3e>
 8008d34:	2030      	movs	r0, #48	; 0x30
 8008d36:	18e1      	adds	r1, r4, r3
 8008d38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d42:	4422      	add	r2, r4
 8008d44:	3302      	adds	r3, #2
 8008d46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d4a:	e7c5      	b.n	8008cd8 <_printf_common+0x58>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4649      	mov	r1, r9
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0e6      	beq.n	8008d28 <_printf_common+0xa8>
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7d9      	b.n	8008d12 <_printf_common+0x92>
	...

08008d60 <_printf_i>:
 8008d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	7e0f      	ldrb	r7, [r1, #24]
 8008d66:	4691      	mov	r9, r2
 8008d68:	2f78      	cmp	r7, #120	; 0x78
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	469a      	mov	sl, r3
 8008d70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d76:	d807      	bhi.n	8008d88 <_printf_i+0x28>
 8008d78:	2f62      	cmp	r7, #98	; 0x62
 8008d7a:	d80a      	bhi.n	8008d92 <_printf_i+0x32>
 8008d7c:	2f00      	cmp	r7, #0
 8008d7e:	f000 80d9 	beq.w	8008f34 <_printf_i+0x1d4>
 8008d82:	2f58      	cmp	r7, #88	; 0x58
 8008d84:	f000 80a4 	beq.w	8008ed0 <_printf_i+0x170>
 8008d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d90:	e03a      	b.n	8008e08 <_printf_i+0xa8>
 8008d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d96:	2b15      	cmp	r3, #21
 8008d98:	d8f6      	bhi.n	8008d88 <_printf_i+0x28>
 8008d9a:	a101      	add	r1, pc, #4	; (adr r1, 8008da0 <_printf_i+0x40>)
 8008d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008da0:	08008df9 	.word	0x08008df9
 8008da4:	08008e0d 	.word	0x08008e0d
 8008da8:	08008d89 	.word	0x08008d89
 8008dac:	08008d89 	.word	0x08008d89
 8008db0:	08008d89 	.word	0x08008d89
 8008db4:	08008d89 	.word	0x08008d89
 8008db8:	08008e0d 	.word	0x08008e0d
 8008dbc:	08008d89 	.word	0x08008d89
 8008dc0:	08008d89 	.word	0x08008d89
 8008dc4:	08008d89 	.word	0x08008d89
 8008dc8:	08008d89 	.word	0x08008d89
 8008dcc:	08008f1b 	.word	0x08008f1b
 8008dd0:	08008e3d 	.word	0x08008e3d
 8008dd4:	08008efd 	.word	0x08008efd
 8008dd8:	08008d89 	.word	0x08008d89
 8008ddc:	08008d89 	.word	0x08008d89
 8008de0:	08008f3d 	.word	0x08008f3d
 8008de4:	08008d89 	.word	0x08008d89
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008d89 	.word	0x08008d89
 8008df0:	08008d89 	.word	0x08008d89
 8008df4:	08008f05 	.word	0x08008f05
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	1d1a      	adds	r2, r3, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	602a      	str	r2, [r5, #0]
 8008e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e0a4      	b.n	8008f56 <_printf_i+0x1f6>
 8008e0c:	6820      	ldr	r0, [r4, #0]
 8008e0e:	6829      	ldr	r1, [r5, #0]
 8008e10:	0606      	lsls	r6, r0, #24
 8008e12:	f101 0304 	add.w	r3, r1, #4
 8008e16:	d50a      	bpl.n	8008e2e <_printf_i+0xce>
 8008e18:	680e      	ldr	r6, [r1, #0]
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	2e00      	cmp	r6, #0
 8008e1e:	da03      	bge.n	8008e28 <_printf_i+0xc8>
 8008e20:	232d      	movs	r3, #45	; 0x2d
 8008e22:	4276      	negs	r6, r6
 8008e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e28:	230a      	movs	r3, #10
 8008e2a:	485e      	ldr	r0, [pc, #376]	; (8008fa4 <_printf_i+0x244>)
 8008e2c:	e019      	b.n	8008e62 <_printf_i+0x102>
 8008e2e:	680e      	ldr	r6, [r1, #0]
 8008e30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	bf18      	it	ne
 8008e38:	b236      	sxthne	r6, r6
 8008e3a:	e7ef      	b.n	8008e1c <_printf_i+0xbc>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	6029      	str	r1, [r5, #0]
 8008e44:	0601      	lsls	r1, r0, #24
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0xec>
 8008e48:	681e      	ldr	r6, [r3, #0]
 8008e4a:	e002      	b.n	8008e52 <_printf_i+0xf2>
 8008e4c:	0646      	lsls	r6, r0, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0xe8>
 8008e50:	881e      	ldrh	r6, [r3, #0]
 8008e52:	2f6f      	cmp	r7, #111	; 0x6f
 8008e54:	bf0c      	ite	eq
 8008e56:	2308      	moveq	r3, #8
 8008e58:	230a      	movne	r3, #10
 8008e5a:	4852      	ldr	r0, [pc, #328]	; (8008fa4 <_printf_i+0x244>)
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e62:	6865      	ldr	r5, [r4, #4]
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	bfa8      	it	ge
 8008e68:	6821      	ldrge	r1, [r4, #0]
 8008e6a:	60a5      	str	r5, [r4, #8]
 8008e6c:	bfa4      	itt	ge
 8008e6e:	f021 0104 	bicge.w	r1, r1, #4
 8008e72:	6021      	strge	r1, [r4, #0]
 8008e74:	b90e      	cbnz	r6, 8008e7a <_printf_i+0x11a>
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	d04d      	beq.n	8008f16 <_printf_i+0x1b6>
 8008e7a:	4615      	mov	r5, r2
 8008e7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e80:	fb03 6711 	mls	r7, r3, r1, r6
 8008e84:	5dc7      	ldrb	r7, [r0, r7]
 8008e86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e8a:	4637      	mov	r7, r6
 8008e8c:	42bb      	cmp	r3, r7
 8008e8e:	460e      	mov	r6, r1
 8008e90:	d9f4      	bls.n	8008e7c <_printf_i+0x11c>
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d10b      	bne.n	8008eae <_printf_i+0x14e>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	07de      	lsls	r6, r3, #31
 8008e9a:	d508      	bpl.n	8008eae <_printf_i+0x14e>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	6861      	ldr	r1, [r4, #4]
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	bfde      	ittt	le
 8008ea4:	2330      	movle	r3, #48	; 0x30
 8008ea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008eae:	1b52      	subs	r2, r2, r5
 8008eb0:	6122      	str	r2, [r4, #16]
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f8cd a000 	str.w	sl, [sp]
 8008ebc:	aa03      	add	r2, sp, #12
 8008ebe:	f7ff fedf 	bl	8008c80 <_printf_common>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d14c      	bne.n	8008f60 <_printf_i+0x200>
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	b004      	add	sp, #16
 8008ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed0:	4834      	ldr	r0, [pc, #208]	; (8008fa4 <_printf_i+0x244>)
 8008ed2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ed6:	6829      	ldr	r1, [r5, #0]
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ede:	6029      	str	r1, [r5, #0]
 8008ee0:	061d      	lsls	r5, r3, #24
 8008ee2:	d514      	bpl.n	8008f0e <_printf_i+0x1ae>
 8008ee4:	07df      	lsls	r7, r3, #31
 8008ee6:	bf44      	itt	mi
 8008ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8008eec:	6023      	strmi	r3, [r4, #0]
 8008eee:	b91e      	cbnz	r6, 8008ef8 <_printf_i+0x198>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	f023 0320 	bic.w	r3, r3, #32
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	2310      	movs	r3, #16
 8008efa:	e7af      	b.n	8008e5c <_printf_i+0xfc>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	f043 0320 	orr.w	r3, r3, #32
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	2378      	movs	r3, #120	; 0x78
 8008f06:	4828      	ldr	r0, [pc, #160]	; (8008fa8 <_printf_i+0x248>)
 8008f08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f0c:	e7e3      	b.n	8008ed6 <_printf_i+0x176>
 8008f0e:	0659      	lsls	r1, r3, #25
 8008f10:	bf48      	it	mi
 8008f12:	b2b6      	uxthmi	r6, r6
 8008f14:	e7e6      	b.n	8008ee4 <_printf_i+0x184>
 8008f16:	4615      	mov	r5, r2
 8008f18:	e7bb      	b.n	8008e92 <_printf_i+0x132>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	6826      	ldr	r6, [r4, #0]
 8008f1e:	1d18      	adds	r0, r3, #4
 8008f20:	6961      	ldr	r1, [r4, #20]
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	0635      	lsls	r5, r6, #24
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	d501      	bpl.n	8008f2e <_printf_i+0x1ce>
 8008f2a:	6019      	str	r1, [r3, #0]
 8008f2c:	e002      	b.n	8008f34 <_printf_i+0x1d4>
 8008f2e:	0670      	lsls	r0, r6, #25
 8008f30:	d5fb      	bpl.n	8008f2a <_printf_i+0x1ca>
 8008f32:	8019      	strh	r1, [r3, #0]
 8008f34:	2300      	movs	r3, #0
 8008f36:	4615      	mov	r5, r2
 8008f38:	6123      	str	r3, [r4, #16]
 8008f3a:	e7ba      	b.n	8008eb2 <_printf_i+0x152>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	1d1a      	adds	r2, r3, #4
 8008f42:	602a      	str	r2, [r5, #0]
 8008f44:	681d      	ldr	r5, [r3, #0]
 8008f46:	6862      	ldr	r2, [r4, #4]
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f000 f82f 	bl	8008fac <memchr>
 8008f4e:	b108      	cbz	r0, 8008f54 <_printf_i+0x1f4>
 8008f50:	1b40      	subs	r0, r0, r5
 8008f52:	6060      	str	r0, [r4, #4]
 8008f54:	6863      	ldr	r3, [r4, #4]
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5e:	e7a8      	b.n	8008eb2 <_printf_i+0x152>
 8008f60:	462a      	mov	r2, r5
 8008f62:	4649      	mov	r1, r9
 8008f64:	4640      	mov	r0, r8
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	47d0      	blx	sl
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d0ab      	beq.n	8008ec6 <_printf_i+0x166>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	079b      	lsls	r3, r3, #30
 8008f72:	d413      	bmi.n	8008f9c <_printf_i+0x23c>
 8008f74:	68e0      	ldr	r0, [r4, #12]
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	4298      	cmp	r0, r3
 8008f7a:	bfb8      	it	lt
 8008f7c:	4618      	movlt	r0, r3
 8008f7e:	e7a4      	b.n	8008eca <_printf_i+0x16a>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4632      	mov	r2, r6
 8008f84:	4649      	mov	r1, r9
 8008f86:	4640      	mov	r0, r8
 8008f88:	47d0      	blx	sl
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d09b      	beq.n	8008ec6 <_printf_i+0x166>
 8008f8e:	3501      	adds	r5, #1
 8008f90:	68e3      	ldr	r3, [r4, #12]
 8008f92:	9903      	ldr	r1, [sp, #12]
 8008f94:	1a5b      	subs	r3, r3, r1
 8008f96:	42ab      	cmp	r3, r5
 8008f98:	dcf2      	bgt.n	8008f80 <_printf_i+0x220>
 8008f9a:	e7eb      	b.n	8008f74 <_printf_i+0x214>
 8008f9c:	2500      	movs	r5, #0
 8008f9e:	f104 0619 	add.w	r6, r4, #25
 8008fa2:	e7f5      	b.n	8008f90 <_printf_i+0x230>
 8008fa4:	0800935d 	.word	0x0800935d
 8008fa8:	0800936e 	.word	0x0800936e

08008fac <memchr>:
 8008fac:	4603      	mov	r3, r0
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	b2c9      	uxtb	r1, r1
 8008fb2:	4402      	add	r2, r0
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	d101      	bne.n	8008fbe <memchr+0x12>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e003      	b.n	8008fc6 <memchr+0x1a>
 8008fbe:	7804      	ldrb	r4, [r0, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	428c      	cmp	r4, r1
 8008fc4:	d1f6      	bne.n	8008fb4 <memchr+0x8>
 8008fc6:	bd10      	pop	{r4, pc}

08008fc8 <memcpy>:
 8008fc8:	440a      	add	r2, r1
 8008fca:	4291      	cmp	r1, r2
 8008fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fd0:	d100      	bne.n	8008fd4 <memcpy+0xc>
 8008fd2:	4770      	bx	lr
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fda:	4291      	cmp	r1, r2
 8008fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fe0:	d1f9      	bne.n	8008fd6 <memcpy+0xe>
 8008fe2:	bd10      	pop	{r4, pc}

08008fe4 <memmove>:
 8008fe4:	4288      	cmp	r0, r1
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	eb01 0402 	add.w	r4, r1, r2
 8008fec:	d902      	bls.n	8008ff4 <memmove+0x10>
 8008fee:	4284      	cmp	r4, r0
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	d807      	bhi.n	8009004 <memmove+0x20>
 8008ff4:	1e43      	subs	r3, r0, #1
 8008ff6:	42a1      	cmp	r1, r4
 8008ff8:	d008      	beq.n	800900c <memmove+0x28>
 8008ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009002:	e7f8      	b.n	8008ff6 <memmove+0x12>
 8009004:	4601      	mov	r1, r0
 8009006:	4402      	add	r2, r0
 8009008:	428a      	cmp	r2, r1
 800900a:	d100      	bne.n	800900e <memmove+0x2a>
 800900c:	bd10      	pop	{r4, pc}
 800900e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009016:	e7f7      	b.n	8009008 <memmove+0x24>

08009018 <_free_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4605      	mov	r5, r0
 800901c:	2900      	cmp	r1, #0
 800901e:	d040      	beq.n	80090a2 <_free_r+0x8a>
 8009020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009024:	1f0c      	subs	r4, r1, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	bfb8      	it	lt
 800902a:	18e4      	addlt	r4, r4, r3
 800902c:	f000 f910 	bl	8009250 <__malloc_lock>
 8009030:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <_free_r+0x8c>)
 8009032:	6813      	ldr	r3, [r2, #0]
 8009034:	b933      	cbnz	r3, 8009044 <_free_r+0x2c>
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	6014      	str	r4, [r2, #0]
 800903a:	4628      	mov	r0, r5
 800903c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009040:	f000 b90c 	b.w	800925c <__malloc_unlock>
 8009044:	42a3      	cmp	r3, r4
 8009046:	d908      	bls.n	800905a <_free_r+0x42>
 8009048:	6820      	ldr	r0, [r4, #0]
 800904a:	1821      	adds	r1, r4, r0
 800904c:	428b      	cmp	r3, r1
 800904e:	bf01      	itttt	eq
 8009050:	6819      	ldreq	r1, [r3, #0]
 8009052:	685b      	ldreq	r3, [r3, #4]
 8009054:	1809      	addeq	r1, r1, r0
 8009056:	6021      	streq	r1, [r4, #0]
 8009058:	e7ed      	b.n	8009036 <_free_r+0x1e>
 800905a:	461a      	mov	r2, r3
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	b10b      	cbz	r3, 8009064 <_free_r+0x4c>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d9fa      	bls.n	800905a <_free_r+0x42>
 8009064:	6811      	ldr	r1, [r2, #0]
 8009066:	1850      	adds	r0, r2, r1
 8009068:	42a0      	cmp	r0, r4
 800906a:	d10b      	bne.n	8009084 <_free_r+0x6c>
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	4401      	add	r1, r0
 8009070:	1850      	adds	r0, r2, r1
 8009072:	4283      	cmp	r3, r0
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	d1e0      	bne.n	800903a <_free_r+0x22>
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4401      	add	r1, r0
 800907e:	6011      	str	r1, [r2, #0]
 8009080:	6053      	str	r3, [r2, #4]
 8009082:	e7da      	b.n	800903a <_free_r+0x22>
 8009084:	d902      	bls.n	800908c <_free_r+0x74>
 8009086:	230c      	movs	r3, #12
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	e7d6      	b.n	800903a <_free_r+0x22>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	1821      	adds	r1, r4, r0
 8009090:	428b      	cmp	r3, r1
 8009092:	bf01      	itttt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	1809      	addeq	r1, r1, r0
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	6063      	str	r3, [r4, #4]
 800909e:	6054      	str	r4, [r2, #4]
 80090a0:	e7cb      	b.n	800903a <_free_r+0x22>
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20001c4c 	.word	0x20001c4c

080090a8 <sbrk_aligned>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4e0e      	ldr	r6, [pc, #56]	; (80090e4 <sbrk_aligned+0x3c>)
 80090ac:	460c      	mov	r4, r1
 80090ae:	6831      	ldr	r1, [r6, #0]
 80090b0:	4605      	mov	r5, r0
 80090b2:	b911      	cbnz	r1, 80090ba <sbrk_aligned+0x12>
 80090b4:	f000 f8bc 	bl	8009230 <_sbrk_r>
 80090b8:	6030      	str	r0, [r6, #0]
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f8b7 	bl	8009230 <_sbrk_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	d00a      	beq.n	80090dc <sbrk_aligned+0x34>
 80090c6:	1cc4      	adds	r4, r0, #3
 80090c8:	f024 0403 	bic.w	r4, r4, #3
 80090cc:	42a0      	cmp	r0, r4
 80090ce:	d007      	beq.n	80090e0 <sbrk_aligned+0x38>
 80090d0:	1a21      	subs	r1, r4, r0
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f8ac 	bl	8009230 <_sbrk_r>
 80090d8:	3001      	adds	r0, #1
 80090da:	d101      	bne.n	80090e0 <sbrk_aligned+0x38>
 80090dc:	f04f 34ff 	mov.w	r4, #4294967295
 80090e0:	4620      	mov	r0, r4
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	20001c50 	.word	0x20001c50

080090e8 <_malloc_r>:
 80090e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ec:	1ccd      	adds	r5, r1, #3
 80090ee:	f025 0503 	bic.w	r5, r5, #3
 80090f2:	3508      	adds	r5, #8
 80090f4:	2d0c      	cmp	r5, #12
 80090f6:	bf38      	it	cc
 80090f8:	250c      	movcc	r5, #12
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	4607      	mov	r7, r0
 80090fe:	db01      	blt.n	8009104 <_malloc_r+0x1c>
 8009100:	42a9      	cmp	r1, r5
 8009102:	d905      	bls.n	8009110 <_malloc_r+0x28>
 8009104:	230c      	movs	r3, #12
 8009106:	2600      	movs	r6, #0
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	4630      	mov	r0, r6
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	4e2e      	ldr	r6, [pc, #184]	; (80091cc <_malloc_r+0xe4>)
 8009112:	f000 f89d 	bl	8009250 <__malloc_lock>
 8009116:	6833      	ldr	r3, [r6, #0]
 8009118:	461c      	mov	r4, r3
 800911a:	bb34      	cbnz	r4, 800916a <_malloc_r+0x82>
 800911c:	4629      	mov	r1, r5
 800911e:	4638      	mov	r0, r7
 8009120:	f7ff ffc2 	bl	80090a8 <sbrk_aligned>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	4604      	mov	r4, r0
 8009128:	d14d      	bne.n	80091c6 <_malloc_r+0xde>
 800912a:	6834      	ldr	r4, [r6, #0]
 800912c:	4626      	mov	r6, r4
 800912e:	2e00      	cmp	r6, #0
 8009130:	d140      	bne.n	80091b4 <_malloc_r+0xcc>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	4631      	mov	r1, r6
 8009136:	4638      	mov	r0, r7
 8009138:	eb04 0803 	add.w	r8, r4, r3
 800913c:	f000 f878 	bl	8009230 <_sbrk_r>
 8009140:	4580      	cmp	r8, r0
 8009142:	d13a      	bne.n	80091ba <_malloc_r+0xd2>
 8009144:	6821      	ldr	r1, [r4, #0]
 8009146:	3503      	adds	r5, #3
 8009148:	1a6d      	subs	r5, r5, r1
 800914a:	f025 0503 	bic.w	r5, r5, #3
 800914e:	3508      	adds	r5, #8
 8009150:	2d0c      	cmp	r5, #12
 8009152:	bf38      	it	cc
 8009154:	250c      	movcc	r5, #12
 8009156:	4638      	mov	r0, r7
 8009158:	4629      	mov	r1, r5
 800915a:	f7ff ffa5 	bl	80090a8 <sbrk_aligned>
 800915e:	3001      	adds	r0, #1
 8009160:	d02b      	beq.n	80091ba <_malloc_r+0xd2>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	442b      	add	r3, r5
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	e00e      	b.n	8009188 <_malloc_r+0xa0>
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	1b52      	subs	r2, r2, r5
 800916e:	d41e      	bmi.n	80091ae <_malloc_r+0xc6>
 8009170:	2a0b      	cmp	r2, #11
 8009172:	d916      	bls.n	80091a2 <_malloc_r+0xba>
 8009174:	1961      	adds	r1, r4, r5
 8009176:	42a3      	cmp	r3, r4
 8009178:	6025      	str	r5, [r4, #0]
 800917a:	bf18      	it	ne
 800917c:	6059      	strne	r1, [r3, #4]
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	bf08      	it	eq
 8009182:	6031      	streq	r1, [r6, #0]
 8009184:	5162      	str	r2, [r4, r5]
 8009186:	604b      	str	r3, [r1, #4]
 8009188:	4638      	mov	r0, r7
 800918a:	f104 060b 	add.w	r6, r4, #11
 800918e:	f000 f865 	bl	800925c <__malloc_unlock>
 8009192:	f026 0607 	bic.w	r6, r6, #7
 8009196:	1d23      	adds	r3, r4, #4
 8009198:	1af2      	subs	r2, r6, r3
 800919a:	d0b6      	beq.n	800910a <_malloc_r+0x22>
 800919c:	1b9b      	subs	r3, r3, r6
 800919e:	50a3      	str	r3, [r4, r2]
 80091a0:	e7b3      	b.n	800910a <_malloc_r+0x22>
 80091a2:	6862      	ldr	r2, [r4, #4]
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	bf0c      	ite	eq
 80091a8:	6032      	streq	r2, [r6, #0]
 80091aa:	605a      	strne	r2, [r3, #4]
 80091ac:	e7ec      	b.n	8009188 <_malloc_r+0xa0>
 80091ae:	4623      	mov	r3, r4
 80091b0:	6864      	ldr	r4, [r4, #4]
 80091b2:	e7b2      	b.n	800911a <_malloc_r+0x32>
 80091b4:	4634      	mov	r4, r6
 80091b6:	6876      	ldr	r6, [r6, #4]
 80091b8:	e7b9      	b.n	800912e <_malloc_r+0x46>
 80091ba:	230c      	movs	r3, #12
 80091bc:	4638      	mov	r0, r7
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	f000 f84c 	bl	800925c <__malloc_unlock>
 80091c4:	e7a1      	b.n	800910a <_malloc_r+0x22>
 80091c6:	6025      	str	r5, [r4, #0]
 80091c8:	e7de      	b.n	8009188 <_malloc_r+0xa0>
 80091ca:	bf00      	nop
 80091cc:	20001c4c 	.word	0x20001c4c

080091d0 <_realloc_r>:
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	4680      	mov	r8, r0
 80091d6:	4614      	mov	r4, r2
 80091d8:	460e      	mov	r6, r1
 80091da:	b921      	cbnz	r1, 80091e6 <_realloc_r+0x16>
 80091dc:	4611      	mov	r1, r2
 80091de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091e2:	f7ff bf81 	b.w	80090e8 <_malloc_r>
 80091e6:	b92a      	cbnz	r2, 80091f4 <_realloc_r+0x24>
 80091e8:	f7ff ff16 	bl	8009018 <_free_r>
 80091ec:	4625      	mov	r5, r4
 80091ee:	4628      	mov	r0, r5
 80091f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f4:	f000 f838 	bl	8009268 <_malloc_usable_size_r>
 80091f8:	4284      	cmp	r4, r0
 80091fa:	4607      	mov	r7, r0
 80091fc:	d802      	bhi.n	8009204 <_realloc_r+0x34>
 80091fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009202:	d812      	bhi.n	800922a <_realloc_r+0x5a>
 8009204:	4621      	mov	r1, r4
 8009206:	4640      	mov	r0, r8
 8009208:	f7ff ff6e 	bl	80090e8 <_malloc_r>
 800920c:	4605      	mov	r5, r0
 800920e:	2800      	cmp	r0, #0
 8009210:	d0ed      	beq.n	80091ee <_realloc_r+0x1e>
 8009212:	42bc      	cmp	r4, r7
 8009214:	4622      	mov	r2, r4
 8009216:	4631      	mov	r1, r6
 8009218:	bf28      	it	cs
 800921a:	463a      	movcs	r2, r7
 800921c:	f7ff fed4 	bl	8008fc8 <memcpy>
 8009220:	4631      	mov	r1, r6
 8009222:	4640      	mov	r0, r8
 8009224:	f7ff fef8 	bl	8009018 <_free_r>
 8009228:	e7e1      	b.n	80091ee <_realloc_r+0x1e>
 800922a:	4635      	mov	r5, r6
 800922c:	e7df      	b.n	80091ee <_realloc_r+0x1e>
	...

08009230 <_sbrk_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	2300      	movs	r3, #0
 8009234:	4d05      	ldr	r5, [pc, #20]	; (800924c <_sbrk_r+0x1c>)
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	f7f7 fc22 	bl	8000a84 <_sbrk>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_sbrk_r+0x1a>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_sbrk_r+0x1a>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20001c54 	.word	0x20001c54

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__malloc_lock+0x8>)
 8009252:	f000 b811 	b.w	8009278 <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	20001c58 	.word	0x20001c58

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	; (8009264 <__malloc_unlock+0x8>)
 800925e:	f000 b80c 	b.w	800927a <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	20001c58 	.word	0x20001c58

08009268 <_malloc_usable_size_r>:
 8009268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800926c:	1f18      	subs	r0, r3, #4
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfbc      	itt	lt
 8009272:	580b      	ldrlt	r3, [r1, r0]
 8009274:	18c0      	addlt	r0, r0, r3
 8009276:	4770      	bx	lr

08009278 <__retarget_lock_acquire_recursive>:
 8009278:	4770      	bx	lr

0800927a <__retarget_lock_release_recursive>:
 800927a:	4770      	bx	lr

0800927c <_init>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr

08009288 <_fini>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	bf00      	nop
 800928c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800928e:	bc08      	pop	{r3}
 8009290:	469e      	mov	lr, r3
 8009292:	4770      	bx	lr
