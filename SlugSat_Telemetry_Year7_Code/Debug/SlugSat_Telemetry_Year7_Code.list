
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b590  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed8  0800bed8  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed8  0800bed8  0001bed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee0  0800bee0  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0800bee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001efc  200004a8  0800c390  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023a4  0800c390  000223a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122f6  00000000  00000000  000204d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032aa  00000000  00000000  000327c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  000369c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e12  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013270  00000000  00000000  000515c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8ba  00000000  00000000  00064832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f20ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d4  00000000  00000000  000f213c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200004a8 	.word	0x200004a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b6b4 	.word	0x0800b6b4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200004ac 	.word	0x200004ac
 8000178:	0800b6b4 	.word	0x0800b6b4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	891b      	ldrh	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 f8c1 	bl	800164c <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	75fb      	strb	r3, [r7, #23]

	//CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip

	uint8_t Address;
	uint8_t ConfigIndex = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	757b      	strb	r3, [r7, #21]
	// configure standard registers

	//uint8_t Register_Count = sizeof(Register_Setting);

	for (Address = 0x00; Address < 0x2F; Address++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	75bb      	strb	r3, [r7, #22]
 80004ea:	e02e      	b.n	800054a <CC1200_Configure+0x78>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004ec:	7d7b      	ldrb	r3, [r7, #21]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	7dba      	ldrb	r2, [r7, #22]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d122      	bne.n	8000542 <CC1200_Configure+0x70>
		{
			retval = CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 80004fc:	7d7b      	ldrb	r3, [r7, #21]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	4413      	add	r3, r2
 8000504:	785a      	ldrb	r2, [r3, #1]
 8000506:	7dbb      	ldrb	r3, [r7, #22]
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f85c 	bl	80005c8 <CC1200_Write_Single_Register>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Register(SPI_Info, Address);
 8000514:	7dbb      	ldrb	r3, [r7, #22]
 8000516:	4619      	mov	r1, r3
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f000 f891 	bl	8000640 <CC1200_Read_Single_Register>
 800051e:	4603      	mov	r3, r0
 8000520:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Register_Setting[ConfigIndex].Value)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7d7b      	ldrb	r3, [r7, #21]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	429a      	cmp	r2, r3
 8000534:	d001      	beq.n	800053a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	3301      	adds	r3, #1
 800053e:	757b      	strb	r3, [r7, #21]
 8000540:	e000      	b.n	8000544 <CC1200_Configure+0x72>
		}
		else
		{
			continue;
 8000542:	bf00      	nop
	for (Address = 0x00; Address < 0x2F; Address++)
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	3301      	adds	r3, #1
 8000548:	75bb      	strb	r3, [r7, #22]
 800054a:	7dbb      	ldrb	r3, [r7, #22]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d9cd      	bls.n	80004ec <CC1200_Configure+0x1a>
		}
	}

	ConfigIndex = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000554:	2300      	movs	r3, #0
 8000556:	75bb      	strb	r3, [r7, #22]
 8000558:	e02e      	b.n	80005b8 <CC1200_Configure+0xe6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 800055a:	7d7b      	ldrb	r3, [r7, #21]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	7dba      	ldrb	r2, [r7, #22]
 8000566:	429a      	cmp	r2, r3
 8000568:	d122      	bne.n	80005b0 <CC1200_Configure+0xde>
		{
			retval = CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 800056a:	7d7b      	ldrb	r3, [r7, #21]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	785a      	ldrb	r2, [r3, #1]
 8000574:	7dbb      	ldrb	r3, [r7, #22]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 f8a1 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 8000582:	7dbb      	ldrb	r3, [r7, #22]
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f000 f8ec 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800058c:	4603      	mov	r3, r0
 800058e:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Extended_Register_Setting[ConfigIndex].Value)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7d7b      	ldrb	r3, [r7, #21]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	440b      	add	r3, r1
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <CC1200_Configure+0xd6>
			{
				retval = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	3301      	adds	r3, #1
 80005ac:	757b      	strb	r3, [r7, #21]
 80005ae:	e000      	b.n	80005b2 <CC1200_Configure+0xe0>
		}
		else
		{
			continue;
 80005b0:	bf00      	nop
	for (Address = 0x00; Address <= 0xDA; Address++)
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	3301      	adds	r3, #1
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2bda      	cmp	r3, #218	; 0xda
 80005bc:	d9cd      	bls.n	800055a <CC1200_Configure+0x88>
		}
	}

	return(retval);
 80005be:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2b2e      	cmp	r3, #46	; 0x2e
 80005dc:	d829      	bhi.n	8000632 <CC1200_Write_Single_Register+0x6a>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6858      	ldr	r0, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	891b      	ldrh	r3, [r3, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 f82d 	bl	800164c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68d8      	ldr	r0, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f107 010e 	add.w	r1, r7, #14
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f003 fafd 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68d8      	ldr	r0, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	1cb9      	adds	r1, r7, #2
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	f003 faf3 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6858      	ldr	r0, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f001 f810 	bl	800164c <HAL_GPIO_WritePin>

		retval = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e001      	b.n	8000636 <CC1200_Write_Single_Register+0x6e>
	}
	else
	{
		retval = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b2e      	cmp	r3, #46	; 0x2e
 8000650:	d82f      	bhi.n	80006b2 <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f000 ffee 	bl	800164c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68d8      	ldr	r0, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f107 010e 	add.w	r1, r7, #14
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f003 fabe 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68d8      	ldr	r0, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f107 010d 	add.w	r1, r7, #13
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	f003 fab3 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	891b      	ldrh	r3, [r3, #8]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f000 ffd0 	bl	800164c <HAL_GPIO_WritePin>

		retval = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e001      	b.n	80006b6 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b39      	cmp	r3, #57	; 0x39
 80006d4:	d902      	bls.n	80006dc <CC1200_Write_Single_Extended_Register+0x1c>
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d908      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2ba2      	cmp	r3, #162	; 0xa2
 80006e0:	d902      	bls.n	80006e8 <CC1200_Write_Single_Extended_Register+0x28>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2bd1      	cmp	r3, #209	; 0xd1
 80006e6:	d902      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006e8:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006ea:	2bda      	cmp	r3, #218	; 0xda
 80006ec:	d902      	bls.n	80006f4 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e032      	b.n	800075a <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006f4:	232f      	movs	r3, #47	; 0x2f
 80006f6:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f000 ffa2 	bl	800164c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68d8      	ldr	r0, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f107 010e 	add.w	r1, r7, #14
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	f003 fa72 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68d8      	ldr	r0, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	1cf9      	adds	r1, r7, #3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	f003 fa68 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68d8      	ldr	r0, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	1cb9      	adds	r1, r7, #2
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f003 fa5e 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	891b      	ldrh	r3, [r3, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	f000 ff7b 	bl	800164c <HAL_GPIO_WritePin>

		retval = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b39      	cmp	r3, #57	; 0x39
 8000774:	d902      	bls.n	800077c <CC1200_Read_Single_Extended_Register+0x18>
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b63      	cmp	r3, #99	; 0x63
 800077a:	d908      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2ba2      	cmp	r3, #162	; 0xa2
 8000780:	d902      	bls.n	8000788 <CC1200_Read_Single_Extended_Register+0x24>
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2bd1      	cmp	r3, #209	; 0xd1
 8000786:	d902      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000788:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800078a:	2bda      	cmp	r3, #218	; 0xda
 800078c:	d902      	bls.n	8000794 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e035      	b.n	8000800 <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};
		//(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
		//(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
		//(SPI_Info -> MOSI_Data)[2] = MOSI_Data[2];

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6858      	ldr	r0, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891b      	ldrh	r3, [r3, #8]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f000 ff50 	bl	800164c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68d8      	ldr	r0, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f107 010e 	add.w	r1, r7, #14
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f003 fa20 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	1cf9      	adds	r1, r7, #3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	f003 fa16 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68d8      	ldr	r0, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	f107 010d 	add.w	r1, r7, #13
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	f003 fa0b 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f000 ff28 	bl	800164c <HAL_GPIO_WritePin>

		retval = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
	//char Message[100];
	//uint16_t Message_Length;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b2f      	cmp	r3, #47	; 0x2f
 800081a:	d922      	bls.n	8000862 <CC1200_Command_Strobe+0x58>
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b3d      	cmp	r3, #61	; 0x3d
 8000820:	d81f      	bhi.n	8000862 <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	73bb      	strb	r3, [r7, #14]
		//SPI_Info -> MOSI_Data = &Header_Byte;

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6858      	ldr	r0, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f000 ff0b 	bl	800164c <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f107 010e 	add.w	r1, r7, #14
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	f003 f9db 	bl	8003c02 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f000 fef8 	bl	800164c <HAL_GPIO_WritePin>

		retval = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
	{
 8000860:	e001      	b.n	8000866 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1200_Transmit>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Transmit(CC1200_t* SPI_Info, uint8_t* TX_Packet, uint8_t TX_Packet_Length)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t Header_Byte = 0x40 | 0x3F; // 0100 0000 | 0011 1111
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	75bb      	strb	r3, [r7, #22]
	uint8_t i; // counter
	//uint8_t Status; // status byte

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFTX); // flush TX FIFO (before loading data)
 8000882:	213b      	movs	r1, #59	; 0x3b
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffc0 	bl	800080a <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6858      	ldr	r0, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f000 fed9 	bl	800164c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68d8      	ldr	r0, [r3, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f107 0116 	add.w	r1, r7, #22
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	f003 f9a9 	bl	8003c02 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &TX_Packet_Length, SPI_Info -> MISO_Data, 1, 100);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68d8      	ldr	r0, [r3, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	f003 f99f 	bl	8003c02 <HAL_SPI_TransmitReceive>

	for(i = 0; i < TX_Packet_Length; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00e      	b.n	80008e8 <CC1200_Transmit+0x78>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &(TX_Packet[i]), SPI_Info -> MISO_Data, 1, 100);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	18d1      	adds	r1, r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	f003 f990 	bl	8003c02 <HAL_SPI_TransmitReceive>
	for(i = 0; i < TX_Packet_Length; i++)
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3301      	adds	r3, #1
 80008e6:	75fb      	strb	r3, [r7, #23]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7dfa      	ldrb	r2, [r7, #23]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3ec      	bcc.n	80008ca <CC1200_Transmit+0x5a>
	}

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6858      	ldr	r0, [r3, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f000 fea6 	bl	800164c <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_STX); // enable TX
 8000900:	2135      	movs	r1, #53	; 0x35
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff81 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <CC1200_Receive>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Receive(CC1200_t* SPI_Info, uint8_t* RX_Packet)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af02      	add	r7, sp, #8
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
	uint8_t Header_Byte = 0xC0 | 0x3F; // 1100 0000 | 0011 1111
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	737b      	strb	r3, [r7, #13]
	uint8_t Placeholder = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	733b      	strb	r3, [r7, #12]
	uint8_t Packet_Length;
	uint8_t i; // counter

	//memset(RX_Packet, 0, sizeof(RX_Packet)); // clear contents of RX Packet

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6858      	ldr	r0, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	891b      	ldrh	r3, [r3, #8]
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f000 fe8c 	bl	800164c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68d8      	ldr	r0, [r3, #12]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f107 010d 	add.w	r1, r7, #13
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	f003 f95c 	bl	8003c02 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68d8      	ldr	r0, [r3, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	f107 010c 	add.w	r1, r7, #12
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	f003 f951 	bl	8003c02 <HAL_SPI_TransmitReceive>
	Packet_Length = (SPI_Info -> MISO_Data) [0];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < Packet_Length; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e014      	b.n	8000998 <CC1200_Receive+0x86>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68d8      	ldr	r0, [r3, #12]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f107 010c 	add.w	r1, r7, #12
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	f003 f93f 	bl	8003c02 <HAL_SPI_TransmitReceive>
		RX_Packet[i] = (SPI_Info -> MISO_Data) [0];
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	440b      	add	r3, r1
 800098e:	7812      	ldrb	r2, [r2, #0]
 8000990:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Packet_Length; i++)
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3301      	adds	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	7bfa      	ldrb	r2, [r7, #15]
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	429a      	cmp	r2, r3
 800099e:	d3e6      	bcc.n	800096e <CC1200_Receive+0x5c>
	}

	RX_Packet[Packet_Length] = '\0'; // null termination
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6858      	ldr	r0, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	891b      	ldrh	r3, [r3, #8]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	f000 fe49 	bl	800164c <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (after processing data)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	213a      	movs	r1, #58	; 0x3a
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff23 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	80fb      	strh	r3, [r7, #6]
//	sprintf(str1, "%s\r\n", (char*) RX_Packet);
//	strcat(Message, str1);
//	Message_Length = strlen(Message);
//
//	CDC_Transmit_FS((uint8_t*) Message, Message_Length);
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f000 fb24 	bl	8001032 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f809 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f000 f8b3 	bl	8000b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009f2:	f000 f887 	bl	8000b04 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80009f6:	f000 f84f 	bl	8000a98 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009fa:	f007 fd37 	bl	800846c <MX_USB_DEVICE_Init>
	//uint8_t flag = 1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009fe:	e7fe      	b.n	80009fe <main+0x1c>

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b092      	sub	sp, #72	; 0x48
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2234      	movs	r2, #52	; 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f009 fb66 	bl	800a0e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <SystemClock_Config+0x94>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <SystemClock_Config+0x94>)
 8000a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a30:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a36:	2305      	movs	r3, #5
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000a4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 fa55 	bl	8002f04 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000a60:	f000 f900 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fd71 	bl	8003564 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f8ec 	bl	8000c64 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3748      	adds	r7, #72	; 0x48
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_SPI1_Init+0x64>)
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <MX_SPI1_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI1_Init+0x64>)
 8000acc:	2210      	movs	r2, #16
 8000ace:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aea:	f003 f801 	bl	8003af0 <HAL_SPI_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af4:	f000 f8b6 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200004c4 	.word	0x200004c4
 8000b00:	40013000 	.word	0x40013000

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART2_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f003 face 	bl	80040dc <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f88d 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000051c 	.word	0x2000051c
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000b8c:	f043 0320 	orr.w	r3, r3, #32
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 0320 	and.w	r3, r3, #32
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	61d3      	str	r3, [r2, #28]
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <MX_GPIO_Init+0xfc>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd4:	4820      	ldr	r0, [pc, #128]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000bd6:	f000 fd39 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	481f      	ldr	r0, [pc, #124]	; (8000c5c <MX_GPIO_Init+0x104>)
 8000be0:	f000 fd34 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 8000be4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <MX_GPIO_Init+0x108>)
 8000bfc:	f000 fb96 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	480f      	ldr	r0, [pc, #60]	; (8000c58 <MX_GPIO_Init+0x100>)
 8000c1a:	f000 fb87 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c1e:	2340      	movs	r3, #64	; 0x40
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_GPIO_Init+0x104>)
 8000c36:	f000 fb79 	bl	800132c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2028      	movs	r0, #40	; 0x28
 8000c40:	f000 fb3d 	bl	80012be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c44:	2028      	movs	r0, #40	; 0x28
 8000c46:	f000 fb56 	bl	80012f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40020800 	.word	0x40020800

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_MspInit+0x5c>)
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <HAL_MspInit+0x5c>)
 8000c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c80:	6253      	str	r3, [r2, #36]	; 0x24
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_MspInit+0x5c>)
 8000c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x5c>)
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x5c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6213      	str	r3, [r2, #32]
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x5c>)
 8000c9c:	6a1b      	ldr	r3, [r3, #32]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x5c>)
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x5c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6253      	str	r3, [r2, #36]	; 0x24
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x5c>)
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f000 faf2 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_SPI_MspInit+0x7c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d127      	bne.n	8000d42 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfc:	6213      	str	r3, [r2, #32]
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d22:	23e0      	movs	r3, #224	; 0xe0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d32:	2305      	movs	r3, #5
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_SPI_MspInit+0x84>)
 8000d3e:	f000 faf5 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40013000 	.word	0x40013000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_UART_MspInit+0x7c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d127      	bne.n	8000dca <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0x80>)
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_UART_MspInit+0x80>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6253      	str	r3, [r2, #36]	; 0x24
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0x80>)
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0x80>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0x80>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_MspInit+0x80>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000daa:	230c      	movs	r3, #12
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_UART_MspInit+0x84>)
 8000dc6:	f000 fab1 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e26:	f000 f957 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <USB_LP_IRQHandler+0x10>)
 8000e36:	f000 fd3d 	bl	80018b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20001e88 	.word	0x20001e88

08000e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000e48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e4c:	f000 fc16 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e54:	f000 fc12 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return 1;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <_kill>:

int _kill(int pid, int sig)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e74:	f009 f90a 	bl	800a08c <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2216      	movs	r2, #22
 8000e7c:	601a      	str	r2, [r3, #0]
  return -1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_exit>:

void _exit (int status)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e92:	f04f 31ff 	mov.w	r1, #4294967295
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffe7 	bl	8000e6a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e9c:	e7fe      	b.n	8000e9c <_exit+0x12>

08000e9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e00a      	b.n	8000ec6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb0:	f3af 8000 	nop.w
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	60ba      	str	r2, [r7, #8]
 8000ebc:	b2ca      	uxtb	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbf0      	blt.n	8000eb0 <_read+0x12>
  }

  return len;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e009      	b.n	8000efe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	60ba      	str	r2, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbf1      	blt.n	8000eea <_write+0x12>
  }
  return len;
 8000f06:	687b      	ldr	r3, [r7, #4]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_close>:

int _close(int file)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f36:	605a      	str	r2, [r3, #4]
  return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <_isatty>:

int _isatty(int file)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f009 f874 	bl	800a08c <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20014000 	.word	0x20014000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	200005f4 	.word	0x200005f4
 8000fd8:	200023a8 	.word	0x200023a8

08000fdc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	; (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800100e:	f7ff ffe5 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f009 f841 	bl	800a098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001016:	f7ff fce4 	bl	80009e2 <main>
  bx lr
 800101a:	4770      	bx	lr
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8001024:	0800bee8 	.word	0x0800bee8
  ldr r2, =_sbss
 8001028:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 800102c:	200023a4 	.word	0x200023a4

08001030 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_IRQHandler>

08001032 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f933 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f80e 	bl	8001064 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	71fb      	strb	r3, [r7, #7]
 8001052:	e001      	b.n	8001058 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001054:	f7ff fe0c 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_InitTick+0x68>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d022      	beq.n	80010be <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_InitTick+0x6c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_InitTick+0x68>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001084:	fbb1 f3f3 	udiv	r3, r1, r3
 8001088:	fbb2 f3f3 	udiv	r3, r2, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f940 	bl	8001312 <HAL_SYSTICK_Config>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10f      	bne.n	80010b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d809      	bhi.n	80010b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109e:	2200      	movs	r2, #0
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	f000 f90a 	bl	80012be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_InitTick+0x70>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e007      	b.n	80010c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e004      	b.n	80010c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e001      	b.n	80010c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200002d0 	.word	0x200002d0
 80010d0:	200002c8 	.word	0x200002c8
 80010d4:	200002cc 	.word	0x200002cc

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x1c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x20>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <HAL_IncTick+0x1c>)
 80010e8:	6013      	str	r3, [r2, #0]
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200005f8 	.word	0x200005f8
 80010f8:	200002d0 	.word	0x200002d0

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b02      	ldr	r3, [pc, #8]	; (800110c <HAL_GetTick+0x10>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	200005f8 	.word	0x200005f8

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4906      	ldr	r1, [pc, #24]	; (80011a8 <__NVIC_EnableIRQ+0x34>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff90 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff2d 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff42 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff90 	bl	8001200 <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5f 	bl	80011ac <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff35 	bl	8001174 <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa2 	bl	8001264 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001342:	e160      	b.n	8001606 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8152 	beq.w	8001600 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d005      	beq.n	8001374 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001370:	2b02      	cmp	r3, #2
 8001372:	d130      	bne.n	80013d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80013aa:	2201      	movs	r2, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 0201 	and.w	r2, r3, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d017      	beq.n	8001412 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d123      	bne.n	8001466 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	6939      	ldr	r1, [r7, #16]
 8001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0203 	and.w	r2, r3, #3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80ac 	beq.w	8001600 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_GPIO_Init+0x2f8>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_GPIO_Init+0x2f8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_GPIO_Init+0x2f8>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80014c0:	4a59      	ldr	r2, [pc, #356]	; (8001628 <HAL_GPIO_Init+0x2fc>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a51      	ldr	r2, [pc, #324]	; (800162c <HAL_GPIO_Init+0x300>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d025      	beq.n	8001538 <HAL_GPIO_Init+0x20c>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_GPIO_Init+0x304>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d01f      	beq.n	8001534 <HAL_GPIO_Init+0x208>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x308>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d019      	beq.n	8001530 <HAL_GPIO_Init+0x204>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x30c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d013      	beq.n	800152c <HAL_GPIO_Init+0x200>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x310>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d00d      	beq.n	8001528 <HAL_GPIO_Init+0x1fc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x314>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d007      	beq.n	8001524 <HAL_GPIO_Init+0x1f8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x318>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_GPIO_Init+0x1f4>
 800151c:	2306      	movs	r3, #6
 800151e:	e00c      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001520:	2307      	movs	r3, #7
 8001522:	e00a      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001524:	2305      	movs	r3, #5
 8001526:	e008      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001528:	2304      	movs	r3, #4
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x20e>
 800152c:	2303      	movs	r3, #3
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001538:	2300      	movs	r3, #0
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800154a:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x2fc>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_GPIO_Init+0x31c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157c:	4a32      	ldr	r2, [pc, #200]	; (8001648 <HAL_GPIO_Init+0x31c>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_GPIO_Init+0x31c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015a6:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f ae97 	bne.w	8001344 <HAL_GPIO_Init+0x18>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40010000 	.word	0x40010000
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40021400 	.word	0x40021400
 8001644:	40021800 	.word	0x40021800
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f997 	bl	80009ce <HAL_GPIO_EXTI_Callback>
  }
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af06      	add	r7, sp, #24
 80016b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0d0      	b.n	8001860 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f008 fa3a 	bl	8009b4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2203      	movs	r2, #3
 80016dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fe41 	bl	800436c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e04c      	b.n	800178a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3301      	adds	r3, #1
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	b298      	uxth	r0, r3
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	3336      	adds	r3, #54	; 0x36
 800172e:	4602      	mov	r2, r0
 8001730:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3303      	adds	r3, #3
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3338      	adds	r3, #56	; 0x38
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	333c      	adds	r3, #60	; 0x3c
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3340      	adds	r3, #64	; 0x40
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	3301      	adds	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	d3ad      	bcc.n	80016f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e044      	b.n	8001824 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	3301      	adds	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	d3b5      	bcc.n	800179a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	687e      	ldr	r6, [r7, #4]
 8001836:	466d      	mov	r5, sp
 8001838:	f106 0410 	add.w	r4, r6, #16
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	602b      	str	r3, [r5, #0]
 8001844:	1d33      	adds	r3, r6, #4
 8001846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f002 fda9 	bl	80043a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001868 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_PCD_Start+0x16>
 800187a:	2302      	movs	r3, #2
 800187c:	e016      	b.n	80018ac <HAL_PCD_Start+0x44>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fd58 	bl	8004340 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001890:	2101      	movs	r1, #1
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f008 f93c 	bl	8009b10 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f005 fa3d 	bl	8006d1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 fa35 	bl	8006d30 <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d0:	d102      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 faf5 	bl	8001ec2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fa27 	bl	8006d30 <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ec:	d112      	bne.n	8001914 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001900:	b292      	uxth	r2, r2
 8001902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f008 f99b 	bl	8009c42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8c7 	bl	8001aa2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fa09 	bl	8006d30 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001928:	d10b      	bne.n	8001942 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001932:	b29a      	uxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800193c:	b292      	uxth	r2, r2
 800193e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f005 f9f2 	bl	8006d30 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001956:	d10b      	bne.n	8001970 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001960:	b29a      	uxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800196a:	b292      	uxth	r2, r2
 800196c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f005 f9db 	bl	8006d30 <USB_ReadInterrupts>
 800197a:	4603      	mov	r3, r0
 800197c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001984:	d126      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800198e:	b29a      	uxth	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0204 	bic.w	r2, r2, #4
 8001998:	b292      	uxth	r2, r2
 800199a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0208 	bic.w	r2, r2, #8
 80019b0:	b292      	uxth	r2, r2
 80019b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f008 f97c 	bl	8009cb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ce:	b292      	uxth	r2, r2
 80019d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 f9a9 	bl	8006d30 <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e8:	d126      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0208 	orr.w	r2, r2, #8
 80019fc:	b292      	uxth	r2, r2
 80019fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0204 	orr.w	r2, r2, #4
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f008 f924 	bl	8009c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f005 f977 	bl	8006d30 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a4c:	d10e      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a60:	b292      	uxth	r2, r2
 8001a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f008 f8dd 	bl	8009c26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f005 f95d 	bl	8006d30 <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a80:	d10b      	bne.n	8001a9a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_SetAddress+0x1a>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e013      	b.n	8001ae4 <HAL_PCD_SetAddress+0x42>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 f90e 	bl	8006cf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	70fb      	strb	r3, [r7, #3]
 8001afe:	460b      	mov	r3, r1
 8001b00:	803b      	strh	r3, [r7, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da0e      	bge.n	8001b30 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	705a      	strb	r2, [r3, #1]
 8001b2e:	e00e      	b.n	8001b4e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 0207 	and.w	r2, r3, #7
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b5a:	883a      	ldrh	r2, [r7, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	78ba      	ldrb	r2, [r7, #2]
 8001b64:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d102      	bne.n	8001b84 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_PCD_EP_Open+0xa6>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e00e      	b.n	8001bb0 <HAL_PCD_EP_Open+0xc4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68f9      	ldr	r1, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fc1d 	bl	80043e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bae:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da0e      	bge.n	8001bea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	705a      	strb	r2, [r3, #1]
 8001be8:	e00e      	b.n	8001c08 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0207 	and.w	r2, r3, #7
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_PCD_EP_Close+0x6a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e00e      	b.n	8001c40 <HAL_PCD_EP_Close+0x88>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 ff3f 	bl	8004ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	f003 0207 	and.w	r2, r3, #7
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6979      	ldr	r1, [r7, #20]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 f8f1 	bl	8004e8c <USB_EPStartXfer>
 8001caa:	e005      	b.n	8001cb8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6979      	ldr	r1, [r7, #20]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 f8ea 	bl	8004e8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 0207 	and.w	r2, r3, #7
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ce4:	681b      	ldr	r3, [r3, #0]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d48:	7afb      	ldrb	r3, [r7, #11]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6979      	ldr	r1, [r7, #20]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 f897 	bl	8004e8c <USB_EPStartXfer>
 8001d5e:	e005      	b.n	8001d6c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6979      	ldr	r1, [r7, #20]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 f890 	bl	8004e8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 0207 	and.w	r2, r3, #7
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d901      	bls.n	8001d94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e03e      	b.n	8001e12 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da0e      	bge.n	8001dba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	705a      	strb	r2, [r3, #1]
 8001db8:	e00c      	b.n	8001dd4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_EP_SetStall+0x7e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e00e      	b.n	8001e12 <HAL_PCD_EP_SetStall+0x9c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fe7a 	bl	8006afc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d901      	bls.n	8001e38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e040      	b.n	8001eba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0e      	bge.n	8001e5e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	705a      	strb	r2, [r3, #1]
 8001e5c:	e00e      	b.n	8001e7c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0207 	and.w	r2, r3, #7
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_PCD_EP_ClrStall+0x82>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e00e      	b.n	8001eba <HAL_PCD_EP_ClrStall+0xa0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 fe76 	bl	8006b9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08e      	sub	sp, #56	; 0x38
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eca:	e2ec      	b.n	80024a6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ed6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ee2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 8161 	bne.w	80021ae <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d152      	bne.n	8001f9c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	81fb      	strh	r3, [r7, #14]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3328      	adds	r3, #40	; 0x28
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	3302      	adds	r3, #2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	441a      	add	r2, r3
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f007 fe48 	bl	8009bf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 829b 	beq.w	80024a6 <PCD_EP_ISR_Handler+0x5e4>
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 8296 	bne.w	80024a6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f9a:	e284      	b.n	80024a6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d034      	beq.n	8002020 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3306      	adds	r3, #6
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f004 feef 	bl	8006dd8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b29a      	uxth	r2, r3
 8002002:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002006:	4013      	ands	r3, r2
 8002008:	823b      	strh	r3, [r7, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	8a3a      	ldrh	r2, [r7, #16]
 8002010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002014:	b292      	uxth	r2, r2
 8002016:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f007 fdbd 	bl	8009b98 <HAL_PCD_SetupStageCallback>
 800201e:	e242      	b.n	80024a6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002020:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002024:	2b00      	cmp	r3, #0
 8002026:	f280 823e 	bge.w	80024a6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29a      	uxth	r2, r3
 8002032:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002036:	4013      	ands	r3, r2
 8002038:	83bb      	strh	r3, [r7, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	8bba      	ldrh	r2, [r7, #28]
 8002040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002044:	b292      	uxth	r2, r2
 8002046:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	3306      	adds	r3, #6
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d019      	beq.n	80020b0 <PCD_EP_ISR_Handler+0x1ee>
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	6959      	ldr	r1, [r3, #20]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002094:	b29b      	uxth	r3, r3
 8002096:	f004 fe9f 	bl	8006dd8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	441a      	add	r2, r3
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f007 fd86 	bl	8009bbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f040 81f2 	bne.w	80024a6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	4413      	add	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d112      	bne.n	8002110 <PCD_EP_ISR_Handler+0x24e>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002108:	b29a      	uxth	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	e02f      	b.n	8002170 <PCD_EP_ISR_Handler+0x2ae>
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b3e      	cmp	r3, #62	; 0x3e
 8002116:	d813      	bhi.n	8002140 <PCD_EP_ISR_Handler+0x27e>
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <PCD_EP_ISR_Handler+0x270>
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	3301      	adds	r3, #1
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	b29b      	uxth	r3, r3
 8002136:	029b      	lsls	r3, r3, #10
 8002138:	b29a      	uxth	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	801a      	strh	r2, [r3, #0]
 800213e:	e017      	b.n	8002170 <PCD_EP_ISR_Handler+0x2ae>
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <PCD_EP_ISR_Handler+0x298>
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	3b01      	subs	r3, #1
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215c:	b29b      	uxth	r3, r3
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	b29b      	uxth	r3, r3
 8002162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800216a:	b29a      	uxth	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002180:	827b      	strh	r3, [r7, #18]
 8002182:	8a7b      	ldrh	r3, [r7, #18]
 8002184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002188:	827b      	strh	r3, [r7, #18]
 800218a:	8a7b      	ldrh	r3, [r7, #18]
 800218c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002190:	827b      	strh	r3, [r7, #18]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	8a7b      	ldrh	r3, [r7, #18]
 8002198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800219c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	8013      	strh	r3, [r2, #0]
 80021ac:	e17b      	b.n	80024a6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f280 80ea 	bge.w	800239e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021e0:	4013      	ands	r3, r2
 80021e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021f8:	b292      	uxth	r2, r2
 80021fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021fc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	7b1b      	ldrb	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d122      	bne.n	8002260 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	3306      	adds	r3, #6
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002242:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	6959      	ldr	r1, [r3, #20]
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	88da      	ldrh	r2, [r3, #6]
 8002258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800225a:	f004 fdbd 	bl	8006dd8 <USB_ReadPMA>
 800225e:	e07c      	b.n	800235a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d108      	bne.n	800227a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002268:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800226a:	461a      	mov	r2, r3
 800226c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f927 	bl	80024c2 <HAL_PCD_EP_DB_Receive>
 8002274:	4603      	mov	r3, r0
 8002276:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002278:	e06f      	b.n	800235a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002294:	847b      	strh	r3, [r7, #34]	; 0x22
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	441a      	add	r2, r3
 80022a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	3302      	adds	r3, #2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02a      	beq.n	800235a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	6959      	ldr	r1, [r3, #20]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	891a      	ldrh	r2, [r3, #8]
 8002310:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002312:	f004 fd61 	bl	8006dd8 <USB_ReadPMA>
 8002316:	e020      	b.n	800235a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002320:	b29b      	uxth	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	3306      	adds	r3, #6
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002340:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002342:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	6959      	ldr	r1, [r3, #20]
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	895a      	ldrh	r2, [r3, #10]
 8002354:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002356:	f004 fd3f 	bl	8006dd8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002360:	441a      	add	r2, r3
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800236c:	441a      	add	r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <PCD_EP_ISR_Handler+0x4c2>
 800237a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d206      	bcs.n	8002392 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f007 fc16 	bl	8009bbc <HAL_PCD_DataOutStageCallback>
 8002390:	e005      	b.n	800239e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002398:	4618      	mov	r0, r3
 800239a:	f002 fd77 	bl	8004e8c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800239e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d07e      	beq.n	80024a6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80023a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	843b      	strh	r3, [r7, #32]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	8c3b      	ldrh	r3, [r7, #32]
 80023e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	78db      	ldrb	r3, [r3, #3]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d00c      	beq.n	8002416 <PCD_EP_ISR_Handler+0x554>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	78db      	ldrb	r3, [r3, #3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002408:	2b02      	cmp	r3, #2
 800240a:	d146      	bne.n	800249a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800240c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d141      	bne.n	800249a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	3302      	adds	r3, #2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	429a      	cmp	r2, r3
 8002448:	d906      	bls.n	8002458 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	8bfb      	ldrh	r3, [r7, #30]
 8002450:	1ad2      	subs	r2, r2, r3
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	e002      	b.n	800245e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f007 fbc0 	bl	8009bf2 <HAL_PCD_DataInStageCallback>
 8002472:	e018      	b.n	80024a6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	8bfb      	ldrh	r3, [r7, #30]
 800247a:	441a      	add	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	8bfb      	ldrh	r3, [r7, #30]
 8002486:	441a      	add	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fcfa 	bl	8004e8c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002498:	e005      	b.n	80024a6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800249a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800249c:	461a      	mov	r2, r3
 800249e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f91b 	bl	80026dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f6ff ad0a 	blt.w	8001ecc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3738      	adds	r7, #56	; 0x38
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b088      	sub	sp, #32
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d07e      	beq.n	80025d8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	3302      	adds	r3, #2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002502:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	8b7b      	ldrh	r3, [r7, #26]
 800250a:	429a      	cmp	r2, r3
 800250c:	d306      	bcc.n	800251c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	8b7b      	ldrh	r3, [r7, #26]
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	619a      	str	r2, [r3, #24]
 800251a:	e002      	b.n	8002522 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d123      	bne.n	8002572 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002544:	833b      	strh	r3, [r7, #24]
 8002546:	8b3b      	ldrh	r3, [r7, #24]
 8002548:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800254c:	833b      	strh	r3, [r7, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8b3b      	ldrh	r3, [r7, #24]
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01f      	beq.n	80025bc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	82fb      	strh	r3, [r7, #22]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	441a      	add	r2, r3
 80025a6:	8afb      	ldrh	r3, [r7, #22]
 80025a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025bc:	8b7b      	ldrh	r3, [r7, #26]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8087 	beq.w	80026d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	6959      	ldr	r1, [r3, #20]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	891a      	ldrh	r2, [r3, #8]
 80025d0:	8b7b      	ldrh	r3, [r7, #26]
 80025d2:	f004 fc01 	bl	8006dd8 <USB_ReadPMA>
 80025d6:	e07c      	b.n	80026d2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	3306      	adds	r3, #6
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002600:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	8b7b      	ldrh	r3, [r7, #26]
 8002608:	429a      	cmp	r2, r3
 800260a:	d306      	bcc.n	800261a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	8b7b      	ldrh	r3, [r7, #26]
 8002612:	1ad2      	subs	r2, r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	619a      	str	r2, [r3, #24]
 8002618:	e002      	b.n	8002620 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d123      	bne.n	8002670 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	83fb      	strh	r3, [r7, #30]
 8002644:	8bfb      	ldrh	r3, [r7, #30]
 8002646:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800264a:	83fb      	strh	r3, [r7, #30]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	8bfb      	ldrh	r3, [r7, #30]
 800265c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266c:	b29b      	uxth	r3, r3
 800266e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11f      	bne.n	80026ba <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	83bb      	strh	r3, [r7, #28]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	441a      	add	r2, r3
 80026a4:	8bbb      	ldrh	r3, [r7, #28]
 80026a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026ba:	8b7b      	ldrh	r3, [r7, #26]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	895a      	ldrh	r2, [r3, #10]
 80026cc:	8b7b      	ldrh	r3, [r7, #26]
 80026ce:	f004 fb83 	bl	8006dd8 <USB_ReadPMA>
    }
  }

  return count;
 80026d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b0a2      	sub	sp, #136	; 0x88
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 81c7 	beq.w	8002a84 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	3302      	adds	r3, #2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800272a:	429a      	cmp	r2, r3
 800272c:	d907      	bls.n	800273e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	619a      	str	r2, [r3, #24]
 800273c:	e002      	b.n	8002744 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 80b9 	bne.w	80028c0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	785b      	ldrb	r3, [r3, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d126      	bne.n	80027a4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	4413      	add	r3, r2
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	011a      	lsls	r2, r3, #4
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	4413      	add	r3, r2
 8002778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002788:	b29a      	uxth	r2, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279c:	b29a      	uxth	r2, r3
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	e01a      	b.n	80027da <HAL_PCD_EP_DB_Transmit+0xfe>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d116      	bne.n	80027da <HAL_PCD_EP_DB_Transmit+0xfe>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	4413      	add	r3, r2
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	011a      	lsls	r2, r3, #4
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	4413      	add	r3, r2
 80027ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	2200      	movs	r2, #0
 80027d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d126      	bne.n	8002836 <HAL_PCD_EP_DB_Transmit+0x15a>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	011a      	lsls	r2, r3, #4
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800281a:	b29a      	uxth	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	801a      	strh	r2, [r3, #0]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282e:	b29a      	uxth	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e017      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d113      	bne.n	8002866 <HAL_PCD_EP_DB_Transmit+0x18a>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	4413      	add	r3, r2
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	011a      	lsls	r2, r3, #4
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	4413      	add	r3, r2
 800285a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f007 f9c0 	bl	8009bf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 82d4 	beq.w	8002e26 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002898:	827b      	strh	r3, [r7, #18]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	8a7b      	ldrh	r3, [r7, #18]
 80028aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	8013      	strh	r3, [r2, #0]
 80028be:	e2b2      	b.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d021      	beq.n	800290e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 8286 	bne.w	8002e26 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002922:	441a      	add	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002930:	441a      	add	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	429a      	cmp	r2, r3
 8002940:	d309      	bcc.n	8002956 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800294e:	1ad2      	subs	r2, r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	621a      	str	r2, [r3, #32]
 8002954:	e015      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800295e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800296c:	e009      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d155      	bne.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x35a>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	4413      	add	r3, r2
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	011a      	lsls	r2, r3, #4
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
 80029b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d112      	bne.n	80029de <HAL_PCD_EP_DB_Transmit+0x302>
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	e047      	b.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x392>
 80029de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e0:	2b3e      	cmp	r3, #62	; 0x3e
 80029e2:	d811      	bhi.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x32c>
 80029e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_PCD_EP_DB_Transmit+0x31e>
 80029f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f6:	3301      	adds	r3, #1
 80029f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80029fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	029b      	lsls	r3, r3, #10
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	e032      	b.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x392>
 8002a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x342>
 8002a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	029b      	lsls	r3, r3, #10
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a32:	801a      	strh	r2, [r3, #0]
 8002a34:	e01b      	b.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x392>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d117      	bne.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x392>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a52:	4413      	add	r3, r2
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	011a      	lsls	r2, r3, #4
 8002a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5e:	4413      	add	r3, r2
 8002a60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6959      	ldr	r1, [r3, #20]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	891a      	ldrh	r2, [r3, #8]
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f004 f966 	bl	8006d4e <USB_WritePMA>
 8002a82:	e1d0      	b.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	3306      	adds	r3, #6
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d307      	bcc.n	8002acc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac4:	1ad2      	subs	r2, r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	619a      	str	r2, [r3, #24]
 8002aca:	e002      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80c4 	bne.w	8002c64 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d126      	bne.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x456>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af8:	4413      	add	r3, r2
 8002afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	011a      	lsls	r2, r3, #4
 8002b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b04:	4413      	add	r3, r2
 8002b06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	e01a      	b.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d116      	bne.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4e:	4413      	add	r3, r2
 8002b50:	677b      	str	r3, [r7, #116]	; 0x74
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	011a      	lsls	r2, r3, #4
 8002b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b60:	673b      	str	r3, [r7, #112]	; 0x70
 8002b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b64:	2200      	movs	r2, #0
 8002b66:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d12f      	bne.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b8e:	4413      	add	r3, r2
 8002b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	011a      	lsls	r2, r3, #4
 8002b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	e017      	b.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d113      	bne.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bec:	4413      	add	r3, r2
 8002bee:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	011a      	lsls	r2, r3, #4
 8002bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c02:	2200      	movs	r2, #0
 8002c04:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f006 fff0 	bl	8009bf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 8104 	bne.w	8002e26 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8013      	strh	r3, [r2, #0]
 8002c62:	e0e0      	b.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d121      	bne.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c88:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 80b4 	bne.w	8002e26 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d309      	bcc.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf2:	1ad2      	subs	r2, r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	621a      	str	r2, [r3, #32]
 8002cf8:	e015      	b.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d06:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d10:	e009      	b.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d155      	bne.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x704>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d48:	4413      	add	r3, r2
 8002d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	011a      	lsls	r2, r3, #4
 8002d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d54:	4413      	add	r3, r2
 8002d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d112      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	e044      	b.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8c:	d811      	bhi.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	657b      	str	r3, [r7, #84]	; 0x54
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	3301      	adds	r3, #1
 8002da2:	657b      	str	r3, [r7, #84]	; 0x54
 8002da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	e02f      	b.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x736>
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	657b      	str	r3, [r7, #84]	; 0x54
 8002db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	029b      	lsls	r3, r3, #10
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e018      	b.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x736>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d114      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x736>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002df6:	4413      	add	r3, r2
 8002df8:	667b      	str	r3, [r7, #100]	; 0x64
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	011a      	lsls	r2, r3, #4
 8002e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e02:	4413      	add	r3, r2
 8002e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e10:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6959      	ldr	r1, [r3, #20]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	895a      	ldrh	r2, [r3, #10]
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f003 ff94 	bl	8006d4e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e40:	823b      	strh	r3, [r7, #16]
 8002e42:	8a3b      	ldrh	r3, [r7, #16]
 8002e44:	f083 0310 	eor.w	r3, r3, #16
 8002e48:	823b      	strh	r3, [r7, #16]
 8002e4a:	8a3b      	ldrh	r3, [r7, #16]
 8002e4c:	f083 0320 	eor.w	r3, r3, #32
 8002e50:	823b      	strh	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	8a3b      	ldrh	r3, [r7, #16]
 8002e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3788      	adds	r7, #136	; 0x88
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e009      	b.n	8002eca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eb6:	897a      	ldrh	r2, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	80da      	strh	r2, [r3, #6]
 8002ede:	e00b      	b.n	8002ef8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e31d      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f16:	4b94      	ldr	r3, [pc, #592]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f20:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d07b      	beq.n	800302e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d006      	beq.n	8002f4a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d10f      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b87      	ldr	r3, [pc, #540]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06a      	beq.n	800302c <HAL_RCC_OscConfig+0x128>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d166      	bne.n	800302c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e2f7      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x74>
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7e      	ldr	r2, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e02d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10c      	bne.n	8002f9a <HAL_RCC_OscConfig+0x96>
 8002f80:	4b79      	ldr	r3, [pc, #484]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a78      	ldr	r2, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a75      	ldr	r2, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xb8>
 8002fa2:	4b71      	ldr	r3, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a70      	ldr	r2, [pc, #448]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6e      	ldr	r3, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6d      	ldr	r2, [pc, #436]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd0>
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a69      	ldr	r2, [pc, #420]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a66      	ldr	r2, [pc, #408]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f88e 	bl	80010fc <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe f88a 	bl	80010fc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e2ad      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe0>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe f87a 	bl	80010fc <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe f876 	bl	80010fc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e299      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800301e:	4b52      	ldr	r3, [pc, #328]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x108>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d05a      	beq.n	80030f0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d005      	beq.n	800304c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d119      	bne.n	800307a <HAL_RCC_OscConfig+0x176>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d116      	bne.n	800307a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_OscConfig+0x160>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e276      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	493d      	ldr	r1, [pc, #244]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003078:	e03a      	b.n	80030f0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d020      	beq.n	80030c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_RCC_OscConfig+0x268>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe f838 	bl	80010fc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe f834 	bl	80010fc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e257      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	492a      	ldr	r1, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
 80030c2:	e015      	b.n	80030f0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_RCC_OscConfig+0x268>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe f817 	bl	80010fc <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe f813 	bl	80010fc <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e236      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80b8 	beq.w	800326e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d170      	bne.n	80031e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_OscConfig+0x218>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e21a      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1a      	ldr	r2, [r3, #32]
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003128:	429a      	cmp	r2, r3
 800312a:	d921      	bls.n	8003170 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fc7d 	bl	8003a30 <RCC_SetFlashLatencyFromMSIRange>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e208      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4906      	ldr	r1, [pc, #24]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	4901      	ldr	r1, [pc, #4]	; (8003168 <HAL_RCC_OscConfig+0x264>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
 8003166:	e020      	b.n	80031aa <HAL_RCC_OscConfig+0x2a6>
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003170:	4b99      	ldr	r3, [pc, #612]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4996      	ldr	r1, [pc, #600]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003182:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	4991      	ldr	r1, [pc, #580]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fc48 	bl	8003a30 <RCC_SetFlashLatencyFromMSIRange>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1d3      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	0b5b      	lsrs	r3, r3, #13
 80031b0:	3301      	adds	r3, #1
 80031b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80031ba:	4a87      	ldr	r2, [pc, #540]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80031bc:	6892      	ldr	r2, [r2, #8]
 80031be:	0912      	lsrs	r2, r2, #4
 80031c0:	f002 020f 	and.w	r2, r2, #15
 80031c4:	4985      	ldr	r1, [pc, #532]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 80031c6:	5c8a      	ldrb	r2, [r1, r2]
 80031c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031ca:	4a85      	ldr	r2, [pc, #532]	; (80033e0 <HAL_RCC_OscConfig+0x4dc>)
 80031cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031ce:	4b85      	ldr	r3, [pc, #532]	; (80033e4 <HAL_RCC_OscConfig+0x4e0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd ff46 	bl	8001064 <HAL_InitTick>
 80031d8:	4603      	mov	r3, r0
 80031da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d045      	beq.n	800326e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	e1b5      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d029      	beq.n	8003242 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031ee:	4b7e      	ldr	r3, [pc, #504]	; (80033e8 <HAL_RCC_OscConfig+0x4e4>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fd ff82 	bl	80010fc <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fc:	f7fd ff7e 	bl	80010fc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1a1      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321a:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	496c      	ldr	r1, [pc, #432]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	4967      	ldr	r1, [pc, #412]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003242:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <HAL_RCC_OscConfig+0x4e4>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd ff58 	bl	80010fc <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003250:	f7fd ff54 	bl	80010fc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e177      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003262:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d030      	beq.n	80032dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003288:	f7fd ff38 	bl	80010fc <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003290:	f7fd ff34 	bl	80010fc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e157      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032a2:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x38c>
 80032ae:	e015      	b.n	80032dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b0:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fd ff21 	bl	80010fc <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032be:	f7fd ff1d 	bl	80010fc <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e140      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032d0:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80b5 	beq.w	8003454 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	4a36      	ldr	r2, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	6253      	str	r3, [r2, #36]	; 0x24
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003322:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fd fee5 	bl	80010fc <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fd fee1 	bl	80010fc <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	; 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e104      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x466>
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6353      	str	r3, [r2, #52]	; 0x34
 8003368:	e02d      	b.n	80033c6 <HAL_RCC_OscConfig+0x4c2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x488>
 8003372:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800337c:	6353      	str	r3, [r2, #52]	; 0x34
 800337e:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003388:	6353      	str	r3, [r2, #52]	; 0x34
 800338a:	e01c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4c2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x4aa>
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 8003396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 800339a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339e:	6353      	str	r3, [r2, #52]	; 0x34
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033aa:	6353      	str	r3, [r2, #52]	; 0x34
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x4c2>
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	6353      	str	r3, [r2, #52]	; 0x34
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80033c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d024      	beq.n	8003418 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fe95 	bl	80010fc <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d4:	e019      	b.n	800340a <HAL_RCC_OscConfig+0x506>
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	0800bc78 	.word	0x0800bc78
 80033e0:	200002c8 	.word	0x200002c8
 80033e4:	200002cc 	.word	0x200002cc
 80033e8:	42470020 	.word	0x42470020
 80033ec:	42470680 	.word	0x42470680
 80033f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe82 	bl	80010fc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0a3      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <HAL_RCC_OscConfig+0x658>)
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0ee      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4f0>
 8003416:	e014      	b.n	8003442 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003418:	f7fd fe70 	bl	80010fc <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fd fe6c 	bl	80010fc <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e08d      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003436:	4b49      	ldr	r3, [pc, #292]	; (800355c <HAL_RCC_OscConfig+0x658>)
 8003438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ee      	bne.n	8003420 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003442:	7ffb      	ldrb	r3, [r7, #31]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003448:	4b44      	ldr	r3, [pc, #272]	; (800355c <HAL_RCC_OscConfig+0x658>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	4a43      	ldr	r2, [pc, #268]	; (800355c <HAL_RCC_OscConfig+0x658>)
 800344e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003452:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d079      	beq.n	8003550 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d056      	beq.n	8003510 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b02      	cmp	r3, #2
 8003468:	d13b      	bne.n	80034e2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_RCC_OscConfig+0x65c>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fd fe44 	bl	80010fc <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003478:	f7fd fe40 	bl	80010fc <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e063      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x658>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_OscConfig+0x658>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	4319      	orrs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	430b      	orrs	r3, r1
 80034ae:	492b      	ldr	r1, [pc, #172]	; (800355c <HAL_RCC_OscConfig+0x658>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_RCC_OscConfig+0x65c>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fd fe1f 	bl	80010fc <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fd fe1b 	bl	80010fc <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e03e      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_RCC_OscConfig+0x658>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x5be>
 80034e0:	e036      	b.n	8003550 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_RCC_OscConfig+0x65c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fe08 	bl	80010fc <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fd fe04 	bl	80010fc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e027      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_RCC_OscConfig+0x658>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5ec>
 800350e:	e01f      	b.n	8003550 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e01a      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_RCC_OscConfig+0x658>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	429a      	cmp	r2, r3
 800352e:	d10d      	bne.n	800354c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d106      	bne.n	800354c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	42470060 	.word	0x42470060

08003564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e11a      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b8f      	ldr	r3, [pc, #572]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d919      	bls.n	80035ba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_ClockConfig+0x34>
 800358c:	4b8a      	ldr	r3, [pc, #552]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a89      	ldr	r2, [pc, #548]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b87      	ldr	r3, [pc, #540]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 0201 	bic.w	r2, r3, #1
 80035a0:	4985      	ldr	r1, [pc, #532]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a8:	4b83      	ldr	r3, [pc, #524]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0f9      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c6:	4b7d      	ldr	r3, [pc, #500]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	497a      	ldr	r1, [pc, #488]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 808e 	beq.w	8003702 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ee:	4b73      	ldr	r3, [pc, #460]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d121      	bne.n	800363e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0d7      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003606:	4b6d      	ldr	r3, [pc, #436]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d115      	bne.n	800363e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0cb      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800361e:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0bf      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800362e:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0b7      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	495c      	ldr	r1, [pc, #368]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003650:	f7fd fd54 	bl	80010fc <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d112      	bne.n	8003684 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fd fd4c 	bl	80010fc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e09b      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003676:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d1ee      	bne.n	8003660 <HAL_RCC_ClockConfig+0xfc>
 8003682:	e03e      	b.n	8003702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d112      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fd fd35 	bl	80010fc <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e084      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a4:	4b45      	ldr	r3, [pc, #276]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b0c      	cmp	r3, #12
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_ClockConfig+0x12a>
 80036b0:	e027      	b.n	8003702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d11d      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7fd fd1e 	bl	80010fc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e06d      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d1ee      	bne.n	80036bc <HAL_RCC_ClockConfig+0x158>
 80036de:	e010      	b.n	8003702 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fd fd0c 	bl	80010fc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e05b      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ee      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d219      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCC_ClockConfig+0x1be>
 8003716:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a27      	ldr	r2, [pc, #156]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	4923      	ldr	r1, [pc, #140]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <HAL_RCC_ClockConfig+0x254>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e034      	b.n	80037ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4917      	ldr	r1, [pc, #92]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	490f      	ldr	r1, [pc, #60]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003782:	f000 f823 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_RCC_ClockConfig+0x258>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	490b      	ldr	r1, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x25c>)
 8003794:	5ccb      	ldrb	r3, [r1, r3]
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x260>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_ClockConfig+0x264>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd fc5e 	bl	8001064 <HAL_InitTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80037ac:	7afb      	ldrb	r3, [r7, #11]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023c00 	.word	0x40023c00
 80037bc:	40023800 	.word	0x40023800
 80037c0:	0800bc78 	.word	0x0800bc78
 80037c4:	200002c8 	.word	0x200002c8
 80037c8:	200002cc 	.word	0x200002cc

080037cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d0:	b092      	sub	sp, #72	; 0x48
 80037d2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80037d4:	4b79      	ldr	r3, [pc, #484]	; (80039bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d00d      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x34>
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	f200 80d5 	bhi.w	8003994 <HAL_RCC_GetSysClockFreq+0x1c8>
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x28>
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x2e>
 80037f2:	e0cf      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b72      	ldr	r3, [pc, #456]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037f8:	e0da      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4b72      	ldr	r3, [pc, #456]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037fe:	e0d7      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003802:	0c9b      	lsrs	r3, r3, #18
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800380e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003810:	0d9b      	lsrs	r3, r3, #22
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	3301      	adds	r3, #1
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b68      	ldr	r3, [pc, #416]	; (80039bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d05d      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2200      	movs	r2, #0
 800382a:	4618      	mov	r0, r3
 800382c:	4611      	mov	r1, r2
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003844:	0150      	lsls	r0, r2, #5
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4621      	mov	r1, r4
 800384c:	1a51      	subs	r1, r2, r1
 800384e:	6139      	str	r1, [r7, #16]
 8003850:	4629      	mov	r1, r5
 8003852:	eb63 0301 	sbc.w	r3, r3, r1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003864:	4659      	mov	r1, fp
 8003866:	018b      	lsls	r3, r1, #6
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800386e:	4651      	mov	r1, sl
 8003870:	018a      	lsls	r2, r1, #6
 8003872:	46d4      	mov	ip, sl
 8003874:	ebb2 080c 	subs.w	r8, r2, ip
 8003878:	4659      	mov	r1, fp
 800387a:	eb63 0901 	sbc.w	r9, r3, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	4623      	mov	r3, r4
 8003898:	eb18 0303 	adds.w	r3, r8, r3
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	462b      	mov	r3, r5
 80038a0:	eb49 0303 	adc.w	r3, r9, r3
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038b2:	4629      	mov	r1, r5
 80038b4:	024b      	lsls	r3, r1, #9
 80038b6:	4620      	mov	r0, r4
 80038b8:	4629      	mov	r1, r5
 80038ba:	4604      	mov	r4, r0
 80038bc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80038c0:	4601      	mov	r1, r0
 80038c2:	024a      	lsls	r2, r1, #9
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ca:	2200      	movs	r2, #0
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038d4:	f7fc fc5a 	bl	800018c <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
 80038e0:	e055      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	2200      	movs	r2, #0
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	627a      	str	r2, [r7, #36]	; 0x24
 80038ea:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	f04f 0000 	mov.w	r0, #0
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	0159      	lsls	r1, r3, #5
 80038fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003900:	0150      	lsls	r0, r2, #5
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	46c4      	mov	ip, r8
 8003908:	ebb2 0a0c 	subs.w	sl, r2, ip
 800390c:	4640      	mov	r0, r8
 800390e:	4649      	mov	r1, r9
 8003910:	468c      	mov	ip, r1
 8003912:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003922:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003926:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800392a:	ebb2 040a 	subs.w	r4, r2, sl
 800392e:	eb63 050b 	sbc.w	r5, r3, fp
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	00eb      	lsls	r3, r5, #3
 800393c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003940:	00e2      	lsls	r2, r4, #3
 8003942:	4614      	mov	r4, r2
 8003944:	461d      	mov	r5, r3
 8003946:	4603      	mov	r3, r0
 8003948:	18e3      	adds	r3, r4, r3
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	460b      	mov	r3, r1
 800394e:	eb45 0303 	adc.w	r3, r5, r3
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003960:	4629      	mov	r1, r5
 8003962:	028b      	lsls	r3, r1, #10
 8003964:	4620      	mov	r0, r4
 8003966:	4629      	mov	r1, r5
 8003968:	4604      	mov	r4, r0
 800396a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800396e:	4601      	mov	r1, r0
 8003970:	028a      	lsls	r2, r1, #10
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	2200      	movs	r2, #0
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	61fa      	str	r2, [r7, #28]
 800397e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003982:	f7fc fc03 	bl	800018c <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4613      	mov	r3, r2
 800398c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800398e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003990:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003992:	e00d      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	0b5b      	lsrs	r3, r3, #13
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	3301      	adds	r3, #1
 80039a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80039ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3748      	adds	r7, #72	; 0x48
 80039b6:	46bd      	mov	sp, r7
 80039b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	007a1200 	.word	0x007a1200
 80039c8:	0800bc6c 	.word	0x0800bc6c

080039cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <HAL_RCC_GetHCLKFreq+0x10>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	200002c8 	.word	0x200002c8

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e4:	f7ff fff2 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800
 8003a04:	0800bc88 	.word	0x0800bc88

08003a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a0c:	f7ff ffde 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0adb      	lsrs	r3, r3, #11
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	0800bc88 	.word	0x0800bc88

08003a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a3c:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d12c      	bne.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a48:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e016      	b.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6253      	str	r3, [r2, #36]	; 0x24
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a80:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a94:	d105      	bne.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a9c:	d101      	bne.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aae:	f043 0304 	orr.w	r3, r3, #4
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 0201 	bic.w	r2, r3, #1
 8003abc:	490b      	ldr	r1, [pc, #44]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d001      	beq.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	40023c00 	.word	0x40023c00

08003af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07b      	b.n	8003bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d009      	beq.n	8003b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	61da      	str	r2, [r3, #28]
 8003b1a:	e005      	b.n	8003b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd f8c4 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	ea42 0103 	orr.w	r1, r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0104 	and.w	r1, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0210 	and.w	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08c      	sub	sp, #48	; 0x30
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c10:	2301      	movs	r3, #1
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_SPI_TransmitReceive+0x26>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e18a      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x33c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c30:	f7fd fa64 	bl	80010fc <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c46:	887b      	ldrh	r3, [r7, #2]
 8003c48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d00f      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x70>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c58:	d107      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x68>
 8003c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d003      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c70:	e15b      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x82>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x82>
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c8a:	e14e      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d003      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	887a      	ldrh	r2, [r7, #2]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d007      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfc:	d178      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x10a>
 8003d06:	8b7b      	ldrh	r3, [r7, #26]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d166      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	1c9a      	adds	r2, r3, #2
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d30:	e053      	b.n	8003dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d11b      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x176>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <HAL_SPI_TransmitReceive+0x176>
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d113      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d119      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x1b8>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d014      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	b292      	uxth	r2, r2
 8003d9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	1c9a      	adds	r2, r3, #2
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003db6:	2301      	movs	r3, #1
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dba:	f7fd f99f 	bl	80010fc <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d807      	bhi.n	8003dda <HAL_SPI_TransmitReceive+0x1d8>
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d003      	beq.n	8003dda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dd8:	e0a7      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1a6      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x130>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1a1      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x130>
 8003dee:	e07c      	b.n	8003eea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x1fc>
 8003df8:	8b7b      	ldrh	r3, [r7, #26]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d16b      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e24:	e057      	b.n	8003ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d11c      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x26c>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <HAL_SPI_TransmitReceive+0x26c>
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d114      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d119      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x2ae>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d014      	beq.n	8003eb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eac:	2301      	movs	r3, #1
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003eb0:	f7fd f924 	bl	80010fc <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d803      	bhi.n	8003ec8 <HAL_SPI_TransmitReceive+0x2c6>
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x2cc>
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ed4:	e029      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1a2      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x224>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d19d      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f8b2 	bl	8004058 <SPI_EndRxTxTransaction>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f06:	e010      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	e000      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3730      	adds	r7, #48	; 0x30
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f58:	f7fd f8d0 	bl	80010fc <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	4413      	add	r3, r2
 8003f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f68:	f7fd f8c8 	bl	80010fc <HAL_GetTick>
 8003f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f6e:	4b39      	ldr	r3, [pc, #228]	; (8004054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	0d1b      	lsrs	r3, r3, #20
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f7e:	e054      	b.n	800402a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d050      	beq.n	800402a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f88:	f7fd f8b8 	bl	80010fc <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d902      	bls.n	8003f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d13d      	bne.n	800401a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb6:	d111      	bne.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d004      	beq.n	8003fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d107      	bne.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d10f      	bne.n	8004006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e017      	b.n	800404a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3b01      	subs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	429a      	cmp	r2, r3
 8004046:	d19b      	bne.n	8003f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200002c8 	.word	0x200002c8

08004058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <SPI_EndRxTxTransaction+0x7c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <SPI_EndRxTxTransaction+0x80>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0d5b      	lsrs	r3, r3, #21
 8004070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004082:	d112      	bne.n	80040aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2200      	movs	r2, #0
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff ff5a 	bl	8003f48 <SPI_WaitFlagStateUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e00f      	b.n	80040ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d0f2      	beq.n	80040aa <SPI_EndRxTxTransaction+0x52>
 80040c4:	e000      	b.n	80040c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80040c6:	bf00      	nop
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200002c8 	.word	0x200002c8
 80040d8:	165e9f81 	.word	0x165e9f81

080040dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e03f      	b.n	800416e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fc fe28 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f829 	bl	8004178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041b8:	f023 030c 	bic.w	r3, r3, #12
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a55      	ldr	r2, [pc, #340]	; (8004338 <UART_SetConfig+0x1c0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d103      	bne.n	80041ee <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041e6:	f7ff fc0f 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	e002      	b.n	80041f4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041ee:	f7ff fbf7 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80041f2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	d14c      	bne.n	8004298 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009a      	lsls	r2, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	4a49      	ldr	r2, [pc, #292]	; (800433c <UART_SetConfig+0x1c4>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	0119      	lsls	r1, r3, #4
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fbb2 f2f3 	udiv	r2, r2, r3
 8004234:	4b41      	ldr	r3, [pc, #260]	; (800433c <UART_SetConfig+0x1c4>)
 8004236:	fba3 0302 	umull	r0, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2064      	movs	r0, #100	; 0x64
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	3332      	adds	r3, #50	; 0x32
 8004248:	4a3c      	ldr	r2, [pc, #240]	; (800433c <UART_SetConfig+0x1c4>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004256:	4419      	add	r1, r3
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009a      	lsls	r2, r3, #2
 8004262:	441a      	add	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fbb2 f2f3 	udiv	r2, r2, r3
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <UART_SetConfig+0x1c4>)
 8004270:	fba3 0302 	umull	r0, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2064      	movs	r0, #100	; 0x64
 8004278:	fb00 f303 	mul.w	r3, r0, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a2e      	ldr	r2, [pc, #184]	; (800433c <UART_SetConfig+0x1c4>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 0207 	and.w	r2, r3, #7
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	440a      	add	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004296:	e04a      	b.n	800432e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	009a      	lsls	r2, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	4a23      	ldr	r2, [pc, #140]	; (800433c <UART_SetConfig+0x1c4>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	0119      	lsls	r1, r3, #4
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009a      	lsls	r2, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <UART_SetConfig+0x1c4>)
 80042d0:	fba3 0302 	umull	r0, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2064      	movs	r0, #100	; 0x64
 80042d8:	fb00 f303 	mul.w	r3, r0, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	; 0x32
 80042e2:	4a16      	ldr	r2, [pc, #88]	; (800433c <UART_SetConfig+0x1c4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ee:	4419      	add	r1, r3
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009a      	lsls	r2, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	fbb2 f2f3 	udiv	r2, r2, r3
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <UART_SetConfig+0x1c4>)
 8004308:	fba3 0302 	umull	r0, r3, r3, r2
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2064      	movs	r0, #100	; 0x64
 8004310:	fb00 f303 	mul.w	r3, r0, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	3332      	adds	r3, #50	; 0x32
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <UART_SetConfig+0x1c4>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 020f 	and.w	r2, r3, #15
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	440a      	add	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40013800 	.word	0x40013800
 800433c:	51eb851f 	.word	0x51eb851f

08004340 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004350:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004354:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004374:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004378:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	b29b      	uxth	r3, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	b29b      	uxth	r3, r3
 800438a:	4013      	ands	r3, r2
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043a0:	b084      	sub	sp, #16
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	f107 0014 	add.w	r0, r7, #20
 80043ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	b004      	add	sp, #16
 80043de:	4770      	bx	lr

080043e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b09b      	sub	sp, #108	; 0x6c
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	78db      	ldrb	r3, [r3, #3]
 800440e:	2b03      	cmp	r3, #3
 8004410:	d81f      	bhi.n	8004452 <USB_ActivateEndpoint+0x72>
 8004412:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <USB_ActivateEndpoint+0x38>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	08004429 	.word	0x08004429
 800441c:	08004445 	.word	0x08004445
 8004420:	0800445b 	.word	0x0800445b
 8004424:	08004437 	.word	0x08004437
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004428:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800442c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004430:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004434:	e012      	b.n	800445c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004436:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800443a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800443e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004442:	e00b      	b.n	800445c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004444:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004450:	e004      	b.n	800445c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004458:	e000      	b.n	800445c <USB_ActivateEndpoint+0x7c>
      break;
 800445a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800446a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447a:	b29b      	uxth	r3, r3
 800447c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004494:	b29a      	uxth	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	4313      	orrs	r3, r2
 800449e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	441a      	add	r2, r3
 80044ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	7b1b      	ldrb	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 8149 	bne.w	8004760 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8084 	beq.w	80045e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4413      	add	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	011a      	lsls	r2, r3, #4
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	88db      	ldrh	r3, [r3, #6]
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	b29b      	uxth	r3, r3
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	81fb      	strh	r3, [r7, #14]
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01b      	beq.n	800455c <USB_ActivateEndpoint+0x17c>
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	81bb      	strh	r3, [r7, #12]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	89bb      	ldrh	r3, [r7, #12]
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	78db      	ldrb	r3, [r3, #3]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d020      	beq.n	80045a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	813b      	strh	r3, [r7, #8]
 800457c:	893b      	ldrh	r3, [r7, #8]
 800457e:	f083 0320 	eor.w	r3, r3, #32
 8004582:	813b      	strh	r3, [r7, #8]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	893b      	ldrh	r3, [r7, #8]
 8004590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	8013      	strh	r3, [r2, #0]
 80045a4:	e27f      	b.n	8004aa6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	897b      	ldrh	r3, [r7, #10]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
 80045de:	e262      	b.n	8004aa6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	4413      	add	r3, r2
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	011a      	lsls	r2, r3, #4
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	88db      	ldrh	r3, [r3, #6]
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	4413      	add	r3, r2
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	011a      	lsls	r2, r3, #4
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	4413      	add	r3, r2
 8004632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d112      	bne.n	8004666 <USB_ActivateEndpoint+0x286>
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800464a:	b29a      	uxth	r2, r3
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800465a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465e:	b29a      	uxth	r2, r3
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	e02f      	b.n	80046c6 <USB_ActivateEndpoint+0x2e6>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b3e      	cmp	r3, #62	; 0x3e
 800466c:	d813      	bhi.n	8004696 <USB_ActivateEndpoint+0x2b6>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	663b      	str	r3, [r7, #96]	; 0x60
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <USB_ActivateEndpoint+0x2a8>
 8004682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004684:	3301      	adds	r3, #1
 8004686:	663b      	str	r3, [r7, #96]	; 0x60
 8004688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800468a:	b29b      	uxth	r3, r3
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	b29a      	uxth	r2, r3
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e017      	b.n	80046c6 <USB_ActivateEndpoint+0x2e6>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	663b      	str	r3, [r7, #96]	; 0x60
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <USB_ActivateEndpoint+0x2d0>
 80046aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ac:	3b01      	subs	r3, #1
 80046ae:	663b      	str	r3, [r7, #96]	; 0x60
 80046b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	83fb      	strh	r3, [r7, #30]
 80046d4:	8bfb      	ldrh	r3, [r7, #30]
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01b      	beq.n	8004716 <USB_ActivateEndpoint+0x336>
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	83bb      	strh	r3, [r7, #28]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	8bbb      	ldrh	r3, [r7, #28]
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	837b      	strh	r3, [r7, #26]
 800472e:	8b7b      	ldrh	r3, [r7, #26]
 8004730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004734:	837b      	strh	r3, [r7, #26]
 8004736:	8b7b      	ldrh	r3, [r7, #26]
 8004738:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800473c:	837b      	strh	r3, [r7, #26]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	8b7b      	ldrh	r3, [r7, #26]
 800474a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475a:	b29b      	uxth	r3, r3
 800475c:	8013      	strh	r3, [r2, #0]
 800475e:	e1a2      	b.n	8004aa6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	441a      	add	r2, r3
 8004784:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004790:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	b29b      	uxth	r3, r3
 800479a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	65bb      	str	r3, [r7, #88]	; 0x58
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ac:	4413      	add	r3, r2
 80047ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	011a      	lsls	r2, r3, #4
 80047b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047be:	657b      	str	r3, [r7, #84]	; 0x54
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	891b      	ldrh	r3, [r3, #8]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	653b      	str	r3, [r7, #80]	; 0x50
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e0:	4413      	add	r3, r2
 80047e2:	653b      	str	r3, [r7, #80]	; 0x50
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	011a      	lsls	r2, r3, #4
 80047ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	895b      	ldrh	r3, [r3, #10]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004802:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8091 	bne.w	8004930 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800481c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800481e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01b      	beq.n	800485e <USB_ActivateEndpoint+0x47e>
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	873b      	strh	r3, [r7, #56]	; 0x38
 800486c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01b      	beq.n	80048ae <USB_ActivateEndpoint+0x4ce>
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490c:	867b      	strh	r3, [r7, #50]	; 0x32
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
 800492e:	e0ba      	b.n	8004aa6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004940:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01d      	beq.n	8004988 <USB_ActivateEndpoint+0x5a8>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004984:	b29b      	uxth	r3, r3
 8004986:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004998:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01d      	beq.n	80049e0 <USB_ActivateEndpoint+0x600>
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049dc:	b29b      	uxth	r3, r3
 80049de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	78db      	ldrb	r3, [r3, #3]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d024      	beq.n	8004a32 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a06:	f083 0320 	eor.w	r3, r3, #32
 8004a0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]
 8004a30:	e01d      	b.n	8004a6e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004aa6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	376c      	adds	r7, #108	; 0x6c
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b08d      	sub	sp, #52	; 0x34
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	7b1b      	ldrb	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 808e 	bne.w	8004be4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d044      	beq.n	8004b5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	81bb      	strh	r3, [r7, #12]
 8004ade:	89bb      	ldrh	r3, [r7, #12]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01b      	beq.n	8004b20 <USB_DeactivateEndpoint+0x6c>
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	817b      	strh	r3, [r7, #10]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	897b      	ldrh	r3, [r7, #10]
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b36:	813b      	strh	r3, [r7, #8]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	893b      	ldrh	r3, [r7, #8]
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
 8004b58:	e192      	b.n	8004e80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	827b      	strh	r3, [r7, #18]
 8004b68:	8a7b      	ldrh	r3, [r7, #18]
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01b      	beq.n	8004baa <USB_DeactivateEndpoint+0xf6>
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	823b      	strh	r3, [r7, #16]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	8a3b      	ldrh	r3, [r7, #16]
 8004b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc0:	81fb      	strh	r3, [r7, #14]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	8013      	strh	r3, [r2, #0]
 8004be2:	e14d      	b.n	8004e80 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 80a5 	bne.w	8004d38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	843b      	strh	r3, [r7, #32]
 8004bfc:	8c3b      	ldrh	r3, [r7, #32]
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01b      	beq.n	8004c3e <USB_DeactivateEndpoint+0x18a>
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	83fb      	strh	r3, [r7, #30]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	8bfb      	ldrh	r3, [r7, #30]
 8004c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	83bb      	strh	r3, [r7, #28]
 8004c4c:	8bbb      	ldrh	r3, [r7, #28]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01b      	beq.n	8004c8e <USB_DeactivateEndpoint+0x1da>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	837b      	strh	r3, [r7, #26]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	8b7b      	ldrh	r3, [r7, #26]
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca4:	833b      	strh	r3, [r7, #24]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	8b3b      	ldrh	r3, [r7, #24]
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	82fb      	strh	r3, [r7, #22]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	8afb      	ldrh	r3, [r7, #22]
 8004cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d14:	82bb      	strh	r3, [r7, #20]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	8abb      	ldrh	r3, [r7, #20]
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
 8004d36:	e0a3      	b.n	8004e80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01b      	beq.n	8004d88 <USB_DeactivateEndpoint+0x2d4>
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <USB_DeactivateEndpoint+0x324>
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	441a      	add	r2, r3
 8004dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3734      	adds	r7, #52	; 0x34
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b0cc      	sub	sp, #304	; 0x130
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e9a:	6018      	str	r0, [r3, #0]
 8004e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	f041 817d 	bne.w	80061b2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d908      	bls.n	8004ee6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ee4:	e007      	b.n	8004ef6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	7b1b      	ldrb	r3, [r3, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d152      	bne.n	8004fac <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6959      	ldr	r1, [r3, #20]
 8004f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	88da      	ldrh	r2, [r3, #6]
 8004f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	f001 ff0e 	bl	8006d4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f3e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f64:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	011a      	lsls	r2, r3, #4
 8004f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4413      	add	r3, r2
 8004f88:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	f001 b8b5 	b.w	8006116 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	78db      	ldrb	r3, [r3, #3]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	f040 84c6 	bne.w	800594a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a1a      	ldr	r2, [r3, #32]
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	f240 8443 	bls.w	8005862 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	441a      	add	r2, r3
 8005020:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005034:	b29b      	uxth	r3, r3
 8005036:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005048:	1ad2      	subs	r2, r2, r3
 800504a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 823e 	beq.w	80054fa <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800507e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005082:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005086:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800508a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 809a 	bne.w	80051d8 <USB_EPStartXfer+0x34c>
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4619      	mov	r1, r3
 80050ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050d6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	440a      	add	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	011a      	lsls	r2, r3, #4
 80050ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4413      	add	r3, r2
 80050fa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80050fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d122      	bne.n	8005156 <USB_EPStartXfer+0x2ca>
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005122:	b29a      	uxth	r2, r3
 8005124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005128:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	801a      	strh	r2, [r3, #0]
 8005130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005134:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005146:	b29a      	uxth	r2, r3
 8005148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	e079      	b.n	800524a <USB_EPStartXfer+0x3be>
 8005156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515a:	2b3e      	cmp	r3, #62	; 0x3e
 800515c:	d81b      	bhi.n	8005196 <USB_EPStartXfer+0x30a>
 800515e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <USB_EPStartXfer+0x2f2>
 8005174:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005178:	3301      	adds	r3, #1
 800517a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800517e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005182:	b29b      	uxth	r3, r3
 8005184:	029b      	lsls	r3, r3, #10
 8005186:	b29a      	uxth	r2, r3
 8005188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e059      	b.n	800524a <USB_EPStartXfer+0x3be>
 8005196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <USB_EPStartXfer+0x32a>
 80051ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051b0:	3b01      	subs	r3, #1
 80051b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	029b      	lsls	r3, r3, #10
 80051be:	b29b      	uxth	r3, r3
 80051c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e038      	b.n	800524a <USB_EPStartXfer+0x3be>
 80051d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d130      	bne.n	800524a <USB_EPStartXfer+0x3be>
 80051e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4619      	mov	r1, r3
 80051fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005202:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005206:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	440a      	add	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4413      	add	r3, r2
 800522a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800522e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	b29a      	uxth	r2, r3
 800523e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800524a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	895b      	ldrh	r3, [r3, #10]
 8005256:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6959      	ldr	r1, [r3, #20]
 8005266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526a:	b29b      	uxth	r3, r3
 800526c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005270:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005274:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005278:	6800      	ldr	r0, [r0, #0]
 800527a:	f001 fd68 	bl	8006d4e <USB_WritePMA>
            ep->xfer_buff += len;
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800528e:	441a      	add	r2, r3
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800529c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d90f      	bls.n	80052d8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80052b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c8:	1ad2      	subs	r2, r2, r3
 80052ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	621a      	str	r2, [r3, #32]
 80052d6:	e00e      	b.n	80052f6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f040 809a 	bne.w	800543c <USB_EPStartXfer+0x5b0>
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005310:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005314:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532a:	b29b      	uxth	r3, r3
 800532c:	4619      	mov	r1, r3
 800532e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005332:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005336:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800533a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	440a      	add	r2, r1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	011a      	lsls	r2, r3, #4
 8005352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005356:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4413      	add	r3, r2
 800535e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d122      	bne.n	80053ba <USB_EPStartXfer+0x52e>
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005386:	b29a      	uxth	r2, r3
 8005388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005398:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e083      	b.n	80054c2 <USB_EPStartXfer+0x636>
 80053ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053be:	2b3e      	cmp	r3, #62	; 0x3e
 80053c0:	d81b      	bhi.n	80053fa <USB_EPStartXfer+0x56e>
 80053c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <USB_EPStartXfer+0x556>
 80053d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	e063      	b.n	80054c2 <USB_EPStartXfer+0x636>
 80053fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <USB_EPStartXfer+0x58e>
 8005410:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005414:	3b01      	subs	r3, #1
 8005416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800541a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29b      	uxth	r3, r3
 8005424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542c:	b29a      	uxth	r2, r3
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e042      	b.n	80054c2 <USB_EPStartXfer+0x636>
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d13a      	bne.n	80054c2 <USB_EPStartXfer+0x636>
 800544c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005450:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005458:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546e:	b29b      	uxth	r3, r3
 8005470:	4619      	mov	r1, r3
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800547a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800547e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	440a      	add	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	011a      	lsls	r2, r3, #4
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4413      	add	r3, r2
 80054a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	891b      	ldrh	r3, [r3, #8]
 80054ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6959      	ldr	r1, [r3, #20]
 80054de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054f0:	6800      	ldr	r0, [r0, #0]
 80054f2:	f001 fc2c 	bl	8006d4e <USB_WritePMA>
 80054f6:	f000 be0e 	b.w	8006116 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d16d      	bne.n	80055e6 <USB_EPStartXfer+0x75a>
 800550a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	64bb      	str	r3, [r7, #72]	; 0x48
 8005516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005524:	b29b      	uxth	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552a:	4413      	add	r3, r2
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
 800552e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	011a      	lsls	r2, r3, #4
 800553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553e:	4413      	add	r3, r2
 8005540:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005544:	647b      	str	r3, [r7, #68]	; 0x44
 8005546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d112      	bne.n	8005574 <USB_EPStartXfer+0x6e8>
 800554e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005558:	b29a      	uxth	r2, r3
 800555a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555c:	801a      	strh	r2, [r3, #0]
 800555e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556c:	b29a      	uxth	r2, r3
 800556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e063      	b.n	800563c <USB_EPStartXfer+0x7b0>
 8005574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005578:	2b3e      	cmp	r3, #62	; 0x3e
 800557a:	d817      	bhi.n	80055ac <USB_EPStartXfer+0x720>
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d004      	beq.n	800559c <USB_EPStartXfer+0x710>
 8005592:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005596:	3301      	adds	r3, #1
 8005598:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800559c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	029b      	lsls	r3, r3, #10
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	e047      	b.n	800563c <USB_EPStartXfer+0x7b0>
 80055ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <USB_EPStartXfer+0x740>
 80055c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055c6:	3b01      	subs	r3, #1
 80055c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e02a      	b.n	800563c <USB_EPStartXfer+0x7b0>
 80055e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d122      	bne.n	800563c <USB_EPStartXfer+0x7b0>
 80055f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	653b      	str	r3, [r7, #80]	; 0x50
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005610:	b29b      	uxth	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005616:	4413      	add	r3, r2
 8005618:	653b      	str	r3, [r7, #80]	; 0x50
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	011a      	lsls	r2, r3, #4
 8005628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562a:	4413      	add	r3, r2
 800562c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005636:	b29a      	uxth	r2, r3
 8005638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	891b      	ldrh	r3, [r3, #8]
 8005648:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6959      	ldr	r1, [r3, #20]
 8005658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565c:	b29b      	uxth	r3, r3
 800565e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005662:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005666:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	f001 fb6f 	bl	8006d4e <USB_WritePMA>
            ep->xfer_buff += len;
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005680:	441a      	add	r2, r3
 8005682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90f      	bls.n	80056ca <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80056aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	621a      	str	r2, [r3, #32]
 80056c8:	e00e      	b.n	80056e8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80056ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2200      	movs	r2, #0
 80056e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	643b      	str	r3, [r7, #64]	; 0x40
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d16d      	bne.n	80057e0 <USB_EPStartXfer+0x954>
 8005704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571e:	b29b      	uxth	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	4413      	add	r3, r2
 8005726:	63bb      	str	r3, [r7, #56]	; 0x38
 8005728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	011a      	lsls	r2, r3, #4
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	4413      	add	r3, r2
 800573a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
 8005740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d112      	bne.n	800576e <USB_EPStartXfer+0x8e2>
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005752:	b29a      	uxth	r2, r3
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	801a      	strh	r2, [r3, #0]
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005766:	b29a      	uxth	r2, r3
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e05d      	b.n	800582a <USB_EPStartXfer+0x99e>
 800576e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005772:	2b3e      	cmp	r3, #62	; 0x3e
 8005774:	d817      	bhi.n	80057a6 <USB_EPStartXfer+0x91a>
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <USB_EPStartXfer+0x90a>
 800578c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005790:	3301      	adds	r3, #1
 8005792:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005796:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800579a:	b29b      	uxth	r3, r3
 800579c:	029b      	lsls	r3, r3, #10
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	e041      	b.n	800582a <USB_EPStartXfer+0x99e>
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <USB_EPStartXfer+0x93a>
 80057bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c0:	3b01      	subs	r3, #1
 80057c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e024      	b.n	800582a <USB_EPStartXfer+0x99e>
 80057e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d11c      	bne.n	800582a <USB_EPStartXfer+0x99e>
 80057f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fe:	b29b      	uxth	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005804:	4413      	add	r3, r2
 8005806:	643b      	str	r3, [r7, #64]	; 0x40
 8005808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	011a      	lsls	r2, r3, #4
 8005816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005818:	4413      	add	r3, r2
 800581a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005824:	b29a      	uxth	r2, r3
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	895b      	ldrh	r3, [r3, #10]
 8005836:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6959      	ldr	r1, [r3, #20]
 8005846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584a:	b29b      	uxth	r3, r3
 800584c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005850:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005854:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005858:	6800      	ldr	r0, [r0, #0]
 800585a:	f001 fa78 	bl	8006d4e <USB_WritePMA>
 800585e:	f000 bc5a 	b.w	8006116 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005898:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800589c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ee:	4413      	add	r3, r2
 80058f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	011a      	lsls	r2, r3, #4
 8005900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005902:	4413      	add	r3, r2
 8005904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005908:	65bb      	str	r3, [r7, #88]	; 0x58
 800590a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590e:	b29a      	uxth	r2, r3
 8005910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005912:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	891b      	ldrh	r3, [r3, #8]
 8005920:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6959      	ldr	r1, [r3, #20]
 8005930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005934:	b29b      	uxth	r3, r3
 8005936:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800593a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800593e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005942:	6800      	ldr	r0, [r0, #0]
 8005944:	f001 fa03 	bl	8006d4e <USB_WritePMA>
 8005948:	e3e5      	b.n	8006116 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800599e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a1a      	ldr	r2, [r3, #32]
 80059b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b6:	1ad2      	subs	r2, r2, r3
 80059b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 81bc 	beq.w	8005d64 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d16d      	bne.n	8005ae6 <USB_EPStartXfer+0xc5a>
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a2a:	4413      	add	r3, r2
 8005a2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	011a      	lsls	r2, r3, #4
 8005a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a3e:	4413      	add	r3, r2
 8005a40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a44:	677b      	str	r3, [r7, #116]	; 0x74
 8005a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d112      	bne.n	8005a74 <USB_EPStartXfer+0xbe8>
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e060      	b.n	8005b36 <USB_EPStartXfer+0xcaa>
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	2b3e      	cmp	r3, #62	; 0x3e
 8005a7a:	d817      	bhi.n	8005aac <USB_EPStartXfer+0xc20>
 8005a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <USB_EPStartXfer+0xc10>
 8005a92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a96:	3301      	adds	r3, #1
 8005a98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	e044      	b.n	8005b36 <USB_EPStartXfer+0xcaa>
 8005aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <USB_EPStartXfer+0xc40>
 8005ac2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005acc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	029b      	lsls	r3, r3, #10
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e027      	b.n	8005b36 <USB_EPStartXfer+0xcaa>
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d11f      	bne.n	8005b36 <USB_EPStartXfer+0xcaa>
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	011a      	lsls	r2, r3, #4
 8005b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	895b      	ldrh	r3, [r3, #10]
 8005b42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6959      	ldr	r1, [r3, #20]
 8005b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b64:	6800      	ldr	r0, [r0, #0]
 8005b66:	f001 f8f2 	bl	8006d4e <USB_WritePMA>
          ep->xfer_buff += len;
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7a:	441a      	add	r2, r3
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d90f      	bls.n	8005bc4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	621a      	str	r2, [r3, #32]
 8005bc2:	e00e      	b.n	8005be2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 8295 	beq.w	8006116 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d16d      	bne.n	8005cd8 <USB_EPStartXfer+0xe4c>
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c1c:	4413      	add	r3, r2
 8005c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	011a      	lsls	r2, r3, #4
 8005c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c30:	4413      	add	r3, r2
 8005c32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c36:	667b      	str	r3, [r7, #100]	; 0x64
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d112      	bne.n	8005c66 <USB_EPStartXfer+0xdda>
 8005c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e063      	b.n	8005d2e <USB_EPStartXfer+0xea2>
 8005c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6c:	d817      	bhi.n	8005c9e <USB_EPStartXfer+0xe12>
 8005c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <USB_EPStartXfer+0xe02>
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	029b      	lsls	r3, r3, #10
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	e047      	b.n	8005d2e <USB_EPStartXfer+0xea2>
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <USB_EPStartXfer+0xe32>
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e02a      	b.n	8005d2e <USB_EPStartXfer+0xea2>
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d122      	bne.n	8005d2e <USB_EPStartXfer+0xea2>
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8005cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d08:	4413      	add	r3, r2
 8005d0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	891b      	ldrh	r3, [r3, #8]
 8005d3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6959      	ldr	r1, [r3, #20]
 8005d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d5c:	6800      	ldr	r0, [r0, #0]
 8005d5e:	f000 fff6 	bl	8006d4e <USB_WritePMA>
 8005d62:	e1d8      	b.n	8006116 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d178      	bne.n	8005e66 <USB_EPStartXfer+0xfda>
 8005d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d98:	4413      	add	r3, r2
 8005d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	011a      	lsls	r2, r3, #4
 8005dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005db6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d116      	bne.n	8005df0 <USB_EPStartXfer+0xf64>
 8005dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	e06b      	b.n	8005ec8 <USB_EPStartXfer+0x103c>
 8005df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df4:	2b3e      	cmp	r3, #62	; 0x3e
 8005df6:	d818      	bhi.n	8005e2a <USB_EPStartXfer+0xf9e>
 8005df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <USB_EPStartXfer+0xf8c>
 8005e0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e12:	3301      	adds	r3, #1
 8005e14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005e18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	029b      	lsls	r3, r3, #10
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	e04e      	b.n	8005ec8 <USB_EPStartXfer+0x103c>
 8005e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <USB_EPStartXfer+0xfbe>
 8005e40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e44:	3b01      	subs	r3, #1
 8005e46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005e4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	e030      	b.n	8005ec8 <USB_EPStartXfer+0x103c>
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d128      	bne.n	8005ec8 <USB_EPStartXfer+0x103c>
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	011a      	lsls	r2, r3, #4
 8005eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ec6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	891b      	ldrh	r3, [r3, #8]
 8005ed4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6959      	ldr	r1, [r3, #20]
 8005ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005eee:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ef2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	f000 ff29 	bl	8006d4e <USB_WritePMA>
          ep->xfer_buff += len;
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	441a      	add	r2, r3
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a1a      	ldr	r2, [r3, #32]
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d90f      	bls.n	8005f56 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f46:	1ad2      	subs	r2, r2, r3
 8005f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	621a      	str	r2, [r3, #32]
 8005f54:	e00e      	b.n	8005f74 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80cc 	beq.w	8006116 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d178      	bne.n	800608e <USB_EPStartXfer+0x1202>
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	011a      	lsls	r2, r3, #4
 8005fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd8:	4413      	add	r3, r2
 8005fda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d116      	bne.n	8006018 <USB_EPStartXfer+0x118c>
 8005fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600e:	b29a      	uxth	r2, r3
 8006010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	e064      	b.n	80060e2 <USB_EPStartXfer+0x1256>
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	2b3e      	cmp	r3, #62	; 0x3e
 800601e:	d818      	bhi.n	8006052 <USB_EPStartXfer+0x11c6>
 8006020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800602a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <USB_EPStartXfer+0x11b4>
 8006036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603a:	3301      	adds	r3, #1
 800603c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006044:	b29b      	uxth	r3, r3
 8006046:	029b      	lsls	r3, r3, #10
 8006048:	b29a      	uxth	r2, r3
 800604a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e047      	b.n	80060e2 <USB_EPStartXfer+0x1256>
 8006052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800605c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <USB_EPStartXfer+0x11e6>
 8006068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606c:	3b01      	subs	r3, #1
 800606e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006076:	b29b      	uxth	r3, r3
 8006078:	029b      	lsls	r3, r3, #10
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006084:	b29a      	uxth	r2, r3
 8006086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e029      	b.n	80060e2 <USB_EPStartXfer+0x1256>
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d121      	bne.n	80060e2 <USB_EPStartXfer+0x1256>
 800609e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060b4:	4413      	add	r3, r2
 80060b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	011a      	lsls	r2, r3, #4
 80060c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80060d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	895b      	ldrh	r3, [r3, #10]
 80060ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6959      	ldr	r1, [r3, #20]
 80060fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006102:	b29b      	uxth	r3, r3
 8006104:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006108:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800610c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006110:	6800      	ldr	r0, [r0, #0]
 8006112:	f000 fe1c 	bl	8006d4e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006138:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800613c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006144:	8013      	strh	r3, [r2, #0]
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800614e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006152:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006156:	8812      	ldrh	r2, [r2, #0]
 8006158:	f082 0210 	eor.w	r2, r2, #16
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006166:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800616a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800616e:	8812      	ldrh	r2, [r2, #0]
 8006170:	f082 0220 	eor.w	r2, r2, #32
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]
 80061ae:	f000 bc9f 	b.w	8006af0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	7b1b      	ldrb	r3, [r3, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 80ae 	bne.w	8006320 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80061c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d917      	bls.n	8006210 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80061e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80061f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	619a      	str	r2, [r3, #24]
 800620e:	e00e      	b.n	800622e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624a:	b29b      	uxth	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006252:	4413      	add	r3, r2
 8006254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	011a      	lsls	r2, r3, #4
 8006266:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800626a:	4413      	add	r3, r2
 800626c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d116      	bne.n	80062aa <USB_EPStartXfer+0x141e>
 800627c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e3e8      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ae:	2b3e      	cmp	r3, #62	; 0x3e
 80062b0:	d818      	bhi.n	80062e4 <USB_EPStartXfer+0x1458>
 80062b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <USB_EPStartXfer+0x1446>
 80062c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062cc:	3301      	adds	r3, #1
 80062ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	029b      	lsls	r3, r3, #10
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e3cb      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USB_EPStartXfer+0x1478>
 80062fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062fe:	3b01      	subs	r3, #1
 8006300:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006304:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006308:	b29b      	uxth	r3, r3
 800630a:	029b      	lsls	r3, r3, #10
 800630c:	b29b      	uxth	r3, r3
 800630e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006316:	b29a      	uxth	r2, r3
 8006318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e3ad      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	78db      	ldrb	r3, [r3, #3]
 800632c:	2b02      	cmp	r3, #2
 800632e:	f040 8200 	bne.w	8006732 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 8091 	bne.w	8006466 <USB_EPStartXfer+0x15da>
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006368:	4413      	add	r3, r2
 800636a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	011a      	lsls	r2, r3, #4
 800637c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006380:	4413      	add	r3, r2
 8006382:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800638a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d116      	bne.n	80063c8 <USB_EPStartXfer+0x153c>
 800639a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063be:	b29a      	uxth	r2, r3
 80063c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e083      	b.n	80064d0 <USB_EPStartXfer+0x1644>
 80063c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b3e      	cmp	r3, #62	; 0x3e
 80063d6:	d820      	bhi.n	800641a <USB_EPStartXfer+0x158e>
 80063d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <USB_EPStartXfer+0x157c>
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	3301      	adds	r3, #1
 8006404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640c:	b29b      	uxth	r3, r3
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	b29a      	uxth	r2, r3
 8006412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006416:	801a      	strh	r2, [r3, #0]
 8006418:	e05a      	b.n	80064d0 <USB_EPStartXfer+0x1644>
 800641a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800642c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <USB_EPStartXfer+0x15be>
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006444:	3b01      	subs	r3, #1
 8006446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644e:	b29b      	uxth	r3, r3
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	b29b      	uxth	r3, r3
 8006454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e034      	b.n	80064d0 <USB_EPStartXfer+0x1644>
 8006466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d12c      	bne.n	80064d0 <USB_EPStartXfer+0x1644>
 8006476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649a:	4413      	add	r3, r2
 800649c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	011a      	lsls	r2, r3, #4
 80064ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b2:	4413      	add	r3, r2
 80064b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 8091 	bne.w	8006612 <USB_EPStartXfer+0x1786>
 80064f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650c:	b29b      	uxth	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006514:	4413      	add	r3, r2
 8006516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	011a      	lsls	r2, r3, #4
 8006528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800652c:	4413      	add	r3, r2
 800652e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d116      	bne.n	8006574 <USB_EPStartXfer+0x16e8>
 8006546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006552:	b29a      	uxth	r2, r3
 8006554:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e07c      	b.n	800666e <USB_EPStartXfer+0x17e2>
 8006574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b3e      	cmp	r3, #62	; 0x3e
 8006582:	d820      	bhi.n	80065c6 <USB_EPStartXfer+0x173a>
 8006584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <USB_EPStartXfer+0x1728>
 80065aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065ae:	3301      	adds	r3, #1
 80065b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	029b      	lsls	r3, r3, #10
 80065bc:	b29a      	uxth	r2, r3
 80065be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e053      	b.n	800666e <USB_EPStartXfer+0x17e2>
 80065c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <USB_EPStartXfer+0x176a>
 80065ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065f0:	3b01      	subs	r3, #1
 80065f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e02d      	b.n	800666e <USB_EPStartXfer+0x17e2>
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	785b      	ldrb	r3, [r3, #1]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d125      	bne.n	800666e <USB_EPStartXfer+0x17e2>
 8006622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006630:	b29b      	uxth	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006638:	4413      	add	r3, r2
 800663a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	011a      	lsls	r2, r3, #4
 800664c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006650:	4413      	add	r3, r2
 8006652:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	b29a      	uxth	r2, r3
 8006668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800666c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 81fe 	beq.w	8006a7c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <USB_EPStartXfer+0x182c>
 80066ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10d      	bne.n	80066d4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 81db 	bne.w	8006a7c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 81d4 	bne.w	8006a7c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80066fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]
 8006730:	e1a4      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	78db      	ldrb	r3, [r3, #3]
 800673e:	2b01      	cmp	r3, #1
 8006740:	f040 819a 	bne.w	8006a78 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d917      	bls.n	8006790 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	619a      	str	r2, [r3, #24]
 800678e:	e00e      	b.n	80067ae <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80067a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2200      	movs	r2, #0
 80067ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80067ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d178      	bne.n	80068b0 <USB_EPStartXfer+0x1a24>
 80067be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067e2:	4413      	add	r3, r2
 80067e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	011a      	lsls	r2, r3, #4
 80067f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067fa:	4413      	add	r3, r2
 80067fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006800:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d116      	bne.n	800683a <USB_EPStartXfer+0x19ae>
 800680c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006818:	b29a      	uxth	r2, r3
 800681a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	e06b      	b.n	8006912 <USB_EPStartXfer+0x1a86>
 800683a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683e:	2b3e      	cmp	r3, #62	; 0x3e
 8006840:	d818      	bhi.n	8006874 <USB_EPStartXfer+0x19e8>
 8006842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800684c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <USB_EPStartXfer+0x19d6>
 8006858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685c:	3301      	adds	r3, #1
 800685e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006866:	b29b      	uxth	r3, r3
 8006868:	029b      	lsls	r3, r3, #10
 800686a:	b29a      	uxth	r2, r3
 800686c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	e04e      	b.n	8006912 <USB_EPStartXfer+0x1a86>
 8006874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800687e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2b00      	cmp	r3, #0
 8006888:	d104      	bne.n	8006894 <USB_EPStartXfer+0x1a08>
 800688a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800688e:	3b01      	subs	r3, #1
 8006890:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006898:	b29b      	uxth	r3, r3
 800689a:	029b      	lsls	r3, r3, #10
 800689c:	b29b      	uxth	r3, r3
 800689e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e030      	b.n	8006912 <USB_EPStartXfer+0x1a86>
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d128      	bne.n	8006912 <USB_EPStartXfer+0x1a86>
 80068c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068dc:	b29b      	uxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	4413      	add	r3, r2
 80068e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	011a      	lsls	r2, r3, #4
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	4413      	add	r3, r2
 80068fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006902:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690a:	b29a      	uxth	r2, r3
 800690c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d178      	bne.n	8006a22 <USB_EPStartXfer+0x1b96>
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694c:	b29b      	uxth	r3, r3
 800694e:	461a      	mov	r2, r3
 8006950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006954:	4413      	add	r3, r2
 8006956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800695a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	011a      	lsls	r2, r3, #4
 8006968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800696c:	4413      	add	r3, r2
 800696e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d116      	bne.n	80069ac <USB_EPStartXfer+0x1b20>
 800697e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e067      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	2b3e      	cmp	r3, #62	; 0x3e
 80069b2:	d818      	bhi.n	80069e6 <USB_EPStartXfer+0x1b5a>
 80069b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <USB_EPStartXfer+0x1b48>
 80069ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069ce:	3301      	adds	r3, #1
 80069d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069d8:	b29b      	uxth	r3, r3
 80069da:	029b      	lsls	r3, r3, #10
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e04a      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <USB_EPStartXfer+0x1b7a>
 80069fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a00:	3b01      	subs	r3, #1
 8006a02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	e02c      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d124      	bne.n	8006a7c <USB_EPStartXfer+0x1bf0>
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a48:	4413      	add	r3, r2
 8006a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	011a      	lsls	r2, r3, #4
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e001      	b.n	8006a7c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e03a      	b.n	8006af2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006aa6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006aaa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006aae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ab2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ab6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d020      	beq.n	8006b50 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b24:	81bb      	strh	r3, [r7, #12]
 8006b26:	89bb      	ldrh	r3, [r7, #12]
 8006b28:	f083 0310 	eor.w	r3, r3, #16
 8006b2c:	81bb      	strh	r3, [r7, #12]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	89bb      	ldrh	r3, [r7, #12]
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]
 8006b4e:	e01f      	b.n	8006b90 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	81fb      	strh	r3, [r7, #14]
 8006b68:	89fb      	ldrh	r3, [r7, #14]
 8006b6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b6e:	81fb      	strh	r3, [r7, #14]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	89fb      	ldrh	r3, [r7, #14]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	7b1b      	ldrb	r3, [r3, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 809d 	bne.w	8006cea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d04c      	beq.n	8006c52 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	823b      	strh	r3, [r7, #16]
 8006bc6:	8a3b      	ldrh	r3, [r7, #16]
 8006bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01b      	beq.n	8006c08 <USB_EPClearStall+0x6c>
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	81fb      	strh	r3, [r7, #14]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	89fb      	ldrh	r3, [r7, #14]
 8006bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	78db      	ldrb	r3, [r3, #3]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d06c      	beq.n	8006cea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c26:	81bb      	strh	r3, [r7, #12]
 8006c28:	89bb      	ldrh	r3, [r7, #12]
 8006c2a:	f083 0320 	eor.w	r3, r3, #32
 8006c2e:	81bb      	strh	r3, [r7, #12]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	441a      	add	r2, r3
 8006c3a:	89bb      	ldrh	r3, [r7, #12]
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]
 8006c50:	e04b      	b.n	8006cea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	82fb      	strh	r3, [r7, #22]
 8006c60:	8afb      	ldrh	r3, [r7, #22]
 8006c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01b      	beq.n	8006ca2 <USB_EPClearStall+0x106>
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	82bb      	strh	r3, [r7, #20]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	8abb      	ldrh	r3, [r7, #20]
 8006c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	827b      	strh	r3, [r7, #18]
 8006cba:	8a7b      	ldrh	r3, [r7, #18]
 8006cbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cc0:	827b      	strh	r3, [r7, #18]
 8006cc2:	8a7b      	ldrh	r3, [r7, #18]
 8006cc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cc8:	827b      	strh	r3, [r7, #18]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	8a7b      	ldrh	r3, [r7, #18]
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr

08006cf6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006d42:	68fb      	ldr	r3, [r7, #12]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr

08006d4e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b08d      	sub	sp, #52	; 0x34
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	80fb      	strh	r3, [r7, #6]
 8006d60:	4613      	mov	r3, r2
 8006d62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d64:	88bb      	ldrh	r3, [r7, #4]
 8006d66:	3301      	adds	r3, #1
 8006d68:	085b      	lsrs	r3, r3, #1
 8006d6a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	005a      	lsls	r2, r3, #1
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d86:	e01e      	b.n	8006dc6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	3301      	adds	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	3302      	adds	r3, #2
 8006db2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	3302      	adds	r3, #2
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1dd      	bne.n	8006d88 <USB_WritePMA+0x3a>
  }
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	3734      	adds	r7, #52	; 0x34
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr

08006dd8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b08b      	sub	sp, #44	; 0x2c
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4611      	mov	r1, r2
 8006de4:	461a      	mov	r2, r3
 8006de6:	460b      	mov	r3, r1
 8006de8:	80fb      	strh	r3, [r7, #6]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006dee:	88bb      	ldrh	r3, [r7, #4]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	005a      	lsls	r2, r3, #1
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e10:	e01b      	b.n	8006e4a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	3302      	adds	r3, #2
 8006e42:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	3b01      	subs	r3, #1
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e0      	bne.n	8006e12 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006e50:	88bb      	ldrh	r3, [r7, #4]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	701a      	strb	r2, [r3, #0]
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	372c      	adds	r7, #44	; 0x2c
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7c1b      	ldrb	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d115      	bne.n	8006eba <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e92:	2202      	movs	r2, #2
 8006e94:	2181      	movs	r1, #129	; 0x81
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 ff8f 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 ff85 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006eb8:	e012      	b.n	8006ee0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006eba:	2340      	movs	r3, #64	; 0x40
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	2181      	movs	r1, #129	; 0x81
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f002 ff7a 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	2202      	movs	r2, #2
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f002 ff71 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	2182      	movs	r1, #130	; 0x82
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f002 ff67 	bl	8009dba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006ef2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ef6:	f003 f887 	bl	800a008 <USBD_static_malloc>
 8006efa:	4602      	mov	r2, r0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e026      	b.n	8006f60 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f18:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7c1b      	ldrb	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f46:	2101      	movs	r1, #1
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f003 f827 	bl	8009f9c <USBD_LL_PrepareReceive>
 8006f4e:	e007      	b.n	8006f60 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f56:	2340      	movs	r3, #64	; 0x40
 8006f58:	2101      	movs	r1, #1
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f003 f81e 	bl	8009f9c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f7a:	2181      	movs	r1, #129	; 0x81
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f002 ff42 	bl	8009e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f88:	2101      	movs	r1, #1
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f002 ff3b 	bl	8009e06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f98:	2182      	movs	r1, #130	; 0x82
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f002 ff33 	bl	8009e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f003 f82d 	bl	800a020 <USBD_static_free>
    pdev->pClassData = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fe8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d039      	beq.n	8007076 <USBD_CDC_Setup+0x9e>
 8007002:	2b20      	cmp	r3, #32
 8007004:	d17f      	bne.n	8007106 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	88db      	ldrh	r3, [r3, #6]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d029      	beq.n	8007062 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b25b      	sxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	da11      	bge.n	800703c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007024:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	88d2      	ldrh	r2, [r2, #6]
 800702a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800702c:	6939      	ldr	r1, [r7, #16]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	88db      	ldrh	r3, [r3, #6]
 8007032:	461a      	mov	r2, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 f994 	bl	8008362 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800703a:	e06b      	b.n	8007114 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785a      	ldrb	r2, [r3, #1]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	88db      	ldrh	r3, [r3, #6]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007052:	6939      	ldr	r1, [r7, #16]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	88db      	ldrh	r3, [r3, #6]
 8007058:	461a      	mov	r2, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 f9af 	bl	80083be <USBD_CtlPrepareRx>
    break;
 8007060:	e058      	b.n	8007114 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	7850      	ldrb	r0, [r2, #1]
 800706e:	2200      	movs	r2, #0
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	4798      	blx	r3
    break;
 8007074:	e04e      	b.n	8007114 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b0b      	cmp	r3, #11
 800707c:	d02e      	beq.n	80070dc <USBD_CDC_Setup+0x104>
 800707e:	2b0b      	cmp	r3, #11
 8007080:	dc38      	bgt.n	80070f4 <USBD_CDC_Setup+0x11c>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <USBD_CDC_Setup+0xb4>
 8007086:	2b0a      	cmp	r3, #10
 8007088:	d014      	beq.n	80070b4 <USBD_CDC_Setup+0xdc>
 800708a:	e033      	b.n	80070f4 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007092:	2b03      	cmp	r3, #3
 8007094:	d107      	bne.n	80070a6 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007096:	f107 030c 	add.w	r3, r7, #12
 800709a:	2202      	movs	r2, #2
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 f95f 	bl	8008362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80070a4:	e02e      	b.n	8007104 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 f8f0 	bl	800828e <USBD_CtlError>
			  ret = USBD_FAIL;
 80070ae:	2302      	movs	r3, #2
 80070b0:	75fb      	strb	r3, [r7, #23]
      break;
 80070b2:	e027      	b.n	8007104 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d107      	bne.n	80070ce <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80070be:	f107 030f 	add.w	r3, r7, #15
 80070c2:	2201      	movs	r2, #1
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 f94b 	bl	8008362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80070cc:	e01a      	b.n	8007104 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f8dc 	bl	800828e <USBD_CtlError>
			  ret = USBD_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	75fb      	strb	r3, [r7, #23]
      break;
 80070da:	e013      	b.n	8007104 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d00d      	beq.n	8007102 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f8d0 	bl	800828e <USBD_CtlError>
			  ret = USBD_FAIL;
 80070ee:	2302      	movs	r3, #2
 80070f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80070f2:	e006      	b.n	8007102 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f8c9 	bl	800828e <USBD_CtlError>
      ret = USBD_FAIL;
 80070fc:	2302      	movs	r3, #2
 80070fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007100:	e000      	b.n	8007104 <USBD_CDC_Setup+0x12c>
      break;
 8007102:	bf00      	nop
    }
    break;
 8007104:	e006      	b.n	8007114 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 f8c0 	bl	800828e <USBD_CtlError>
    ret = USBD_FAIL;
 800710e:	2302      	movs	r3, #2
 8007110:	75fb      	strb	r3, [r7, #23]
    break;
 8007112:	bf00      	nop
  }

  return ret;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007130:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007138:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007140:	2b00      	cmp	r3, #0
 8007142:	d03a      	beq.n	80071ba <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	440b      	add	r3, r1
 8007152:	331c      	adds	r3, #28
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d029      	beq.n	80071ae <USBD_CDC_DataIn+0x90>
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	440b      	add	r3, r1
 8007168:	331c      	adds	r3, #28
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	78f9      	ldrb	r1, [r7, #3]
 800716e:	68b8      	ldr	r0, [r7, #8]
 8007170:	460b      	mov	r3, r1
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4403      	add	r3, r0
 800717a:	3338      	adds	r3, #56	; 0x38
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007182:	fb01 f303 	mul.w	r3, r1, r3
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d110      	bne.n	80071ae <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800718c:	78fa      	ldrb	r2, [r7, #3]
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	440b      	add	r3, r1
 800719a:	331c      	adds	r3, #28
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80071a0:	78f9      	ldrb	r1, [r7, #3]
 80071a2:	2300      	movs	r3, #0
 80071a4:	2200      	movs	r2, #0
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fed5 	bl	8009f56 <USBD_LL_Transmit>
 80071ac:	e003      	b.n	80071b6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e000      	b.n	80071bc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80071ba:	2302      	movs	r3, #2
  }
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f002 ff00 	bl	8009fe2 <USBD_LL_GetRxDataSize>
 80071e2:	4602      	mov	r2, r0
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00d      	beq.n	8007210 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007208:	4611      	mov	r1, r2
 800720a:	4798      	blx	r3

    return USBD_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e000      	b.n	8007212 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007210:	2302      	movs	r3, #2
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007228:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007230:	2b00      	cmp	r3, #0
 8007232:	d015      	beq.n	8007260 <USBD_CDC_EP0_RxReady+0x46>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800723a:	2bff      	cmp	r3, #255	; 0xff
 800723c:	d010      	beq.n	8007260 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800724c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007254:	b292      	uxth	r2, r2
 8007256:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	22ff      	movs	r2, #255	; 0xff
 800725c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2243      	movs	r2, #67	; 0x43
 8007278:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800727a:	4b03      	ldr	r3, [pc, #12]	; (8007288 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	2000035c 	.word	0x2000035c

0800728c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2243      	movs	r2, #67	; 0x43
 8007298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800729a:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	20000318 	.word	0x20000318

080072ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2243      	movs	r2, #67	; 0x43
 80072b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80072ba:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	200003a0 	.word	0x200003a0

080072cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	220a      	movs	r2, #10
 80072d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80072da:	4b03      	ldr	r3, [pc, #12]	; (80072e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	200002d4 	.word	0x200002d4

080072ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80072f6:	2302      	movs	r3, #2
 80072f8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800732c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	371c      	adds	r7, #28
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800735a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr

08007370 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800737e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01c      	beq.n	80073c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007390:	2b00      	cmp	r3, #0
 8007392:	d115      	bne.n	80073c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2181      	movs	r1, #129	; 0x81
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f002 fdcd 	bl	8009f56 <USBD_LL_Transmit>

      return USBD_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	e002      	b.n	80073c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e000      	b.n	80073c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80073c4:	2302      	movs	r3, #2
  }
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d017      	beq.n	8007418 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7c1b      	ldrb	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073fa:	2101      	movs	r1, #1
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 fdcd 	bl	8009f9c <USBD_LL_PrepareReceive>
 8007402:	e007      	b.n	8007414 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800740a:	2340      	movs	r3, #64	; 0x40
 800740c:	2101      	movs	r1, #1
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f002 fdc4 	bl	8009f9c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e000      	b.n	800741a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007418:	2302      	movs	r3, #2
  }
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	4613      	mov	r3, r2
 800742e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007436:	2302      	movs	r3, #2
 8007438:	e01a      	b.n	8007470 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f002 fc31 	bl	8009cd0 <USBD_LL_Init>

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e001      	b.n	800749e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800749a:	2302      	movs	r3, #2
 800749c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr

080074aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f002 fc66 	bl	8009d84 <USBD_LL_Start>

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80074e2:	2302      	movs	r3, #2
 80074e4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00c      	beq.n	800750a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	4611      	mov	r1, r2
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4611      	mov	r1, r2
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fe62 	bl	8008216 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2b02      	cmp	r3, #2
 8007574:	d016      	beq.n	80075a4 <USBD_LL_SetupStage+0x6a>
 8007576:	2b02      	cmp	r3, #2
 8007578:	d81c      	bhi.n	80075b4 <USBD_LL_SetupStage+0x7a>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <USBD_LL_SetupStage+0x4a>
 800757e:	2b01      	cmp	r3, #1
 8007580:	d008      	beq.n	8007594 <USBD_LL_SetupStage+0x5a>
 8007582:	e017      	b.n	80075b4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9c5 	bl	800791c <USBD_StdDevReq>
    break;
 8007592:	e01a      	b.n	80075ca <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fa27 	bl	80079f0 <USBD_StdItfReq>
    break;
 80075a2:	e012      	b.n	80075ca <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa67 	bl	8007a80 <USBD_StdEPReq>
    break;
 80075b2:	e00a      	b.n	80075ca <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80075ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f002 fc3e 	bl	8009e44 <USBD_LL_StallEP>
    break;
 80075c8:	bf00      	nop
  }

  return USBD_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	460b      	mov	r3, r1
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80075e2:	7afb      	ldrb	r3, [r7, #11]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d14b      	bne.n	8007680 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80075ee:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d134      	bne.n	8007664 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d919      	bls.n	800763a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800761c:	429a      	cmp	r2, r3
 800761e:	d203      	bcs.n	8007628 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007624:	b29b      	uxth	r3, r3
 8007626:	e002      	b.n	800762e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fee1 	bl	80083fa <USBD_CtlContinueRx>
 8007638:	e038      	b.n	80076ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800764c:	2b03      	cmp	r3, #3
 800764e:	d105      	bne.n	800765c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fede 	bl	800841e <USBD_CtlSendStatus>
 8007662:	e023      	b.n	80076ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800766a:	2b05      	cmp	r3, #5
 800766c:	d11e      	bne.n	80076ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007676:	2100      	movs	r1, #0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f002 fbe3 	bl	8009e44 <USBD_LL_StallEP>
 800767e:	e015      	b.n	80076ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00d      	beq.n	80076a8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007692:	2b03      	cmp	r3, #3
 8007694:	d108      	bne.n	80076a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	7afa      	ldrb	r2, [r7, #11]
 80076a0:	4611      	mov	r1, r2
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	4798      	blx	r3
 80076a6:	e001      	b.n	80076ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076a8:	2302      	movs	r3, #2
 80076aa:	e000      	b.n	80076ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	460b      	mov	r3, r1
 80076c0:	607a      	str	r2, [r7, #4]
 80076c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80076c4:	7afb      	ldrb	r3, [r7, #11]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d17f      	bne.n	80077ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3314      	adds	r3, #20
 80076ce:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d15c      	bne.n	8007794 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d915      	bls.n	8007712 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fe4b 	bl	800839a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007704:	2300      	movs	r3, #0
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f002 fc46 	bl	8009f9c <USBD_LL_PrepareReceive>
 8007710:	e04e      	b.n	80077b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	6912      	ldr	r2, [r2, #16]
 800771a:	fbb3 f1f2 	udiv	r1, r3, r2
 800771e:	fb01 f202 	mul.w	r2, r1, r2
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d11c      	bne.n	8007762 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007730:	429a      	cmp	r2, r3
 8007732:	d316      	bcc.n	8007762 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800773e:	429a      	cmp	r2, r3
 8007740:	d20f      	bcs.n	8007762 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fe27 	bl	800839a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	2100      	movs	r1, #0
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f002 fc1e 	bl	8009f9c <USBD_LL_PrepareReceive>
 8007760:	e026      	b.n	80077b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007774:	2b03      	cmp	r3, #3
 8007776:	d105      	bne.n	8007784 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007784:	2180      	movs	r1, #128	; 0x80
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f002 fb5c 	bl	8009e44 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fe59 	bl	8008444 <USBD_CtlReceiveStatus>
 8007792:	e00d      	b.n	80077b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800779a:	2b04      	cmp	r3, #4
 800779c:	d004      	beq.n	80077a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80077a8:	2180      	movs	r1, #128	; 0x80
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f002 fb4a 	bl	8009e44 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d11d      	bne.n	80077f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fe81 	bl	80074c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80077c8:	e015      	b.n	80077f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d108      	bne.n	80077f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	7afa      	ldrb	r2, [r7, #11]
 80077ea:	4611      	mov	r1, r2
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	4798      	blx	r3
 80077f0:	e001      	b.n	80077f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077f2:	2302      	movs	r3, #2
 80077f4:	e000      	b.n	80077f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	2200      	movs	r2, #0
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f002 fad3 	bl	8009dba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2240      	movs	r2, #64	; 0x40
 8007820:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	2200      	movs	r2, #0
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f002 fac5 	bl	8009dba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2240      	movs	r2, #64	; 0x40
 800783a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6852      	ldr	r2, [r2, #4]
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	4611      	mov	r1, r2
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
  }

  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2204      	movs	r2, #4
 80078b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr

080078e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d10b      	bne.n	8007912 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d005      	beq.n	8007912 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007932:	2b40      	cmp	r3, #64	; 0x40
 8007934:	d005      	beq.n	8007942 <USBD_StdDevReq+0x26>
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d84f      	bhi.n	80079da <USBD_StdDevReq+0xbe>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <USBD_StdDevReq+0x36>
 800793e:	2b20      	cmp	r3, #32
 8007940:	d14b      	bne.n	80079da <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
    break;
 8007950:	e048      	b.n	80079e4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	2b09      	cmp	r3, #9
 8007958:	d839      	bhi.n	80079ce <USBD_StdDevReq+0xb2>
 800795a:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <USBD_StdDevReq+0x44>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	080079b1 	.word	0x080079b1
 8007964:	080079c5 	.word	0x080079c5
 8007968:	080079cf 	.word	0x080079cf
 800796c:	080079bb 	.word	0x080079bb
 8007970:	080079cf 	.word	0x080079cf
 8007974:	08007993 	.word	0x08007993
 8007978:	08007989 	.word	0x08007989
 800797c:	080079cf 	.word	0x080079cf
 8007980:	080079a7 	.word	0x080079a7
 8007984:	0800799d 	.word	0x0800799d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9da 	bl	8007d44 <USBD_GetDescriptor>
      break;
 8007990:	e022      	b.n	80079d8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 facf 	bl	8007f38 <USBD_SetAddress>
      break;
 800799a:	e01d      	b.n	80079d8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fb0e 	bl	8007fc0 <USBD_SetConfig>
      break;
 80079a4:	e018      	b.n	80079d8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fb97 	bl	80080dc <USBD_GetConfig>
      break;
 80079ae:	e013      	b.n	80079d8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fbc7 	bl	8008146 <USBD_GetStatus>
      break;
 80079b8:	e00e      	b.n	80079d8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fbf5 	bl	80081ac <USBD_SetFeature>
      break;
 80079c2:	e009      	b.n	80079d8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fc04 	bl	80081d4 <USBD_ClrFeature>
      break;
 80079cc:	e004      	b.n	80079d8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fc5c 	bl	800828e <USBD_CtlError>
      break;
 80079d6:	bf00      	nop
    }
    break;
 80079d8:	e004      	b.n	80079e4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fc56 	bl	800828e <USBD_CtlError>
    break;
 80079e2:	bf00      	nop
  }

  return ret;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop

080079f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a06:	2b40      	cmp	r3, #64	; 0x40
 8007a08:	d005      	beq.n	8007a16 <USBD_StdItfReq+0x26>
 8007a0a:	2b40      	cmp	r3, #64	; 0x40
 8007a0c:	d82e      	bhi.n	8007a6c <USBD_StdItfReq+0x7c>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <USBD_StdItfReq+0x26>
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d12a      	bne.n	8007a6c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d81d      	bhi.n	8007a5e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	889b      	ldrh	r3, [r3, #4]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d813      	bhi.n	8007a54 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d110      	bne.n	8007a68 <USBD_StdItfReq+0x78>
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10d      	bne.n	8007a68 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fce6 	bl	800841e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007a52:	e009      	b.n	8007a68 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fc19 	bl	800828e <USBD_CtlError>
      break;
 8007a5c:	e004      	b.n	8007a68 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc14 	bl	800828e <USBD_CtlError>
      break;
 8007a66:	e000      	b.n	8007a6a <USBD_StdItfReq+0x7a>
      break;
 8007a68:	bf00      	nop
    }
    break;
 8007a6a:	e004      	b.n	8007a76 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fc0d 	bl	800828e <USBD_CtlError>
    break;
 8007a74:	bf00      	nop
  }

  return USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	889b      	ldrh	r3, [r3, #4]
 8007a92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	d007      	beq.n	8007ab0 <USBD_StdEPReq+0x30>
 8007aa0:	2b40      	cmp	r3, #64	; 0x40
 8007aa2:	f200 8144 	bhi.w	8007d2e <USBD_StdEPReq+0x2ae>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <USBD_StdEPReq+0x40>
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	f040 813f 	bne.w	8007d2e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
    break;
 8007abe:	e13b      	b.n	8007d38 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d10a      	bne.n	8007ae2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	e12b      	b.n	8007d3a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d007      	beq.n	8007afa <USBD_StdEPReq+0x7a>
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	f300 8119 	bgt.w	8007d22 <USBD_StdEPReq+0x2a2>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d072      	beq.n	8007bda <USBD_StdEPReq+0x15a>
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d03a      	beq.n	8007b6e <USBD_StdEPReq+0xee>
 8007af8:	e113      	b.n	8007d22 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d002      	beq.n	8007b0a <USBD_StdEPReq+0x8a>
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d015      	beq.n	8007b34 <USBD_StdEPReq+0xb4>
 8007b08:	e02b      	b.n	8007b62 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <USBD_StdEPReq+0xaa>
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b80      	cmp	r3, #128	; 0x80
 8007b14:	d009      	beq.n	8007b2a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f002 f992 	bl	8009e44 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007b20:	2180      	movs	r1, #128	; 0x80
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f002 f98e 	bl	8009e44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b28:	e020      	b.n	8007b6c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fbae 	bl	800828e <USBD_CtlError>
        break;
 8007b32:	e01b      	b.n	8007b6c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	885b      	ldrh	r3, [r3, #2]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10e      	bne.n	8007b5a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <USBD_StdEPReq+0xda>
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b80      	cmp	r3, #128	; 0x80
 8007b46:	d008      	beq.n	8007b5a <USBD_StdEPReq+0xda>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	88db      	ldrh	r3, [r3, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d104      	bne.n	8007b5a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f002 f975 	bl	8009e44 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fc5f 	bl	800841e <USBD_CtlSendStatus>

        break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb92 	bl	800828e <USBD_CtlError>
        break;
 8007b6a:	bf00      	nop
      }
      break;
 8007b6c:	e0de      	b.n	8007d2c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d002      	beq.n	8007b7e <USBD_StdEPReq+0xfe>
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d015      	beq.n	8007ba8 <USBD_StdEPReq+0x128>
 8007b7c:	e026      	b.n	8007bcc <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <USBD_StdEPReq+0x11e>
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b80      	cmp	r3, #128	; 0x80
 8007b88:	d009      	beq.n	8007b9e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f002 f958 	bl	8009e44 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f002 f954 	bl	8009e44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b9c:	e01c      	b.n	8007bd8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fb74 	bl	800828e <USBD_CtlError>
        break;
 8007ba6:	e017      	b.n	8007bd8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	885b      	ldrh	r3, [r3, #2]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d112      	bne.n	8007bd6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d004      	beq.n	8007bc4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f002 f95f 	bl	8009e82 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fc2a 	bl	800841e <USBD_CtlSendStatus>
        }
        break;
 8007bca:	e004      	b.n	8007bd6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb5d 	bl	800828e <USBD_CtlError>
        break;
 8007bd4:	e000      	b.n	8007bd8 <USBD_StdEPReq+0x158>
        break;
 8007bd6:	bf00      	nop
      }
      break;
 8007bd8:	e0a8      	b.n	8007d2c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d002      	beq.n	8007bea <USBD_StdEPReq+0x16a>
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d031      	beq.n	8007c4c <USBD_StdEPReq+0x1cc>
 8007be8:	e095      	b.n	8007d16 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <USBD_StdEPReq+0x180>
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b80      	cmp	r3, #128	; 0x80
 8007bf4:	d004      	beq.n	8007c00 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb48 	bl	800828e <USBD_CtlError>
          break;
 8007bfe:	e08f      	b.n	8007d20 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da0b      	bge.n	8007c20 <USBD_StdEPReq+0x1a0>
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	3310      	adds	r3, #16
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	e00a      	b.n	8007c36 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	4413      	add	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2202      	movs	r2, #2
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fb8c 	bl	8008362 <USBD_CtlSendData>
          break;
 8007c4a:	e069      	b.n	8007d20 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	da11      	bge.n	8007c78 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	f003 020f 	and.w	r2, r3, #15
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	3318      	adds	r3, #24
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d117      	bne.n	8007c9e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb0c 	bl	800828e <USBD_CtlError>
            break;
 8007c76:	e053      	b.n	8007d20 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	f003 020f 	and.w	r2, r3, #15
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 faf9 	bl	800828e <USBD_CtlError>
            break;
 8007c9c:	e040      	b.n	8007d20 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da0b      	bge.n	8007cbe <USBD_StdEPReq+0x23e>
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	3310      	adds	r3, #16
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	3304      	adds	r3, #4
 8007cbc:	e00a      	b.n	8007cd4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <USBD_StdEPReq+0x262>
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d103      	bne.n	8007cea <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	e00e      	b.n	8007d08 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f002 f8e6 	bl	8009ec0 <USBD_LL_IsStallEP>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e002      	b.n	8007d08 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fb27 	bl	8008362 <USBD_CtlSendData>
          break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fab8 	bl	800828e <USBD_CtlError>
        break;
 8007d1e:	bf00      	nop
      }
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fab2 	bl	800828e <USBD_CtlError>
      break;
 8007d2a:	bf00      	nop
    }
    break;
 8007d2c:	e004      	b.n	8007d38 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 faac 	bl	800828e <USBD_CtlError>
    break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	2b06      	cmp	r3, #6
 8007d5a:	f200 80c9 	bhi.w	8007ef0 <USBD_GetDescriptor+0x1ac>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <USBD_GetDescriptor+0x20>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007dd9 	.word	0x08007dd9
 8007d70:	08007ef1 	.word	0x08007ef1
 8007d74:	08007ef1 	.word	0x08007ef1
 8007d78:	08007e9d 	.word	0x08007e9d
 8007d7c:	08007ec3 	.word	0x08007ec3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 010a 	add.w	r1, r7, #10
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
    break;
 8007d96:	e0b0      	b.n	8007efa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7c1b      	ldrb	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10d      	bne.n	8007dbc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f107 020a 	add.w	r2, r7, #10
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	2202      	movs	r2, #2
 8007db8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007dba:	e09e      	b.n	8007efa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	f107 020a 	add.w	r2, r7, #10
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	701a      	strb	r2, [r3, #0]
    break;
 8007dd6:	e090      	b.n	8007efa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	d856      	bhi.n	8007e90 <USBD_GetDescriptor+0x14c>
 8007de2:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <USBD_GetDescriptor+0xa4>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e01 	.word	0x08007e01
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	08007e31 	.word	0x08007e31
 8007df4:	08007e49 	.word	0x08007e49
 8007df8:	08007e61 	.word	0x08007e61
 8007dfc:	08007e79 	.word	0x08007e79
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 010a 	add.w	r1, r7, #10
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
      break;
 8007e16:	e040      	b.n	8007e9a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7c12      	ldrb	r2, [r2, #16]
 8007e24:	f107 010a 	add.w	r1, r7, #10
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	60f8      	str	r0, [r7, #12]
      break;
 8007e2e:	e034      	b.n	8007e9a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 010a 	add.w	r1, r7, #10
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
      break;
 8007e46:	e028      	b.n	8007e9a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	7c12      	ldrb	r2, [r2, #16]
 8007e54:	f107 010a 	add.w	r1, r7, #10
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	60f8      	str	r0, [r7, #12]
      break;
 8007e5e:	e01c      	b.n	8007e9a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7c12      	ldrb	r2, [r2, #16]
 8007e6c:	f107 010a 	add.w	r1, r7, #10
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
 8007e74:	60f8      	str	r0, [r7, #12]
      break;
 8007e76:	e010      	b.n	8007e9a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	7c12      	ldrb	r2, [r2, #16]
 8007e84:	f107 010a 	add.w	r1, r7, #10
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
 8007e8c:	60f8      	str	r0, [r7, #12]
      break;
 8007e8e:	e004      	b.n	8007e9a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9fb 	bl	800828e <USBD_CtlError>
      return;
 8007e98:	e04b      	b.n	8007f32 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007e9a:	e02e      	b.n	8007efa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7c1b      	ldrb	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d109      	bne.n	8007eb8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	f107 020a 	add.w	r2, r7, #10
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	60f8      	str	r0, [r7, #12]
      break;
 8007eb6:	e020      	b.n	8007efa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9e7 	bl	800828e <USBD_CtlError>
      return;
 8007ec0:	e037      	b.n	8007f32 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	7c1b      	ldrb	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10d      	bne.n	8007ee6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	f107 020a 	add.w	r2, r7, #10
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4798      	blx	r3
 8007eda:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	701a      	strb	r2, [r3, #0]
      break;
 8007ee4:	e009      	b.n	8007efa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9d0 	bl	800828e <USBD_CtlError>
      return;
 8007eee:	e020      	b.n	8007f32 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9cb 	bl	800828e <USBD_CtlError>
    return;
 8007ef8:	e01b      	b.n	8007f32 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007efa:	897b      	ldrh	r3, [r7, #10]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d011      	beq.n	8007f24 <USBD_GetDescriptor+0x1e0>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00d      	beq.n	8007f24 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	88da      	ldrh	r2, [r3, #6]
 8007f0c:	897b      	ldrh	r3, [r7, #10]
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	bf28      	it	cs
 8007f12:	4613      	movcs	r3, r2
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007f18:	897b      	ldrh	r3, [r7, #10]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68f9      	ldr	r1, [r7, #12]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa1f 	bl	8008362 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	88db      	ldrh	r3, [r3, #6]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d102      	bne.n	8007f32 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa76 	bl	800841e <USBD_CtlSendStatus>
  }
}
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	889b      	ldrh	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d130      	bne.n	8007fac <USBD_SetAddress+0x74>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88db      	ldrh	r3, [r3, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d12c      	bne.n	8007fac <USBD_SetAddress+0x74>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	885b      	ldrh	r3, [r3, #2]
 8007f56:	2b7f      	cmp	r3, #127	; 0x7f
 8007f58:	d828      	bhi.n	8007fac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d104      	bne.n	8007f7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f98b 	bl	800828e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f78:	e01d      	b.n	8007fb6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7bfa      	ldrb	r2, [r7, #15]
 8007f7e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 ffc6 	bl	8009f18 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa46 	bl	800841e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa0:	e009      	b.n	8007fb6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007faa:	e004      	b.n	8007fb6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f96d 	bl	800828e <USBD_CtlError>
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	885b      	ldrh	r3, [r3, #2]
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	4b41      	ldr	r3, [pc, #260]	; (80080d8 <USBD_SetConfig+0x118>)
 8007fd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fd4:	4b40      	ldr	r3, [pc, #256]	; (80080d8 <USBD_SetConfig+0x118>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d904      	bls.n	8007fe6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f955 	bl	800828e <USBD_CtlError>
 8007fe4:	e075      	b.n	80080d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d002      	beq.n	8007ff6 <USBD_SetConfig+0x36>
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d023      	beq.n	800803c <USBD_SetConfig+0x7c>
 8007ff4:	e062      	b.n	80080bc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007ff6:	4b38      	ldr	r3, [pc, #224]	; (80080d8 <USBD_SetConfig+0x118>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01a      	beq.n	8008034 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007ffe:	4b36      	ldr	r3, [pc, #216]	; (80080d8 <USBD_SetConfig+0x118>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2203      	movs	r2, #3
 800800c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008010:	4b31      	ldr	r3, [pc, #196]	; (80080d8 <USBD_SetConfig+0x118>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fa5d 	bl	80074d6 <USBD_SetClassConfig>
 800801c:	4603      	mov	r3, r0
 800801e:	2b02      	cmp	r3, #2
 8008020:	d104      	bne.n	800802c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f932 	bl	800828e <USBD_CtlError>
          return;
 800802a:	e052      	b.n	80080d2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9f6 	bl	800841e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008032:	e04e      	b.n	80080d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f9f2 	bl	800841e <USBD_CtlSendStatus>
      break;
 800803a:	e04a      	b.n	80080d2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800803c:	4b26      	ldr	r3, [pc, #152]	; (80080d8 <USBD_SetConfig+0x118>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d112      	bne.n	800806a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800804c:	4b22      	ldr	r3, [pc, #136]	; (80080d8 <USBD_SetConfig+0x118>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008056:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <USBD_SetConfig+0x118>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff fa59 	bl	8007514 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9db 	bl	800841e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008068:	e033      	b.n	80080d2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <USBD_SetConfig+0x118>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d01d      	beq.n	80080b4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fa47 	bl	8007514 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <USBD_SetConfig+0x118>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008090:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <USBD_SetConfig+0x118>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fa1d 	bl	80074d6 <USBD_SetClassConfig>
 800809c:	4603      	mov	r3, r0
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d104      	bne.n	80080ac <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f8f2 	bl	800828e <USBD_CtlError>
          return;
 80080aa:	e012      	b.n	80080d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f9b6 	bl	800841e <USBD_CtlSendStatus>
      break;
 80080b2:	e00e      	b.n	80080d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9b2 	bl	800841e <USBD_CtlSendStatus>
      break;
 80080ba:	e00a      	b.n	80080d2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8e5 	bl	800828e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80080c4:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <USBD_SetConfig+0x118>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fa22 	bl	8007514 <USBD_ClrClassConfig>
      break;
 80080d0:	bf00      	nop
    }
  }
}
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	200005fc 	.word	0x200005fc

080080dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	88db      	ldrh	r3, [r3, #6]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d004      	beq.n	80080f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f8cc 	bl	800828e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80080f6:	e022      	b.n	800813e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080fe:	2b02      	cmp	r3, #2
 8008100:	dc02      	bgt.n	8008108 <USBD_GetConfig+0x2c>
 8008102:	2b00      	cmp	r3, #0
 8008104:	dc03      	bgt.n	800810e <USBD_GetConfig+0x32>
 8008106:	e015      	b.n	8008134 <USBD_GetConfig+0x58>
 8008108:	2b03      	cmp	r3, #3
 800810a:	d00b      	beq.n	8008124 <USBD_GetConfig+0x48>
 800810c:	e012      	b.n	8008134 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3308      	adds	r3, #8
 8008118:	2201      	movs	r2, #1
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f920 	bl	8008362 <USBD_CtlSendData>
      break;
 8008122:	e00c      	b.n	800813e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3304      	adds	r3, #4
 8008128:	2201      	movs	r2, #1
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f918 	bl	8008362 <USBD_CtlSendData>
      break;
 8008132:	e004      	b.n	800813e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f8a9 	bl	800828e <USBD_CtlError>
      break;
 800813c:	bf00      	nop
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008156:	3b01      	subs	r3, #1
 8008158:	2b02      	cmp	r3, #2
 800815a:	d81e      	bhi.n	800819a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d004      	beq.n	800816e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f891 	bl	800828e <USBD_CtlError>
      break;
 800816c:	e01a      	b.n	80081a4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f043 0202 	orr.w	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	330c      	adds	r3, #12
 800818e:	2202      	movs	r2, #2
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8e5 	bl	8008362 <USBD_CtlSendData>
    break;
 8008198:	e004      	b.n	80081a4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f876 	bl	800828e <USBD_CtlError>
    break;
 80081a2:	bf00      	nop
  }
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d106      	bne.n	80081cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f929 	bl	800841e <USBD_CtlSendStatus>
  }

}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80081e4:	3b01      	subs	r3, #1
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d80b      	bhi.n	8008202 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	885b      	ldrh	r3, [r3, #2]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10c      	bne.n	800820c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f90f 	bl	800841e <USBD_CtlSendStatus>
    }
    break;
 8008200:	e004      	b.n	800820c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f842 	bl	800828e <USBD_CtlError>
    break;
 800820a:	e000      	b.n	800820e <USBD_ClrFeature+0x3a>
    break;
 800820c:	bf00      	nop
  }
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781a      	ldrb	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785a      	ldrb	r2, [r3, #1]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	3302      	adds	r3, #2
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b29a      	uxth	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	3303      	adds	r3, #3
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	b29b      	uxth	r3, r3
 8008244:	4413      	add	r3, r2
 8008246:	b29a      	uxth	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	3304      	adds	r3, #4
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29a      	uxth	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	3305      	adds	r3, #5
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b29b      	uxth	r3, r3
 8008260:	4413      	add	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	3306      	adds	r3, #6
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b29a      	uxth	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	3307      	adds	r3, #7
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	b29b      	uxth	r3, r3
 800827c:	4413      	add	r3, r2
 800827e:	b29a      	uxth	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	80da      	strh	r2, [r3, #6]

}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008298:	2180      	movs	r1, #128	; 0x80
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 fdd2 	bl	8009e44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80082a0:	2100      	movs	r1, #0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fdce 	bl	8009e44 <USBD_LL_StallEP>
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d032      	beq.n	800832c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 f834 	bl	8008334 <USBD_GetLen>
 80082cc:	4603      	mov	r3, r0
 80082ce:	3301      	adds	r3, #1
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	75fa      	strb	r2, [r7, #23]
 80082e0:	461a      	mov	r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	7812      	ldrb	r2, [r2, #0]
 80082ea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	75fa      	strb	r2, [r7, #23]
 80082f2:	461a      	mov	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4413      	add	r3, r2
 80082f8:	2203      	movs	r2, #3
 80082fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082fc:	e012      	b.n	8008324 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	60fa      	str	r2, [r7, #12]
 8008304:	7dfa      	ldrb	r2, [r7, #23]
 8008306:	1c51      	adds	r1, r2, #1
 8008308:	75f9      	strb	r1, [r7, #23]
 800830a:	4611      	mov	r1, r2
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	440a      	add	r2, r1
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	75fa      	strb	r2, [r7, #23]
 800831a:	461a      	mov	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4413      	add	r3, r2
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e8      	bne.n	80082fe <USBD_GetString+0x4e>
    }
  }
}
 800832c:	bf00      	nop
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008340:	e005      	b.n	800834e <USBD_GetLen+0x1a>
    {
        len++;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	3301      	adds	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3301      	adds	r3, #1
 800834c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f5      	bne.n	8008342 <USBD_GetLen+0xe>
    }

    return len;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr

08008362 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	4613      	mov	r3, r2
 800836e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2202      	movs	r2, #2
 8008374:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008378:	88fa      	ldrh	r2, [r7, #6]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f001 fde3 	bl	8009f56 <USBD_LL_Transmit>

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	4613      	mov	r3, r2
 80083a6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	2100      	movs	r1, #0
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f001 fdd1 	bl	8009f56 <USBD_LL_Transmit>

  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	4613      	mov	r3, r2
 80083ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2203      	movs	r2, #3
 80083d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80083d4:	88fa      	ldrh	r2, [r7, #6]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80083e4:	88fb      	ldrh	r3, [r7, #6]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	2100      	movs	r1, #0
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f001 fdd6 	bl	8009f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	4613      	mov	r3, r2
 8008406:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	2100      	movs	r1, #0
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f001 fdc4 	bl	8009f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2204      	movs	r2, #4
 800842a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800842e:	2300      	movs	r3, #0
 8008430:	2200      	movs	r2, #0
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fd8e 	bl	8009f56 <USBD_LL_Transmit>

  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2205      	movs	r2, #5
 8008450:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008454:	2300      	movs	r3, #0
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f001 fd9e 	bl	8009f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008470:	2200      	movs	r2, #0
 8008472:	4912      	ldr	r1, [pc, #72]	; (80084bc <MX_USB_DEVICE_Init+0x50>)
 8008474:	4812      	ldr	r0, [pc, #72]	; (80084c0 <MX_USB_DEVICE_Init+0x54>)
 8008476:	f7fe ffd4 	bl	8007422 <USBD_Init>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008480:	f7f8 fbf0 	bl	8000c64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008484:	490f      	ldr	r1, [pc, #60]	; (80084c4 <MX_USB_DEVICE_Init+0x58>)
 8008486:	480e      	ldr	r0, [pc, #56]	; (80084c0 <MX_USB_DEVICE_Init+0x54>)
 8008488:	f7fe fff6 	bl	8007478 <USBD_RegisterClass>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008492:	f7f8 fbe7 	bl	8000c64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008496:	490c      	ldr	r1, [pc, #48]	; (80084c8 <MX_USB_DEVICE_Init+0x5c>)
 8008498:	4809      	ldr	r0, [pc, #36]	; (80084c0 <MX_USB_DEVICE_Init+0x54>)
 800849a:	f7fe ff27 	bl	80072ec <USBD_CDC_RegisterInterface>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084a4:	f7f8 fbde 	bl	8000c64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084a8:	4805      	ldr	r0, [pc, #20]	; (80084c0 <MX_USB_DEVICE_Init+0x54>)
 80084aa:	f7fe fffe 	bl	80074aa <USBD_Start>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084b4:	f7f8 fbd6 	bl	8000c64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084b8:	bf00      	nop
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200003f4 	.word	0x200003f4
 80084c0:	20000600 	.word	0x20000600
 80084c4:	200002e0 	.word	0x200002e0
 80084c8:	200003e4 	.word	0x200003e4

080084cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084d0:	2200      	movs	r2, #0
 80084d2:	4905      	ldr	r1, [pc, #20]	; (80084e8 <CDC_Init_FS+0x1c>)
 80084d4:	4805      	ldr	r0, [pc, #20]	; (80084ec <CDC_Init_FS+0x20>)
 80084d6:	f7fe ff1f 	bl	8007318 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084da:	4905      	ldr	r1, [pc, #20]	; (80084f0 <CDC_Init_FS+0x24>)
 80084dc:	4803      	ldr	r0, [pc, #12]	; (80084ec <CDC_Init_FS+0x20>)
 80084de:	f7fe ff34 	bl	800734a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20001488 	.word	0x20001488
 80084ec:	20000600 	.word	0x20000600
 80084f0:	20000c88 	.word	0x20000c88

080084f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr
	...

08008504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	6039      	str	r1, [r7, #0]
 800850e:	71fb      	strb	r3, [r7, #7]
 8008510:	4613      	mov	r3, r2
 8008512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	2b23      	cmp	r3, #35	; 0x23
 8008518:	d84a      	bhi.n	80085b0 <CDC_Control_FS+0xac>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <CDC_Control_FS+0x1c>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	080085b1 	.word	0x080085b1
 8008524:	080085b1 	.word	0x080085b1
 8008528:	080085b1 	.word	0x080085b1
 800852c:	080085b1 	.word	0x080085b1
 8008530:	080085b1 	.word	0x080085b1
 8008534:	080085b1 	.word	0x080085b1
 8008538:	080085b1 	.word	0x080085b1
 800853c:	080085b1 	.word	0x080085b1
 8008540:	080085b1 	.word	0x080085b1
 8008544:	080085b1 	.word	0x080085b1
 8008548:	080085b1 	.word	0x080085b1
 800854c:	080085b1 	.word	0x080085b1
 8008550:	080085b1 	.word	0x080085b1
 8008554:	080085b1 	.word	0x080085b1
 8008558:	080085b1 	.word	0x080085b1
 800855c:	080085b1 	.word	0x080085b1
 8008560:	080085b1 	.word	0x080085b1
 8008564:	080085b1 	.word	0x080085b1
 8008568:	080085b1 	.word	0x080085b1
 800856c:	080085b1 	.word	0x080085b1
 8008570:	080085b1 	.word	0x080085b1
 8008574:	080085b1 	.word	0x080085b1
 8008578:	080085b1 	.word	0x080085b1
 800857c:	080085b1 	.word	0x080085b1
 8008580:	080085b1 	.word	0x080085b1
 8008584:	080085b1 	.word	0x080085b1
 8008588:	080085b1 	.word	0x080085b1
 800858c:	080085b1 	.word	0x080085b1
 8008590:	080085b1 	.word	0x080085b1
 8008594:	080085b1 	.word	0x080085b1
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085b1 	.word	0x080085b1
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085b1 	.word	0x080085b1
 80085a8:	080085b1 	.word	0x080085b1
 80085ac:	080085b1 	.word	0x080085b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085b0:	bf00      	nop
  }

  return (USBD_OK);
 80085b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop

080085c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e014      	b.n	80085fa <CDC_Receive_FS+0x3a>
	{
	if (rx_buffer_len < MAX_RX_BUFFER_SIZE)
 80085d0:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <CDC_Receive_FS+0x84>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085d8:	d20c      	bcs.n	80085f4 <CDC_Receive_FS+0x34>
	{
	  rx_buffer[rx_buffer_len] = Buf[i];
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	441a      	add	r2, r3
 80085e0:	4b18      	ldr	r3, [pc, #96]	; (8008644 <CDC_Receive_FS+0x84>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	7811      	ldrb	r1, [r2, #0]
 80085e6:	4a18      	ldr	r2, [pc, #96]	; (8008648 <CDC_Receive_FS+0x88>)
 80085e8:	54d1      	strb	r1, [r2, r3]
	  rx_buffer_len = rx_buffer_len + 1;
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <CDC_Receive_FS+0x84>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3301      	adds	r3, #1
 80085f0:	4a14      	ldr	r2, [pc, #80]	; (8008644 <CDC_Receive_FS+0x84>)
 80085f2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	429a      	cmp	r2, r3
 8008602:	d8e5      	bhi.n	80085d0 <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (rx_buffer_len > 0 && rx_buffer[rx_buffer_len - 1] == '\n')
 8008604:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <CDC_Receive_FS+0x84>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00f      	beq.n	800862c <CDC_Receive_FS+0x6c>
 800860c:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <CDC_Receive_FS+0x84>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3b01      	subs	r3, #1
 8008612:	4a0d      	ldr	r2, [pc, #52]	; (8008648 <CDC_Receive_FS+0x88>)
 8008614:	5cd3      	ldrb	r3, [r2, r3]
 8008616:	2b0a      	cmp	r3, #10
 8008618:	d108      	bne.n	800862c <CDC_Receive_FS+0x6c>
	{
		// Process the received message
		Process_Received_Message(rx_buffer, rx_buffer_len);
 800861a:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <CDC_Receive_FS+0x84>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	4809      	ldr	r0, [pc, #36]	; (8008648 <CDC_Receive_FS+0x88>)
 8008622:	f000 f83b 	bl	800869c <Process_Received_Message>
		// Clear the receive buffer
		rx_buffer_len = 0;
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <CDC_Receive_FS+0x84>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4807      	ldr	r0, [pc, #28]	; (800864c <CDC_Receive_FS+0x8c>)
 8008630:	f7fe fe8b 	bl	800734a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008634:	4805      	ldr	r0, [pc, #20]	; (800864c <CDC_Receive_FS+0x8c>)
 8008636:	f7fe feca 	bl	80073ce <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 800863a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20000c84 	.word	0x20000c84
 8008648:	2000089c 	.word	0x2000089c
 800864c:	20000600 	.word	0x20000600

08008650 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008660:	4b0d      	ldr	r3, [pc, #52]	; (8008698 <CDC_Transmit_FS+0x48>)
 8008662:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008666:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008672:	2301      	movs	r3, #1
 8008674:	e00b      	b.n	800868e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008676:	887b      	ldrh	r3, [r7, #2]
 8008678:	461a      	mov	r2, r3
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4806      	ldr	r0, [pc, #24]	; (8008698 <CDC_Transmit_FS+0x48>)
 800867e:	f7fe fe4b 	bl	8007318 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008682:	4805      	ldr	r0, [pc, #20]	; (8008698 <CDC_Transmit_FS+0x48>)
 8008684:	f7fe fe74 	bl	8007370 <USBD_CDC_TransmitPacket>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000600 	.word	0x20000600

0800869c <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* rx_buffer, uint32_t rx_buffer_len)
{
 800869c:	b5b0      	push	{r4, r5, r7, lr}
 800869e:	f5ad 5d2a 	sub.w	sp, sp, #10880	; 0x2a80
 80086a2:	b08c      	sub	sp, #48	; 0x30
 80086a4:	af04      	add	r7, sp, #16
 80086a6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80086aa:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80086ae:	6018      	str	r0, [r3, #0]
 80086b0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80086b4:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 80086b8:	6019      	str	r1, [r3, #0]
	//uint8_t RX_Packet[128]; // add null character
	//uint8_t RX_Packet_Length; // max 127
	//char RX_String[128]; // convert uint8_t to char


	if(strncmp((char*) rx_buffer, "start", strlen("start")) == 0)
 80086ba:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80086be:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80086c2:	2205      	movs	r2, #5
 80086c4:	49ab      	ldr	r1, [pc, #684]	; (8008974 <Process_Received_Message+0x2d8>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	f001 fd41 	bl	800a14e <strncmp>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d135      	bne.n	800873e <Process_Received_Message+0xa2>
	{
		sprintf(str1, "User Input: Start\r\n");
 80086d2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80086d6:	3b34      	subs	r3, #52	; 0x34
 80086d8:	49a7      	ldr	r1, [pc, #668]	; (8008978 <Process_Received_Message+0x2dc>)
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 fd08 	bl	800a0f0 <siprintf>
		sprintf(str2, "Initialized the CC1200 for Operation\r\n");
 80086e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80086e4:	3b0c      	subs	r3, #12
 80086e6:	49a5      	ldr	r1, [pc, #660]	; (800897c <Process_Received_Message+0x2e0>)
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fd01 	bl	800a0f0 <siprintf>
		CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 80086ee:	4ba4      	ldr	r3, [pc, #656]	; (8008980 <Process_Received_Message+0x2e4>)
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	4aa3      	ldr	r2, [pc, #652]	; (8008984 <Process_Received_Message+0x2e8>)
 80086f6:	49a4      	ldr	r1, [pc, #656]	; (8008988 <Process_Received_Message+0x2ec>)
 80086f8:	48a4      	ldr	r0, [pc, #656]	; (800898c <Process_Received_Message+0x2f0>)
 80086fa:	f7f7 fecb 	bl	8000494 <CC1200_Init>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 80086fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008702:	3b0c      	subs	r3, #12
 8008704:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008708:	3a34      	subs	r2, #52	; 0x34
 800870a:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800870e:	381c      	subs	r0, #28
 8008710:	499f      	ldr	r1, [pc, #636]	; (8008990 <Process_Received_Message+0x2f4>)
 8008712:	f001 fced 	bl	800a0f0 <siprintf>
 8008716:	4603      	mov	r3, r0
 8008718:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800871c:	f102 021e 	add.w	r2, r2, #30
 8008720:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008722:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008726:	f103 031e 	add.w	r3, r3, #30
 800872a:	881a      	ldrh	r2, [r3, #0]
 800872c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008730:	3b1c      	subs	r3, #28
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff ff8b 	bl	8008650 <CDC_Transmit_FS>
 800873a:	f001 b8be 	b.w	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "configure", strlen("configure")) == 0)
 800873e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008742:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008746:	2209      	movs	r2, #9
 8008748:	4992      	ldr	r1, [pc, #584]	; (8008994 <Process_Received_Message+0x2f8>)
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	f001 fcff 	bl	800a14e <strncmp>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 8144 	bne.w	80089e0 <Process_Received_Message+0x344>
	{
		sprintf(str1, "User Input: Configure\r\n");
 8008758:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800875c:	3b34      	subs	r3, #52	; 0x34
 800875e:	498e      	ldr	r1, [pc, #568]	; (8008998 <Process_Received_Message+0x2fc>)
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fcc5 	bl	800a0f0 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Configure:"
 8008766:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800876a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800876e:	498b      	ldr	r1, [pc, #556]	; (800899c <Process_Received_Message+0x300>)
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	f001 fd01 	bl	800a178 <strtok>
 8008776:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800877a:	f103 0318 	add.w	r3, r3, #24
 800877e:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[mode]"
 8008780:	4987      	ldr	r1, [pc, #540]	; (80089a0 <Process_Received_Message+0x304>)
 8008782:	2000      	movs	r0, #0
 8008784:	f001 fcf8 	bl	800a178 <strtok>
 8008788:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800878c:	f103 0318 	add.w	r3, r3, #24
 8008790:	6018      	str	r0, [r3, #0]
		if (strncmp(Token, "transmit", strlen("transmit")) == 0)
 8008792:	2208      	movs	r2, #8
 8008794:	4983      	ldr	r1, [pc, #524]	; (80089a4 <Process_Received_Message+0x308>)
 8008796:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800879a:	f103 0318 	add.w	r3, r3, #24
 800879e:	6818      	ldr	r0, [r3, #0]
 80087a0:	f001 fcd5 	bl	800a14e <strncmp>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d14f      	bne.n	800884a <Process_Received_Message+0x1ae>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 80087aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80087ae:	3b0c      	subs	r3, #12
 80087b0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80087b4:	f102 0218 	add.w	r2, r2, #24
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	497b      	ldr	r1, [pc, #492]	; (80089a8 <Process_Received_Message+0x30c>)
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 fc97 	bl	800a0f0 <siprintf>
			sprintf(str3, "Configured the CC1200 with Transmit Settings\r\n");
 80087c2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80087c6:	3b24      	subs	r3, #36	; 0x24
 80087c8:	4978      	ldr	r1, [pc, #480]	; (80089ac <Process_Received_Message+0x310>)
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 fc90 	bl	800a0f0 <siprintf>
			check = CC1200_Configure(&SPI_Info, Transmit_Register_Settings, Transmit_Extended_Register_Settings);
 80087d0:	4a77      	ldr	r2, [pc, #476]	; (80089b0 <Process_Received_Message+0x314>)
 80087d2:	4978      	ldr	r1, [pc, #480]	; (80089b4 <Process_Received_Message+0x318>)
 80087d4:	486d      	ldr	r0, [pc, #436]	; (800898c <Process_Received_Message+0x2f0>)
 80087d6:	f7f7 fe7c 	bl	80004d2 <CC1200_Configure>
 80087da:	4603      	mov	r3, r0
 80087dc:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80087e0:	f102 0217 	add.w	r2, r2, #23
 80087e4:	7013      	strb	r3, [r2, #0]
			if (check == 1)
 80087e6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80087ea:	f103 0317 	add.w	r3, r3, #23
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d107      	bne.n	8008804 <Process_Received_Message+0x168>
			{
				sprintf(str4, "Error Occurred\r\n");
 80087f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80087f8:	3b3c      	subs	r3, #60	; 0x3c
 80087fa:	496f      	ldr	r1, [pc, #444]	; (80089b8 <Process_Received_Message+0x31c>)
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fc77 	bl	800a0f0 <siprintf>
 8008802:	e006      	b.n	8008812 <Process_Received_Message+0x176>
			}
			else // check == 0
			{
				sprintf(str4, "No Error Occurred\r\n");
 8008804:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008808:	3b3c      	subs	r3, #60	; 0x3c
 800880a:	496c      	ldr	r1, [pc, #432]	; (80089bc <Process_Received_Message+0x320>)
 800880c:	4618      	mov	r0, r3
 800880e:	f001 fc6f 	bl	800a0f0 <siprintf>
			}
			Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4); // include str4
 8008812:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008816:	390c      	subs	r1, #12
 8008818:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800881c:	3a34      	subs	r2, #52	; 0x34
 800881e:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008822:	381c      	subs	r0, #28
 8008824:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008828:	3b3c      	subs	r3, #60	; 0x3c
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008830:	3b24      	subs	r3, #36	; 0x24
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	460b      	mov	r3, r1
 8008836:	4962      	ldr	r1, [pc, #392]	; (80089c0 <Process_Received_Message+0x324>)
 8008838:	f001 fc5a 	bl	800a0f0 <siprintf>
 800883c:	4603      	mov	r3, r0
 800883e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008842:	f102 021e 	add.w	r2, r2, #30
 8008846:	8013      	strh	r3, [r2, #0]
 8008848:	e085      	b.n	8008956 <Process_Received_Message+0x2ba>
		}
		else if (strncmp(Token, "receive", strlen("receive")) == 0)
 800884a:	2207      	movs	r2, #7
 800884c:	495d      	ldr	r1, [pc, #372]	; (80089c4 <Process_Received_Message+0x328>)
 800884e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008852:	f103 0318 	add.w	r3, r3, #24
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	f001 fc79 	bl	800a14e <strncmp>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d14f      	bne.n	8008902 <Process_Received_Message+0x266>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 8008862:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008866:	3b0c      	subs	r3, #12
 8008868:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800886c:	f102 0218 	add.w	r2, r2, #24
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	494d      	ldr	r1, [pc, #308]	; (80089a8 <Process_Received_Message+0x30c>)
 8008874:	4618      	mov	r0, r3
 8008876:	f001 fc3b 	bl	800a0f0 <siprintf>
			sprintf(str3, "Configured the CC1200 with Receive Settings\r\n");
 800887a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800887e:	3b24      	subs	r3, #36	; 0x24
 8008880:	4951      	ldr	r1, [pc, #324]	; (80089c8 <Process_Received_Message+0x32c>)
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fc34 	bl	800a0f0 <siprintf>
			check = CC1200_Configure(&SPI_Info, Receive_Register_Settings, Receive_Extended_Register_Settings);
 8008888:	4a50      	ldr	r2, [pc, #320]	; (80089cc <Process_Received_Message+0x330>)
 800888a:	4951      	ldr	r1, [pc, #324]	; (80089d0 <Process_Received_Message+0x334>)
 800888c:	483f      	ldr	r0, [pc, #252]	; (800898c <Process_Received_Message+0x2f0>)
 800888e:	f7f7 fe20 	bl	80004d2 <CC1200_Configure>
 8008892:	4603      	mov	r3, r0
 8008894:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008898:	f102 0217 	add.w	r2, r2, #23
 800889c:	7013      	strb	r3, [r2, #0]
			if (check == 1)
 800889e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80088a2:	f103 0317 	add.w	r3, r3, #23
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d107      	bne.n	80088bc <Process_Received_Message+0x220>
			{
				sprintf(str4, "Error Occurred\r\n");
 80088ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80088b0:	3b3c      	subs	r3, #60	; 0x3c
 80088b2:	4941      	ldr	r1, [pc, #260]	; (80089b8 <Process_Received_Message+0x31c>)
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 fc1b 	bl	800a0f0 <siprintf>
 80088ba:	e006      	b.n	80088ca <Process_Received_Message+0x22e>
			}
			else // check == 0
			{
				sprintf(str4, "No Error Occurred\r\n");
 80088bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80088c0:	3b3c      	subs	r3, #60	; 0x3c
 80088c2:	493e      	ldr	r1, [pc, #248]	; (80089bc <Process_Received_Message+0x320>)
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fc13 	bl	800a0f0 <siprintf>
			}
			Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4); // include str4
 80088ca:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80088ce:	390c      	subs	r1, #12
 80088d0:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80088d4:	3a34      	subs	r2, #52	; 0x34
 80088d6:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80088da:	381c      	subs	r0, #28
 80088dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80088e0:	3b3c      	subs	r3, #60	; 0x3c
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80088e8:	3b24      	subs	r3, #36	; 0x24
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	460b      	mov	r3, r1
 80088ee:	4934      	ldr	r1, [pc, #208]	; (80089c0 <Process_Received_Message+0x324>)
 80088f0:	f001 fbfe 	bl	800a0f0 <siprintf>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80088fa:	f102 021e 	add.w	r2, r2, #30
 80088fe:	8013      	strh	r3, [r2, #0]
 8008900:	e029      	b.n	8008956 <Process_Received_Message+0x2ba>
		}
		else
		{
			sprintf(str2, "Invalid Mode: %s\r\n", Token);
 8008902:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008906:	3b0c      	subs	r3, #12
 8008908:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800890c:	f102 0218 	add.w	r2, r2, #24
 8008910:	6812      	ldr	r2, [r2, #0]
 8008912:	4930      	ldr	r1, [pc, #192]	; (80089d4 <Process_Received_Message+0x338>)
 8008914:	4618      	mov	r0, r3
 8008916:	f001 fbeb 	bl	800a0f0 <siprintf>
			sprintf(str3, "Could Not Configure the CC1200\r\n");
 800891a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800891e:	3b24      	subs	r3, #36	; 0x24
 8008920:	492d      	ldr	r1, [pc, #180]	; (80089d8 <Process_Received_Message+0x33c>)
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fbe4 	bl	800a0f0 <siprintf>
			Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008928:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800892c:	390c      	subs	r1, #12
 800892e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008932:	3a34      	subs	r2, #52	; 0x34
 8008934:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008938:	381c      	subs	r0, #28
 800893a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800893e:	3b24      	subs	r3, #36	; 0x24
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	460b      	mov	r3, r1
 8008944:	4925      	ldr	r1, [pc, #148]	; (80089dc <Process_Received_Message+0x340>)
 8008946:	f001 fbd3 	bl	800a0f0 <siprintf>
 800894a:	4603      	mov	r3, r0
 800894c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008950:	f102 021e 	add.w	r2, r2, #30
 8008954:	8013      	strh	r3, [r2, #0]
		}

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008956:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800895a:	f103 031e 	add.w	r3, r3, #30
 800895e:	881a      	ldrh	r2, [r3, #0]
 8008960:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008964:	3b1c      	subs	r3, #28
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fe71 	bl	8008650 <CDC_Transmit_FS>
 800896e:	f000 bfa4 	b.w	80098ba <Process_Received_Message+0x121e>
 8008972:	bf00      	nop
 8008974:	0800b6cc 	.word	0x0800b6cc
 8008978:	0800b6d4 	.word	0x0800b6d4
 800897c:	0800b6e8 	.word	0x0800b6e8
 8008980:	200004c4 	.word	0x200004c4
 8008984:	40020400 	.word	0x40020400
 8008988:	20000570 	.word	0x20000570
 800898c:	20000560 	.word	0x20000560
 8008990:	0800b710 	.word	0x0800b710
 8008994:	0800b718 	.word	0x0800b718
 8008998:	0800b724 	.word	0x0800b724
 800899c:	0800b73c 	.word	0x0800b73c
 80089a0:	0800b740 	.word	0x0800b740
 80089a4:	0800b744 	.word	0x0800b744
 80089a8:	0800b750 	.word	0x0800b750
 80089ac:	0800b764 	.word	0x0800b764
 80089b0:	20000060 	.word	0x20000060
 80089b4:	20000000 	.word	0x20000000
 80089b8:	0800b794 	.word	0x0800b794
 80089bc:	0800b7a8 	.word	0x0800b7a8
 80089c0:	0800b7bc 	.word	0x0800b7bc
 80089c4:	0800b7c8 	.word	0x0800b7c8
 80089c8:	0800b7d0 	.word	0x0800b7d0
 80089cc:	200001c4 	.word	0x200001c4
 80089d0:	20000164 	.word	0x20000164
 80089d4:	0800b800 	.word	0x0800b800
 80089d8:	0800b814 	.word	0x0800b814
 80089dc:	0800b838 	.word	0x0800b838
	}
	else if (strncmp((char*) rx_buffer, "transmit", strlen("transmit")) == 0)
 80089e0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80089e4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80089e8:	2208      	movs	r2, #8
 80089ea:	49c0      	ldr	r1, [pc, #768]	; (8008cec <Process_Received_Message+0x650>)
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f001 fbae 	bl	800a14e <strncmp>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 80ad 	bne.w	8008b54 <Process_Received_Message+0x4b8>
	{
		sprintf(str1, "User Input: Transmit\r\n");
 80089fa:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80089fe:	3b34      	subs	r3, #52	; 0x34
 8008a00:	49bb      	ldr	r1, [pc, #748]	; (8008cf0 <Process_Received_Message+0x654>)
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fb74 	bl	800a0f0 <siprintf>
		sprintf(str2, "Set the CC1200 into Transmit Mode\r\n");
 8008a08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008a0c:	3b0c      	subs	r3, #12
 8008a0e:	49b9      	ldr	r1, [pc, #740]	; (8008cf4 <Process_Received_Message+0x658>)
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 fb6d 	bl	800a0f0 <siprintf>
		sprintf(str3, "Transmitted the Following Message: ");
 8008a16:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008a1a:	3b24      	subs	r3, #36	; 0x24
 8008a1c:	49b6      	ldr	r1, [pc, #728]	; (8008cf8 <Process_Received_Message+0x65c>)
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 fb66 	bl	800a0f0 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Transmit:"
 8008a24:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008a28:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008a2c:	49b3      	ldr	r1, [pc, #716]	; (8008cfc <Process_Received_Message+0x660>)
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	f001 fba2 	bl	800a178 <strtok>
 8008a34:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008a38:	f103 0318 	add.w	r3, r3, #24
 8008a3c:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 8008a3e:	49b0      	ldr	r1, [pc, #704]	; (8008d00 <Process_Received_Message+0x664>)
 8008a40:	2000      	movs	r0, #0
 8008a42:	f001 fb99 	bl	800a178 <strtok>
 8008a46:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008a4a:	f103 0318 	add.w	r3, r3, #24
 8008a4e:	6018      	str	r0, [r3, #0]
		TX_Packet_Length = strlen(Token);
 8008a50:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008a54:	f103 0318 	add.w	r3, r3, #24
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	f7f7 fb8f 	bl	800017c <strlen>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008a64:	f102 0215 	add.w	r2, r2, #21
 8008a68:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "%s\r\n", Token);
 8008a6a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008a6e:	3b3c      	subs	r3, #60	; 0x3c
 8008a70:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008a74:	f102 0218 	add.w	r2, r2, #24
 8008a78:	6812      	ldr	r2, [r2, #0]
 8008a7a:	49a2      	ldr	r1, [pc, #648]	; (8008d04 <Process_Received_Message+0x668>)
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 fb37 	bl	800a0f0 <siprintf>
		for (i = 0; i < TX_Packet_Length; i++)
 8008a82:	2300      	movs	r3, #0
 8008a84:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008a88:	f102 021d 	add.w	r2, r2, #29
 8008a8c:	7013      	strb	r3, [r2, #0]
 8008a8e:	e020      	b.n	8008ad2 <Process_Received_Message+0x436>
		{
			TX_Packet[i] = (uint8_t) (Token[i]);
 8008a90:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008a94:	f103 031d 	add.w	r3, r3, #29
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008a9e:	f102 0218 	add.w	r2, r2, #24
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	441a      	add	r2, r3
 8008aa6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008aaa:	f103 031d 	add.w	r3, r3, #29
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	7811      	ldrb	r1, [r2, #0]
 8008ab2:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8008ab6:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8008aba:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < TX_Packet_Length; i++)
 8008abc:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008ac0:	f103 031d 	add.w	r3, r3, #29
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008acc:	f102 021d 	add.w	r2, r2, #29
 8008ad0:	7013      	strb	r3, [r2, #0]
 8008ad2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008ad6:	f103 031d 	add.w	r3, r3, #29
 8008ada:	781a      	ldrb	r2, [r3, #0]
 8008adc:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008ae0:	f103 0315 	add.w	r3, r3, #21
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d3d2      	bcc.n	8008a90 <Process_Received_Message+0x3f4>
		}
		CC1200_Transmit(&SPI_Info, TX_Packet, TX_Packet_Length);
 8008aea:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008aee:	f103 0315 	add.w	r3, r3, #21
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	f107 0320 	add.w	r3, r7, #32
 8008af8:	3b14      	subs	r3, #20
 8008afa:	4619      	mov	r1, r3
 8008afc:	4882      	ldr	r0, [pc, #520]	; (8008d08 <Process_Received_Message+0x66c>)
 8008afe:	f7f7 feb7 	bl	8000870 <CC1200_Transmit>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 8008b02:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008b06:	390c      	subs	r1, #12
 8008b08:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008b0c:	3a34      	subs	r2, #52	; 0x34
 8008b0e:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008b12:	381c      	subs	r0, #28
 8008b14:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008b18:	3b3c      	subs	r3, #60	; 0x3c
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008b20:	3b24      	subs	r3, #36	; 0x24
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	460b      	mov	r3, r1
 8008b26:	4979      	ldr	r1, [pc, #484]	; (8008d0c <Process_Received_Message+0x670>)
 8008b28:	f001 fae2 	bl	800a0f0 <siprintf>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008b32:	f102 021e 	add.w	r2, r2, #30
 8008b36:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008b38:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008b3c:	f103 031e 	add.w	r3, r3, #30
 8008b40:	881a      	ldrh	r2, [r3, #0]
 8008b42:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008b46:	3b1c      	subs	r3, #28
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fd80 	bl	8008650 <CDC_Transmit_FS>
 8008b50:	f000 beb3 	b.w	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "receive", strlen("receive")) == 0)
 8008b54:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008b58:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008b5c:	2207      	movs	r2, #7
 8008b5e:	496c      	ldr	r1, [pc, #432]	; (8008d10 <Process_Received_Message+0x674>)
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	f001 faf4 	bl	800a14e <strncmp>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d131      	bne.n	8008bd0 <Process_Received_Message+0x534>
	{
		sprintf(str1, "User Input: Receive\r\n");
 8008b6c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008b70:	3b34      	subs	r3, #52	; 0x34
 8008b72:	4968      	ldr	r1, [pc, #416]	; (8008d14 <Process_Received_Message+0x678>)
 8008b74:	4618      	mov	r0, r3
 8008b76:	f001 fabb 	bl	800a0f0 <siprintf>
		sprintf(str2, "Set the CC1200 into Receive Mode\r\n");
 8008b7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008b7e:	3b0c      	subs	r3, #12
 8008b80:	4965      	ldr	r1, [pc, #404]	; (8008d18 <Process_Received_Message+0x67c>)
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 fab4 	bl	800a0f0 <siprintf>
		//CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (before initiating receive)
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // enable RX
 8008b88:	2134      	movs	r1, #52	; 0x34
 8008b8a:	485f      	ldr	r0, [pc, #380]	; (8008d08 <Process_Received_Message+0x66c>)
 8008b8c:	f7f7 fe3d 	bl	800080a <CC1200_Command_Strobe>
		//CC1200_Receive(&SPI_Info);
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8008b90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008b94:	3b0c      	subs	r3, #12
 8008b96:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008b9a:	3a34      	subs	r2, #52	; 0x34
 8008b9c:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008ba0:	381c      	subs	r0, #28
 8008ba2:	495e      	ldr	r1, [pc, #376]	; (8008d1c <Process_Received_Message+0x680>)
 8008ba4:	f001 faa4 	bl	800a0f0 <siprintf>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008bae:	f102 021e 	add.w	r2, r2, #30
 8008bb2:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008bb4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008bb8:	f103 031e 	add.w	r3, r3, #30
 8008bbc:	881a      	ldrh	r2, [r3, #0]
 8008bbe:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008bc2:	3b1c      	subs	r3, #28
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fd42 	bl	8008650 <CDC_Transmit_FS>
 8008bcc:	f000 be75 	b.w	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "get received data", strlen("get received data")) == 0)
 8008bd0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008bd4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008bd8:	2211      	movs	r2, #17
 8008bda:	4951      	ldr	r1, [pc, #324]	; (8008d20 <Process_Received_Message+0x684>)
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f001 fab6 	bl	800a14e <strncmp>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d136      	bne.n	8008c56 <Process_Received_Message+0x5ba>
	{
		CC1200_Receive(&SPI_Info, RX_Packet);
 8008be8:	494e      	ldr	r1, [pc, #312]	; (8008d24 <Process_Received_Message+0x688>)
 8008bea:	4847      	ldr	r0, [pc, #284]	; (8008d08 <Process_Received_Message+0x66c>)
 8008bec:	f7f7 fe91 	bl	8000912 <CC1200_Receive>

		sprintf(Message, "Received the Following Message: ");
 8008bf0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008bf4:	3b1c      	subs	r3, #28
 8008bf6:	494c      	ldr	r1, [pc, #304]	; (8008d28 <Process_Received_Message+0x68c>)
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 fa79 	bl	800a0f0 <siprintf>
		sprintf(str1, "%s\r\n", (char*) RX_Packet);
 8008bfe:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008c02:	3b34      	subs	r3, #52	; 0x34
 8008c04:	4a47      	ldr	r2, [pc, #284]	; (8008d24 <Process_Received_Message+0x688>)
 8008c06:	493f      	ldr	r1, [pc, #252]	; (8008d04 <Process_Received_Message+0x668>)
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 fa71 	bl	800a0f0 <siprintf>
		strcat(Message, str1);
 8008c0e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008c12:	3a34      	subs	r2, #52	; 0x34
 8008c14:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008c18:	3b1c      	subs	r3, #28
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 fa87 	bl	800a130 <strcat>
		Message_Length = strlen(Message);
 8008c22:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008c26:	3b1c      	subs	r3, #28
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7f7 faa7 	bl	800017c <strlen>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008c34:	f102 021e 	add.w	r2, r2, #30
 8008c38:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008c3a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008c3e:	f103 031e 	add.w	r3, r3, #30
 8008c42:	881a      	ldrh	r2, [r3, #0]
 8008c44:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008c48:	3b1c      	subs	r3, #28
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff fcff 	bl	8008650 <CDC_Transmit_FS>
 8008c52:	f000 be32 	b.w	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "exit", strlen("exit")) == 0)
 8008c56:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008c5a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008c5e:	2204      	movs	r2, #4
 8008c60:	4932      	ldr	r1, [pc, #200]	; (8008d2c <Process_Received_Message+0x690>)
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	f001 fa73 	bl	800a14e <strncmp>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d168      	bne.n	8008d40 <Process_Received_Message+0x6a4>
	{
		sprintf(str1, "User Input: Exit\r\n");
 8008c6e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008c72:	3b34      	subs	r3, #52	; 0x34
 8008c74:	492e      	ldr	r1, [pc, #184]	; (8008d30 <Process_Received_Message+0x694>)
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 fa3a 	bl	800a0f0 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008c7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008c80:	3b0c      	subs	r3, #12
 8008c82:	492c      	ldr	r1, [pc, #176]	; (8008d34 <Process_Received_Message+0x698>)
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 fa33 	bl	800a0f0 <siprintf>
		sprintf(str3, "Register Values Can Be Changed\r\n");
 8008c8a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008c8e:	3b24      	subs	r3, #36	; 0x24
 8008c90:	4929      	ldr	r1, [pc, #164]	; (8008d38 <Process_Received_Message+0x69c>)
 8008c92:	4618      	mov	r0, r3
 8008c94:	f001 fa2c 	bl	800a0f0 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SIDLE);
 8008c98:	2136      	movs	r1, #54	; 0x36
 8008c9a:	481b      	ldr	r0, [pc, #108]	; (8008d08 <Process_Received_Message+0x66c>)
 8008c9c:	f7f7 fdb5 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008ca0:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008ca4:	390c      	subs	r1, #12
 8008ca6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008caa:	3a34      	subs	r2, #52	; 0x34
 8008cac:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008cb0:	381c      	subs	r0, #28
 8008cb2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008cb6:	3b24      	subs	r3, #36	; 0x24
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	491f      	ldr	r1, [pc, #124]	; (8008d3c <Process_Received_Message+0x6a0>)
 8008cbe:	f001 fa17 	bl	800a0f0 <siprintf>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008cc8:	f102 021e 	add.w	r2, r2, #30
 8008ccc:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008cce:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008cd2:	f103 031e 	add.w	r3, r3, #30
 8008cd6:	881a      	ldrh	r2, [r3, #0]
 8008cd8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008cdc:	3b1c      	subs	r3, #28
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fcb5 	bl	8008650 <CDC_Transmit_FS>
 8008ce6:	f000 bde8 	b.w	80098ba <Process_Received_Message+0x121e>
 8008cea:	bf00      	nop
 8008cec:	0800b744 	.word	0x0800b744
 8008cf0:	0800b840 	.word	0x0800b840
 8008cf4:	0800b858 	.word	0x0800b858
 8008cf8:	0800b87c 	.word	0x0800b87c
 8008cfc:	0800b73c 	.word	0x0800b73c
 8008d00:	0800b740 	.word	0x0800b740
 8008d04:	0800b8a0 	.word	0x0800b8a0
 8008d08:	20000560 	.word	0x20000560
 8008d0c:	0800b7bc 	.word	0x0800b7bc
 8008d10:	0800b7c8 	.word	0x0800b7c8
 8008d14:	0800b8a8 	.word	0x0800b8a8
 8008d18:	0800b8c0 	.word	0x0800b8c0
 8008d1c:	0800b710 	.word	0x0800b710
 8008d20:	0800b8e4 	.word	0x0800b8e4
 8008d24:	20000574 	.word	0x20000574
 8008d28:	0800b8f8 	.word	0x0800b8f8
 8008d2c:	0800b91c 	.word	0x0800b91c
 8008d30:	0800b924 	.word	0x0800b924
 8008d34:	0800b938 	.word	0x0800b938
 8008d38:	0800b958 	.word	0x0800b958
 8008d3c:	0800b838 	.word	0x0800b838
	}
	else if (strncmp((char*) rx_buffer, "reset", strlen("reset")) == 0)
 8008d40:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008d44:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008d48:	2205      	movs	r2, #5
 8008d4a:	49c2      	ldr	r1, [pc, #776]	; (8009054 <Process_Received_Message+0x9b8>)
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	f001 f9fe 	bl	800a14e <strncmp>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d13d      	bne.n	8008dd4 <Process_Received_Message+0x738>
	{
		sprintf(str1, "User Input: Reset\r\n");
 8008d58:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008d5c:	3b34      	subs	r3, #52	; 0x34
 8008d5e:	49be      	ldr	r1, [pc, #760]	; (8009058 <Process_Received_Message+0x9bc>)
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 f9c5 	bl	800a0f0 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008d66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008d6a:	3b0c      	subs	r3, #12
 8008d6c:	49bb      	ldr	r1, [pc, #748]	; (800905c <Process_Received_Message+0x9c0>)
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 f9be 	bl	800a0f0 <siprintf>
		sprintf(str3, "Register Values Reset to Default Values\r\n");
 8008d74:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008d78:	3b24      	subs	r3, #36	; 0x24
 8008d7a:	49b9      	ldr	r1, [pc, #740]	; (8009060 <Process_Received_Message+0x9c4>)
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f001 f9b7 	bl	800a0f0 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES);
 8008d82:	2130      	movs	r1, #48	; 0x30
 8008d84:	48b7      	ldr	r0, [pc, #732]	; (8009064 <Process_Received_Message+0x9c8>)
 8008d86:	f7f7 fd40 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008d8a:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008d8e:	390c      	subs	r1, #12
 8008d90:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008d94:	3a34      	subs	r2, #52	; 0x34
 8008d96:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008d9a:	381c      	subs	r0, #28
 8008d9c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008da0:	3b24      	subs	r3, #36	; 0x24
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	460b      	mov	r3, r1
 8008da6:	49b0      	ldr	r1, [pc, #704]	; (8009068 <Process_Received_Message+0x9cc>)
 8008da8:	f001 f9a2 	bl	800a0f0 <siprintf>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008db2:	f102 021e 	add.w	r2, r2, #30
 8008db6:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008db8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008dbc:	f103 031e 	add.w	r3, r3, #30
 8008dc0:	881a      	ldrh	r2, [r3, #0]
 8008dc2:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008dc6:	3b1c      	subs	r3, #28
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fc40 	bl	8008650 <CDC_Transmit_FS>
 8008dd0:	f000 bd73 	b.w	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "status", strlen("status")) == 0)
 8008dd4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008dd8:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008ddc:	2206      	movs	r2, #6
 8008dde:	49a3      	ldr	r1, [pc, #652]	; (800906c <Process_Received_Message+0x9d0>)
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f001 f9b4 	bl	800a14e <strncmp>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d140      	bne.n	8008e6e <Process_Received_Message+0x7d2>
	{
		sprintf(str1, "User Input: Status\r\n");
 8008dec:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008df0:	3b34      	subs	r3, #52	; 0x34
 8008df2:	499f      	ldr	r1, [pc, #636]	; (8009070 <Process_Received_Message+0x9d4>)
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 f97b 	bl	800a0f0 <siprintf>
		sprintf(str2, "CC1200 Status: ");
 8008dfa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008dfe:	3b0c      	subs	r3, #12
 8008e00:	499c      	ldr	r1, [pc, #624]	; (8009074 <Process_Received_Message+0x9d8>)
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 f974 	bl	800a0f0 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8008e08:	213d      	movs	r1, #61	; 0x3d
 8008e0a:	4896      	ldr	r0, [pc, #600]	; (8009064 <Process_Received_Message+0x9c8>)
 8008e0c:	f7f7 fcfd 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str3, "0X%02X\r\n", MISO_Data[0]);
 8008e10:	4b99      	ldr	r3, [pc, #612]	; (8009078 <Process_Received_Message+0x9dc>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008e1a:	3b24      	subs	r3, #36	; 0x24
 8008e1c:	4997      	ldr	r1, [pc, #604]	; (800907c <Process_Received_Message+0x9e0>)
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f001 f966 	bl	800a0f0 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008e24:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008e28:	390c      	subs	r1, #12
 8008e2a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008e2e:	3a34      	subs	r2, #52	; 0x34
 8008e30:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008e34:	381c      	subs	r0, #28
 8008e36:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008e3a:	3b24      	subs	r3, #36	; 0x24
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4989      	ldr	r1, [pc, #548]	; (8009068 <Process_Received_Message+0x9cc>)
 8008e42:	f001 f955 	bl	800a0f0 <siprintf>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008e4c:	f102 021e 	add.w	r2, r2, #30
 8008e50:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008e52:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008e56:	f103 031e 	add.w	r3, r3, #30
 8008e5a:	881a      	ldrh	r2, [r3, #0]
 8008e5c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008e60:	3b1c      	subs	r3, #28
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff fbf3 	bl	8008650 <CDC_Transmit_FS>
 8008e6a:	f000 bd26 	b.w	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "command", strlen("command")) == 0)
 8008e6e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008e72:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008e76:	2207      	movs	r2, #7
 8008e78:	4981      	ldr	r1, [pc, #516]	; (8009080 <Process_Received_Message+0x9e4>)
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	f001 f967 	bl	800a14e <strncmp>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f040 809f 	bne.w	8008fc6 <Process_Received_Message+0x92a>
	{
		sprintf(str1, "User Input: Command\r\n");
 8008e88:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008e8c:	3b34      	subs	r3, #52	; 0x34
 8008e8e:	497d      	ldr	r1, [pc, #500]	; (8009084 <Process_Received_Message+0x9e8>)
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 f92d 	bl	800a0f0 <siprintf>
		sprintf(str2, "Issued the Following Command: ");
 8008e96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008e9a:	3b0c      	subs	r3, #12
 8008e9c:	497a      	ldr	r1, [pc, #488]	; (8009088 <Process_Received_Message+0x9ec>)
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 f926 	bl	800a0f0 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Command:"
 8008ea4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008ea8:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008eac:	4977      	ldr	r1, [pc, #476]	; (800908c <Process_Received_Message+0x9f0>)
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	f001 f962 	bl	800a178 <strtok>
 8008eb4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008eb8:	f103 0318 	add.w	r3, r3, #24
 8008ebc:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[command strobe]"
 8008ebe:	4974      	ldr	r1, [pc, #464]	; (8009090 <Process_Received_Message+0x9f4>)
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	f001 f959 	bl	800a178 <strtok>
 8008ec6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008eca:	f103 0318 	add.w	r3, r3, #24
 8008ece:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8008ed0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008ed4:	3b24      	subs	r3, #36	; 0x24
 8008ed6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008eda:	f102 0218 	add.w	r2, r2, #24
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	496c      	ldr	r1, [pc, #432]	; (8009094 <Process_Received_Message+0x9f8>)
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 f904 	bl	800a0f0 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8008ee8:	2210      	movs	r2, #16
 8008eea:	2100      	movs	r1, #0
 8008eec:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008ef0:	f103 0318 	add.w	r3, r3, #24
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	f001 fa17 	bl	800a328 <strtol>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008f00:	f102 021c 	add.w	r2, r2, #28
 8008f04:	7013      	strb	r3, [r2, #0]
		check = CC1200_Command_Strobe(&SPI_Info, Register_Address); // issue command
 8008f06:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008f0a:	f103 031c 	add.w	r3, r3, #28
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4619      	mov	r1, r3
 8008f12:	4854      	ldr	r0, [pc, #336]	; (8009064 <Process_Received_Message+0x9c8>)
 8008f14:	f7f7 fc79 	bl	800080a <CC1200_Command_Strobe>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008f1e:	f102 0217 	add.w	r2, r2, #23
 8008f22:	7013      	strb	r3, [r2, #0]
		if (check == 1)
 8008f24:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008f28:	f103 0317 	add.w	r3, r3, #23
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d107      	bne.n	8008f42 <Process_Received_Message+0x8a6>
		{
			sprintf(str4, "Invalid Command\r\n");
 8008f32:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008f36:	3b3c      	subs	r3, #60	; 0x3c
 8008f38:	4957      	ldr	r1, [pc, #348]	; (8009098 <Process_Received_Message+0x9fc>)
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 f8d8 	bl	800a0f0 <siprintf>
 8008f40:	e006      	b.n	8008f50 <Process_Received_Message+0x8b4>
		}
		else // check == 0
		{
			sprintf(str4, "Valid Command\r\n");
 8008f42:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008f46:	3b3c      	subs	r3, #60	; 0x3c
 8008f48:	4954      	ldr	r1, [pc, #336]	; (800909c <Process_Received_Message+0xa00>)
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 f8d0 	bl	800a0f0 <siprintf>
		}
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8008f50:	213d      	movs	r1, #61	; 0x3d
 8008f52:	4844      	ldr	r0, [pc, #272]	; (8009064 <Process_Received_Message+0x9c8>)
 8008f54:	f7f7 fc59 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str5, "CC1200 State: 0X%02X\r\n", MISO_Data[0]);
 8008f58:	4b47      	ldr	r3, [pc, #284]	; (8009078 <Process_Received_Message+0x9dc>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f62:	3b14      	subs	r3, #20
 8008f64:	494e      	ldr	r1, [pc, #312]	; (80090a0 <Process_Received_Message+0xa04>)
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 f8c2 	bl	800a0f0 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8008f6c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008f70:	390c      	subs	r1, #12
 8008f72:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008f76:	3a34      	subs	r2, #52	; 0x34
 8008f78:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008f7c:	381c      	subs	r0, #28
 8008f7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f82:	3b14      	subs	r3, #20
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008f8a:	3b3c      	subs	r3, #60	; 0x3c
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008f92:	3b24      	subs	r3, #36	; 0x24
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	460b      	mov	r3, r1
 8008f98:	4942      	ldr	r1, [pc, #264]	; (80090a4 <Process_Received_Message+0xa08>)
 8008f9a:	f001 f8a9 	bl	800a0f0 <siprintf>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008fa4:	f102 021e 	add.w	r2, r2, #30
 8008fa8:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008faa:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008fae:	f103 031e 	add.w	r3, r3, #30
 8008fb2:	881a      	ldrh	r2, [r3, #0]
 8008fb4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008fb8:	3b1c      	subs	r3, #28
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7ff fb47 	bl	8008650 <CDC_Transmit_FS>
 8008fc2:	f000 bc7a 	b.w	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "print registers", strlen("print registers")) == 0)
 8008fc6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008fca:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008fce:	220f      	movs	r2, #15
 8008fd0:	4935      	ldr	r1, [pc, #212]	; (80090a8 <Process_Received_Message+0xa0c>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	f001 f8bb 	bl	800a14e <strncmp>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f040 8142 	bne.w	8009264 <Process_Received_Message+0xbc8>
	{
		sprintf(Message, "User Input: Print Registers\r\n");
 8008fe0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008fe4:	3b1c      	subs	r3, #28
 8008fe6:	4931      	ldr	r1, [pc, #196]	; (80090ac <Process_Received_Message+0xa10>)
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 f881 	bl	800a0f0 <siprintf>
		strcat(Message, "Register Space\r\n");
 8008fee:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008ff2:	3b1c      	subs	r3, #28
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7f7 f8c1 	bl	800017c <strlen>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009002:	3b1c      	subs	r3, #28
 8009004:	4413      	add	r3, r2
 8009006:	4a2a      	ldr	r2, [pc, #168]	; (80090b0 <Process_Received_Message+0xa14>)
 8009008:	461d      	mov	r5, r3
 800900a:	4614      	mov	r4, r2
 800900c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800900e:	6028      	str	r0, [r5, #0]
 8009010:	6069      	str	r1, [r5, #4]
 8009012:	60aa      	str	r2, [r5, #8]
 8009014:	60eb      	str	r3, [r5, #12]
 8009016:	7823      	ldrb	r3, [r4, #0]
 8009018:	742b      	strb	r3, [r5, #16]
		strcat(Message, "Address; Value\r\n");
 800901a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800901e:	3b1c      	subs	r3, #28
 8009020:	4618      	mov	r0, r3
 8009022:	f7f7 f8ab 	bl	800017c <strlen>
 8009026:	4603      	mov	r3, r0
 8009028:	461a      	mov	r2, r3
 800902a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800902e:	3b1c      	subs	r3, #28
 8009030:	4413      	add	r3, r2
 8009032:	4a20      	ldr	r2, [pc, #128]	; (80090b4 <Process_Received_Message+0xa18>)
 8009034:	461d      	mov	r5, r3
 8009036:	4614      	mov	r4, r2
 8009038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800903a:	6028      	str	r0, [r5, #0]
 800903c:	6069      	str	r1, [r5, #4]
 800903e:	60aa      	str	r2, [r5, #8]
 8009040:	60eb      	str	r3, [r5, #12]
 8009042:	7823      	ldrb	r3, [r4, #0]
 8009044:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8009046:	2300      	movs	r3, #0
 8009048:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800904c:	f102 021c 	add.w	r2, r2, #28
 8009050:	7013      	strb	r3, [r2, #0]
 8009052:	e066      	b.n	8009122 <Process_Received_Message+0xa86>
 8009054:	0800b97c 	.word	0x0800b97c
 8009058:	0800b984 	.word	0x0800b984
 800905c:	0800b938 	.word	0x0800b938
 8009060:	0800b998 	.word	0x0800b998
 8009064:	20000560 	.word	0x20000560
 8009068:	0800b838 	.word	0x0800b838
 800906c:	0800b9c4 	.word	0x0800b9c4
 8009070:	0800b9cc 	.word	0x0800b9cc
 8009074:	0800b9e4 	.word	0x0800b9e4
 8009078:	20000570 	.word	0x20000570
 800907c:	0800b9f4 	.word	0x0800b9f4
 8009080:	0800ba00 	.word	0x0800ba00
 8009084:	0800ba08 	.word	0x0800ba08
 8009088:	0800ba20 	.word	0x0800ba20
 800908c:	0800b73c 	.word	0x0800b73c
 8009090:	0800b740 	.word	0x0800b740
 8009094:	0800b8a0 	.word	0x0800b8a0
 8009098:	0800ba40 	.word	0x0800ba40
 800909c:	0800ba54 	.word	0x0800ba54
 80090a0:	0800ba64 	.word	0x0800ba64
 80090a4:	0800ba7c 	.word	0x0800ba7c
 80090a8:	0800ba88 	.word	0x0800ba88
 80090ac:	0800ba98 	.word	0x0800ba98
 80090b0:	0800bab8 	.word	0x0800bab8
 80090b4:	0800bacc 	.word	0x0800bacc
		{

			CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 80090b8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090bc:	f103 031c 	add.w	r3, r3, #28
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	4619      	mov	r1, r3
 80090c4:	48c7      	ldr	r0, [pc, #796]	; (80093e4 <Process_Received_Message+0xd48>)
 80090c6:	f7f7 fabb 	bl	8000640 <CC1200_Read_Single_Register>
			Register_Value = MISO_Data[0];
 80090ca:	4bc7      	ldr	r3, [pc, #796]	; (80093e8 <Process_Received_Message+0xd4c>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80090d2:	f102 0216 	add.w	r2, r2, #22
 80090d6:	7013      	strb	r3, [r2, #0]
			sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 80090d8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090dc:	f103 031c 	add.w	r3, r3, #28
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090e6:	f103 0316 	add.w	r3, r3, #22
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80090f0:	3834      	subs	r0, #52	; 0x34
 80090f2:	49be      	ldr	r1, [pc, #760]	; (80093ec <Process_Received_Message+0xd50>)
 80090f4:	f000 fffc 	bl	800a0f0 <siprintf>
			strcat(Message, str1);
 80090f8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80090fc:	3a34      	subs	r2, #52	; 0x34
 80090fe:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009102:	3b1c      	subs	r3, #28
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f001 f812 	bl	800a130 <strcat>
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 800910c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009110:	f103 031c 	add.w	r3, r3, #28
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800911c:	f102 021c 	add.w	r2, r2, #28
 8009120:	7013      	strb	r3, [r2, #0]
 8009122:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009126:	f103 031c 	add.w	r3, r3, #28
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b2e      	cmp	r3, #46	; 0x2e
 800912e:	d9c3      	bls.n	80090b8 <Process_Received_Message+0xa1c>
		}
		strcat(Message, "Extended Register Space\r\n");
 8009130:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009134:	3b1c      	subs	r3, #28
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 f820 	bl	800017c <strlen>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009144:	3b1c      	subs	r3, #28
 8009146:	4413      	add	r3, r2
 8009148:	4aa9      	ldr	r2, [pc, #676]	; (80093f0 <Process_Received_Message+0xd54>)
 800914a:	461d      	mov	r5, r3
 800914c:	4614      	mov	r4, r2
 800914e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009150:	6028      	str	r0, [r5, #0]
 8009152:	6069      	str	r1, [r5, #4]
 8009154:	60aa      	str	r2, [r5, #8]
 8009156:	60eb      	str	r3, [r5, #12]
 8009158:	cc03      	ldmia	r4!, {r0, r1}
 800915a:	6128      	str	r0, [r5, #16]
 800915c:	6169      	str	r1, [r5, #20]
 800915e:	8823      	ldrh	r3, [r4, #0]
 8009160:	832b      	strh	r3, [r5, #24]
		strcat(Message, "Address; Value\r\n");
 8009162:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009166:	3b1c      	subs	r3, #28
 8009168:	4618      	mov	r0, r3
 800916a:	f7f7 f807 	bl	800017c <strlen>
 800916e:	4603      	mov	r3, r0
 8009170:	461a      	mov	r2, r3
 8009172:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009176:	3b1c      	subs	r3, #28
 8009178:	4413      	add	r3, r2
 800917a:	4a9e      	ldr	r2, [pc, #632]	; (80093f4 <Process_Received_Message+0xd58>)
 800917c:	461d      	mov	r5, r3
 800917e:	4614      	mov	r4, r2
 8009180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009182:	6028      	str	r0, [r5, #0]
 8009184:	6069      	str	r1, [r5, #4]
 8009186:	60aa      	str	r2, [r5, #8]
 8009188:	60eb      	str	r3, [r5, #12]
 800918a:	7823      	ldrb	r3, [r4, #0]
 800918c:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 800918e:	2300      	movs	r3, #0
 8009190:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009194:	f102 021c 	add.w	r2, r2, #28
 8009198:	7013      	strb	r3, [r2, #0]
 800919a:	e043      	b.n	8009224 <Process_Received_Message+0xb88>
		{
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800919c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80091a0:	f103 031c 	add.w	r3, r3, #28
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	4619      	mov	r1, r3
 80091a8:	488e      	ldr	r0, [pc, #568]	; (80093e4 <Process_Received_Message+0xd48>)
 80091aa:	f7f7 fadb 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80091b4:	f102 0217 	add.w	r2, r2, #23
 80091b8:	7013      	strb	r3, [r2, #0]
			if (check == 0)
 80091ba:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80091be:	f103 0317 	add.w	r3, r3, #23
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d121      	bne.n	800920c <Process_Received_Message+0xb70>
			{
				Register_Value = MISO_Data[0];
 80091c8:	4b87      	ldr	r3, [pc, #540]	; (80093e8 <Process_Received_Message+0xd4c>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80091d0:	f102 0216 	add.w	r2, r2, #22
 80091d4:	7013      	strb	r3, [r2, #0]
				sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 80091d6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80091da:	f103 031c 	add.w	r3, r3, #28
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80091e4:	f103 0316 	add.w	r3, r3, #22
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80091ee:	3834      	subs	r0, #52	; 0x34
 80091f0:	497e      	ldr	r1, [pc, #504]	; (80093ec <Process_Received_Message+0xd50>)
 80091f2:	f000 ff7d 	bl	800a0f0 <siprintf>
				strcat(Message, str1);
 80091f6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80091fa:	3a34      	subs	r2, #52	; 0x34
 80091fc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009200:	3b1c      	subs	r3, #28
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f000 ff93 	bl	800a130 <strcat>
 800920a:	e000      	b.n	800920e <Process_Received_Message+0xb72>
			}
			else
			{
				continue;
 800920c:	bf00      	nop
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 800920e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009212:	f103 031c 	add.w	r3, r3, #28
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	3301      	adds	r3, #1
 800921a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800921e:	f102 021c 	add.w	r2, r2, #28
 8009222:	7013      	strb	r3, [r2, #0]
 8009224:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009228:	f103 031c 	add.w	r3, r3, #28
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2bda      	cmp	r3, #218	; 0xda
 8009230:	d9b4      	bls.n	800919c <Process_Received_Message+0xb00>
			}
		}
		Message_Length = strlen(Message);
 8009232:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009236:	3b1c      	subs	r3, #28
 8009238:	4618      	mov	r0, r3
 800923a:	f7f6 ff9f 	bl	800017c <strlen>
 800923e:	4603      	mov	r3, r0
 8009240:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009244:	f102 021e 	add.w	r2, r2, #30
 8009248:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800924a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800924e:	f103 031e 	add.w	r3, r3, #30
 8009252:	881a      	ldrh	r2, [r3, #0]
 8009254:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009258:	3b1c      	subs	r3, #28
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff f9f7 	bl	8008650 <CDC_Transmit_FS>
 8009262:	e32a      	b.n	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "write register", strlen("write register")) == 0)
 8009264:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009268:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800926c:	220e      	movs	r2, #14
 800926e:	4962      	ldr	r1, [pc, #392]	; (80093f8 <Process_Received_Message+0xd5c>)
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f000 ff6c 	bl	800a14e <strncmp>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 80cd 	bne.w	8009418 <Process_Received_Message+0xd7c>
	{
		sprintf(str1, "User Input: Write Register\r\n");
 800927e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009282:	3b34      	subs	r3, #52	; 0x34
 8009284:	495d      	ldr	r1, [pc, #372]	; (80093fc <Process_Received_Message+0xd60>)
 8009286:	4618      	mov	r0, r3
 8009288:	f000 ff32 	bl	800a0f0 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 800928c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009290:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009294:	495a      	ldr	r1, [pc, #360]	; (8009400 <Process_Received_Message+0xd64>)
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	f000 ff6e 	bl	800a178 <strtok>
 800929c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80092a0:	f103 0318 	add.w	r3, r3, #24
 80092a4:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 80092a6:	4956      	ldr	r1, [pc, #344]	; (8009400 <Process_Received_Message+0xd64>)
 80092a8:	2000      	movs	r0, #0
 80092aa:	f000 ff65 	bl	800a178 <strtok>
 80092ae:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80092b2:	f103 0318 	add.w	r3, r3, #24
 80092b6:	6018      	str	r0, [r3, #0]
		sprintf(str2, "Address to Access: ");
 80092b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80092bc:	3b0c      	subs	r3, #12
 80092be:	4951      	ldr	r1, [pc, #324]	; (8009404 <Process_Received_Message+0xd68>)
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 ff15 	bl	800a0f0 <siprintf>
		Token = strtok(NULL, " "); // third token "[register address]"
 80092c6:	494e      	ldr	r1, [pc, #312]	; (8009400 <Process_Received_Message+0xd64>)
 80092c8:	2000      	movs	r0, #0
 80092ca:	f000 ff55 	bl	800a178 <strtok>
 80092ce:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80092d2:	f103 0318 	add.w	r3, r3, #24
 80092d6:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 80092d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80092dc:	3b24      	subs	r3, #36	; 0x24
 80092de:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80092e2:	f102 0218 	add.w	r2, r2, #24
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	4947      	ldr	r1, [pc, #284]	; (8009408 <Process_Received_Message+0xd6c>)
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 ff00 	bl	800a0f0 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80092f0:	2210      	movs	r2, #16
 80092f2:	2100      	movs	r1, #0
 80092f4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80092f8:	f103 0318 	add.w	r3, r3, #24
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f001 f813 	bl	800a328 <strtol>
 8009302:	4603      	mov	r3, r0
 8009304:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009308:	f102 021c 	add.w	r2, r2, #28
 800930c:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 800930e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009312:	3b3c      	subs	r3, #60	; 0x3c
 8009314:	493d      	ldr	r1, [pc, #244]	; (800940c <Process_Received_Message+0xd70>)
 8009316:	4618      	mov	r0, r3
 8009318:	f000 feea 	bl	800a0f0 <siprintf>
		Token = strtok(NULL, "\r\n"); // fourth token "[register value]"
 800931c:	493c      	ldr	r1, [pc, #240]	; (8009410 <Process_Received_Message+0xd74>)
 800931e:	2000      	movs	r0, #0
 8009320:	f000 ff2a 	bl	800a178 <strtok>
 8009324:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009328:	f103 0318 	add.w	r3, r3, #24
 800932c:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 800932e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009332:	3b14      	subs	r3, #20
 8009334:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009338:	f102 0218 	add.w	r2, r2, #24
 800933c:	6812      	ldr	r2, [r2, #0]
 800933e:	4932      	ldr	r1, [pc, #200]	; (8009408 <Process_Received_Message+0xd6c>)
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fed5 	bl	800a0f0 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8009346:	2210      	movs	r2, #16
 8009348:	2100      	movs	r1, #0
 800934a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800934e:	f103 0318 	add.w	r3, r3, #24
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f000 ffe8 	bl	800a328 <strtol>
 8009358:	4603      	mov	r3, r0
 800935a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800935e:	f102 0216 	add.w	r2, r2, #22
 8009362:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 8009364:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009368:	f103 0316 	add.w	r3, r3, #22
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009372:	f103 031c 	add.w	r3, r3, #28
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	4619      	mov	r1, r3
 800937a:	481a      	ldr	r0, [pc, #104]	; (80093e4 <Process_Received_Message+0xd48>)
 800937c:	f7f7 f924 	bl	80005c8 <CC1200_Write_Single_Register>
 8009380:	4603      	mov	r3, r0
 8009382:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009386:	f102 0217 	add.w	r2, r2, #23
 800938a:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 800938c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009390:	390c      	subs	r1, #12
 8009392:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009396:	3a34      	subs	r2, #52	; 0x34
 8009398:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800939c:	381c      	subs	r0, #28
 800939e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80093a2:	3b14      	subs	r3, #20
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80093aa:	3b3c      	subs	r3, #60	; 0x3c
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80093b2:	3b24      	subs	r3, #36	; 0x24
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	460b      	mov	r3, r1
 80093b8:	4916      	ldr	r1, [pc, #88]	; (8009414 <Process_Received_Message+0xd78>)
 80093ba:	f000 fe99 	bl	800a0f0 <siprintf>
 80093be:	4603      	mov	r3, r0
 80093c0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80093c4:	f102 021e 	add.w	r2, r2, #30
 80093c8:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80093ca:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093ce:	f103 031e 	add.w	r3, r3, #30
 80093d2:	881a      	ldrh	r2, [r3, #0]
 80093d4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80093d8:	3b1c      	subs	r3, #28
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff f937 	bl	8008650 <CDC_Transmit_FS>
 80093e2:	e26a      	b.n	80098ba <Process_Received_Message+0x121e>
 80093e4:	20000560 	.word	0x20000560
 80093e8:	20000570 	.word	0x20000570
 80093ec:	0800bae0 	.word	0x0800bae0
 80093f0:	0800baf4 	.word	0x0800baf4
 80093f4:	0800bacc 	.word	0x0800bacc
 80093f8:	0800bb10 	.word	0x0800bb10
 80093fc:	0800bb20 	.word	0x0800bb20
 8009400:	0800b73c 	.word	0x0800b73c
 8009404:	0800bb40 	.word	0x0800bb40
 8009408:	0800b8a0 	.word	0x0800b8a0
 800940c:	0800bb54 	.word	0x0800bb54
 8009410:	0800b740 	.word	0x0800b740
 8009414:	0800ba7c 	.word	0x0800ba7c
	}
	else if (strncmp((char*) rx_buffer, "read register", strlen("read register")) == 0)
 8009418:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800941c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009420:	220d      	movs	r2, #13
 8009422:	49b7      	ldr	r1, [pc, #732]	; (8009700 <Process_Received_Message+0x1064>)
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	f000 fe92 	bl	800a14e <strncmp>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 809d 	bne.w	800956c <Process_Received_Message+0xed0>
	{
		sprintf(str1, "User Input: Read Register\r\n");
 8009432:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009436:	3b34      	subs	r3, #52	; 0x34
 8009438:	49b2      	ldr	r1, [pc, #712]	; (8009704 <Process_Received_Message+0x1068>)
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fe58 	bl	800a0f0 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009440:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009444:	3b0c      	subs	r3, #12
 8009446:	49b0      	ldr	r1, [pc, #704]	; (8009708 <Process_Received_Message+0x106c>)
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fe51 	bl	800a0f0 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 800944e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009452:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009456:	49ad      	ldr	r1, [pc, #692]	; (800970c <Process_Received_Message+0x1070>)
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f000 fe8d 	bl	800a178 <strtok>
 800945e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009462:	f103 0318 	add.w	r3, r3, #24
 8009466:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 8009468:	49a8      	ldr	r1, [pc, #672]	; (800970c <Process_Received_Message+0x1070>)
 800946a:	2000      	movs	r0, #0
 800946c:	f000 fe84 	bl	800a178 <strtok>
 8009470:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009474:	f103 0318 	add.w	r3, r3, #24
 8009478:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // third token "[register address]"
 800947a:	49a5      	ldr	r1, [pc, #660]	; (8009710 <Process_Received_Message+0x1074>)
 800947c:	2000      	movs	r0, #0
 800947e:	f000 fe7b 	bl	800a178 <strtok>
 8009482:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009486:	f103 0318 	add.w	r3, r3, #24
 800948a:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 800948c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009490:	3b24      	subs	r3, #36	; 0x24
 8009492:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009496:	f102 0218 	add.w	r2, r2, #24
 800949a:	6812      	ldr	r2, [r2, #0]
 800949c:	499d      	ldr	r1, [pc, #628]	; (8009714 <Process_Received_Message+0x1078>)
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fe26 	bl	800a0f0 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80094a4:	2210      	movs	r2, #16
 80094a6:	2100      	movs	r1, #0
 80094a8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80094ac:	f103 0318 	add.w	r3, r3, #24
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f000 ff39 	bl	800a328 <strtol>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80094bc:	f102 021c 	add.w	r2, r2, #28
 80094c0:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 80094c2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80094c6:	f103 031c 	add.w	r3, r3, #28
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	4619      	mov	r1, r3
 80094ce:	4892      	ldr	r0, [pc, #584]	; (8009718 <Process_Received_Message+0x107c>)
 80094d0:	f7f7 f8b6 	bl	8000640 <CC1200_Read_Single_Register>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80094da:	f102 0217 	add.w	r2, r2, #23
 80094de:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 80094e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80094e4:	3b3c      	subs	r3, #60	; 0x3c
 80094e6:	498d      	ldr	r1, [pc, #564]	; (800971c <Process_Received_Message+0x1080>)
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fe01 	bl	800a0f0 <siprintf>
		Register_Value = MISO_Data[0];
 80094ee:	4b8c      	ldr	r3, [pc, #560]	; (8009720 <Process_Received_Message+0x1084>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80094f6:	f102 0216 	add.w	r2, r2, #22
 80094fa:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 80094fc:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009500:	f103 0316 	add.w	r3, r3, #22
 8009504:	781a      	ldrb	r2, [r3, #0]
 8009506:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800950a:	3b14      	subs	r3, #20
 800950c:	4985      	ldr	r1, [pc, #532]	; (8009724 <Process_Received_Message+0x1088>)
 800950e:	4618      	mov	r0, r3
 8009510:	f000 fdee 	bl	800a0f0 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009514:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009518:	390c      	subs	r1, #12
 800951a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800951e:	3a34      	subs	r2, #52	; 0x34
 8009520:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009524:	381c      	subs	r0, #28
 8009526:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800952a:	3b14      	subs	r3, #20
 800952c:	9302      	str	r3, [sp, #8]
 800952e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009532:	3b3c      	subs	r3, #60	; 0x3c
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800953a:	3b24      	subs	r3, #36	; 0x24
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	460b      	mov	r3, r1
 8009540:	4979      	ldr	r1, [pc, #484]	; (8009728 <Process_Received_Message+0x108c>)
 8009542:	f000 fdd5 	bl	800a0f0 <siprintf>
 8009546:	4603      	mov	r3, r0
 8009548:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800954c:	f102 021e 	add.w	r2, r2, #30
 8009550:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009552:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009556:	f103 031e 	add.w	r3, r3, #30
 800955a:	881a      	ldrh	r2, [r3, #0]
 800955c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009560:	3b1c      	subs	r3, #28
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff f873 	bl	8008650 <CDC_Transmit_FS>
 800956a:	e1a6      	b.n	80098ba <Process_Received_Message+0x121e>
	}
	else if (strncmp((char*) rx_buffer, "write extended register", strlen("write extended register")) == 0)
 800956c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009570:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009574:	2217      	movs	r2, #23
 8009576:	496d      	ldr	r1, [pc, #436]	; (800972c <Process_Received_Message+0x1090>)
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	f000 fde8 	bl	800a14e <strncmp>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	f040 80d9 	bne.w	8009738 <Process_Received_Message+0x109c>
	{
		sprintf(str1, "User Input: Write Extended Register\r\n");
 8009586:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800958a:	3b34      	subs	r3, #52	; 0x34
 800958c:	4968      	ldr	r1, [pc, #416]	; (8009730 <Process_Received_Message+0x1094>)
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fdae 	bl	800a0f0 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009594:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009598:	3b0c      	subs	r3, #12
 800959a:	495b      	ldr	r1, [pc, #364]	; (8009708 <Process_Received_Message+0x106c>)
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fda7 	bl	800a0f0 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 80095a2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80095a6:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80095aa:	4958      	ldr	r1, [pc, #352]	; (800970c <Process_Received_Message+0x1070>)
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f000 fde3 	bl	800a178 <strtok>
 80095b2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095b6:	f103 0318 	add.w	r3, r3, #24
 80095ba:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 80095bc:	4953      	ldr	r1, [pc, #332]	; (800970c <Process_Received_Message+0x1070>)
 80095be:	2000      	movs	r0, #0
 80095c0:	f000 fdda 	bl	800a178 <strtok>
 80095c4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095c8:	f103 0318 	add.w	r3, r3, #24
 80095cc:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 80095ce:	494f      	ldr	r1, [pc, #316]	; (800970c <Process_Received_Message+0x1070>)
 80095d0:	2000      	movs	r0, #0
 80095d2:	f000 fdd1 	bl	800a178 <strtok>
 80095d6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095da:	f103 0318 	add.w	r3, r3, #24
 80095de:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // fourth token "[register address]"
 80095e0:	494a      	ldr	r1, [pc, #296]	; (800970c <Process_Received_Message+0x1070>)
 80095e2:	2000      	movs	r0, #0
 80095e4:	f000 fdc8 	bl	800a178 <strtok>
 80095e8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095ec:	f103 0318 	add.w	r3, r3, #24
 80095f0:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 80095f2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80095f6:	3b24      	subs	r3, #36	; 0x24
 80095f8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80095fc:	f102 0218 	add.w	r2, r2, #24
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	4944      	ldr	r1, [pc, #272]	; (8009714 <Process_Received_Message+0x1078>)
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fd73 	bl	800a0f0 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800960a:	2210      	movs	r2, #16
 800960c:	2100      	movs	r1, #0
 800960e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009612:	f103 0318 	add.w	r3, r3, #24
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	f000 fe86 	bl	800a328 <strtol>
 800961c:	4603      	mov	r3, r0
 800961e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009622:	f102 021c 	add.w	r2, r2, #28
 8009626:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 8009628:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800962c:	3b3c      	subs	r3, #60	; 0x3c
 800962e:	4941      	ldr	r1, [pc, #260]	; (8009734 <Process_Received_Message+0x1098>)
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fd5d 	bl	800a0f0 <siprintf>
		Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8009636:	4936      	ldr	r1, [pc, #216]	; (8009710 <Process_Received_Message+0x1074>)
 8009638:	2000      	movs	r0, #0
 800963a:	f000 fd9d 	bl	800a178 <strtok>
 800963e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009642:	f103 0318 	add.w	r3, r3, #24
 8009646:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 8009648:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800964c:	3b14      	subs	r3, #20
 800964e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009652:	f102 0218 	add.w	r2, r2, #24
 8009656:	6812      	ldr	r2, [r2, #0]
 8009658:	492e      	ldr	r1, [pc, #184]	; (8009714 <Process_Received_Message+0x1078>)
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fd48 	bl	800a0f0 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8009660:	2210      	movs	r2, #16
 8009662:	2100      	movs	r1, #0
 8009664:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009668:	f103 0318 	add.w	r3, r3, #24
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f000 fe5b 	bl	800a328 <strtol>
 8009672:	4603      	mov	r3, r0
 8009674:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009678:	f102 0216 	add.w	r2, r2, #22
 800967c:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 800967e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009682:	f103 0316 	add.w	r3, r3, #22
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800968c:	f103 031c 	add.w	r3, r3, #28
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	4619      	mov	r1, r3
 8009694:	4820      	ldr	r0, [pc, #128]	; (8009718 <Process_Received_Message+0x107c>)
 8009696:	f7f7 f813 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800969a:	4603      	mov	r3, r0
 800969c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80096a0:	f102 0217 	add.w	r2, r2, #23
 80096a4:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 80096a6:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80096aa:	390c      	subs	r1, #12
 80096ac:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80096b0:	3a34      	subs	r2, #52	; 0x34
 80096b2:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80096b6:	381c      	subs	r0, #28
 80096b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80096bc:	3b14      	subs	r3, #20
 80096be:	9302      	str	r3, [sp, #8]
 80096c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80096c4:	3b3c      	subs	r3, #60	; 0x3c
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80096cc:	3b24      	subs	r3, #36	; 0x24
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	460b      	mov	r3, r1
 80096d2:	4915      	ldr	r1, [pc, #84]	; (8009728 <Process_Received_Message+0x108c>)
 80096d4:	f000 fd0c 	bl	800a0f0 <siprintf>
 80096d8:	4603      	mov	r3, r0
 80096da:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80096de:	f102 021e 	add.w	r2, r2, #30
 80096e2:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80096e4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80096e8:	f103 031e 	add.w	r3, r3, #30
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80096f2:	3b1c      	subs	r3, #28
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe ffaa 	bl	8008650 <CDC_Transmit_FS>
 80096fc:	e0dd      	b.n	80098ba <Process_Received_Message+0x121e>
 80096fe:	bf00      	nop
 8009700:	0800bb64 	.word	0x0800bb64
 8009704:	0800bb74 	.word	0x0800bb74
 8009708:	0800bb40 	.word	0x0800bb40
 800970c:	0800b73c 	.word	0x0800b73c
 8009710:	0800b740 	.word	0x0800b740
 8009714:	0800b8a0 	.word	0x0800b8a0
 8009718:	20000560 	.word	0x20000560
 800971c:	0800bb90 	.word	0x0800bb90
 8009720:	20000570 	.word	0x20000570
 8009724:	0800b9f4 	.word	0x0800b9f4
 8009728:	0800ba7c 	.word	0x0800ba7c
 800972c:	0800bba4 	.word	0x0800bba4
 8009730:	0800bbbc 	.word	0x0800bbbc
 8009734:	0800bb54 	.word	0x0800bb54
	}
	else if (strncmp((char*) rx_buffer, "read extended register", strlen("read extended register")) == 0)
 8009738:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800973c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009740:	2216      	movs	r2, #22
 8009742:	4961      	ldr	r1, [pc, #388]	; (80098c8 <Process_Received_Message+0x122c>)
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	f000 fd02 	bl	800a14e <strncmp>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	f040 80a6 	bne.w	800989e <Process_Received_Message+0x1202>
	{
		sprintf(str1, "User Input: Read Extended Register\r\n");
 8009752:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009756:	3b34      	subs	r3, #52	; 0x34
 8009758:	495c      	ldr	r1, [pc, #368]	; (80098cc <Process_Received_Message+0x1230>)
 800975a:	4618      	mov	r0, r3
 800975c:	f000 fcc8 	bl	800a0f0 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009760:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009764:	3b0c      	subs	r3, #12
 8009766:	495a      	ldr	r1, [pc, #360]	; (80098d0 <Process_Received_Message+0x1234>)
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fcc1 	bl	800a0f0 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 800976e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009772:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009776:	4957      	ldr	r1, [pc, #348]	; (80098d4 <Process_Received_Message+0x1238>)
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	f000 fcfd 	bl	800a178 <strtok>
 800977e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009782:	f103 0318 	add.w	r3, r3, #24
 8009786:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 8009788:	4952      	ldr	r1, [pc, #328]	; (80098d4 <Process_Received_Message+0x1238>)
 800978a:	2000      	movs	r0, #0
 800978c:	f000 fcf4 	bl	800a178 <strtok>
 8009790:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009794:	f103 0318 	add.w	r3, r3, #24
 8009798:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 800979a:	494e      	ldr	r1, [pc, #312]	; (80098d4 <Process_Received_Message+0x1238>)
 800979c:	2000      	movs	r0, #0
 800979e:	f000 fceb 	bl	800a178 <strtok>
 80097a2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80097a6:	f103 0318 	add.w	r3, r3, #24
 80097aa:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 80097ac:	494a      	ldr	r1, [pc, #296]	; (80098d8 <Process_Received_Message+0x123c>)
 80097ae:	2000      	movs	r0, #0
 80097b0:	f000 fce2 	bl	800a178 <strtok>
 80097b4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80097b8:	f103 0318 	add.w	r3, r3, #24
 80097bc:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 80097be:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80097c2:	3b24      	subs	r3, #36	; 0x24
 80097c4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80097c8:	f102 0218 	add.w	r2, r2, #24
 80097cc:	6812      	ldr	r2, [r2, #0]
 80097ce:	4943      	ldr	r1, [pc, #268]	; (80098dc <Process_Received_Message+0x1240>)
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fc8d 	bl	800a0f0 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80097d6:	2210      	movs	r2, #16
 80097d8:	2100      	movs	r1, #0
 80097da:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80097de:	f103 0318 	add.w	r3, r3, #24
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	f000 fda0 	bl	800a328 <strtol>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80097ee:	f102 021c 	add.w	r2, r2, #28
 80097f2:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 80097f4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80097f8:	f103 031c 	add.w	r3, r3, #28
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	4619      	mov	r1, r3
 8009800:	4837      	ldr	r0, [pc, #220]	; (80098e0 <Process_Received_Message+0x1244>)
 8009802:	f7f6 ffaf 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 8009806:	4603      	mov	r3, r0
 8009808:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800980c:	f102 0217 	add.w	r2, r2, #23
 8009810:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 8009812:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009816:	3b3c      	subs	r3, #60	; 0x3c
 8009818:	4932      	ldr	r1, [pc, #200]	; (80098e4 <Process_Received_Message+0x1248>)
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fc68 	bl	800a0f0 <siprintf>
		Register_Value = MISO_Data[0];
 8009820:	4b31      	ldr	r3, [pc, #196]	; (80098e8 <Process_Received_Message+0x124c>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009828:	f102 0216 	add.w	r2, r2, #22
 800982c:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 800982e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009832:	f103 0316 	add.w	r3, r3, #22
 8009836:	781a      	ldrb	r2, [r3, #0]
 8009838:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800983c:	3b14      	subs	r3, #20
 800983e:	492b      	ldr	r1, [pc, #172]	; (80098ec <Process_Received_Message+0x1250>)
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fc55 	bl	800a0f0 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009846:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800984a:	390c      	subs	r1, #12
 800984c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009850:	3a34      	subs	r2, #52	; 0x34
 8009852:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009856:	381c      	subs	r0, #28
 8009858:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800985c:	3b14      	subs	r3, #20
 800985e:	9302      	str	r3, [sp, #8]
 8009860:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009864:	3b3c      	subs	r3, #60	; 0x3c
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800986c:	3b24      	subs	r3, #36	; 0x24
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	460b      	mov	r3, r1
 8009872:	491f      	ldr	r1, [pc, #124]	; (80098f0 <Process_Received_Message+0x1254>)
 8009874:	f000 fc3c 	bl	800a0f0 <siprintf>
 8009878:	4603      	mov	r3, r0
 800987a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800987e:	f102 021e 	add.w	r2, r2, #30
 8009882:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009884:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009888:	f103 031e 	add.w	r3, r3, #30
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009892:	3b1c      	subs	r3, #28
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe feda 	bl	8008650 <CDC_Transmit_FS>
 800989c:	e00d      	b.n	80098ba <Process_Received_Message+0x121e>
	}
	else
	{
		CDC_Transmit_FS(rx_buffer, rx_buffer_len);
 800989e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80098a2:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80098ae:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80098b2:	4611      	mov	r1, r2
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f7fe fecb 	bl	8008650 <CDC_Transmit_FS>
	}

	return 0;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	f507 572a 	add.w	r7, r7, #10880	; 0x2a80
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bdb0      	pop	{r4, r5, r7, pc}
 80098c8:	0800bbe4 	.word	0x0800bbe4
 80098cc:	0800bbfc 	.word	0x0800bbfc
 80098d0:	0800bb40 	.word	0x0800bb40
 80098d4:	0800b73c 	.word	0x0800b73c
 80098d8:	0800b740 	.word	0x0800b740
 80098dc:	0800b8a0 	.word	0x0800b8a0
 80098e0:	20000560 	.word	0x20000560
 80098e4:	0800bb90 	.word	0x0800bb90
 80098e8:	20000570 	.word	0x20000570
 80098ec:	0800b9f4 	.word	0x0800b9f4
 80098f0:	0800ba7c 	.word	0x0800ba7c

080098f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	6039      	str	r1, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2212      	movs	r2, #18
 8009904:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009906:	4b03      	ldr	r3, [pc, #12]	; (8009914 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	bc80      	pop	{r7}
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20000410 	.word	0x20000410

08009918 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	6039      	str	r1, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2204      	movs	r2, #4
 8009928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800992a:	4b03      	ldr	r3, [pc, #12]	; (8009938 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	bc80      	pop	{r7}
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	20000424 	.word	0x20000424

0800993c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d105      	bne.n	800995a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	4907      	ldr	r1, [pc, #28]	; (8009970 <USBD_FS_ProductStrDescriptor+0x34>)
 8009952:	4808      	ldr	r0, [pc, #32]	; (8009974 <USBD_FS_ProductStrDescriptor+0x38>)
 8009954:	f7fe fcac 	bl	80082b0 <USBD_GetString>
 8009958:	e004      	b.n	8009964 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	4904      	ldr	r1, [pc, #16]	; (8009970 <USBD_FS_ProductStrDescriptor+0x34>)
 800995e:	4805      	ldr	r0, [pc, #20]	; (8009974 <USBD_FS_ProductStrDescriptor+0x38>)
 8009960:	f7fe fca6 	bl	80082b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20001c88 	.word	0x20001c88
 8009974:	0800bc24 	.word	0x0800bc24

08009978 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	4904      	ldr	r1, [pc, #16]	; (8009998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009988:	4804      	ldr	r0, [pc, #16]	; (800999c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800998a:	f7fe fc91 	bl	80082b0 <USBD_GetString>
  return USBD_StrDesc;
 800998e:	4b02      	ldr	r3, [pc, #8]	; (8009998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20001c88 	.word	0x20001c88
 800999c:	0800bc3c 	.word	0x0800bc3c

080099a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	221a      	movs	r2, #26
 80099b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099b2:	f000 f843 	bl	8009a3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099b6:	4b02      	ldr	r3, [pc, #8]	; (80099c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	20000428 	.word	0x20000428

080099c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	6039      	str	r1, [r7, #0]
 80099ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d105      	bne.n	80099e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	4907      	ldr	r1, [pc, #28]	; (80099f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099da:	4808      	ldr	r0, [pc, #32]	; (80099fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80099dc:	f7fe fc68 	bl	80082b0 <USBD_GetString>
 80099e0:	e004      	b.n	80099ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	4904      	ldr	r1, [pc, #16]	; (80099f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099e6:	4805      	ldr	r0, [pc, #20]	; (80099fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80099e8:	f7fe fc62 	bl	80082b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099ec:	4b02      	ldr	r3, [pc, #8]	; (80099f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20001c88 	.word	0x20001c88
 80099fc:	0800bc50 	.word	0x0800bc50

08009a00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	6039      	str	r1, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d105      	bne.n	8009a1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	4907      	ldr	r1, [pc, #28]	; (8009a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a16:	4808      	ldr	r0, [pc, #32]	; (8009a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a18:	f7fe fc4a 	bl	80082b0 <USBD_GetString>
 8009a1c:	e004      	b.n	8009a28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	4904      	ldr	r1, [pc, #16]	; (8009a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a22:	4805      	ldr	r0, [pc, #20]	; (8009a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a24:	f7fe fc44 	bl	80082b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20001c88 	.word	0x20001c88
 8009a38:	0800bc5c 	.word	0x0800bc5c

08009a3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a42:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <Get_SerialNum+0x44>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a48:	4b0e      	ldr	r3, [pc, #56]	; (8009a84 <Get_SerialNum+0x48>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	; (8009a88 <Get_SerialNum+0x4c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4413      	add	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d009      	beq.n	8009a76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a62:	2208      	movs	r2, #8
 8009a64:	4909      	ldr	r1, [pc, #36]	; (8009a8c <Get_SerialNum+0x50>)
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 f814 	bl	8009a94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	4908      	ldr	r1, [pc, #32]	; (8009a90 <Get_SerialNum+0x54>)
 8009a70:	68b8      	ldr	r0, [r7, #8]
 8009a72:	f000 f80f 	bl	8009a94 <IntToUnicode>
  }
}
 8009a76:	bf00      	nop
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	1ff800d0 	.word	0x1ff800d0
 8009a84:	1ff800d4 	.word	0x1ff800d4
 8009a88:	1ff800d8 	.word	0x1ff800d8
 8009a8c:	2000042a 	.word	0x2000042a
 8009a90:	2000043a 	.word	0x2000043a

08009a94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	75fb      	strb	r3, [r7, #23]
 8009aaa:	e027      	b.n	8009afc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	0f1b      	lsrs	r3, r3, #28
 8009ab0:	2b09      	cmp	r3, #9
 8009ab2:	d80b      	bhi.n	8009acc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	0f1b      	lsrs	r3, r3, #28
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	440b      	add	r3, r1
 8009ac4:	3230      	adds	r2, #48	; 0x30
 8009ac6:	b2d2      	uxtb	r2, r2
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	e00a      	b.n	8009ae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	0f1b      	lsrs	r3, r3, #28
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	440b      	add	r3, r1
 8009adc:	3237      	adds	r2, #55	; 0x37
 8009ade:	b2d2      	uxtb	r2, r2
 8009ae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	3301      	adds	r3, #1
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4413      	add	r3, r2
 8009af2:	2200      	movs	r2, #0
 8009af4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	3301      	adds	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]
 8009afc:	7dfa      	ldrb	r2, [r7, #23]
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d3d3      	bcc.n	8009aac <IntToUnicode+0x18>
  }
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bc80      	pop	{r7}
 8009b0e:	4770      	bx	lr

08009b10 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d106      	bne.n	8009b30 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	4a08      	ldr	r2, [pc, #32]	; (8009b48 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b28:	f043 0301 	orr.w	r3, r3, #1
 8009b2c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009b2e:	e005      	b.n	8009b3c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009b30:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	4a04      	ldr	r2, [pc, #16]	; (8009b48 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b36:	f023 0301 	bic.w	r3, r3, #1
 8009b3a:	6053      	str	r3, [r2, #4]
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	40010000 	.word	0x40010000

08009b4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a0d      	ldr	r2, [pc, #52]	; (8009b90 <HAL_PCD_MspInit+0x44>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d113      	bne.n	8009b86 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <HAL_PCD_MspInit+0x48>)
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	4a0c      	ldr	r2, [pc, #48]	; (8009b94 <HAL_PCD_MspInit+0x48>)
 8009b64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b68:	6253      	str	r3, [r2, #36]	; 0x24
 8009b6a:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <HAL_PCD_MspInit+0x48>)
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009b76:	2200      	movs	r2, #0
 8009b78:	2100      	movs	r1, #0
 8009b7a:	2014      	movs	r0, #20
 8009b7c:	f7f7 fb9f 	bl	80012be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009b80:	2014      	movs	r0, #20
 8009b82:	f7f7 fbb8 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b86:	bf00      	nop
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	40005c00 	.word	0x40005c00
 8009b94:	40023800 	.word	0x40023800

08009b98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009bac:	4619      	mov	r1, r3
 8009bae:	4610      	mov	r0, r2
 8009bb0:	f7fd fcc3 	bl	800753a <USBD_LL_SetupStage>
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	6879      	ldr	r1, [r7, #4]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	00db      	lsls	r3, r3, #3
 8009bda:	440b      	add	r3, r1
 8009bdc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	4619      	mov	r1, r3
 8009be6:	f7fd fcf5 	bl	80075d4 <USBD_LL_DataOutStage>
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c04:	78fa      	ldrb	r2, [r7, #3]
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	440b      	add	r3, r1
 8009c12:	333c      	adds	r3, #60	; 0x3c
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	f7fd fd4c 	bl	80076b6 <USBD_LL_DataInStage>
}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd fe57 	bl	80078e8 <USBD_LL_SOF>
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d001      	beq.n	8009c5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c56:	f7f7 f805 	bl	8000c64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c60:	7bfa      	ldrb	r2, [r7, #15]
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fd fe0c 	bl	8007882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fd fdc5 	bl	8007800 <USBD_LL_Reset>
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd fe06 	bl	80078a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d005      	beq.n	8009ca8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c9c:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <HAL_PCD_SuspendCallback+0x30>)
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	4a03      	ldr	r2, [pc, #12]	; (8009cb0 <HAL_PCD_SuspendCallback+0x30>)
 8009ca2:	f043 0306 	orr.w	r3, r3, #6
 8009ca6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	e000ed00 	.word	0xe000ed00

08009cb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd fe00 	bl	80078c8 <USBD_LL_Resume>
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009cd8:	4a28      	ldr	r2, [pc, #160]	; (8009d7c <USBD_LL_Init+0xac>)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a26      	ldr	r2, [pc, #152]	; (8009d7c <USBD_LL_Init+0xac>)
 8009ce4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009ce8:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <USBD_LL_Init+0xac>)
 8009cea:	4a25      	ldr	r2, [pc, #148]	; (8009d80 <USBD_LL_Init+0xb0>)
 8009cec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009cee:	4b23      	ldr	r3, [pc, #140]	; (8009d7c <USBD_LL_Init+0xac>)
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009cf4:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <USBD_LL_Init+0xac>)
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cfa:	4b20      	ldr	r3, [pc, #128]	; (8009d7c <USBD_LL_Init+0xac>)
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d00:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <USBD_LL_Init+0xac>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d06:	4b1d      	ldr	r3, [pc, #116]	; (8009d7c <USBD_LL_Init+0xac>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d0c:	481b      	ldr	r0, [pc, #108]	; (8009d7c <USBD_LL_Init+0xac>)
 8009d0e:	f7f7 fccd 	bl	80016ac <HAL_PCD_Init>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d18:	f7f6 ffa4 	bl	8000c64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d22:	2318      	movs	r3, #24
 8009d24:	2200      	movs	r2, #0
 8009d26:	2100      	movs	r1, #0
 8009d28:	f7f9 f8aa 	bl	8002e80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d32:	2358      	movs	r3, #88	; 0x58
 8009d34:	2200      	movs	r2, #0
 8009d36:	2180      	movs	r1, #128	; 0x80
 8009d38:	f7f9 f8a2 	bl	8002e80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d42:	23c0      	movs	r3, #192	; 0xc0
 8009d44:	2200      	movs	r2, #0
 8009d46:	2181      	movs	r1, #129	; 0x81
 8009d48:	f7f9 f89a 	bl	8002e80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009d56:	2200      	movs	r2, #0
 8009d58:	2101      	movs	r1, #1
 8009d5a:	f7f9 f891 	bl	8002e80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2182      	movs	r1, #130	; 0x82
 8009d6c:	f7f9 f888 	bl	8002e80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20001e88 	.word	0x20001e88
 8009d80:	40005c00 	.word	0x40005c00

08009d84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7f7 fd64 	bl	8001868 <HAL_PCD_Start>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 f944 	bl	800a034 <USBD_Get_USB_Status>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	4608      	mov	r0, r1
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4603      	mov	r3, r0
 8009dca:	70fb      	strb	r3, [r7, #3]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70bb      	strb	r3, [r7, #2]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009de2:	78bb      	ldrb	r3, [r7, #2]
 8009de4:	883a      	ldrh	r2, [r7, #0]
 8009de6:	78f9      	ldrb	r1, [r7, #3]
 8009de8:	f7f7 fe80 	bl	8001aec <HAL_PCD_EP_Open>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 f91e 	bl	800a034 <USBD_Get_USB_Status>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e20:	78fa      	ldrb	r2, [r7, #3]
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7f7 fec7 	bl	8001bb8 <HAL_PCD_EP_Close>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f8ff 	bl	800a034 <USBD_Get_USB_Status>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f7 ff87 	bl	8001d76 <HAL_PCD_EP_SetStall>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f8e0 	bl	800a034 <USBD_Get_USB_Status>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7f7 ffba 	bl	8001e1a <HAL_PCD_EP_ClrStall>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f8c1 	bl	800a034 <USBD_Get_USB_Status>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009ed2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	da0c      	bge.n	8009ef6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee2:	68f9      	ldr	r1, [r7, #12]
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	00db      	lsls	r3, r3, #3
 8009eee:	440b      	add	r3, r1
 8009ef0:	3302      	adds	r3, #2
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	e00b      	b.n	8009f0e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009efc:	68f9      	ldr	r1, [r7, #12]
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	440b      	add	r3, r1
 8009f08:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f0c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr

08009f18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f32:	78fa      	ldrb	r2, [r7, #3]
 8009f34:	4611      	mov	r1, r2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7f7 fdb3 	bl	8001aa2 <HAL_PCD_SetAddress>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 f876 	bl	800a034 <USBD_Get_USB_Status>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b086      	sub	sp, #24
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	461a      	mov	r2, r3
 8009f62:	460b      	mov	r3, r1
 8009f64:	72fb      	strb	r3, [r7, #11]
 8009f66:	4613      	mov	r3, r2
 8009f68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009f78:	893b      	ldrh	r3, [r7, #8]
 8009f7a:	7af9      	ldrb	r1, [r7, #11]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	f7f7 feb7 	bl	8001cf0 <HAL_PCD_EP_Transmit>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 f853 	bl	800a034 <USBD_Get_USB_Status>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f92:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	460b      	mov	r3, r1
 8009faa:	72fb      	strb	r3, [r7, #11]
 8009fac:	4613      	mov	r3, r2
 8009fae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fbe:	893b      	ldrh	r3, [r7, #8]
 8009fc0:	7af9      	ldrb	r1, [r7, #11]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	f7f7 fe40 	bl	8001c48 <HAL_PCD_EP_Receive>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 f830 	bl	800a034 <USBD_Get_USB_Status>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	460b      	mov	r3, r1
 8009fec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f7 fe62 	bl	8001cc2 <HAL_PCD_EP_GetRxCount>
 8009ffe:	4603      	mov	r3, r0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <USBD_static_malloc+0x14>)
}
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	bc80      	pop	{r7}
 800a01a:	4770      	bx	lr
 800a01c:	20002174 	.word	0x20002174

0800a020 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]

}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bc80      	pop	{r7}
 800a030:	4770      	bx	lr
	...

0800a034 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	2b03      	cmp	r3, #3
 800a046:	d817      	bhi.n	800a078 <USBD_Get_USB_Status+0x44>
 800a048:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <USBD_Get_USB_Status+0x1c>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a061 	.word	0x0800a061
 800a054:	0800a067 	.word	0x0800a067
 800a058:	0800a06d 	.word	0x0800a06d
 800a05c:	0800a073 	.word	0x0800a073
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
    break;
 800a064:	e00b      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a066:	2302      	movs	r3, #2
 800a068:	73fb      	strb	r3, [r7, #15]
    break;
 800a06a:	e008      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a06c:	2301      	movs	r3, #1
 800a06e:	73fb      	strb	r3, [r7, #15]
    break;
 800a070:	e005      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a072:	2302      	movs	r3, #2
 800a074:	73fb      	strb	r3, [r7, #15]
    break;
 800a076:	e002      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a078:	2302      	movs	r3, #2
 800a07a:	73fb      	strb	r3, [r7, #15]
    break;
 800a07c:	bf00      	nop
  }
  return usb_status;
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	bc80      	pop	{r7}
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop

0800a08c <__errno>:
 800a08c:	4b01      	ldr	r3, [pc, #4]	; (800a094 <__errno+0x8>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20000444 	.word	0x20000444

0800a098 <__libc_init_array>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	2600      	movs	r6, #0
 800a09c:	4d0c      	ldr	r5, [pc, #48]	; (800a0d0 <__libc_init_array+0x38>)
 800a09e:	4c0d      	ldr	r4, [pc, #52]	; (800a0d4 <__libc_init_array+0x3c>)
 800a0a0:	1b64      	subs	r4, r4, r5
 800a0a2:	10a4      	asrs	r4, r4, #2
 800a0a4:	42a6      	cmp	r6, r4
 800a0a6:	d109      	bne.n	800a0bc <__libc_init_array+0x24>
 800a0a8:	f001 fb04 	bl	800b6b4 <_init>
 800a0ac:	2600      	movs	r6, #0
 800a0ae:	4d0a      	ldr	r5, [pc, #40]	; (800a0d8 <__libc_init_array+0x40>)
 800a0b0:	4c0a      	ldr	r4, [pc, #40]	; (800a0dc <__libc_init_array+0x44>)
 800a0b2:	1b64      	subs	r4, r4, r5
 800a0b4:	10a4      	asrs	r4, r4, #2
 800a0b6:	42a6      	cmp	r6, r4
 800a0b8:	d105      	bne.n	800a0c6 <__libc_init_array+0x2e>
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c0:	4798      	blx	r3
 800a0c2:	3601      	adds	r6, #1
 800a0c4:	e7ee      	b.n	800a0a4 <__libc_init_array+0xc>
 800a0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ca:	4798      	blx	r3
 800a0cc:	3601      	adds	r6, #1
 800a0ce:	e7f2      	b.n	800a0b6 <__libc_init_array+0x1e>
 800a0d0:	0800bee0 	.word	0x0800bee0
 800a0d4:	0800bee0 	.word	0x0800bee0
 800a0d8:	0800bee0 	.word	0x0800bee0
 800a0dc:	0800bee4 	.word	0x0800bee4

0800a0e0 <memset>:
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	4402      	add	r2, r0
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d100      	bne.n	800a0ea <memset+0xa>
 800a0e8:	4770      	bx	lr
 800a0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ee:	e7f9      	b.n	800a0e4 <memset+0x4>

0800a0f0 <siprintf>:
 800a0f0:	b40e      	push	{r1, r2, r3}
 800a0f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0f6:	b500      	push	{lr}
 800a0f8:	b09c      	sub	sp, #112	; 0x70
 800a0fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a0fc:	9002      	str	r0, [sp, #8]
 800a0fe:	9006      	str	r0, [sp, #24]
 800a100:	9107      	str	r1, [sp, #28]
 800a102:	9104      	str	r1, [sp, #16]
 800a104:	4808      	ldr	r0, [pc, #32]	; (800a128 <siprintf+0x38>)
 800a106:	4909      	ldr	r1, [pc, #36]	; (800a12c <siprintf+0x3c>)
 800a108:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10c:	9105      	str	r1, [sp, #20]
 800a10e:	6800      	ldr	r0, [r0, #0]
 800a110:	a902      	add	r1, sp, #8
 800a112:	9301      	str	r3, [sp, #4]
 800a114:	f000 fa82 	bl	800a61c <_svfiprintf_r>
 800a118:	2200      	movs	r2, #0
 800a11a:	9b02      	ldr	r3, [sp, #8]
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	b01c      	add	sp, #112	; 0x70
 800a120:	f85d eb04 	ldr.w	lr, [sp], #4
 800a124:	b003      	add	sp, #12
 800a126:	4770      	bx	lr
 800a128:	20000444 	.word	0x20000444
 800a12c:	ffff0208 	.word	0xffff0208

0800a130 <strcat>:
 800a130:	4602      	mov	r2, r0
 800a132:	b510      	push	{r4, lr}
 800a134:	7814      	ldrb	r4, [r2, #0]
 800a136:	4613      	mov	r3, r2
 800a138:	3201      	adds	r2, #1
 800a13a:	2c00      	cmp	r4, #0
 800a13c:	d1fa      	bne.n	800a134 <strcat+0x4>
 800a13e:	3b01      	subs	r3, #1
 800a140:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a144:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a148:	2a00      	cmp	r2, #0
 800a14a:	d1f9      	bne.n	800a140 <strcat+0x10>
 800a14c:	bd10      	pop	{r4, pc}

0800a14e <strncmp>:
 800a14e:	4603      	mov	r3, r0
 800a150:	b510      	push	{r4, lr}
 800a152:	b172      	cbz	r2, 800a172 <strncmp+0x24>
 800a154:	3901      	subs	r1, #1
 800a156:	1884      	adds	r4, r0, r2
 800a158:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a15c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a160:	4290      	cmp	r0, r2
 800a162:	d101      	bne.n	800a168 <strncmp+0x1a>
 800a164:	42a3      	cmp	r3, r4
 800a166:	d101      	bne.n	800a16c <strncmp+0x1e>
 800a168:	1a80      	subs	r0, r0, r2
 800a16a:	bd10      	pop	{r4, pc}
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d1f3      	bne.n	800a158 <strncmp+0xa>
 800a170:	e7fa      	b.n	800a168 <strncmp+0x1a>
 800a172:	4610      	mov	r0, r2
 800a174:	e7f9      	b.n	800a16a <strncmp+0x1c>
	...

0800a178 <strtok>:
 800a178:	4b16      	ldr	r3, [pc, #88]	; (800a1d4 <strtok+0x5c>)
 800a17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	681f      	ldr	r7, [r3, #0]
 800a180:	4605      	mov	r5, r0
 800a182:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a184:	460e      	mov	r6, r1
 800a186:	b9ec      	cbnz	r4, 800a1c4 <strtok+0x4c>
 800a188:	2050      	movs	r0, #80	; 0x50
 800a18a:	f000 f907 	bl	800a39c <malloc>
 800a18e:	4602      	mov	r2, r0
 800a190:	65b8      	str	r0, [r7, #88]	; 0x58
 800a192:	b920      	cbnz	r0, 800a19e <strtok+0x26>
 800a194:	2157      	movs	r1, #87	; 0x57
 800a196:	4b10      	ldr	r3, [pc, #64]	; (800a1d8 <strtok+0x60>)
 800a198:	4810      	ldr	r0, [pc, #64]	; (800a1dc <strtok+0x64>)
 800a19a:	f000 f8cf 	bl	800a33c <__assert_func>
 800a19e:	e9c0 4400 	strd	r4, r4, [r0]
 800a1a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a1a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a1aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a1ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a1b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a1b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a1ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a1be:	6184      	str	r4, [r0, #24]
 800a1c0:	7704      	strb	r4, [r0, #28]
 800a1c2:	6244      	str	r4, [r0, #36]	; 0x24
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d0:	f000 b806 	b.w	800a1e0 <__strtok_r>
 800a1d4:	20000444 	.word	0x20000444
 800a1d8:	0800bc94 	.word	0x0800bc94
 800a1dc:	0800bcab 	.word	0x0800bcab

0800a1e0 <__strtok_r>:
 800a1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e2:	b908      	cbnz	r0, 800a1e8 <__strtok_r+0x8>
 800a1e4:	6810      	ldr	r0, [r2, #0]
 800a1e6:	b188      	cbz	r0, 800a20c <__strtok_r+0x2c>
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a1f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a1f6:	b91e      	cbnz	r6, 800a200 <__strtok_r+0x20>
 800a1f8:	b965      	cbnz	r5, 800a214 <__strtok_r+0x34>
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	6015      	str	r5, [r2, #0]
 800a1fe:	e005      	b.n	800a20c <__strtok_r+0x2c>
 800a200:	42b5      	cmp	r5, r6
 800a202:	d1f6      	bne.n	800a1f2 <__strtok_r+0x12>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1f0      	bne.n	800a1ea <__strtok_r+0xa>
 800a208:	6014      	str	r4, [r2, #0]
 800a20a:	7003      	strb	r3, [r0, #0]
 800a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a20e:	461c      	mov	r4, r3
 800a210:	e00c      	b.n	800a22c <__strtok_r+0x4c>
 800a212:	b915      	cbnz	r5, 800a21a <__strtok_r+0x3a>
 800a214:	460e      	mov	r6, r1
 800a216:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a21a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a21e:	42ab      	cmp	r3, r5
 800a220:	d1f7      	bne.n	800a212 <__strtok_r+0x32>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0f3      	beq.n	800a20e <__strtok_r+0x2e>
 800a226:	2300      	movs	r3, #0
 800a228:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a22c:	6014      	str	r4, [r2, #0]
 800a22e:	e7ed      	b.n	800a20c <__strtok_r+0x2c>

0800a230 <_strtol_l.constprop.0>:
 800a230:	2b01      	cmp	r3, #1
 800a232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a236:	4680      	mov	r8, r0
 800a238:	d001      	beq.n	800a23e <_strtol_l.constprop.0+0xe>
 800a23a:	2b24      	cmp	r3, #36	; 0x24
 800a23c:	d906      	bls.n	800a24c <_strtol_l.constprop.0+0x1c>
 800a23e:	f7ff ff25 	bl	800a08c <__errno>
 800a242:	2316      	movs	r3, #22
 800a244:	6003      	str	r3, [r0, #0]
 800a246:	2000      	movs	r0, #0
 800a248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24c:	460d      	mov	r5, r1
 800a24e:	4f35      	ldr	r7, [pc, #212]	; (800a324 <_strtol_l.constprop.0+0xf4>)
 800a250:	4628      	mov	r0, r5
 800a252:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a256:	5de6      	ldrb	r6, [r4, r7]
 800a258:	f016 0608 	ands.w	r6, r6, #8
 800a25c:	d1f8      	bne.n	800a250 <_strtol_l.constprop.0+0x20>
 800a25e:	2c2d      	cmp	r4, #45	; 0x2d
 800a260:	d12f      	bne.n	800a2c2 <_strtol_l.constprop.0+0x92>
 800a262:	2601      	movs	r6, #1
 800a264:	782c      	ldrb	r4, [r5, #0]
 800a266:	1c85      	adds	r5, r0, #2
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d057      	beq.n	800a31c <_strtol_l.constprop.0+0xec>
 800a26c:	2b10      	cmp	r3, #16
 800a26e:	d109      	bne.n	800a284 <_strtol_l.constprop.0+0x54>
 800a270:	2c30      	cmp	r4, #48	; 0x30
 800a272:	d107      	bne.n	800a284 <_strtol_l.constprop.0+0x54>
 800a274:	7828      	ldrb	r0, [r5, #0]
 800a276:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a27a:	2858      	cmp	r0, #88	; 0x58
 800a27c:	d149      	bne.n	800a312 <_strtol_l.constprop.0+0xe2>
 800a27e:	2310      	movs	r3, #16
 800a280:	786c      	ldrb	r4, [r5, #1]
 800a282:	3502      	adds	r5, #2
 800a284:	2700      	movs	r7, #0
 800a286:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a28a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a28e:	fbbe f9f3 	udiv	r9, lr, r3
 800a292:	4638      	mov	r0, r7
 800a294:	fb03 ea19 	mls	sl, r3, r9, lr
 800a298:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a29c:	f1bc 0f09 	cmp.w	ip, #9
 800a2a0:	d814      	bhi.n	800a2cc <_strtol_l.constprop.0+0x9c>
 800a2a2:	4664      	mov	r4, ip
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	dd22      	ble.n	800a2ee <_strtol_l.constprop.0+0xbe>
 800a2a8:	2f00      	cmp	r7, #0
 800a2aa:	db1d      	blt.n	800a2e8 <_strtol_l.constprop.0+0xb8>
 800a2ac:	4581      	cmp	r9, r0
 800a2ae:	d31b      	bcc.n	800a2e8 <_strtol_l.constprop.0+0xb8>
 800a2b0:	d101      	bne.n	800a2b6 <_strtol_l.constprop.0+0x86>
 800a2b2:	45a2      	cmp	sl, r4
 800a2b4:	db18      	blt.n	800a2e8 <_strtol_l.constprop.0+0xb8>
 800a2b6:	2701      	movs	r7, #1
 800a2b8:	fb00 4003 	mla	r0, r0, r3, r4
 800a2bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2c0:	e7ea      	b.n	800a298 <_strtol_l.constprop.0+0x68>
 800a2c2:	2c2b      	cmp	r4, #43	; 0x2b
 800a2c4:	bf04      	itt	eq
 800a2c6:	782c      	ldrbeq	r4, [r5, #0]
 800a2c8:	1c85      	addeq	r5, r0, #2
 800a2ca:	e7cd      	b.n	800a268 <_strtol_l.constprop.0+0x38>
 800a2cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a2d0:	f1bc 0f19 	cmp.w	ip, #25
 800a2d4:	d801      	bhi.n	800a2da <_strtol_l.constprop.0+0xaa>
 800a2d6:	3c37      	subs	r4, #55	; 0x37
 800a2d8:	e7e4      	b.n	800a2a4 <_strtol_l.constprop.0+0x74>
 800a2da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a2de:	f1bc 0f19 	cmp.w	ip, #25
 800a2e2:	d804      	bhi.n	800a2ee <_strtol_l.constprop.0+0xbe>
 800a2e4:	3c57      	subs	r4, #87	; 0x57
 800a2e6:	e7dd      	b.n	800a2a4 <_strtol_l.constprop.0+0x74>
 800a2e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a2ec:	e7e6      	b.n	800a2bc <_strtol_l.constprop.0+0x8c>
 800a2ee:	2f00      	cmp	r7, #0
 800a2f0:	da07      	bge.n	800a302 <_strtol_l.constprop.0+0xd2>
 800a2f2:	2322      	movs	r3, #34	; 0x22
 800a2f4:	4670      	mov	r0, lr
 800a2f6:	f8c8 3000 	str.w	r3, [r8]
 800a2fa:	2a00      	cmp	r2, #0
 800a2fc:	d0a4      	beq.n	800a248 <_strtol_l.constprop.0+0x18>
 800a2fe:	1e69      	subs	r1, r5, #1
 800a300:	e005      	b.n	800a30e <_strtol_l.constprop.0+0xde>
 800a302:	b106      	cbz	r6, 800a306 <_strtol_l.constprop.0+0xd6>
 800a304:	4240      	negs	r0, r0
 800a306:	2a00      	cmp	r2, #0
 800a308:	d09e      	beq.n	800a248 <_strtol_l.constprop.0+0x18>
 800a30a:	2f00      	cmp	r7, #0
 800a30c:	d1f7      	bne.n	800a2fe <_strtol_l.constprop.0+0xce>
 800a30e:	6011      	str	r1, [r2, #0]
 800a310:	e79a      	b.n	800a248 <_strtol_l.constprop.0+0x18>
 800a312:	2430      	movs	r4, #48	; 0x30
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1b5      	bne.n	800a284 <_strtol_l.constprop.0+0x54>
 800a318:	2308      	movs	r3, #8
 800a31a:	e7b3      	b.n	800a284 <_strtol_l.constprop.0+0x54>
 800a31c:	2c30      	cmp	r4, #48	; 0x30
 800a31e:	d0a9      	beq.n	800a274 <_strtol_l.constprop.0+0x44>
 800a320:	230a      	movs	r3, #10
 800a322:	e7af      	b.n	800a284 <_strtol_l.constprop.0+0x54>
 800a324:	0800bd45 	.word	0x0800bd45

0800a328 <strtol>:
 800a328:	4613      	mov	r3, r2
 800a32a:	460a      	mov	r2, r1
 800a32c:	4601      	mov	r1, r0
 800a32e:	4802      	ldr	r0, [pc, #8]	; (800a338 <strtol+0x10>)
 800a330:	6800      	ldr	r0, [r0, #0]
 800a332:	f7ff bf7d 	b.w	800a230 <_strtol_l.constprop.0>
 800a336:	bf00      	nop
 800a338:	20000444 	.word	0x20000444

0800a33c <__assert_func>:
 800a33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a33e:	4614      	mov	r4, r2
 800a340:	461a      	mov	r2, r3
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <__assert_func+0x2c>)
 800a344:	4605      	mov	r5, r0
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68d8      	ldr	r0, [r3, #12]
 800a34a:	b14c      	cbz	r4, 800a360 <__assert_func+0x24>
 800a34c:	4b07      	ldr	r3, [pc, #28]	; (800a36c <__assert_func+0x30>)
 800a34e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a352:	9100      	str	r1, [sp, #0]
 800a354:	462b      	mov	r3, r5
 800a356:	4906      	ldr	r1, [pc, #24]	; (800a370 <__assert_func+0x34>)
 800a358:	f000 f80e 	bl	800a378 <fiprintf>
 800a35c:	f000 fe1c 	bl	800af98 <abort>
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <__assert_func+0x38>)
 800a362:	461c      	mov	r4, r3
 800a364:	e7f3      	b.n	800a34e <__assert_func+0x12>
 800a366:	bf00      	nop
 800a368:	20000444 	.word	0x20000444
 800a36c:	0800bd08 	.word	0x0800bd08
 800a370:	0800bd15 	.word	0x0800bd15
 800a374:	0800bd43 	.word	0x0800bd43

0800a378 <fiprintf>:
 800a378:	b40e      	push	{r1, r2, r3}
 800a37a:	b503      	push	{r0, r1, lr}
 800a37c:	4601      	mov	r1, r0
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	4805      	ldr	r0, [pc, #20]	; (800a398 <fiprintf+0x20>)
 800a382:	f853 2b04 	ldr.w	r2, [r3], #4
 800a386:	6800      	ldr	r0, [r0, #0]
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	f000 fa6f 	bl	800a86c <_vfiprintf_r>
 800a38e:	b002      	add	sp, #8
 800a390:	f85d eb04 	ldr.w	lr, [sp], #4
 800a394:	b003      	add	sp, #12
 800a396:	4770      	bx	lr
 800a398:	20000444 	.word	0x20000444

0800a39c <malloc>:
 800a39c:	4b02      	ldr	r3, [pc, #8]	; (800a3a8 <malloc+0xc>)
 800a39e:	4601      	mov	r1, r0
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	f000 b86b 	b.w	800a47c <_malloc_r>
 800a3a6:	bf00      	nop
 800a3a8:	20000444 	.word	0x20000444

0800a3ac <_free_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	d040      	beq.n	800a436 <_free_r+0x8a>
 800a3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3b8:	1f0c      	subs	r4, r1, #4
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	bfb8      	it	lt
 800a3be:	18e4      	addlt	r4, r4, r3
 800a3c0:	f001 f844 	bl	800b44c <__malloc_lock>
 800a3c4:	4a1c      	ldr	r2, [pc, #112]	; (800a438 <_free_r+0x8c>)
 800a3c6:	6813      	ldr	r3, [r2, #0]
 800a3c8:	b933      	cbnz	r3, 800a3d8 <_free_r+0x2c>
 800a3ca:	6063      	str	r3, [r4, #4]
 800a3cc:	6014      	str	r4, [r2, #0]
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3d4:	f001 b840 	b.w	800b458 <__malloc_unlock>
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	d908      	bls.n	800a3ee <_free_r+0x42>
 800a3dc:	6820      	ldr	r0, [r4, #0]
 800a3de:	1821      	adds	r1, r4, r0
 800a3e0:	428b      	cmp	r3, r1
 800a3e2:	bf01      	itttt	eq
 800a3e4:	6819      	ldreq	r1, [r3, #0]
 800a3e6:	685b      	ldreq	r3, [r3, #4]
 800a3e8:	1809      	addeq	r1, r1, r0
 800a3ea:	6021      	streq	r1, [r4, #0]
 800a3ec:	e7ed      	b.n	800a3ca <_free_r+0x1e>
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	b10b      	cbz	r3, 800a3f8 <_free_r+0x4c>
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	d9fa      	bls.n	800a3ee <_free_r+0x42>
 800a3f8:	6811      	ldr	r1, [r2, #0]
 800a3fa:	1850      	adds	r0, r2, r1
 800a3fc:	42a0      	cmp	r0, r4
 800a3fe:	d10b      	bne.n	800a418 <_free_r+0x6c>
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	4401      	add	r1, r0
 800a404:	1850      	adds	r0, r2, r1
 800a406:	4283      	cmp	r3, r0
 800a408:	6011      	str	r1, [r2, #0]
 800a40a:	d1e0      	bne.n	800a3ce <_free_r+0x22>
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4401      	add	r1, r0
 800a412:	6011      	str	r1, [r2, #0]
 800a414:	6053      	str	r3, [r2, #4]
 800a416:	e7da      	b.n	800a3ce <_free_r+0x22>
 800a418:	d902      	bls.n	800a420 <_free_r+0x74>
 800a41a:	230c      	movs	r3, #12
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	e7d6      	b.n	800a3ce <_free_r+0x22>
 800a420:	6820      	ldr	r0, [r4, #0]
 800a422:	1821      	adds	r1, r4, r0
 800a424:	428b      	cmp	r3, r1
 800a426:	bf01      	itttt	eq
 800a428:	6819      	ldreq	r1, [r3, #0]
 800a42a:	685b      	ldreq	r3, [r3, #4]
 800a42c:	1809      	addeq	r1, r1, r0
 800a42e:	6021      	streq	r1, [r4, #0]
 800a430:	6063      	str	r3, [r4, #4]
 800a432:	6054      	str	r4, [r2, #4]
 800a434:	e7cb      	b.n	800a3ce <_free_r+0x22>
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	20002394 	.word	0x20002394

0800a43c <sbrk_aligned>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	4e0e      	ldr	r6, [pc, #56]	; (800a478 <sbrk_aligned+0x3c>)
 800a440:	460c      	mov	r4, r1
 800a442:	6831      	ldr	r1, [r6, #0]
 800a444:	4605      	mov	r5, r0
 800a446:	b911      	cbnz	r1, 800a44e <sbrk_aligned+0x12>
 800a448:	f000 fcd6 	bl	800adf8 <_sbrk_r>
 800a44c:	6030      	str	r0, [r6, #0]
 800a44e:	4621      	mov	r1, r4
 800a450:	4628      	mov	r0, r5
 800a452:	f000 fcd1 	bl	800adf8 <_sbrk_r>
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	d00a      	beq.n	800a470 <sbrk_aligned+0x34>
 800a45a:	1cc4      	adds	r4, r0, #3
 800a45c:	f024 0403 	bic.w	r4, r4, #3
 800a460:	42a0      	cmp	r0, r4
 800a462:	d007      	beq.n	800a474 <sbrk_aligned+0x38>
 800a464:	1a21      	subs	r1, r4, r0
 800a466:	4628      	mov	r0, r5
 800a468:	f000 fcc6 	bl	800adf8 <_sbrk_r>
 800a46c:	3001      	adds	r0, #1
 800a46e:	d101      	bne.n	800a474 <sbrk_aligned+0x38>
 800a470:	f04f 34ff 	mov.w	r4, #4294967295
 800a474:	4620      	mov	r0, r4
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	20002398 	.word	0x20002398

0800a47c <_malloc_r>:
 800a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	1ccd      	adds	r5, r1, #3
 800a482:	f025 0503 	bic.w	r5, r5, #3
 800a486:	3508      	adds	r5, #8
 800a488:	2d0c      	cmp	r5, #12
 800a48a:	bf38      	it	cc
 800a48c:	250c      	movcc	r5, #12
 800a48e:	2d00      	cmp	r5, #0
 800a490:	4607      	mov	r7, r0
 800a492:	db01      	blt.n	800a498 <_malloc_r+0x1c>
 800a494:	42a9      	cmp	r1, r5
 800a496:	d905      	bls.n	800a4a4 <_malloc_r+0x28>
 800a498:	230c      	movs	r3, #12
 800a49a:	2600      	movs	r6, #0
 800a49c:	603b      	str	r3, [r7, #0]
 800a49e:	4630      	mov	r0, r6
 800a4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a4:	4e2e      	ldr	r6, [pc, #184]	; (800a560 <_malloc_r+0xe4>)
 800a4a6:	f000 ffd1 	bl	800b44c <__malloc_lock>
 800a4aa:	6833      	ldr	r3, [r6, #0]
 800a4ac:	461c      	mov	r4, r3
 800a4ae:	bb34      	cbnz	r4, 800a4fe <_malloc_r+0x82>
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f7ff ffc2 	bl	800a43c <sbrk_aligned>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	d14d      	bne.n	800a55a <_malloc_r+0xde>
 800a4be:	6834      	ldr	r4, [r6, #0]
 800a4c0:	4626      	mov	r6, r4
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	d140      	bne.n	800a548 <_malloc_r+0xcc>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4638      	mov	r0, r7
 800a4cc:	eb04 0803 	add.w	r8, r4, r3
 800a4d0:	f000 fc92 	bl	800adf8 <_sbrk_r>
 800a4d4:	4580      	cmp	r8, r0
 800a4d6:	d13a      	bne.n	800a54e <_malloc_r+0xd2>
 800a4d8:	6821      	ldr	r1, [r4, #0]
 800a4da:	3503      	adds	r5, #3
 800a4dc:	1a6d      	subs	r5, r5, r1
 800a4de:	f025 0503 	bic.w	r5, r5, #3
 800a4e2:	3508      	adds	r5, #8
 800a4e4:	2d0c      	cmp	r5, #12
 800a4e6:	bf38      	it	cc
 800a4e8:	250c      	movcc	r5, #12
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f7ff ffa5 	bl	800a43c <sbrk_aligned>
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d02b      	beq.n	800a54e <_malloc_r+0xd2>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	442b      	add	r3, r5
 800a4fa:	6023      	str	r3, [r4, #0]
 800a4fc:	e00e      	b.n	800a51c <_malloc_r+0xa0>
 800a4fe:	6822      	ldr	r2, [r4, #0]
 800a500:	1b52      	subs	r2, r2, r5
 800a502:	d41e      	bmi.n	800a542 <_malloc_r+0xc6>
 800a504:	2a0b      	cmp	r2, #11
 800a506:	d916      	bls.n	800a536 <_malloc_r+0xba>
 800a508:	1961      	adds	r1, r4, r5
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	6025      	str	r5, [r4, #0]
 800a50e:	bf18      	it	ne
 800a510:	6059      	strne	r1, [r3, #4]
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	bf08      	it	eq
 800a516:	6031      	streq	r1, [r6, #0]
 800a518:	5162      	str	r2, [r4, r5]
 800a51a:	604b      	str	r3, [r1, #4]
 800a51c:	4638      	mov	r0, r7
 800a51e:	f104 060b 	add.w	r6, r4, #11
 800a522:	f000 ff99 	bl	800b458 <__malloc_unlock>
 800a526:	f026 0607 	bic.w	r6, r6, #7
 800a52a:	1d23      	adds	r3, r4, #4
 800a52c:	1af2      	subs	r2, r6, r3
 800a52e:	d0b6      	beq.n	800a49e <_malloc_r+0x22>
 800a530:	1b9b      	subs	r3, r3, r6
 800a532:	50a3      	str	r3, [r4, r2]
 800a534:	e7b3      	b.n	800a49e <_malloc_r+0x22>
 800a536:	6862      	ldr	r2, [r4, #4]
 800a538:	42a3      	cmp	r3, r4
 800a53a:	bf0c      	ite	eq
 800a53c:	6032      	streq	r2, [r6, #0]
 800a53e:	605a      	strne	r2, [r3, #4]
 800a540:	e7ec      	b.n	800a51c <_malloc_r+0xa0>
 800a542:	4623      	mov	r3, r4
 800a544:	6864      	ldr	r4, [r4, #4]
 800a546:	e7b2      	b.n	800a4ae <_malloc_r+0x32>
 800a548:	4634      	mov	r4, r6
 800a54a:	6876      	ldr	r6, [r6, #4]
 800a54c:	e7b9      	b.n	800a4c2 <_malloc_r+0x46>
 800a54e:	230c      	movs	r3, #12
 800a550:	4638      	mov	r0, r7
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	f000 ff80 	bl	800b458 <__malloc_unlock>
 800a558:	e7a1      	b.n	800a49e <_malloc_r+0x22>
 800a55a:	6025      	str	r5, [r4, #0]
 800a55c:	e7de      	b.n	800a51c <_malloc_r+0xa0>
 800a55e:	bf00      	nop
 800a560:	20002394 	.word	0x20002394

0800a564 <__ssputs_r>:
 800a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a568:	688e      	ldr	r6, [r1, #8]
 800a56a:	4682      	mov	sl, r0
 800a56c:	429e      	cmp	r6, r3
 800a56e:	460c      	mov	r4, r1
 800a570:	4690      	mov	r8, r2
 800a572:	461f      	mov	r7, r3
 800a574:	d838      	bhi.n	800a5e8 <__ssputs_r+0x84>
 800a576:	898a      	ldrh	r2, [r1, #12]
 800a578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a57c:	d032      	beq.n	800a5e4 <__ssputs_r+0x80>
 800a57e:	6825      	ldr	r5, [r4, #0]
 800a580:	6909      	ldr	r1, [r1, #16]
 800a582:	3301      	adds	r3, #1
 800a584:	eba5 0901 	sub.w	r9, r5, r1
 800a588:	6965      	ldr	r5, [r4, #20]
 800a58a:	444b      	add	r3, r9
 800a58c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a594:	106d      	asrs	r5, r5, #1
 800a596:	429d      	cmp	r5, r3
 800a598:	bf38      	it	cc
 800a59a:	461d      	movcc	r5, r3
 800a59c:	0553      	lsls	r3, r2, #21
 800a59e:	d531      	bpl.n	800a604 <__ssputs_r+0xa0>
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f7ff ff6b 	bl	800a47c <_malloc_r>
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	b950      	cbnz	r0, 800a5c0 <__ssputs_r+0x5c>
 800a5aa:	230c      	movs	r3, #12
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	f8ca 3000 	str.w	r3, [sl]
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c0:	464a      	mov	r2, r9
 800a5c2:	6921      	ldr	r1, [r4, #16]
 800a5c4:	f000 ff1a 	bl	800b3fc <memcpy>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	6126      	str	r6, [r4, #16]
 800a5d6:	444e      	add	r6, r9
 800a5d8:	6026      	str	r6, [r4, #0]
 800a5da:	463e      	mov	r6, r7
 800a5dc:	6165      	str	r5, [r4, #20]
 800a5de:	eba5 0509 	sub.w	r5, r5, r9
 800a5e2:	60a5      	str	r5, [r4, #8]
 800a5e4:	42be      	cmp	r6, r7
 800a5e6:	d900      	bls.n	800a5ea <__ssputs_r+0x86>
 800a5e8:	463e      	mov	r6, r7
 800a5ea:	4632      	mov	r2, r6
 800a5ec:	4641      	mov	r1, r8
 800a5ee:	6820      	ldr	r0, [r4, #0]
 800a5f0:	f000 ff12 	bl	800b418 <memmove>
 800a5f4:	68a3      	ldr	r3, [r4, #8]
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	1b9b      	subs	r3, r3, r6
 800a5fa:	60a3      	str	r3, [r4, #8]
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	4433      	add	r3, r6
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	e7db      	b.n	800a5bc <__ssputs_r+0x58>
 800a604:	462a      	mov	r2, r5
 800a606:	f000 ff2d 	bl	800b464 <_realloc_r>
 800a60a:	4606      	mov	r6, r0
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d1e1      	bne.n	800a5d4 <__ssputs_r+0x70>
 800a610:	4650      	mov	r0, sl
 800a612:	6921      	ldr	r1, [r4, #16]
 800a614:	f7ff feca 	bl	800a3ac <_free_r>
 800a618:	e7c7      	b.n	800a5aa <__ssputs_r+0x46>
	...

0800a61c <_svfiprintf_r>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	4698      	mov	r8, r3
 800a622:	898b      	ldrh	r3, [r1, #12]
 800a624:	4607      	mov	r7, r0
 800a626:	061b      	lsls	r3, r3, #24
 800a628:	460d      	mov	r5, r1
 800a62a:	4614      	mov	r4, r2
 800a62c:	b09d      	sub	sp, #116	; 0x74
 800a62e:	d50e      	bpl.n	800a64e <_svfiprintf_r+0x32>
 800a630:	690b      	ldr	r3, [r1, #16]
 800a632:	b963      	cbnz	r3, 800a64e <_svfiprintf_r+0x32>
 800a634:	2140      	movs	r1, #64	; 0x40
 800a636:	f7ff ff21 	bl	800a47c <_malloc_r>
 800a63a:	6028      	str	r0, [r5, #0]
 800a63c:	6128      	str	r0, [r5, #16]
 800a63e:	b920      	cbnz	r0, 800a64a <_svfiprintf_r+0x2e>
 800a640:	230c      	movs	r3, #12
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	e0d1      	b.n	800a7ee <_svfiprintf_r+0x1d2>
 800a64a:	2340      	movs	r3, #64	; 0x40
 800a64c:	616b      	str	r3, [r5, #20]
 800a64e:	2300      	movs	r3, #0
 800a650:	9309      	str	r3, [sp, #36]	; 0x24
 800a652:	2320      	movs	r3, #32
 800a654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a658:	2330      	movs	r3, #48	; 0x30
 800a65a:	f04f 0901 	mov.w	r9, #1
 800a65e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a662:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a808 <_svfiprintf_r+0x1ec>
 800a666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a66a:	4623      	mov	r3, r4
 800a66c:	469a      	mov	sl, r3
 800a66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a672:	b10a      	cbz	r2, 800a678 <_svfiprintf_r+0x5c>
 800a674:	2a25      	cmp	r2, #37	; 0x25
 800a676:	d1f9      	bne.n	800a66c <_svfiprintf_r+0x50>
 800a678:	ebba 0b04 	subs.w	fp, sl, r4
 800a67c:	d00b      	beq.n	800a696 <_svfiprintf_r+0x7a>
 800a67e:	465b      	mov	r3, fp
 800a680:	4622      	mov	r2, r4
 800a682:	4629      	mov	r1, r5
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff ff6d 	bl	800a564 <__ssputs_r>
 800a68a:	3001      	adds	r0, #1
 800a68c:	f000 80aa 	beq.w	800a7e4 <_svfiprintf_r+0x1c8>
 800a690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a692:	445a      	add	r2, fp
 800a694:	9209      	str	r2, [sp, #36]	; 0x24
 800a696:	f89a 3000 	ldrb.w	r3, [sl]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80a2 	beq.w	800a7e4 <_svfiprintf_r+0x1c8>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6aa:	f10a 0a01 	add.w	sl, sl, #1
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	9307      	str	r3, [sp, #28]
 800a6b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a6b8:	4654      	mov	r4, sl
 800a6ba:	2205      	movs	r2, #5
 800a6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c0:	4851      	ldr	r0, [pc, #324]	; (800a808 <_svfiprintf_r+0x1ec>)
 800a6c2:	f000 fe8d 	bl	800b3e0 <memchr>
 800a6c6:	9a04      	ldr	r2, [sp, #16]
 800a6c8:	b9d8      	cbnz	r0, 800a702 <_svfiprintf_r+0xe6>
 800a6ca:	06d0      	lsls	r0, r2, #27
 800a6cc:	bf44      	itt	mi
 800a6ce:	2320      	movmi	r3, #32
 800a6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6d4:	0711      	lsls	r1, r2, #28
 800a6d6:	bf44      	itt	mi
 800a6d8:	232b      	movmi	r3, #43	; 0x2b
 800a6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6de:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e4:	d015      	beq.n	800a712 <_svfiprintf_r+0xf6>
 800a6e6:	4654      	mov	r4, sl
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	f04f 0c0a 	mov.w	ip, #10
 800a6ee:	9a07      	ldr	r2, [sp, #28]
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6f6:	3b30      	subs	r3, #48	; 0x30
 800a6f8:	2b09      	cmp	r3, #9
 800a6fa:	d94e      	bls.n	800a79a <_svfiprintf_r+0x17e>
 800a6fc:	b1b0      	cbz	r0, 800a72c <_svfiprintf_r+0x110>
 800a6fe:	9207      	str	r2, [sp, #28]
 800a700:	e014      	b.n	800a72c <_svfiprintf_r+0x110>
 800a702:	eba0 0308 	sub.w	r3, r0, r8
 800a706:	fa09 f303 	lsl.w	r3, r9, r3
 800a70a:	4313      	orrs	r3, r2
 800a70c:	46a2      	mov	sl, r4
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	e7d2      	b.n	800a6b8 <_svfiprintf_r+0x9c>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	1d19      	adds	r1, r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	9103      	str	r1, [sp, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfbb      	ittet	lt
 800a71e:	425b      	neglt	r3, r3
 800a720:	f042 0202 	orrlt.w	r2, r2, #2
 800a724:	9307      	strge	r3, [sp, #28]
 800a726:	9307      	strlt	r3, [sp, #28]
 800a728:	bfb8      	it	lt
 800a72a:	9204      	strlt	r2, [sp, #16]
 800a72c:	7823      	ldrb	r3, [r4, #0]
 800a72e:	2b2e      	cmp	r3, #46	; 0x2e
 800a730:	d10c      	bne.n	800a74c <_svfiprintf_r+0x130>
 800a732:	7863      	ldrb	r3, [r4, #1]
 800a734:	2b2a      	cmp	r3, #42	; 0x2a
 800a736:	d135      	bne.n	800a7a4 <_svfiprintf_r+0x188>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	3402      	adds	r4, #2
 800a73c:	1d1a      	adds	r2, r3, #4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	9203      	str	r2, [sp, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	bfb8      	it	lt
 800a746:	f04f 33ff 	movlt.w	r3, #4294967295
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a80c <_svfiprintf_r+0x1f0>
 800a750:	2203      	movs	r2, #3
 800a752:	4650      	mov	r0, sl
 800a754:	7821      	ldrb	r1, [r4, #0]
 800a756:	f000 fe43 	bl	800b3e0 <memchr>
 800a75a:	b140      	cbz	r0, 800a76e <_svfiprintf_r+0x152>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	eba0 000a 	sub.w	r0, r0, sl
 800a762:	fa03 f000 	lsl.w	r0, r3, r0
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	3401      	adds	r4, #1
 800a76a:	4303      	orrs	r3, r0
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a772:	2206      	movs	r2, #6
 800a774:	4826      	ldr	r0, [pc, #152]	; (800a810 <_svfiprintf_r+0x1f4>)
 800a776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a77a:	f000 fe31 	bl	800b3e0 <memchr>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d038      	beq.n	800a7f4 <_svfiprintf_r+0x1d8>
 800a782:	4b24      	ldr	r3, [pc, #144]	; (800a814 <_svfiprintf_r+0x1f8>)
 800a784:	bb1b      	cbnz	r3, 800a7ce <_svfiprintf_r+0x1b2>
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	3307      	adds	r3, #7
 800a78a:	f023 0307 	bic.w	r3, r3, #7
 800a78e:	3308      	adds	r3, #8
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a794:	4433      	add	r3, r6
 800a796:	9309      	str	r3, [sp, #36]	; 0x24
 800a798:	e767      	b.n	800a66a <_svfiprintf_r+0x4e>
 800a79a:	460c      	mov	r4, r1
 800a79c:	2001      	movs	r0, #1
 800a79e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7a2:	e7a5      	b.n	800a6f0 <_svfiprintf_r+0xd4>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f04f 0c0a 	mov.w	ip, #10
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	3401      	adds	r4, #1
 800a7ae:	9305      	str	r3, [sp, #20]
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b6:	3a30      	subs	r2, #48	; 0x30
 800a7b8:	2a09      	cmp	r2, #9
 800a7ba:	d903      	bls.n	800a7c4 <_svfiprintf_r+0x1a8>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0c5      	beq.n	800a74c <_svfiprintf_r+0x130>
 800a7c0:	9105      	str	r1, [sp, #20]
 800a7c2:	e7c3      	b.n	800a74c <_svfiprintf_r+0x130>
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7cc:	e7f0      	b.n	800a7b0 <_svfiprintf_r+0x194>
 800a7ce:	ab03      	add	r3, sp, #12
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	462a      	mov	r2, r5
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	4b10      	ldr	r3, [pc, #64]	; (800a818 <_svfiprintf_r+0x1fc>)
 800a7d8:	a904      	add	r1, sp, #16
 800a7da:	f3af 8000 	nop.w
 800a7de:	1c42      	adds	r2, r0, #1
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	d1d6      	bne.n	800a792 <_svfiprintf_r+0x176>
 800a7e4:	89ab      	ldrh	r3, [r5, #12]
 800a7e6:	065b      	lsls	r3, r3, #25
 800a7e8:	f53f af2c 	bmi.w	800a644 <_svfiprintf_r+0x28>
 800a7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ee:	b01d      	add	sp, #116	; 0x74
 800a7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f4:	ab03      	add	r3, sp, #12
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	4b06      	ldr	r3, [pc, #24]	; (800a818 <_svfiprintf_r+0x1fc>)
 800a7fe:	a904      	add	r1, sp, #16
 800a800:	f000 f9d4 	bl	800abac <_printf_i>
 800a804:	e7eb      	b.n	800a7de <_svfiprintf_r+0x1c2>
 800a806:	bf00      	nop
 800a808:	0800be45 	.word	0x0800be45
 800a80c:	0800be4b 	.word	0x0800be4b
 800a810:	0800be4f 	.word	0x0800be4f
 800a814:	00000000 	.word	0x00000000
 800a818:	0800a565 	.word	0x0800a565

0800a81c <__sfputc_r>:
 800a81c:	6893      	ldr	r3, [r2, #8]
 800a81e:	b410      	push	{r4}
 800a820:	3b01      	subs	r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	6093      	str	r3, [r2, #8]
 800a826:	da07      	bge.n	800a838 <__sfputc_r+0x1c>
 800a828:	6994      	ldr	r4, [r2, #24]
 800a82a:	42a3      	cmp	r3, r4
 800a82c:	db01      	blt.n	800a832 <__sfputc_r+0x16>
 800a82e:	290a      	cmp	r1, #10
 800a830:	d102      	bne.n	800a838 <__sfputc_r+0x1c>
 800a832:	bc10      	pop	{r4}
 800a834:	f000 baf0 	b.w	800ae18 <__swbuf_r>
 800a838:	6813      	ldr	r3, [r2, #0]
 800a83a:	1c58      	adds	r0, r3, #1
 800a83c:	6010      	str	r0, [r2, #0]
 800a83e:	7019      	strb	r1, [r3, #0]
 800a840:	4608      	mov	r0, r1
 800a842:	bc10      	pop	{r4}
 800a844:	4770      	bx	lr

0800a846 <__sfputs_r>:
 800a846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a848:	4606      	mov	r6, r0
 800a84a:	460f      	mov	r7, r1
 800a84c:	4614      	mov	r4, r2
 800a84e:	18d5      	adds	r5, r2, r3
 800a850:	42ac      	cmp	r4, r5
 800a852:	d101      	bne.n	800a858 <__sfputs_r+0x12>
 800a854:	2000      	movs	r0, #0
 800a856:	e007      	b.n	800a868 <__sfputs_r+0x22>
 800a858:	463a      	mov	r2, r7
 800a85a:	4630      	mov	r0, r6
 800a85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a860:	f7ff ffdc 	bl	800a81c <__sfputc_r>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d1f3      	bne.n	800a850 <__sfputs_r+0xa>
 800a868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a86c <_vfiprintf_r>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	460d      	mov	r5, r1
 800a872:	4614      	mov	r4, r2
 800a874:	4698      	mov	r8, r3
 800a876:	4606      	mov	r6, r0
 800a878:	b09d      	sub	sp, #116	; 0x74
 800a87a:	b118      	cbz	r0, 800a884 <_vfiprintf_r+0x18>
 800a87c:	6983      	ldr	r3, [r0, #24]
 800a87e:	b90b      	cbnz	r3, 800a884 <_vfiprintf_r+0x18>
 800a880:	f000 fca8 	bl	800b1d4 <__sinit>
 800a884:	4b89      	ldr	r3, [pc, #548]	; (800aaac <_vfiprintf_r+0x240>)
 800a886:	429d      	cmp	r5, r3
 800a888:	d11b      	bne.n	800a8c2 <_vfiprintf_r+0x56>
 800a88a:	6875      	ldr	r5, [r6, #4]
 800a88c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a88e:	07d9      	lsls	r1, r3, #31
 800a890:	d405      	bmi.n	800a89e <_vfiprintf_r+0x32>
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	059a      	lsls	r2, r3, #22
 800a896:	d402      	bmi.n	800a89e <_vfiprintf_r+0x32>
 800a898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a89a:	f000 fd39 	bl	800b310 <__retarget_lock_acquire_recursive>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	071b      	lsls	r3, r3, #28
 800a8a2:	d501      	bpl.n	800a8a8 <_vfiprintf_r+0x3c>
 800a8a4:	692b      	ldr	r3, [r5, #16]
 800a8a6:	b9eb      	cbnz	r3, 800a8e4 <_vfiprintf_r+0x78>
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f000 fb06 	bl	800aebc <__swsetup_r>
 800a8b0:	b1c0      	cbz	r0, 800a8e4 <_vfiprintf_r+0x78>
 800a8b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8b4:	07dc      	lsls	r4, r3, #31
 800a8b6:	d50e      	bpl.n	800a8d6 <_vfiprintf_r+0x6a>
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	b01d      	add	sp, #116	; 0x74
 800a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c2:	4b7b      	ldr	r3, [pc, #492]	; (800aab0 <_vfiprintf_r+0x244>)
 800a8c4:	429d      	cmp	r5, r3
 800a8c6:	d101      	bne.n	800a8cc <_vfiprintf_r+0x60>
 800a8c8:	68b5      	ldr	r5, [r6, #8]
 800a8ca:	e7df      	b.n	800a88c <_vfiprintf_r+0x20>
 800a8cc:	4b79      	ldr	r3, [pc, #484]	; (800aab4 <_vfiprintf_r+0x248>)
 800a8ce:	429d      	cmp	r5, r3
 800a8d0:	bf08      	it	eq
 800a8d2:	68f5      	ldreq	r5, [r6, #12]
 800a8d4:	e7da      	b.n	800a88c <_vfiprintf_r+0x20>
 800a8d6:	89ab      	ldrh	r3, [r5, #12]
 800a8d8:	0598      	lsls	r0, r3, #22
 800a8da:	d4ed      	bmi.n	800a8b8 <_vfiprintf_r+0x4c>
 800a8dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8de:	f000 fd18 	bl	800b312 <__retarget_lock_release_recursive>
 800a8e2:	e7e9      	b.n	800a8b8 <_vfiprintf_r+0x4c>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e8:	2320      	movs	r3, #32
 800a8ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8ee:	2330      	movs	r3, #48	; 0x30
 800a8f0:	f04f 0901 	mov.w	r9, #1
 800a8f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aab8 <_vfiprintf_r+0x24c>
 800a8fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a900:	4623      	mov	r3, r4
 800a902:	469a      	mov	sl, r3
 800a904:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a908:	b10a      	cbz	r2, 800a90e <_vfiprintf_r+0xa2>
 800a90a:	2a25      	cmp	r2, #37	; 0x25
 800a90c:	d1f9      	bne.n	800a902 <_vfiprintf_r+0x96>
 800a90e:	ebba 0b04 	subs.w	fp, sl, r4
 800a912:	d00b      	beq.n	800a92c <_vfiprintf_r+0xc0>
 800a914:	465b      	mov	r3, fp
 800a916:	4622      	mov	r2, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff ff93 	bl	800a846 <__sfputs_r>
 800a920:	3001      	adds	r0, #1
 800a922:	f000 80aa 	beq.w	800aa7a <_vfiprintf_r+0x20e>
 800a926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a928:	445a      	add	r2, fp
 800a92a:	9209      	str	r2, [sp, #36]	; 0x24
 800a92c:	f89a 3000 	ldrb.w	r3, [sl]
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 80a2 	beq.w	800aa7a <_vfiprintf_r+0x20e>
 800a936:	2300      	movs	r3, #0
 800a938:	f04f 32ff 	mov.w	r2, #4294967295
 800a93c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a940:	f10a 0a01 	add.w	sl, sl, #1
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	9307      	str	r3, [sp, #28]
 800a948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a94c:	931a      	str	r3, [sp, #104]	; 0x68
 800a94e:	4654      	mov	r4, sl
 800a950:	2205      	movs	r2, #5
 800a952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a956:	4858      	ldr	r0, [pc, #352]	; (800aab8 <_vfiprintf_r+0x24c>)
 800a958:	f000 fd42 	bl	800b3e0 <memchr>
 800a95c:	9a04      	ldr	r2, [sp, #16]
 800a95e:	b9d8      	cbnz	r0, 800a998 <_vfiprintf_r+0x12c>
 800a960:	06d1      	lsls	r1, r2, #27
 800a962:	bf44      	itt	mi
 800a964:	2320      	movmi	r3, #32
 800a966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a96a:	0713      	lsls	r3, r2, #28
 800a96c:	bf44      	itt	mi
 800a96e:	232b      	movmi	r3, #43	; 0x2b
 800a970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a974:	f89a 3000 	ldrb.w	r3, [sl]
 800a978:	2b2a      	cmp	r3, #42	; 0x2a
 800a97a:	d015      	beq.n	800a9a8 <_vfiprintf_r+0x13c>
 800a97c:	4654      	mov	r4, sl
 800a97e:	2000      	movs	r0, #0
 800a980:	f04f 0c0a 	mov.w	ip, #10
 800a984:	9a07      	ldr	r2, [sp, #28]
 800a986:	4621      	mov	r1, r4
 800a988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a98c:	3b30      	subs	r3, #48	; 0x30
 800a98e:	2b09      	cmp	r3, #9
 800a990:	d94e      	bls.n	800aa30 <_vfiprintf_r+0x1c4>
 800a992:	b1b0      	cbz	r0, 800a9c2 <_vfiprintf_r+0x156>
 800a994:	9207      	str	r2, [sp, #28]
 800a996:	e014      	b.n	800a9c2 <_vfiprintf_r+0x156>
 800a998:	eba0 0308 	sub.w	r3, r0, r8
 800a99c:	fa09 f303 	lsl.w	r3, r9, r3
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	46a2      	mov	sl, r4
 800a9a4:	9304      	str	r3, [sp, #16]
 800a9a6:	e7d2      	b.n	800a94e <_vfiprintf_r+0xe2>
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	1d19      	adds	r1, r3, #4
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	9103      	str	r1, [sp, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	bfbb      	ittet	lt
 800a9b4:	425b      	neglt	r3, r3
 800a9b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ba:	9307      	strge	r3, [sp, #28]
 800a9bc:	9307      	strlt	r3, [sp, #28]
 800a9be:	bfb8      	it	lt
 800a9c0:	9204      	strlt	r2, [sp, #16]
 800a9c2:	7823      	ldrb	r3, [r4, #0]
 800a9c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9c6:	d10c      	bne.n	800a9e2 <_vfiprintf_r+0x176>
 800a9c8:	7863      	ldrb	r3, [r4, #1]
 800a9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a9cc:	d135      	bne.n	800aa3a <_vfiprintf_r+0x1ce>
 800a9ce:	9b03      	ldr	r3, [sp, #12]
 800a9d0:	3402      	adds	r4, #2
 800a9d2:	1d1a      	adds	r2, r3, #4
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	9203      	str	r2, [sp, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bfb8      	it	lt
 800a9dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9e0:	9305      	str	r3, [sp, #20]
 800a9e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aabc <_vfiprintf_r+0x250>
 800a9e6:	2203      	movs	r2, #3
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	7821      	ldrb	r1, [r4, #0]
 800a9ec:	f000 fcf8 	bl	800b3e0 <memchr>
 800a9f0:	b140      	cbz	r0, 800aa04 <_vfiprintf_r+0x198>
 800a9f2:	2340      	movs	r3, #64	; 0x40
 800a9f4:	eba0 000a 	sub.w	r0, r0, sl
 800a9f8:	fa03 f000 	lsl.w	r0, r3, r0
 800a9fc:	9b04      	ldr	r3, [sp, #16]
 800a9fe:	3401      	adds	r4, #1
 800aa00:	4303      	orrs	r3, r0
 800aa02:	9304      	str	r3, [sp, #16]
 800aa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa08:	2206      	movs	r2, #6
 800aa0a:	482d      	ldr	r0, [pc, #180]	; (800aac0 <_vfiprintf_r+0x254>)
 800aa0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa10:	f000 fce6 	bl	800b3e0 <memchr>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d03f      	beq.n	800aa98 <_vfiprintf_r+0x22c>
 800aa18:	4b2a      	ldr	r3, [pc, #168]	; (800aac4 <_vfiprintf_r+0x258>)
 800aa1a:	bb1b      	cbnz	r3, 800aa64 <_vfiprintf_r+0x1f8>
 800aa1c:	9b03      	ldr	r3, [sp, #12]
 800aa1e:	3307      	adds	r3, #7
 800aa20:	f023 0307 	bic.w	r3, r3, #7
 800aa24:	3308      	adds	r3, #8
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2a:	443b      	add	r3, r7
 800aa2c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2e:	e767      	b.n	800a900 <_vfiprintf_r+0x94>
 800aa30:	460c      	mov	r4, r1
 800aa32:	2001      	movs	r0, #1
 800aa34:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa38:	e7a5      	b.n	800a986 <_vfiprintf_r+0x11a>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f04f 0c0a 	mov.w	ip, #10
 800aa40:	4619      	mov	r1, r3
 800aa42:	3401      	adds	r4, #1
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	4620      	mov	r0, r4
 800aa48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa4c:	3a30      	subs	r2, #48	; 0x30
 800aa4e:	2a09      	cmp	r2, #9
 800aa50:	d903      	bls.n	800aa5a <_vfiprintf_r+0x1ee>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d0c5      	beq.n	800a9e2 <_vfiprintf_r+0x176>
 800aa56:	9105      	str	r1, [sp, #20]
 800aa58:	e7c3      	b.n	800a9e2 <_vfiprintf_r+0x176>
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa62:	e7f0      	b.n	800aa46 <_vfiprintf_r+0x1da>
 800aa64:	ab03      	add	r3, sp, #12
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	462a      	mov	r2, r5
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4b16      	ldr	r3, [pc, #88]	; (800aac8 <_vfiprintf_r+0x25c>)
 800aa6e:	a904      	add	r1, sp, #16
 800aa70:	f3af 8000 	nop.w
 800aa74:	4607      	mov	r7, r0
 800aa76:	1c78      	adds	r0, r7, #1
 800aa78:	d1d6      	bne.n	800aa28 <_vfiprintf_r+0x1bc>
 800aa7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa7c:	07d9      	lsls	r1, r3, #31
 800aa7e:	d405      	bmi.n	800aa8c <_vfiprintf_r+0x220>
 800aa80:	89ab      	ldrh	r3, [r5, #12]
 800aa82:	059a      	lsls	r2, r3, #22
 800aa84:	d402      	bmi.n	800aa8c <_vfiprintf_r+0x220>
 800aa86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa88:	f000 fc43 	bl	800b312 <__retarget_lock_release_recursive>
 800aa8c:	89ab      	ldrh	r3, [r5, #12]
 800aa8e:	065b      	lsls	r3, r3, #25
 800aa90:	f53f af12 	bmi.w	800a8b8 <_vfiprintf_r+0x4c>
 800aa94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa96:	e711      	b.n	800a8bc <_vfiprintf_r+0x50>
 800aa98:	ab03      	add	r3, sp, #12
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <_vfiprintf_r+0x25c>)
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	f000 f882 	bl	800abac <_printf_i>
 800aaa8:	e7e4      	b.n	800aa74 <_vfiprintf_r+0x208>
 800aaaa:	bf00      	nop
 800aaac:	0800be98 	.word	0x0800be98
 800aab0:	0800beb8 	.word	0x0800beb8
 800aab4:	0800be78 	.word	0x0800be78
 800aab8:	0800be45 	.word	0x0800be45
 800aabc:	0800be4b 	.word	0x0800be4b
 800aac0:	0800be4f 	.word	0x0800be4f
 800aac4:	00000000 	.word	0x00000000
 800aac8:	0800a847 	.word	0x0800a847

0800aacc <_printf_common>:
 800aacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad0:	4616      	mov	r6, r2
 800aad2:	4699      	mov	r9, r3
 800aad4:	688a      	ldr	r2, [r1, #8]
 800aad6:	690b      	ldr	r3, [r1, #16]
 800aad8:	4607      	mov	r7, r0
 800aada:	4293      	cmp	r3, r2
 800aadc:	bfb8      	it	lt
 800aade:	4613      	movlt	r3, r2
 800aae0:	6033      	str	r3, [r6, #0]
 800aae2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aae6:	460c      	mov	r4, r1
 800aae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaec:	b10a      	cbz	r2, 800aaf2 <_printf_common+0x26>
 800aaee:	3301      	adds	r3, #1
 800aaf0:	6033      	str	r3, [r6, #0]
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	0699      	lsls	r1, r3, #26
 800aaf6:	bf42      	ittt	mi
 800aaf8:	6833      	ldrmi	r3, [r6, #0]
 800aafa:	3302      	addmi	r3, #2
 800aafc:	6033      	strmi	r3, [r6, #0]
 800aafe:	6825      	ldr	r5, [r4, #0]
 800ab00:	f015 0506 	ands.w	r5, r5, #6
 800ab04:	d106      	bne.n	800ab14 <_printf_common+0x48>
 800ab06:	f104 0a19 	add.w	sl, r4, #25
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	6832      	ldr	r2, [r6, #0]
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	dc28      	bgt.n	800ab66 <_printf_common+0x9a>
 800ab14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab18:	1e13      	subs	r3, r2, #0
 800ab1a:	6822      	ldr	r2, [r4, #0]
 800ab1c:	bf18      	it	ne
 800ab1e:	2301      	movne	r3, #1
 800ab20:	0692      	lsls	r2, r2, #26
 800ab22:	d42d      	bmi.n	800ab80 <_printf_common+0xb4>
 800ab24:	4649      	mov	r1, r9
 800ab26:	4638      	mov	r0, r7
 800ab28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab2c:	47c0      	blx	r8
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d020      	beq.n	800ab74 <_printf_common+0xa8>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	68e5      	ldr	r5, [r4, #12]
 800ab36:	f003 0306 	and.w	r3, r3, #6
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	bf18      	it	ne
 800ab3e:	2500      	movne	r5, #0
 800ab40:	6832      	ldr	r2, [r6, #0]
 800ab42:	f04f 0600 	mov.w	r6, #0
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	bf08      	it	eq
 800ab4a:	1aad      	subeq	r5, r5, r2
 800ab4c:	6922      	ldr	r2, [r4, #16]
 800ab4e:	bf08      	it	eq
 800ab50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab54:	4293      	cmp	r3, r2
 800ab56:	bfc4      	itt	gt
 800ab58:	1a9b      	subgt	r3, r3, r2
 800ab5a:	18ed      	addgt	r5, r5, r3
 800ab5c:	341a      	adds	r4, #26
 800ab5e:	42b5      	cmp	r5, r6
 800ab60:	d11a      	bne.n	800ab98 <_printf_common+0xcc>
 800ab62:	2000      	movs	r0, #0
 800ab64:	e008      	b.n	800ab78 <_printf_common+0xac>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4652      	mov	r2, sl
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	47c0      	blx	r8
 800ab70:	3001      	adds	r0, #1
 800ab72:	d103      	bne.n	800ab7c <_printf_common+0xb0>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7c:	3501      	adds	r5, #1
 800ab7e:	e7c4      	b.n	800ab0a <_printf_common+0x3e>
 800ab80:	2030      	movs	r0, #48	; 0x30
 800ab82:	18e1      	adds	r1, r4, r3
 800ab84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab8e:	4422      	add	r2, r4
 800ab90:	3302      	adds	r3, #2
 800ab92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab96:	e7c5      	b.n	800ab24 <_printf_common+0x58>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	4638      	mov	r0, r7
 800aba0:	47c0      	blx	r8
 800aba2:	3001      	adds	r0, #1
 800aba4:	d0e6      	beq.n	800ab74 <_printf_common+0xa8>
 800aba6:	3601      	adds	r6, #1
 800aba8:	e7d9      	b.n	800ab5e <_printf_common+0x92>
	...

0800abac <_printf_i>:
 800abac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	7e0f      	ldrb	r7, [r1, #24]
 800abb2:	4691      	mov	r9, r2
 800abb4:	2f78      	cmp	r7, #120	; 0x78
 800abb6:	4680      	mov	r8, r0
 800abb8:	460c      	mov	r4, r1
 800abba:	469a      	mov	sl, r3
 800abbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abc2:	d807      	bhi.n	800abd4 <_printf_i+0x28>
 800abc4:	2f62      	cmp	r7, #98	; 0x62
 800abc6:	d80a      	bhi.n	800abde <_printf_i+0x32>
 800abc8:	2f00      	cmp	r7, #0
 800abca:	f000 80d9 	beq.w	800ad80 <_printf_i+0x1d4>
 800abce:	2f58      	cmp	r7, #88	; 0x58
 800abd0:	f000 80a4 	beq.w	800ad1c <_printf_i+0x170>
 800abd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abdc:	e03a      	b.n	800ac54 <_printf_i+0xa8>
 800abde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abe2:	2b15      	cmp	r3, #21
 800abe4:	d8f6      	bhi.n	800abd4 <_printf_i+0x28>
 800abe6:	a101      	add	r1, pc, #4	; (adr r1, 800abec <_printf_i+0x40>)
 800abe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abec:	0800ac45 	.word	0x0800ac45
 800abf0:	0800ac59 	.word	0x0800ac59
 800abf4:	0800abd5 	.word	0x0800abd5
 800abf8:	0800abd5 	.word	0x0800abd5
 800abfc:	0800abd5 	.word	0x0800abd5
 800ac00:	0800abd5 	.word	0x0800abd5
 800ac04:	0800ac59 	.word	0x0800ac59
 800ac08:	0800abd5 	.word	0x0800abd5
 800ac0c:	0800abd5 	.word	0x0800abd5
 800ac10:	0800abd5 	.word	0x0800abd5
 800ac14:	0800abd5 	.word	0x0800abd5
 800ac18:	0800ad67 	.word	0x0800ad67
 800ac1c:	0800ac89 	.word	0x0800ac89
 800ac20:	0800ad49 	.word	0x0800ad49
 800ac24:	0800abd5 	.word	0x0800abd5
 800ac28:	0800abd5 	.word	0x0800abd5
 800ac2c:	0800ad89 	.word	0x0800ad89
 800ac30:	0800abd5 	.word	0x0800abd5
 800ac34:	0800ac89 	.word	0x0800ac89
 800ac38:	0800abd5 	.word	0x0800abd5
 800ac3c:	0800abd5 	.word	0x0800abd5
 800ac40:	0800ad51 	.word	0x0800ad51
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	1d1a      	adds	r2, r3, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	602a      	str	r2, [r5, #0]
 800ac4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac54:	2301      	movs	r3, #1
 800ac56:	e0a4      	b.n	800ada2 <_printf_i+0x1f6>
 800ac58:	6820      	ldr	r0, [r4, #0]
 800ac5a:	6829      	ldr	r1, [r5, #0]
 800ac5c:	0606      	lsls	r6, r0, #24
 800ac5e:	f101 0304 	add.w	r3, r1, #4
 800ac62:	d50a      	bpl.n	800ac7a <_printf_i+0xce>
 800ac64:	680e      	ldr	r6, [r1, #0]
 800ac66:	602b      	str	r3, [r5, #0]
 800ac68:	2e00      	cmp	r6, #0
 800ac6a:	da03      	bge.n	800ac74 <_printf_i+0xc8>
 800ac6c:	232d      	movs	r3, #45	; 0x2d
 800ac6e:	4276      	negs	r6, r6
 800ac70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac74:	230a      	movs	r3, #10
 800ac76:	485e      	ldr	r0, [pc, #376]	; (800adf0 <_printf_i+0x244>)
 800ac78:	e019      	b.n	800acae <_printf_i+0x102>
 800ac7a:	680e      	ldr	r6, [r1, #0]
 800ac7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	bf18      	it	ne
 800ac84:	b236      	sxthne	r6, r6
 800ac86:	e7ef      	b.n	800ac68 <_printf_i+0xbc>
 800ac88:	682b      	ldr	r3, [r5, #0]
 800ac8a:	6820      	ldr	r0, [r4, #0]
 800ac8c:	1d19      	adds	r1, r3, #4
 800ac8e:	6029      	str	r1, [r5, #0]
 800ac90:	0601      	lsls	r1, r0, #24
 800ac92:	d501      	bpl.n	800ac98 <_printf_i+0xec>
 800ac94:	681e      	ldr	r6, [r3, #0]
 800ac96:	e002      	b.n	800ac9e <_printf_i+0xf2>
 800ac98:	0646      	lsls	r6, r0, #25
 800ac9a:	d5fb      	bpl.n	800ac94 <_printf_i+0xe8>
 800ac9c:	881e      	ldrh	r6, [r3, #0]
 800ac9e:	2f6f      	cmp	r7, #111	; 0x6f
 800aca0:	bf0c      	ite	eq
 800aca2:	2308      	moveq	r3, #8
 800aca4:	230a      	movne	r3, #10
 800aca6:	4852      	ldr	r0, [pc, #328]	; (800adf0 <_printf_i+0x244>)
 800aca8:	2100      	movs	r1, #0
 800acaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acae:	6865      	ldr	r5, [r4, #4]
 800acb0:	2d00      	cmp	r5, #0
 800acb2:	bfa8      	it	ge
 800acb4:	6821      	ldrge	r1, [r4, #0]
 800acb6:	60a5      	str	r5, [r4, #8]
 800acb8:	bfa4      	itt	ge
 800acba:	f021 0104 	bicge.w	r1, r1, #4
 800acbe:	6021      	strge	r1, [r4, #0]
 800acc0:	b90e      	cbnz	r6, 800acc6 <_printf_i+0x11a>
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	d04d      	beq.n	800ad62 <_printf_i+0x1b6>
 800acc6:	4615      	mov	r5, r2
 800acc8:	fbb6 f1f3 	udiv	r1, r6, r3
 800accc:	fb03 6711 	mls	r7, r3, r1, r6
 800acd0:	5dc7      	ldrb	r7, [r0, r7]
 800acd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acd6:	4637      	mov	r7, r6
 800acd8:	42bb      	cmp	r3, r7
 800acda:	460e      	mov	r6, r1
 800acdc:	d9f4      	bls.n	800acc8 <_printf_i+0x11c>
 800acde:	2b08      	cmp	r3, #8
 800ace0:	d10b      	bne.n	800acfa <_printf_i+0x14e>
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	07de      	lsls	r6, r3, #31
 800ace6:	d508      	bpl.n	800acfa <_printf_i+0x14e>
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	6861      	ldr	r1, [r4, #4]
 800acec:	4299      	cmp	r1, r3
 800acee:	bfde      	ittt	le
 800acf0:	2330      	movle	r3, #48	; 0x30
 800acf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acf6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acfa:	1b52      	subs	r2, r2, r5
 800acfc:	6122      	str	r2, [r4, #16]
 800acfe:	464b      	mov	r3, r9
 800ad00:	4621      	mov	r1, r4
 800ad02:	4640      	mov	r0, r8
 800ad04:	f8cd a000 	str.w	sl, [sp]
 800ad08:	aa03      	add	r2, sp, #12
 800ad0a:	f7ff fedf 	bl	800aacc <_printf_common>
 800ad0e:	3001      	adds	r0, #1
 800ad10:	d14c      	bne.n	800adac <_printf_i+0x200>
 800ad12:	f04f 30ff 	mov.w	r0, #4294967295
 800ad16:	b004      	add	sp, #16
 800ad18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1c:	4834      	ldr	r0, [pc, #208]	; (800adf0 <_printf_i+0x244>)
 800ad1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad22:	6829      	ldr	r1, [r5, #0]
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad2a:	6029      	str	r1, [r5, #0]
 800ad2c:	061d      	lsls	r5, r3, #24
 800ad2e:	d514      	bpl.n	800ad5a <_printf_i+0x1ae>
 800ad30:	07df      	lsls	r7, r3, #31
 800ad32:	bf44      	itt	mi
 800ad34:	f043 0320 	orrmi.w	r3, r3, #32
 800ad38:	6023      	strmi	r3, [r4, #0]
 800ad3a:	b91e      	cbnz	r6, 800ad44 <_printf_i+0x198>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	f023 0320 	bic.w	r3, r3, #32
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	2310      	movs	r3, #16
 800ad46:	e7af      	b.n	800aca8 <_printf_i+0xfc>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	f043 0320 	orr.w	r3, r3, #32
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	2378      	movs	r3, #120	; 0x78
 800ad52:	4828      	ldr	r0, [pc, #160]	; (800adf4 <_printf_i+0x248>)
 800ad54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad58:	e7e3      	b.n	800ad22 <_printf_i+0x176>
 800ad5a:	0659      	lsls	r1, r3, #25
 800ad5c:	bf48      	it	mi
 800ad5e:	b2b6      	uxthmi	r6, r6
 800ad60:	e7e6      	b.n	800ad30 <_printf_i+0x184>
 800ad62:	4615      	mov	r5, r2
 800ad64:	e7bb      	b.n	800acde <_printf_i+0x132>
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	6826      	ldr	r6, [r4, #0]
 800ad6a:	1d18      	adds	r0, r3, #4
 800ad6c:	6961      	ldr	r1, [r4, #20]
 800ad6e:	6028      	str	r0, [r5, #0]
 800ad70:	0635      	lsls	r5, r6, #24
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	d501      	bpl.n	800ad7a <_printf_i+0x1ce>
 800ad76:	6019      	str	r1, [r3, #0]
 800ad78:	e002      	b.n	800ad80 <_printf_i+0x1d4>
 800ad7a:	0670      	lsls	r0, r6, #25
 800ad7c:	d5fb      	bpl.n	800ad76 <_printf_i+0x1ca>
 800ad7e:	8019      	strh	r1, [r3, #0]
 800ad80:	2300      	movs	r3, #0
 800ad82:	4615      	mov	r5, r2
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	e7ba      	b.n	800acfe <_printf_i+0x152>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	1d1a      	adds	r2, r3, #4
 800ad8e:	602a      	str	r2, [r5, #0]
 800ad90:	681d      	ldr	r5, [r3, #0]
 800ad92:	6862      	ldr	r2, [r4, #4]
 800ad94:	4628      	mov	r0, r5
 800ad96:	f000 fb23 	bl	800b3e0 <memchr>
 800ad9a:	b108      	cbz	r0, 800ada0 <_printf_i+0x1f4>
 800ad9c:	1b40      	subs	r0, r0, r5
 800ad9e:	6060      	str	r0, [r4, #4]
 800ada0:	6863      	ldr	r3, [r4, #4]
 800ada2:	6123      	str	r3, [r4, #16]
 800ada4:	2300      	movs	r3, #0
 800ada6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adaa:	e7a8      	b.n	800acfe <_printf_i+0x152>
 800adac:	462a      	mov	r2, r5
 800adae:	4649      	mov	r1, r9
 800adb0:	4640      	mov	r0, r8
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	47d0      	blx	sl
 800adb6:	3001      	adds	r0, #1
 800adb8:	d0ab      	beq.n	800ad12 <_printf_i+0x166>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	079b      	lsls	r3, r3, #30
 800adbe:	d413      	bmi.n	800ade8 <_printf_i+0x23c>
 800adc0:	68e0      	ldr	r0, [r4, #12]
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	4298      	cmp	r0, r3
 800adc6:	bfb8      	it	lt
 800adc8:	4618      	movlt	r0, r3
 800adca:	e7a4      	b.n	800ad16 <_printf_i+0x16a>
 800adcc:	2301      	movs	r3, #1
 800adce:	4632      	mov	r2, r6
 800add0:	4649      	mov	r1, r9
 800add2:	4640      	mov	r0, r8
 800add4:	47d0      	blx	sl
 800add6:	3001      	adds	r0, #1
 800add8:	d09b      	beq.n	800ad12 <_printf_i+0x166>
 800adda:	3501      	adds	r5, #1
 800addc:	68e3      	ldr	r3, [r4, #12]
 800adde:	9903      	ldr	r1, [sp, #12]
 800ade0:	1a5b      	subs	r3, r3, r1
 800ade2:	42ab      	cmp	r3, r5
 800ade4:	dcf2      	bgt.n	800adcc <_printf_i+0x220>
 800ade6:	e7eb      	b.n	800adc0 <_printf_i+0x214>
 800ade8:	2500      	movs	r5, #0
 800adea:	f104 0619 	add.w	r6, r4, #25
 800adee:	e7f5      	b.n	800addc <_printf_i+0x230>
 800adf0:	0800be56 	.word	0x0800be56
 800adf4:	0800be67 	.word	0x0800be67

0800adf8 <_sbrk_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	2300      	movs	r3, #0
 800adfc:	4d05      	ldr	r5, [pc, #20]	; (800ae14 <_sbrk_r+0x1c>)
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f7f6 f8b4 	bl	8000f70 <_sbrk>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_sbrk_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_sbrk_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	200023a0 	.word	0x200023a0

0800ae18 <__swbuf_r>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	460e      	mov	r6, r1
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	4605      	mov	r5, r0
 800ae20:	b118      	cbz	r0, 800ae2a <__swbuf_r+0x12>
 800ae22:	6983      	ldr	r3, [r0, #24]
 800ae24:	b90b      	cbnz	r3, 800ae2a <__swbuf_r+0x12>
 800ae26:	f000 f9d5 	bl	800b1d4 <__sinit>
 800ae2a:	4b21      	ldr	r3, [pc, #132]	; (800aeb0 <__swbuf_r+0x98>)
 800ae2c:	429c      	cmp	r4, r3
 800ae2e:	d12b      	bne.n	800ae88 <__swbuf_r+0x70>
 800ae30:	686c      	ldr	r4, [r5, #4]
 800ae32:	69a3      	ldr	r3, [r4, #24]
 800ae34:	60a3      	str	r3, [r4, #8]
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	071a      	lsls	r2, r3, #28
 800ae3a:	d52f      	bpl.n	800ae9c <__swbuf_r+0x84>
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	b36b      	cbz	r3, 800ae9c <__swbuf_r+0x84>
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	6820      	ldr	r0, [r4, #0]
 800ae44:	b2f6      	uxtb	r6, r6
 800ae46:	1ac0      	subs	r0, r0, r3
 800ae48:	6963      	ldr	r3, [r4, #20]
 800ae4a:	4637      	mov	r7, r6
 800ae4c:	4283      	cmp	r3, r0
 800ae4e:	dc04      	bgt.n	800ae5a <__swbuf_r+0x42>
 800ae50:	4621      	mov	r1, r4
 800ae52:	4628      	mov	r0, r5
 800ae54:	f000 f92a 	bl	800b0ac <_fflush_r>
 800ae58:	bb30      	cbnz	r0, 800aea8 <__swbuf_r+0x90>
 800ae5a:	68a3      	ldr	r3, [r4, #8]
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	60a3      	str	r3, [r4, #8]
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	1c5a      	adds	r2, r3, #1
 800ae66:	6022      	str	r2, [r4, #0]
 800ae68:	701e      	strb	r6, [r3, #0]
 800ae6a:	6963      	ldr	r3, [r4, #20]
 800ae6c:	4283      	cmp	r3, r0
 800ae6e:	d004      	beq.n	800ae7a <__swbuf_r+0x62>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	07db      	lsls	r3, r3, #31
 800ae74:	d506      	bpl.n	800ae84 <__swbuf_r+0x6c>
 800ae76:	2e0a      	cmp	r6, #10
 800ae78:	d104      	bne.n	800ae84 <__swbuf_r+0x6c>
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 f915 	bl	800b0ac <_fflush_r>
 800ae82:	b988      	cbnz	r0, 800aea8 <__swbuf_r+0x90>
 800ae84:	4638      	mov	r0, r7
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <__swbuf_r+0x9c>)
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	d101      	bne.n	800ae92 <__swbuf_r+0x7a>
 800ae8e:	68ac      	ldr	r4, [r5, #8]
 800ae90:	e7cf      	b.n	800ae32 <__swbuf_r+0x1a>
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <__swbuf_r+0xa0>)
 800ae94:	429c      	cmp	r4, r3
 800ae96:	bf08      	it	eq
 800ae98:	68ec      	ldreq	r4, [r5, #12]
 800ae9a:	e7ca      	b.n	800ae32 <__swbuf_r+0x1a>
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 f80c 	bl	800aebc <__swsetup_r>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d0cb      	beq.n	800ae40 <__swbuf_r+0x28>
 800aea8:	f04f 37ff 	mov.w	r7, #4294967295
 800aeac:	e7ea      	b.n	800ae84 <__swbuf_r+0x6c>
 800aeae:	bf00      	nop
 800aeb0:	0800be98 	.word	0x0800be98
 800aeb4:	0800beb8 	.word	0x0800beb8
 800aeb8:	0800be78 	.word	0x0800be78

0800aebc <__swsetup_r>:
 800aebc:	4b32      	ldr	r3, [pc, #200]	; (800af88 <__swsetup_r+0xcc>)
 800aebe:	b570      	push	{r4, r5, r6, lr}
 800aec0:	681d      	ldr	r5, [r3, #0]
 800aec2:	4606      	mov	r6, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	b125      	cbz	r5, 800aed2 <__swsetup_r+0x16>
 800aec8:	69ab      	ldr	r3, [r5, #24]
 800aeca:	b913      	cbnz	r3, 800aed2 <__swsetup_r+0x16>
 800aecc:	4628      	mov	r0, r5
 800aece:	f000 f981 	bl	800b1d4 <__sinit>
 800aed2:	4b2e      	ldr	r3, [pc, #184]	; (800af8c <__swsetup_r+0xd0>)
 800aed4:	429c      	cmp	r4, r3
 800aed6:	d10f      	bne.n	800aef8 <__swsetup_r+0x3c>
 800aed8:	686c      	ldr	r4, [r5, #4]
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aee0:	0719      	lsls	r1, r3, #28
 800aee2:	d42c      	bmi.n	800af3e <__swsetup_r+0x82>
 800aee4:	06dd      	lsls	r5, r3, #27
 800aee6:	d411      	bmi.n	800af0c <__swsetup_r+0x50>
 800aee8:	2309      	movs	r3, #9
 800aeea:	6033      	str	r3, [r6, #0]
 800aeec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aef0:	f04f 30ff 	mov.w	r0, #4294967295
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	e03e      	b.n	800af76 <__swsetup_r+0xba>
 800aef8:	4b25      	ldr	r3, [pc, #148]	; (800af90 <__swsetup_r+0xd4>)
 800aefa:	429c      	cmp	r4, r3
 800aefc:	d101      	bne.n	800af02 <__swsetup_r+0x46>
 800aefe:	68ac      	ldr	r4, [r5, #8]
 800af00:	e7eb      	b.n	800aeda <__swsetup_r+0x1e>
 800af02:	4b24      	ldr	r3, [pc, #144]	; (800af94 <__swsetup_r+0xd8>)
 800af04:	429c      	cmp	r4, r3
 800af06:	bf08      	it	eq
 800af08:	68ec      	ldreq	r4, [r5, #12]
 800af0a:	e7e6      	b.n	800aeda <__swsetup_r+0x1e>
 800af0c:	0758      	lsls	r0, r3, #29
 800af0e:	d512      	bpl.n	800af36 <__swsetup_r+0x7a>
 800af10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af12:	b141      	cbz	r1, 800af26 <__swsetup_r+0x6a>
 800af14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af18:	4299      	cmp	r1, r3
 800af1a:	d002      	beq.n	800af22 <__swsetup_r+0x66>
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7ff fa45 	bl	800a3ac <_free_r>
 800af22:	2300      	movs	r3, #0
 800af24:	6363      	str	r3, [r4, #52]	; 0x34
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	2300      	movs	r3, #0
 800af30:	6063      	str	r3, [r4, #4]
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	f043 0308 	orr.w	r3, r3, #8
 800af3c:	81a3      	strh	r3, [r4, #12]
 800af3e:	6923      	ldr	r3, [r4, #16]
 800af40:	b94b      	cbnz	r3, 800af56 <__swsetup_r+0x9a>
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af4c:	d003      	beq.n	800af56 <__swsetup_r+0x9a>
 800af4e:	4621      	mov	r1, r4
 800af50:	4630      	mov	r0, r6
 800af52:	f000 fa05 	bl	800b360 <__smakebuf_r>
 800af56:	89a0      	ldrh	r0, [r4, #12]
 800af58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af5c:	f010 0301 	ands.w	r3, r0, #1
 800af60:	d00a      	beq.n	800af78 <__swsetup_r+0xbc>
 800af62:	2300      	movs	r3, #0
 800af64:	60a3      	str	r3, [r4, #8]
 800af66:	6963      	ldr	r3, [r4, #20]
 800af68:	425b      	negs	r3, r3
 800af6a:	61a3      	str	r3, [r4, #24]
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	b943      	cbnz	r3, 800af82 <__swsetup_r+0xc6>
 800af70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af74:	d1ba      	bne.n	800aeec <__swsetup_r+0x30>
 800af76:	bd70      	pop	{r4, r5, r6, pc}
 800af78:	0781      	lsls	r1, r0, #30
 800af7a:	bf58      	it	pl
 800af7c:	6963      	ldrpl	r3, [r4, #20]
 800af7e:	60a3      	str	r3, [r4, #8]
 800af80:	e7f4      	b.n	800af6c <__swsetup_r+0xb0>
 800af82:	2000      	movs	r0, #0
 800af84:	e7f7      	b.n	800af76 <__swsetup_r+0xba>
 800af86:	bf00      	nop
 800af88:	20000444 	.word	0x20000444
 800af8c:	0800be98 	.word	0x0800be98
 800af90:	0800beb8 	.word	0x0800beb8
 800af94:	0800be78 	.word	0x0800be78

0800af98 <abort>:
 800af98:	2006      	movs	r0, #6
 800af9a:	b508      	push	{r3, lr}
 800af9c:	f000 faba 	bl	800b514 <raise>
 800afa0:	2001      	movs	r0, #1
 800afa2:	f7f5 ff72 	bl	8000e8a <_exit>
	...

0800afa8 <__sflush_r>:
 800afa8:	898a      	ldrh	r2, [r1, #12]
 800afaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afac:	4605      	mov	r5, r0
 800afae:	0710      	lsls	r0, r2, #28
 800afb0:	460c      	mov	r4, r1
 800afb2:	d457      	bmi.n	800b064 <__sflush_r+0xbc>
 800afb4:	684b      	ldr	r3, [r1, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	dc04      	bgt.n	800afc4 <__sflush_r+0x1c>
 800afba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dc01      	bgt.n	800afc4 <__sflush_r+0x1c>
 800afc0:	2000      	movs	r0, #0
 800afc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d0fa      	beq.n	800afc0 <__sflush_r+0x18>
 800afca:	2300      	movs	r3, #0
 800afcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afd0:	682f      	ldr	r7, [r5, #0]
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	d032      	beq.n	800b03c <__sflush_r+0x94>
 800afd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	075a      	lsls	r2, r3, #29
 800afdc:	d505      	bpl.n	800afea <__sflush_r+0x42>
 800afde:	6863      	ldr	r3, [r4, #4]
 800afe0:	1ac0      	subs	r0, r0, r3
 800afe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afe4:	b10b      	cbz	r3, 800afea <__sflush_r+0x42>
 800afe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afe8:	1ac0      	subs	r0, r0, r3
 800afea:	2300      	movs	r3, #0
 800afec:	4602      	mov	r2, r0
 800afee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aff0:	4628      	mov	r0, r5
 800aff2:	6a21      	ldr	r1, [r4, #32]
 800aff4:	47b0      	blx	r6
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	d106      	bne.n	800b00a <__sflush_r+0x62>
 800affc:	6829      	ldr	r1, [r5, #0]
 800affe:	291d      	cmp	r1, #29
 800b000:	d82c      	bhi.n	800b05c <__sflush_r+0xb4>
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <__sflush_r+0x100>)
 800b004:	40ca      	lsrs	r2, r1
 800b006:	07d6      	lsls	r6, r2, #31
 800b008:	d528      	bpl.n	800b05c <__sflush_r+0xb4>
 800b00a:	2200      	movs	r2, #0
 800b00c:	6062      	str	r2, [r4, #4]
 800b00e:	6922      	ldr	r2, [r4, #16]
 800b010:	04d9      	lsls	r1, r3, #19
 800b012:	6022      	str	r2, [r4, #0]
 800b014:	d504      	bpl.n	800b020 <__sflush_r+0x78>
 800b016:	1c42      	adds	r2, r0, #1
 800b018:	d101      	bne.n	800b01e <__sflush_r+0x76>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	b903      	cbnz	r3, 800b020 <__sflush_r+0x78>
 800b01e:	6560      	str	r0, [r4, #84]	; 0x54
 800b020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b022:	602f      	str	r7, [r5, #0]
 800b024:	2900      	cmp	r1, #0
 800b026:	d0cb      	beq.n	800afc0 <__sflush_r+0x18>
 800b028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b02c:	4299      	cmp	r1, r3
 800b02e:	d002      	beq.n	800b036 <__sflush_r+0x8e>
 800b030:	4628      	mov	r0, r5
 800b032:	f7ff f9bb 	bl	800a3ac <_free_r>
 800b036:	2000      	movs	r0, #0
 800b038:	6360      	str	r0, [r4, #52]	; 0x34
 800b03a:	e7c2      	b.n	800afc2 <__sflush_r+0x1a>
 800b03c:	6a21      	ldr	r1, [r4, #32]
 800b03e:	2301      	movs	r3, #1
 800b040:	4628      	mov	r0, r5
 800b042:	47b0      	blx	r6
 800b044:	1c41      	adds	r1, r0, #1
 800b046:	d1c7      	bne.n	800afd8 <__sflush_r+0x30>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0c4      	beq.n	800afd8 <__sflush_r+0x30>
 800b04e:	2b1d      	cmp	r3, #29
 800b050:	d001      	beq.n	800b056 <__sflush_r+0xae>
 800b052:	2b16      	cmp	r3, #22
 800b054:	d101      	bne.n	800b05a <__sflush_r+0xb2>
 800b056:	602f      	str	r7, [r5, #0]
 800b058:	e7b2      	b.n	800afc0 <__sflush_r+0x18>
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	e7ae      	b.n	800afc2 <__sflush_r+0x1a>
 800b064:	690f      	ldr	r7, [r1, #16]
 800b066:	2f00      	cmp	r7, #0
 800b068:	d0aa      	beq.n	800afc0 <__sflush_r+0x18>
 800b06a:	0793      	lsls	r3, r2, #30
 800b06c:	bf18      	it	ne
 800b06e:	2300      	movne	r3, #0
 800b070:	680e      	ldr	r6, [r1, #0]
 800b072:	bf08      	it	eq
 800b074:	694b      	ldreq	r3, [r1, #20]
 800b076:	1bf6      	subs	r6, r6, r7
 800b078:	600f      	str	r7, [r1, #0]
 800b07a:	608b      	str	r3, [r1, #8]
 800b07c:	2e00      	cmp	r6, #0
 800b07e:	dd9f      	ble.n	800afc0 <__sflush_r+0x18>
 800b080:	4633      	mov	r3, r6
 800b082:	463a      	mov	r2, r7
 800b084:	4628      	mov	r0, r5
 800b086:	6a21      	ldr	r1, [r4, #32]
 800b088:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b08c:	47e0      	blx	ip
 800b08e:	2800      	cmp	r0, #0
 800b090:	dc06      	bgt.n	800b0a0 <__sflush_r+0xf8>
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	e790      	b.n	800afc2 <__sflush_r+0x1a>
 800b0a0:	4407      	add	r7, r0
 800b0a2:	1a36      	subs	r6, r6, r0
 800b0a4:	e7ea      	b.n	800b07c <__sflush_r+0xd4>
 800b0a6:	bf00      	nop
 800b0a8:	20400001 	.word	0x20400001

0800b0ac <_fflush_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	690b      	ldr	r3, [r1, #16]
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	b913      	cbnz	r3, 800b0bc <_fflush_r+0x10>
 800b0b6:	2500      	movs	r5, #0
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	bd38      	pop	{r3, r4, r5, pc}
 800b0bc:	b118      	cbz	r0, 800b0c6 <_fflush_r+0x1a>
 800b0be:	6983      	ldr	r3, [r0, #24]
 800b0c0:	b90b      	cbnz	r3, 800b0c6 <_fflush_r+0x1a>
 800b0c2:	f000 f887 	bl	800b1d4 <__sinit>
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <_fflush_r+0x6c>)
 800b0c8:	429c      	cmp	r4, r3
 800b0ca:	d11b      	bne.n	800b104 <_fflush_r+0x58>
 800b0cc:	686c      	ldr	r4, [r5, #4]
 800b0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0ef      	beq.n	800b0b6 <_fflush_r+0xa>
 800b0d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0d8:	07d0      	lsls	r0, r2, #31
 800b0da:	d404      	bmi.n	800b0e6 <_fflush_r+0x3a>
 800b0dc:	0599      	lsls	r1, r3, #22
 800b0de:	d402      	bmi.n	800b0e6 <_fflush_r+0x3a>
 800b0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e2:	f000 f915 	bl	800b310 <__retarget_lock_acquire_recursive>
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	f7ff ff5d 	bl	800afa8 <__sflush_r>
 800b0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	07da      	lsls	r2, r3, #31
 800b0f4:	d4e0      	bmi.n	800b0b8 <_fflush_r+0xc>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	059b      	lsls	r3, r3, #22
 800b0fa:	d4dd      	bmi.n	800b0b8 <_fflush_r+0xc>
 800b0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0fe:	f000 f908 	bl	800b312 <__retarget_lock_release_recursive>
 800b102:	e7d9      	b.n	800b0b8 <_fflush_r+0xc>
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <_fflush_r+0x70>)
 800b106:	429c      	cmp	r4, r3
 800b108:	d101      	bne.n	800b10e <_fflush_r+0x62>
 800b10a:	68ac      	ldr	r4, [r5, #8]
 800b10c:	e7df      	b.n	800b0ce <_fflush_r+0x22>
 800b10e:	4b04      	ldr	r3, [pc, #16]	; (800b120 <_fflush_r+0x74>)
 800b110:	429c      	cmp	r4, r3
 800b112:	bf08      	it	eq
 800b114:	68ec      	ldreq	r4, [r5, #12]
 800b116:	e7da      	b.n	800b0ce <_fflush_r+0x22>
 800b118:	0800be98 	.word	0x0800be98
 800b11c:	0800beb8 	.word	0x0800beb8
 800b120:	0800be78 	.word	0x0800be78

0800b124 <std>:
 800b124:	2300      	movs	r3, #0
 800b126:	b510      	push	{r4, lr}
 800b128:	4604      	mov	r4, r0
 800b12a:	e9c0 3300 	strd	r3, r3, [r0]
 800b12e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b132:	6083      	str	r3, [r0, #8]
 800b134:	8181      	strh	r1, [r0, #12]
 800b136:	6643      	str	r3, [r0, #100]	; 0x64
 800b138:	81c2      	strh	r2, [r0, #14]
 800b13a:	6183      	str	r3, [r0, #24]
 800b13c:	4619      	mov	r1, r3
 800b13e:	2208      	movs	r2, #8
 800b140:	305c      	adds	r0, #92	; 0x5c
 800b142:	f7fe ffcd 	bl	800a0e0 <memset>
 800b146:	4b05      	ldr	r3, [pc, #20]	; (800b15c <std+0x38>)
 800b148:	6224      	str	r4, [r4, #32]
 800b14a:	6263      	str	r3, [r4, #36]	; 0x24
 800b14c:	4b04      	ldr	r3, [pc, #16]	; (800b160 <std+0x3c>)
 800b14e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b150:	4b04      	ldr	r3, [pc, #16]	; (800b164 <std+0x40>)
 800b152:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b154:	4b04      	ldr	r3, [pc, #16]	; (800b168 <std+0x44>)
 800b156:	6323      	str	r3, [r4, #48]	; 0x30
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	bf00      	nop
 800b15c:	0800b54d 	.word	0x0800b54d
 800b160:	0800b56f 	.word	0x0800b56f
 800b164:	0800b5a7 	.word	0x0800b5a7
 800b168:	0800b5cb 	.word	0x0800b5cb

0800b16c <_cleanup_r>:
 800b16c:	4901      	ldr	r1, [pc, #4]	; (800b174 <_cleanup_r+0x8>)
 800b16e:	f000 b8af 	b.w	800b2d0 <_fwalk_reent>
 800b172:	bf00      	nop
 800b174:	0800b0ad 	.word	0x0800b0ad

0800b178 <__sfmoreglue>:
 800b178:	2268      	movs	r2, #104	; 0x68
 800b17a:	b570      	push	{r4, r5, r6, lr}
 800b17c:	1e4d      	subs	r5, r1, #1
 800b17e:	4355      	muls	r5, r2
 800b180:	460e      	mov	r6, r1
 800b182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b186:	f7ff f979 	bl	800a47c <_malloc_r>
 800b18a:	4604      	mov	r4, r0
 800b18c:	b140      	cbz	r0, 800b1a0 <__sfmoreglue+0x28>
 800b18e:	2100      	movs	r1, #0
 800b190:	e9c0 1600 	strd	r1, r6, [r0]
 800b194:	300c      	adds	r0, #12
 800b196:	60a0      	str	r0, [r4, #8]
 800b198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b19c:	f7fe ffa0 	bl	800a0e0 <memset>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}

0800b1a4 <__sfp_lock_acquire>:
 800b1a4:	4801      	ldr	r0, [pc, #4]	; (800b1ac <__sfp_lock_acquire+0x8>)
 800b1a6:	f000 b8b3 	b.w	800b310 <__retarget_lock_acquire_recursive>
 800b1aa:	bf00      	nop
 800b1ac:	2000239d 	.word	0x2000239d

0800b1b0 <__sfp_lock_release>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	; (800b1b8 <__sfp_lock_release+0x8>)
 800b1b2:	f000 b8ae 	b.w	800b312 <__retarget_lock_release_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	2000239d 	.word	0x2000239d

0800b1bc <__sinit_lock_acquire>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__sinit_lock_acquire+0x8>)
 800b1be:	f000 b8a7 	b.w	800b310 <__retarget_lock_acquire_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	2000239e 	.word	0x2000239e

0800b1c8 <__sinit_lock_release>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	; (800b1d0 <__sinit_lock_release+0x8>)
 800b1ca:	f000 b8a2 	b.w	800b312 <__retarget_lock_release_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	2000239e 	.word	0x2000239e

0800b1d4 <__sinit>:
 800b1d4:	b510      	push	{r4, lr}
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	f7ff fff0 	bl	800b1bc <__sinit_lock_acquire>
 800b1dc:	69a3      	ldr	r3, [r4, #24]
 800b1de:	b11b      	cbz	r3, 800b1e8 <__sinit+0x14>
 800b1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e4:	f7ff bff0 	b.w	800b1c8 <__sinit_lock_release>
 800b1e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1ec:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ee:	4b13      	ldr	r3, [pc, #76]	; (800b23c <__sinit+0x68>)
 800b1f0:	4a13      	ldr	r2, [pc, #76]	; (800b240 <__sinit+0x6c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	bf08      	it	eq
 800b1fa:	2301      	moveq	r3, #1
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	bf08      	it	eq
 800b200:	61a3      	streq	r3, [r4, #24]
 800b202:	f000 f81f 	bl	800b244 <__sfp>
 800b206:	6060      	str	r0, [r4, #4]
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 f81b 	bl	800b244 <__sfp>
 800b20e:	60a0      	str	r0, [r4, #8]
 800b210:	4620      	mov	r0, r4
 800b212:	f000 f817 	bl	800b244 <__sfp>
 800b216:	2200      	movs	r2, #0
 800b218:	2104      	movs	r1, #4
 800b21a:	60e0      	str	r0, [r4, #12]
 800b21c:	6860      	ldr	r0, [r4, #4]
 800b21e:	f7ff ff81 	bl	800b124 <std>
 800b222:	2201      	movs	r2, #1
 800b224:	2109      	movs	r1, #9
 800b226:	68a0      	ldr	r0, [r4, #8]
 800b228:	f7ff ff7c 	bl	800b124 <std>
 800b22c:	2202      	movs	r2, #2
 800b22e:	2112      	movs	r1, #18
 800b230:	68e0      	ldr	r0, [r4, #12]
 800b232:	f7ff ff77 	bl	800b124 <std>
 800b236:	2301      	movs	r3, #1
 800b238:	61a3      	str	r3, [r4, #24]
 800b23a:	e7d1      	b.n	800b1e0 <__sinit+0xc>
 800b23c:	0800bc90 	.word	0x0800bc90
 800b240:	0800b16d 	.word	0x0800b16d

0800b244 <__sfp>:
 800b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b246:	4607      	mov	r7, r0
 800b248:	f7ff ffac 	bl	800b1a4 <__sfp_lock_acquire>
 800b24c:	4b1e      	ldr	r3, [pc, #120]	; (800b2c8 <__sfp+0x84>)
 800b24e:	681e      	ldr	r6, [r3, #0]
 800b250:	69b3      	ldr	r3, [r6, #24]
 800b252:	b913      	cbnz	r3, 800b25a <__sfp+0x16>
 800b254:	4630      	mov	r0, r6
 800b256:	f7ff ffbd 	bl	800b1d4 <__sinit>
 800b25a:	3648      	adds	r6, #72	; 0x48
 800b25c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b260:	3b01      	subs	r3, #1
 800b262:	d503      	bpl.n	800b26c <__sfp+0x28>
 800b264:	6833      	ldr	r3, [r6, #0]
 800b266:	b30b      	cbz	r3, 800b2ac <__sfp+0x68>
 800b268:	6836      	ldr	r6, [r6, #0]
 800b26a:	e7f7      	b.n	800b25c <__sfp+0x18>
 800b26c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b270:	b9d5      	cbnz	r5, 800b2a8 <__sfp+0x64>
 800b272:	4b16      	ldr	r3, [pc, #88]	; (800b2cc <__sfp+0x88>)
 800b274:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b278:	60e3      	str	r3, [r4, #12]
 800b27a:	6665      	str	r5, [r4, #100]	; 0x64
 800b27c:	f000 f847 	bl	800b30e <__retarget_lock_init_recursive>
 800b280:	f7ff ff96 	bl	800b1b0 <__sfp_lock_release>
 800b284:	2208      	movs	r2, #8
 800b286:	4629      	mov	r1, r5
 800b288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b28c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b290:	6025      	str	r5, [r4, #0]
 800b292:	61a5      	str	r5, [r4, #24]
 800b294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b298:	f7fe ff22 	bl	800a0e0 <memset>
 800b29c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a8:	3468      	adds	r4, #104	; 0x68
 800b2aa:	e7d9      	b.n	800b260 <__sfp+0x1c>
 800b2ac:	2104      	movs	r1, #4
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f7ff ff62 	bl	800b178 <__sfmoreglue>
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	6030      	str	r0, [r6, #0]
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d1d5      	bne.n	800b268 <__sfp+0x24>
 800b2bc:	f7ff ff78 	bl	800b1b0 <__sfp_lock_release>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	e7ee      	b.n	800b2a4 <__sfp+0x60>
 800b2c6:	bf00      	nop
 800b2c8:	0800bc90 	.word	0x0800bc90
 800b2cc:	ffff0001 	.word	0xffff0001

0800b2d0 <_fwalk_reent>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	4688      	mov	r8, r1
 800b2d8:	2700      	movs	r7, #0
 800b2da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2e2:	f1b9 0901 	subs.w	r9, r9, #1
 800b2e6:	d505      	bpl.n	800b2f4 <_fwalk_reent+0x24>
 800b2e8:	6824      	ldr	r4, [r4, #0]
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d1f7      	bne.n	800b2de <_fwalk_reent+0xe>
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f4:	89ab      	ldrh	r3, [r5, #12]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d907      	bls.n	800b30a <_fwalk_reent+0x3a>
 800b2fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2fe:	3301      	adds	r3, #1
 800b300:	d003      	beq.n	800b30a <_fwalk_reent+0x3a>
 800b302:	4629      	mov	r1, r5
 800b304:	4630      	mov	r0, r6
 800b306:	47c0      	blx	r8
 800b308:	4307      	orrs	r7, r0
 800b30a:	3568      	adds	r5, #104	; 0x68
 800b30c:	e7e9      	b.n	800b2e2 <_fwalk_reent+0x12>

0800b30e <__retarget_lock_init_recursive>:
 800b30e:	4770      	bx	lr

0800b310 <__retarget_lock_acquire_recursive>:
 800b310:	4770      	bx	lr

0800b312 <__retarget_lock_release_recursive>:
 800b312:	4770      	bx	lr

0800b314 <__swhatbuf_r>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	460e      	mov	r6, r1
 800b318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b31c:	4614      	mov	r4, r2
 800b31e:	2900      	cmp	r1, #0
 800b320:	461d      	mov	r5, r3
 800b322:	b096      	sub	sp, #88	; 0x58
 800b324:	da08      	bge.n	800b338 <__swhatbuf_r+0x24>
 800b326:	2200      	movs	r2, #0
 800b328:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b32c:	602a      	str	r2, [r5, #0]
 800b32e:	061a      	lsls	r2, r3, #24
 800b330:	d410      	bmi.n	800b354 <__swhatbuf_r+0x40>
 800b332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b336:	e00e      	b.n	800b356 <__swhatbuf_r+0x42>
 800b338:	466a      	mov	r2, sp
 800b33a:	f000 f96d 	bl	800b618 <_fstat_r>
 800b33e:	2800      	cmp	r0, #0
 800b340:	dbf1      	blt.n	800b326 <__swhatbuf_r+0x12>
 800b342:	9a01      	ldr	r2, [sp, #4]
 800b344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b34c:	425a      	negs	r2, r3
 800b34e:	415a      	adcs	r2, r3
 800b350:	602a      	str	r2, [r5, #0]
 800b352:	e7ee      	b.n	800b332 <__swhatbuf_r+0x1e>
 800b354:	2340      	movs	r3, #64	; 0x40
 800b356:	2000      	movs	r0, #0
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	b016      	add	sp, #88	; 0x58
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b360 <__smakebuf_r>:
 800b360:	898b      	ldrh	r3, [r1, #12]
 800b362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b364:	079d      	lsls	r5, r3, #30
 800b366:	4606      	mov	r6, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	d507      	bpl.n	800b37c <__smakebuf_r+0x1c>
 800b36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	6123      	str	r3, [r4, #16]
 800b374:	2301      	movs	r3, #1
 800b376:	6163      	str	r3, [r4, #20]
 800b378:	b002      	add	sp, #8
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	466a      	mov	r2, sp
 800b37e:	ab01      	add	r3, sp, #4
 800b380:	f7ff ffc8 	bl	800b314 <__swhatbuf_r>
 800b384:	9900      	ldr	r1, [sp, #0]
 800b386:	4605      	mov	r5, r0
 800b388:	4630      	mov	r0, r6
 800b38a:	f7ff f877 	bl	800a47c <_malloc_r>
 800b38e:	b948      	cbnz	r0, 800b3a4 <__smakebuf_r+0x44>
 800b390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b394:	059a      	lsls	r2, r3, #22
 800b396:	d4ef      	bmi.n	800b378 <__smakebuf_r+0x18>
 800b398:	f023 0303 	bic.w	r3, r3, #3
 800b39c:	f043 0302 	orr.w	r3, r3, #2
 800b3a0:	81a3      	strh	r3, [r4, #12]
 800b3a2:	e7e3      	b.n	800b36c <__smakebuf_r+0xc>
 800b3a4:	4b0d      	ldr	r3, [pc, #52]	; (800b3dc <__smakebuf_r+0x7c>)
 800b3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	6020      	str	r0, [r4, #0]
 800b3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	9b00      	ldr	r3, [sp, #0]
 800b3b4:	6120      	str	r0, [r4, #16]
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	9b01      	ldr	r3, [sp, #4]
 800b3ba:	b15b      	cbz	r3, 800b3d4 <__smakebuf_r+0x74>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3c2:	f000 f93b 	bl	800b63c <_isatty_r>
 800b3c6:	b128      	cbz	r0, 800b3d4 <__smakebuf_r+0x74>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f023 0303 	bic.w	r3, r3, #3
 800b3ce:	f043 0301 	orr.w	r3, r3, #1
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	89a0      	ldrh	r0, [r4, #12]
 800b3d6:	4305      	orrs	r5, r0
 800b3d8:	81a5      	strh	r5, [r4, #12]
 800b3da:	e7cd      	b.n	800b378 <__smakebuf_r+0x18>
 800b3dc:	0800b16d 	.word	0x0800b16d

0800b3e0 <memchr>:
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	b2c9      	uxtb	r1, r1
 800b3e6:	4402      	add	r2, r0
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	d101      	bne.n	800b3f2 <memchr+0x12>
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	e003      	b.n	800b3fa <memchr+0x1a>
 800b3f2:	7804      	ldrb	r4, [r0, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	428c      	cmp	r4, r1
 800b3f8:	d1f6      	bne.n	800b3e8 <memchr+0x8>
 800b3fa:	bd10      	pop	{r4, pc}

0800b3fc <memcpy>:
 800b3fc:	440a      	add	r2, r1
 800b3fe:	4291      	cmp	r1, r2
 800b400:	f100 33ff 	add.w	r3, r0, #4294967295
 800b404:	d100      	bne.n	800b408 <memcpy+0xc>
 800b406:	4770      	bx	lr
 800b408:	b510      	push	{r4, lr}
 800b40a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b40e:	4291      	cmp	r1, r2
 800b410:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b414:	d1f9      	bne.n	800b40a <memcpy+0xe>
 800b416:	bd10      	pop	{r4, pc}

0800b418 <memmove>:
 800b418:	4288      	cmp	r0, r1
 800b41a:	b510      	push	{r4, lr}
 800b41c:	eb01 0402 	add.w	r4, r1, r2
 800b420:	d902      	bls.n	800b428 <memmove+0x10>
 800b422:	4284      	cmp	r4, r0
 800b424:	4623      	mov	r3, r4
 800b426:	d807      	bhi.n	800b438 <memmove+0x20>
 800b428:	1e43      	subs	r3, r0, #1
 800b42a:	42a1      	cmp	r1, r4
 800b42c:	d008      	beq.n	800b440 <memmove+0x28>
 800b42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b436:	e7f8      	b.n	800b42a <memmove+0x12>
 800b438:	4601      	mov	r1, r0
 800b43a:	4402      	add	r2, r0
 800b43c:	428a      	cmp	r2, r1
 800b43e:	d100      	bne.n	800b442 <memmove+0x2a>
 800b440:	bd10      	pop	{r4, pc}
 800b442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b44a:	e7f7      	b.n	800b43c <memmove+0x24>

0800b44c <__malloc_lock>:
 800b44c:	4801      	ldr	r0, [pc, #4]	; (800b454 <__malloc_lock+0x8>)
 800b44e:	f7ff bf5f 	b.w	800b310 <__retarget_lock_acquire_recursive>
 800b452:	bf00      	nop
 800b454:	2000239c 	.word	0x2000239c

0800b458 <__malloc_unlock>:
 800b458:	4801      	ldr	r0, [pc, #4]	; (800b460 <__malloc_unlock+0x8>)
 800b45a:	f7ff bf5a 	b.w	800b312 <__retarget_lock_release_recursive>
 800b45e:	bf00      	nop
 800b460:	2000239c 	.word	0x2000239c

0800b464 <_realloc_r>:
 800b464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b468:	4680      	mov	r8, r0
 800b46a:	4614      	mov	r4, r2
 800b46c:	460e      	mov	r6, r1
 800b46e:	b921      	cbnz	r1, 800b47a <_realloc_r+0x16>
 800b470:	4611      	mov	r1, r2
 800b472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b476:	f7ff b801 	b.w	800a47c <_malloc_r>
 800b47a:	b92a      	cbnz	r2, 800b488 <_realloc_r+0x24>
 800b47c:	f7fe ff96 	bl	800a3ac <_free_r>
 800b480:	4625      	mov	r5, r4
 800b482:	4628      	mov	r0, r5
 800b484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b488:	f000 f8fa 	bl	800b680 <_malloc_usable_size_r>
 800b48c:	4284      	cmp	r4, r0
 800b48e:	4607      	mov	r7, r0
 800b490:	d802      	bhi.n	800b498 <_realloc_r+0x34>
 800b492:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b496:	d812      	bhi.n	800b4be <_realloc_r+0x5a>
 800b498:	4621      	mov	r1, r4
 800b49a:	4640      	mov	r0, r8
 800b49c:	f7fe ffee 	bl	800a47c <_malloc_r>
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0ed      	beq.n	800b482 <_realloc_r+0x1e>
 800b4a6:	42bc      	cmp	r4, r7
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	bf28      	it	cs
 800b4ae:	463a      	movcs	r2, r7
 800b4b0:	f7ff ffa4 	bl	800b3fc <memcpy>
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	f7fe ff78 	bl	800a3ac <_free_r>
 800b4bc:	e7e1      	b.n	800b482 <_realloc_r+0x1e>
 800b4be:	4635      	mov	r5, r6
 800b4c0:	e7df      	b.n	800b482 <_realloc_r+0x1e>

0800b4c2 <_raise_r>:
 800b4c2:	291f      	cmp	r1, #31
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	d904      	bls.n	800b4d6 <_raise_r+0x14>
 800b4cc:	2316      	movs	r3, #22
 800b4ce:	6003      	str	r3, [r0, #0]
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d4:	bd38      	pop	{r3, r4, r5, pc}
 800b4d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4d8:	b112      	cbz	r2, 800b4e0 <_raise_r+0x1e>
 800b4da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4de:	b94b      	cbnz	r3, 800b4f4 <_raise_r+0x32>
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 f831 	bl	800b548 <_getpid_r>
 800b4e6:	462a      	mov	r2, r5
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4f0:	f000 b818 	b.w	800b524 <_kill_r>
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d00a      	beq.n	800b50e <_raise_r+0x4c>
 800b4f8:	1c59      	adds	r1, r3, #1
 800b4fa:	d103      	bne.n	800b504 <_raise_r+0x42>
 800b4fc:	2316      	movs	r3, #22
 800b4fe:	6003      	str	r3, [r0, #0]
 800b500:	2001      	movs	r0, #1
 800b502:	e7e7      	b.n	800b4d4 <_raise_r+0x12>
 800b504:	2400      	movs	r4, #0
 800b506:	4628      	mov	r0, r5
 800b508:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b50c:	4798      	blx	r3
 800b50e:	2000      	movs	r0, #0
 800b510:	e7e0      	b.n	800b4d4 <_raise_r+0x12>
	...

0800b514 <raise>:
 800b514:	4b02      	ldr	r3, [pc, #8]	; (800b520 <raise+0xc>)
 800b516:	4601      	mov	r1, r0
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	f7ff bfd2 	b.w	800b4c2 <_raise_r>
 800b51e:	bf00      	nop
 800b520:	20000444 	.word	0x20000444

0800b524 <_kill_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	2300      	movs	r3, #0
 800b528:	4d06      	ldr	r5, [pc, #24]	; (800b544 <_kill_r+0x20>)
 800b52a:	4604      	mov	r4, r0
 800b52c:	4608      	mov	r0, r1
 800b52e:	4611      	mov	r1, r2
 800b530:	602b      	str	r3, [r5, #0]
 800b532:	f7f5 fc9a 	bl	8000e6a <_kill>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	d102      	bne.n	800b540 <_kill_r+0x1c>
 800b53a:	682b      	ldr	r3, [r5, #0]
 800b53c:	b103      	cbz	r3, 800b540 <_kill_r+0x1c>
 800b53e:	6023      	str	r3, [r4, #0]
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	bf00      	nop
 800b544:	200023a0 	.word	0x200023a0

0800b548 <_getpid_r>:
 800b548:	f7f5 bc88 	b.w	8000e5c <_getpid>

0800b54c <__sread>:
 800b54c:	b510      	push	{r4, lr}
 800b54e:	460c      	mov	r4, r1
 800b550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b554:	f000 f89c 	bl	800b690 <_read_r>
 800b558:	2800      	cmp	r0, #0
 800b55a:	bfab      	itete	ge
 800b55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b55e:	89a3      	ldrhlt	r3, [r4, #12]
 800b560:	181b      	addge	r3, r3, r0
 800b562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b566:	bfac      	ite	ge
 800b568:	6563      	strge	r3, [r4, #84]	; 0x54
 800b56a:	81a3      	strhlt	r3, [r4, #12]
 800b56c:	bd10      	pop	{r4, pc}

0800b56e <__swrite>:
 800b56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b572:	461f      	mov	r7, r3
 800b574:	898b      	ldrh	r3, [r1, #12]
 800b576:	4605      	mov	r5, r0
 800b578:	05db      	lsls	r3, r3, #23
 800b57a:	460c      	mov	r4, r1
 800b57c:	4616      	mov	r6, r2
 800b57e:	d505      	bpl.n	800b58c <__swrite+0x1e>
 800b580:	2302      	movs	r3, #2
 800b582:	2200      	movs	r2, #0
 800b584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b588:	f000 f868 	bl	800b65c <_lseek_r>
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	4632      	mov	r2, r6
 800b590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b594:	81a3      	strh	r3, [r4, #12]
 800b596:	4628      	mov	r0, r5
 800b598:	463b      	mov	r3, r7
 800b59a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a2:	f000 b817 	b.w	800b5d4 <_write_r>

0800b5a6 <__sseek>:
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ae:	f000 f855 	bl	800b65c <_lseek_r>
 800b5b2:	1c43      	adds	r3, r0, #1
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	bf15      	itete	ne
 800b5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5c2:	81a3      	strheq	r3, [r4, #12]
 800b5c4:	bf18      	it	ne
 800b5c6:	81a3      	strhne	r3, [r4, #12]
 800b5c8:	bd10      	pop	{r4, pc}

0800b5ca <__sclose>:
 800b5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ce:	f000 b813 	b.w	800b5f8 <_close_r>
	...

0800b5d4 <_write_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	4611      	mov	r1, r2
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4d05      	ldr	r5, [pc, #20]	; (800b5f4 <_write_r+0x20>)
 800b5e0:	602a      	str	r2, [r5, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f7f5 fc78 	bl	8000ed8 <_write>
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	d102      	bne.n	800b5f2 <_write_r+0x1e>
 800b5ec:	682b      	ldr	r3, [r5, #0]
 800b5ee:	b103      	cbz	r3, 800b5f2 <_write_r+0x1e>
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	bd38      	pop	{r3, r4, r5, pc}
 800b5f4:	200023a0 	.word	0x200023a0

0800b5f8 <_close_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	4d05      	ldr	r5, [pc, #20]	; (800b614 <_close_r+0x1c>)
 800b5fe:	4604      	mov	r4, r0
 800b600:	4608      	mov	r0, r1
 800b602:	602b      	str	r3, [r5, #0]
 800b604:	f7f5 fc84 	bl	8000f10 <_close>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_close_r+0x1a>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_close_r+0x1a>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	200023a0 	.word	0x200023a0

0800b618 <_fstat_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	2300      	movs	r3, #0
 800b61c:	4d06      	ldr	r5, [pc, #24]	; (800b638 <_fstat_r+0x20>)
 800b61e:	4604      	mov	r4, r0
 800b620:	4608      	mov	r0, r1
 800b622:	4611      	mov	r1, r2
 800b624:	602b      	str	r3, [r5, #0]
 800b626:	f7f5 fc7e 	bl	8000f26 <_fstat>
 800b62a:	1c43      	adds	r3, r0, #1
 800b62c:	d102      	bne.n	800b634 <_fstat_r+0x1c>
 800b62e:	682b      	ldr	r3, [r5, #0]
 800b630:	b103      	cbz	r3, 800b634 <_fstat_r+0x1c>
 800b632:	6023      	str	r3, [r4, #0]
 800b634:	bd38      	pop	{r3, r4, r5, pc}
 800b636:	bf00      	nop
 800b638:	200023a0 	.word	0x200023a0

0800b63c <_isatty_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	2300      	movs	r3, #0
 800b640:	4d05      	ldr	r5, [pc, #20]	; (800b658 <_isatty_r+0x1c>)
 800b642:	4604      	mov	r4, r0
 800b644:	4608      	mov	r0, r1
 800b646:	602b      	str	r3, [r5, #0]
 800b648:	f7f5 fc7c 	bl	8000f44 <_isatty>
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d102      	bne.n	800b656 <_isatty_r+0x1a>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	b103      	cbz	r3, 800b656 <_isatty_r+0x1a>
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	200023a0 	.word	0x200023a0

0800b65c <_lseek_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	4611      	mov	r1, r2
 800b664:	2200      	movs	r2, #0
 800b666:	4d05      	ldr	r5, [pc, #20]	; (800b67c <_lseek_r+0x20>)
 800b668:	602a      	str	r2, [r5, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	f7f5 fc74 	bl	8000f58 <_lseek>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_lseek_r+0x1e>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_lseek_r+0x1e>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	200023a0 	.word	0x200023a0

0800b680 <_malloc_usable_size_r>:
 800b680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b684:	1f18      	subs	r0, r3, #4
 800b686:	2b00      	cmp	r3, #0
 800b688:	bfbc      	itt	lt
 800b68a:	580b      	ldrlt	r3, [r1, r0]
 800b68c:	18c0      	addlt	r0, r0, r3
 800b68e:	4770      	bx	lr

0800b690 <_read_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4604      	mov	r4, r0
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	2200      	movs	r2, #0
 800b69a:	4d05      	ldr	r5, [pc, #20]	; (800b6b0 <_read_r+0x20>)
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f5 fbfd 	bl	8000e9e <_read>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_read_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_read_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	200023a0 	.word	0x200023a0

0800b6b4 <_init>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	bf00      	nop
 800b6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ba:	bc08      	pop	{r3}
 800b6bc:	469e      	mov	lr, r3
 800b6be:	4770      	bx	lr

0800b6c0 <_fini>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	bf00      	nop
 800b6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c6:	bc08      	pop	{r3}
 800b6c8:	469e      	mov	lr, r3
 800b6ca:	4770      	bx	lr
