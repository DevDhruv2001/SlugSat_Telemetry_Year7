
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beb4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  0800bff0  0800bff0  0001bff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c84c  0800c84c  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c84c  0800c84c  0001c84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c854  0800c854  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c854  0800c854  0001c854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c858  0800c858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0800c85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f3c  200004a8  0800cd04  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  0800cd04  000223e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016262  00000000  00000000  000204d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036cf  00000000  00000000  00036733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab7f  00000000  00000000  0003c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dae  00000000  00000000  00056ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094be0  00000000  00000000  0006dc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010285d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c74  00000000  00000000  001028b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200004a8 	.word	0x200004a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800bfd8 	.word	0x0800bfd8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200004ac 	.word	0x200004ac
 8000178:	0800bfd8 	.word	0x0800bfd8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	891b      	ldrh	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 f9b7 	bl	8001838 <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	75fb      	strb	r3, [r7, #23]

	//CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip

	uint8_t Address;
	uint8_t ConfigIndex = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	757b      	strb	r3, [r7, #21]
	// configure standard registers

	//uint8_t Register_Count = sizeof(Register_Setting);

	for (Address = 0x00; Address < 0x2F; Address++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	75bb      	strb	r3, [r7, #22]
 80004ea:	e02e      	b.n	800054a <CC1200_Configure+0x78>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004ec:	7d7b      	ldrb	r3, [r7, #21]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	7dba      	ldrb	r2, [r7, #22]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d122      	bne.n	8000542 <CC1200_Configure+0x70>
		{
			retval = CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 80004fc:	7d7b      	ldrb	r3, [r7, #21]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	4413      	add	r3, r2
 8000504:	785a      	ldrb	r2, [r3, #1]
 8000506:	7dbb      	ldrb	r3, [r7, #22]
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f85c 	bl	80005c8 <CC1200_Write_Single_Register>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Register(SPI_Info, Address);
 8000514:	7dbb      	ldrb	r3, [r7, #22]
 8000516:	4619      	mov	r1, r3
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f000 f891 	bl	8000640 <CC1200_Read_Single_Register>
 800051e:	4603      	mov	r3, r0
 8000520:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Register_Setting[ConfigIndex].Value)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7d7b      	ldrb	r3, [r7, #21]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	429a      	cmp	r2, r3
 8000534:	d001      	beq.n	800053a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	3301      	adds	r3, #1
 800053e:	757b      	strb	r3, [r7, #21]
 8000540:	e000      	b.n	8000544 <CC1200_Configure+0x72>
		}
		else
		{
			continue;
 8000542:	bf00      	nop
	for (Address = 0x00; Address < 0x2F; Address++)
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	3301      	adds	r3, #1
 8000548:	75bb      	strb	r3, [r7, #22]
 800054a:	7dbb      	ldrb	r3, [r7, #22]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d9cd      	bls.n	80004ec <CC1200_Configure+0x1a>
		}
	}

	ConfigIndex = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000554:	2300      	movs	r3, #0
 8000556:	75bb      	strb	r3, [r7, #22]
 8000558:	e02e      	b.n	80005b8 <CC1200_Configure+0xe6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 800055a:	7d7b      	ldrb	r3, [r7, #21]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	7dba      	ldrb	r2, [r7, #22]
 8000566:	429a      	cmp	r2, r3
 8000568:	d122      	bne.n	80005b0 <CC1200_Configure+0xde>
		{
			retval = CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 800056a:	7d7b      	ldrb	r3, [r7, #21]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	785a      	ldrb	r2, [r3, #1]
 8000574:	7dbb      	ldrb	r3, [r7, #22]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 f8a1 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 8000582:	7dbb      	ldrb	r3, [r7, #22]
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f000 f8ec 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800058c:	4603      	mov	r3, r0
 800058e:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Extended_Register_Setting[ConfigIndex].Value)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7d7b      	ldrb	r3, [r7, #21]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	440b      	add	r3, r1
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <CC1200_Configure+0xd6>
			{
				retval = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	3301      	adds	r3, #1
 80005ac:	757b      	strb	r3, [r7, #21]
 80005ae:	e000      	b.n	80005b2 <CC1200_Configure+0xe0>
		}
		else
		{
			continue;
 80005b0:	bf00      	nop
	for (Address = 0x00; Address <= 0xDA; Address++)
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	3301      	adds	r3, #1
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2bda      	cmp	r3, #218	; 0xda
 80005bc:	d9cd      	bls.n	800055a <CC1200_Configure+0x88>
		}
	}

	return(retval);
 80005be:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if (Register_Address < 0x2F)
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2b2e      	cmp	r3, #46	; 0x2e
 80005dc:	d829      	bhi.n	8000632 <CC1200_Write_Single_Register+0x6a>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6858      	ldr	r0, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	891b      	ldrh	r3, [r3, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 f923 	bl	8001838 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68d8      	ldr	r0, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f107 010e 	add.w	r1, r7, #14
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f003 fbf3 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68d8      	ldr	r0, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	1cb9      	adds	r1, r7, #2
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	f003 fbe9 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6858      	ldr	r0, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f001 f906 	bl	8001838 <HAL_GPIO_WritePin>

		retval = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e001      	b.n	8000636 <CC1200_Write_Single_Register+0x6e>
	}
	else
	{
		retval = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if (Register_Address < 0x2F)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b2e      	cmp	r3, #46	; 0x2e
 8000650:	d82f      	bhi.n	80006b2 <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f001 f8e4 	bl	8001838 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68d8      	ldr	r0, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f107 010e 	add.w	r1, r7, #14
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f003 fbb4 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68d8      	ldr	r0, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f107 010d 	add.w	r1, r7, #13
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	f003 fba9 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	891b      	ldrh	r3, [r3, #8]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 f8c6 	bl	8001838 <HAL_GPIO_WritePin>

		retval = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e001      	b.n	80006b6 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b39      	cmp	r3, #57	; 0x39
 80006d4:	d902      	bls.n	80006dc <CC1200_Write_Single_Extended_Register+0x1c>
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d908      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2ba2      	cmp	r3, #162	; 0xa2
 80006e0:	d902      	bls.n	80006e8 <CC1200_Write_Single_Extended_Register+0x28>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2bd1      	cmp	r3, #209	; 0xd1
 80006e6:	d902      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006e8:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006ea:	2bda      	cmp	r3, #218	; 0xda
 80006ec:	d902      	bls.n	80006f4 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e032      	b.n	800075a <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006f4:	232f      	movs	r3, #47	; 0x2f
 80006f6:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f001 f898 	bl	8001838 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68d8      	ldr	r0, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f107 010e 	add.w	r1, r7, #14
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	f003 fb68 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68d8      	ldr	r0, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	1cf9      	adds	r1, r7, #3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	f003 fb5e 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68d8      	ldr	r0, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	1cb9      	adds	r1, r7, #2
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f003 fb54 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	891b      	ldrh	r3, [r3, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	f001 f871 	bl	8001838 <HAL_GPIO_WritePin>

		retval = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b39      	cmp	r3, #57	; 0x39
 8000774:	d902      	bls.n	800077c <CC1200_Read_Single_Extended_Register+0x18>
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b63      	cmp	r3, #99	; 0x63
 800077a:	d908      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2ba2      	cmp	r3, #162	; 0xa2
 8000780:	d902      	bls.n	8000788 <CC1200_Read_Single_Extended_Register+0x24>
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2bd1      	cmp	r3, #209	; 0xd1
 8000786:	d902      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000788:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800078a:	2bda      	cmp	r3, #218	; 0xda
 800078c:	d902      	bls.n	8000794 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e035      	b.n	8000800 <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};
		//(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
		//(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
		//(SPI_Info -> MOSI_Data)[2] = MOSI_Data[2];

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6858      	ldr	r0, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891b      	ldrh	r3, [r3, #8]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f001 f846 	bl	8001838 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68d8      	ldr	r0, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f107 010e 	add.w	r1, r7, #14
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f003 fb16 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	1cf9      	adds	r1, r7, #3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	f003 fb0c 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68d8      	ldr	r0, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	f107 010d 	add.w	r1, r7, #13
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	f003 fb01 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 f81e 	bl	8001838 <HAL_GPIO_WritePin>

		retval = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b2f      	cmp	r3, #47	; 0x2f
 800081a:	d922      	bls.n	8000862 <CC1200_Command_Strobe+0x58>
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b3d      	cmp	r3, #61	; 0x3d
 8000820:	d81f      	bhi.n	8000862 <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	73bb      	strb	r3, [r7, #14]
		//SPI_Info -> MOSI_Data = &Header_Byte;

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6858      	ldr	r0, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f001 f801 	bl	8001838 <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f107 010e 	add.w	r1, r7, #14
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	f003 fad1 	bl	8003dee <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f000 ffee 	bl	8001838 <HAL_GPIO_WritePin>

		retval = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
	{
 8000860:	e001      	b.n	8000866 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1200_Transmit>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Transmit(CC1200_t* SPI_Info, uint8_t* TX_Packet, uint8_t TX_Packet_Length)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t Header_Byte = 0x40 | 0x3F; // 0100 0000 | 0011 1111
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	75bb      	strb	r3, [r7, #22]
	uint8_t i; // counter
	//uint8_t Status; // status byte

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFTX); // flush TX FIFO (before loading data)
 8000882:	213b      	movs	r1, #59	; 0x3b
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffc0 	bl	800080a <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6858      	ldr	r0, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f000 ffcf 	bl	8001838 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68d8      	ldr	r0, [r3, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f107 0116 	add.w	r1, r7, #22
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	f003 fa9f 	bl	8003dee <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &TX_Packet_Length, SPI_Info -> MISO_Data, 1, 100);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68d8      	ldr	r0, [r3, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	f003 fa95 	bl	8003dee <HAL_SPI_TransmitReceive>

	for(i = 0; i < TX_Packet_Length; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00e      	b.n	80008e8 <CC1200_Transmit+0x78>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &(TX_Packet[i]), SPI_Info -> MISO_Data, 1, 100);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	18d1      	adds	r1, r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	f003 fa86 	bl	8003dee <HAL_SPI_TransmitReceive>
	for(i = 0; i < TX_Packet_Length; i++)
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3301      	adds	r3, #1
 80008e6:	75fb      	strb	r3, [r7, #23]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7dfa      	ldrb	r2, [r7, #23]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3ec      	bcc.n	80008ca <CC1200_Transmit+0x5a>
	}

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6858      	ldr	r0, [r3, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f000 ff9c 	bl	8001838 <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_STX); // enable TX
 8000900:	2135      	movs	r1, #53	; 0x35
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff81 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <CC1200_Receive>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Receive(CC1200_t* SPI_Info, uint8_t* RX_Packet)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af02      	add	r7, sp, #8
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
	uint8_t Header_Byte = 0xC0 | 0x3F; // 1100 0000 | 0011 1111
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	737b      	strb	r3, [r7, #13]
	uint8_t Placeholder = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	733b      	strb	r3, [r7, #12]
//    if (Packet_Length == 0)
//    {
//		return 1;
//    }

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6858      	ldr	r0, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	891b      	ldrh	r3, [r3, #8]
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f000 ff82 	bl	8001838 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68d8      	ldr	r0, [r3, #12]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f107 010d 	add.w	r1, r7, #13
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	f003 fa52 	bl	8003dee <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68d8      	ldr	r0, [r3, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	f107 010c 	add.w	r1, r7, #12
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	f003 fa47 	bl	8003dee <HAL_SPI_TransmitReceive>

	Packet_Length = (SPI_Info -> MISO_Data) [0];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < Packet_Length; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e014      	b.n	8000998 <CC1200_Receive+0x86>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68d8      	ldr	r0, [r3, #12]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f107 010c 	add.w	r1, r7, #12
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	f003 fa35 	bl	8003dee <HAL_SPI_TransmitReceive>
		RX_Packet[i] = (SPI_Info -> MISO_Data) [0];
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	440b      	add	r3, r1
 800098e:	7812      	ldrb	r2, [r2, #0]
 8000990:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Packet_Length; i++)
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3301      	adds	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	7bfa      	ldrb	r2, [r7, #15]
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	429a      	cmp	r2, r3
 800099e:	d3e6      	bcc.n	800096e <CC1200_Receive+0x5c>
	}

	RX_Packet[Packet_Length] = '\0'; // null termination
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6858      	ldr	r0, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	891b      	ldrh	r3, [r3, #8]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	f000 ff3f 	bl	8001838 <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (after processing data)
 80009ba:	213a      	movs	r1, #58	; 0x3a
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff24 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	f5ad 5d1e 	sub.w	sp, sp, #10112	; 0x2780
 80009d2:	b08e      	sub	sp, #56	; 0x38
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4602      	mov	r2, r0
 80009d8:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80009dc:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 80009e0:	801a      	strh	r2, [r3, #0]
	uint16_t Message_Length;
	char str1[150];

	uint8_t check;

	check = CC1200_Receive(&SPI_Info, RX_Packet);
 80009e2:	4939      	ldr	r1, [pc, #228]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009e4:	4839      	ldr	r0, [pc, #228]	; (8000acc <HAL_GPIO_EXTI_Callback+0x100>)
 80009e6:	f7ff ff94 	bl	8000912 <CC1200_Receive>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f507 521e 	add.w	r2, r7, #10112	; 0x2780
 80009f0:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80009f4:	7013      	strb	r3, [r2, #0]

	if (check) // check == 1
 80009f6:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 80009fa:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d029      	beq.n	8000a58 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		sprintf(str1, "RX FIFO Empty!\r\n");
 8000a04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a08:	3b2c      	subs	r3, #44	; 0x2c
 8000a0a:	4931      	ldr	r1, [pc, #196]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f00a f801 	bl	800aa14 <siprintf>
		strcat(Message, str1);
 8000a12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a16:	3a2c      	subs	r2, #44	; 0x2c
 8000a18:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a1c:	3b14      	subs	r3, #20
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00a f817 	bl	800aa54 <strcat>
		Message_Length = strlen(Message);
 8000a26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a2a:	3b14      	subs	r3, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fba5 	bl	800017c <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f507 521e 	add.w	r2, r7, #10112	; 0x2780
 8000a38:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000a3c:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8000a3e:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8000a42:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000a46:	881a      	ldrh	r2, [r3, #0]
 8000a48:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a4c:	3b14      	subs	r3, #20
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f008 fa63 	bl	8008f1c <CDC_Transmit_FS>
		strcat(Message, str1);
		Message_Length = strlen(Message);

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
	}
}
 8000a56:	e030      	b.n	8000aba <HAL_GPIO_EXTI_Callback+0xee>
		sprintf(Message, "Received the Following Message: ");
 8000a58:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a5c:	3b14      	subs	r3, #20
 8000a5e:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x108>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f009 ffd7 	bl	800aa14 <siprintf>
		sprintf(str1, "%s\r\n", (char*) RX_Packet);
 8000a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a6a:	3b2c      	subs	r3, #44	; 0x2c
 8000a6c:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000a6e:	491a      	ldr	r1, [pc, #104]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f009 ffcf 	bl	800aa14 <siprintf>
		strcat(Message, str1);
 8000a76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a7a:	3a2c      	subs	r2, #44	; 0x2c
 8000a7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a80:	3b14      	subs	r3, #20
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f009 ffe5 	bl	800aa54 <strcat>
		Message_Length = strlen(Message);
 8000a8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a8e:	3b14      	subs	r3, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fb73 	bl	800017c <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f507 521e 	add.w	r2, r7, #10112	; 0x2780
 8000a9c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000aa0:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8000aa2:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8000aa6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000aaa:	881a      	ldrh	r2, [r3, #0]
 8000aac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000ab0:	3b14      	subs	r3, #20
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f008 fa31 	bl	8008f1c <CDC_Transmit_FS>
}
 8000aba:	bf00      	nop
 8000abc:	f507 571e 	add.w	r7, r7, #10112	; 0x2780
 8000ac0:	3738      	adds	r7, #56	; 0x38
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200005b4 	.word	0x200005b4
 8000acc:	200005a0 	.word	0x200005a0
 8000ad0:	0800bff0 	.word	0x0800bff0
 8000ad4:	0800c004 	.word	0x0800c004
 8000ad8:	0800c028 	.word	0x0800c028

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ae0:	f000 fb9d 	bl	800121e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ae4:	f000 f80c 	bl	8000b00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ae8:	f000 f902 	bl	8000cf0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000aec:	f000 f8d6 	bl	8000c9c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000af0:	f000 f852 	bl	8000b98 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000af4:	f008 f920 	bl	8008d38 <MX_USB_DEVICE_Init>
	MX_TIM2_Init();
 8000af8:	f000 f884 	bl	8000c04 <MX_TIM2_Init>
//	uint8_t flag = 1;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000afc:	e7fe      	b.n	8000afc <main+0x20>
	...

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b092      	sub	sp, #72	; 0x48
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f009 ff78 	bl	800aa04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <SystemClock_Config+0x94>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <SystemClock_Config+0x94>)
 8000b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b30:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b32:	2301      	movs	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b36:	2305      	movs	r3, #5
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000b4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000b4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 facb 	bl	80030f0 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000b60:	f000 f94c 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fde7 	bl	8003750 <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f938 	bl	8000dfc <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3748      	adds	r7, #72	; 0x48
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <MX_SPI1_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bcc:	2210      	movs	r2, #16
 8000bce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bea:	f003 f877 	bl	8003cdc <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bf4:	f000 f902 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200004c4 	.word	0x200004c4
 8000c00:	40013000 	.word	0x40013000

08000c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c4a:	f003 fb3d 	bl	80042c8 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c54:	f000 f8d2 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c66:	f003 fc4a 	bl	80044fe <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c70:	f000 f8c4 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_TIM2_Init+0x94>)
 8000c82:	f003 fe33 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c8c:	f000 f8b6 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000051c 	.word	0x2000051c

08000c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART2_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f003 fe68 	bl	80049a8 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 f88d 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000055c 	.word	0x2000055c
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b39      	ldr	r3, [pc, #228]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d24:	f043 0320 	orr.w	r3, r3, #32
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b27      	ldr	r3, [pc, #156]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a26      	ldr	r2, [pc, #152]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_GPIO_Init+0xfc>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6c:	4820      	ldr	r0, [pc, #128]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d6e:	f000 fd63 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	481f      	ldr	r0, [pc, #124]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d78:	f000 fd5e 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4816      	ldr	r0, [pc, #88]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d96:	f000 fbbf 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_GPIO_Init+0x108>)
 8000db2:	f000 fbb1 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000dce:	f000 fba3 	bl	8001518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2028      	movs	r0, #40	; 0x28
 8000dd8:	f000 fb67 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ddc:	2028      	movs	r0, #40	; 0x28
 8000dde:	f000 fb80 	bl	80014e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020800 	.word	0x40020800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e18:	6253      	str	r3, [r2, #36]	; 0x24
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6213      	str	r3, [r2, #32]
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6253      	str	r3, [r2, #36]	; 0x24
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e56:	2007      	movs	r0, #7
 8000e58:	f000 fb1c 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <HAL_SPI_MspInit+0x7c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d127      	bne.n	8000eda <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e94:	6213      	str	r3, [r2, #32]
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eba:	23e0      	movs	r3, #224	; 0xe0
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_SPI_MspInit+0x84>)
 8000ed6:	f000 fb1f 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40013000 	.word	0x40013000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d113      	bne.n	8000f2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_TIM_Base_MspInit+0x44>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_TIM_Base_MspInit+0x44>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_TIM_Base_MspInit+0x44>)
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	201c      	movs	r0, #28
 8000f20:	f000 fac3 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f24:	201c      	movs	r0, #28
 8000f26:	f000 fadc 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d127      	bne.n	8000faa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6253      	str	r3, [r2, #36]	; 0x24
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000fa6:	f000 fab7 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f95d 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <USB_LP_IRQHandler+0x10>)
 8001016:	f000 fd43 	bl	8001aa0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20001ec8 	.word	0x20001ec8

08001024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM2_IRQHandler+0x10>)
 800102a:	f003 f98c 	bl	8004346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000051c 	.word	0x2000051c

08001038 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800103c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001040:	f000 fc12 	bl	8001868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return 1;
 800104c:	2301      	movs	r3, #1
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <_kill>:

int _kill(int pid, int sig)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001060:	f009 fca6 	bl	800a9b0 <__errno>
 8001064:	4603      	mov	r3, r0
 8001066:	2216      	movs	r2, #22
 8001068:	601a      	str	r2, [r3, #0]
  return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_exit>:

void _exit (int status)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800107e:	f04f 31ff 	mov.w	r1, #4294967295
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffe7 	bl	8001056 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001088:	e7fe      	b.n	8001088 <_exit+0x12>

0800108a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e00a      	b.n	80010b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109c:	f3af 8000 	nop.w
 80010a0:	4601      	mov	r1, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	60ba      	str	r2, [r7, #8]
 80010a8:	b2ca      	uxtb	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf0      	blt.n	800109c <_read+0x12>
  }

  return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e009      	b.n	80010ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf1      	blt.n	80010d6 <_write+0x12>
  }
  return len;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_close>:

int _close(int file)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001122:	605a      	str	r2, [r3, #4]
  return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <_isatty>:

int _isatty(int file)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f009 fc10 	bl	800a9b0 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20014000 	.word	0x20014000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	20000634 	.word	0x20000634
 80011c4:	200023e8 	.word	0x200023e8

080011c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	; (8001218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fa:	f7ff ffe5 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f009 fbdd 	bl	800a9bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001202:	f7ff fc6b 	bl	8000adc <main>
  bx lr
 8001206:	4770      	bx	lr
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8001210:	0800c85c 	.word	0x0800c85c
  ldr r2, =_sbss
 8001214:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8001218:	200023e4 	.word	0x200023e4

0800121c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_IRQHandler>

0800121e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f933 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f80e 	bl	8001250 <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e001      	b.n	8001244 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001240:	f7ff fde2 	bl	8000e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001244:	79fb      	ldrb	r3, [r7, #7]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_InitTick+0x68>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d022      	beq.n	80012aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_InitTick+0x6c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_InitTick+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001270:	fbb1 f3f3 	udiv	r3, r1, r3
 8001274:	fbb2 f3f3 	udiv	r3, r2, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f940 	bl	80014fe <HAL_SYSTICK_Config>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10f      	bne.n	80012a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d809      	bhi.n	800129e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128a:	2200      	movs	r2, #0
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
 8001292:	f000 f90a 	bl	80014aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0x70>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e007      	b.n	80012ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e004      	b.n	80012ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002d0 	.word	0x200002d0
 80012bc:	200002c8 	.word	0x200002c8
 80012c0:	200002cc 	.word	0x200002cc

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x20>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_IncTick+0x1c>)
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000638 	.word	0x20000638
 80012e4:	200002d0 	.word	0x200002d0

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000638 	.word	0x20000638

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4906      	ldr	r1, [pc, #24]	; (8001394 <__NVIC_EnableIRQ+0x34>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff90 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff2d 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff42 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff90 	bl	80013ec <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5f 	bl	8001398 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff35 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800152e:	e160      	b.n	80017f2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2101      	movs	r1, #1
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8152 	beq.w	80017ec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d005      	beq.n	8001560 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800155c:	2b02      	cmp	r3, #2
 800155e:	d130      	bne.n	80015c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001596:	2201      	movs	r2, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 0201 	and.w	r2, r3, #1
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d017      	beq.n	80015fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d123      	bne.n	8001652 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001616:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0203 	and.w	r2, r3, #3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80ac 	beq.w	80017ec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001694:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a5d      	ldr	r2, [pc, #372]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80016ac:	4a59      	ldr	r2, [pc, #356]	; (8001814 <HAL_GPIO_Init+0x2fc>)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <HAL_GPIO_Init+0x300>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d025      	beq.n	8001724 <HAL_GPIO_Init+0x20c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a50      	ldr	r2, [pc, #320]	; (800181c <HAL_GPIO_Init+0x304>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d01f      	beq.n	8001720 <HAL_GPIO_Init+0x208>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <HAL_GPIO_Init+0x308>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d019      	beq.n	800171c <HAL_GPIO_Init+0x204>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a4e      	ldr	r2, [pc, #312]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d013      	beq.n	8001718 <HAL_GPIO_Init+0x200>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_GPIO_Init+0x310>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00d      	beq.n	8001714 <HAL_GPIO_Init+0x1fc>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_GPIO_Init+0x314>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x1f8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_GPIO_Init+0x318>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_GPIO_Init+0x1f4>
 8001708:	2306      	movs	r3, #6
 800170a:	e00c      	b.n	8001726 <HAL_GPIO_Init+0x20e>
 800170c:	2307      	movs	r3, #7
 800170e:	e00a      	b.n	8001726 <HAL_GPIO_Init+0x20e>
 8001710:	2305      	movs	r3, #5
 8001712:	e008      	b.n	8001726 <HAL_GPIO_Init+0x20e>
 8001714:	2304      	movs	r3, #4
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x20e>
 8001718:	2303      	movs	r3, #3
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x20e>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x20e>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x20e>
 8001724:	2300      	movs	r3, #0
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001736:	4937      	ldr	r1, [pc, #220]	; (8001814 <HAL_GPIO_Init+0x2fc>)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_GPIO_Init+0x31c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001768:	4a32      	ldr	r2, [pc, #200]	; (8001834 <HAL_GPIO_Init+0x31c>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_GPIO_Init+0x31c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001792:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_GPIO_Init+0x31c>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_GPIO_Init+0x31c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_GPIO_Init+0x31c>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_GPIO_Init+0x31c>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_GPIO_Init+0x31c>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f47f ae97 	bne.w	8001530 <HAL_GPIO_Init+0x18>
  }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40010000 	.word	0x40010000
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40021400 	.word	0x40021400
 8001830:	40021800 	.word	0x40021800
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001854:	e003      	b.n	800185e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	619a      	str	r2, [r3, #24]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f8a0 	bl	80009cc <HAL_GPIO_EXTI_Callback>
  }
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	b08b      	sub	sp, #44	; 0x2c
 800189c:	af06      	add	r7, sp, #24
 800189e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0d0      	b.n	8001a4c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f008 fdd6 	bl	800a470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f003 f9b1 	bl	8004c38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e04c      	b.n	8001976 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	3301      	adds	r3, #1
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b298      	uxth	r0, r3
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3336      	adds	r3, #54	; 0x36
 800191a:	4602      	mov	r2, r0
 800191c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	3303      	adds	r3, #3
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	3338      	adds	r3, #56	; 0x38
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	333c      	adds	r3, #60	; 0x3c
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3340      	adds	r3, #64	; 0x40
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	3301      	adds	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	d3ad      	bcc.n	80018dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e044      	b.n	8001a10 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d3b5      	bcc.n	8001986 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	687e      	ldr	r6, [r7, #4]
 8001a22:	466d      	mov	r5, sp
 8001a24:	f106 0410 	add.w	r4, r6, #16
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	602b      	str	r3, [r5, #0]
 8001a30:	1d33      	adds	r3, r6, #4
 8001a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f003 f919 	bl	8004c6c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_PCD_Start+0x16>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e016      	b.n	8001a98 <HAL_PCD_Start+0x44>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 f8c8 	bl	8004c0c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f008 fcd8 	bl	800a434 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f005 fdad 	bl	80075e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 fda5 	bl	80075fc <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abc:	d102      	bne.n	8001ac4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 faf5 	bl	80020ae <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 fd97 	bl	80075fc <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad8:	d112      	bne.n	8001b00 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aec:	b292      	uxth	r2, r2
 8001aee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f008 fd37 	bl	800a566 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001af8:	2100      	movs	r1, #0
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8c7 	bl	8001c8e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f005 fd79 	bl	80075fc <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b14:	d10b      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b28:	b292      	uxth	r2, r2
 8001b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 fd62 	bl	80075fc <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b42:	d10b      	bne.n	8001b5c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b56:	b292      	uxth	r2, r2
 8001b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f005 fd4b 	bl	80075fc <USB_ReadInterrupts>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b70:	d126      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0204 	bic.w	r2, r2, #4
 8001b84:	b292      	uxth	r2, r2
 8001b86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0208 	bic.w	r2, r2, #8
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f008 fd18 	bl	800a5d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f005 fd19 	bl	80075fc <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd4:	d126      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0208 	orr.w	r2, r2, #8
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c00:	b292      	uxth	r2, r2
 8001c02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0204 	orr.w	r2, r2, #4
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f008 fcc0 	bl	800a5a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 fce7 	bl	80075fc <USB_ReadInterrupts>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d10e      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f008 fc79 	bl	800a54a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fccd 	bl	80075fc <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6c:	d10b      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c80:	b292      	uxth	r2, r2
 8001c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_PCD_SetAddress+0x1a>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e013      	b.n	8001cd0 <HAL_PCD_SetAddress+0x42>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f005 fc7e 	bl	80075c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	70fb      	strb	r3, [r7, #3]
 8001cea:	460b      	mov	r3, r1
 8001cec:	803b      	strh	r3, [r7, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da0e      	bge.n	8001d1c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	705a      	strb	r2, [r3, #1]
 8001d1a:	e00e      	b.n	8001d3a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 0207 	and.w	r2, r3, #7
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d46:	883a      	ldrh	r2, [r7, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	78ba      	ldrb	r2, [r7, #2]
 8001d50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	785b      	ldrb	r3, [r3, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d64:	78bb      	ldrb	r3, [r7, #2]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d102      	bne.n	8001d70 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_PCD_EP_Open+0xa6>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e00e      	b.n	8001d9c <HAL_PCD_EP_Open+0xc4>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 ff8d 	bl	8004cac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da0e      	bge.n	8001dd6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	705a      	strb	r2, [r3, #1]
 8001dd4:	e00e      	b.n	8001df4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 0207 	and.w	r2, r3, #7
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_PCD_EP_Close+0x6a>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e00e      	b.n	8001e2c <HAL_PCD_EP_Close+0x88>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68f9      	ldr	r1, [r7, #12]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 faaf 	bl	8005380 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	460b      	mov	r3, r1
 8001e42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	f003 0207 	and.w	r2, r3, #7
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2200      	movs	r2, #0
 8001e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6979      	ldr	r1, [r7, #20]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fc61 	bl	8005758 <USB_EPStartXfer>
 8001e96:	e005      	b.n	8001ea4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fc5a 	bl	8005758 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f003 0207 	and.w	r2, r3, #7
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ed0:	681b      	ldr	r3, [r3, #0]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eec:	7afb      	ldrb	r3, [r7, #11]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2201      	movs	r2, #1
 8001f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6979      	ldr	r1, [r7, #20]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fc07 	bl	8005758 <USB_EPStartXfer>
 8001f4a:	e005      	b.n	8001f58 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6979      	ldr	r1, [r7, #20]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fc00 	bl	8005758 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 0207 	and.w	r2, r3, #7
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d901      	bls.n	8001f80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e03e      	b.n	8001ffe <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da0e      	bge.n	8001fa6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	705a      	strb	r2, [r3, #1]
 8001fa4:	e00c      	b.n	8001fc0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_PCD_EP_SetStall+0x7e>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e00e      	b.n	8001ffe <HAL_PCD_EP_SetStall+0x9c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68f9      	ldr	r1, [r7, #12]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 f9ea 	bl	80073c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d901      	bls.n	8002024 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e040      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0e      	bge.n	800204a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00e      	b.n	8002068 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0207 	and.w	r2, r3, #7
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_ClrStall+0x82>
 8002084:	2302      	movs	r3, #2
 8002086:	e00e      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f005 f9e6 	bl	8007468 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b08e      	sub	sp, #56	; 0x38
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020b6:	e2ec      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 8161 	bne.w	800239a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d152      	bne.n	8002188 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	81fb      	strh	r3, [r7, #14]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002102:	b29b      	uxth	r3, r3
 8002104:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3328      	adds	r3, #40	; 0x28
 800210a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	3302      	adds	r3, #2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	441a      	add	r2, r3
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002146:	2100      	movs	r1, #0
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f008 f9e4 	bl	800a516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 829b 	beq.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 8296 	bne.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002172:	b2da      	uxtb	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b292      	uxth	r2, r2
 800217a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002186:	e284      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800219a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d034      	beq.n	800220c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	3306      	adds	r3, #6
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f005 fa5f 	bl	80076a4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021f2:	4013      	ands	r3, r2
 80021f4:	823b      	strh	r3, [r7, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	8a3a      	ldrh	r2, [r7, #16]
 80021fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002200:	b292      	uxth	r2, r2
 8002202:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f008 f959 	bl	800a4bc <HAL_PCD_SetupStageCallback>
 800220a:	e242      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800220c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002210:	2b00      	cmp	r3, #0
 8002212:	f280 823e 	bge.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b29a      	uxth	r2, r3
 800221e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002222:	4013      	ands	r3, r2
 8002224:	83bb      	strh	r3, [r7, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	8bba      	ldrh	r2, [r7, #28]
 800222c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002230:	b292      	uxth	r2, r2
 8002232:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	3306      	adds	r3, #6
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d019      	beq.n	800229c <PCD_EP_ISR_Handler+0x1ee>
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	6959      	ldr	r1, [r3, #20]
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002280:	b29b      	uxth	r3, r3
 8002282:	f005 fa0f 	bl	80076a4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	441a      	add	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002294:	2100      	movs	r1, #0
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f008 f922 	bl	800a4e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 81f2 	bne.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4413      	add	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d112      	bne.n	80022fc <PCD_EP_ISR_Handler+0x24e>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	e02f      	b.n	800235c <PCD_EP_ISR_Handler+0x2ae>
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b3e      	cmp	r3, #62	; 0x3e
 8002302:	d813      	bhi.n	800232c <PCD_EP_ISR_Handler+0x27e>
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <PCD_EP_ISR_Handler+0x270>
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	3301      	adds	r3, #1
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	b29b      	uxth	r3, r3
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	b29a      	uxth	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	e017      	b.n	800235c <PCD_EP_ISR_Handler+0x2ae>
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <PCD_EP_ISR_Handler+0x298>
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	3b01      	subs	r3, #1
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	b29b      	uxth	r3, r3
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	b29b      	uxth	r3, r3
 800234e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002356:	b29a      	uxth	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236c:	827b      	strh	r3, [r7, #18]
 800236e:	8a7b      	ldrh	r3, [r7, #18]
 8002370:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002374:	827b      	strh	r3, [r7, #18]
 8002376:	8a7b      	ldrh	r3, [r7, #18]
 8002378:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800237c:	827b      	strh	r3, [r7, #18]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	8a7b      	ldrh	r3, [r7, #18]
 8002384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002394:	b29b      	uxth	r3, r3
 8002396:	8013      	strh	r3, [r2, #0]
 8002398:	e17b      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f280 80ea 	bge.w	800258a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023cc:	4013      	ands	r3, r2
 80023ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e4:	b292      	uxth	r2, r2
 80023e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80023e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	7b1b      	ldrb	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d122      	bne.n	800244c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	3306      	adds	r3, #6
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800242e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8087 	beq.w	8002546 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	6959      	ldr	r1, [r3, #20]
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	88da      	ldrh	r2, [r3, #6]
 8002444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002446:	f005 f92d 	bl	80076a4 <USB_ReadPMA>
 800244a:	e07c      	b.n	8002546 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	78db      	ldrb	r3, [r3, #3]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d108      	bne.n	8002466 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002454:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002456:	461a      	mov	r2, r3
 8002458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f927 	bl	80026ae <HAL_PCD_EP_DB_Receive>
 8002460:	4603      	mov	r3, r0
 8002462:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002464:	e06f      	b.n	8002546 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002480:	847b      	strh	r3, [r7, #34]	; 0x22
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	441a      	add	r2, r3
 8002490:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d021      	beq.n	8002504 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	3302      	adds	r3, #2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80024ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02a      	beq.n	8002546 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	6959      	ldr	r1, [r3, #20]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	891a      	ldrh	r2, [r3, #8]
 80024fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024fe:	f005 f8d1 	bl	80076a4 <USB_ReadPMA>
 8002502:	e020      	b.n	8002546 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	3306      	adds	r3, #6
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800252e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	6959      	ldr	r1, [r3, #20]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	895a      	ldrh	r2, [r3, #10]
 8002540:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002542:	f005 f8af 	bl	80076a4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800254c:	441a      	add	r2, r3
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002558:	441a      	add	r2, r3
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <PCD_EP_ISR_Handler+0x4c2>
 8002566:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d206      	bcs.n	800257e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f007 ffb2 	bl	800a4e0 <HAL_PCD_DataOutStageCallback>
 800257c:	e005      	b.n	800258a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002584:	4618      	mov	r0, r3
 8002586:	f003 f8e7 	bl	8005758 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800258a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d07e      	beq.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002594:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	843b      	strh	r3, [r7, #32]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	8c3b      	ldrh	r3, [r7, #32]
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	78db      	ldrb	r3, [r3, #3]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d00c      	beq.n	8002602 <PCD_EP_ISR_Handler+0x554>
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	78db      	ldrb	r3, [r3, #3]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d146      	bne.n	8002686 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80025f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d141      	bne.n	8002686 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	3302      	adds	r3, #2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	8bfb      	ldrh	r3, [r7, #30]
 8002632:	429a      	cmp	r2, r3
 8002634:	d906      	bls.n	8002644 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	8bfb      	ldrh	r3, [r7, #30]
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	619a      	str	r2, [r3, #24]
 8002642:	e002      	b.n	800264a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f007 ff5c 	bl	800a516 <HAL_PCD_DataInStageCallback>
 800265e:	e018      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	8bfb      	ldrh	r3, [r7, #30]
 8002666:	441a      	add	r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	8bfb      	ldrh	r3, [r7, #30]
 8002672:	441a      	add	r2, r3
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	4618      	mov	r0, r3
 8002680:	f003 f86a 	bl	8005758 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002684:	e005      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002688:	461a      	mov	r2, r3
 800268a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f91b 	bl	80028c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800269a:	b29b      	uxth	r3, r3
 800269c:	b21b      	sxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f6ff ad0a 	blt.w	80020b8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b088      	sub	sp, #32
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	4613      	mov	r3, r2
 80026ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d07e      	beq.n	80027c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	3302      	adds	r3, #2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	8b7b      	ldrh	r3, [r7, #26]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d306      	bcc.n	8002708 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	8b7b      	ldrh	r3, [r7, #26]
 8002700:	1ad2      	subs	r2, r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	619a      	str	r2, [r3, #24]
 8002706:	e002      	b.n	800270e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d123      	bne.n	800275e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800272c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002730:	833b      	strh	r3, [r7, #24]
 8002732:	8b3b      	ldrh	r3, [r7, #24]
 8002734:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002738:	833b      	strh	r3, [r7, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	441a      	add	r2, r3
 8002748:	8b3b      	ldrh	r3, [r7, #24]
 800274a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800274e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275a:	b29b      	uxth	r3, r3
 800275c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01f      	beq.n	80027a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	82fb      	strh	r3, [r7, #22]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	441a      	add	r2, r3
 8002792:	8afb      	ldrh	r3, [r7, #22]
 8002794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027a8:	8b7b      	ldrh	r3, [r7, #26]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6959      	ldr	r1, [r3, #20]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	891a      	ldrh	r2, [r3, #8]
 80027bc:	8b7b      	ldrh	r3, [r7, #26]
 80027be:	f004 ff71 	bl	80076a4 <USB_ReadPMA>
 80027c2:	e07c      	b.n	80028be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	3306      	adds	r3, #6
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	8b7b      	ldrh	r3, [r7, #26]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d306      	bcc.n	8002806 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	8b7b      	ldrh	r3, [r7, #26]
 80027fe:	1ad2      	subs	r2, r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	619a      	str	r2, [r3, #24]
 8002804:	e002      	b.n	800280c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d123      	bne.n	800285c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	83fb      	strh	r3, [r7, #30]
 8002830:	8bfb      	ldrh	r3, [r7, #30]
 8002832:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002836:	83fb      	strh	r3, [r7, #30]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	8bfb      	ldrh	r3, [r7, #30]
 8002848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002858:	b29b      	uxth	r3, r3
 800285a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11f      	bne.n	80028a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	83bb      	strh	r3, [r7, #28]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	441a      	add	r2, r3
 8002890:	8bbb      	ldrh	r3, [r7, #28]
 8002892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800289a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028a6:	8b7b      	ldrh	r3, [r7, #26]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6959      	ldr	r1, [r3, #20]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	895a      	ldrh	r2, [r3, #10]
 80028b8:	8b7b      	ldrh	r3, [r7, #26]
 80028ba:	f004 fef3 	bl	80076a4 <USB_ReadPMA>
    }
  }

  return count;
 80028be:	8b7b      	ldrh	r3, [r7, #26]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0a2      	sub	sp, #136	; 0x88
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 81c7 	beq.w	8002c70 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	3302      	adds	r3, #2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002916:	429a      	cmp	r2, r3
 8002918:	d907      	bls.n	800292a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	e002      	b.n	8002930 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 80b9 	bne.w	8002aac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d126      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002950:	b29b      	uxth	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	4413      	add	r3, r2
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	011a      	lsls	r2, r3, #4
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	4413      	add	r3, r2
 8002964:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002974:	b29a      	uxth	r2, r3
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002988:	b29a      	uxth	r2, r3
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	e01a      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d116      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	4413      	add	r3, r2
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	011a      	lsls	r2, r3, #4
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d126      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x15a>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4413      	add	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	011a      	lsls	r2, r3, #4
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4413      	add	r3, r2
 80029f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	e017      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d113      	bne.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	4413      	add	r3, r2
 8002a3a:	623b      	str	r3, [r7, #32]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	011a      	lsls	r2, r3, #4
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	4413      	add	r3, r2
 8002a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	4619      	mov	r1, r3
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f007 fd5c 	bl	800a516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 82d4 	beq.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a84:	827b      	strh	r3, [r7, #18]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	441a      	add	r2, r3
 8002a94:	8a7b      	ldrh	r3, [r7, #18]
 8002a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	8013      	strh	r3, [r2, #0]
 8002aaa:	e2b2      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d021      	beq.n	8002afa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 8286 	bne.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b0e:	441a      	add	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b1c:	441a      	add	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d309      	bcc.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	621a      	str	r2, [r3, #32]
 8002b40:	e015      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b58:	e009      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d155      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	4413      	add	r3, r2
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	011a      	lsls	r2, r3, #4
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	4413      	add	r3, r2
 8002b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d112      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x302>
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	e047      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8002bce:	d811      	bhi.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be2:	3301      	adds	r3, #1
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	029b      	lsls	r3, r3, #10
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e032      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x342>
 8002c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c06:	3b01      	subs	r3, #1
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	801a      	strh	r2, [r3, #0]
 8002c20:	e01b      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d117      	bne.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3e:	4413      	add	r3, r2
 8002c40:	643b      	str	r3, [r7, #64]	; 0x40
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	011a      	lsls	r2, r3, #4
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6959      	ldr	r1, [r3, #20]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	891a      	ldrh	r2, [r3, #8]
 8002c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f004 fcd6 	bl	800761a <USB_WritePMA>
 8002c6e:	e1d0      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	3306      	adds	r3, #6
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d307      	bcc.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	619a      	str	r2, [r3, #24]
 8002cb6:	e002      	b.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 80c4 	bne.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d126      	bne.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x456>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce4:	4413      	add	r3, r2
 8002ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	011a      	lsls	r2, r3, #4
 8002cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	e01a      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d116      	bne.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3a:	4413      	add	r3, r2
 8002d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	011a      	lsls	r2, r3, #4
 8002d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d46:	4413      	add	r3, r2
 8002d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d50:	2200      	movs	r2, #0
 8002d52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d12f      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	011a      	lsls	r2, r3, #4
 8002d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e017      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d113      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd8:	4413      	add	r3, r2
 8002dda:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	011a      	lsls	r2, r3, #4
 8002de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dee:	2200      	movs	r2, #0
 8002df0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f007 fb8c 	bl	800a516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 8104 	bne.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
 8002e4e:	e0e0      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d121      	bne.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80b4 	bne.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d309      	bcc.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ede:	1ad2      	subs	r2, r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	621a      	str	r2, [r3, #32]
 8002ee4:	e015      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d107      	bne.n	8002efe <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002eee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ef2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002efc:	e009      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	667b      	str	r3, [r7, #100]	; 0x64
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d155      	bne.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x704>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f34:	4413      	add	r3, r2
 8002f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	011a      	lsls	r2, r3, #4
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	4413      	add	r3, r2
 8002f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d112      	bne.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e044      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f76:	2b3e      	cmp	r3, #62	; 0x3e
 8002f78:	d811      	bhi.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	029b      	lsls	r3, r3, #10
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e02f      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e018      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d114      	bne.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe2:	4413      	add	r3, r2
 8002fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	011a      	lsls	r2, r3, #4
 8002fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fee:	4413      	add	r3, r2
 8002ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6959      	ldr	r1, [r3, #20]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	895a      	ldrh	r2, [r3, #10]
 800300a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300c:	b29b      	uxth	r3, r3
 800300e:	f004 fb04 	bl	800761a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302c:	823b      	strh	r3, [r7, #16]
 800302e:	8a3b      	ldrh	r3, [r7, #16]
 8003030:	f083 0310 	eor.w	r3, r3, #16
 8003034:	823b      	strh	r3, [r7, #16]
 8003036:	8a3b      	ldrh	r3, [r7, #16]
 8003038:	f083 0320 	eor.w	r3, r3, #32
 800303c:	823b      	strh	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8a3b      	ldrh	r3, [r7, #16]
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3788      	adds	r7, #136	; 0x88
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	4613      	mov	r3, r2
 800307c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e009      	b.n	80030b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a2:	897a      	ldrh	r2, [r7, #10]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	80da      	strh	r2, [r3, #6]
 80030ca:	e00b      	b.n	80030e4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2201      	movs	r2, #1
 80030d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	b29a      	uxth	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e31d      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003102:	4b94      	ldr	r3, [pc, #592]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310c:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d07b      	beq.n	800321a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d006      	beq.n	8003136 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d10f      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d10b      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003136:	4b87      	ldr	r3, [pc, #540]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d06a      	beq.n	8003218 <HAL_RCC_OscConfig+0x128>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d166      	bne.n	8003218 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e2f7      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d106      	bne.n	8003164 <HAL_RCC_OscConfig+0x74>
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e02d      	b.n	80031c0 <HAL_RCC_OscConfig+0xd0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x96>
 800316c:	4b79      	ldr	r3, [pc, #484]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a78      	ldr	r2, [pc, #480]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e01c      	b.n	80031c0 <HAL_RCC_OscConfig+0xd0>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0xb8>
 800318e:	4b71      	ldr	r3, [pc, #452]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a70      	ldr	r2, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6d      	ldr	r2, [pc, #436]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0xd0>
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a66      	ldr	r2, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe f88e 	bl	80012e8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe f88a 	bl	80012e8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e2ad      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xe0>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe f87a 	bl	80012e8 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe f876 	bl	80012e8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e299      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800320a:	4b52      	ldr	r3, [pc, #328]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x108>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d05a      	beq.n	80032dc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d119      	bne.n	8003266 <HAL_RCC_OscConfig+0x176>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d116      	bne.n	8003266 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x160>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e276      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	493d      	ldr	r1, [pc, #244]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003264:	e03a      	b.n	80032dc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326e:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCC_OscConfig+0x268>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe f838 	bl	80012e8 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe f834 	bl	80012e8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e257      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800328e:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	492a      	ldr	r1, [pc, #168]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
 80032ae:	e015      	b.n	80032dc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b0:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x268>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe f817 	bl	80012e8 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032be:	f7fe f813 	bl	80012e8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e236      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80b8 	beq.w	800345a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d170      	bne.n	80033d2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x218>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e21a      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003314:	429a      	cmp	r2, r3
 8003316:	d921      	bls.n	800335c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fc7d 	bl	8003c1c <RCC_SetFlashLatencyFromMSIRange>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e208      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4906      	ldr	r1, [pc, #24]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	061b      	lsls	r3, r3, #24
 800334c:	4901      	ldr	r1, [pc, #4]	; (8003354 <HAL_RCC_OscConfig+0x264>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
 8003352:	e020      	b.n	8003396 <HAL_RCC_OscConfig+0x2a6>
 8003354:	40023800 	.word	0x40023800
 8003358:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800335c:	4b99      	ldr	r3, [pc, #612]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4996      	ldr	r1, [pc, #600]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336e:	4b95      	ldr	r3, [pc, #596]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	4991      	ldr	r1, [pc, #580]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fc48 	bl	8003c1c <RCC_SetFlashLatencyFromMSIRange>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1d3      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	0b5b      	lsrs	r3, r3, #13
 800339c:	3301      	adds	r3, #1
 800339e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033a6:	4a87      	ldr	r2, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	0912      	lsrs	r2, r2, #4
 80033ac:	f002 020f 	and.w	r2, r2, #15
 80033b0:	4985      	ldr	r1, [pc, #532]	; (80035c8 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	5c8a      	ldrb	r2, [r1, r2]
 80033b4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033b6:	4a85      	ldr	r2, [pc, #532]	; (80035cc <HAL_RCC_OscConfig+0x4dc>)
 80033b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033ba:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <HAL_RCC_OscConfig+0x4e0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd ff46 	bl	8001250 <HAL_InitTick>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d045      	beq.n	800345a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	e1b5      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d029      	beq.n	800342e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033da:	4b7e      	ldr	r3, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x4e4>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd ff82 	bl	80012e8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e8:	f7fd ff7e 	bl	80012e8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1a1      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003406:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	496c      	ldr	r1, [pc, #432]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003418:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4967      	ldr	r1, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e015      	b.n	800345a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800342e:	4b69      	ldr	r3, [pc, #420]	; (80035d4 <HAL_RCC_OscConfig+0x4e4>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd ff58 	bl	80012e8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800343c:	f7fd ff54 	bl	80012e8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e177      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800344e:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d030      	beq.n	80034c8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346e:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fd ff38 	bl	80012e8 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347c:	f7fd ff34 	bl	80012e8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e157      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800348e:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x38c>
 800349a:	e015      	b.n	80034c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0x4e8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fd ff21 	bl	80012e8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fd ff1d 	bl	80012e8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e140      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034bc:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80b5 	beq.w	8003640 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	4a36      	ldr	r2, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6253      	str	r3, [r2, #36]	; 0x24
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b36      	ldr	r3, [pc, #216]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a32      	ldr	r2, [pc, #200]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7fd fee5 	bl	80012e8 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fd fee1 	bl	80012e8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e104      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x466>
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6353      	str	r3, [r2, #52]	; 0x34
 8003554:	e02d      	b.n	80035b2 <HAL_RCC_OscConfig+0x4c2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x488>
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003568:	6353      	str	r3, [r2, #52]	; 0x34
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003574:	6353      	str	r3, [r2, #52]	; 0x34
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x4c2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x4aa>
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358a:	6353      	str	r3, [r2, #52]	; 0x34
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6353      	str	r3, [r2, #52]	; 0x34
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x4c2>
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80035a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a4:	6353      	str	r3, [r2, #52]	; 0x34
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x4d4>)
 80035ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035b0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d024      	beq.n	8003604 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fe95 	bl	80012e8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035c0:	e019      	b.n	80035f6 <HAL_RCC_OscConfig+0x506>
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	0800c5ec 	.word	0x0800c5ec
 80035cc:	200002c8 	.word	0x200002c8
 80035d0:	200002cc 	.word	0x200002cc
 80035d4:	42470020 	.word	0x42470020
 80035d8:	42470680 	.word	0x42470680
 80035dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fd fe82 	bl	80012e8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0a3      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4f0>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fd fe70 	bl	80012e8 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fd fe6c 	bl	80012e8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e08d      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d079      	beq.n	800373c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d056      	beq.n	80036fc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b02      	cmp	r3, #2
 8003654:	d13b      	bne.n	80036ce <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_RCC_OscConfig+0x65c>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd fe44 	bl	80012e8 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd fe40 	bl	80012e8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e063      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003676:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	4319      	orrs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	430b      	orrs	r3, r1
 800369a:	492b      	ldr	r1, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a0:	4b2a      	ldr	r3, [pc, #168]	; (800374c <HAL_RCC_OscConfig+0x65c>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fd fe1f 	bl	80012e8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fd fe1b 	bl	80012e8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e03e      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x5be>
 80036cc:	e036      	b.n	800373c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_RCC_OscConfig+0x65c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fd fe08 	bl	80012e8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fd fe04 	bl	80012e8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e027      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x5ec>
 80036fa:	e01f      	b.n	800373c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e01a      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCC_OscConfig+0x658>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	429a      	cmp	r2, r3
 800371a:	d10d      	bne.n	8003738 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	42470060 	.word	0x42470060

08003750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e11a      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d919      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_RCC_ClockConfig+0x34>
 8003778:	4b8a      	ldr	r3, [pc, #552]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a89      	ldr	r2, [pc, #548]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b87      	ldr	r3, [pc, #540]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 0201 	bic.w	r2, r3, #1
 800378c:	4985      	ldr	r1, [pc, #532]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003794:	4b83      	ldr	r3, [pc, #524]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0f9      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b2:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	497a      	ldr	r1, [pc, #488]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 808e 	beq.w	80038ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d121      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0d7      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f2:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d115      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0cb      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0bf      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0b7      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	495c      	ldr	r1, [pc, #368]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fd fd54 	bl	80012e8 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d112      	bne.n	8003870 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fd fd4c 	bl	80012e8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e09b      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b08      	cmp	r3, #8
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_ClockConfig+0xfc>
 800386e:	e03e      	b.n	80038ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d112      	bne.n	800389e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387a:	f7fd fd35 	bl	80012e8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e084      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003890:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d1ee      	bne.n	800387a <HAL_RCC_ClockConfig+0x12a>
 800389c:	e027      	b.n	80038ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d11d      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fd fd1e 	bl	80012e8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e06d      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038be:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d1ee      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x158>
 80038ca:	e010      	b.n	80038ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd fd0c 	bl	80012e8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e05b      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ee      	bne.n	80038cc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d219      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_ClockConfig+0x1be>
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	4923      	ldr	r1, [pc, #140]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_RCC_ClockConfig+0x254>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e034      	b.n	800399a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4917      	ldr	r1, [pc, #92]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490f      	ldr	r1, [pc, #60]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f823 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_ClockConfig+0x258>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490b      	ldr	r1, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x25c>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x260>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_RCC_ClockConfig+0x264>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fc5e 	bl	8001250 <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
 8003996:	72fb      	strb	r3, [r7, #11]

  return status;
 8003998:	7afb      	ldrb	r3, [r7, #11]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800c5ec 	.word	0x0800c5ec
 80039b0:	200002c8 	.word	0x200002c8
 80039b4:	200002cc 	.word	0x200002cc

080039b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b092      	sub	sp, #72	; 0x48
 80039be:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80039c0:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d00d      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x34>
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	f200 80d5 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x1c8>
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x28>
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x2e>
 80039de:	e0cf      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b72      	ldr	r3, [pc, #456]	; (8003bac <HAL_RCC_GetSysClockFreq+0x1f4>)
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80039e4:	e0da      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e6:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80039e8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80039ea:	e0d7      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80039f6:	5c9b      	ldrb	r3, [r3, r2]
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	0d9b      	lsrs	r3, r3, #22
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	3301      	adds	r3, #1
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a06:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d05d      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2200      	movs	r2, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	462b      	mov	r3, r5
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	0159      	lsls	r1, r3, #5
 8003a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a30:	0150      	lsls	r0, r2, #5
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4621      	mov	r1, r4
 8003a38:	1a51      	subs	r1, r2, r1
 8003a3a:	6139      	str	r1, [r7, #16]
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a50:	4659      	mov	r1, fp
 8003a52:	018b      	lsls	r3, r1, #6
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	018a      	lsls	r2, r1, #6
 8003a5e:	46d4      	mov	ip, sl
 8003a60:	ebb2 080c 	subs.w	r8, r2, ip
 8003a64:	4659      	mov	r1, fp
 8003a66:	eb63 0901 	sbc.w	r9, r3, r1
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7e:	4690      	mov	r8, r2
 8003a80:	4699      	mov	r9, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	eb18 0303 	adds.w	r3, r8, r3
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	eb49 0303 	adc.w	r3, r9, r3
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	024b      	lsls	r3, r1, #9
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003aac:	4601      	mov	r1, r0
 8003aae:	024a      	lsls	r2, r1, #9
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac0:	f7fc fb64 	bl	800018c <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
 8003acc:	e055      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ad6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ada:	4642      	mov	r2, r8
 8003adc:	464b      	mov	r3, r9
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	0159      	lsls	r1, r3, #5
 8003ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aec:	0150      	lsls	r0, r2, #5
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	46c4      	mov	ip, r8
 8003af4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003af8:	4640      	mov	r0, r8
 8003afa:	4649      	mov	r1, r9
 8003afc:	468c      	mov	ip, r1
 8003afe:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b0e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b12:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b16:	ebb2 040a 	subs.w	r4, r2, sl
 8003b1a:	eb63 050b 	sbc.w	r5, r3, fp
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	00eb      	lsls	r3, r5, #3
 8003b28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2c:	00e2      	lsls	r2, r4, #3
 8003b2e:	4614      	mov	r4, r2
 8003b30:	461d      	mov	r5, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	18e3      	adds	r3, r4, r3
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	eb45 0303 	adc.w	r3, r5, r3
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	028b      	lsls	r3, r1, #10
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	4604      	mov	r4, r0
 8003b56:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	028a      	lsls	r2, r1, #10
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	2200      	movs	r2, #0
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	61fa      	str	r2, [r7, #28]
 8003b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6e:	f7fc fb0d 	bl	800018c <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4613      	mov	r3, r2
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003b7e:	e00d      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0b5b      	lsrs	r3, r3, #13
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3748      	adds	r7, #72	; 0x48
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	007a1200 	.word	0x007a1200
 8003bb4:	0800c5e0 	.word	0x0800c5e0

08003bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b02      	ldr	r3, [pc, #8]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	200002c8 	.word	0x200002c8

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff2 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	0800c5fc 	.word	0x0800c5fc

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf8:	f7ff ffde 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0adb      	lsrs	r3, r3, #11
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	0800c5fc 	.word	0x0800c5fc

08003c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c28:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d12c      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e016      	b.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c56:	6253      	str	r3, [r2, #36]	; 0x24
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c6c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003c80:	d105      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c88:	d101      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0f      	ldr	r2, [pc, #60]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0201 	bic.w	r2, r3, #1
 8003ca8:	490b      	ldr	r1, [pc, #44]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e07b      	b.n	8003de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cfe:	d009      	beq.n	8003d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	61da      	str	r2, [r3, #28]
 8003d06:	e005      	b.n	8003d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd f89a 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0104 	and.w	r1, r3, #4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0210 	and.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b08c      	sub	sp, #48	; 0x30
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x26>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e18a      	b.n	800412a <HAL_SPI_TransmitReceive+0x33c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e1c:	f7fd fa64 	bl	80012e8 <HAL_GetTick>
 8003e20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d00f      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x70>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e44:	d107      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x68>
 8003e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d003      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
 8003e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e5c:	e15b      	b.n	8004116 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x82>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x82>
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d103      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e76:	e14e      	b.n	8004116 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d003      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2205      	movs	r2, #5
 8003e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	887a      	ldrh	r2, [r7, #2]
 8003ea2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	887a      	ldrh	r2, [r7, #2]
 8003eae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d007      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d178      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x10a>
 8003ef2:	8b7b      	ldrh	r3, [r7, #26]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d166      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f1c:	e053      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d11b      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x176>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x176>
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d113      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d119      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x1b8>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d014      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	b292      	uxth	r2, r2
 8003f88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	1c9a      	adds	r2, r3, #2
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fa6:	f7fd f99f 	bl	80012e8 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d807      	bhi.n	8003fc6 <HAL_SPI_TransmitReceive+0x1d8>
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d003      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fc4:	e0a7      	b.n	8004116 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1a6      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x130>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1a1      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x130>
 8003fda:	e07c      	b.n	80040d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_SPI_TransmitReceive+0x1fc>
 8003fe4:	8b7b      	ldrh	r3, [r7, #26]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d16b      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004010:	e057      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d11c      	bne.n	800405a <HAL_SPI_TransmitReceive+0x26c>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d017      	beq.n	800405a <HAL_SPI_TransmitReceive+0x26c>
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d114      	bne.n	800405a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d119      	bne.n	800409c <HAL_SPI_TransmitReceive+0x2ae>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d014      	beq.n	800409c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004098:	2301      	movs	r3, #1
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800409c:	f7fd f924 	bl	80012e8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d803      	bhi.n	80040b4 <HAL_SPI_TransmitReceive+0x2c6>
 80040ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d102      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x2cc>
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040c0:	e029      	b.n	8004116 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1a2      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x224>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d19d      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f8b2 	bl	8004244 <SPI_EndRxTxTransaction>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040f2:	e010      	b.n	8004116 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	e000      	b.n	8004116 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004126:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800412a:	4618      	mov	r0, r3
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004144:	f7fd f8d0 	bl	80012e8 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	4413      	add	r3, r2
 8004152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004154:	f7fd f8c8 	bl	80012e8 <HAL_GetTick>
 8004158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	015b      	lsls	r3, r3, #5
 8004160:	0d1b      	lsrs	r3, r3, #20
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800416a:	e054      	b.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d050      	beq.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004174:	f7fd f8b8 	bl	80012e8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	429a      	cmp	r2, r3
 8004182:	d902      	bls.n	800418a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d13d      	bne.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a2:	d111      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ac:	d004      	beq.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b6:	d107      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d0:	d10f      	bne.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e017      	b.n	8004236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3b01      	subs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	429a      	cmp	r2, r3
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	429a      	cmp	r2, r3
 8004232:	d19b      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	200002c8 	.word	0x200002c8

08004244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <SPI_EndRxTxTransaction+0x7c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <SPI_EndRxTxTransaction+0x80>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0d5b      	lsrs	r3, r3, #21
 800425c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004260:	fb02 f303 	mul.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d112      	bne.n	8004296 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff ff5a 	bl	8004134 <SPI_WaitFlagStateUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e00f      	b.n	80042b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3b01      	subs	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d0f2      	beq.n	8004296 <SPI_EndRxTxTransaction+0x52>
 80042b0:	e000      	b.n	80042b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80042b2:	bf00      	nop
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200002c8 	.word	0x200002c8
 80042c4:	165e9f81 	.word	0x165e9f81

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e031      	b.n	800433e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc fdfe 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 f9ea 	bl	80046e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b02      	cmp	r3, #2
 800435a:	d122      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d11b      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0202 	mvn.w	r2, #2
 8004372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f98e 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 800438e:	e005      	b.n	800439c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f981 	bl	8004698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f990 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d122      	bne.n	80043f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d11b      	bne.n	80043f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0204 	mvn.w	r2, #4
 80043c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f964 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 80043e2:	e005      	b.n	80043f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f957 	bl	8004698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f966 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d122      	bne.n	800444a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d11b      	bne.n	800444a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0208 	mvn.w	r2, #8
 800441a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2204      	movs	r2, #4
 8004420:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f93a 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 8004436:	e005      	b.n	8004444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f92d 	bl	8004698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f93c 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d122      	bne.n	800449e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b10      	cmp	r3, #16
 8004464:	d11b      	bne.n	800449e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f06f 0210 	mvn.w	r2, #16
 800446e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2208      	movs	r2, #8
 8004474:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f910 	bl	80046aa <HAL_TIM_IC_CaptureCallback>
 800448a:	e005      	b.n	8004498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f903 	bl	8004698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f912 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d10e      	bne.n	80044ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0201 	mvn.w	r2, #1
 80044c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8de 	bl	8004686 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d10e      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d107      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8ec 	bl	80046ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_TIM_ConfigClockSource+0x18>
 8004512:	2302      	movs	r3, #2
 8004514:	e0b3      	b.n	800467e <HAL_TIM_ConfigClockSource+0x180>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004534:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454e:	d03e      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0xd0>
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004554:	f200 8087 	bhi.w	8004666 <HAL_TIM_ConfigClockSource+0x168>
 8004558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455c:	f000 8085 	beq.w	800466a <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004564:	d87f      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
 8004566:	2b70      	cmp	r3, #112	; 0x70
 8004568:	d01a      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0xa2>
 800456a:	2b70      	cmp	r3, #112	; 0x70
 800456c:	d87b      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
 800456e:	2b60      	cmp	r3, #96	; 0x60
 8004570:	d050      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0x116>
 8004572:	2b60      	cmp	r3, #96	; 0x60
 8004574:	d877      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
 8004576:	2b50      	cmp	r3, #80	; 0x50
 8004578:	d03c      	beq.n	80045f4 <HAL_TIM_ConfigClockSource+0xf6>
 800457a:	2b50      	cmp	r3, #80	; 0x50
 800457c:	d873      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d058      	beq.n	8004634 <HAL_TIM_ConfigClockSource+0x136>
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d86f      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
 8004586:	2b30      	cmp	r3, #48	; 0x30
 8004588:	d064      	beq.n	8004654 <HAL_TIM_ConfigClockSource+0x156>
 800458a:	2b30      	cmp	r3, #48	; 0x30
 800458c:	d86b      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
 800458e:	2b20      	cmp	r3, #32
 8004590:	d060      	beq.n	8004654 <HAL_TIM_ConfigClockSource+0x156>
 8004592:	2b20      	cmp	r3, #32
 8004594:	d867      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d05c      	beq.n	8004654 <HAL_TIM_ConfigClockSource+0x156>
 800459a:	2b10      	cmp	r3, #16
 800459c:	d05a      	beq.n	8004654 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800459e:	e062      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6899      	ldr	r1, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f000 f97d 	bl	80048ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	609a      	str	r2, [r3, #8]
      break;
 80045cc:	e04e      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f000 f966 	bl	80048ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f0:	609a      	str	r2, [r3, #8]
      break;
 80045f2:	e03b      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	461a      	mov	r2, r3
 8004602:	f000 f8dd 	bl	80047c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2150      	movs	r1, #80	; 0x50
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f934 	bl	800487a <TIM_ITRx_SetConfig>
      break;
 8004612:	e02b      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	461a      	mov	r2, r3
 8004622:	f000 f8fb 	bl	800481c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2160      	movs	r1, #96	; 0x60
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f924 	bl	800487a <TIM_ITRx_SetConfig>
      break;
 8004632:	e01b      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	461a      	mov	r2, r3
 8004642:	f000 f8bd 	bl	80047c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2140      	movs	r1, #64	; 0x40
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f914 	bl	800487a <TIM_ITRx_SetConfig>
      break;
 8004652:	e00b      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 f90b 	bl	800487a <TIM_ITRx_SetConfig>
        break;
 8004664:	e002      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800466a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f6:	d00f      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a2b      	ldr	r2, [pc, #172]	; (80047a8 <TIM_Base_SetConfig+0xc8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00b      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <TIM_Base_SetConfig+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a29      	ldr	r2, [pc, #164]	; (80047b0 <TIM_Base_SetConfig+0xd0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0x38>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <TIM_Base_SetConfig+0xd4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d017      	beq.n	8004762 <TIM_Base_SetConfig+0x82>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <TIM_Base_SetConfig+0xc8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <TIM_Base_SetConfig+0x82>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <TIM_Base_SetConfig+0xcc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00f      	beq.n	8004762 <TIM_Base_SetConfig+0x82>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <TIM_Base_SetConfig+0xd0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00b      	beq.n	8004762 <TIM_Base_SetConfig+0x82>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <TIM_Base_SetConfig+0xd4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <TIM_Base_SetConfig+0x82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <TIM_Base_SetConfig+0xd8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_Base_SetConfig+0x82>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <TIM_Base_SetConfig+0xdc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40010800 	.word	0x40010800
 80047b8:	40010c00 	.word	0x40010c00
 80047bc:	40011000 	.word	0x40011000

080047c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0201 	bic.w	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 030a 	bic.w	r3, r3, #10
 80047fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f023 0210 	bic.w	r2, r3, #16
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004846:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	031b      	lsls	r3, r3, #12
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004858:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	f043 0307 	orr.w	r3, r3, #7
 800489c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b087      	sub	sp, #28
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	609a      	str	r2, [r3, #8]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004900:	2302      	movs	r3, #2
 8004902:	e046      	b.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004946:	d00e      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a10      	ldr	r2, [pc, #64]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10c      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40010800 	.word	0x40010800

080049a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e03f      	b.n	8004a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fab2 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f829 	bl	8004a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a84:	f023 030c 	bic.w	r3, r3, #12
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a55      	ldr	r2, [pc, #340]	; (8004c04 <UART_SetConfig+0x1c0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d103      	bne.n	8004aba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab2:	f7ff f89f 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	e002      	b.n	8004ac0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004aba:	f7ff f887 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8004abe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d14c      	bne.n	8004b64 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009a      	lsls	r2, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	4a49      	ldr	r2, [pc, #292]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	0119      	lsls	r1, r3, #4
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009a      	lsls	r2, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b00:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b02:	fba3 0302 	umull	r0, r3, r3, r2
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2064      	movs	r0, #100	; 0x64
 8004b0a:	fb00 f303 	mul.w	r3, r0, r3
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	3332      	adds	r3, #50	; 0x32
 8004b14:	4a3c      	ldr	r2, [pc, #240]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b22:	4419      	add	r1, r3
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009a      	lsls	r2, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b3a:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b3c:	fba3 0302 	umull	r0, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	2064      	movs	r0, #100	; 0x64
 8004b44:	fb00 f303 	mul.w	r3, r0, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	3332      	adds	r3, #50	; 0x32
 8004b4e:	4a2e      	ldr	r2, [pc, #184]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	f003 0207 	and.w	r2, r3, #7
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	440a      	add	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b62:	e04a      	b.n	8004bfa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009a      	lsls	r2, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	4a23      	ldr	r2, [pc, #140]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	0119      	lsls	r1, r3, #4
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009a      	lsls	r2, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b9c:	fba3 0302 	umull	r0, r3, r3, r2
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	2064      	movs	r0, #100	; 0x64
 8004ba4:	fb00 f303 	mul.w	r3, r0, r3
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	3332      	adds	r3, #50	; 0x32
 8004bae:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bba:	4419      	add	r1, r3
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009a      	lsls	r2, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004bd4:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	2064      	movs	r0, #100	; 0x64
 8004bdc:	fb00 f303 	mul.w	r3, r0, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	3332      	adds	r3, #50	; 0x32
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	f003 020f 	and.w	r2, r3, #15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40013800 	.word	0x40013800
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4013      	ands	r3, r2
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	f107 0014 	add.w	r0, r7, #20
 8004c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	b004      	add	sp, #16
 8004caa:	4770      	bx	lr

08004cac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b09b      	sub	sp, #108	; 0x6c
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	78db      	ldrb	r3, [r3, #3]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d81f      	bhi.n	8004d1e <USB_ActivateEndpoint+0x72>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <USB_ActivateEndpoint+0x38>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d27 	.word	0x08004d27
 8004cf0:	08004d03 	.word	0x08004d03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d00:	e012      	b.n	8004d28 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d06:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d0e:	e00b      	b.n	8004d28 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d1c:	e004      	b.n	8004d28 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d24:	e000      	b.n	8004d28 <USB_ActivateEndpoint+0x7c>
      break;
 8004d26:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	7b1b      	ldrb	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8149 	bne.w	800502c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8084 	beq.w	8004eac <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	011a      	lsls	r2, r3, #4
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	88db      	ldrh	r3, [r3, #6]
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	81fb      	strh	r3, [r7, #14]
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <USB_ActivateEndpoint+0x17c>
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	81bb      	strh	r3, [r7, #12]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	89bb      	ldrh	r3, [r7, #12]
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	78db      	ldrb	r3, [r3, #3]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d020      	beq.n	8004e72 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e46:	813b      	strh	r3, [r7, #8]
 8004e48:	893b      	ldrh	r3, [r7, #8]
 8004e4a:	f083 0320 	eor.w	r3, r3, #32
 8004e4e:	813b      	strh	r3, [r7, #8]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	893b      	ldrh	r3, [r7, #8]
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]
 8004e70:	e27f      	b.n	8005372 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	897b      	ldrh	r3, [r7, #10]
 8004e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8013      	strh	r3, [r2, #0]
 8004eaa:	e262      	b.n	8005372 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	4413      	add	r3, r2
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	011a      	lsls	r2, r3, #4
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	88db      	ldrh	r3, [r3, #6]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	4413      	add	r3, r2
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	011a      	lsls	r2, r3, #4
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	4413      	add	r3, r2
 8004efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d112      	bne.n	8004f32 <USB_ActivateEndpoint+0x286>
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	e02f      	b.n	8004f92 <USB_ActivateEndpoint+0x2e6>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b3e      	cmp	r3, #62	; 0x3e
 8004f38:	d813      	bhi.n	8004f62 <USB_ActivateEndpoint+0x2b6>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	663b      	str	r3, [r7, #96]	; 0x60
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <USB_ActivateEndpoint+0x2a8>
 8004f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f50:	3301      	adds	r3, #1
 8004f52:	663b      	str	r3, [r7, #96]	; 0x60
 8004f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	e017      	b.n	8004f92 <USB_ActivateEndpoint+0x2e6>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	663b      	str	r3, [r7, #96]	; 0x60
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <USB_ActivateEndpoint+0x2d0>
 8004f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	83fb      	strh	r3, [r7, #30]
 8004fa0:	8bfb      	ldrh	r3, [r7, #30]
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01b      	beq.n	8004fe2 <USB_ActivateEndpoint+0x336>
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc0:	83bb      	strh	r3, [r7, #28]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	441a      	add	r2, r3
 8004fcc:	8bbb      	ldrh	r3, [r7, #28]
 8004fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	837b      	strh	r3, [r7, #26]
 8004ffa:	8b7b      	ldrh	r3, [r7, #26]
 8004ffc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005000:	837b      	strh	r3, [r7, #26]
 8005002:	8b7b      	ldrh	r3, [r7, #26]
 8005004:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005008:	837b      	strh	r3, [r7, #26]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	8b7b      	ldrh	r3, [r7, #26]
 8005016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]
 800502a:	e1a2      	b.n	8005372 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	b29b      	uxth	r3, r3
 8005066:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	65bb      	str	r3, [r7, #88]	; 0x58
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005078:	4413      	add	r3, r2
 800507a:	65bb      	str	r3, [r7, #88]	; 0x58
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005084:	4413      	add	r3, r2
 8005086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508a:	657b      	str	r3, [r7, #84]	; 0x54
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	891b      	ldrh	r3, [r3, #8]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	653b      	str	r3, [r7, #80]	; 0x50
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ac:	4413      	add	r3, r2
 80050ae:	653b      	str	r3, [r7, #80]	; 0x50
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	895b      	ldrh	r3, [r3, #10]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f040 8091 	bne.w	80051fc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01b      	beq.n	800512a <USB_ActivateEndpoint+0x47e>
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	877b      	strh	r3, [r7, #58]	; 0x3a
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	441a      	add	r2, r3
 8005114:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005126:	b29b      	uxth	r3, r3
 8005128:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	873b      	strh	r3, [r7, #56]	; 0x38
 8005138:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01b      	beq.n	800517a <USB_ActivateEndpoint+0x4ce>
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	86fb      	strh	r3, [r7, #54]	; 0x36
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	441a      	add	r2, r3
 8005164:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005176:	b29b      	uxth	r3, r3
 8005178:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005192:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005198:	86bb      	strh	r3, [r7, #52]	; 0x34
 800519a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800519c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
 80051fa:	e0ba      	b.n	8005372 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800520c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01d      	beq.n	8005254 <USB_ActivateEndpoint+0x5a8>
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	441a      	add	r2, r3
 800523c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	b29b      	uxth	r3, r3
 8005252:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005264:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01d      	beq.n	80052ac <USB_ActivateEndpoint+0x600>
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	441a      	add	r2, r3
 8005294:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	78db      	ldrb	r3, [r3, #3]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d024      	beq.n	80052fe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052d2:	f083 0320 	eor.w	r3, r3, #32
 80052d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	441a      	add	r2, r3
 80052e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	8013      	strh	r3, [r2, #0]
 80052fc:	e01d      	b.n	800533a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005314:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005336:	b29b      	uxth	r3, r3
 8005338:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005376:	4618      	mov	r0, r3
 8005378:	376c      	adds	r7, #108	; 0x6c
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005380:	b480      	push	{r7}
 8005382:	b08d      	sub	sp, #52	; 0x34
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	7b1b      	ldrb	r3, [r3, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 808e 	bne.w	80054b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d044      	beq.n	8005426 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	81bb      	strh	r3, [r7, #12]
 80053aa:	89bb      	ldrh	r3, [r7, #12]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01b      	beq.n	80053ec <USB_DeactivateEndpoint+0x6c>
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	817b      	strh	r3, [r7, #10]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	897b      	ldrh	r3, [r7, #10]
 80053d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005402:	813b      	strh	r3, [r7, #8]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	893b      	ldrh	r3, [r7, #8]
 8005410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005420:	b29b      	uxth	r3, r3
 8005422:	8013      	strh	r3, [r2, #0]
 8005424:	e192      	b.n	800574c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	827b      	strh	r3, [r7, #18]
 8005434:	8a7b      	ldrh	r3, [r7, #18]
 8005436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01b      	beq.n	8005476 <USB_DeactivateEndpoint+0xf6>
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	823b      	strh	r3, [r7, #16]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	8a3b      	ldrh	r3, [r7, #16]
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	81fb      	strh	r3, [r7, #14]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	89fb      	ldrh	r3, [r7, #14]
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]
 80054ae:	e14d      	b.n	800574c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f040 80a5 	bne.w	8005604 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	843b      	strh	r3, [r7, #32]
 80054c8:	8c3b      	ldrh	r3, [r7, #32]
 80054ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01b      	beq.n	800550a <USB_DeactivateEndpoint+0x18a>
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e8:	83fb      	strh	r3, [r7, #30]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	8bfb      	ldrh	r3, [r7, #30]
 80054f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005506:	b29b      	uxth	r3, r3
 8005508:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	83bb      	strh	r3, [r7, #28]
 8005518:	8bbb      	ldrh	r3, [r7, #28]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01b      	beq.n	800555a <USB_DeactivateEndpoint+0x1da>
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	837b      	strh	r3, [r7, #26]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	441a      	add	r2, r3
 8005544:	8b7b      	ldrh	r3, [r7, #26]
 8005546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005556:	b29b      	uxth	r3, r3
 8005558:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	833b      	strh	r3, [r7, #24]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	8b3b      	ldrh	r3, [r7, #24]
 800557e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800558e:	b29b      	uxth	r3, r3
 8005590:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	82fb      	strh	r3, [r7, #22]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	8afb      	ldrh	r3, [r7, #22]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	82bb      	strh	r3, [r7, #20]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	8abb      	ldrh	r3, [r7, #20]
 80055ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8013      	strh	r3, [r2, #0]
 8005602:	e0a3      	b.n	800574c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005612:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01b      	beq.n	8005654 <USB_DeactivateEndpoint+0x2d4>
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	441a      	add	r2, r3
 800563e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005650:	b29b      	uxth	r3, r3
 8005652:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005662:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01b      	beq.n	80056a4 <USB_DeactivateEndpoint+0x324>
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	853b      	strh	r3, [r7, #40]	; 0x28
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	441a      	add	r2, r3
 800568e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	b29b      	uxth	r3, r3
 80056da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005710:	b29b      	uxth	r3, r3
 8005712:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	847b      	strh	r3, [r7, #34]	; 0x22
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3734      	adds	r7, #52	; 0x34
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b0cc      	sub	sp, #304	; 0x130
 800575c:	af00      	add	r7, sp, #0
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005766:	6018      	str	r0, [r3, #0]
 8005768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005770:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	2b01      	cmp	r3, #1
 8005780:	f041 817d 	bne.w	8006a7e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	429a      	cmp	r2, r3
 800579e:	d908      	bls.n	80057b2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80057a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80057b0:	e007      	b.n	80057c2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80057b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	7b1b      	ldrb	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d152      	bne.n	8005878 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6959      	ldr	r1, [r3, #20]
 80057de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	88da      	ldrh	r2, [r3, #6]
 80057ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057f8:	6800      	ldr	r0, [r0, #0]
 80057fa:	f001 ff0e 	bl	800761a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005802:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005806:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800580a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005820:	b29b      	uxth	r3, r3
 8005822:	4619      	mov	r1, r3
 8005824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005828:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800582c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005830:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	440a      	add	r2, r1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	011a      	lsls	r2, r3, #4
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4413      	add	r3, r2
 8005854:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005866:	b29a      	uxth	r2, r3
 8005868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	f001 b8b5 	b.w	80069e2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	78db      	ldrb	r3, [r3, #3]
 8005884:	2b02      	cmp	r3, #2
 8005886:	f040 84c6 	bne.w	8006216 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a1a      	ldr	r2, [r3, #32]
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	f240 8443 	bls.w	800612e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80058a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80058d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	441a      	add	r2, r3
 80058ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80058fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	1ad2      	subs	r2, r2, r3
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 823e 	beq.w	8005dc6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005952:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005956:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 809a 	bne.w	8005aa4 <USB_EPStartXfer+0x34c>
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800597c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005992:	b29b      	uxth	r3, r3
 8005994:	4619      	mov	r1, r3
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059a2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	440a      	add	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	011a      	lsls	r2, r3, #4
 80059ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d122      	bne.n	8005a22 <USB_EPStartXfer+0x2ca>
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	e079      	b.n	8005b16 <USB_EPStartXfer+0x3be>
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	2b3e      	cmp	r3, #62	; 0x3e
 8005a28:	d81b      	bhi.n	8005a62 <USB_EPStartXfer+0x30a>
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <USB_EPStartXfer+0x2f2>
 8005a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a44:	3301      	adds	r3, #1
 8005a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e059      	b.n	8005b16 <USB_EPStartXfer+0x3be>
 8005a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <USB_EPStartXfer+0x32a>
 8005a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e038      	b.n	8005b16 <USB_EPStartXfer+0x3be>
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d130      	bne.n	8005b16 <USB_EPStartXfer+0x3be>
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ace:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ad2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	440a      	add	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	011a      	lsls	r2, r3, #4
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	895b      	ldrh	r3, [r3, #10]
 8005b22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6959      	ldr	r1, [r3, #20]
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b3c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b40:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b44:	6800      	ldr	r0, [r0, #0]
 8005b46:	f001 fd68 	bl	800761a <USB_WritePMA>
            ep->xfer_buff += len;
 8005b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	441a      	add	r2, r3
 8005b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6a1a      	ldr	r2, [r3, #32]
 8005b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d90f      	bls.n	8005ba4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a1a      	ldr	r2, [r3, #32]
 8005b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b94:	1ad2      	subs	r2, r2, r3
 8005b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	621a      	str	r2, [r3, #32]
 8005ba2:	e00e      	b.n	8005bc2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 809a 	bne.w	8005d08 <USB_EPStartXfer+0x5b0>
 8005bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005bdc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005be0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c06:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011a      	lsls	r2, r3, #4
 8005c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d122      	bne.n	8005c86 <USB_EPStartXfer+0x52e>
 8005c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e083      	b.n	8005d8e <USB_EPStartXfer+0x636>
 8005c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8c:	d81b      	bhi.n	8005cc6 <USB_EPStartXfer+0x56e>
 8005c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <USB_EPStartXfer+0x556>
 8005ca4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	e063      	b.n	8005d8e <USB_EPStartXfer+0x636>
 8005cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <USB_EPStartXfer+0x58e>
 8005cdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ce6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	e042      	b.n	8005d8e <USB_EPStartXfer+0x636>
 8005d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d13a      	bne.n	8005d8e <USB_EPStartXfer+0x636>
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d24:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d4a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	440a      	add	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	011a      	lsls	r2, r3, #4
 8005d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	891b      	ldrh	r3, [r3, #8]
 8005d9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6959      	ldr	r1, [r3, #20]
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005db4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005db8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f001 fc2c 	bl	800761a <USB_WritePMA>
 8005dc2:	f000 be0e 	b.w	80069e2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d16d      	bne.n	8005eb2 <USB_EPStartXfer+0x75a>
 8005dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df6:	4413      	add	r3, r2
 8005df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	011a      	lsls	r2, r3, #4
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
 8005e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d112      	bne.n	8005e40 <USB_EPStartXfer+0x6e8>
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	e063      	b.n	8005f08 <USB_EPStartXfer+0x7b0>
 8005e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e44:	2b3e      	cmp	r3, #62	; 0x3e
 8005e46:	d817      	bhi.n	8005e78 <USB_EPStartXfer+0x720>
 8005e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d004      	beq.n	8005e68 <USB_EPStartXfer+0x710>
 8005e5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e62:	3301      	adds	r3, #1
 8005e64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	029b      	lsls	r3, r3, #10
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	e047      	b.n	8005f08 <USB_EPStartXfer+0x7b0>
 8005e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <USB_EPStartXfer+0x740>
 8005e8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e92:	3b01      	subs	r3, #1
 8005e94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	e02a      	b.n	8005f08 <USB_EPStartXfer+0x7b0>
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d122      	bne.n	8005f08 <USB_EPStartXfer+0x7b0>
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	653b      	str	r3, [r7, #80]	; 0x50
 8005ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee2:	4413      	add	r3, r2
 8005ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	011a      	lsls	r2, r3, #4
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	891b      	ldrh	r3, [r3, #8]
 8005f14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6959      	ldr	r1, [r3, #20]
 8005f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f2e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f32:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f36:	6800      	ldr	r0, [r0, #0]
 8005f38:	f001 fb6f 	bl	800761a <USB_WritePMA>
            ep->xfer_buff += len;
 8005f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4c:	441a      	add	r2, r3
 8005f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a1a      	ldr	r2, [r3, #32]
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d90f      	bls.n	8005f96 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	621a      	str	r2, [r3, #32]
 8005f94:	e00e      	b.n	8005fb4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d16d      	bne.n	80060ac <USB_EPStartXfer+0x954>
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	4413      	add	r3, r2
 8005ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	011a      	lsls	r2, r3, #4
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	4413      	add	r3, r2
 8006006:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
 800600c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d112      	bne.n	800603a <USB_EPStartXfer+0x8e2>
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800601e:	b29a      	uxth	r2, r3
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e05d      	b.n	80060f6 <USB_EPStartXfer+0x99e>
 800603a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603e:	2b3e      	cmp	r3, #62	; 0x3e
 8006040:	d817      	bhi.n	8006072 <USB_EPStartXfer+0x91a>
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800604c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <USB_EPStartXfer+0x90a>
 8006058:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800605c:	3301      	adds	r3, #1
 800605e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006062:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006066:	b29b      	uxth	r3, r3
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	b29a      	uxth	r2, r3
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e041      	b.n	80060f6 <USB_EPStartXfer+0x99e>
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800607c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <USB_EPStartXfer+0x93a>
 8006088:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800608c:	3b01      	subs	r3, #1
 800608e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006096:	b29b      	uxth	r3, r3
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e024      	b.n	80060f6 <USB_EPStartXfer+0x99e>
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11c      	bne.n	80060f6 <USB_EPStartXfer+0x99e>
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d0:	4413      	add	r3, r2
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	011a      	lsls	r2, r3, #4
 80060e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	895b      	ldrh	r3, [r3, #10]
 8006102:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6959      	ldr	r1, [r3, #20]
 8006112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006116:	b29b      	uxth	r3, r3
 8006118:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800611c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006120:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006124:	6800      	ldr	r0, [r0, #0]
 8006126:	f001 fa78 	bl	800761a <USB_WritePMA>
 800612a:	f000 bc5a 	b.w	80069e2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800612e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800613e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006164:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800619a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ba:	4413      	add	r3, r2
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	011a      	lsls	r2, r3, #4
 80061cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80061d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	891b      	ldrh	r3, [r3, #8]
 80061ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6959      	ldr	r1, [r3, #20]
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	b29b      	uxth	r3, r3
 8006202:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006206:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800620a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800620e:	6800      	ldr	r0, [r0, #0]
 8006210:	f001 fa03 	bl	800761a <USB_WritePMA>
 8006214:	e3e5      	b.n	80069e2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800625e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006266:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6a1a      	ldr	r2, [r3, #32]
 800627e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006282:	1ad2      	subs	r2, r2, r3
 8006284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 81bc 	beq.w	8006630 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d16d      	bne.n	80063b2 <USB_EPStartXfer+0xc5a>
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80062e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f6:	4413      	add	r3, r2
 80062f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80062fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	011a      	lsls	r2, r3, #4
 8006308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630a:	4413      	add	r3, r2
 800630c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006310:	677b      	str	r3, [r7, #116]	; 0x74
 8006312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d112      	bne.n	8006340 <USB_EPStartXfer+0xbe8>
 800631a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006324:	b29a      	uxth	r2, r3
 8006326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006338:	b29a      	uxth	r2, r3
 800633a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e060      	b.n	8006402 <USB_EPStartXfer+0xcaa>
 8006340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006344:	2b3e      	cmp	r3, #62	; 0x3e
 8006346:	d817      	bhi.n	8006378 <USB_EPStartXfer+0xc20>
 8006348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <USB_EPStartXfer+0xc10>
 800635e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006362:	3301      	adds	r3, #1
 8006364:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006368:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800636c:	b29b      	uxth	r3, r3
 800636e:	029b      	lsls	r3, r3, #10
 8006370:	b29a      	uxth	r2, r3
 8006372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e044      	b.n	8006402 <USB_EPStartXfer+0xcaa>
 8006378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <USB_EPStartXfer+0xc40>
 800638e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006392:	3b01      	subs	r3, #1
 8006394:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006398:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e027      	b.n	8006402 <USB_EPStartXfer+0xcaa>
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d11f      	bne.n	8006402 <USB_EPStartXfer+0xcaa>
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063d8:	4413      	add	r3, r2
 80063da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	011a      	lsls	r2, r3, #4
 80063ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063f0:	4413      	add	r3, r2
 80063f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006400:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	895b      	ldrh	r3, [r3, #10]
 800640e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6959      	ldr	r1, [r3, #20]
 800641e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006422:	b29b      	uxth	r3, r3
 8006424:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006428:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800642c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006430:	6800      	ldr	r0, [r0, #0]
 8006432:	f001 f8f2 	bl	800761a <USB_WritePMA>
          ep->xfer_buff += len;
 8006436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006446:	441a      	add	r2, r3
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	429a      	cmp	r2, r3
 800646e:	d90f      	bls.n	8006490 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6a1a      	ldr	r2, [r3, #32]
 800647c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006480:	1ad2      	subs	r2, r2, r3
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	621a      	str	r2, [r3, #32]
 800648e:	e00e      	b.n	80064ae <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8295 	beq.w	80069e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d16d      	bne.n	80065a4 <USB_EPStartXfer+0xe4c>
 80064c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064e8:	4413      	add	r3, r2
 80064ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	011a      	lsls	r2, r3, #4
 80064fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064fc:	4413      	add	r3, r2
 80064fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006502:	667b      	str	r3, [r7, #100]	; 0x64
 8006504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d112      	bne.n	8006532 <USB_EPStartXfer+0xdda>
 800650c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006516:	b29a      	uxth	r2, r3
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e063      	b.n	80065fa <USB_EPStartXfer+0xea2>
 8006532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006536:	2b3e      	cmp	r3, #62	; 0x3e
 8006538:	d817      	bhi.n	800656a <USB_EPStartXfer+0xe12>
 800653a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <USB_EPStartXfer+0xe02>
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006554:	3301      	adds	r3, #1
 8006556:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655e:	b29b      	uxth	r3, r3
 8006560:	029b      	lsls	r3, r3, #10
 8006562:	b29a      	uxth	r2, r3
 8006564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e047      	b.n	80065fa <USB_EPStartXfer+0xea2>
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <USB_EPStartXfer+0xe32>
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006584:	3b01      	subs	r3, #1
 8006586:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659c:	b29a      	uxth	r2, r3
 800659e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	e02a      	b.n	80065fa <USB_EPStartXfer+0xea2>
 80065a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d122      	bne.n	80065fa <USB_EPStartXfer+0xea2>
 80065b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	673b      	str	r3, [r7, #112]	; 0x70
 80065c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d4:	4413      	add	r3, r2
 80065d6:	673b      	str	r3, [r7, #112]	; 0x70
 80065d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	011a      	lsls	r2, r3, #4
 80065e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065e8:	4413      	add	r3, r2
 80065ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	891b      	ldrh	r3, [r3, #8]
 8006606:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800660a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6959      	ldr	r1, [r3, #20]
 8006616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661a:	b29b      	uxth	r3, r3
 800661c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006620:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006624:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006628:	6800      	ldr	r0, [r0, #0]
 800662a:	f000 fff6 	bl	800761a <USB_WritePMA>
 800662e:	e1d8      	b.n	80069e2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d178      	bne.n	8006732 <USB_EPStartXfer+0xfda>
 8006640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006644:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665c:	b29b      	uxth	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006664:	4413      	add	r3, r2
 8006666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	011a      	lsls	r2, r3, #4
 8006678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800667c:	4413      	add	r3, r2
 800667e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006682:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d116      	bne.n	80066bc <USB_EPStartXfer+0xf64>
 800668e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e06b      	b.n	8006794 <USB_EPStartXfer+0x103c>
 80066bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c0:	2b3e      	cmp	r3, #62	; 0x3e
 80066c2:	d818      	bhi.n	80066f6 <USB_EPStartXfer+0xf9e>
 80066c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <USB_EPStartXfer+0xf8c>
 80066da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066de:	3301      	adds	r3, #1
 80066e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	029b      	lsls	r3, r3, #10
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	e04e      	b.n	8006794 <USB_EPStartXfer+0x103c>
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <USB_EPStartXfer+0xfbe>
 800670c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006710:	3b01      	subs	r3, #1
 8006712:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800671a:	b29b      	uxth	r3, r3
 800671c:	029b      	lsls	r3, r3, #10
 800671e:	b29b      	uxth	r3, r3
 8006720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006728:	b29a      	uxth	r2, r3
 800672a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e030      	b.n	8006794 <USB_EPStartXfer+0x103c>
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d128      	bne.n	8006794 <USB_EPStartXfer+0x103c>
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675e:	b29b      	uxth	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006766:	4413      	add	r3, r2
 8006768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800676c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	011a      	lsls	r2, r3, #4
 800677a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800677e:	4413      	add	r3, r2
 8006780:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006792:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	891b      	ldrh	r3, [r3, #8]
 80067a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6959      	ldr	r1, [r3, #20]
 80067b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	f000 ff29 	bl	800761a <USB_WritePMA>
          ep->xfer_buff += len;
 80067c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d8:	441a      	add	r2, r3
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80067e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d90f      	bls.n	8006822 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006812:	1ad2      	subs	r2, r2, r3
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	621a      	str	r2, [r3, #32]
 8006820:	e00e      	b.n	8006840 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2200      	movs	r2, #0
 800683e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80cc 	beq.w	80069e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800684a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d178      	bne.n	800695a <USB_EPStartXfer+0x1202>
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006884:	b29b      	uxth	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800688c:	4413      	add	r3, r2
 800688e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	011a      	lsls	r2, r3, #4
 80068a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068a4:	4413      	add	r3, r2
 80068a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d116      	bne.n	80068e4 <USB_EPStartXfer+0x118c>
 80068b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	e064      	b.n	80069ae <USB_EPStartXfer+0x1256>
 80068e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e8:	2b3e      	cmp	r3, #62	; 0x3e
 80068ea:	d818      	bhi.n	800691e <USB_EPStartXfer+0x11c6>
 80068ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80068f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <USB_EPStartXfer+0x11b4>
 8006902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006906:	3301      	adds	r3, #1
 8006908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800690c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006910:	b29b      	uxth	r3, r3
 8006912:	029b      	lsls	r3, r3, #10
 8006914:	b29a      	uxth	r2, r3
 8006916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e047      	b.n	80069ae <USB_EPStartXfer+0x1256>
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <USB_EPStartXfer+0x11e6>
 8006934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006938:	3b01      	subs	r3, #1
 800693a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800693e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006942:	b29b      	uxth	r3, r3
 8006944:	029b      	lsls	r3, r3, #10
 8006946:	b29b      	uxth	r3, r3
 8006948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	e029      	b.n	80069ae <USB_EPStartXfer+0x1256>
 800695a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d121      	bne.n	80069ae <USB_EPStartXfer+0x1256>
 800696a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006980:	4413      	add	r3, r2
 8006982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	011a      	lsls	r2, r3, #4
 8006994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006998:	4413      	add	r3, r2
 800699a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800699e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	895b      	ldrh	r3, [r3, #10]
 80069ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6959      	ldr	r1, [r3, #20]
 80069ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f000 fe1c 	bl	800761a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a04:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a10:	8013      	strh	r3, [r2, #0]
 8006a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a16:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a1e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a22:	8812      	ldrh	r2, [r2, #0]
 8006a24:	f082 0210 	eor.w	r2, r2, #16
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a36:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a3a:	8812      	ldrh	r2, [r2, #0]
 8006a3c:	f082 0220 	eor.w	r2, r2, #32
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
 8006a7a:	f000 bc9f 	b.w	80073bc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	7b1b      	ldrb	r3, [r3, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 80ae 	bne.w	8006bec <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d917      	bls.n	8006adc <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006acc:	1ad2      	subs	r2, r2, r3
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	619a      	str	r2, [r3, #24]
 8006ada:	e00e      	b.n	8006afa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2200      	movs	r2, #0
 8006af8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b1e:	4413      	add	r3, r2
 8006b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	011a      	lsls	r2, r3, #4
 8006b32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b36:	4413      	add	r3, r2
 8006b38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d116      	bne.n	8006b76 <USB_EPStartXfer+0x141e>
 8006b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e3e8      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
 8006b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b7c:	d818      	bhi.n	8006bb0 <USB_EPStartXfer+0x1458>
 8006b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <USB_EPStartXfer+0x1446>
 8006b94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b98:	3301      	adds	r3, #1
 8006b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	029b      	lsls	r3, r3, #10
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bac:	801a      	strh	r2, [r3, #0]
 8006bae:	e3cb      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <USB_EPStartXfer+0x1478>
 8006bc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e3ad      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	78db      	ldrb	r3, [r3, #3]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	f040 8200 	bne.w	8006ffe <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 8091 	bne.w	8006d32 <USB_EPStartXfer+0x15da>
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c34:	4413      	add	r3, r2
 8006c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	011a      	lsls	r2, r3, #4
 8006c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d116      	bne.n	8006c94 <USB_EPStartXfer+0x153c>
 8006c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e083      	b.n	8006d9c <USB_EPStartXfer+0x1644>
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca2:	d820      	bhi.n	8006ce6 <USB_EPStartXfer+0x158e>
 8006ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <USB_EPStartXfer+0x157c>
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	3301      	adds	r3, #1
 8006cd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	029b      	lsls	r3, r3, #10
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	e05a      	b.n	8006d9c <USB_EPStartXfer+0x1644>
 8006ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <USB_EPStartXfer+0x15be>
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	3b01      	subs	r3, #1
 8006d12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	029b      	lsls	r3, r3, #10
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e034      	b.n	8006d9c <USB_EPStartXfer+0x1644>
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d12c      	bne.n	8006d9c <USB_EPStartXfer+0x1644>
 8006d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d66:	4413      	add	r3, r2
 8006d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	011a      	lsls	r2, r3, #4
 8006d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d7e:	4413      	add	r3, r2
 8006d80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f040 8091 	bne.w	8006ede <USB_EPStartXfer+0x1786>
 8006dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de0:	4413      	add	r3, r2
 8006de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	011a      	lsls	r2, r3, #4
 8006df4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d116      	bne.n	8006e40 <USB_EPStartXfer+0x16e8>
 8006e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	e07c      	b.n	8006f3a <USB_EPStartXfer+0x17e2>
 8006e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e4e:	d820      	bhi.n	8006e92 <USB_EPStartXfer+0x173a>
 8006e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <USB_EPStartXfer+0x1728>
 8006e76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	e053      	b.n	8006f3a <USB_EPStartXfer+0x17e2>
 8006e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <USB_EPStartXfer+0x176a>
 8006eb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ec2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	029b      	lsls	r3, r3, #10
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e02d      	b.n	8006f3a <USB_EPStartXfer+0x17e2>
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d125      	bne.n	8006f3a <USB_EPStartXfer+0x17e2>
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f04:	4413      	add	r3, r2
 8006f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	011a      	lsls	r2, r3, #4
 8006f18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f38:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 81fe 	beq.w	8007348 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f6c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <USB_EPStartXfer+0x182c>
 8006f78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10d      	bne.n	8006fa0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f84:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 81db 	bne.w	8007348 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f92:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 81d4 	bne.w	8007348 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
 8006ffc:	e1a4      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	78db      	ldrb	r3, [r3, #3]
 800700a:	2b01      	cmp	r3, #1
 800700c:	f040 819a 	bne.w	8007344 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699a      	ldr	r2, [r3, #24]
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	429a      	cmp	r2, r3
 800702a:	d917      	bls.n	800705c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800703c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704c:	1ad2      	subs	r2, r2, r3
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	619a      	str	r2, [r3, #24]
 800705a:	e00e      	b.n	800707a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800705c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d178      	bne.n	800717c <USB_EPStartXfer+0x1a24>
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070ae:	4413      	add	r3, r2
 80070b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	011a      	lsls	r2, r3, #4
 80070c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070c6:	4413      	add	r3, r2
 80070c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d116      	bne.n	8007106 <USB_EPStartXfer+0x19ae>
 80070d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e06b      	b.n	80071de <USB_EPStartXfer+0x1a86>
 8007106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710a:	2b3e      	cmp	r3, #62	; 0x3e
 800710c:	d818      	bhi.n	8007140 <USB_EPStartXfer+0x19e8>
 800710e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <USB_EPStartXfer+0x19d6>
 8007124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007128:	3301      	adds	r3, #1
 800712a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800712e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007132:	b29b      	uxth	r3, r3
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	b29a      	uxth	r2, r3
 8007138:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	e04e      	b.n	80071de <USB_EPStartXfer+0x1a86>
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800714a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <USB_EPStartXfer+0x1a08>
 8007156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715a:	3b01      	subs	r3, #1
 800715c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007164:	b29b      	uxth	r3, r3
 8007166:	029b      	lsls	r3, r3, #10
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	e030      	b.n	80071de <USB_EPStartXfer+0x1a86>
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d128      	bne.n	80071de <USB_EPStartXfer+0x1a86>
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b0:	4413      	add	r3, r2
 80071b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	011a      	lsls	r2, r3, #4
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	4413      	add	r3, r2
 80071ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d178      	bne.n	80072ee <USB_EPStartXfer+0x1b96>
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007220:	4413      	add	r3, r2
 8007222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	011a      	lsls	r2, r3, #4
 8007234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007238:	4413      	add	r3, r2
 800723a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800723e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d116      	bne.n	8007278 <USB_EPStartXfer+0x1b20>
 800724a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007256:	b29a      	uxth	r2, r3
 8007258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800725c:	801a      	strh	r2, [r3, #0]
 800725e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726e:	b29a      	uxth	r2, r3
 8007270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	e067      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
 8007278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727c:	2b3e      	cmp	r3, #62	; 0x3e
 800727e:	d818      	bhi.n	80072b2 <USB_EPStartXfer+0x1b5a>
 8007280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800728a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <USB_EPStartXfer+0x1b48>
 8007296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800729a:	3301      	adds	r3, #1
 800729c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	029b      	lsls	r3, r3, #10
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	e04a      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
 80072b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <USB_EPStartXfer+0x1b7a>
 80072c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072cc:	3b01      	subs	r3, #1
 80072ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	029b      	lsls	r3, r3, #10
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e02c      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d124      	bne.n	8007348 <USB_EPStartXfer+0x1bf0>
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730c:	b29b      	uxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007314:	4413      	add	r3, r2
 8007316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800731a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	011a      	lsls	r2, r3, #4
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732c:	4413      	add	r3, r2
 800732e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e001      	b.n	8007348 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e03a      	b.n	80073be <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007372:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007376:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800737a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800737e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007382:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007386:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800738a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	441a      	add	r2, r3
 80073a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80073a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f0:	81bb      	strh	r3, [r7, #12]
 80073f2:	89bb      	ldrh	r3, [r7, #12]
 80073f4:	f083 0310 	eor.w	r3, r3, #16
 80073f8:	81bb      	strh	r3, [r7, #12]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	441a      	add	r2, r3
 8007404:	89bb      	ldrh	r3, [r7, #12]
 8007406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	b29b      	uxth	r3, r3
 8007418:	8013      	strh	r3, [r2, #0]
 800741a:	e01f      	b.n	800745c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	81fb      	strh	r3, [r7, #14]
 8007434:	89fb      	ldrh	r3, [r7, #14]
 8007436:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800743a:	81fb      	strh	r3, [r7, #14]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	89fb      	ldrh	r3, [r7, #14]
 8007448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007458:	b29b      	uxth	r3, r3
 800745a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	7b1b      	ldrb	r3, [r3, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 809d 	bne.w	80075b6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d04c      	beq.n	800751e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	823b      	strh	r3, [r7, #16]
 8007492:	8a3b      	ldrh	r3, [r7, #16]
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01b      	beq.n	80074d4 <USB_EPClearStall+0x6c>
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	81fb      	strh	r3, [r7, #14]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	89fb      	ldrh	r3, [r7, #14]
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d06c      	beq.n	80075b6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f2:	81bb      	strh	r3, [r7, #12]
 80074f4:	89bb      	ldrh	r3, [r7, #12]
 80074f6:	f083 0320 	eor.w	r3, r3, #32
 80074fa:	81bb      	strh	r3, [r7, #12]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	441a      	add	r2, r3
 8007506:	89bb      	ldrh	r3, [r7, #12]
 8007508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007518:	b29b      	uxth	r3, r3
 800751a:	8013      	strh	r3, [r2, #0]
 800751c:	e04b      	b.n	80075b6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	82fb      	strh	r3, [r7, #22]
 800752c:	8afb      	ldrh	r3, [r7, #22]
 800752e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01b      	beq.n	800756e <USB_EPClearStall+0x106>
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	82bb      	strh	r3, [r7, #20]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	441a      	add	r2, r3
 8007558:	8abb      	ldrh	r3, [r7, #20]
 800755a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756a:	b29b      	uxth	r3, r3
 800756c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007584:	827b      	strh	r3, [r7, #18]
 8007586:	8a7b      	ldrh	r3, [r7, #18]
 8007588:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800758c:	827b      	strh	r3, [r7, #18]
 800758e:	8a7b      	ldrh	r3, [r7, #18]
 8007590:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007594:	827b      	strh	r3, [r7, #18]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	441a      	add	r2, r3
 80075a0:	8a7b      	ldrh	r3, [r7, #18]
 80075a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr

080075c2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2280      	movs	r2, #128	; 0x80
 80075d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr

080075fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800760a:	b29b      	uxth	r3, r3
 800760c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800761a:	b480      	push	{r7}
 800761c:	b08d      	sub	sp, #52	; 0x34
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	4611      	mov	r1, r2
 8007626:	461a      	mov	r2, r3
 8007628:	460b      	mov	r3, r1
 800762a:	80fb      	strh	r3, [r7, #6]
 800762c:	4613      	mov	r3, r2
 800762e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007630:	88bb      	ldrh	r3, [r7, #4]
 8007632:	3301      	adds	r3, #1
 8007634:	085b      	lsrs	r3, r3, #1
 8007636:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	005a      	lsls	r2, r3, #1
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800764c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007652:	e01e      	b.n	8007692 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	3301      	adds	r3, #1
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	b29b      	uxth	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	b29a      	uxth	r2, r3
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	3302      	adds	r3, #2
 800767e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	3302      	adds	r3, #2
 8007684:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	3301      	adds	r3, #1
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	3b01      	subs	r3, #1
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1dd      	bne.n	8007654 <USB_WritePMA+0x3a>
  }
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	3734      	adds	r7, #52	; 0x34
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b08b      	sub	sp, #44	; 0x2c
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4611      	mov	r1, r2
 80076b0:	461a      	mov	r2, r3
 80076b2:	460b      	mov	r3, r1
 80076b4:	80fb      	strh	r3, [r7, #6]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076ba:	88bb      	ldrh	r3, [r7, #4]
 80076bc:	085b      	lsrs	r3, r3, #1
 80076be:	b29b      	uxth	r3, r3
 80076c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	005a      	lsls	r2, r3, #1
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076d6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
 80076dc:	e01b      	b.n	8007716 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	3302      	adds	r3, #2
 80076ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	3301      	adds	r3, #1
 80076f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	3302      	adds	r3, #2
 800770e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	3b01      	subs	r3, #1
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e0      	bne.n	80076de <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800771c:	88bb      	ldrh	r3, [r7, #4]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	701a      	strb	r2, [r3, #0]
  }
}
 8007738:	bf00      	nop
 800773a:	372c      	adds	r7, #44	; 0x2c
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr

08007742 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	7c1b      	ldrb	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d115      	bne.n	8007786 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800775a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800775e:	2202      	movs	r2, #2
 8007760:	2181      	movs	r1, #129	; 0x81
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f002 ffbb 	bl	800a6de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800776e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007772:	2202      	movs	r2, #2
 8007774:	2101      	movs	r1, #1
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f002 ffb1 	bl	800a6de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007784:	e012      	b.n	80077ac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	2202      	movs	r2, #2
 800778a:	2181      	movs	r1, #129	; 0x81
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f002 ffa6 	bl	800a6de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	2202      	movs	r2, #2
 800779c:	2101      	movs	r1, #1
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f002 ff9d 	bl	800a6de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80077ac:	2308      	movs	r3, #8
 80077ae:	2203      	movs	r2, #3
 80077b0:	2182      	movs	r1, #130	; 0x82
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f002 ff93 	bl	800a6de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80077be:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077c2:	f003 f8b3 	bl	800a92c <USBD_static_malloc>
 80077c6:	4602      	mov	r2, r0
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
 80077dc:	e026      	b.n	800782c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077e4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	7c1b      	ldrb	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800780e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007812:	2101      	movs	r1, #1
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f003 f853 	bl	800a8c0 <USBD_LL_PrepareReceive>
 800781a:	e007      	b.n	800782c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007822:	2340      	movs	r3, #64	; 0x40
 8007824:	2101      	movs	r1, #1
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f003 f84a 	bl	800a8c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007846:	2181      	movs	r1, #129	; 0x81
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f002 ff6e 	bl	800a72a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007854:	2101      	movs	r1, #1
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f002 ff67 	bl	800a72a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007864:	2182      	movs	r1, #130	; 0x82
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 ff5f 	bl	800a72a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00e      	beq.n	800789a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800788c:	4618      	mov	r0, r3
 800788e:	f003 f859 	bl	800a944 <USBD_static_free>
    pdev->pClassData = NULL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d039      	beq.n	8007942 <USBD_CDC_Setup+0x9e>
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d17f      	bne.n	80079d2 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88db      	ldrh	r3, [r3, #6]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d029      	beq.n	800792e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b25b      	sxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	da11      	bge.n	8007908 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80078f0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	88d2      	ldrh	r2, [r2, #6]
 80078f6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80078f8:	6939      	ldr	r1, [r7, #16]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	461a      	mov	r2, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 f994 	bl	8008c2e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007906:	e06b      	b.n	80079e0 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	785a      	ldrb	r2, [r3, #1]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	88db      	ldrh	r3, [r3, #6]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800791e:	6939      	ldr	r1, [r7, #16]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	88db      	ldrh	r3, [r3, #6]
 8007924:	461a      	mov	r2, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f9af 	bl	8008c8a <USBD_CtlPrepareRx>
    break;
 800792c:	e058      	b.n	80079e0 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	7850      	ldrb	r0, [r2, #1]
 800793a:	2200      	movs	r2, #0
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	4798      	blx	r3
    break;
 8007940:	e04e      	b.n	80079e0 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b0b      	cmp	r3, #11
 8007948:	d02e      	beq.n	80079a8 <USBD_CDC_Setup+0x104>
 800794a:	2b0b      	cmp	r3, #11
 800794c:	dc38      	bgt.n	80079c0 <USBD_CDC_Setup+0x11c>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <USBD_CDC_Setup+0xb4>
 8007952:	2b0a      	cmp	r3, #10
 8007954:	d014      	beq.n	8007980 <USBD_CDC_Setup+0xdc>
 8007956:	e033      	b.n	80079c0 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800795e:	2b03      	cmp	r3, #3
 8007960:	d107      	bne.n	8007972 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007962:	f107 030c 	add.w	r3, r7, #12
 8007966:	2202      	movs	r2, #2
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 f95f 	bl	8008c2e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007970:	e02e      	b.n	80079d0 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f8f0 	bl	8008b5a <USBD_CtlError>
			  ret = USBD_FAIL;
 800797a:	2302      	movs	r3, #2
 800797c:	75fb      	strb	r3, [r7, #23]
      break;
 800797e:	e027      	b.n	80079d0 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007986:	2b03      	cmp	r3, #3
 8007988:	d107      	bne.n	800799a <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800798a:	f107 030f 	add.w	r3, r7, #15
 800798e:	2201      	movs	r2, #1
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 f94b 	bl	8008c2e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007998:	e01a      	b.n	80079d0 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f8dc 	bl	8008b5a <USBD_CtlError>
			  ret = USBD_FAIL;
 80079a2:	2302      	movs	r3, #2
 80079a4:	75fb      	strb	r3, [r7, #23]
      break;
 80079a6:	e013      	b.n	80079d0 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d00d      	beq.n	80079ce <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f8d0 	bl	8008b5a <USBD_CtlError>
			  ret = USBD_FAIL;
 80079ba:	2302      	movs	r3, #2
 80079bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80079be:	e006      	b.n	80079ce <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 f8c9 	bl	8008b5a <USBD_CtlError>
      ret = USBD_FAIL;
 80079c8:	2302      	movs	r3, #2
 80079ca:	75fb      	strb	r3, [r7, #23]
      break;
 80079cc:	e000      	b.n	80079d0 <USBD_CDC_Setup+0x12c>
      break;
 80079ce:	bf00      	nop
    }
    break;
 80079d0:	e006      	b.n	80079e0 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f8c0 	bl	8008b5a <USBD_CtlError>
    ret = USBD_FAIL;
 80079da:	2302      	movs	r3, #2
 80079dc:	75fb      	strb	r3, [r7, #23]
    break;
 80079de:	bf00      	nop
  }

  return ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	460b      	mov	r3, r1
 80079f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80079fc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007a04:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d03a      	beq.n	8007a86 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	331c      	adds	r3, #28
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d029      	beq.n	8007a7a <USBD_CDC_DataIn+0x90>
 8007a26:	78fa      	ldrb	r2, [r7, #3]
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	331c      	adds	r3, #28
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	78f9      	ldrb	r1, [r7, #3]
 8007a3a:	68b8      	ldr	r0, [r7, #8]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4403      	add	r3, r0
 8007a46:	3338      	adds	r3, #56	; 0x38
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d110      	bne.n	8007a7a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	331c      	adds	r3, #28
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007a6c:	78f9      	ldrb	r1, [r7, #3]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2200      	movs	r2, #0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f002 ff01 	bl	800a87a <USBD_LL_Transmit>
 8007a78:	e003      	b.n	8007a82 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	e000      	b.n	8007a88 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007a86:	2302      	movs	r3, #2
  }
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f002 ff2c 	bl	800a906 <USBD_LL_GetRxDataSize>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00d      	beq.n	8007adc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4798      	blx	r3

    return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e000      	b.n	8007ade <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007adc:	2302      	movs	r3, #2
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007af4:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d015      	beq.n	8007b2c <USBD_CDC_EP0_RxReady+0x46>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b06:	2bff      	cmp	r3, #255	; 0xff
 8007b08:	d010      	beq.n	8007b2c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007b18:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b20:	b292      	uxth	r2, r2
 8007b22:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	22ff      	movs	r2, #255	; 0xff
 8007b28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2243      	movs	r2, #67	; 0x43
 8007b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000035c 	.word	0x2000035c

08007b58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2243      	movs	r2, #67	; 0x43
 8007b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b66:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000318 	.word	0x20000318

08007b78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2243      	movs	r2, #67	; 0x43
 8007b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007b86:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	200003a0 	.word	0x200003a0

08007b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	220a      	movs	r2, #10
 8007ba4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007ba6:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	200002d4 	.word	0x200002d4

08007bb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bc80      	pop	{r7}
 8007be2:	4770      	bx	lr

08007be4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007bf8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c02:	88fa      	ldrh	r2, [r7, #6]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr

08007c16 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c26:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c4a:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01c      	beq.n	8007c90 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d115      	bne.n	8007c8c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2181      	movs	r1, #129	; 0x81
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f002 fdf9 	bl	800a87a <USBD_LL_Transmit>

      return USBD_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e002      	b.n	8007c92 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007c90:	2302      	movs	r3, #2
  }
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d017      	beq.n	8007ce4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7c1b      	ldrb	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d109      	bne.n	8007cd0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f002 fdf9 	bl	800a8c0 <USBD_LL_PrepareReceive>
 8007cce:	e007      	b.n	8007ce0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd6:	2340      	movs	r3, #64	; 0x40
 8007cd8:	2101      	movs	r1, #1
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f002 fdf0 	bl	800a8c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e000      	b.n	8007ce6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ce4:	2302      	movs	r3, #2
  }
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d02:	2302      	movs	r3, #2
 8007d04:	e01a      	b.n	8007d3c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	79fa      	ldrb	r2, [r7, #7]
 8007d32:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f002 fc5d 	bl	800a5f4 <USBD_LL_Init>

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d006      	beq.n	8007d66 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	e001      	b.n	8007d6a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d66:	2302      	movs	r3, #2
 8007d68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr

08007d76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f002 fc92 	bl	800a6a8 <USBD_LL_Start>

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007dae:	2302      	movs	r3, #2
 8007db0:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00c      	beq.n	8007dd6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	78fa      	ldrb	r2, [r7, #3]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	4611      	mov	r1, r2
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fe62 	bl	8008ae2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007e3a:	f003 031f 	and.w	r3, r3, #31
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d016      	beq.n	8007e70 <USBD_LL_SetupStage+0x6a>
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d81c      	bhi.n	8007e80 <USBD_LL_SetupStage+0x7a>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <USBD_LL_SetupStage+0x4a>
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d008      	beq.n	8007e60 <USBD_LL_SetupStage+0x5a>
 8007e4e:	e017      	b.n	8007e80 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9c5 	bl	80081e8 <USBD_StdDevReq>
    break;
 8007e5e:	e01a      	b.n	8007e96 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fa27 	bl	80082bc <USBD_StdItfReq>
    break;
 8007e6e:	e012      	b.n	8007e96 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa67 	bl	800834c <USBD_StdEPReq>
    break;
 8007e7e:	e00a      	b.n	8007e96 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007e86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f002 fc6a 	bl	800a768 <USBD_LL_StallEP>
    break;
 8007e94:	bf00      	nop
  }

  return USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d14b      	bne.n	8007f4c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007eba:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d134      	bne.n	8007f30 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d919      	bls.n	8007f06 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d203      	bcs.n	8007ef4 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	e002      	b.n	8007efa <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fee1 	bl	8008cc6 <USBD_CtlContinueRx>
 8007f04:	e038      	b.n	8007f78 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d105      	bne.n	8007f28 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fede 	bl	8008cea <USBD_CtlSendStatus>
 8007f2e:	e023      	b.n	8007f78 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007f36:	2b05      	cmp	r3, #5
 8007f38:	d11e      	bne.n	8007f78 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007f42:	2100      	movs	r1, #0
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f002 fc0f 	bl	800a768 <USBD_LL_StallEP>
 8007f4a:	e015      	b.n	8007f78 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00d      	beq.n	8007f74 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d108      	bne.n	8007f74 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	7afa      	ldrb	r2, [r7, #11]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	4798      	blx	r3
 8007f72:	e001      	b.n	8007f78 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f74:	2302      	movs	r3, #2
 8007f76:	e000      	b.n	8007f7a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b086      	sub	sp, #24
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007f90:	7afb      	ldrb	r3, [r7, #11]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d17f      	bne.n	8008096 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d15c      	bne.n	8008060 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d915      	bls.n	8007fde <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fe4b 	bl	8008c66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f002 fc72 	bl	800a8c0 <USBD_LL_PrepareReceive>
 8007fdc:	e04e      	b.n	800807c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	6912      	ldr	r2, [r2, #16]
 8007fe6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fea:	fb01 f202 	mul.w	r2, r1, r2
 8007fee:	1a9b      	subs	r3, r3, r2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11c      	bne.n	800802e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d316      	bcc.n	800802e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800800a:	429a      	cmp	r2, r3
 800800c:	d20f      	bcs.n	800802e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800800e:	2200      	movs	r2, #0
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fe27 	bl	8008c66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008020:	2300      	movs	r3, #0
 8008022:	2200      	movs	r2, #0
 8008024:	2100      	movs	r1, #0
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f002 fc4a 	bl	800a8c0 <USBD_LL_PrepareReceive>
 800802c:	e026      	b.n	800807c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008040:	2b03      	cmp	r3, #3
 8008042:	d105      	bne.n	8008050 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008050:	2180      	movs	r1, #128	; 0x80
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f002 fb88 	bl	800a768 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fe59 	bl	8008d10 <USBD_CtlReceiveStatus>
 800805e:	e00d      	b.n	800807c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008066:	2b04      	cmp	r3, #4
 8008068:	d004      	beq.n	8008074 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008074:	2180      	movs	r1, #128	; 0x80
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f002 fb76 	bl	800a768 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008082:	2b01      	cmp	r3, #1
 8008084:	d11d      	bne.n	80080c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fe81 	bl	8007d8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008094:	e015      	b.n	80080c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00d      	beq.n	80080be <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d108      	bne.n	80080be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	7afa      	ldrb	r2, [r7, #11]
 80080b6:	4611      	mov	r1, r2
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	4798      	blx	r3
 80080bc:	e001      	b.n	80080c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080be:	2302      	movs	r3, #2
 80080c0:	e000      	b.n	80080c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f002 faff 	bl	800a6de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2240      	movs	r2, #64	; 0x40
 80080ec:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080f0:	2340      	movs	r3, #64	; 0x40
 80080f2:	2200      	movs	r2, #0
 80080f4:	2180      	movs	r1, #128	; 0x80
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f002 faf1 	bl	800a6de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2240      	movs	r2, #64	; 0x40
 8008106:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6852      	ldr	r2, [r2, #4]
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	4611      	mov	r1, r2
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
  }

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2204      	movs	r2, #4
 8008184:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bc80      	pop	{r7}
 80081b2:	4770      	bx	lr

080081b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d10b      	bne.n	80081de <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d005      	beq.n	800820e <USBD_StdDevReq+0x26>
 8008202:	2b40      	cmp	r3, #64	; 0x40
 8008204:	d84f      	bhi.n	80082a6 <USBD_StdDevReq+0xbe>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <USBD_StdDevReq+0x36>
 800820a:	2b20      	cmp	r3, #32
 800820c:	d14b      	bne.n	80082a6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
    break;
 800821c:	e048      	b.n	80082b0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	2b09      	cmp	r3, #9
 8008224:	d839      	bhi.n	800829a <USBD_StdDevReq+0xb2>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBD_StdDevReq+0x44>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	0800827d 	.word	0x0800827d
 8008230:	08008291 	.word	0x08008291
 8008234:	0800829b 	.word	0x0800829b
 8008238:	08008287 	.word	0x08008287
 800823c:	0800829b 	.word	0x0800829b
 8008240:	0800825f 	.word	0x0800825f
 8008244:	08008255 	.word	0x08008255
 8008248:	0800829b 	.word	0x0800829b
 800824c:	08008273 	.word	0x08008273
 8008250:	08008269 	.word	0x08008269
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f9da 	bl	8008610 <USBD_GetDescriptor>
      break;
 800825c:	e022      	b.n	80082a4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 facf 	bl	8008804 <USBD_SetAddress>
      break;
 8008266:	e01d      	b.n	80082a4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fb0e 	bl	800888c <USBD_SetConfig>
      break;
 8008270:	e018      	b.n	80082a4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fb97 	bl	80089a8 <USBD_GetConfig>
      break;
 800827a:	e013      	b.n	80082a4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fbc7 	bl	8008a12 <USBD_GetStatus>
      break;
 8008284:	e00e      	b.n	80082a4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fbf5 	bl	8008a78 <USBD_SetFeature>
      break;
 800828e:	e009      	b.n	80082a4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fc04 	bl	8008aa0 <USBD_ClrFeature>
      break;
 8008298:	e004      	b.n	80082a4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fc5c 	bl	8008b5a <USBD_CtlError>
      break;
 80082a2:	bf00      	nop
    }
    break;
 80082a4:	e004      	b.n	80082b0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc56 	bl	8008b5a <USBD_CtlError>
    break;
 80082ae:	bf00      	nop
  }

  return ret;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop

080082bc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d005      	beq.n	80082e2 <USBD_StdItfReq+0x26>
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d82e      	bhi.n	8008338 <USBD_StdItfReq+0x7c>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <USBD_StdItfReq+0x26>
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d12a      	bne.n	8008338 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082e8:	3b01      	subs	r3, #1
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d81d      	bhi.n	800832a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	889b      	ldrh	r3, [r3, #4]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d813      	bhi.n	8008320 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	88db      	ldrh	r3, [r3, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d110      	bne.n	8008334 <USBD_StdItfReq+0x78>
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10d      	bne.n	8008334 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fce6 	bl	8008cea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800831e:	e009      	b.n	8008334 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc19 	bl	8008b5a <USBD_CtlError>
      break;
 8008328:	e004      	b.n	8008334 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc14 	bl	8008b5a <USBD_CtlError>
      break;
 8008332:	e000      	b.n	8008336 <USBD_StdItfReq+0x7a>
      break;
 8008334:	bf00      	nop
    }
    break;
 8008336:	e004      	b.n	8008342 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc0d 	bl	8008b5a <USBD_CtlError>
    break;
 8008340:	bf00      	nop
  }

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	889b      	ldrh	r3, [r3, #4]
 800835e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d007      	beq.n	800837c <USBD_StdEPReq+0x30>
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	f200 8144 	bhi.w	80085fa <USBD_StdEPReq+0x2ae>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <USBD_StdEPReq+0x40>
 8008376:	2b20      	cmp	r3, #32
 8008378:	f040 813f 	bne.w	80085fa <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
    break;
 800838a:	e13b      	b.n	8008604 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008394:	2b20      	cmp	r3, #32
 8008396:	d10a      	bne.n	80083ae <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	73fb      	strb	r3, [r7, #15]

      return ret;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	e12b      	b.n	8008606 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d007      	beq.n	80083c6 <USBD_StdEPReq+0x7a>
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	f300 8119 	bgt.w	80085ee <USBD_StdEPReq+0x2a2>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d072      	beq.n	80084a6 <USBD_StdEPReq+0x15a>
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d03a      	beq.n	800843a <USBD_StdEPReq+0xee>
 80083c4:	e113      	b.n	80085ee <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d002      	beq.n	80083d6 <USBD_StdEPReq+0x8a>
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d015      	beq.n	8008400 <USBD_StdEPReq+0xb4>
 80083d4:	e02b      	b.n	800842e <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00c      	beq.n	80083f6 <USBD_StdEPReq+0xaa>
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d009      	beq.n	80083f6 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f002 f9be 	bl	800a768 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80083ec:	2180      	movs	r1, #128	; 0x80
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f002 f9ba 	bl	800a768 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80083f4:	e020      	b.n	8008438 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fbae 	bl	8008b5a <USBD_CtlError>
        break;
 80083fe:	e01b      	b.n	8008438 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	885b      	ldrh	r3, [r3, #2]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10e      	bne.n	8008426 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <USBD_StdEPReq+0xda>
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b80      	cmp	r3, #128	; 0x80
 8008412:	d008      	beq.n	8008426 <USBD_StdEPReq+0xda>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	88db      	ldrh	r3, [r3, #6]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f002 f9a1 	bl	800a768 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fc5f 	bl	8008cea <USBD_CtlSendStatus>

        break;
 800842c:	e004      	b.n	8008438 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fb92 	bl	8008b5a <USBD_CtlError>
        break;
 8008436:	bf00      	nop
      }
      break;
 8008438:	e0de      	b.n	80085f8 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008440:	2b02      	cmp	r3, #2
 8008442:	d002      	beq.n	800844a <USBD_StdEPReq+0xfe>
 8008444:	2b03      	cmp	r3, #3
 8008446:	d015      	beq.n	8008474 <USBD_StdEPReq+0x128>
 8008448:	e026      	b.n	8008498 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00c      	beq.n	800846a <USBD_StdEPReq+0x11e>
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d009      	beq.n	800846a <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f002 f984 	bl	800a768 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008460:	2180      	movs	r1, #128	; 0x80
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f002 f980 	bl	800a768 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008468:	e01c      	b.n	80084a4 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fb74 	bl	8008b5a <USBD_CtlError>
        break;
 8008472:	e017      	b.n	80084a4 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	885b      	ldrh	r3, [r3, #2]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d112      	bne.n	80084a2 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f002 f98b 	bl	800a7a6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fc2a 	bl	8008cea <USBD_CtlSendStatus>
        }
        break;
 8008496:	e004      	b.n	80084a2 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fb5d 	bl	8008b5a <USBD_CtlError>
        break;
 80084a0:	e000      	b.n	80084a4 <USBD_StdEPReq+0x158>
        break;
 80084a2:	bf00      	nop
      }
      break;
 80084a4:	e0a8      	b.n	80085f8 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d002      	beq.n	80084b6 <USBD_StdEPReq+0x16a>
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d031      	beq.n	8008518 <USBD_StdEPReq+0x1cc>
 80084b4:	e095      	b.n	80085e2 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <USBD_StdEPReq+0x180>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b80      	cmp	r3, #128	; 0x80
 80084c0:	d004      	beq.n	80084cc <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fb48 	bl	8008b5a <USBD_CtlError>
          break;
 80084ca:	e08f      	b.n	80085ec <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80084cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da0b      	bge.n	80084ec <USBD_StdEPReq+0x1a0>
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	3310      	adds	r3, #16
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	4413      	add	r3, r2
 80084e8:	3304      	adds	r3, #4
 80084ea:	e00a      	b.n	8008502 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2202      	movs	r2, #2
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb8c 	bl	8008c2e <USBD_CtlSendData>
          break;
 8008516:	e069      	b.n	80085ec <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800851c:	2b00      	cmp	r3, #0
 800851e:	da11      	bge.n	8008544 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	f003 020f 	and.w	r2, r3, #15
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	3318      	adds	r3, #24
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d117      	bne.n	800856a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fb0c 	bl	8008b5a <USBD_CtlError>
            break;
 8008542:	e053      	b.n	80085ec <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	f003 020f 	and.w	r2, r3, #15
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 faf9 	bl	8008b5a <USBD_CtlError>
            break;
 8008568:	e040      	b.n	80085ec <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800856a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800856e:	2b00      	cmp	r3, #0
 8008570:	da0b      	bge.n	800858a <USBD_StdEPReq+0x23e>
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	3310      	adds	r3, #16
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4413      	add	r3, r2
 8008586:	3304      	adds	r3, #4
 8008588:	e00a      	b.n	80085a0 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <USBD_StdEPReq+0x262>
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b80      	cmp	r3, #128	; 0x80
 80085ac:	d103      	bne.n	80085b6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e00e      	b.n	80085d4 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f002 f912 	bl	800a7e4 <USBD_LL_IsStallEP>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2201      	movs	r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	e002      	b.n	80085d4 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2202      	movs	r2, #2
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fb27 	bl	8008c2e <USBD_CtlSendData>
          break;
 80085e0:	e004      	b.n	80085ec <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fab8 	bl	8008b5a <USBD_CtlError>
        break;
 80085ea:	bf00      	nop
      }
      break;
 80085ec:	e004      	b.n	80085f8 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fab2 	bl	8008b5a <USBD_CtlError>
      break;
 80085f6:	bf00      	nop
    }
    break;
 80085f8:	e004      	b.n	8008604 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 faac 	bl	8008b5a <USBD_CtlError>
    break;
 8008602:	bf00      	nop
  }

  return ret;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	885b      	ldrh	r3, [r3, #2]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	2b06      	cmp	r3, #6
 8008626:	f200 80c9 	bhi.w	80087bc <USBD_GetDescriptor+0x1ac>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <USBD_GetDescriptor+0x20>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	0800864d 	.word	0x0800864d
 8008634:	08008665 	.word	0x08008665
 8008638:	080086a5 	.word	0x080086a5
 800863c:	080087bd 	.word	0x080087bd
 8008640:	080087bd 	.word	0x080087bd
 8008644:	08008769 	.word	0x08008769
 8008648:	0800878f 	.word	0x0800878f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 010a 	add.w	r1, r7, #10
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
    break;
 8008662:	e0b0      	b.n	80087c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	7c1b      	ldrb	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10d      	bne.n	8008688 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	f107 020a 	add.w	r2, r7, #10
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	2202      	movs	r2, #2
 8008684:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008686:	e09e      	b.n	80087c6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	f107 020a 	add.w	r2, r7, #10
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	2202      	movs	r2, #2
 80086a0:	701a      	strb	r2, [r3, #0]
    break;
 80086a2:	e090      	b.n	80087c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	885b      	ldrh	r3, [r3, #2]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d856      	bhi.n	800875c <USBD_GetDescriptor+0x14c>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <USBD_GetDescriptor+0xa4>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	080086fd 	.word	0x080086fd
 80086c0:	08008715 	.word	0x08008715
 80086c4:	0800872d 	.word	0x0800872d
 80086c8:	08008745 	.word	0x08008745
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 010a 	add.w	r1, r7, #10
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
      break;
 80086e2:	e040      	b.n	8008766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7c12      	ldrb	r2, [r2, #16]
 80086f0:	f107 010a 	add.w	r1, r7, #10
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	60f8      	str	r0, [r7, #12]
      break;
 80086fa:	e034      	b.n	8008766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	7c12      	ldrb	r2, [r2, #16]
 8008708:	f107 010a 	add.w	r1, r7, #10
 800870c:	4610      	mov	r0, r2
 800870e:	4798      	blx	r3
 8008710:	60f8      	str	r0, [r7, #12]
      break;
 8008712:	e028      	b.n	8008766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 010a 	add.w	r1, r7, #10
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
      break;
 800872a:	e01c      	b.n	8008766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7c12      	ldrb	r2, [r2, #16]
 8008738:	f107 010a 	add.w	r1, r7, #10
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
      break;
 8008742:	e010      	b.n	8008766 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	7c12      	ldrb	r2, [r2, #16]
 8008750:	f107 010a 	add.w	r1, r7, #10
 8008754:	4610      	mov	r0, r2
 8008756:	4798      	blx	r3
 8008758:	60f8      	str	r0, [r7, #12]
      break;
 800875a:	e004      	b.n	8008766 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f9fb 	bl	8008b5a <USBD_CtlError>
      return;
 8008764:	e04b      	b.n	80087fe <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008766:	e02e      	b.n	80087c6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7c1b      	ldrb	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d109      	bne.n	8008784 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008778:	f107 020a 	add.w	r2, r7, #10
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
 8008780:	60f8      	str	r0, [r7, #12]
      break;
 8008782:	e020      	b.n	80087c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f9e7 	bl	8008b5a <USBD_CtlError>
      return;
 800878c:	e037      	b.n	80087fe <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	7c1b      	ldrb	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	f107 020a 	add.w	r2, r7, #10
 80087a2:	4610      	mov	r0, r2
 80087a4:	4798      	blx	r3
 80087a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	2207      	movs	r2, #7
 80087ae:	701a      	strb	r2, [r3, #0]
      break;
 80087b0:	e009      	b.n	80087c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9d0 	bl	8008b5a <USBD_CtlError>
      return;
 80087ba:	e020      	b.n	80087fe <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f9cb 	bl	8008b5a <USBD_CtlError>
    return;
 80087c4:	e01b      	b.n	80087fe <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80087c6:	897b      	ldrh	r3, [r7, #10]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d011      	beq.n	80087f0 <USBD_GetDescriptor+0x1e0>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	88db      	ldrh	r3, [r3, #6]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00d      	beq.n	80087f0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	88da      	ldrh	r2, [r3, #6]
 80087d8:	897b      	ldrh	r3, [r7, #10]
 80087da:	4293      	cmp	r3, r2
 80087dc:	bf28      	it	cs
 80087de:	4613      	movcs	r3, r2
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80087e4:	897b      	ldrh	r3, [r7, #10]
 80087e6:	461a      	mov	r2, r3
 80087e8:	68f9      	ldr	r1, [r7, #12]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fa1f 	bl	8008c2e <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	88db      	ldrh	r3, [r3, #6]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fa76 	bl	8008cea <USBD_CtlSendStatus>
  }
}
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	889b      	ldrh	r3, [r3, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d130      	bne.n	8008878 <USBD_SetAddress+0x74>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88db      	ldrh	r3, [r3, #6]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d12c      	bne.n	8008878 <USBD_SetAddress+0x74>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	885b      	ldrh	r3, [r3, #2]
 8008822:	2b7f      	cmp	r3, #127	; 0x7f
 8008824:	d828      	bhi.n	8008878 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	885b      	ldrh	r3, [r3, #2]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008830:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008838:	2b03      	cmp	r3, #3
 800883a:	d104      	bne.n	8008846 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f98b 	bl	8008b5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008844:	e01d      	b.n	8008882 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7bfa      	ldrb	r2, [r7, #15]
 800884a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 fff2 	bl	800a83c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa46 	bl	8008cea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886c:	e009      	b.n	8008882 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008876:	e004      	b.n	8008882 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f96d 	bl	8008b5a <USBD_CtlError>
  }
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	885b      	ldrh	r3, [r3, #2]
 800889a:	b2da      	uxtb	r2, r3
 800889c:	4b41      	ldr	r3, [pc, #260]	; (80089a4 <USBD_SetConfig+0x118>)
 800889e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088a0:	4b40      	ldr	r3, [pc, #256]	; (80089a4 <USBD_SetConfig+0x118>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d904      	bls.n	80088b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f955 	bl	8008b5a <USBD_CtlError>
 80088b0:	e075      	b.n	800899e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d002      	beq.n	80088c2 <USBD_SetConfig+0x36>
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d023      	beq.n	8008908 <USBD_SetConfig+0x7c>
 80088c0:	e062      	b.n	8008988 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80088c2:	4b38      	ldr	r3, [pc, #224]	; (80089a4 <USBD_SetConfig+0x118>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01a      	beq.n	8008900 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80088ca:	4b36      	ldr	r3, [pc, #216]	; (80089a4 <USBD_SetConfig+0x118>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2203      	movs	r2, #3
 80088d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088dc:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <USBD_SetConfig+0x118>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fa5d 	bl	8007da2 <USBD_SetClassConfig>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d104      	bne.n	80088f8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f932 	bl	8008b5a <USBD_CtlError>
          return;
 80088f6:	e052      	b.n	800899e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f9f6 	bl	8008cea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80088fe:	e04e      	b.n	800899e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f9f2 	bl	8008cea <USBD_CtlSendStatus>
      break;
 8008906:	e04a      	b.n	800899e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008908:	4b26      	ldr	r3, [pc, #152]	; (80089a4 <USBD_SetConfig+0x118>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d112      	bne.n	8008936 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008918:	4b22      	ldr	r3, [pc, #136]	; (80089a4 <USBD_SetConfig+0x118>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008922:	4b20      	ldr	r3, [pc, #128]	; (80089a4 <USBD_SetConfig+0x118>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff fa59 	bl	8007de0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9db 	bl	8008cea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008934:	e033      	b.n	800899e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008936:	4b1b      	ldr	r3, [pc, #108]	; (80089a4 <USBD_SetConfig+0x118>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d01d      	beq.n	8008980 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff fa47 	bl	8007de0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008952:	4b14      	ldr	r3, [pc, #80]	; (80089a4 <USBD_SetConfig+0x118>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800895c:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <USBD_SetConfig+0x118>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fa1d 	bl	8007da2 <USBD_SetClassConfig>
 8008968:	4603      	mov	r3, r0
 800896a:	2b02      	cmp	r3, #2
 800896c:	d104      	bne.n	8008978 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8f2 	bl	8008b5a <USBD_CtlError>
          return;
 8008976:	e012      	b.n	800899e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f9b6 	bl	8008cea <USBD_CtlSendStatus>
      break;
 800897e:	e00e      	b.n	800899e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f9b2 	bl	8008cea <USBD_CtlSendStatus>
      break;
 8008986:	e00a      	b.n	800899e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f8e5 	bl	8008b5a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008990:	4b04      	ldr	r3, [pc, #16]	; (80089a4 <USBD_SetConfig+0x118>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fa22 	bl	8007de0 <USBD_ClrClassConfig>
      break;
 800899c:	bf00      	nop
    }
  }
}
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	2000063c 	.word	0x2000063c

080089a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	88db      	ldrh	r3, [r3, #6]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d004      	beq.n	80089c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f8cc 	bl	8008b5a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80089c2:	e022      	b.n	8008a0a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	dc02      	bgt.n	80089d4 <USBD_GetConfig+0x2c>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dc03      	bgt.n	80089da <USBD_GetConfig+0x32>
 80089d2:	e015      	b.n	8008a00 <USBD_GetConfig+0x58>
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d00b      	beq.n	80089f0 <USBD_GetConfig+0x48>
 80089d8:	e012      	b.n	8008a00 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3308      	adds	r3, #8
 80089e4:	2201      	movs	r2, #1
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f920 	bl	8008c2e <USBD_CtlSendData>
      break;
 80089ee:	e00c      	b.n	8008a0a <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	2201      	movs	r2, #1
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f918 	bl	8008c2e <USBD_CtlSendData>
      break;
 80089fe:	e004      	b.n	8008a0a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f8a9 	bl	8008b5a <USBD_CtlError>
      break;
 8008a08:	bf00      	nop
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d81e      	bhi.n	8008a66 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d004      	beq.n	8008a3a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f891 	bl	8008b5a <USBD_CtlError>
      break;
 8008a38:	e01a      	b.n	8008a70 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f043 0202 	orr.w	r2, r3, #2
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	330c      	adds	r3, #12
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f8e5 	bl	8008c2e <USBD_CtlSendData>
    break;
 8008a64:	e004      	b.n	8008a70 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f876 	bl	8008b5a <USBD_CtlError>
    break;
 8008a6e:	bf00      	nop
  }
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	885b      	ldrh	r3, [r3, #2]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d106      	bne.n	8008a98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f929 	bl	8008cea <USBD_CtlSendStatus>
  }

}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d80b      	bhi.n	8008ace <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	885b      	ldrh	r3, [r3, #2]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d10c      	bne.n	8008ad8 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f90f 	bl	8008cea <USBD_CtlSendStatus>
    }
    break;
 8008acc:	e004      	b.n	8008ad8 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f842 	bl	8008b5a <USBD_CtlError>
    break;
 8008ad6:	e000      	b.n	8008ada <USBD_ClrFeature+0x3a>
    break;
 8008ad8:	bf00      	nop
  }
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	785a      	ldrb	r2, [r3, #1]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	3302      	adds	r3, #2
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	3303      	adds	r3, #3
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4413      	add	r3, r2
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	3305      	adds	r3, #5
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	3306      	adds	r3, #6
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	3307      	adds	r3, #7
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	80da      	strh	r2, [r3, #6]

}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr

08008b5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008b64:	2180      	movs	r1, #128	; 0x80
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 fdfe 	bl	800a768 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fdfa 	bl	800a768 <USBD_LL_StallEP>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d032      	beq.n	8008bf8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f834 	bl	8008c00 <USBD_GetLen>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	75fa      	strb	r2, [r7, #23]
 8008bac:	461a      	mov	r2, r3
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	75fa      	strb	r2, [r7, #23]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bc8:	e012      	b.n	8008bf0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	60fa      	str	r2, [r7, #12]
 8008bd0:	7dfa      	ldrb	r2, [r7, #23]
 8008bd2:	1c51      	adds	r1, r2, #1
 8008bd4:	75f9      	strb	r1, [r7, #23]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	440a      	add	r2, r1
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	75fa      	strb	r2, [r7, #23]
 8008be6:	461a      	mov	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4413      	add	r3, r2
 8008bec:	2200      	movs	r2, #0
 8008bee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e8      	bne.n	8008bca <USBD_GetString+0x4e>
    }
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008c0c:	e005      	b.n	8008c1a <USBD_GetLen+0x1a>
    {
        len++;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	3301      	adds	r3, #1
 8008c12:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3301      	adds	r3, #1
 8008c18:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f5      	bne.n	8008c0e <USBD_GetLen+0xe>
    }

    return len;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bc80      	pop	{r7}
 8008c2c:	4770      	bx	lr

08008c2e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008c44:	88fa      	ldrh	r2, [r7, #6]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c4a:	88fa      	ldrh	r2, [r7, #6]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	2100      	movs	r1, #0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f001 fe0f 	bl	800a87a <USBD_LL_Transmit>

  return USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	4613      	mov	r3, r2
 8008c72:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f001 fdfd 	bl	800a87a <USBD_LL_Transmit>

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008ca0:	88fa      	ldrh	r2, [r7, #6]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008ca8:	88fa      	ldrh	r2, [r7, #6]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f001 fe02 	bl	800a8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	2100      	movs	r1, #0
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f001 fdf0 	bl	800a8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2204      	movs	r2, #4
 8008cf6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2100      	movs	r1, #0
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fdba 	bl	800a87a <USBD_LL_Transmit>

  return USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2205      	movs	r2, #5
 8008d1c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008d20:	2300      	movs	r3, #0
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fdca 	bl	800a8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4912      	ldr	r1, [pc, #72]	; (8008d88 <MX_USB_DEVICE_Init+0x50>)
 8008d40:	4812      	ldr	r0, [pc, #72]	; (8008d8c <MX_USB_DEVICE_Init+0x54>)
 8008d42:	f7fe ffd4 	bl	8007cee <USBD_Init>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d4c:	f7f8 f856 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d50:	490f      	ldr	r1, [pc, #60]	; (8008d90 <MX_USB_DEVICE_Init+0x58>)
 8008d52:	480e      	ldr	r0, [pc, #56]	; (8008d8c <MX_USB_DEVICE_Init+0x54>)
 8008d54:	f7fe fff6 	bl	8007d44 <USBD_RegisterClass>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d5e:	f7f8 f84d 	bl	8000dfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d62:	490c      	ldr	r1, [pc, #48]	; (8008d94 <MX_USB_DEVICE_Init+0x5c>)
 8008d64:	4809      	ldr	r0, [pc, #36]	; (8008d8c <MX_USB_DEVICE_Init+0x54>)
 8008d66:	f7fe ff27 	bl	8007bb8 <USBD_CDC_RegisterInterface>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d70:	f7f8 f844 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d74:	4805      	ldr	r0, [pc, #20]	; (8008d8c <MX_USB_DEVICE_Init+0x54>)
 8008d76:	f7fe fffe 	bl	8007d76 <USBD_Start>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d80:	f7f8 f83c 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d84:	bf00      	nop
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	200003f4 	.word	0x200003f4
 8008d8c:	20000640 	.word	0x20000640
 8008d90:	200002e0 	.word	0x200002e0
 8008d94:	200003e4 	.word	0x200003e4

08008d98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4905      	ldr	r1, [pc, #20]	; (8008db4 <CDC_Init_FS+0x1c>)
 8008da0:	4805      	ldr	r0, [pc, #20]	; (8008db8 <CDC_Init_FS+0x20>)
 8008da2:	f7fe ff1f 	bl	8007be4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008da6:	4905      	ldr	r1, [pc, #20]	; (8008dbc <CDC_Init_FS+0x24>)
 8008da8:	4803      	ldr	r0, [pc, #12]	; (8008db8 <CDC_Init_FS+0x20>)
 8008daa:	f7fe ff34 	bl	8007c16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200014c8 	.word	0x200014c8
 8008db8:	20000640 	.word	0x20000640
 8008dbc:	20000cc8 	.word	0x20000cc8

08008dc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr
	...

08008dd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b23      	cmp	r3, #35	; 0x23
 8008de4:	d84a      	bhi.n	8008e7c <CDC_Control_FS+0xac>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <CDC_Control_FS+0x1c>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e7d 	.word	0x08008e7d
 8008df0:	08008e7d 	.word	0x08008e7d
 8008df4:	08008e7d 	.word	0x08008e7d
 8008df8:	08008e7d 	.word	0x08008e7d
 8008dfc:	08008e7d 	.word	0x08008e7d
 8008e00:	08008e7d 	.word	0x08008e7d
 8008e04:	08008e7d 	.word	0x08008e7d
 8008e08:	08008e7d 	.word	0x08008e7d
 8008e0c:	08008e7d 	.word	0x08008e7d
 8008e10:	08008e7d 	.word	0x08008e7d
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008e7d 	.word	0x08008e7d
 8008e1c:	08008e7d 	.word	0x08008e7d
 8008e20:	08008e7d 	.word	0x08008e7d
 8008e24:	08008e7d 	.word	0x08008e7d
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008e7d 	.word	0x08008e7d
 8008e30:	08008e7d 	.word	0x08008e7d
 8008e34:	08008e7d 	.word	0x08008e7d
 8008e38:	08008e7d 	.word	0x08008e7d
 8008e3c:	08008e7d 	.word	0x08008e7d
 8008e40:	08008e7d 	.word	0x08008e7d
 8008e44:	08008e7d 	.word	0x08008e7d
 8008e48:	08008e7d 	.word	0x08008e7d
 8008e4c:	08008e7d 	.word	0x08008e7d
 8008e50:	08008e7d 	.word	0x08008e7d
 8008e54:	08008e7d 	.word	0x08008e7d
 8008e58:	08008e7d 	.word	0x08008e7d
 8008e5c:	08008e7d 	.word	0x08008e7d
 8008e60:	08008e7d 	.word	0x08008e7d
 8008e64:	08008e7d 	.word	0x08008e7d
 8008e68:	08008e7d 	.word	0x08008e7d
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008e7d 	.word	0x08008e7d
 8008e74:	08008e7d 	.word	0x08008e7d
 8008e78:	08008e7d 	.word	0x08008e7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e7c:	bf00      	nop
  }

  return (USBD_OK);
 8008e7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc80      	pop	{r7}
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop

08008e8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	e014      	b.n	8008ec6 <CDC_Receive_FS+0x3a>
	{
	if (RX_Buffer_Len < MAX_RX_BUFFER_SIZE)
 8008e9c:	4b1c      	ldr	r3, [pc, #112]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ea4:	d20c      	bcs.n	8008ec0 <CDC_Receive_FS+0x34>
	{
	  RX_Buffer[RX_Buffer_Len] = Buf[i];
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	441a      	add	r2, r3
 8008eac:	4b18      	ldr	r3, [pc, #96]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	7811      	ldrb	r1, [r2, #0]
 8008eb2:	4a18      	ldr	r2, [pc, #96]	; (8008f14 <CDC_Receive_FS+0x88>)
 8008eb4:	54d1      	strb	r1, [r2, r3]
	  RX_Buffer_Len = RX_Buffer_Len + 1;
 8008eb6:	4b16      	ldr	r3, [pc, #88]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008ebe:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d8e5      	bhi.n	8008e9c <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (RX_Buffer_Len > 0 && RX_Buffer[RX_Buffer_Len - 1] == '\n')
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00f      	beq.n	8008ef8 <CDC_Receive_FS+0x6c>
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	4a0d      	ldr	r2, [pc, #52]	; (8008f14 <CDC_Receive_FS+0x88>)
 8008ee0:	5cd3      	ldrb	r3, [r2, r3]
 8008ee2:	2b0a      	cmp	r3, #10
 8008ee4:	d108      	bne.n	8008ef8 <CDC_Receive_FS+0x6c>
	{
		// Process the received message
		Process_Received_Message(RX_Buffer, RX_Buffer_Len);
 8008ee6:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4619      	mov	r1, r3
 8008eec:	4809      	ldr	r0, [pc, #36]	; (8008f14 <CDC_Receive_FS+0x88>)
 8008eee:	f000 f83b 	bl	8008f68 <Process_Received_Message>
		// Clear the receive buffer
		RX_Buffer_Len = 0;
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <CDC_Receive_FS+0x84>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	4807      	ldr	r0, [pc, #28]	; (8008f18 <CDC_Receive_FS+0x8c>)
 8008efc:	f7fe fe8b 	bl	8007c16 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f00:	4805      	ldr	r0, [pc, #20]	; (8008f18 <CDC_Receive_FS+0x8c>)
 8008f02:	f7fe feca 	bl	8007c9a <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8008f06:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20000cc4 	.word	0x20000cc4
 8008f14:	200008dc 	.word	0x200008dc
 8008f18:	20000640 	.word	0x20000640

08008f1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <CDC_Transmit_FS+0x48>)
 8008f2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e00b      	b.n	8008f5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f42:	887b      	ldrh	r3, [r7, #2]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	4806      	ldr	r0, [pc, #24]	; (8008f64 <CDC_Transmit_FS+0x48>)
 8008f4a:	f7fe fe4b 	bl	8007be4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f4e:	4805      	ldr	r0, [pc, #20]	; (8008f64 <CDC_Transmit_FS+0x48>)
 8008f50:	f7fe fe74 	bl	8007c3c <USBD_CDC_TransmitPacket>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000640 	.word	0x20000640

08008f68 <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* rx_buffer, uint32_t rx_buffer_len)
{
 8008f68:	b5b0      	push	{r4, r5, r7, lr}
 8008f6a:	f5ad 5d2a 	sub.w	sp, sp, #10880	; 0x2a80
 8008f6e:	b08c      	sub	sp, #48	; 0x30
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008f76:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008f7a:	6018      	str	r0, [r3, #0]
 8008f7c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008f80:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8008f84:	6019      	str	r1, [r3, #0]
	uint8_t Register_Value;

	uint8_t TX_Packet[127];
	uint8_t TX_Packet_Length;

	if(strncmp((char*) rx_buffer, "start", strlen("start")) == 0)
 8008f86:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008f8a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008f8e:	2205      	movs	r2, #5
 8008f90:	49ab      	ldr	r1, [pc, #684]	; (8009240 <Process_Received_Message+0x2d8>)
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	f001 fd6d 	bl	800aa72 <strncmp>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d135      	bne.n	800900a <Process_Received_Message+0xa2>
	{
		sprintf(str1, "User Input: Start\r\n");
 8008f9e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008fa2:	3b34      	subs	r3, #52	; 0x34
 8008fa4:	49a7      	ldr	r1, [pc, #668]	; (8009244 <Process_Received_Message+0x2dc>)
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 fd34 	bl	800aa14 <siprintf>
		sprintf(str2, "Initialized the CC1200 for Operation\r\n");
 8008fac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008fb0:	3b0c      	subs	r3, #12
 8008fb2:	49a5      	ldr	r1, [pc, #660]	; (8009248 <Process_Received_Message+0x2e0>)
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f001 fd2d 	bl	800aa14 <siprintf>
		CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 8008fba:	4ba4      	ldr	r3, [pc, #656]	; (800924c <Process_Received_Message+0x2e4>)
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	2340      	movs	r3, #64	; 0x40
 8008fc0:	4aa3      	ldr	r2, [pc, #652]	; (8009250 <Process_Received_Message+0x2e8>)
 8008fc2:	49a4      	ldr	r1, [pc, #656]	; (8009254 <Process_Received_Message+0x2ec>)
 8008fc4:	48a4      	ldr	r0, [pc, #656]	; (8009258 <Process_Received_Message+0x2f0>)
 8008fc6:	f7f7 fa65 	bl	8000494 <CC1200_Init>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8008fca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008fce:	3b0c      	subs	r3, #12
 8008fd0:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008fd4:	3a34      	subs	r2, #52	; 0x34
 8008fd6:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008fda:	381c      	subs	r0, #28
 8008fdc:	499f      	ldr	r1, [pc, #636]	; (800925c <Process_Received_Message+0x2f4>)
 8008fde:	f001 fd19 	bl	800aa14 <siprintf>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008fe8:	f102 021e 	add.w	r2, r2, #30
 8008fec:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008fee:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008ff2:	f103 031e 	add.w	r3, r3, #30
 8008ff6:	881a      	ldrh	r2, [r3, #0]
 8008ff8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008ffc:	3b1c      	subs	r3, #28
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff ff8b 	bl	8008f1c <CDC_Transmit_FS>
 8009006:	f001 b8e3 	b.w	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "configure", strlen("configure")) == 0)
 800900a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800900e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009012:	2209      	movs	r2, #9
 8009014:	4992      	ldr	r1, [pc, #584]	; (8009260 <Process_Received_Message+0x2f8>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	f001 fd2b 	bl	800aa72 <strncmp>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 8144 	bne.w	80092ac <Process_Received_Message+0x344>
	{
		sprintf(str1, "User Input: Configure\r\n");
 8009024:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009028:	3b34      	subs	r3, #52	; 0x34
 800902a:	498e      	ldr	r1, [pc, #568]	; (8009264 <Process_Received_Message+0x2fc>)
 800902c:	4618      	mov	r0, r3
 800902e:	f001 fcf1 	bl	800aa14 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Configure:"
 8009032:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009036:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800903a:	498b      	ldr	r1, [pc, #556]	; (8009268 <Process_Received_Message+0x300>)
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	f001 fd2d 	bl	800aa9c <strtok>
 8009042:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009046:	f103 0318 	add.w	r3, r3, #24
 800904a:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[mode]"
 800904c:	4987      	ldr	r1, [pc, #540]	; (800926c <Process_Received_Message+0x304>)
 800904e:	2000      	movs	r0, #0
 8009050:	f001 fd24 	bl	800aa9c <strtok>
 8009054:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009058:	f103 0318 	add.w	r3, r3, #24
 800905c:	6018      	str	r0, [r3, #0]
		if (strncmp(Token, "transmit", strlen("transmit")) == 0)
 800905e:	2208      	movs	r2, #8
 8009060:	4983      	ldr	r1, [pc, #524]	; (8009270 <Process_Received_Message+0x308>)
 8009062:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009066:	f103 0318 	add.w	r3, r3, #24
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	f001 fd01 	bl	800aa72 <strncmp>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d14f      	bne.n	8009116 <Process_Received_Message+0x1ae>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 8009076:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800907a:	3b0c      	subs	r3, #12
 800907c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009080:	f102 0218 	add.w	r2, r2, #24
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	497b      	ldr	r1, [pc, #492]	; (8009274 <Process_Received_Message+0x30c>)
 8009088:	4618      	mov	r0, r3
 800908a:	f001 fcc3 	bl	800aa14 <siprintf>
			sprintf(str3, "Configured the CC1200 with Transmit Settings\r\n");
 800908e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009092:	3b24      	subs	r3, #36	; 0x24
 8009094:	4978      	ldr	r1, [pc, #480]	; (8009278 <Process_Received_Message+0x310>)
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fcbc 	bl	800aa14 <siprintf>
			check = CC1200_Configure(&SPI_Info, Transmit_Register_Settings, Transmit_Extended_Register_Settings);
 800909c:	4a77      	ldr	r2, [pc, #476]	; (800927c <Process_Received_Message+0x314>)
 800909e:	4978      	ldr	r1, [pc, #480]	; (8009280 <Process_Received_Message+0x318>)
 80090a0:	486d      	ldr	r0, [pc, #436]	; (8009258 <Process_Received_Message+0x2f0>)
 80090a2:	f7f7 fa16 	bl	80004d2 <CC1200_Configure>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80090ac:	f102 0217 	add.w	r2, r2, #23
 80090b0:	7013      	strb	r3, [r2, #0]
			if (check == 1)
 80090b2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090b6:	f103 0317 	add.w	r3, r3, #23
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d107      	bne.n	80090d0 <Process_Received_Message+0x168>
			{
				sprintf(str4, "Error Occurred\r\n");
 80090c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80090c4:	3b3c      	subs	r3, #60	; 0x3c
 80090c6:	496f      	ldr	r1, [pc, #444]	; (8009284 <Process_Received_Message+0x31c>)
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 fca3 	bl	800aa14 <siprintf>
 80090ce:	e006      	b.n	80090de <Process_Received_Message+0x176>
			}
			else // check == 0
			{
				sprintf(str4, "No Error Occurred\r\n");
 80090d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80090d4:	3b3c      	subs	r3, #60	; 0x3c
 80090d6:	496c      	ldr	r1, [pc, #432]	; (8009288 <Process_Received_Message+0x320>)
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 fc9b 	bl	800aa14 <siprintf>
			}
			Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4); // include str4
 80090de:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80090e2:	390c      	subs	r1, #12
 80090e4:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80090e8:	3a34      	subs	r2, #52	; 0x34
 80090ea:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80090ee:	381c      	subs	r0, #28
 80090f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80090f4:	3b3c      	subs	r3, #60	; 0x3c
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80090fc:	3b24      	subs	r3, #36	; 0x24
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	460b      	mov	r3, r1
 8009102:	4962      	ldr	r1, [pc, #392]	; (800928c <Process_Received_Message+0x324>)
 8009104:	f001 fc86 	bl	800aa14 <siprintf>
 8009108:	4603      	mov	r3, r0
 800910a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800910e:	f102 021e 	add.w	r2, r2, #30
 8009112:	8013      	strh	r3, [r2, #0]
 8009114:	e085      	b.n	8009222 <Process_Received_Message+0x2ba>
		}
		else if (strncmp(Token, "receive", strlen("receive")) == 0)
 8009116:	2207      	movs	r2, #7
 8009118:	495d      	ldr	r1, [pc, #372]	; (8009290 <Process_Received_Message+0x328>)
 800911a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800911e:	f103 0318 	add.w	r3, r3, #24
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	f001 fca5 	bl	800aa72 <strncmp>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d14f      	bne.n	80091ce <Process_Received_Message+0x266>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 800912e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009132:	3b0c      	subs	r3, #12
 8009134:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009138:	f102 0218 	add.w	r2, r2, #24
 800913c:	6812      	ldr	r2, [r2, #0]
 800913e:	494d      	ldr	r1, [pc, #308]	; (8009274 <Process_Received_Message+0x30c>)
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fc67 	bl	800aa14 <siprintf>
			sprintf(str3, "Configured the CC1200 with Receive Settings\r\n");
 8009146:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800914a:	3b24      	subs	r3, #36	; 0x24
 800914c:	4951      	ldr	r1, [pc, #324]	; (8009294 <Process_Received_Message+0x32c>)
 800914e:	4618      	mov	r0, r3
 8009150:	f001 fc60 	bl	800aa14 <siprintf>
			check = CC1200_Configure(&SPI_Info, Receive_Register_Settings, Receive_Extended_Register_Settings);
 8009154:	4a50      	ldr	r2, [pc, #320]	; (8009298 <Process_Received_Message+0x330>)
 8009156:	4951      	ldr	r1, [pc, #324]	; (800929c <Process_Received_Message+0x334>)
 8009158:	483f      	ldr	r0, [pc, #252]	; (8009258 <Process_Received_Message+0x2f0>)
 800915a:	f7f7 f9ba 	bl	80004d2 <CC1200_Configure>
 800915e:	4603      	mov	r3, r0
 8009160:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009164:	f102 0217 	add.w	r2, r2, #23
 8009168:	7013      	strb	r3, [r2, #0]
			if (check == 1)
 800916a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800916e:	f103 0317 	add.w	r3, r3, #23
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d107      	bne.n	8009188 <Process_Received_Message+0x220>
			{
				sprintf(str4, "Error Occurred\r\n");
 8009178:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800917c:	3b3c      	subs	r3, #60	; 0x3c
 800917e:	4941      	ldr	r1, [pc, #260]	; (8009284 <Process_Received_Message+0x31c>)
 8009180:	4618      	mov	r0, r3
 8009182:	f001 fc47 	bl	800aa14 <siprintf>
 8009186:	e006      	b.n	8009196 <Process_Received_Message+0x22e>
			}
			else // check == 0
			{
				sprintf(str4, "No Error Occurred\r\n");
 8009188:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800918c:	3b3c      	subs	r3, #60	; 0x3c
 800918e:	493e      	ldr	r1, [pc, #248]	; (8009288 <Process_Received_Message+0x320>)
 8009190:	4618      	mov	r0, r3
 8009192:	f001 fc3f 	bl	800aa14 <siprintf>
			}
			Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4); // include str4
 8009196:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800919a:	390c      	subs	r1, #12
 800919c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80091a0:	3a34      	subs	r2, #52	; 0x34
 80091a2:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80091a6:	381c      	subs	r0, #28
 80091a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80091ac:	3b3c      	subs	r3, #60	; 0x3c
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091b4:	3b24      	subs	r3, #36	; 0x24
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	460b      	mov	r3, r1
 80091ba:	4934      	ldr	r1, [pc, #208]	; (800928c <Process_Received_Message+0x324>)
 80091bc:	f001 fc2a 	bl	800aa14 <siprintf>
 80091c0:	4603      	mov	r3, r0
 80091c2:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80091c6:	f102 021e 	add.w	r2, r2, #30
 80091ca:	8013      	strh	r3, [r2, #0]
 80091cc:	e029      	b.n	8009222 <Process_Received_Message+0x2ba>
		}
		else
		{
			sprintf(str2, "Invalid Mode: %s\r\n", Token);
 80091ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80091d2:	3b0c      	subs	r3, #12
 80091d4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80091d8:	f102 0218 	add.w	r2, r2, #24
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	4930      	ldr	r1, [pc, #192]	; (80092a0 <Process_Received_Message+0x338>)
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 fc17 	bl	800aa14 <siprintf>
			sprintf(str3, "Could Not Configure the CC1200\r\n");
 80091e6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091ea:	3b24      	subs	r3, #36	; 0x24
 80091ec:	492d      	ldr	r1, [pc, #180]	; (80092a4 <Process_Received_Message+0x33c>)
 80091ee:	4618      	mov	r0, r3
 80091f0:	f001 fc10 	bl	800aa14 <siprintf>
			Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 80091f4:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80091f8:	390c      	subs	r1, #12
 80091fa:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80091fe:	3a34      	subs	r2, #52	; 0x34
 8009200:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009204:	381c      	subs	r0, #28
 8009206:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800920a:	3b24      	subs	r3, #36	; 0x24
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	460b      	mov	r3, r1
 8009210:	4925      	ldr	r1, [pc, #148]	; (80092a8 <Process_Received_Message+0x340>)
 8009212:	f001 fbff 	bl	800aa14 <siprintf>
 8009216:	4603      	mov	r3, r0
 8009218:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800921c:	f102 021e 	add.w	r2, r2, #30
 8009220:	8013      	strh	r3, [r2, #0]
		}

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009222:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009226:	f103 031e 	add.w	r3, r3, #30
 800922a:	881a      	ldrh	r2, [r3, #0]
 800922c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009230:	3b1c      	subs	r3, #28
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff fe71 	bl	8008f1c <CDC_Transmit_FS>
 800923a:	f000 bfc9 	b.w	800a1d0 <Process_Received_Message+0x1268>
 800923e:	bf00      	nop
 8009240:	0800c030 	.word	0x0800c030
 8009244:	0800c038 	.word	0x0800c038
 8009248:	0800c04c 	.word	0x0800c04c
 800924c:	200004c4 	.word	0x200004c4
 8009250:	40020400 	.word	0x40020400
 8009254:	200005b0 	.word	0x200005b0
 8009258:	200005a0 	.word	0x200005a0
 800925c:	0800c074 	.word	0x0800c074
 8009260:	0800c07c 	.word	0x0800c07c
 8009264:	0800c088 	.word	0x0800c088
 8009268:	0800c0a0 	.word	0x0800c0a0
 800926c:	0800c0a4 	.word	0x0800c0a4
 8009270:	0800c0a8 	.word	0x0800c0a8
 8009274:	0800c0b4 	.word	0x0800c0b4
 8009278:	0800c0c8 	.word	0x0800c0c8
 800927c:	20000060 	.word	0x20000060
 8009280:	20000000 	.word	0x20000000
 8009284:	0800c0f8 	.word	0x0800c0f8
 8009288:	0800c10c 	.word	0x0800c10c
 800928c:	0800c120 	.word	0x0800c120
 8009290:	0800c12c 	.word	0x0800c12c
 8009294:	0800c134 	.word	0x0800c134
 8009298:	200001c4 	.word	0x200001c4
 800929c:	20000164 	.word	0x20000164
 80092a0:	0800c164 	.word	0x0800c164
 80092a4:	0800c178 	.word	0x0800c178
 80092a8:	0800c19c 	.word	0x0800c19c
	}
	else if (strncmp((char*) rx_buffer, "transmit", strlen("transmit")) == 0)
 80092ac:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80092b0:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80092b4:	2208      	movs	r2, #8
 80092b6:	49b7      	ldr	r1, [pc, #732]	; (8009594 <Process_Received_Message+0x62c>)
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	f001 fbda 	bl	800aa72 <strncmp>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f040 80ad 	bne.w	8009420 <Process_Received_Message+0x4b8>
	{
		sprintf(str1, "User Input: Transmit\r\n");
 80092c6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80092ca:	3b34      	subs	r3, #52	; 0x34
 80092cc:	49b2      	ldr	r1, [pc, #712]	; (8009598 <Process_Received_Message+0x630>)
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 fba0 	bl	800aa14 <siprintf>
		sprintf(str2, "Set the CC1200 into Transmit Mode\r\n");
 80092d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80092d8:	3b0c      	subs	r3, #12
 80092da:	49b0      	ldr	r1, [pc, #704]	; (800959c <Process_Received_Message+0x634>)
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 fb99 	bl	800aa14 <siprintf>
		sprintf(str3, "Transmitted the Following Message: ");
 80092e2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80092e6:	3b24      	subs	r3, #36	; 0x24
 80092e8:	49ad      	ldr	r1, [pc, #692]	; (80095a0 <Process_Received_Message+0x638>)
 80092ea:	4618      	mov	r0, r3
 80092ec:	f001 fb92 	bl	800aa14 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Transmit:"
 80092f0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80092f4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80092f8:	49aa      	ldr	r1, [pc, #680]	; (80095a4 <Process_Received_Message+0x63c>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	f001 fbce 	bl	800aa9c <strtok>
 8009300:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009304:	f103 0318 	add.w	r3, r3, #24
 8009308:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 800930a:	49a7      	ldr	r1, [pc, #668]	; (80095a8 <Process_Received_Message+0x640>)
 800930c:	2000      	movs	r0, #0
 800930e:	f001 fbc5 	bl	800aa9c <strtok>
 8009312:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009316:	f103 0318 	add.w	r3, r3, #24
 800931a:	6018      	str	r0, [r3, #0]
		TX_Packet_Length = strlen(Token);
 800931c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009320:	f103 0318 	add.w	r3, r3, #24
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f7f6 ff29 	bl	800017c <strlen>
 800932a:	4603      	mov	r3, r0
 800932c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009330:	f102 0215 	add.w	r2, r2, #21
 8009334:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "%s\r\n", Token);
 8009336:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800933a:	3b3c      	subs	r3, #60	; 0x3c
 800933c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009340:	f102 0218 	add.w	r2, r2, #24
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	4999      	ldr	r1, [pc, #612]	; (80095ac <Process_Received_Message+0x644>)
 8009348:	4618      	mov	r0, r3
 800934a:	f001 fb63 	bl	800aa14 <siprintf>
		for (i = 0; i < TX_Packet_Length; i++)
 800934e:	2300      	movs	r3, #0
 8009350:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009354:	f102 021d 	add.w	r2, r2, #29
 8009358:	7013      	strb	r3, [r2, #0]
 800935a:	e020      	b.n	800939e <Process_Received_Message+0x436>
		{
			TX_Packet[i] = (uint8_t) (Token[i]);
 800935c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009360:	f103 031d 	add.w	r3, r3, #29
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800936a:	f102 0218 	add.w	r2, r2, #24
 800936e:	6812      	ldr	r2, [r2, #0]
 8009370:	441a      	add	r2, r3
 8009372:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009376:	f103 031d 	add.w	r3, r3, #29
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	7811      	ldrb	r1, [r2, #0]
 800937e:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8009382:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8009386:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < TX_Packet_Length; i++)
 8009388:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800938c:	f103 031d 	add.w	r3, r3, #29
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	3301      	adds	r3, #1
 8009394:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009398:	f102 021d 	add.w	r2, r2, #29
 800939c:	7013      	strb	r3, [r2, #0]
 800939e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093a2:	f103 031d 	add.w	r3, r3, #29
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093ac:	f103 0315 	add.w	r3, r3, #21
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d3d2      	bcc.n	800935c <Process_Received_Message+0x3f4>
		}
		CC1200_Transmit(&SPI_Info, TX_Packet, TX_Packet_Length);
 80093b6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093ba:	f103 0315 	add.w	r3, r3, #21
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	f107 0320 	add.w	r3, r7, #32
 80093c4:	3b14      	subs	r3, #20
 80093c6:	4619      	mov	r1, r3
 80093c8:	4879      	ldr	r0, [pc, #484]	; (80095b0 <Process_Received_Message+0x648>)
 80093ca:	f7f7 fa51 	bl	8000870 <CC1200_Transmit>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 80093ce:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80093d2:	390c      	subs	r1, #12
 80093d4:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80093d8:	3a34      	subs	r2, #52	; 0x34
 80093da:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80093de:	381c      	subs	r0, #28
 80093e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80093e4:	3b3c      	subs	r3, #60	; 0x3c
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80093ec:	3b24      	subs	r3, #36	; 0x24
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	460b      	mov	r3, r1
 80093f2:	4970      	ldr	r1, [pc, #448]	; (80095b4 <Process_Received_Message+0x64c>)
 80093f4:	f001 fb0e 	bl	800aa14 <siprintf>
 80093f8:	4603      	mov	r3, r0
 80093fa:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80093fe:	f102 021e 	add.w	r2, r2, #30
 8009402:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009404:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009408:	f103 031e 	add.w	r3, r3, #30
 800940c:	881a      	ldrh	r2, [r3, #0]
 800940e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009412:	3b1c      	subs	r3, #28
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff fd80 	bl	8008f1c <CDC_Transmit_FS>
 800941c:	f000 bed8 	b.w	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "receive", strlen("receive")) == 0)
 8009420:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009424:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009428:	2207      	movs	r2, #7
 800942a:	4963      	ldr	r1, [pc, #396]	; (80095b8 <Process_Received_Message+0x650>)
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	f001 fb20 	bl	800aa72 <strncmp>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d131      	bne.n	800949c <Process_Received_Message+0x534>
	{
		sprintf(str1, "User Input: Receive\r\n");
 8009438:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800943c:	3b34      	subs	r3, #52	; 0x34
 800943e:	495f      	ldr	r1, [pc, #380]	; (80095bc <Process_Received_Message+0x654>)
 8009440:	4618      	mov	r0, r3
 8009442:	f001 fae7 	bl	800aa14 <siprintf>
		sprintf(str2, "Set the CC1200 into Receive Mode\r\n");
 8009446:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800944a:	3b0c      	subs	r3, #12
 800944c:	495c      	ldr	r1, [pc, #368]	; (80095c0 <Process_Received_Message+0x658>)
 800944e:	4618      	mov	r0, r3
 8009450:	f001 fae0 	bl	800aa14 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // enable RX
 8009454:	2134      	movs	r1, #52	; 0x34
 8009456:	4856      	ldr	r0, [pc, #344]	; (80095b0 <Process_Received_Message+0x648>)
 8009458:	f7f7 f9d7 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 800945c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009460:	3b0c      	subs	r3, #12
 8009462:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009466:	3a34      	subs	r2, #52	; 0x34
 8009468:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800946c:	381c      	subs	r0, #28
 800946e:	4955      	ldr	r1, [pc, #340]	; (80095c4 <Process_Received_Message+0x65c>)
 8009470:	f001 fad0 	bl	800aa14 <siprintf>
 8009474:	4603      	mov	r3, r0
 8009476:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800947a:	f102 021e 	add.w	r2, r2, #30
 800947e:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009480:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009484:	f103 031e 	add.w	r3, r3, #30
 8009488:	881a      	ldrh	r2, [r3, #0]
 800948a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800948e:	3b1c      	subs	r3, #28
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fd42 	bl	8008f1c <CDC_Transmit_FS>
 8009498:	f000 be9a 	b.w	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "read rx fifo", strlen("read rx fifo")) == 0)
 800949c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80094a0:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80094a4:	220c      	movs	r2, #12
 80094a6:	4948      	ldr	r1, [pc, #288]	; (80095c8 <Process_Received_Message+0x660>)
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	f001 fae2 	bl	800aa72 <strncmp>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f040 8091 	bne.w	80095d8 <Process_Received_Message+0x670>
	{

		check = CC1200_Receive(&SPI_Info, RX_Packet);
 80094b6:	4945      	ldr	r1, [pc, #276]	; (80095cc <Process_Received_Message+0x664>)
 80094b8:	483d      	ldr	r0, [pc, #244]	; (80095b0 <Process_Received_Message+0x648>)
 80094ba:	f7f7 fa2a 	bl	8000912 <CC1200_Receive>
 80094be:	4603      	mov	r3, r0
 80094c0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80094c4:	f102 0217 	add.w	r2, r2, #23
 80094c8:	7013      	strb	r3, [r2, #0]

		if (check) // check == 1
 80094ca:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80094ce:	f103 0317 	add.w	r3, r3, #23
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d02a      	beq.n	800952e <Process_Received_Message+0x5c6>
		{
			sprintf(str1, "RX FIFO Empty!\r\n");
 80094d8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80094dc:	3b34      	subs	r3, #52	; 0x34
 80094de:	493c      	ldr	r1, [pc, #240]	; (80095d0 <Process_Received_Message+0x668>)
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fa97 	bl	800aa14 <siprintf>
			strcat(Message, str1);
 80094e6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80094ea:	3a34      	subs	r2, #52	; 0x34
 80094ec:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80094f0:	3b1c      	subs	r3, #28
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 faad 	bl	800aa54 <strcat>
			Message_Length = strlen(Message);
 80094fa:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80094fe:	3b1c      	subs	r3, #28
 8009500:	4618      	mov	r0, r3
 8009502:	f7f6 fe3b 	bl	800017c <strlen>
 8009506:	4603      	mov	r3, r0
 8009508:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800950c:	f102 021e 	add.w	r2, r2, #30
 8009510:	8013      	strh	r3, [r2, #0]
			CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009512:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009516:	f103 031e 	add.w	r3, r3, #30
 800951a:	881a      	ldrh	r2, [r3, #0]
 800951c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009520:	3b1c      	subs	r3, #28
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff fcf9 	bl	8008f1c <CDC_Transmit_FS>
 800952a:	f000 be51 	b.w	800a1d0 <Process_Received_Message+0x1268>
		}
		else // check == 0
		{
			sprintf(Message, "Received the Following Message: ");
 800952e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009532:	3b1c      	subs	r3, #28
 8009534:	4927      	ldr	r1, [pc, #156]	; (80095d4 <Process_Received_Message+0x66c>)
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fa6c 	bl	800aa14 <siprintf>
			sprintf(str1, "%s\r\n", (char*) RX_Packet);
 800953c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009540:	3b34      	subs	r3, #52	; 0x34
 8009542:	4a22      	ldr	r2, [pc, #136]	; (80095cc <Process_Received_Message+0x664>)
 8009544:	4919      	ldr	r1, [pc, #100]	; (80095ac <Process_Received_Message+0x644>)
 8009546:	4618      	mov	r0, r3
 8009548:	f001 fa64 	bl	800aa14 <siprintf>
			strcat(Message, str1);
 800954c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009550:	3a34      	subs	r2, #52	; 0x34
 8009552:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009556:	3b1c      	subs	r3, #28
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f001 fa7a 	bl	800aa54 <strcat>
			Message_Length = strlen(Message);
 8009560:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009564:	3b1c      	subs	r3, #28
 8009566:	4618      	mov	r0, r3
 8009568:	f7f6 fe08 	bl	800017c <strlen>
 800956c:	4603      	mov	r3, r0
 800956e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009572:	f102 021e 	add.w	r2, r2, #30
 8009576:	8013      	strh	r3, [r2, #0]

			CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009578:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800957c:	f103 031e 	add.w	r3, r3, #30
 8009580:	881a      	ldrh	r2, [r3, #0]
 8009582:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009586:	3b1c      	subs	r3, #28
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff fcc6 	bl	8008f1c <CDC_Transmit_FS>
 8009590:	f000 be1e 	b.w	800a1d0 <Process_Received_Message+0x1268>
 8009594:	0800c0a8 	.word	0x0800c0a8
 8009598:	0800c1a4 	.word	0x0800c1a4
 800959c:	0800c1bc 	.word	0x0800c1bc
 80095a0:	0800c1e0 	.word	0x0800c1e0
 80095a4:	0800c0a0 	.word	0x0800c0a0
 80095a8:	0800c0a4 	.word	0x0800c0a4
 80095ac:	0800c204 	.word	0x0800c204
 80095b0:	200005a0 	.word	0x200005a0
 80095b4:	0800c120 	.word	0x0800c120
 80095b8:	0800c12c 	.word	0x0800c12c
 80095bc:	0800c20c 	.word	0x0800c20c
 80095c0:	0800c224 	.word	0x0800c224
 80095c4:	0800c074 	.word	0x0800c074
 80095c8:	0800c248 	.word	0x0800c248
 80095cc:	200005b4 	.word	0x200005b4
 80095d0:	0800c258 	.word	0x0800c258
 80095d4:	0800c26c 	.word	0x0800c26c
		}

	}
	else if (strncmp((char*) rx_buffer, "exit", strlen("exit")) == 0)
 80095d8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80095dc:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80095e0:	2204      	movs	r2, #4
 80095e2:	49c4      	ldr	r1, [pc, #784]	; (80098f4 <Process_Received_Message+0x98c>)
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	f001 fa44 	bl	800aa72 <strncmp>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d13d      	bne.n	800966c <Process_Received_Message+0x704>
	{
		sprintf(str1, "User Input: Exit\r\n");
 80095f0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80095f4:	3b34      	subs	r3, #52	; 0x34
 80095f6:	49c0      	ldr	r1, [pc, #768]	; (80098f8 <Process_Received_Message+0x990>)
 80095f8:	4618      	mov	r0, r3
 80095fa:	f001 fa0b 	bl	800aa14 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 80095fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009602:	3b0c      	subs	r3, #12
 8009604:	49bd      	ldr	r1, [pc, #756]	; (80098fc <Process_Received_Message+0x994>)
 8009606:	4618      	mov	r0, r3
 8009608:	f001 fa04 	bl	800aa14 <siprintf>
		sprintf(str3, "Register Values Can Be Changed\r\n");
 800960c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009610:	3b24      	subs	r3, #36	; 0x24
 8009612:	49bb      	ldr	r1, [pc, #748]	; (8009900 <Process_Received_Message+0x998>)
 8009614:	4618      	mov	r0, r3
 8009616:	f001 f9fd 	bl	800aa14 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SIDLE);
 800961a:	2136      	movs	r1, #54	; 0x36
 800961c:	48b9      	ldr	r0, [pc, #740]	; (8009904 <Process_Received_Message+0x99c>)
 800961e:	f7f7 f8f4 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8009622:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009626:	390c      	subs	r1, #12
 8009628:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800962c:	3a34      	subs	r2, #52	; 0x34
 800962e:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009632:	381c      	subs	r0, #28
 8009634:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009638:	3b24      	subs	r3, #36	; 0x24
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	460b      	mov	r3, r1
 800963e:	49b2      	ldr	r1, [pc, #712]	; (8009908 <Process_Received_Message+0x9a0>)
 8009640:	f001 f9e8 	bl	800aa14 <siprintf>
 8009644:	4603      	mov	r3, r0
 8009646:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800964a:	f102 021e 	add.w	r2, r2, #30
 800964e:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009650:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009654:	f103 031e 	add.w	r3, r3, #30
 8009658:	881a      	ldrh	r2, [r3, #0]
 800965a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800965e:	3b1c      	subs	r3, #28
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f7ff fc5a 	bl	8008f1c <CDC_Transmit_FS>
 8009668:	f000 bdb2 	b.w	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "reset", strlen("reset")) == 0)
 800966c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009670:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009674:	2205      	movs	r2, #5
 8009676:	49a5      	ldr	r1, [pc, #660]	; (800990c <Process_Received_Message+0x9a4>)
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	f001 f9fa 	bl	800aa72 <strncmp>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d13d      	bne.n	8009700 <Process_Received_Message+0x798>
	{
		sprintf(str1, "User Input: Reset\r\n");
 8009684:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009688:	3b34      	subs	r3, #52	; 0x34
 800968a:	49a1      	ldr	r1, [pc, #644]	; (8009910 <Process_Received_Message+0x9a8>)
 800968c:	4618      	mov	r0, r3
 800968e:	f001 f9c1 	bl	800aa14 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8009692:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009696:	3b0c      	subs	r3, #12
 8009698:	4998      	ldr	r1, [pc, #608]	; (80098fc <Process_Received_Message+0x994>)
 800969a:	4618      	mov	r0, r3
 800969c:	f001 f9ba 	bl	800aa14 <siprintf>
		sprintf(str3, "Register Values Reset to Default Values\r\n");
 80096a0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80096a4:	3b24      	subs	r3, #36	; 0x24
 80096a6:	499b      	ldr	r1, [pc, #620]	; (8009914 <Process_Received_Message+0x9ac>)
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 f9b3 	bl	800aa14 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES);
 80096ae:	2130      	movs	r1, #48	; 0x30
 80096b0:	4894      	ldr	r0, [pc, #592]	; (8009904 <Process_Received_Message+0x99c>)
 80096b2:	f7f7 f8aa 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 80096b6:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80096ba:	390c      	subs	r1, #12
 80096bc:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80096c0:	3a34      	subs	r2, #52	; 0x34
 80096c2:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80096c6:	381c      	subs	r0, #28
 80096c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80096cc:	3b24      	subs	r3, #36	; 0x24
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	460b      	mov	r3, r1
 80096d2:	498d      	ldr	r1, [pc, #564]	; (8009908 <Process_Received_Message+0x9a0>)
 80096d4:	f001 f99e 	bl	800aa14 <siprintf>
 80096d8:	4603      	mov	r3, r0
 80096da:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80096de:	f102 021e 	add.w	r2, r2, #30
 80096e2:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80096e4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80096e8:	f103 031e 	add.w	r3, r3, #30
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80096f2:	3b1c      	subs	r3, #28
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff fc10 	bl	8008f1c <CDC_Transmit_FS>
 80096fc:	f000 bd68 	b.w	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "status", strlen("status")) == 0)
 8009700:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009704:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009708:	2206      	movs	r2, #6
 800970a:	4983      	ldr	r1, [pc, #524]	; (8009918 <Process_Received_Message+0x9b0>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f001 f9b0 	bl	800aa72 <strncmp>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d140      	bne.n	800979a <Process_Received_Message+0x832>
	{
		sprintf(str1, "User Input: Status\r\n");
 8009718:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800971c:	3b34      	subs	r3, #52	; 0x34
 800971e:	497f      	ldr	r1, [pc, #508]	; (800991c <Process_Received_Message+0x9b4>)
 8009720:	4618      	mov	r0, r3
 8009722:	f001 f977 	bl	800aa14 <siprintf>
		sprintf(str2, "CC1200 Status: ");
 8009726:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800972a:	3b0c      	subs	r3, #12
 800972c:	497c      	ldr	r1, [pc, #496]	; (8009920 <Process_Received_Message+0x9b8>)
 800972e:	4618      	mov	r0, r3
 8009730:	f001 f970 	bl	800aa14 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8009734:	213d      	movs	r1, #61	; 0x3d
 8009736:	4873      	ldr	r0, [pc, #460]	; (8009904 <Process_Received_Message+0x99c>)
 8009738:	f7f7 f867 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str3, "0X%02X\r\n", MISO_Data[0]);
 800973c:	4b79      	ldr	r3, [pc, #484]	; (8009924 <Process_Received_Message+0x9bc>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009746:	3b24      	subs	r3, #36	; 0x24
 8009748:	4977      	ldr	r1, [pc, #476]	; (8009928 <Process_Received_Message+0x9c0>)
 800974a:	4618      	mov	r0, r3
 800974c:	f001 f962 	bl	800aa14 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8009750:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009754:	390c      	subs	r1, #12
 8009756:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800975a:	3a34      	subs	r2, #52	; 0x34
 800975c:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009760:	381c      	subs	r0, #28
 8009762:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009766:	3b24      	subs	r3, #36	; 0x24
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	460b      	mov	r3, r1
 800976c:	4966      	ldr	r1, [pc, #408]	; (8009908 <Process_Received_Message+0x9a0>)
 800976e:	f001 f951 	bl	800aa14 <siprintf>
 8009772:	4603      	mov	r3, r0
 8009774:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009778:	f102 021e 	add.w	r2, r2, #30
 800977c:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800977e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009782:	f103 031e 	add.w	r3, r3, #30
 8009786:	881a      	ldrh	r2, [r3, #0]
 8009788:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800978c:	3b1c      	subs	r3, #28
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fbc3 	bl	8008f1c <CDC_Transmit_FS>
 8009796:	f000 bd1b 	b.w	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "command", strlen("command")) == 0)
 800979a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800979e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80097a2:	2207      	movs	r2, #7
 80097a4:	4961      	ldr	r1, [pc, #388]	; (800992c <Process_Received_Message+0x9c4>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	f001 f963 	bl	800aa72 <strncmp>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f040 80d0 	bne.w	8009954 <Process_Received_Message+0x9ec>
	{
		sprintf(str1, "User Input: Command\r\n");
 80097b4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80097b8:	3b34      	subs	r3, #52	; 0x34
 80097ba:	495d      	ldr	r1, [pc, #372]	; (8009930 <Process_Received_Message+0x9c8>)
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 f929 	bl	800aa14 <siprintf>
		sprintf(str2, "Issued the Following Command: ");
 80097c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80097c6:	3b0c      	subs	r3, #12
 80097c8:	495a      	ldr	r1, [pc, #360]	; (8009934 <Process_Received_Message+0x9cc>)
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 f922 	bl	800aa14 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Command:"
 80097d0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80097d4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80097d8:	4957      	ldr	r1, [pc, #348]	; (8009938 <Process_Received_Message+0x9d0>)
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	f001 f95e 	bl	800aa9c <strtok>
 80097e0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80097e4:	f103 0318 	add.w	r3, r3, #24
 80097e8:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[command strobe]"
 80097ea:	4954      	ldr	r1, [pc, #336]	; (800993c <Process_Received_Message+0x9d4>)
 80097ec:	2000      	movs	r0, #0
 80097ee:	f001 f955 	bl	800aa9c <strtok>
 80097f2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80097f6:	f103 0318 	add.w	r3, r3, #24
 80097fa:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 80097fc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009800:	3b24      	subs	r3, #36	; 0x24
 8009802:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009806:	f102 0218 	add.w	r2, r2, #24
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	494c      	ldr	r1, [pc, #304]	; (8009940 <Process_Received_Message+0x9d8>)
 800980e:	4618      	mov	r0, r3
 8009810:	f001 f900 	bl	800aa14 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009814:	2210      	movs	r2, #16
 8009816:	2100      	movs	r1, #0
 8009818:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800981c:	f103 0318 	add.w	r3, r3, #24
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f001 fa13 	bl	800ac4c <strtol>
 8009826:	4603      	mov	r3, r0
 8009828:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800982c:	f102 021c 	add.w	r2, r2, #28
 8009830:	7013      	strb	r3, [r2, #0]
		check = CC1200_Command_Strobe(&SPI_Info, Register_Address); // issue command
 8009832:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009836:	f103 031c 	add.w	r3, r3, #28
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	4619      	mov	r1, r3
 800983e:	4831      	ldr	r0, [pc, #196]	; (8009904 <Process_Received_Message+0x99c>)
 8009840:	f7f6 ffe3 	bl	800080a <CC1200_Command_Strobe>
 8009844:	4603      	mov	r3, r0
 8009846:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800984a:	f102 0217 	add.w	r2, r2, #23
 800984e:	7013      	strb	r3, [r2, #0]
		if (check == 1)
 8009850:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009854:	f103 0317 	add.w	r3, r3, #23
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d107      	bne.n	800986e <Process_Received_Message+0x906>
		{
			sprintf(str4, "Invalid Command\r\n");
 800985e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009862:	3b3c      	subs	r3, #60	; 0x3c
 8009864:	4937      	ldr	r1, [pc, #220]	; (8009944 <Process_Received_Message+0x9dc>)
 8009866:	4618      	mov	r0, r3
 8009868:	f001 f8d4 	bl	800aa14 <siprintf>
 800986c:	e006      	b.n	800987c <Process_Received_Message+0x914>
		}
		else // check == 0
		{
			sprintf(str4, "Valid Command\r\n");
 800986e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009872:	3b3c      	subs	r3, #60	; 0x3c
 8009874:	4934      	ldr	r1, [pc, #208]	; (8009948 <Process_Received_Message+0x9e0>)
 8009876:	4618      	mov	r0, r3
 8009878:	f001 f8cc 	bl	800aa14 <siprintf>
		}
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 800987c:	213d      	movs	r1, #61	; 0x3d
 800987e:	4821      	ldr	r0, [pc, #132]	; (8009904 <Process_Received_Message+0x99c>)
 8009880:	f7f6 ffc3 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str5, "CC1200 State: 0X%02X\r\n", MISO_Data[0]);
 8009884:	4b27      	ldr	r3, [pc, #156]	; (8009924 <Process_Received_Message+0x9bc>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800988e:	3b14      	subs	r3, #20
 8009890:	492e      	ldr	r1, [pc, #184]	; (800994c <Process_Received_Message+0x9e4>)
 8009892:	4618      	mov	r0, r3
 8009894:	f001 f8be 	bl	800aa14 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009898:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800989c:	390c      	subs	r1, #12
 800989e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80098a2:	3a34      	subs	r2, #52	; 0x34
 80098a4:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80098a8:	381c      	subs	r0, #28
 80098aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80098ae:	3b14      	subs	r3, #20
 80098b0:	9302      	str	r3, [sp, #8]
 80098b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80098b6:	3b3c      	subs	r3, #60	; 0x3c
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80098be:	3b24      	subs	r3, #36	; 0x24
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	460b      	mov	r3, r1
 80098c4:	4922      	ldr	r1, [pc, #136]	; (8009950 <Process_Received_Message+0x9e8>)
 80098c6:	f001 f8a5 	bl	800aa14 <siprintf>
 80098ca:	4603      	mov	r3, r0
 80098cc:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80098d0:	f102 021e 	add.w	r2, r2, #30
 80098d4:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80098d6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80098da:	f103 031e 	add.w	r3, r3, #30
 80098de:	881a      	ldrh	r2, [r3, #0]
 80098e0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80098e4:	3b1c      	subs	r3, #28
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff fb17 	bl	8008f1c <CDC_Transmit_FS>
 80098ee:	f000 bc6f 	b.w	800a1d0 <Process_Received_Message+0x1268>
 80098f2:	bf00      	nop
 80098f4:	0800c290 	.word	0x0800c290
 80098f8:	0800c298 	.word	0x0800c298
 80098fc:	0800c2ac 	.word	0x0800c2ac
 8009900:	0800c2cc 	.word	0x0800c2cc
 8009904:	200005a0 	.word	0x200005a0
 8009908:	0800c19c 	.word	0x0800c19c
 800990c:	0800c2f0 	.word	0x0800c2f0
 8009910:	0800c2f8 	.word	0x0800c2f8
 8009914:	0800c30c 	.word	0x0800c30c
 8009918:	0800c338 	.word	0x0800c338
 800991c:	0800c340 	.word	0x0800c340
 8009920:	0800c358 	.word	0x0800c358
 8009924:	200005b0 	.word	0x200005b0
 8009928:	0800c368 	.word	0x0800c368
 800992c:	0800c374 	.word	0x0800c374
 8009930:	0800c37c 	.word	0x0800c37c
 8009934:	0800c394 	.word	0x0800c394
 8009938:	0800c0a0 	.word	0x0800c0a0
 800993c:	0800c0a4 	.word	0x0800c0a4
 8009940:	0800c204 	.word	0x0800c204
 8009944:	0800c3b4 	.word	0x0800c3b4
 8009948:	0800c3c8 	.word	0x0800c3c8
 800994c:	0800c3d8 	.word	0x0800c3d8
 8009950:	0800c3f0 	.word	0x0800c3f0
	}
	else if (strncmp((char*) rx_buffer, "print registers", strlen("print registers")) == 0)
 8009954:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009958:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800995c:	220f      	movs	r2, #15
 800995e:	498c      	ldr	r1, [pc, #560]	; (8009b90 <Process_Received_Message+0xc28>)
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f001 f886 	bl	800aa72 <strncmp>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	f040 8121 	bne.w	8009bb0 <Process_Received_Message+0xc48>
	{
		sprintf(Message, "User Input: Print Registers\r\n");
 800996e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009972:	3b1c      	subs	r3, #28
 8009974:	4987      	ldr	r1, [pc, #540]	; (8009b94 <Process_Received_Message+0xc2c>)
 8009976:	4618      	mov	r0, r3
 8009978:	f001 f84c 	bl	800aa14 <siprintf>
		strcat(Message, "Register Space\r\n");
 800997c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009980:	3b1c      	subs	r3, #28
 8009982:	4618      	mov	r0, r3
 8009984:	f7f6 fbfa 	bl	800017c <strlen>
 8009988:	4603      	mov	r3, r0
 800998a:	461a      	mov	r2, r3
 800998c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009990:	3b1c      	subs	r3, #28
 8009992:	4413      	add	r3, r2
 8009994:	4a80      	ldr	r2, [pc, #512]	; (8009b98 <Process_Received_Message+0xc30>)
 8009996:	461d      	mov	r5, r3
 8009998:	4614      	mov	r4, r2
 800999a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800999c:	6028      	str	r0, [r5, #0]
 800999e:	6069      	str	r1, [r5, #4]
 80099a0:	60aa      	str	r2, [r5, #8]
 80099a2:	60eb      	str	r3, [r5, #12]
 80099a4:	7823      	ldrb	r3, [r4, #0]
 80099a6:	742b      	strb	r3, [r5, #16]
		strcat(Message, "Address; Value\r\n");
 80099a8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80099ac:	3b1c      	subs	r3, #28
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f6 fbe4 	bl	800017c <strlen>
 80099b4:	4603      	mov	r3, r0
 80099b6:	461a      	mov	r2, r3
 80099b8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80099bc:	3b1c      	subs	r3, #28
 80099be:	4413      	add	r3, r2
 80099c0:	4a76      	ldr	r2, [pc, #472]	; (8009b9c <Process_Received_Message+0xc34>)
 80099c2:	461d      	mov	r5, r3
 80099c4:	4614      	mov	r4, r2
 80099c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099c8:	6028      	str	r0, [r5, #0]
 80099ca:	6069      	str	r1, [r5, #4]
 80099cc:	60aa      	str	r2, [r5, #8]
 80099ce:	60eb      	str	r3, [r5, #12]
 80099d0:	7823      	ldrb	r3, [r4, #0]
 80099d2:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 80099d4:	2300      	movs	r3, #0
 80099d6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80099da:	f102 021c 	add.w	r2, r2, #28
 80099de:	7013      	strb	r3, [r2, #0]
 80099e0:	e034      	b.n	8009a4c <Process_Received_Message+0xae4>
		{

			CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 80099e2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80099e6:	f103 031c 	add.w	r3, r3, #28
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	486c      	ldr	r0, [pc, #432]	; (8009ba0 <Process_Received_Message+0xc38>)
 80099f0:	f7f6 fe26 	bl	8000640 <CC1200_Read_Single_Register>
			Register_Value = MISO_Data[0];
 80099f4:	4b6b      	ldr	r3, [pc, #428]	; (8009ba4 <Process_Received_Message+0xc3c>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80099fc:	f102 0216 	add.w	r2, r2, #22
 8009a00:	7013      	strb	r3, [r2, #0]
			sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 8009a02:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a06:	f103 031c 	add.w	r3, r3, #28
 8009a0a:	781a      	ldrb	r2, [r3, #0]
 8009a0c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a10:	f103 0316 	add.w	r3, r3, #22
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8009a1a:	3834      	subs	r0, #52	; 0x34
 8009a1c:	4962      	ldr	r1, [pc, #392]	; (8009ba8 <Process_Received_Message+0xc40>)
 8009a1e:	f000 fff9 	bl	800aa14 <siprintf>
			strcat(Message, str1);
 8009a22:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009a26:	3a34      	subs	r2, #52	; 0x34
 8009a28:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009a2c:	3b1c      	subs	r3, #28
 8009a2e:	4611      	mov	r1, r2
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 f80f 	bl	800aa54 <strcat>
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8009a36:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a3a:	f103 031c 	add.w	r3, r3, #28
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	3301      	adds	r3, #1
 8009a42:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009a46:	f102 021c 	add.w	r2, r2, #28
 8009a4a:	7013      	strb	r3, [r2, #0]
 8009a4c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a50:	f103 031c 	add.w	r3, r3, #28
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b2e      	cmp	r3, #46	; 0x2e
 8009a58:	d9c3      	bls.n	80099e2 <Process_Received_Message+0xa7a>
		}
		strcat(Message, "Extended Register Space\r\n");
 8009a5a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009a5e:	3b1c      	subs	r3, #28
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7f6 fb8b 	bl	800017c <strlen>
 8009a66:	4603      	mov	r3, r0
 8009a68:	461a      	mov	r2, r3
 8009a6a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009a6e:	3b1c      	subs	r3, #28
 8009a70:	4413      	add	r3, r2
 8009a72:	4a4e      	ldr	r2, [pc, #312]	; (8009bac <Process_Received_Message+0xc44>)
 8009a74:	461d      	mov	r5, r3
 8009a76:	4614      	mov	r4, r2
 8009a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a7a:	6028      	str	r0, [r5, #0]
 8009a7c:	6069      	str	r1, [r5, #4]
 8009a7e:	60aa      	str	r2, [r5, #8]
 8009a80:	60eb      	str	r3, [r5, #12]
 8009a82:	cc03      	ldmia	r4!, {r0, r1}
 8009a84:	6128      	str	r0, [r5, #16]
 8009a86:	6169      	str	r1, [r5, #20]
 8009a88:	8823      	ldrh	r3, [r4, #0]
 8009a8a:	832b      	strh	r3, [r5, #24]
		strcat(Message, "Address; Value\r\n");
 8009a8c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009a90:	3b1c      	subs	r3, #28
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f6 fb72 	bl	800017c <strlen>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009aa0:	3b1c      	subs	r3, #28
 8009aa2:	4413      	add	r3, r2
 8009aa4:	4a3d      	ldr	r2, [pc, #244]	; (8009b9c <Process_Received_Message+0xc34>)
 8009aa6:	461d      	mov	r5, r3
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aac:	6028      	str	r0, [r5, #0]
 8009aae:	6069      	str	r1, [r5, #4]
 8009ab0:	60aa      	str	r2, [r5, #8]
 8009ab2:	60eb      	str	r3, [r5, #12]
 8009ab4:	7823      	ldrb	r3, [r4, #0]
 8009ab6:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009abe:	f102 021c 	add.w	r2, r2, #28
 8009ac2:	7013      	strb	r3, [r2, #0]
 8009ac4:	e043      	b.n	8009b4e <Process_Received_Message+0xbe6>
		{
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 8009ac6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009aca:	f103 031c 	add.w	r3, r3, #28
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4833      	ldr	r0, [pc, #204]	; (8009ba0 <Process_Received_Message+0xc38>)
 8009ad4:	f7f6 fe46 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009ade:	f102 0217 	add.w	r2, r2, #23
 8009ae2:	7013      	strb	r3, [r2, #0]
			if (check == 0)
 8009ae4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009ae8:	f103 0317 	add.w	r3, r3, #23
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d121      	bne.n	8009b36 <Process_Received_Message+0xbce>
			{
				Register_Value = MISO_Data[0];
 8009af2:	4b2c      	ldr	r3, [pc, #176]	; (8009ba4 <Process_Received_Message+0xc3c>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009afa:	f102 0216 	add.w	r2, r2, #22
 8009afe:	7013      	strb	r3, [r2, #0]
				sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 8009b00:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b04:	f103 031c 	add.w	r3, r3, #28
 8009b08:	781a      	ldrb	r2, [r3, #0]
 8009b0a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b0e:	f103 0316 	add.w	r3, r3, #22
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8009b18:	3834      	subs	r0, #52	; 0x34
 8009b1a:	4923      	ldr	r1, [pc, #140]	; (8009ba8 <Process_Received_Message+0xc40>)
 8009b1c:	f000 ff7a 	bl	800aa14 <siprintf>
				strcat(Message, str1);
 8009b20:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009b24:	3a34      	subs	r2, #52	; 0x34
 8009b26:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009b2a:	3b1c      	subs	r3, #28
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 ff90 	bl	800aa54 <strcat>
 8009b34:	e000      	b.n	8009b38 <Process_Received_Message+0xbd0>
			}
			else
			{
				continue;
 8009b36:	bf00      	nop
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 8009b38:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b3c:	f103 031c 	add.w	r3, r3, #28
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	3301      	adds	r3, #1
 8009b44:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009b48:	f102 021c 	add.w	r2, r2, #28
 8009b4c:	7013      	strb	r3, [r2, #0]
 8009b4e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b52:	f103 031c 	add.w	r3, r3, #28
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	2bda      	cmp	r3, #218	; 0xda
 8009b5a:	d9b4      	bls.n	8009ac6 <Process_Received_Message+0xb5e>
			}
		}
		Message_Length = strlen(Message);
 8009b5c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009b60:	3b1c      	subs	r3, #28
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f6 fb0a 	bl	800017c <strlen>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009b6e:	f102 021e 	add.w	r2, r2, #30
 8009b72:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009b74:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b78:	f103 031e 	add.w	r3, r3, #30
 8009b7c:	881a      	ldrh	r2, [r3, #0]
 8009b7e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009b82:	3b1c      	subs	r3, #28
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff f9c8 	bl	8008f1c <CDC_Transmit_FS>
 8009b8c:	e320      	b.n	800a1d0 <Process_Received_Message+0x1268>
 8009b8e:	bf00      	nop
 8009b90:	0800c3fc 	.word	0x0800c3fc
 8009b94:	0800c40c 	.word	0x0800c40c
 8009b98:	0800c42c 	.word	0x0800c42c
 8009b9c:	0800c440 	.word	0x0800c440
 8009ba0:	200005a0 	.word	0x200005a0
 8009ba4:	200005b0 	.word	0x200005b0
 8009ba8:	0800c454 	.word	0x0800c454
 8009bac:	0800c468 	.word	0x0800c468
	}
	else if (strncmp((char*) rx_buffer, "write register", strlen("write register")) == 0)
 8009bb0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009bb4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009bb8:	220e      	movs	r2, #14
 8009bba:	49b2      	ldr	r1, [pc, #712]	; (8009e84 <Process_Received_Message+0xf1c>)
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	f000 ff58 	bl	800aa72 <strncmp>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f040 80b3 	bne.w	8009d30 <Process_Received_Message+0xdc8>
	{
		sprintf(str1, "User Input: Write Register\r\n");
 8009bca:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009bce:	3b34      	subs	r3, #52	; 0x34
 8009bd0:	49ad      	ldr	r1, [pc, #692]	; (8009e88 <Process_Received_Message+0xf20>)
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 ff1e 	bl	800aa14 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 8009bd8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009bdc:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009be0:	49aa      	ldr	r1, [pc, #680]	; (8009e8c <Process_Received_Message+0xf24>)
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	f000 ff5a 	bl	800aa9c <strtok>
 8009be8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009bec:	f103 0318 	add.w	r3, r3, #24
 8009bf0:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 8009bf2:	49a6      	ldr	r1, [pc, #664]	; (8009e8c <Process_Received_Message+0xf24>)
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	f000 ff51 	bl	800aa9c <strtok>
 8009bfa:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009bfe:	f103 0318 	add.w	r3, r3, #24
 8009c02:	6018      	str	r0, [r3, #0]
		sprintf(str2, "Address to Access: ");
 8009c04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009c08:	3b0c      	subs	r3, #12
 8009c0a:	49a1      	ldr	r1, [pc, #644]	; (8009e90 <Process_Received_Message+0xf28>)
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 ff01 	bl	800aa14 <siprintf>
		Token = strtok(NULL, " "); // third token "[register address]"
 8009c12:	499e      	ldr	r1, [pc, #632]	; (8009e8c <Process_Received_Message+0xf24>)
 8009c14:	2000      	movs	r0, #0
 8009c16:	f000 ff41 	bl	800aa9c <strtok>
 8009c1a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c1e:	f103 0318 	add.w	r3, r3, #24
 8009c22:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009c24:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009c28:	3b24      	subs	r3, #36	; 0x24
 8009c2a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009c2e:	f102 0218 	add.w	r2, r2, #24
 8009c32:	6812      	ldr	r2, [r2, #0]
 8009c34:	4997      	ldr	r1, [pc, #604]	; (8009e94 <Process_Received_Message+0xf2c>)
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 feec 	bl	800aa14 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	2100      	movs	r1, #0
 8009c40:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c44:	f103 0318 	add.w	r3, r3, #24
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	f000 ffff 	bl	800ac4c <strtol>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009c54:	f102 021c 	add.w	r2, r2, #28
 8009c58:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 8009c5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009c5e:	3b3c      	subs	r3, #60	; 0x3c
 8009c60:	498d      	ldr	r1, [pc, #564]	; (8009e98 <Process_Received_Message+0xf30>)
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fed6 	bl	800aa14 <siprintf>
		Token = strtok(NULL, "\r\n"); // fourth token "[register value]"
 8009c68:	498c      	ldr	r1, [pc, #560]	; (8009e9c <Process_Received_Message+0xf34>)
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f000 ff16 	bl	800aa9c <strtok>
 8009c70:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c74:	f103 0318 	add.w	r3, r3, #24
 8009c78:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 8009c7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009c7e:	3b14      	subs	r3, #20
 8009c80:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009c84:	f102 0218 	add.w	r2, r2, #24
 8009c88:	6812      	ldr	r2, [r2, #0]
 8009c8a:	4982      	ldr	r1, [pc, #520]	; (8009e94 <Process_Received_Message+0xf2c>)
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fec1 	bl	800aa14 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8009c92:	2210      	movs	r2, #16
 8009c94:	2100      	movs	r1, #0
 8009c96:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c9a:	f103 0318 	add.w	r3, r3, #24
 8009c9e:	6818      	ldr	r0, [r3, #0]
 8009ca0:	f000 ffd4 	bl	800ac4c <strtol>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009caa:	f102 0216 	add.w	r2, r2, #22
 8009cae:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 8009cb0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009cb4:	f103 0316 	add.w	r3, r3, #22
 8009cb8:	781a      	ldrb	r2, [r3, #0]
 8009cba:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009cbe:	f103 031c 	add.w	r3, r3, #28
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4876      	ldr	r0, [pc, #472]	; (8009ea0 <Process_Received_Message+0xf38>)
 8009cc8:	f7f6 fc7e 	bl	80005c8 <CC1200_Write_Single_Register>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009cd2:	f102 0217 	add.w	r2, r2, #23
 8009cd6:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009cd8:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009cdc:	390c      	subs	r1, #12
 8009cde:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009ce2:	3a34      	subs	r2, #52	; 0x34
 8009ce4:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009ce8:	381c      	subs	r0, #28
 8009cea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009cee:	3b14      	subs	r3, #20
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009cf6:	3b3c      	subs	r3, #60	; 0x3c
 8009cf8:	9301      	str	r3, [sp, #4]
 8009cfa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009cfe:	3b24      	subs	r3, #36	; 0x24
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	460b      	mov	r3, r1
 8009d04:	4967      	ldr	r1, [pc, #412]	; (8009ea4 <Process_Received_Message+0xf3c>)
 8009d06:	f000 fe85 	bl	800aa14 <siprintf>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009d10:	f102 021e 	add.w	r2, r2, #30
 8009d14:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009d16:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009d1a:	f103 031e 	add.w	r3, r3, #30
 8009d1e:	881a      	ldrh	r2, [r3, #0]
 8009d20:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009d24:	3b1c      	subs	r3, #28
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff f8f7 	bl	8008f1c <CDC_Transmit_FS>
 8009d2e:	e24f      	b.n	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "read register", strlen("read register")) == 0)
 8009d30:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009d34:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009d38:	220d      	movs	r2, #13
 8009d3a:	495b      	ldr	r1, [pc, #364]	; (8009ea8 <Process_Received_Message+0xf40>)
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	f000 fe98 	bl	800aa72 <strncmp>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f040 80b9 	bne.w	8009ebc <Process_Received_Message+0xf54>
	{
		sprintf(str1, "User Input: Read Register\r\n");
 8009d4a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009d4e:	3b34      	subs	r3, #52	; 0x34
 8009d50:	4956      	ldr	r1, [pc, #344]	; (8009eac <Process_Received_Message+0xf44>)
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 fe5e 	bl	800aa14 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009d58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009d5c:	3b0c      	subs	r3, #12
 8009d5e:	494c      	ldr	r1, [pc, #304]	; (8009e90 <Process_Received_Message+0xf28>)
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fe57 	bl	800aa14 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8009d66:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009d6a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009d6e:	4947      	ldr	r1, [pc, #284]	; (8009e8c <Process_Received_Message+0xf24>)
 8009d70:	6818      	ldr	r0, [r3, #0]
 8009d72:	f000 fe93 	bl	800aa9c <strtok>
 8009d76:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009d7a:	f103 0318 	add.w	r3, r3, #24
 8009d7e:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 8009d80:	4942      	ldr	r1, [pc, #264]	; (8009e8c <Process_Received_Message+0xf24>)
 8009d82:	2000      	movs	r0, #0
 8009d84:	f000 fe8a 	bl	800aa9c <strtok>
 8009d88:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009d8c:	f103 0318 	add.w	r3, r3, #24
 8009d90:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // third token "[register address]"
 8009d92:	4942      	ldr	r1, [pc, #264]	; (8009e9c <Process_Received_Message+0xf34>)
 8009d94:	2000      	movs	r0, #0
 8009d96:	f000 fe81 	bl	800aa9c <strtok>
 8009d9a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009d9e:	f103 0318 	add.w	r3, r3, #24
 8009da2:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009da4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009da8:	3b24      	subs	r3, #36	; 0x24
 8009daa:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009dae:	f102 0218 	add.w	r2, r2, #24
 8009db2:	6812      	ldr	r2, [r2, #0]
 8009db4:	4937      	ldr	r1, [pc, #220]	; (8009e94 <Process_Received_Message+0xf2c>)
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fe2c 	bl	800aa14 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009dbc:	2210      	movs	r2, #16
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009dc4:	f103 0318 	add.w	r3, r3, #24
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	f000 ff3f 	bl	800ac4c <strtol>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009dd4:	f102 021c 	add.w	r2, r2, #28
 8009dd8:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8009dda:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009dde:	f103 031c 	add.w	r3, r3, #28
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	482e      	ldr	r0, [pc, #184]	; (8009ea0 <Process_Received_Message+0xf38>)
 8009de8:	f7f6 fc2a 	bl	8000640 <CC1200_Read_Single_Register>
 8009dec:	4603      	mov	r3, r0
 8009dee:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009df2:	f102 0217 	add.w	r2, r2, #23
 8009df6:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 8009df8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009dfc:	3b3c      	subs	r3, #60	; 0x3c
 8009dfe:	492c      	ldr	r1, [pc, #176]	; (8009eb0 <Process_Received_Message+0xf48>)
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 fe07 	bl	800aa14 <siprintf>
		Register_Value = MISO_Data[0];
 8009e06:	4b2b      	ldr	r3, [pc, #172]	; (8009eb4 <Process_Received_Message+0xf4c>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009e0e:	f102 0216 	add.w	r2, r2, #22
 8009e12:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 8009e14:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009e18:	f103 0316 	add.w	r3, r3, #22
 8009e1c:	781a      	ldrb	r2, [r3, #0]
 8009e1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009e22:	3b14      	subs	r3, #20
 8009e24:	4924      	ldr	r1, [pc, #144]	; (8009eb8 <Process_Received_Message+0xf50>)
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fdf4 	bl	800aa14 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009e2c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009e30:	390c      	subs	r1, #12
 8009e32:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009e36:	3a34      	subs	r2, #52	; 0x34
 8009e38:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009e3c:	381c      	subs	r0, #28
 8009e3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009e42:	3b14      	subs	r3, #20
 8009e44:	9302      	str	r3, [sp, #8]
 8009e46:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009e4a:	3b3c      	subs	r3, #60	; 0x3c
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009e52:	3b24      	subs	r3, #36	; 0x24
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	460b      	mov	r3, r1
 8009e58:	4912      	ldr	r1, [pc, #72]	; (8009ea4 <Process_Received_Message+0xf3c>)
 8009e5a:	f000 fddb 	bl	800aa14 <siprintf>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009e64:	f102 021e 	add.w	r2, r2, #30
 8009e68:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009e6a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009e6e:	f103 031e 	add.w	r3, r3, #30
 8009e72:	881a      	ldrh	r2, [r3, #0]
 8009e74:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009e78:	3b1c      	subs	r3, #28
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff f84d 	bl	8008f1c <CDC_Transmit_FS>
 8009e82:	e1a5      	b.n	800a1d0 <Process_Received_Message+0x1268>
 8009e84:	0800c484 	.word	0x0800c484
 8009e88:	0800c494 	.word	0x0800c494
 8009e8c:	0800c0a0 	.word	0x0800c0a0
 8009e90:	0800c4b4 	.word	0x0800c4b4
 8009e94:	0800c204 	.word	0x0800c204
 8009e98:	0800c4c8 	.word	0x0800c4c8
 8009e9c:	0800c0a4 	.word	0x0800c0a4
 8009ea0:	200005a0 	.word	0x200005a0
 8009ea4:	0800c3f0 	.word	0x0800c3f0
 8009ea8:	0800c4d8 	.word	0x0800c4d8
 8009eac:	0800c4e8 	.word	0x0800c4e8
 8009eb0:	0800c504 	.word	0x0800c504
 8009eb4:	200005b0 	.word	0x200005b0
 8009eb8:	0800c368 	.word	0x0800c368
	}
	else if (strncmp((char*) rx_buffer, "write extended register", strlen("write extended register")) == 0)
 8009ebc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009ec0:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009ec4:	2217      	movs	r2, #23
 8009ec6:	49c6      	ldr	r1, [pc, #792]	; (800a1e0 <Process_Received_Message+0x1278>)
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	f000 fdd2 	bl	800aa72 <strncmp>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f040 80bc 	bne.w	800a04e <Process_Received_Message+0x10e6>
	{
		sprintf(str1, "User Input: Write Extended Register\r\n");
 8009ed6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009eda:	3b34      	subs	r3, #52	; 0x34
 8009edc:	49c1      	ldr	r1, [pc, #772]	; (800a1e4 <Process_Received_Message+0x127c>)
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 fd98 	bl	800aa14 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009ee4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009ee8:	3b0c      	subs	r3, #12
 8009eea:	49bf      	ldr	r1, [pc, #764]	; (800a1e8 <Process_Received_Message+0x1280>)
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fd91 	bl	800aa14 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 8009ef2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009ef6:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009efa:	49bc      	ldr	r1, [pc, #752]	; (800a1ec <Process_Received_Message+0x1284>)
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	f000 fdcd 	bl	800aa9c <strtok>
 8009f02:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f06:	f103 0318 	add.w	r3, r3, #24
 8009f0a:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 8009f0c:	49b7      	ldr	r1, [pc, #732]	; (800a1ec <Process_Received_Message+0x1284>)
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f000 fdc4 	bl	800aa9c <strtok>
 8009f14:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f18:	f103 0318 	add.w	r3, r3, #24
 8009f1c:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 8009f1e:	49b3      	ldr	r1, [pc, #716]	; (800a1ec <Process_Received_Message+0x1284>)
 8009f20:	2000      	movs	r0, #0
 8009f22:	f000 fdbb 	bl	800aa9c <strtok>
 8009f26:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f2a:	f103 0318 	add.w	r3, r3, #24
 8009f2e:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // fourth token "[register address]"
 8009f30:	49ae      	ldr	r1, [pc, #696]	; (800a1ec <Process_Received_Message+0x1284>)
 8009f32:	2000      	movs	r0, #0
 8009f34:	f000 fdb2 	bl	800aa9c <strtok>
 8009f38:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f3c:	f103 0318 	add.w	r3, r3, #24
 8009f40:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009f42:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009f46:	3b24      	subs	r3, #36	; 0x24
 8009f48:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009f4c:	f102 0218 	add.w	r2, r2, #24
 8009f50:	6812      	ldr	r2, [r2, #0]
 8009f52:	49a7      	ldr	r1, [pc, #668]	; (800a1f0 <Process_Received_Message+0x1288>)
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 fd5d 	bl	800aa14 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009f5a:	2210      	movs	r2, #16
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f62:	f103 0318 	add.w	r3, r3, #24
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	f000 fe70 	bl	800ac4c <strtol>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009f72:	f102 021c 	add.w	r2, r2, #28
 8009f76:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 8009f78:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009f7c:	3b3c      	subs	r3, #60	; 0x3c
 8009f7e:	499d      	ldr	r1, [pc, #628]	; (800a1f4 <Process_Received_Message+0x128c>)
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fd47 	bl	800aa14 <siprintf>
		Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8009f86:	499c      	ldr	r1, [pc, #624]	; (800a1f8 <Process_Received_Message+0x1290>)
 8009f88:	2000      	movs	r0, #0
 8009f8a:	f000 fd87 	bl	800aa9c <strtok>
 8009f8e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f92:	f103 0318 	add.w	r3, r3, #24
 8009f96:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 8009f98:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009f9c:	3b14      	subs	r3, #20
 8009f9e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009fa2:	f102 0218 	add.w	r2, r2, #24
 8009fa6:	6812      	ldr	r2, [r2, #0]
 8009fa8:	4991      	ldr	r1, [pc, #580]	; (800a1f0 <Process_Received_Message+0x1288>)
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fd32 	bl	800aa14 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8009fb0:	2210      	movs	r2, #16
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009fb8:	f103 0318 	add.w	r3, r3, #24
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f000 fe45 	bl	800ac4c <strtol>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009fc8:	f102 0216 	add.w	r2, r2, #22
 8009fcc:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 8009fce:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009fd2:	f103 0316 	add.w	r3, r3, #22
 8009fd6:	781a      	ldrb	r2, [r3, #0]
 8009fd8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009fdc:	f103 031c 	add.w	r3, r3, #28
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4885      	ldr	r0, [pc, #532]	; (800a1fc <Process_Received_Message+0x1294>)
 8009fe6:	f7f6 fb6b 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009ff0:	f102 0217 	add.w	r2, r2, #23
 8009ff4:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009ff6:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009ffa:	390c      	subs	r1, #12
 8009ffc:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a000:	3a34      	subs	r2, #52	; 0x34
 800a002:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800a006:	381c      	subs	r0, #28
 800a008:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a00c:	3b14      	subs	r3, #20
 800a00e:	9302      	str	r3, [sp, #8]
 800a010:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a014:	3b3c      	subs	r3, #60	; 0x3c
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a01c:	3b24      	subs	r3, #36	; 0x24
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	460b      	mov	r3, r1
 800a022:	4977      	ldr	r1, [pc, #476]	; (800a200 <Process_Received_Message+0x1298>)
 800a024:	f000 fcf6 	bl	800aa14 <siprintf>
 800a028:	4603      	mov	r3, r0
 800a02a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a02e:	f102 021e 	add.w	r2, r2, #30
 800a032:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800a034:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a038:	f103 031e 	add.w	r3, r3, #30
 800a03c:	881a      	ldrh	r2, [r3, #0]
 800a03e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800a042:	3b1c      	subs	r3, #28
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe ff68 	bl	8008f1c <CDC_Transmit_FS>
 800a04c:	e0c0      	b.n	800a1d0 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "read extended register", strlen("read extended register")) == 0)
 800a04e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a052:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800a056:	2216      	movs	r2, #22
 800a058:	496a      	ldr	r1, [pc, #424]	; (800a204 <Process_Received_Message+0x129c>)
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	f000 fd09 	bl	800aa72 <strncmp>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	f040 80a6 	bne.w	800a1b4 <Process_Received_Message+0x124c>
	{
		sprintf(str1, "User Input: Read Extended Register\r\n");
 800a068:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800a06c:	3b34      	subs	r3, #52	; 0x34
 800a06e:	4966      	ldr	r1, [pc, #408]	; (800a208 <Process_Received_Message+0x12a0>)
 800a070:	4618      	mov	r0, r3
 800a072:	f000 fccf 	bl	800aa14 <siprintf>
		sprintf(str2, "Address to Access: ");
 800a076:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800a07a:	3b0c      	subs	r3, #12
 800a07c:	495a      	ldr	r1, [pc, #360]	; (800a1e8 <Process_Received_Message+0x1280>)
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fcc8 	bl	800aa14 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 800a084:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a088:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800a08c:	4957      	ldr	r1, [pc, #348]	; (800a1ec <Process_Received_Message+0x1284>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	f000 fd04 	bl	800aa9c <strtok>
 800a094:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a098:	f103 0318 	add.w	r3, r3, #24
 800a09c:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 800a09e:	4953      	ldr	r1, [pc, #332]	; (800a1ec <Process_Received_Message+0x1284>)
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	f000 fcfb 	bl	800aa9c <strtok>
 800a0a6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0aa:	f103 0318 	add.w	r3, r3, #24
 800a0ae:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 800a0b0:	494e      	ldr	r1, [pc, #312]	; (800a1ec <Process_Received_Message+0x1284>)
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	f000 fcf2 	bl	800aa9c <strtok>
 800a0b8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0bc:	f103 0318 	add.w	r3, r3, #24
 800a0c0:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 800a0c2:	494d      	ldr	r1, [pc, #308]	; (800a1f8 <Process_Received_Message+0x1290>)
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	f000 fce9 	bl	800aa9c <strtok>
 800a0ca:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0ce:	f103 0318 	add.w	r3, r3, #24
 800a0d2:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 800a0d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a0d8:	3b24      	subs	r3, #36	; 0x24
 800a0da:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a0de:	f102 0218 	add.w	r2, r2, #24
 800a0e2:	6812      	ldr	r2, [r2, #0]
 800a0e4:	4942      	ldr	r1, [pc, #264]	; (800a1f0 <Process_Received_Message+0x1288>)
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fc94 	bl	800aa14 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800a0ec:	2210      	movs	r2, #16
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0f4:	f103 0318 	add.w	r3, r3, #24
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	f000 fda7 	bl	800ac4c <strtol>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a104:	f102 021c 	add.w	r2, r2, #28
 800a108:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800a10a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a10e:	f103 031c 	add.w	r3, r3, #28
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	4619      	mov	r1, r3
 800a116:	4839      	ldr	r0, [pc, #228]	; (800a1fc <Process_Received_Message+0x1294>)
 800a118:	f7f6 fb24 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a122:	f102 0217 	add.w	r2, r2, #23
 800a126:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 800a128:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a12c:	3b3c      	subs	r3, #60	; 0x3c
 800a12e:	4937      	ldr	r1, [pc, #220]	; (800a20c <Process_Received_Message+0x12a4>)
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fc6f 	bl	800aa14 <siprintf>
		Register_Value = MISO_Data[0];
 800a136:	4b36      	ldr	r3, [pc, #216]	; (800a210 <Process_Received_Message+0x12a8>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a13e:	f102 0216 	add.w	r2, r2, #22
 800a142:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 800a144:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a148:	f103 0316 	add.w	r3, r3, #22
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a152:	3b14      	subs	r3, #20
 800a154:	492f      	ldr	r1, [pc, #188]	; (800a214 <Process_Received_Message+0x12ac>)
 800a156:	4618      	mov	r0, r3
 800a158:	f000 fc5c 	bl	800aa14 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 800a15c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800a160:	390c      	subs	r1, #12
 800a162:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a166:	3a34      	subs	r2, #52	; 0x34
 800a168:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800a16c:	381c      	subs	r0, #28
 800a16e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a172:	3b14      	subs	r3, #20
 800a174:	9302      	str	r3, [sp, #8]
 800a176:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a17a:	3b3c      	subs	r3, #60	; 0x3c
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a182:	3b24      	subs	r3, #36	; 0x24
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	460b      	mov	r3, r1
 800a188:	491d      	ldr	r1, [pc, #116]	; (800a200 <Process_Received_Message+0x1298>)
 800a18a:	f000 fc43 	bl	800aa14 <siprintf>
 800a18e:	4603      	mov	r3, r0
 800a190:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a194:	f102 021e 	add.w	r2, r2, #30
 800a198:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800a19a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a19e:	f103 031e 	add.w	r3, r3, #30
 800a1a2:	881a      	ldrh	r2, [r3, #0]
 800a1a4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800a1a8:	3b1c      	subs	r3, #28
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe feb5 	bl	8008f1c <CDC_Transmit_FS>
 800a1b2:	e00d      	b.n	800a1d0 <Process_Received_Message+0x1268>
	}
	else
	{
		CDC_Transmit_FS(rx_buffer, rx_buffer_len);
 800a1b4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a1b8:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a1c4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	f7fe fea6 	bl	8008f1c <CDC_Transmit_FS>
	}

	return 0;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f507 572a 	add.w	r7, r7, #10880	; 0x2a80
 800a1d8:	3720      	adds	r7, #32
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	0800c518 	.word	0x0800c518
 800a1e4:	0800c530 	.word	0x0800c530
 800a1e8:	0800c4b4 	.word	0x0800c4b4
 800a1ec:	0800c0a0 	.word	0x0800c0a0
 800a1f0:	0800c204 	.word	0x0800c204
 800a1f4:	0800c4c8 	.word	0x0800c4c8
 800a1f8:	0800c0a4 	.word	0x0800c0a4
 800a1fc:	200005a0 	.word	0x200005a0
 800a200:	0800c3f0 	.word	0x0800c3f0
 800a204:	0800c558 	.word	0x0800c558
 800a208:	0800c570 	.word	0x0800c570
 800a20c:	0800c504 	.word	0x0800c504
 800a210:	200005b0 	.word	0x200005b0
 800a214:	0800c368 	.word	0x0800c368

0800a218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	6039      	str	r1, [r7, #0]
 800a222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2212      	movs	r2, #18
 800a228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	bc80      	pop	{r7}
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	20000410 	.word	0x20000410

0800a23c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2204      	movs	r2, #4
 800a24c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a24e:	4b03      	ldr	r3, [pc, #12]	; (800a25c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	bc80      	pop	{r7}
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	20000424 	.word	0x20000424

0800a260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d105      	bne.n	800a27e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	4907      	ldr	r1, [pc, #28]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
 800a276:	4808      	ldr	r0, [pc, #32]	; (800a298 <USBD_FS_ProductStrDescriptor+0x38>)
 800a278:	f7fe fc80 	bl	8008b7c <USBD_GetString>
 800a27c:	e004      	b.n	800a288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4904      	ldr	r1, [pc, #16]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
 800a282:	4805      	ldr	r0, [pc, #20]	; (800a298 <USBD_FS_ProductStrDescriptor+0x38>)
 800a284:	f7fe fc7a 	bl	8008b7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20001cc8 	.word	0x20001cc8
 800a298:	0800c598 	.word	0x0800c598

0800a29c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	4904      	ldr	r1, [pc, #16]	; (800a2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2ac:	4804      	ldr	r0, [pc, #16]	; (800a2c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2ae:	f7fe fc65 	bl	8008b7c <USBD_GetString>
  return USBD_StrDesc;
 800a2b2:	4b02      	ldr	r3, [pc, #8]	; (800a2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20001cc8 	.word	0x20001cc8
 800a2c0:	0800c5b0 	.word	0x0800c5b0

0800a2c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6039      	str	r1, [r7, #0]
 800a2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	221a      	movs	r2, #26
 800a2d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2d6:	f000 f843 	bl	800a360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2da:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20000428 	.word	0x20000428

0800a2e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	4907      	ldr	r1, [pc, #28]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2fe:	4808      	ldr	r0, [pc, #32]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a300:	f7fe fc3c 	bl	8008b7c <USBD_GetString>
 800a304:	e004      	b.n	800a310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4904      	ldr	r1, [pc, #16]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a30a:	4805      	ldr	r0, [pc, #20]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a30c:	f7fe fc36 	bl	8008b7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a310:	4b02      	ldr	r3, [pc, #8]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20001cc8 	.word	0x20001cc8
 800a320:	0800c5c4 	.word	0x0800c5c4

0800a324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	6039      	str	r1, [r7, #0]
 800a32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	4907      	ldr	r1, [pc, #28]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a33a:	4808      	ldr	r0, [pc, #32]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a33c:	f7fe fc1e 	bl	8008b7c <USBD_GetString>
 800a340:	e004      	b.n	800a34c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	4904      	ldr	r1, [pc, #16]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a346:	4805      	ldr	r0, [pc, #20]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a348:	f7fe fc18 	bl	8008b7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a34c:	4b02      	ldr	r3, [pc, #8]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001cc8 	.word	0x20001cc8
 800a35c:	0800c5d0 	.word	0x0800c5d0

0800a360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <Get_SerialNum+0x44>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a36c:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <Get_SerialNum+0x48>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a372:	4b0e      	ldr	r3, [pc, #56]	; (800a3ac <Get_SerialNum+0x4c>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4413      	add	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d009      	beq.n	800a39a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a386:	2208      	movs	r2, #8
 800a388:	4909      	ldr	r1, [pc, #36]	; (800a3b0 <Get_SerialNum+0x50>)
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 f814 	bl	800a3b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a390:	2204      	movs	r2, #4
 800a392:	4908      	ldr	r1, [pc, #32]	; (800a3b4 <Get_SerialNum+0x54>)
 800a394:	68b8      	ldr	r0, [r7, #8]
 800a396:	f000 f80f 	bl	800a3b8 <IntToUnicode>
  }
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	1ff800d0 	.word	0x1ff800d0
 800a3a8:	1ff800d4 	.word	0x1ff800d4
 800a3ac:	1ff800d8 	.word	0x1ff800d8
 800a3b0:	2000042a 	.word	0x2000042a
 800a3b4:	2000043a 	.word	0x2000043a

0800a3b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]
 800a3ce:	e027      	b.n	800a420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	0f1b      	lsrs	r3, r3, #28
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d80b      	bhi.n	800a3f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	0f1b      	lsrs	r3, r3, #28
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	440b      	add	r3, r1
 800a3e8:	3230      	adds	r2, #48	; 0x30
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	e00a      	b.n	800a406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	0f1b      	lsrs	r3, r3, #28
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	440b      	add	r3, r1
 800a400:	3237      	adds	r2, #55	; 0x37
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	011b      	lsls	r3, r3, #4
 800a40a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	3301      	adds	r3, #1
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	4413      	add	r3, r2
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	3301      	adds	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
 800a420:	7dfa      	ldrb	r2, [r7, #23]
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	429a      	cmp	r2, r3
 800a426:	d3d3      	bcc.n	800a3d0 <IntToUnicode+0x18>
  }
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	bc80      	pop	{r7}
 800a432:	4770      	bx	lr

0800a434 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d106      	bne.n	800a454 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <HAL_PCDEx_SetConnectionState+0x38>)
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	4a08      	ldr	r2, [pc, #32]	; (800a46c <HAL_PCDEx_SetConnectionState+0x38>)
 800a44c:	f043 0301 	orr.w	r3, r3, #1
 800a450:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800a452:	e005      	b.n	800a460 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <HAL_PCDEx_SetConnectionState+0x38>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4a04      	ldr	r2, [pc, #16]	; (800a46c <HAL_PCDEx_SetConnectionState+0x38>)
 800a45a:	f023 0301 	bic.w	r3, r3, #1
 800a45e:	6053      	str	r3, [r2, #4]
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	bc80      	pop	{r7}
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	40010000 	.word	0x40010000

0800a470 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a0d      	ldr	r2, [pc, #52]	; (800a4b4 <HAL_PCD_MspInit+0x44>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d113      	bne.n	800a4aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a482:	4b0d      	ldr	r3, [pc, #52]	; (800a4b8 <HAL_PCD_MspInit+0x48>)
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	4a0c      	ldr	r2, [pc, #48]	; (800a4b8 <HAL_PCD_MspInit+0x48>)
 800a488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a48c:	6253      	str	r3, [r2, #36]	; 0x24
 800a48e:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <HAL_PCD_MspInit+0x48>)
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a49a:	2200      	movs	r2, #0
 800a49c:	2100      	movs	r1, #0
 800a49e:	2014      	movs	r0, #20
 800a4a0:	f7f7 f803 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a4a4:	2014      	movs	r0, #20
 800a4a6:	f7f7 f81c 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4aa:	bf00      	nop
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	40005c00 	.word	0x40005c00
 800a4b8:	40023800 	.word	0x40023800

0800a4bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	f7fd fc97 	bl	8007e06 <USBD_LL_SetupStage>
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a4f2:	78fa      	ldrb	r2, [r7, #3]
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	440b      	add	r3, r1
 800a500:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	4619      	mov	r1, r3
 800a50a:	f7fd fcc9 	bl	8007ea0 <USBD_LL_DataOutStage>
}
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	440b      	add	r3, r1
 800a536:	333c      	adds	r3, #60	; 0x3c
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	4619      	mov	r1, r3
 800a53e:	f7fd fd20 	bl	8007f82 <USBD_LL_DataInStage>
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fd fe2b 	bl	80081b4 <USBD_LL_SOF>
}
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a56e:	2301      	movs	r3, #1
 800a570:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d001      	beq.n	800a57e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a57a:	f7f6 fc3f 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a584:	7bfa      	ldrb	r2, [r7, #15]
 800a586:	4611      	mov	r1, r2
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fd fde0 	bl	800814e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a594:	4618      	mov	r0, r3
 800a596:	f7fd fd99 	bl	80080cc <USBD_LL_Reset>
}
 800a59a:	bf00      	nop
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fd fdda 	bl	800816c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5c0:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <HAL_PCD_SuspendCallback+0x30>)
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	4a03      	ldr	r2, [pc, #12]	; (800a5d4 <HAL_PCD_SuspendCallback+0x30>)
 800a5c6:	f043 0306 	orr.w	r3, r3, #6
 800a5ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	e000ed00 	.word	0xe000ed00

0800a5d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fd fdd4 	bl	8008194 <USBD_LL_Resume>
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a5fc:	4a28      	ldr	r2, [pc, #160]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a26      	ldr	r2, [pc, #152]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a608:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800a60c:	4b24      	ldr	r3, [pc, #144]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a60e:	4a25      	ldr	r2, [pc, #148]	; (800a6a4 <USBD_LL_Init+0xb0>)
 800a610:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a612:	4b23      	ldr	r3, [pc, #140]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a614:	2208      	movs	r2, #8
 800a616:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a618:	4b21      	ldr	r3, [pc, #132]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a61a:	2202      	movs	r2, #2
 800a61c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a61e:	4b20      	ldr	r3, [pc, #128]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a620:	2202      	movs	r2, #2
 800a622:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a624:	4b1e      	ldr	r3, [pc, #120]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a626:	2200      	movs	r2, #0
 800a628:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a62a:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a630:	481b      	ldr	r0, [pc, #108]	; (800a6a0 <USBD_LL_Init+0xac>)
 800a632:	f7f7 f931 	bl	8001898 <HAL_PCD_Init>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a63c:	f7f6 fbde 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a646:	2318      	movs	r3, #24
 800a648:	2200      	movs	r2, #0
 800a64a:	2100      	movs	r1, #0
 800a64c:	f7f8 fd0e 	bl	800306c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a656:	2358      	movs	r3, #88	; 0x58
 800a658:	2200      	movs	r2, #0
 800a65a:	2180      	movs	r1, #128	; 0x80
 800a65c:	f7f8 fd06 	bl	800306c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a666:	23c0      	movs	r3, #192	; 0xc0
 800a668:	2200      	movs	r2, #0
 800a66a:	2181      	movs	r1, #129	; 0x81
 800a66c:	f7f8 fcfe 	bl	800306c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a676:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a67a:	2200      	movs	r2, #0
 800a67c:	2101      	movs	r1, #1
 800a67e:	f7f8 fcf5 	bl	800306c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a68c:	2200      	movs	r2, #0
 800a68e:	2182      	movs	r1, #130	; 0x82
 800a690:	f7f8 fcec 	bl	800306c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20001ec8 	.word	0x20001ec8
 800a6a4:	40005c00 	.word	0x40005c00

0800a6a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7f7 f9c8 	bl	8001a54 <HAL_PCD_Start>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 f944 	bl	800a958 <USBD_Get_USB_Status>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	4608      	mov	r0, r1
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	70fb      	strb	r3, [r7, #3]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70bb      	strb	r3, [r7, #2]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a706:	78bb      	ldrb	r3, [r7, #2]
 800a708:	883a      	ldrh	r2, [r7, #0]
 800a70a:	78f9      	ldrb	r1, [r7, #3]
 800a70c:	f7f7 fae4 	bl	8001cd8 <HAL_PCD_EP_Open>
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	4618      	mov	r0, r3
 800a718:	f000 f91e 	bl	800a958 <USBD_Get_USB_Status>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a720:	7bbb      	ldrb	r3, [r7, #14]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	460b      	mov	r3, r1
 800a734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a744:	78fa      	ldrb	r2, [r7, #3]
 800a746:	4611      	mov	r1, r2
 800a748:	4618      	mov	r0, r3
 800a74a:	f7f7 fb2b 	bl	8001da4 <HAL_PCD_EP_Close>
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	4618      	mov	r0, r3
 800a756:	f000 f8ff 	bl	800a958 <USBD_Get_USB_Status>
 800a75a:	4603      	mov	r3, r0
 800a75c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a782:	78fa      	ldrb	r2, [r7, #3]
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7f7 fbeb 	bl	8001f62 <HAL_PCD_EP_SetStall>
 800a78c:	4603      	mov	r3, r0
 800a78e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	4618      	mov	r0, r3
 800a794:	f000 f8e0 	bl	800a958 <USBD_Get_USB_Status>
 800a798:	4603      	mov	r3, r0
 800a79a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a7c0:	78fa      	ldrb	r2, [r7, #3]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f7 fc1e 	bl	8002006 <HAL_PCD_EP_ClrStall>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 f8c1 	bl	800a958 <USBD_Get_USB_Status>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a7f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	da0c      	bge.n	800a81a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a806:	68f9      	ldr	r1, [r7, #12]
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	440b      	add	r3, r1
 800a814:	3302      	adds	r3, #2
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	e00b      	b.n	800a832 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a820:	68f9      	ldr	r1, [r7, #12]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	440b      	add	r3, r1
 800a82c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a830:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	bc80      	pop	{r7}
 800a83a:	4770      	bx	lr

0800a83c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f7 fa17 	bl	8001c8e <HAL_PCD_SetAddress>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f876 	bl	800a958 <USBD_Get_USB_Status>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a870:	7bbb      	ldrb	r3, [r7, #14]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b086      	sub	sp, #24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	607a      	str	r2, [r7, #4]
 800a884:	461a      	mov	r2, r3
 800a886:	460b      	mov	r3, r1
 800a888:	72fb      	strb	r3, [r7, #11]
 800a88a:	4613      	mov	r3, r2
 800a88c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a89c:	893b      	ldrh	r3, [r7, #8]
 800a89e:	7af9      	ldrb	r1, [r7, #11]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	f7f7 fb1b 	bl	8001edc <HAL_PCD_EP_Transmit>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 f853 	bl	800a958 <USBD_Get_USB_Status>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	607a      	str	r2, [r7, #4]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	72fb      	strb	r3, [r7, #11]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a8e2:	893b      	ldrh	r3, [r7, #8]
 800a8e4:	7af9      	ldrb	r1, [r7, #11]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	f7f7 faa4 	bl	8001e34 <HAL_PCD_EP_Receive>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 f830 	bl	800a958 <USBD_Get_USB_Status>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	460b      	mov	r3, r1
 800a910:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a918:	78fa      	ldrb	r2, [r7, #3]
 800a91a:	4611      	mov	r1, r2
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7f7 fac6 	bl	8001eae <HAL_PCD_EP_GetRxCount>
 800a922:	4603      	mov	r3, r0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a934:	4b02      	ldr	r3, [pc, #8]	; (800a940 <USBD_static_malloc+0x14>)
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bc80      	pop	{r7}
 800a93e:	4770      	bx	lr
 800a940:	200021b4 	.word	0x200021b4

0800a944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	bc80      	pop	{r7}
 800a954:	4770      	bx	lr
	...

0800a958 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d817      	bhi.n	800a99c <USBD_Get_USB_Status+0x44>
 800a96c:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <USBD_Get_USB_Status+0x1c>)
 800a96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a972:	bf00      	nop
 800a974:	0800a985 	.word	0x0800a985
 800a978:	0800a98b 	.word	0x0800a98b
 800a97c:	0800a991 	.word	0x0800a991
 800a980:	0800a997 	.word	0x0800a997
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]
    break;
 800a988:	e00b      	b.n	800a9a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a98a:	2302      	movs	r3, #2
 800a98c:	73fb      	strb	r3, [r7, #15]
    break;
 800a98e:	e008      	b.n	800a9a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a990:	2301      	movs	r3, #1
 800a992:	73fb      	strb	r3, [r7, #15]
    break;
 800a994:	e005      	b.n	800a9a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a996:	2302      	movs	r3, #2
 800a998:	73fb      	strb	r3, [r7, #15]
    break;
 800a99a:	e002      	b.n	800a9a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a99c:	2302      	movs	r3, #2
 800a99e:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a0:	bf00      	nop
  }
  return usb_status;
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bc80      	pop	{r7}
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop

0800a9b0 <__errno>:
 800a9b0:	4b01      	ldr	r3, [pc, #4]	; (800a9b8 <__errno+0x8>)
 800a9b2:	6818      	ldr	r0, [r3, #0]
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	20000444 	.word	0x20000444

0800a9bc <__libc_init_array>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	2600      	movs	r6, #0
 800a9c0:	4d0c      	ldr	r5, [pc, #48]	; (800a9f4 <__libc_init_array+0x38>)
 800a9c2:	4c0d      	ldr	r4, [pc, #52]	; (800a9f8 <__libc_init_array+0x3c>)
 800a9c4:	1b64      	subs	r4, r4, r5
 800a9c6:	10a4      	asrs	r4, r4, #2
 800a9c8:	42a6      	cmp	r6, r4
 800a9ca:	d109      	bne.n	800a9e0 <__libc_init_array+0x24>
 800a9cc:	f001 fb04 	bl	800bfd8 <_init>
 800a9d0:	2600      	movs	r6, #0
 800a9d2:	4d0a      	ldr	r5, [pc, #40]	; (800a9fc <__libc_init_array+0x40>)
 800a9d4:	4c0a      	ldr	r4, [pc, #40]	; (800aa00 <__libc_init_array+0x44>)
 800a9d6:	1b64      	subs	r4, r4, r5
 800a9d8:	10a4      	asrs	r4, r4, #2
 800a9da:	42a6      	cmp	r6, r4
 800a9dc:	d105      	bne.n	800a9ea <__libc_init_array+0x2e>
 800a9de:	bd70      	pop	{r4, r5, r6, pc}
 800a9e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e4:	4798      	blx	r3
 800a9e6:	3601      	adds	r6, #1
 800a9e8:	e7ee      	b.n	800a9c8 <__libc_init_array+0xc>
 800a9ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ee:	4798      	blx	r3
 800a9f0:	3601      	adds	r6, #1
 800a9f2:	e7f2      	b.n	800a9da <__libc_init_array+0x1e>
 800a9f4:	0800c854 	.word	0x0800c854
 800a9f8:	0800c854 	.word	0x0800c854
 800a9fc:	0800c854 	.word	0x0800c854
 800aa00:	0800c858 	.word	0x0800c858

0800aa04 <memset>:
 800aa04:	4603      	mov	r3, r0
 800aa06:	4402      	add	r2, r0
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d100      	bne.n	800aa0e <memset+0xa>
 800aa0c:	4770      	bx	lr
 800aa0e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa12:	e7f9      	b.n	800aa08 <memset+0x4>

0800aa14 <siprintf>:
 800aa14:	b40e      	push	{r1, r2, r3}
 800aa16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa1a:	b500      	push	{lr}
 800aa1c:	b09c      	sub	sp, #112	; 0x70
 800aa1e:	ab1d      	add	r3, sp, #116	; 0x74
 800aa20:	9002      	str	r0, [sp, #8]
 800aa22:	9006      	str	r0, [sp, #24]
 800aa24:	9107      	str	r1, [sp, #28]
 800aa26:	9104      	str	r1, [sp, #16]
 800aa28:	4808      	ldr	r0, [pc, #32]	; (800aa4c <siprintf+0x38>)
 800aa2a:	4909      	ldr	r1, [pc, #36]	; (800aa50 <siprintf+0x3c>)
 800aa2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa30:	9105      	str	r1, [sp, #20]
 800aa32:	6800      	ldr	r0, [r0, #0]
 800aa34:	a902      	add	r1, sp, #8
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	f000 fa82 	bl	800af40 <_svfiprintf_r>
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	9b02      	ldr	r3, [sp, #8]
 800aa40:	701a      	strb	r2, [r3, #0]
 800aa42:	b01c      	add	sp, #112	; 0x70
 800aa44:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa48:	b003      	add	sp, #12
 800aa4a:	4770      	bx	lr
 800aa4c:	20000444 	.word	0x20000444
 800aa50:	ffff0208 	.word	0xffff0208

0800aa54 <strcat>:
 800aa54:	4602      	mov	r2, r0
 800aa56:	b510      	push	{r4, lr}
 800aa58:	7814      	ldrb	r4, [r2, #0]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	3201      	adds	r2, #1
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	d1fa      	bne.n	800aa58 <strcat+0x4>
 800aa62:	3b01      	subs	r3, #1
 800aa64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	d1f9      	bne.n	800aa64 <strcat+0x10>
 800aa70:	bd10      	pop	{r4, pc}

0800aa72 <strncmp>:
 800aa72:	4603      	mov	r3, r0
 800aa74:	b510      	push	{r4, lr}
 800aa76:	b172      	cbz	r2, 800aa96 <strncmp+0x24>
 800aa78:	3901      	subs	r1, #1
 800aa7a:	1884      	adds	r4, r0, r2
 800aa7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa84:	4290      	cmp	r0, r2
 800aa86:	d101      	bne.n	800aa8c <strncmp+0x1a>
 800aa88:	42a3      	cmp	r3, r4
 800aa8a:	d101      	bne.n	800aa90 <strncmp+0x1e>
 800aa8c:	1a80      	subs	r0, r0, r2
 800aa8e:	bd10      	pop	{r4, pc}
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d1f3      	bne.n	800aa7c <strncmp+0xa>
 800aa94:	e7fa      	b.n	800aa8c <strncmp+0x1a>
 800aa96:	4610      	mov	r0, r2
 800aa98:	e7f9      	b.n	800aa8e <strncmp+0x1c>
	...

0800aa9c <strtok>:
 800aa9c:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <strtok+0x5c>)
 800aa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa2:	681f      	ldr	r7, [r3, #0]
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	b9ec      	cbnz	r4, 800aae8 <strtok+0x4c>
 800aaac:	2050      	movs	r0, #80	; 0x50
 800aaae:	f000 f907 	bl	800acc0 <malloc>
 800aab2:	4602      	mov	r2, r0
 800aab4:	65b8      	str	r0, [r7, #88]	; 0x58
 800aab6:	b920      	cbnz	r0, 800aac2 <strtok+0x26>
 800aab8:	2157      	movs	r1, #87	; 0x57
 800aaba:	4b10      	ldr	r3, [pc, #64]	; (800aafc <strtok+0x60>)
 800aabc:	4810      	ldr	r0, [pc, #64]	; (800ab00 <strtok+0x64>)
 800aabe:	f000 f8cf 	bl	800ac60 <__assert_func>
 800aac2:	e9c0 4400 	strd	r4, r4, [r0]
 800aac6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aaca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aace:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800aad2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aad6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aada:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aade:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aae2:	6184      	str	r4, [r0, #24]
 800aae4:	7704      	strb	r4, [r0, #28]
 800aae6:	6244      	str	r4, [r0, #36]	; 0x24
 800aae8:	4631      	mov	r1, r6
 800aaea:	4628      	mov	r0, r5
 800aaec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	f000 b806 	b.w	800ab04 <__strtok_r>
 800aaf8:	20000444 	.word	0x20000444
 800aafc:	0800c608 	.word	0x0800c608
 800ab00:	0800c61f 	.word	0x0800c61f

0800ab04 <__strtok_r>:
 800ab04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab06:	b908      	cbnz	r0, 800ab0c <__strtok_r+0x8>
 800ab08:	6810      	ldr	r0, [r2, #0]
 800ab0a:	b188      	cbz	r0, 800ab30 <__strtok_r+0x2c>
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	460f      	mov	r7, r1
 800ab10:	4620      	mov	r0, r4
 800ab12:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ab16:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ab1a:	b91e      	cbnz	r6, 800ab24 <__strtok_r+0x20>
 800ab1c:	b965      	cbnz	r5, 800ab38 <__strtok_r+0x34>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	6015      	str	r5, [r2, #0]
 800ab22:	e005      	b.n	800ab30 <__strtok_r+0x2c>
 800ab24:	42b5      	cmp	r5, r6
 800ab26:	d1f6      	bne.n	800ab16 <__strtok_r+0x12>
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1f0      	bne.n	800ab0e <__strtok_r+0xa>
 800ab2c:	6014      	str	r4, [r2, #0]
 800ab2e:	7003      	strb	r3, [r0, #0]
 800ab30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab32:	461c      	mov	r4, r3
 800ab34:	e00c      	b.n	800ab50 <__strtok_r+0x4c>
 800ab36:	b915      	cbnz	r5, 800ab3e <__strtok_r+0x3a>
 800ab38:	460e      	mov	r6, r1
 800ab3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab3e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ab42:	42ab      	cmp	r3, r5
 800ab44:	d1f7      	bne.n	800ab36 <__strtok_r+0x32>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d0f3      	beq.n	800ab32 <__strtok_r+0x2e>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ab50:	6014      	str	r4, [r2, #0]
 800ab52:	e7ed      	b.n	800ab30 <__strtok_r+0x2c>

0800ab54 <_strtol_l.constprop.0>:
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	d001      	beq.n	800ab62 <_strtol_l.constprop.0+0xe>
 800ab5e:	2b24      	cmp	r3, #36	; 0x24
 800ab60:	d906      	bls.n	800ab70 <_strtol_l.constprop.0+0x1c>
 800ab62:	f7ff ff25 	bl	800a9b0 <__errno>
 800ab66:	2316      	movs	r3, #22
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab70:	460d      	mov	r5, r1
 800ab72:	4f35      	ldr	r7, [pc, #212]	; (800ac48 <_strtol_l.constprop.0+0xf4>)
 800ab74:	4628      	mov	r0, r5
 800ab76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab7a:	5de6      	ldrb	r6, [r4, r7]
 800ab7c:	f016 0608 	ands.w	r6, r6, #8
 800ab80:	d1f8      	bne.n	800ab74 <_strtol_l.constprop.0+0x20>
 800ab82:	2c2d      	cmp	r4, #45	; 0x2d
 800ab84:	d12f      	bne.n	800abe6 <_strtol_l.constprop.0+0x92>
 800ab86:	2601      	movs	r6, #1
 800ab88:	782c      	ldrb	r4, [r5, #0]
 800ab8a:	1c85      	adds	r5, r0, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d057      	beq.n	800ac40 <_strtol_l.constprop.0+0xec>
 800ab90:	2b10      	cmp	r3, #16
 800ab92:	d109      	bne.n	800aba8 <_strtol_l.constprop.0+0x54>
 800ab94:	2c30      	cmp	r4, #48	; 0x30
 800ab96:	d107      	bne.n	800aba8 <_strtol_l.constprop.0+0x54>
 800ab98:	7828      	ldrb	r0, [r5, #0]
 800ab9a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ab9e:	2858      	cmp	r0, #88	; 0x58
 800aba0:	d149      	bne.n	800ac36 <_strtol_l.constprop.0+0xe2>
 800aba2:	2310      	movs	r3, #16
 800aba4:	786c      	ldrb	r4, [r5, #1]
 800aba6:	3502      	adds	r5, #2
 800aba8:	2700      	movs	r7, #0
 800abaa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800abae:	f10e 3eff 	add.w	lr, lr, #4294967295
 800abb2:	fbbe f9f3 	udiv	r9, lr, r3
 800abb6:	4638      	mov	r0, r7
 800abb8:	fb03 ea19 	mls	sl, r3, r9, lr
 800abbc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800abc0:	f1bc 0f09 	cmp.w	ip, #9
 800abc4:	d814      	bhi.n	800abf0 <_strtol_l.constprop.0+0x9c>
 800abc6:	4664      	mov	r4, ip
 800abc8:	42a3      	cmp	r3, r4
 800abca:	dd22      	ble.n	800ac12 <_strtol_l.constprop.0+0xbe>
 800abcc:	2f00      	cmp	r7, #0
 800abce:	db1d      	blt.n	800ac0c <_strtol_l.constprop.0+0xb8>
 800abd0:	4581      	cmp	r9, r0
 800abd2:	d31b      	bcc.n	800ac0c <_strtol_l.constprop.0+0xb8>
 800abd4:	d101      	bne.n	800abda <_strtol_l.constprop.0+0x86>
 800abd6:	45a2      	cmp	sl, r4
 800abd8:	db18      	blt.n	800ac0c <_strtol_l.constprop.0+0xb8>
 800abda:	2701      	movs	r7, #1
 800abdc:	fb00 4003 	mla	r0, r0, r3, r4
 800abe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abe4:	e7ea      	b.n	800abbc <_strtol_l.constprop.0+0x68>
 800abe6:	2c2b      	cmp	r4, #43	; 0x2b
 800abe8:	bf04      	itt	eq
 800abea:	782c      	ldrbeq	r4, [r5, #0]
 800abec:	1c85      	addeq	r5, r0, #2
 800abee:	e7cd      	b.n	800ab8c <_strtol_l.constprop.0+0x38>
 800abf0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800abf4:	f1bc 0f19 	cmp.w	ip, #25
 800abf8:	d801      	bhi.n	800abfe <_strtol_l.constprop.0+0xaa>
 800abfa:	3c37      	subs	r4, #55	; 0x37
 800abfc:	e7e4      	b.n	800abc8 <_strtol_l.constprop.0+0x74>
 800abfe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac02:	f1bc 0f19 	cmp.w	ip, #25
 800ac06:	d804      	bhi.n	800ac12 <_strtol_l.constprop.0+0xbe>
 800ac08:	3c57      	subs	r4, #87	; 0x57
 800ac0a:	e7dd      	b.n	800abc8 <_strtol_l.constprop.0+0x74>
 800ac0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ac10:	e7e6      	b.n	800abe0 <_strtol_l.constprop.0+0x8c>
 800ac12:	2f00      	cmp	r7, #0
 800ac14:	da07      	bge.n	800ac26 <_strtol_l.constprop.0+0xd2>
 800ac16:	2322      	movs	r3, #34	; 0x22
 800ac18:	4670      	mov	r0, lr
 800ac1a:	f8c8 3000 	str.w	r3, [r8]
 800ac1e:	2a00      	cmp	r2, #0
 800ac20:	d0a4      	beq.n	800ab6c <_strtol_l.constprop.0+0x18>
 800ac22:	1e69      	subs	r1, r5, #1
 800ac24:	e005      	b.n	800ac32 <_strtol_l.constprop.0+0xde>
 800ac26:	b106      	cbz	r6, 800ac2a <_strtol_l.constprop.0+0xd6>
 800ac28:	4240      	negs	r0, r0
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	d09e      	beq.n	800ab6c <_strtol_l.constprop.0+0x18>
 800ac2e:	2f00      	cmp	r7, #0
 800ac30:	d1f7      	bne.n	800ac22 <_strtol_l.constprop.0+0xce>
 800ac32:	6011      	str	r1, [r2, #0]
 800ac34:	e79a      	b.n	800ab6c <_strtol_l.constprop.0+0x18>
 800ac36:	2430      	movs	r4, #48	; 0x30
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1b5      	bne.n	800aba8 <_strtol_l.constprop.0+0x54>
 800ac3c:	2308      	movs	r3, #8
 800ac3e:	e7b3      	b.n	800aba8 <_strtol_l.constprop.0+0x54>
 800ac40:	2c30      	cmp	r4, #48	; 0x30
 800ac42:	d0a9      	beq.n	800ab98 <_strtol_l.constprop.0+0x44>
 800ac44:	230a      	movs	r3, #10
 800ac46:	e7af      	b.n	800aba8 <_strtol_l.constprop.0+0x54>
 800ac48:	0800c6b9 	.word	0x0800c6b9

0800ac4c <strtol>:
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	460a      	mov	r2, r1
 800ac50:	4601      	mov	r1, r0
 800ac52:	4802      	ldr	r0, [pc, #8]	; (800ac5c <strtol+0x10>)
 800ac54:	6800      	ldr	r0, [r0, #0]
 800ac56:	f7ff bf7d 	b.w	800ab54 <_strtol_l.constprop.0>
 800ac5a:	bf00      	nop
 800ac5c:	20000444 	.word	0x20000444

0800ac60 <__assert_func>:
 800ac60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac62:	4614      	mov	r4, r2
 800ac64:	461a      	mov	r2, r3
 800ac66:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <__assert_func+0x2c>)
 800ac68:	4605      	mov	r5, r0
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68d8      	ldr	r0, [r3, #12]
 800ac6e:	b14c      	cbz	r4, 800ac84 <__assert_func+0x24>
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <__assert_func+0x30>)
 800ac72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac76:	9100      	str	r1, [sp, #0]
 800ac78:	462b      	mov	r3, r5
 800ac7a:	4906      	ldr	r1, [pc, #24]	; (800ac94 <__assert_func+0x34>)
 800ac7c:	f000 f80e 	bl	800ac9c <fiprintf>
 800ac80:	f000 fe1c 	bl	800b8bc <abort>
 800ac84:	4b04      	ldr	r3, [pc, #16]	; (800ac98 <__assert_func+0x38>)
 800ac86:	461c      	mov	r4, r3
 800ac88:	e7f3      	b.n	800ac72 <__assert_func+0x12>
 800ac8a:	bf00      	nop
 800ac8c:	20000444 	.word	0x20000444
 800ac90:	0800c67c 	.word	0x0800c67c
 800ac94:	0800c689 	.word	0x0800c689
 800ac98:	0800c6b7 	.word	0x0800c6b7

0800ac9c <fiprintf>:
 800ac9c:	b40e      	push	{r1, r2, r3}
 800ac9e:	b503      	push	{r0, r1, lr}
 800aca0:	4601      	mov	r1, r0
 800aca2:	ab03      	add	r3, sp, #12
 800aca4:	4805      	ldr	r0, [pc, #20]	; (800acbc <fiprintf+0x20>)
 800aca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acaa:	6800      	ldr	r0, [r0, #0]
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	f000 fa6f 	bl	800b190 <_vfiprintf_r>
 800acb2:	b002      	add	sp, #8
 800acb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acb8:	b003      	add	sp, #12
 800acba:	4770      	bx	lr
 800acbc:	20000444 	.word	0x20000444

0800acc0 <malloc>:
 800acc0:	4b02      	ldr	r3, [pc, #8]	; (800accc <malloc+0xc>)
 800acc2:	4601      	mov	r1, r0
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	f000 b86b 	b.w	800ada0 <_malloc_r>
 800acca:	bf00      	nop
 800accc:	20000444 	.word	0x20000444

0800acd0 <_free_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4605      	mov	r5, r0
 800acd4:	2900      	cmp	r1, #0
 800acd6:	d040      	beq.n	800ad5a <_free_r+0x8a>
 800acd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acdc:	1f0c      	subs	r4, r1, #4
 800acde:	2b00      	cmp	r3, #0
 800ace0:	bfb8      	it	lt
 800ace2:	18e4      	addlt	r4, r4, r3
 800ace4:	f001 f844 	bl	800bd70 <__malloc_lock>
 800ace8:	4a1c      	ldr	r2, [pc, #112]	; (800ad5c <_free_r+0x8c>)
 800acea:	6813      	ldr	r3, [r2, #0]
 800acec:	b933      	cbnz	r3, 800acfc <_free_r+0x2c>
 800acee:	6063      	str	r3, [r4, #4]
 800acf0:	6014      	str	r4, [r2, #0]
 800acf2:	4628      	mov	r0, r5
 800acf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf8:	f001 b840 	b.w	800bd7c <__malloc_unlock>
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	d908      	bls.n	800ad12 <_free_r+0x42>
 800ad00:	6820      	ldr	r0, [r4, #0]
 800ad02:	1821      	adds	r1, r4, r0
 800ad04:	428b      	cmp	r3, r1
 800ad06:	bf01      	itttt	eq
 800ad08:	6819      	ldreq	r1, [r3, #0]
 800ad0a:	685b      	ldreq	r3, [r3, #4]
 800ad0c:	1809      	addeq	r1, r1, r0
 800ad0e:	6021      	streq	r1, [r4, #0]
 800ad10:	e7ed      	b.n	800acee <_free_r+0x1e>
 800ad12:	461a      	mov	r2, r3
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	b10b      	cbz	r3, 800ad1c <_free_r+0x4c>
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	d9fa      	bls.n	800ad12 <_free_r+0x42>
 800ad1c:	6811      	ldr	r1, [r2, #0]
 800ad1e:	1850      	adds	r0, r2, r1
 800ad20:	42a0      	cmp	r0, r4
 800ad22:	d10b      	bne.n	800ad3c <_free_r+0x6c>
 800ad24:	6820      	ldr	r0, [r4, #0]
 800ad26:	4401      	add	r1, r0
 800ad28:	1850      	adds	r0, r2, r1
 800ad2a:	4283      	cmp	r3, r0
 800ad2c:	6011      	str	r1, [r2, #0]
 800ad2e:	d1e0      	bne.n	800acf2 <_free_r+0x22>
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	4401      	add	r1, r0
 800ad36:	6011      	str	r1, [r2, #0]
 800ad38:	6053      	str	r3, [r2, #4]
 800ad3a:	e7da      	b.n	800acf2 <_free_r+0x22>
 800ad3c:	d902      	bls.n	800ad44 <_free_r+0x74>
 800ad3e:	230c      	movs	r3, #12
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	e7d6      	b.n	800acf2 <_free_r+0x22>
 800ad44:	6820      	ldr	r0, [r4, #0]
 800ad46:	1821      	adds	r1, r4, r0
 800ad48:	428b      	cmp	r3, r1
 800ad4a:	bf01      	itttt	eq
 800ad4c:	6819      	ldreq	r1, [r3, #0]
 800ad4e:	685b      	ldreq	r3, [r3, #4]
 800ad50:	1809      	addeq	r1, r1, r0
 800ad52:	6021      	streq	r1, [r4, #0]
 800ad54:	6063      	str	r3, [r4, #4]
 800ad56:	6054      	str	r4, [r2, #4]
 800ad58:	e7cb      	b.n	800acf2 <_free_r+0x22>
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	200023d4 	.word	0x200023d4

0800ad60 <sbrk_aligned>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	4e0e      	ldr	r6, [pc, #56]	; (800ad9c <sbrk_aligned+0x3c>)
 800ad64:	460c      	mov	r4, r1
 800ad66:	6831      	ldr	r1, [r6, #0]
 800ad68:	4605      	mov	r5, r0
 800ad6a:	b911      	cbnz	r1, 800ad72 <sbrk_aligned+0x12>
 800ad6c:	f000 fcd6 	bl	800b71c <_sbrk_r>
 800ad70:	6030      	str	r0, [r6, #0]
 800ad72:	4621      	mov	r1, r4
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 fcd1 	bl	800b71c <_sbrk_r>
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	d00a      	beq.n	800ad94 <sbrk_aligned+0x34>
 800ad7e:	1cc4      	adds	r4, r0, #3
 800ad80:	f024 0403 	bic.w	r4, r4, #3
 800ad84:	42a0      	cmp	r0, r4
 800ad86:	d007      	beq.n	800ad98 <sbrk_aligned+0x38>
 800ad88:	1a21      	subs	r1, r4, r0
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f000 fcc6 	bl	800b71c <_sbrk_r>
 800ad90:	3001      	adds	r0, #1
 800ad92:	d101      	bne.n	800ad98 <sbrk_aligned+0x38>
 800ad94:	f04f 34ff 	mov.w	r4, #4294967295
 800ad98:	4620      	mov	r0, r4
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	200023d8 	.word	0x200023d8

0800ada0 <_malloc_r>:
 800ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada4:	1ccd      	adds	r5, r1, #3
 800ada6:	f025 0503 	bic.w	r5, r5, #3
 800adaa:	3508      	adds	r5, #8
 800adac:	2d0c      	cmp	r5, #12
 800adae:	bf38      	it	cc
 800adb0:	250c      	movcc	r5, #12
 800adb2:	2d00      	cmp	r5, #0
 800adb4:	4607      	mov	r7, r0
 800adb6:	db01      	blt.n	800adbc <_malloc_r+0x1c>
 800adb8:	42a9      	cmp	r1, r5
 800adba:	d905      	bls.n	800adc8 <_malloc_r+0x28>
 800adbc:	230c      	movs	r3, #12
 800adbe:	2600      	movs	r6, #0
 800adc0:	603b      	str	r3, [r7, #0]
 800adc2:	4630      	mov	r0, r6
 800adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc8:	4e2e      	ldr	r6, [pc, #184]	; (800ae84 <_malloc_r+0xe4>)
 800adca:	f000 ffd1 	bl	800bd70 <__malloc_lock>
 800adce:	6833      	ldr	r3, [r6, #0]
 800add0:	461c      	mov	r4, r3
 800add2:	bb34      	cbnz	r4, 800ae22 <_malloc_r+0x82>
 800add4:	4629      	mov	r1, r5
 800add6:	4638      	mov	r0, r7
 800add8:	f7ff ffc2 	bl	800ad60 <sbrk_aligned>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	4604      	mov	r4, r0
 800ade0:	d14d      	bne.n	800ae7e <_malloc_r+0xde>
 800ade2:	6834      	ldr	r4, [r6, #0]
 800ade4:	4626      	mov	r6, r4
 800ade6:	2e00      	cmp	r6, #0
 800ade8:	d140      	bne.n	800ae6c <_malloc_r+0xcc>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	4631      	mov	r1, r6
 800adee:	4638      	mov	r0, r7
 800adf0:	eb04 0803 	add.w	r8, r4, r3
 800adf4:	f000 fc92 	bl	800b71c <_sbrk_r>
 800adf8:	4580      	cmp	r8, r0
 800adfa:	d13a      	bne.n	800ae72 <_malloc_r+0xd2>
 800adfc:	6821      	ldr	r1, [r4, #0]
 800adfe:	3503      	adds	r5, #3
 800ae00:	1a6d      	subs	r5, r5, r1
 800ae02:	f025 0503 	bic.w	r5, r5, #3
 800ae06:	3508      	adds	r5, #8
 800ae08:	2d0c      	cmp	r5, #12
 800ae0a:	bf38      	it	cc
 800ae0c:	250c      	movcc	r5, #12
 800ae0e:	4638      	mov	r0, r7
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7ff ffa5 	bl	800ad60 <sbrk_aligned>
 800ae16:	3001      	adds	r0, #1
 800ae18:	d02b      	beq.n	800ae72 <_malloc_r+0xd2>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	442b      	add	r3, r5
 800ae1e:	6023      	str	r3, [r4, #0]
 800ae20:	e00e      	b.n	800ae40 <_malloc_r+0xa0>
 800ae22:	6822      	ldr	r2, [r4, #0]
 800ae24:	1b52      	subs	r2, r2, r5
 800ae26:	d41e      	bmi.n	800ae66 <_malloc_r+0xc6>
 800ae28:	2a0b      	cmp	r2, #11
 800ae2a:	d916      	bls.n	800ae5a <_malloc_r+0xba>
 800ae2c:	1961      	adds	r1, r4, r5
 800ae2e:	42a3      	cmp	r3, r4
 800ae30:	6025      	str	r5, [r4, #0]
 800ae32:	bf18      	it	ne
 800ae34:	6059      	strne	r1, [r3, #4]
 800ae36:	6863      	ldr	r3, [r4, #4]
 800ae38:	bf08      	it	eq
 800ae3a:	6031      	streq	r1, [r6, #0]
 800ae3c:	5162      	str	r2, [r4, r5]
 800ae3e:	604b      	str	r3, [r1, #4]
 800ae40:	4638      	mov	r0, r7
 800ae42:	f104 060b 	add.w	r6, r4, #11
 800ae46:	f000 ff99 	bl	800bd7c <__malloc_unlock>
 800ae4a:	f026 0607 	bic.w	r6, r6, #7
 800ae4e:	1d23      	adds	r3, r4, #4
 800ae50:	1af2      	subs	r2, r6, r3
 800ae52:	d0b6      	beq.n	800adc2 <_malloc_r+0x22>
 800ae54:	1b9b      	subs	r3, r3, r6
 800ae56:	50a3      	str	r3, [r4, r2]
 800ae58:	e7b3      	b.n	800adc2 <_malloc_r+0x22>
 800ae5a:	6862      	ldr	r2, [r4, #4]
 800ae5c:	42a3      	cmp	r3, r4
 800ae5e:	bf0c      	ite	eq
 800ae60:	6032      	streq	r2, [r6, #0]
 800ae62:	605a      	strne	r2, [r3, #4]
 800ae64:	e7ec      	b.n	800ae40 <_malloc_r+0xa0>
 800ae66:	4623      	mov	r3, r4
 800ae68:	6864      	ldr	r4, [r4, #4]
 800ae6a:	e7b2      	b.n	800add2 <_malloc_r+0x32>
 800ae6c:	4634      	mov	r4, r6
 800ae6e:	6876      	ldr	r6, [r6, #4]
 800ae70:	e7b9      	b.n	800ade6 <_malloc_r+0x46>
 800ae72:	230c      	movs	r3, #12
 800ae74:	4638      	mov	r0, r7
 800ae76:	603b      	str	r3, [r7, #0]
 800ae78:	f000 ff80 	bl	800bd7c <__malloc_unlock>
 800ae7c:	e7a1      	b.n	800adc2 <_malloc_r+0x22>
 800ae7e:	6025      	str	r5, [r4, #0]
 800ae80:	e7de      	b.n	800ae40 <_malloc_r+0xa0>
 800ae82:	bf00      	nop
 800ae84:	200023d4 	.word	0x200023d4

0800ae88 <__ssputs_r>:
 800ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	688e      	ldr	r6, [r1, #8]
 800ae8e:	4682      	mov	sl, r0
 800ae90:	429e      	cmp	r6, r3
 800ae92:	460c      	mov	r4, r1
 800ae94:	4690      	mov	r8, r2
 800ae96:	461f      	mov	r7, r3
 800ae98:	d838      	bhi.n	800af0c <__ssputs_r+0x84>
 800ae9a:	898a      	ldrh	r2, [r1, #12]
 800ae9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aea0:	d032      	beq.n	800af08 <__ssputs_r+0x80>
 800aea2:	6825      	ldr	r5, [r4, #0]
 800aea4:	6909      	ldr	r1, [r1, #16]
 800aea6:	3301      	adds	r3, #1
 800aea8:	eba5 0901 	sub.w	r9, r5, r1
 800aeac:	6965      	ldr	r5, [r4, #20]
 800aeae:	444b      	add	r3, r9
 800aeb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeb8:	106d      	asrs	r5, r5, #1
 800aeba:	429d      	cmp	r5, r3
 800aebc:	bf38      	it	cc
 800aebe:	461d      	movcc	r5, r3
 800aec0:	0553      	lsls	r3, r2, #21
 800aec2:	d531      	bpl.n	800af28 <__ssputs_r+0xa0>
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7ff ff6b 	bl	800ada0 <_malloc_r>
 800aeca:	4606      	mov	r6, r0
 800aecc:	b950      	cbnz	r0, 800aee4 <__ssputs_r+0x5c>
 800aece:	230c      	movs	r3, #12
 800aed0:	f04f 30ff 	mov.w	r0, #4294967295
 800aed4:	f8ca 3000 	str.w	r3, [sl]
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aede:	81a3      	strh	r3, [r4, #12]
 800aee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee4:	464a      	mov	r2, r9
 800aee6:	6921      	ldr	r1, [r4, #16]
 800aee8:	f000 ff1a 	bl	800bd20 <memcpy>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	6126      	str	r6, [r4, #16]
 800aefa:	444e      	add	r6, r9
 800aefc:	6026      	str	r6, [r4, #0]
 800aefe:	463e      	mov	r6, r7
 800af00:	6165      	str	r5, [r4, #20]
 800af02:	eba5 0509 	sub.w	r5, r5, r9
 800af06:	60a5      	str	r5, [r4, #8]
 800af08:	42be      	cmp	r6, r7
 800af0a:	d900      	bls.n	800af0e <__ssputs_r+0x86>
 800af0c:	463e      	mov	r6, r7
 800af0e:	4632      	mov	r2, r6
 800af10:	4641      	mov	r1, r8
 800af12:	6820      	ldr	r0, [r4, #0]
 800af14:	f000 ff12 	bl	800bd3c <memmove>
 800af18:	68a3      	ldr	r3, [r4, #8]
 800af1a:	2000      	movs	r0, #0
 800af1c:	1b9b      	subs	r3, r3, r6
 800af1e:	60a3      	str	r3, [r4, #8]
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	4433      	add	r3, r6
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	e7db      	b.n	800aee0 <__ssputs_r+0x58>
 800af28:	462a      	mov	r2, r5
 800af2a:	f000 ff2d 	bl	800bd88 <_realloc_r>
 800af2e:	4606      	mov	r6, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d1e1      	bne.n	800aef8 <__ssputs_r+0x70>
 800af34:	4650      	mov	r0, sl
 800af36:	6921      	ldr	r1, [r4, #16]
 800af38:	f7ff feca 	bl	800acd0 <_free_r>
 800af3c:	e7c7      	b.n	800aece <__ssputs_r+0x46>
	...

0800af40 <_svfiprintf_r>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4698      	mov	r8, r3
 800af46:	898b      	ldrh	r3, [r1, #12]
 800af48:	4607      	mov	r7, r0
 800af4a:	061b      	lsls	r3, r3, #24
 800af4c:	460d      	mov	r5, r1
 800af4e:	4614      	mov	r4, r2
 800af50:	b09d      	sub	sp, #116	; 0x74
 800af52:	d50e      	bpl.n	800af72 <_svfiprintf_r+0x32>
 800af54:	690b      	ldr	r3, [r1, #16]
 800af56:	b963      	cbnz	r3, 800af72 <_svfiprintf_r+0x32>
 800af58:	2140      	movs	r1, #64	; 0x40
 800af5a:	f7ff ff21 	bl	800ada0 <_malloc_r>
 800af5e:	6028      	str	r0, [r5, #0]
 800af60:	6128      	str	r0, [r5, #16]
 800af62:	b920      	cbnz	r0, 800af6e <_svfiprintf_r+0x2e>
 800af64:	230c      	movs	r3, #12
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	f04f 30ff 	mov.w	r0, #4294967295
 800af6c:	e0d1      	b.n	800b112 <_svfiprintf_r+0x1d2>
 800af6e:	2340      	movs	r3, #64	; 0x40
 800af70:	616b      	str	r3, [r5, #20]
 800af72:	2300      	movs	r3, #0
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	2320      	movs	r3, #32
 800af78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af7c:	2330      	movs	r3, #48	; 0x30
 800af7e:	f04f 0901 	mov.w	r9, #1
 800af82:	f8cd 800c 	str.w	r8, [sp, #12]
 800af86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b12c <_svfiprintf_r+0x1ec>
 800af8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af8e:	4623      	mov	r3, r4
 800af90:	469a      	mov	sl, r3
 800af92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af96:	b10a      	cbz	r2, 800af9c <_svfiprintf_r+0x5c>
 800af98:	2a25      	cmp	r2, #37	; 0x25
 800af9a:	d1f9      	bne.n	800af90 <_svfiprintf_r+0x50>
 800af9c:	ebba 0b04 	subs.w	fp, sl, r4
 800afa0:	d00b      	beq.n	800afba <_svfiprintf_r+0x7a>
 800afa2:	465b      	mov	r3, fp
 800afa4:	4622      	mov	r2, r4
 800afa6:	4629      	mov	r1, r5
 800afa8:	4638      	mov	r0, r7
 800afaa:	f7ff ff6d 	bl	800ae88 <__ssputs_r>
 800afae:	3001      	adds	r0, #1
 800afb0:	f000 80aa 	beq.w	800b108 <_svfiprintf_r+0x1c8>
 800afb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb6:	445a      	add	r2, fp
 800afb8:	9209      	str	r2, [sp, #36]	; 0x24
 800afba:	f89a 3000 	ldrb.w	r3, [sl]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80a2 	beq.w	800b108 <_svfiprintf_r+0x1c8>
 800afc4:	2300      	movs	r3, #0
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295
 800afca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afce:	f10a 0a01 	add.w	sl, sl, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	9307      	str	r3, [sp, #28]
 800afd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afda:	931a      	str	r3, [sp, #104]	; 0x68
 800afdc:	4654      	mov	r4, sl
 800afde:	2205      	movs	r2, #5
 800afe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe4:	4851      	ldr	r0, [pc, #324]	; (800b12c <_svfiprintf_r+0x1ec>)
 800afe6:	f000 fe8d 	bl	800bd04 <memchr>
 800afea:	9a04      	ldr	r2, [sp, #16]
 800afec:	b9d8      	cbnz	r0, 800b026 <_svfiprintf_r+0xe6>
 800afee:	06d0      	lsls	r0, r2, #27
 800aff0:	bf44      	itt	mi
 800aff2:	2320      	movmi	r3, #32
 800aff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff8:	0711      	lsls	r1, r2, #28
 800affa:	bf44      	itt	mi
 800affc:	232b      	movmi	r3, #43	; 0x2b
 800affe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b002:	f89a 3000 	ldrb.w	r3, [sl]
 800b006:	2b2a      	cmp	r3, #42	; 0x2a
 800b008:	d015      	beq.n	800b036 <_svfiprintf_r+0xf6>
 800b00a:	4654      	mov	r4, sl
 800b00c:	2000      	movs	r0, #0
 800b00e:	f04f 0c0a 	mov.w	ip, #10
 800b012:	9a07      	ldr	r2, [sp, #28]
 800b014:	4621      	mov	r1, r4
 800b016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b01a:	3b30      	subs	r3, #48	; 0x30
 800b01c:	2b09      	cmp	r3, #9
 800b01e:	d94e      	bls.n	800b0be <_svfiprintf_r+0x17e>
 800b020:	b1b0      	cbz	r0, 800b050 <_svfiprintf_r+0x110>
 800b022:	9207      	str	r2, [sp, #28]
 800b024:	e014      	b.n	800b050 <_svfiprintf_r+0x110>
 800b026:	eba0 0308 	sub.w	r3, r0, r8
 800b02a:	fa09 f303 	lsl.w	r3, r9, r3
 800b02e:	4313      	orrs	r3, r2
 800b030:	46a2      	mov	sl, r4
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	e7d2      	b.n	800afdc <_svfiprintf_r+0x9c>
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	1d19      	adds	r1, r3, #4
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	9103      	str	r1, [sp, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bfbb      	ittet	lt
 800b042:	425b      	neglt	r3, r3
 800b044:	f042 0202 	orrlt.w	r2, r2, #2
 800b048:	9307      	strge	r3, [sp, #28]
 800b04a:	9307      	strlt	r3, [sp, #28]
 800b04c:	bfb8      	it	lt
 800b04e:	9204      	strlt	r2, [sp, #16]
 800b050:	7823      	ldrb	r3, [r4, #0]
 800b052:	2b2e      	cmp	r3, #46	; 0x2e
 800b054:	d10c      	bne.n	800b070 <_svfiprintf_r+0x130>
 800b056:	7863      	ldrb	r3, [r4, #1]
 800b058:	2b2a      	cmp	r3, #42	; 0x2a
 800b05a:	d135      	bne.n	800b0c8 <_svfiprintf_r+0x188>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	3402      	adds	r4, #2
 800b060:	1d1a      	adds	r2, r3, #4
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	9203      	str	r2, [sp, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	bfb8      	it	lt
 800b06a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b130 <_svfiprintf_r+0x1f0>
 800b074:	2203      	movs	r2, #3
 800b076:	4650      	mov	r0, sl
 800b078:	7821      	ldrb	r1, [r4, #0]
 800b07a:	f000 fe43 	bl	800bd04 <memchr>
 800b07e:	b140      	cbz	r0, 800b092 <_svfiprintf_r+0x152>
 800b080:	2340      	movs	r3, #64	; 0x40
 800b082:	eba0 000a 	sub.w	r0, r0, sl
 800b086:	fa03 f000 	lsl.w	r0, r3, r0
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	3401      	adds	r4, #1
 800b08e:	4303      	orrs	r3, r0
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b096:	2206      	movs	r2, #6
 800b098:	4826      	ldr	r0, [pc, #152]	; (800b134 <_svfiprintf_r+0x1f4>)
 800b09a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b09e:	f000 fe31 	bl	800bd04 <memchr>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d038      	beq.n	800b118 <_svfiprintf_r+0x1d8>
 800b0a6:	4b24      	ldr	r3, [pc, #144]	; (800b138 <_svfiprintf_r+0x1f8>)
 800b0a8:	bb1b      	cbnz	r3, 800b0f2 <_svfiprintf_r+0x1b2>
 800b0aa:	9b03      	ldr	r3, [sp, #12]
 800b0ac:	3307      	adds	r3, #7
 800b0ae:	f023 0307 	bic.w	r3, r3, #7
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	9303      	str	r3, [sp, #12]
 800b0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b8:	4433      	add	r3, r6
 800b0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b0bc:	e767      	b.n	800af8e <_svfiprintf_r+0x4e>
 800b0be:	460c      	mov	r4, r1
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c6:	e7a5      	b.n	800b014 <_svfiprintf_r+0xd4>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f04f 0c0a 	mov.w	ip, #10
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	3401      	adds	r4, #1
 800b0d2:	9305      	str	r3, [sp, #20]
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0da:	3a30      	subs	r2, #48	; 0x30
 800b0dc:	2a09      	cmp	r2, #9
 800b0de:	d903      	bls.n	800b0e8 <_svfiprintf_r+0x1a8>
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d0c5      	beq.n	800b070 <_svfiprintf_r+0x130>
 800b0e4:	9105      	str	r1, [sp, #20]
 800b0e6:	e7c3      	b.n	800b070 <_svfiprintf_r+0x130>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0f0:	e7f0      	b.n	800b0d4 <_svfiprintf_r+0x194>
 800b0f2:	ab03      	add	r3, sp, #12
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	4b10      	ldr	r3, [pc, #64]	; (800b13c <_svfiprintf_r+0x1fc>)
 800b0fc:	a904      	add	r1, sp, #16
 800b0fe:	f3af 8000 	nop.w
 800b102:	1c42      	adds	r2, r0, #1
 800b104:	4606      	mov	r6, r0
 800b106:	d1d6      	bne.n	800b0b6 <_svfiprintf_r+0x176>
 800b108:	89ab      	ldrh	r3, [r5, #12]
 800b10a:	065b      	lsls	r3, r3, #25
 800b10c:	f53f af2c 	bmi.w	800af68 <_svfiprintf_r+0x28>
 800b110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b112:	b01d      	add	sp, #116	; 0x74
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	ab03      	add	r3, sp, #12
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	462a      	mov	r2, r5
 800b11e:	4638      	mov	r0, r7
 800b120:	4b06      	ldr	r3, [pc, #24]	; (800b13c <_svfiprintf_r+0x1fc>)
 800b122:	a904      	add	r1, sp, #16
 800b124:	f000 f9d4 	bl	800b4d0 <_printf_i>
 800b128:	e7eb      	b.n	800b102 <_svfiprintf_r+0x1c2>
 800b12a:	bf00      	nop
 800b12c:	0800c7b9 	.word	0x0800c7b9
 800b130:	0800c7bf 	.word	0x0800c7bf
 800b134:	0800c7c3 	.word	0x0800c7c3
 800b138:	00000000 	.word	0x00000000
 800b13c:	0800ae89 	.word	0x0800ae89

0800b140 <__sfputc_r>:
 800b140:	6893      	ldr	r3, [r2, #8]
 800b142:	b410      	push	{r4}
 800b144:	3b01      	subs	r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	6093      	str	r3, [r2, #8]
 800b14a:	da07      	bge.n	800b15c <__sfputc_r+0x1c>
 800b14c:	6994      	ldr	r4, [r2, #24]
 800b14e:	42a3      	cmp	r3, r4
 800b150:	db01      	blt.n	800b156 <__sfputc_r+0x16>
 800b152:	290a      	cmp	r1, #10
 800b154:	d102      	bne.n	800b15c <__sfputc_r+0x1c>
 800b156:	bc10      	pop	{r4}
 800b158:	f000 baf0 	b.w	800b73c <__swbuf_r>
 800b15c:	6813      	ldr	r3, [r2, #0]
 800b15e:	1c58      	adds	r0, r3, #1
 800b160:	6010      	str	r0, [r2, #0]
 800b162:	7019      	strb	r1, [r3, #0]
 800b164:	4608      	mov	r0, r1
 800b166:	bc10      	pop	{r4}
 800b168:	4770      	bx	lr

0800b16a <__sfputs_r>:
 800b16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16c:	4606      	mov	r6, r0
 800b16e:	460f      	mov	r7, r1
 800b170:	4614      	mov	r4, r2
 800b172:	18d5      	adds	r5, r2, r3
 800b174:	42ac      	cmp	r4, r5
 800b176:	d101      	bne.n	800b17c <__sfputs_r+0x12>
 800b178:	2000      	movs	r0, #0
 800b17a:	e007      	b.n	800b18c <__sfputs_r+0x22>
 800b17c:	463a      	mov	r2, r7
 800b17e:	4630      	mov	r0, r6
 800b180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b184:	f7ff ffdc 	bl	800b140 <__sfputc_r>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d1f3      	bne.n	800b174 <__sfputs_r+0xa>
 800b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b190 <_vfiprintf_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	460d      	mov	r5, r1
 800b196:	4614      	mov	r4, r2
 800b198:	4698      	mov	r8, r3
 800b19a:	4606      	mov	r6, r0
 800b19c:	b09d      	sub	sp, #116	; 0x74
 800b19e:	b118      	cbz	r0, 800b1a8 <_vfiprintf_r+0x18>
 800b1a0:	6983      	ldr	r3, [r0, #24]
 800b1a2:	b90b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x18>
 800b1a4:	f000 fca8 	bl	800baf8 <__sinit>
 800b1a8:	4b89      	ldr	r3, [pc, #548]	; (800b3d0 <_vfiprintf_r+0x240>)
 800b1aa:	429d      	cmp	r5, r3
 800b1ac:	d11b      	bne.n	800b1e6 <_vfiprintf_r+0x56>
 800b1ae:	6875      	ldr	r5, [r6, #4]
 800b1b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1b2:	07d9      	lsls	r1, r3, #31
 800b1b4:	d405      	bmi.n	800b1c2 <_vfiprintf_r+0x32>
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	059a      	lsls	r2, r3, #22
 800b1ba:	d402      	bmi.n	800b1c2 <_vfiprintf_r+0x32>
 800b1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1be:	f000 fd39 	bl	800bc34 <__retarget_lock_acquire_recursive>
 800b1c2:	89ab      	ldrh	r3, [r5, #12]
 800b1c4:	071b      	lsls	r3, r3, #28
 800b1c6:	d501      	bpl.n	800b1cc <_vfiprintf_r+0x3c>
 800b1c8:	692b      	ldr	r3, [r5, #16]
 800b1ca:	b9eb      	cbnz	r3, 800b208 <_vfiprintf_r+0x78>
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f000 fb06 	bl	800b7e0 <__swsetup_r>
 800b1d4:	b1c0      	cbz	r0, 800b208 <_vfiprintf_r+0x78>
 800b1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1d8:	07dc      	lsls	r4, r3, #31
 800b1da:	d50e      	bpl.n	800b1fa <_vfiprintf_r+0x6a>
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	b01d      	add	sp, #116	; 0x74
 800b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e6:	4b7b      	ldr	r3, [pc, #492]	; (800b3d4 <_vfiprintf_r+0x244>)
 800b1e8:	429d      	cmp	r5, r3
 800b1ea:	d101      	bne.n	800b1f0 <_vfiprintf_r+0x60>
 800b1ec:	68b5      	ldr	r5, [r6, #8]
 800b1ee:	e7df      	b.n	800b1b0 <_vfiprintf_r+0x20>
 800b1f0:	4b79      	ldr	r3, [pc, #484]	; (800b3d8 <_vfiprintf_r+0x248>)
 800b1f2:	429d      	cmp	r5, r3
 800b1f4:	bf08      	it	eq
 800b1f6:	68f5      	ldreq	r5, [r6, #12]
 800b1f8:	e7da      	b.n	800b1b0 <_vfiprintf_r+0x20>
 800b1fa:	89ab      	ldrh	r3, [r5, #12]
 800b1fc:	0598      	lsls	r0, r3, #22
 800b1fe:	d4ed      	bmi.n	800b1dc <_vfiprintf_r+0x4c>
 800b200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b202:	f000 fd18 	bl	800bc36 <__retarget_lock_release_recursive>
 800b206:	e7e9      	b.n	800b1dc <_vfiprintf_r+0x4c>
 800b208:	2300      	movs	r3, #0
 800b20a:	9309      	str	r3, [sp, #36]	; 0x24
 800b20c:	2320      	movs	r3, #32
 800b20e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b212:	2330      	movs	r3, #48	; 0x30
 800b214:	f04f 0901 	mov.w	r9, #1
 800b218:	f8cd 800c 	str.w	r8, [sp, #12]
 800b21c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b3dc <_vfiprintf_r+0x24c>
 800b220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b224:	4623      	mov	r3, r4
 800b226:	469a      	mov	sl, r3
 800b228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b22c:	b10a      	cbz	r2, 800b232 <_vfiprintf_r+0xa2>
 800b22e:	2a25      	cmp	r2, #37	; 0x25
 800b230:	d1f9      	bne.n	800b226 <_vfiprintf_r+0x96>
 800b232:	ebba 0b04 	subs.w	fp, sl, r4
 800b236:	d00b      	beq.n	800b250 <_vfiprintf_r+0xc0>
 800b238:	465b      	mov	r3, fp
 800b23a:	4622      	mov	r2, r4
 800b23c:	4629      	mov	r1, r5
 800b23e:	4630      	mov	r0, r6
 800b240:	f7ff ff93 	bl	800b16a <__sfputs_r>
 800b244:	3001      	adds	r0, #1
 800b246:	f000 80aa 	beq.w	800b39e <_vfiprintf_r+0x20e>
 800b24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b24c:	445a      	add	r2, fp
 800b24e:	9209      	str	r2, [sp, #36]	; 0x24
 800b250:	f89a 3000 	ldrb.w	r3, [sl]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 80a2 	beq.w	800b39e <_vfiprintf_r+0x20e>
 800b25a:	2300      	movs	r3, #0
 800b25c:	f04f 32ff 	mov.w	r2, #4294967295
 800b260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b264:	f10a 0a01 	add.w	sl, sl, #1
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	9307      	str	r3, [sp, #28]
 800b26c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b270:	931a      	str	r3, [sp, #104]	; 0x68
 800b272:	4654      	mov	r4, sl
 800b274:	2205      	movs	r2, #5
 800b276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27a:	4858      	ldr	r0, [pc, #352]	; (800b3dc <_vfiprintf_r+0x24c>)
 800b27c:	f000 fd42 	bl	800bd04 <memchr>
 800b280:	9a04      	ldr	r2, [sp, #16]
 800b282:	b9d8      	cbnz	r0, 800b2bc <_vfiprintf_r+0x12c>
 800b284:	06d1      	lsls	r1, r2, #27
 800b286:	bf44      	itt	mi
 800b288:	2320      	movmi	r3, #32
 800b28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b28e:	0713      	lsls	r3, r2, #28
 800b290:	bf44      	itt	mi
 800b292:	232b      	movmi	r3, #43	; 0x2b
 800b294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b298:	f89a 3000 	ldrb.w	r3, [sl]
 800b29c:	2b2a      	cmp	r3, #42	; 0x2a
 800b29e:	d015      	beq.n	800b2cc <_vfiprintf_r+0x13c>
 800b2a0:	4654      	mov	r4, sl
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	f04f 0c0a 	mov.w	ip, #10
 800b2a8:	9a07      	ldr	r2, [sp, #28]
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2b0:	3b30      	subs	r3, #48	; 0x30
 800b2b2:	2b09      	cmp	r3, #9
 800b2b4:	d94e      	bls.n	800b354 <_vfiprintf_r+0x1c4>
 800b2b6:	b1b0      	cbz	r0, 800b2e6 <_vfiprintf_r+0x156>
 800b2b8:	9207      	str	r2, [sp, #28]
 800b2ba:	e014      	b.n	800b2e6 <_vfiprintf_r+0x156>
 800b2bc:	eba0 0308 	sub.w	r3, r0, r8
 800b2c0:	fa09 f303 	lsl.w	r3, r9, r3
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	46a2      	mov	sl, r4
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	e7d2      	b.n	800b272 <_vfiprintf_r+0xe2>
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	1d19      	adds	r1, r3, #4
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	9103      	str	r1, [sp, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfbb      	ittet	lt
 800b2d8:	425b      	neglt	r3, r3
 800b2da:	f042 0202 	orrlt.w	r2, r2, #2
 800b2de:	9307      	strge	r3, [sp, #28]
 800b2e0:	9307      	strlt	r3, [sp, #28]
 800b2e2:	bfb8      	it	lt
 800b2e4:	9204      	strlt	r2, [sp, #16]
 800b2e6:	7823      	ldrb	r3, [r4, #0]
 800b2e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ea:	d10c      	bne.n	800b306 <_vfiprintf_r+0x176>
 800b2ec:	7863      	ldrb	r3, [r4, #1]
 800b2ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f0:	d135      	bne.n	800b35e <_vfiprintf_r+0x1ce>
 800b2f2:	9b03      	ldr	r3, [sp, #12]
 800b2f4:	3402      	adds	r4, #2
 800b2f6:	1d1a      	adds	r2, r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	9203      	str	r2, [sp, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfb8      	it	lt
 800b300:	f04f 33ff 	movlt.w	r3, #4294967295
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b3e0 <_vfiprintf_r+0x250>
 800b30a:	2203      	movs	r2, #3
 800b30c:	4650      	mov	r0, sl
 800b30e:	7821      	ldrb	r1, [r4, #0]
 800b310:	f000 fcf8 	bl	800bd04 <memchr>
 800b314:	b140      	cbz	r0, 800b328 <_vfiprintf_r+0x198>
 800b316:	2340      	movs	r3, #64	; 0x40
 800b318:	eba0 000a 	sub.w	r0, r0, sl
 800b31c:	fa03 f000 	lsl.w	r0, r3, r0
 800b320:	9b04      	ldr	r3, [sp, #16]
 800b322:	3401      	adds	r4, #1
 800b324:	4303      	orrs	r3, r0
 800b326:	9304      	str	r3, [sp, #16]
 800b328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32c:	2206      	movs	r2, #6
 800b32e:	482d      	ldr	r0, [pc, #180]	; (800b3e4 <_vfiprintf_r+0x254>)
 800b330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b334:	f000 fce6 	bl	800bd04 <memchr>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d03f      	beq.n	800b3bc <_vfiprintf_r+0x22c>
 800b33c:	4b2a      	ldr	r3, [pc, #168]	; (800b3e8 <_vfiprintf_r+0x258>)
 800b33e:	bb1b      	cbnz	r3, 800b388 <_vfiprintf_r+0x1f8>
 800b340:	9b03      	ldr	r3, [sp, #12]
 800b342:	3307      	adds	r3, #7
 800b344:	f023 0307 	bic.w	r3, r3, #7
 800b348:	3308      	adds	r3, #8
 800b34a:	9303      	str	r3, [sp, #12]
 800b34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34e:	443b      	add	r3, r7
 800b350:	9309      	str	r3, [sp, #36]	; 0x24
 800b352:	e767      	b.n	800b224 <_vfiprintf_r+0x94>
 800b354:	460c      	mov	r4, r1
 800b356:	2001      	movs	r0, #1
 800b358:	fb0c 3202 	mla	r2, ip, r2, r3
 800b35c:	e7a5      	b.n	800b2aa <_vfiprintf_r+0x11a>
 800b35e:	2300      	movs	r3, #0
 800b360:	f04f 0c0a 	mov.w	ip, #10
 800b364:	4619      	mov	r1, r3
 800b366:	3401      	adds	r4, #1
 800b368:	9305      	str	r3, [sp, #20]
 800b36a:	4620      	mov	r0, r4
 800b36c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b370:	3a30      	subs	r2, #48	; 0x30
 800b372:	2a09      	cmp	r2, #9
 800b374:	d903      	bls.n	800b37e <_vfiprintf_r+0x1ee>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0c5      	beq.n	800b306 <_vfiprintf_r+0x176>
 800b37a:	9105      	str	r1, [sp, #20]
 800b37c:	e7c3      	b.n	800b306 <_vfiprintf_r+0x176>
 800b37e:	4604      	mov	r4, r0
 800b380:	2301      	movs	r3, #1
 800b382:	fb0c 2101 	mla	r1, ip, r1, r2
 800b386:	e7f0      	b.n	800b36a <_vfiprintf_r+0x1da>
 800b388:	ab03      	add	r3, sp, #12
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	462a      	mov	r2, r5
 800b38e:	4630      	mov	r0, r6
 800b390:	4b16      	ldr	r3, [pc, #88]	; (800b3ec <_vfiprintf_r+0x25c>)
 800b392:	a904      	add	r1, sp, #16
 800b394:	f3af 8000 	nop.w
 800b398:	4607      	mov	r7, r0
 800b39a:	1c78      	adds	r0, r7, #1
 800b39c:	d1d6      	bne.n	800b34c <_vfiprintf_r+0x1bc>
 800b39e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a0:	07d9      	lsls	r1, r3, #31
 800b3a2:	d405      	bmi.n	800b3b0 <_vfiprintf_r+0x220>
 800b3a4:	89ab      	ldrh	r3, [r5, #12]
 800b3a6:	059a      	lsls	r2, r3, #22
 800b3a8:	d402      	bmi.n	800b3b0 <_vfiprintf_r+0x220>
 800b3aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ac:	f000 fc43 	bl	800bc36 <__retarget_lock_release_recursive>
 800b3b0:	89ab      	ldrh	r3, [r5, #12]
 800b3b2:	065b      	lsls	r3, r3, #25
 800b3b4:	f53f af12 	bmi.w	800b1dc <_vfiprintf_r+0x4c>
 800b3b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3ba:	e711      	b.n	800b1e0 <_vfiprintf_r+0x50>
 800b3bc:	ab03      	add	r3, sp, #12
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <_vfiprintf_r+0x25c>)
 800b3c6:	a904      	add	r1, sp, #16
 800b3c8:	f000 f882 	bl	800b4d0 <_printf_i>
 800b3cc:	e7e4      	b.n	800b398 <_vfiprintf_r+0x208>
 800b3ce:	bf00      	nop
 800b3d0:	0800c80c 	.word	0x0800c80c
 800b3d4:	0800c82c 	.word	0x0800c82c
 800b3d8:	0800c7ec 	.word	0x0800c7ec
 800b3dc:	0800c7b9 	.word	0x0800c7b9
 800b3e0:	0800c7bf 	.word	0x0800c7bf
 800b3e4:	0800c7c3 	.word	0x0800c7c3
 800b3e8:	00000000 	.word	0x00000000
 800b3ec:	0800b16b 	.word	0x0800b16b

0800b3f0 <_printf_common>:
 800b3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f4:	4616      	mov	r6, r2
 800b3f6:	4699      	mov	r9, r3
 800b3f8:	688a      	ldr	r2, [r1, #8]
 800b3fa:	690b      	ldr	r3, [r1, #16]
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	4293      	cmp	r3, r2
 800b400:	bfb8      	it	lt
 800b402:	4613      	movlt	r3, r2
 800b404:	6033      	str	r3, [r6, #0]
 800b406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b40a:	460c      	mov	r4, r1
 800b40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b410:	b10a      	cbz	r2, 800b416 <_printf_common+0x26>
 800b412:	3301      	adds	r3, #1
 800b414:	6033      	str	r3, [r6, #0]
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	0699      	lsls	r1, r3, #26
 800b41a:	bf42      	ittt	mi
 800b41c:	6833      	ldrmi	r3, [r6, #0]
 800b41e:	3302      	addmi	r3, #2
 800b420:	6033      	strmi	r3, [r6, #0]
 800b422:	6825      	ldr	r5, [r4, #0]
 800b424:	f015 0506 	ands.w	r5, r5, #6
 800b428:	d106      	bne.n	800b438 <_printf_common+0x48>
 800b42a:	f104 0a19 	add.w	sl, r4, #25
 800b42e:	68e3      	ldr	r3, [r4, #12]
 800b430:	6832      	ldr	r2, [r6, #0]
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	42ab      	cmp	r3, r5
 800b436:	dc28      	bgt.n	800b48a <_printf_common+0x9a>
 800b438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b43c:	1e13      	subs	r3, r2, #0
 800b43e:	6822      	ldr	r2, [r4, #0]
 800b440:	bf18      	it	ne
 800b442:	2301      	movne	r3, #1
 800b444:	0692      	lsls	r2, r2, #26
 800b446:	d42d      	bmi.n	800b4a4 <_printf_common+0xb4>
 800b448:	4649      	mov	r1, r9
 800b44a:	4638      	mov	r0, r7
 800b44c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b450:	47c0      	blx	r8
 800b452:	3001      	adds	r0, #1
 800b454:	d020      	beq.n	800b498 <_printf_common+0xa8>
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	68e5      	ldr	r5, [r4, #12]
 800b45a:	f003 0306 	and.w	r3, r3, #6
 800b45e:	2b04      	cmp	r3, #4
 800b460:	bf18      	it	ne
 800b462:	2500      	movne	r5, #0
 800b464:	6832      	ldr	r2, [r6, #0]
 800b466:	f04f 0600 	mov.w	r6, #0
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	bf08      	it	eq
 800b46e:	1aad      	subeq	r5, r5, r2
 800b470:	6922      	ldr	r2, [r4, #16]
 800b472:	bf08      	it	eq
 800b474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b478:	4293      	cmp	r3, r2
 800b47a:	bfc4      	itt	gt
 800b47c:	1a9b      	subgt	r3, r3, r2
 800b47e:	18ed      	addgt	r5, r5, r3
 800b480:	341a      	adds	r4, #26
 800b482:	42b5      	cmp	r5, r6
 800b484:	d11a      	bne.n	800b4bc <_printf_common+0xcc>
 800b486:	2000      	movs	r0, #0
 800b488:	e008      	b.n	800b49c <_printf_common+0xac>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4652      	mov	r2, sl
 800b48e:	4649      	mov	r1, r9
 800b490:	4638      	mov	r0, r7
 800b492:	47c0      	blx	r8
 800b494:	3001      	adds	r0, #1
 800b496:	d103      	bne.n	800b4a0 <_printf_common+0xb0>
 800b498:	f04f 30ff 	mov.w	r0, #4294967295
 800b49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a0:	3501      	adds	r5, #1
 800b4a2:	e7c4      	b.n	800b42e <_printf_common+0x3e>
 800b4a4:	2030      	movs	r0, #48	; 0x30
 800b4a6:	18e1      	adds	r1, r4, r3
 800b4a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b2:	4422      	add	r2, r4
 800b4b4:	3302      	adds	r3, #2
 800b4b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4ba:	e7c5      	b.n	800b448 <_printf_common+0x58>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	47c0      	blx	r8
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d0e6      	beq.n	800b498 <_printf_common+0xa8>
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	e7d9      	b.n	800b482 <_printf_common+0x92>
	...

0800b4d0 <_printf_i>:
 800b4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	7e0f      	ldrb	r7, [r1, #24]
 800b4d6:	4691      	mov	r9, r2
 800b4d8:	2f78      	cmp	r7, #120	; 0x78
 800b4da:	4680      	mov	r8, r0
 800b4dc:	460c      	mov	r4, r1
 800b4de:	469a      	mov	sl, r3
 800b4e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4e6:	d807      	bhi.n	800b4f8 <_printf_i+0x28>
 800b4e8:	2f62      	cmp	r7, #98	; 0x62
 800b4ea:	d80a      	bhi.n	800b502 <_printf_i+0x32>
 800b4ec:	2f00      	cmp	r7, #0
 800b4ee:	f000 80d9 	beq.w	800b6a4 <_printf_i+0x1d4>
 800b4f2:	2f58      	cmp	r7, #88	; 0x58
 800b4f4:	f000 80a4 	beq.w	800b640 <_printf_i+0x170>
 800b4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b500:	e03a      	b.n	800b578 <_printf_i+0xa8>
 800b502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b506:	2b15      	cmp	r3, #21
 800b508:	d8f6      	bhi.n	800b4f8 <_printf_i+0x28>
 800b50a:	a101      	add	r1, pc, #4	; (adr r1, 800b510 <_printf_i+0x40>)
 800b50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b57d 	.word	0x0800b57d
 800b518:	0800b4f9 	.word	0x0800b4f9
 800b51c:	0800b4f9 	.word	0x0800b4f9
 800b520:	0800b4f9 	.word	0x0800b4f9
 800b524:	0800b4f9 	.word	0x0800b4f9
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b4f9 	.word	0x0800b4f9
 800b530:	0800b4f9 	.word	0x0800b4f9
 800b534:	0800b4f9 	.word	0x0800b4f9
 800b538:	0800b4f9 	.word	0x0800b4f9
 800b53c:	0800b68b 	.word	0x0800b68b
 800b540:	0800b5ad 	.word	0x0800b5ad
 800b544:	0800b66d 	.word	0x0800b66d
 800b548:	0800b4f9 	.word	0x0800b4f9
 800b54c:	0800b4f9 	.word	0x0800b4f9
 800b550:	0800b6ad 	.word	0x0800b6ad
 800b554:	0800b4f9 	.word	0x0800b4f9
 800b558:	0800b5ad 	.word	0x0800b5ad
 800b55c:	0800b4f9 	.word	0x0800b4f9
 800b560:	0800b4f9 	.word	0x0800b4f9
 800b564:	0800b675 	.word	0x0800b675
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	602a      	str	r2, [r5, #0]
 800b570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b578:	2301      	movs	r3, #1
 800b57a:	e0a4      	b.n	800b6c6 <_printf_i+0x1f6>
 800b57c:	6820      	ldr	r0, [r4, #0]
 800b57e:	6829      	ldr	r1, [r5, #0]
 800b580:	0606      	lsls	r6, r0, #24
 800b582:	f101 0304 	add.w	r3, r1, #4
 800b586:	d50a      	bpl.n	800b59e <_printf_i+0xce>
 800b588:	680e      	ldr	r6, [r1, #0]
 800b58a:	602b      	str	r3, [r5, #0]
 800b58c:	2e00      	cmp	r6, #0
 800b58e:	da03      	bge.n	800b598 <_printf_i+0xc8>
 800b590:	232d      	movs	r3, #45	; 0x2d
 800b592:	4276      	negs	r6, r6
 800b594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b598:	230a      	movs	r3, #10
 800b59a:	485e      	ldr	r0, [pc, #376]	; (800b714 <_printf_i+0x244>)
 800b59c:	e019      	b.n	800b5d2 <_printf_i+0x102>
 800b59e:	680e      	ldr	r6, [r1, #0]
 800b5a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5a4:	602b      	str	r3, [r5, #0]
 800b5a6:	bf18      	it	ne
 800b5a8:	b236      	sxthne	r6, r6
 800b5aa:	e7ef      	b.n	800b58c <_printf_i+0xbc>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	6820      	ldr	r0, [r4, #0]
 800b5b0:	1d19      	adds	r1, r3, #4
 800b5b2:	6029      	str	r1, [r5, #0]
 800b5b4:	0601      	lsls	r1, r0, #24
 800b5b6:	d501      	bpl.n	800b5bc <_printf_i+0xec>
 800b5b8:	681e      	ldr	r6, [r3, #0]
 800b5ba:	e002      	b.n	800b5c2 <_printf_i+0xf2>
 800b5bc:	0646      	lsls	r6, r0, #25
 800b5be:	d5fb      	bpl.n	800b5b8 <_printf_i+0xe8>
 800b5c0:	881e      	ldrh	r6, [r3, #0]
 800b5c2:	2f6f      	cmp	r7, #111	; 0x6f
 800b5c4:	bf0c      	ite	eq
 800b5c6:	2308      	moveq	r3, #8
 800b5c8:	230a      	movne	r3, #10
 800b5ca:	4852      	ldr	r0, [pc, #328]	; (800b714 <_printf_i+0x244>)
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5d2:	6865      	ldr	r5, [r4, #4]
 800b5d4:	2d00      	cmp	r5, #0
 800b5d6:	bfa8      	it	ge
 800b5d8:	6821      	ldrge	r1, [r4, #0]
 800b5da:	60a5      	str	r5, [r4, #8]
 800b5dc:	bfa4      	itt	ge
 800b5de:	f021 0104 	bicge.w	r1, r1, #4
 800b5e2:	6021      	strge	r1, [r4, #0]
 800b5e4:	b90e      	cbnz	r6, 800b5ea <_printf_i+0x11a>
 800b5e6:	2d00      	cmp	r5, #0
 800b5e8:	d04d      	beq.n	800b686 <_printf_i+0x1b6>
 800b5ea:	4615      	mov	r5, r2
 800b5ec:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5f0:	fb03 6711 	mls	r7, r3, r1, r6
 800b5f4:	5dc7      	ldrb	r7, [r0, r7]
 800b5f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5fa:	4637      	mov	r7, r6
 800b5fc:	42bb      	cmp	r3, r7
 800b5fe:	460e      	mov	r6, r1
 800b600:	d9f4      	bls.n	800b5ec <_printf_i+0x11c>
 800b602:	2b08      	cmp	r3, #8
 800b604:	d10b      	bne.n	800b61e <_printf_i+0x14e>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	07de      	lsls	r6, r3, #31
 800b60a:	d508      	bpl.n	800b61e <_printf_i+0x14e>
 800b60c:	6923      	ldr	r3, [r4, #16]
 800b60e:	6861      	ldr	r1, [r4, #4]
 800b610:	4299      	cmp	r1, r3
 800b612:	bfde      	ittt	le
 800b614:	2330      	movle	r3, #48	; 0x30
 800b616:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b61a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b61e:	1b52      	subs	r2, r2, r5
 800b620:	6122      	str	r2, [r4, #16]
 800b622:	464b      	mov	r3, r9
 800b624:	4621      	mov	r1, r4
 800b626:	4640      	mov	r0, r8
 800b628:	f8cd a000 	str.w	sl, [sp]
 800b62c:	aa03      	add	r2, sp, #12
 800b62e:	f7ff fedf 	bl	800b3f0 <_printf_common>
 800b632:	3001      	adds	r0, #1
 800b634:	d14c      	bne.n	800b6d0 <_printf_i+0x200>
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	b004      	add	sp, #16
 800b63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b640:	4834      	ldr	r0, [pc, #208]	; (800b714 <_printf_i+0x244>)
 800b642:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b646:	6829      	ldr	r1, [r5, #0]
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b64e:	6029      	str	r1, [r5, #0]
 800b650:	061d      	lsls	r5, r3, #24
 800b652:	d514      	bpl.n	800b67e <_printf_i+0x1ae>
 800b654:	07df      	lsls	r7, r3, #31
 800b656:	bf44      	itt	mi
 800b658:	f043 0320 	orrmi.w	r3, r3, #32
 800b65c:	6023      	strmi	r3, [r4, #0]
 800b65e:	b91e      	cbnz	r6, 800b668 <_printf_i+0x198>
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	f023 0320 	bic.w	r3, r3, #32
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	2310      	movs	r3, #16
 800b66a:	e7af      	b.n	800b5cc <_printf_i+0xfc>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	f043 0320 	orr.w	r3, r3, #32
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	2378      	movs	r3, #120	; 0x78
 800b676:	4828      	ldr	r0, [pc, #160]	; (800b718 <_printf_i+0x248>)
 800b678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b67c:	e7e3      	b.n	800b646 <_printf_i+0x176>
 800b67e:	0659      	lsls	r1, r3, #25
 800b680:	bf48      	it	mi
 800b682:	b2b6      	uxthmi	r6, r6
 800b684:	e7e6      	b.n	800b654 <_printf_i+0x184>
 800b686:	4615      	mov	r5, r2
 800b688:	e7bb      	b.n	800b602 <_printf_i+0x132>
 800b68a:	682b      	ldr	r3, [r5, #0]
 800b68c:	6826      	ldr	r6, [r4, #0]
 800b68e:	1d18      	adds	r0, r3, #4
 800b690:	6961      	ldr	r1, [r4, #20]
 800b692:	6028      	str	r0, [r5, #0]
 800b694:	0635      	lsls	r5, r6, #24
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	d501      	bpl.n	800b69e <_printf_i+0x1ce>
 800b69a:	6019      	str	r1, [r3, #0]
 800b69c:	e002      	b.n	800b6a4 <_printf_i+0x1d4>
 800b69e:	0670      	lsls	r0, r6, #25
 800b6a0:	d5fb      	bpl.n	800b69a <_printf_i+0x1ca>
 800b6a2:	8019      	strh	r1, [r3, #0]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4615      	mov	r5, r2
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	e7ba      	b.n	800b622 <_printf_i+0x152>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	602a      	str	r2, [r5, #0]
 800b6b4:	681d      	ldr	r5, [r3, #0]
 800b6b6:	6862      	ldr	r2, [r4, #4]
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 fb23 	bl	800bd04 <memchr>
 800b6be:	b108      	cbz	r0, 800b6c4 <_printf_i+0x1f4>
 800b6c0:	1b40      	subs	r0, r0, r5
 800b6c2:	6060      	str	r0, [r4, #4]
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	6123      	str	r3, [r4, #16]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ce:	e7a8      	b.n	800b622 <_printf_i+0x152>
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	6923      	ldr	r3, [r4, #16]
 800b6d8:	47d0      	blx	sl
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d0ab      	beq.n	800b636 <_printf_i+0x166>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	079b      	lsls	r3, r3, #30
 800b6e2:	d413      	bmi.n	800b70c <_printf_i+0x23c>
 800b6e4:	68e0      	ldr	r0, [r4, #12]
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	4298      	cmp	r0, r3
 800b6ea:	bfb8      	it	lt
 800b6ec:	4618      	movlt	r0, r3
 800b6ee:	e7a4      	b.n	800b63a <_printf_i+0x16a>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	4632      	mov	r2, r6
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	47d0      	blx	sl
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	d09b      	beq.n	800b636 <_printf_i+0x166>
 800b6fe:	3501      	adds	r5, #1
 800b700:	68e3      	ldr	r3, [r4, #12]
 800b702:	9903      	ldr	r1, [sp, #12]
 800b704:	1a5b      	subs	r3, r3, r1
 800b706:	42ab      	cmp	r3, r5
 800b708:	dcf2      	bgt.n	800b6f0 <_printf_i+0x220>
 800b70a:	e7eb      	b.n	800b6e4 <_printf_i+0x214>
 800b70c:	2500      	movs	r5, #0
 800b70e:	f104 0619 	add.w	r6, r4, #25
 800b712:	e7f5      	b.n	800b700 <_printf_i+0x230>
 800b714:	0800c7ca 	.word	0x0800c7ca
 800b718:	0800c7db 	.word	0x0800c7db

0800b71c <_sbrk_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	2300      	movs	r3, #0
 800b720:	4d05      	ldr	r5, [pc, #20]	; (800b738 <_sbrk_r+0x1c>)
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	602b      	str	r3, [r5, #0]
 800b728:	f7f5 fd18 	bl	800115c <_sbrk>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_sbrk_r+0x1a>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	b103      	cbz	r3, 800b736 <_sbrk_r+0x1a>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	200023e0 	.word	0x200023e0

0800b73c <__swbuf_r>:
 800b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73e:	460e      	mov	r6, r1
 800b740:	4614      	mov	r4, r2
 800b742:	4605      	mov	r5, r0
 800b744:	b118      	cbz	r0, 800b74e <__swbuf_r+0x12>
 800b746:	6983      	ldr	r3, [r0, #24]
 800b748:	b90b      	cbnz	r3, 800b74e <__swbuf_r+0x12>
 800b74a:	f000 f9d5 	bl	800baf8 <__sinit>
 800b74e:	4b21      	ldr	r3, [pc, #132]	; (800b7d4 <__swbuf_r+0x98>)
 800b750:	429c      	cmp	r4, r3
 800b752:	d12b      	bne.n	800b7ac <__swbuf_r+0x70>
 800b754:	686c      	ldr	r4, [r5, #4]
 800b756:	69a3      	ldr	r3, [r4, #24]
 800b758:	60a3      	str	r3, [r4, #8]
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	071a      	lsls	r2, r3, #28
 800b75e:	d52f      	bpl.n	800b7c0 <__swbuf_r+0x84>
 800b760:	6923      	ldr	r3, [r4, #16]
 800b762:	b36b      	cbz	r3, 800b7c0 <__swbuf_r+0x84>
 800b764:	6923      	ldr	r3, [r4, #16]
 800b766:	6820      	ldr	r0, [r4, #0]
 800b768:	b2f6      	uxtb	r6, r6
 800b76a:	1ac0      	subs	r0, r0, r3
 800b76c:	6963      	ldr	r3, [r4, #20]
 800b76e:	4637      	mov	r7, r6
 800b770:	4283      	cmp	r3, r0
 800b772:	dc04      	bgt.n	800b77e <__swbuf_r+0x42>
 800b774:	4621      	mov	r1, r4
 800b776:	4628      	mov	r0, r5
 800b778:	f000 f92a 	bl	800b9d0 <_fflush_r>
 800b77c:	bb30      	cbnz	r0, 800b7cc <__swbuf_r+0x90>
 800b77e:	68a3      	ldr	r3, [r4, #8]
 800b780:	3001      	adds	r0, #1
 800b782:	3b01      	subs	r3, #1
 800b784:	60a3      	str	r3, [r4, #8]
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	701e      	strb	r6, [r3, #0]
 800b78e:	6963      	ldr	r3, [r4, #20]
 800b790:	4283      	cmp	r3, r0
 800b792:	d004      	beq.n	800b79e <__swbuf_r+0x62>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	07db      	lsls	r3, r3, #31
 800b798:	d506      	bpl.n	800b7a8 <__swbuf_r+0x6c>
 800b79a:	2e0a      	cmp	r6, #10
 800b79c:	d104      	bne.n	800b7a8 <__swbuf_r+0x6c>
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	f000 f915 	bl	800b9d0 <_fflush_r>
 800b7a6:	b988      	cbnz	r0, 800b7cc <__swbuf_r+0x90>
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <__swbuf_r+0x9c>)
 800b7ae:	429c      	cmp	r4, r3
 800b7b0:	d101      	bne.n	800b7b6 <__swbuf_r+0x7a>
 800b7b2:	68ac      	ldr	r4, [r5, #8]
 800b7b4:	e7cf      	b.n	800b756 <__swbuf_r+0x1a>
 800b7b6:	4b09      	ldr	r3, [pc, #36]	; (800b7dc <__swbuf_r+0xa0>)
 800b7b8:	429c      	cmp	r4, r3
 800b7ba:	bf08      	it	eq
 800b7bc:	68ec      	ldreq	r4, [r5, #12]
 800b7be:	e7ca      	b.n	800b756 <__swbuf_r+0x1a>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f000 f80c 	bl	800b7e0 <__swsetup_r>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d0cb      	beq.n	800b764 <__swbuf_r+0x28>
 800b7cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d0:	e7ea      	b.n	800b7a8 <__swbuf_r+0x6c>
 800b7d2:	bf00      	nop
 800b7d4:	0800c80c 	.word	0x0800c80c
 800b7d8:	0800c82c 	.word	0x0800c82c
 800b7dc:	0800c7ec 	.word	0x0800c7ec

0800b7e0 <__swsetup_r>:
 800b7e0:	4b32      	ldr	r3, [pc, #200]	; (800b8ac <__swsetup_r+0xcc>)
 800b7e2:	b570      	push	{r4, r5, r6, lr}
 800b7e4:	681d      	ldr	r5, [r3, #0]
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	b125      	cbz	r5, 800b7f6 <__swsetup_r+0x16>
 800b7ec:	69ab      	ldr	r3, [r5, #24]
 800b7ee:	b913      	cbnz	r3, 800b7f6 <__swsetup_r+0x16>
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f000 f981 	bl	800baf8 <__sinit>
 800b7f6:	4b2e      	ldr	r3, [pc, #184]	; (800b8b0 <__swsetup_r+0xd0>)
 800b7f8:	429c      	cmp	r4, r3
 800b7fa:	d10f      	bne.n	800b81c <__swsetup_r+0x3c>
 800b7fc:	686c      	ldr	r4, [r5, #4]
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b804:	0719      	lsls	r1, r3, #28
 800b806:	d42c      	bmi.n	800b862 <__swsetup_r+0x82>
 800b808:	06dd      	lsls	r5, r3, #27
 800b80a:	d411      	bmi.n	800b830 <__swsetup_r+0x50>
 800b80c:	2309      	movs	r3, #9
 800b80e:	6033      	str	r3, [r6, #0]
 800b810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	e03e      	b.n	800b89a <__swsetup_r+0xba>
 800b81c:	4b25      	ldr	r3, [pc, #148]	; (800b8b4 <__swsetup_r+0xd4>)
 800b81e:	429c      	cmp	r4, r3
 800b820:	d101      	bne.n	800b826 <__swsetup_r+0x46>
 800b822:	68ac      	ldr	r4, [r5, #8]
 800b824:	e7eb      	b.n	800b7fe <__swsetup_r+0x1e>
 800b826:	4b24      	ldr	r3, [pc, #144]	; (800b8b8 <__swsetup_r+0xd8>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	bf08      	it	eq
 800b82c:	68ec      	ldreq	r4, [r5, #12]
 800b82e:	e7e6      	b.n	800b7fe <__swsetup_r+0x1e>
 800b830:	0758      	lsls	r0, r3, #29
 800b832:	d512      	bpl.n	800b85a <__swsetup_r+0x7a>
 800b834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b836:	b141      	cbz	r1, 800b84a <__swsetup_r+0x6a>
 800b838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b83c:	4299      	cmp	r1, r3
 800b83e:	d002      	beq.n	800b846 <__swsetup_r+0x66>
 800b840:	4630      	mov	r0, r6
 800b842:	f7ff fa45 	bl	800acd0 <_free_r>
 800b846:	2300      	movs	r3, #0
 800b848:	6363      	str	r3, [r4, #52]	; 0x34
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b850:	81a3      	strh	r3, [r4, #12]
 800b852:	2300      	movs	r3, #0
 800b854:	6063      	str	r3, [r4, #4]
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f043 0308 	orr.w	r3, r3, #8
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	b94b      	cbnz	r3, 800b87a <__swsetup_r+0x9a>
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b870:	d003      	beq.n	800b87a <__swsetup_r+0x9a>
 800b872:	4621      	mov	r1, r4
 800b874:	4630      	mov	r0, r6
 800b876:	f000 fa05 	bl	800bc84 <__smakebuf_r>
 800b87a:	89a0      	ldrh	r0, [r4, #12]
 800b87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b880:	f010 0301 	ands.w	r3, r0, #1
 800b884:	d00a      	beq.n	800b89c <__swsetup_r+0xbc>
 800b886:	2300      	movs	r3, #0
 800b888:	60a3      	str	r3, [r4, #8]
 800b88a:	6963      	ldr	r3, [r4, #20]
 800b88c:	425b      	negs	r3, r3
 800b88e:	61a3      	str	r3, [r4, #24]
 800b890:	6923      	ldr	r3, [r4, #16]
 800b892:	b943      	cbnz	r3, 800b8a6 <__swsetup_r+0xc6>
 800b894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b898:	d1ba      	bne.n	800b810 <__swsetup_r+0x30>
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	0781      	lsls	r1, r0, #30
 800b89e:	bf58      	it	pl
 800b8a0:	6963      	ldrpl	r3, [r4, #20]
 800b8a2:	60a3      	str	r3, [r4, #8]
 800b8a4:	e7f4      	b.n	800b890 <__swsetup_r+0xb0>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e7f7      	b.n	800b89a <__swsetup_r+0xba>
 800b8aa:	bf00      	nop
 800b8ac:	20000444 	.word	0x20000444
 800b8b0:	0800c80c 	.word	0x0800c80c
 800b8b4:	0800c82c 	.word	0x0800c82c
 800b8b8:	0800c7ec 	.word	0x0800c7ec

0800b8bc <abort>:
 800b8bc:	2006      	movs	r0, #6
 800b8be:	b508      	push	{r3, lr}
 800b8c0:	f000 faba 	bl	800be38 <raise>
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	f7f5 fbd6 	bl	8001076 <_exit>
	...

0800b8cc <__sflush_r>:
 800b8cc:	898a      	ldrh	r2, [r1, #12]
 800b8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	0710      	lsls	r0, r2, #28
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	d457      	bmi.n	800b988 <__sflush_r+0xbc>
 800b8d8:	684b      	ldr	r3, [r1, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	dc04      	bgt.n	800b8e8 <__sflush_r+0x1c>
 800b8de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dc01      	bgt.n	800b8e8 <__sflush_r+0x1c>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d0fa      	beq.n	800b8e4 <__sflush_r+0x18>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8f4:	682f      	ldr	r7, [r5, #0]
 800b8f6:	602b      	str	r3, [r5, #0]
 800b8f8:	d032      	beq.n	800b960 <__sflush_r+0x94>
 800b8fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	075a      	lsls	r2, r3, #29
 800b900:	d505      	bpl.n	800b90e <__sflush_r+0x42>
 800b902:	6863      	ldr	r3, [r4, #4]
 800b904:	1ac0      	subs	r0, r0, r3
 800b906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b908:	b10b      	cbz	r3, 800b90e <__sflush_r+0x42>
 800b90a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b90c:	1ac0      	subs	r0, r0, r3
 800b90e:	2300      	movs	r3, #0
 800b910:	4602      	mov	r2, r0
 800b912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b914:	4628      	mov	r0, r5
 800b916:	6a21      	ldr	r1, [r4, #32]
 800b918:	47b0      	blx	r6
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	d106      	bne.n	800b92e <__sflush_r+0x62>
 800b920:	6829      	ldr	r1, [r5, #0]
 800b922:	291d      	cmp	r1, #29
 800b924:	d82c      	bhi.n	800b980 <__sflush_r+0xb4>
 800b926:	4a29      	ldr	r2, [pc, #164]	; (800b9cc <__sflush_r+0x100>)
 800b928:	40ca      	lsrs	r2, r1
 800b92a:	07d6      	lsls	r6, r2, #31
 800b92c:	d528      	bpl.n	800b980 <__sflush_r+0xb4>
 800b92e:	2200      	movs	r2, #0
 800b930:	6062      	str	r2, [r4, #4]
 800b932:	6922      	ldr	r2, [r4, #16]
 800b934:	04d9      	lsls	r1, r3, #19
 800b936:	6022      	str	r2, [r4, #0]
 800b938:	d504      	bpl.n	800b944 <__sflush_r+0x78>
 800b93a:	1c42      	adds	r2, r0, #1
 800b93c:	d101      	bne.n	800b942 <__sflush_r+0x76>
 800b93e:	682b      	ldr	r3, [r5, #0]
 800b940:	b903      	cbnz	r3, 800b944 <__sflush_r+0x78>
 800b942:	6560      	str	r0, [r4, #84]	; 0x54
 800b944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b946:	602f      	str	r7, [r5, #0]
 800b948:	2900      	cmp	r1, #0
 800b94a:	d0cb      	beq.n	800b8e4 <__sflush_r+0x18>
 800b94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b950:	4299      	cmp	r1, r3
 800b952:	d002      	beq.n	800b95a <__sflush_r+0x8e>
 800b954:	4628      	mov	r0, r5
 800b956:	f7ff f9bb 	bl	800acd0 <_free_r>
 800b95a:	2000      	movs	r0, #0
 800b95c:	6360      	str	r0, [r4, #52]	; 0x34
 800b95e:	e7c2      	b.n	800b8e6 <__sflush_r+0x1a>
 800b960:	6a21      	ldr	r1, [r4, #32]
 800b962:	2301      	movs	r3, #1
 800b964:	4628      	mov	r0, r5
 800b966:	47b0      	blx	r6
 800b968:	1c41      	adds	r1, r0, #1
 800b96a:	d1c7      	bne.n	800b8fc <__sflush_r+0x30>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0c4      	beq.n	800b8fc <__sflush_r+0x30>
 800b972:	2b1d      	cmp	r3, #29
 800b974:	d001      	beq.n	800b97a <__sflush_r+0xae>
 800b976:	2b16      	cmp	r3, #22
 800b978:	d101      	bne.n	800b97e <__sflush_r+0xb2>
 800b97a:	602f      	str	r7, [r5, #0]
 800b97c:	e7b2      	b.n	800b8e4 <__sflush_r+0x18>
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	e7ae      	b.n	800b8e6 <__sflush_r+0x1a>
 800b988:	690f      	ldr	r7, [r1, #16]
 800b98a:	2f00      	cmp	r7, #0
 800b98c:	d0aa      	beq.n	800b8e4 <__sflush_r+0x18>
 800b98e:	0793      	lsls	r3, r2, #30
 800b990:	bf18      	it	ne
 800b992:	2300      	movne	r3, #0
 800b994:	680e      	ldr	r6, [r1, #0]
 800b996:	bf08      	it	eq
 800b998:	694b      	ldreq	r3, [r1, #20]
 800b99a:	1bf6      	subs	r6, r6, r7
 800b99c:	600f      	str	r7, [r1, #0]
 800b99e:	608b      	str	r3, [r1, #8]
 800b9a0:	2e00      	cmp	r6, #0
 800b9a2:	dd9f      	ble.n	800b8e4 <__sflush_r+0x18>
 800b9a4:	4633      	mov	r3, r6
 800b9a6:	463a      	mov	r2, r7
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	6a21      	ldr	r1, [r4, #32]
 800b9ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b9b0:	47e0      	blx	ip
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	dc06      	bgt.n	800b9c4 <__sflush_r+0xf8>
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	e790      	b.n	800b8e6 <__sflush_r+0x1a>
 800b9c4:	4407      	add	r7, r0
 800b9c6:	1a36      	subs	r6, r6, r0
 800b9c8:	e7ea      	b.n	800b9a0 <__sflush_r+0xd4>
 800b9ca:	bf00      	nop
 800b9cc:	20400001 	.word	0x20400001

0800b9d0 <_fflush_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	690b      	ldr	r3, [r1, #16]
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	b913      	cbnz	r3, 800b9e0 <_fflush_r+0x10>
 800b9da:	2500      	movs	r5, #0
 800b9dc:	4628      	mov	r0, r5
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	b118      	cbz	r0, 800b9ea <_fflush_r+0x1a>
 800b9e2:	6983      	ldr	r3, [r0, #24]
 800b9e4:	b90b      	cbnz	r3, 800b9ea <_fflush_r+0x1a>
 800b9e6:	f000 f887 	bl	800baf8 <__sinit>
 800b9ea:	4b14      	ldr	r3, [pc, #80]	; (800ba3c <_fflush_r+0x6c>)
 800b9ec:	429c      	cmp	r4, r3
 800b9ee:	d11b      	bne.n	800ba28 <_fflush_r+0x58>
 800b9f0:	686c      	ldr	r4, [r5, #4]
 800b9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0ef      	beq.n	800b9da <_fflush_r+0xa>
 800b9fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9fc:	07d0      	lsls	r0, r2, #31
 800b9fe:	d404      	bmi.n	800ba0a <_fflush_r+0x3a>
 800ba00:	0599      	lsls	r1, r3, #22
 800ba02:	d402      	bmi.n	800ba0a <_fflush_r+0x3a>
 800ba04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba06:	f000 f915 	bl	800bc34 <__retarget_lock_acquire_recursive>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	f7ff ff5d 	bl	800b8cc <__sflush_r>
 800ba12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba14:	4605      	mov	r5, r0
 800ba16:	07da      	lsls	r2, r3, #31
 800ba18:	d4e0      	bmi.n	800b9dc <_fflush_r+0xc>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	059b      	lsls	r3, r3, #22
 800ba1e:	d4dd      	bmi.n	800b9dc <_fflush_r+0xc>
 800ba20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba22:	f000 f908 	bl	800bc36 <__retarget_lock_release_recursive>
 800ba26:	e7d9      	b.n	800b9dc <_fflush_r+0xc>
 800ba28:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <_fflush_r+0x70>)
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d101      	bne.n	800ba32 <_fflush_r+0x62>
 800ba2e:	68ac      	ldr	r4, [r5, #8]
 800ba30:	e7df      	b.n	800b9f2 <_fflush_r+0x22>
 800ba32:	4b04      	ldr	r3, [pc, #16]	; (800ba44 <_fflush_r+0x74>)
 800ba34:	429c      	cmp	r4, r3
 800ba36:	bf08      	it	eq
 800ba38:	68ec      	ldreq	r4, [r5, #12]
 800ba3a:	e7da      	b.n	800b9f2 <_fflush_r+0x22>
 800ba3c:	0800c80c 	.word	0x0800c80c
 800ba40:	0800c82c 	.word	0x0800c82c
 800ba44:	0800c7ec 	.word	0x0800c7ec

0800ba48 <std>:
 800ba48:	2300      	movs	r3, #0
 800ba4a:	b510      	push	{r4, lr}
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ba52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba56:	6083      	str	r3, [r0, #8]
 800ba58:	8181      	strh	r1, [r0, #12]
 800ba5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ba5c:	81c2      	strh	r2, [r0, #14]
 800ba5e:	6183      	str	r3, [r0, #24]
 800ba60:	4619      	mov	r1, r3
 800ba62:	2208      	movs	r2, #8
 800ba64:	305c      	adds	r0, #92	; 0x5c
 800ba66:	f7fe ffcd 	bl	800aa04 <memset>
 800ba6a:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <std+0x38>)
 800ba6c:	6224      	str	r4, [r4, #32]
 800ba6e:	6263      	str	r3, [r4, #36]	; 0x24
 800ba70:	4b04      	ldr	r3, [pc, #16]	; (800ba84 <std+0x3c>)
 800ba72:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba74:	4b04      	ldr	r3, [pc, #16]	; (800ba88 <std+0x40>)
 800ba76:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba78:	4b04      	ldr	r3, [pc, #16]	; (800ba8c <std+0x44>)
 800ba7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ba7c:	bd10      	pop	{r4, pc}
 800ba7e:	bf00      	nop
 800ba80:	0800be71 	.word	0x0800be71
 800ba84:	0800be93 	.word	0x0800be93
 800ba88:	0800becb 	.word	0x0800becb
 800ba8c:	0800beef 	.word	0x0800beef

0800ba90 <_cleanup_r>:
 800ba90:	4901      	ldr	r1, [pc, #4]	; (800ba98 <_cleanup_r+0x8>)
 800ba92:	f000 b8af 	b.w	800bbf4 <_fwalk_reent>
 800ba96:	bf00      	nop
 800ba98:	0800b9d1 	.word	0x0800b9d1

0800ba9c <__sfmoreglue>:
 800ba9c:	2268      	movs	r2, #104	; 0x68
 800ba9e:	b570      	push	{r4, r5, r6, lr}
 800baa0:	1e4d      	subs	r5, r1, #1
 800baa2:	4355      	muls	r5, r2
 800baa4:	460e      	mov	r6, r1
 800baa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800baaa:	f7ff f979 	bl	800ada0 <_malloc_r>
 800baae:	4604      	mov	r4, r0
 800bab0:	b140      	cbz	r0, 800bac4 <__sfmoreglue+0x28>
 800bab2:	2100      	movs	r1, #0
 800bab4:	e9c0 1600 	strd	r1, r6, [r0]
 800bab8:	300c      	adds	r0, #12
 800baba:	60a0      	str	r0, [r4, #8]
 800babc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bac0:	f7fe ffa0 	bl	800aa04 <memset>
 800bac4:	4620      	mov	r0, r4
 800bac6:	bd70      	pop	{r4, r5, r6, pc}

0800bac8 <__sfp_lock_acquire>:
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <__sfp_lock_acquire+0x8>)
 800baca:	f000 b8b3 	b.w	800bc34 <__retarget_lock_acquire_recursive>
 800bace:	bf00      	nop
 800bad0:	200023dd 	.word	0x200023dd

0800bad4 <__sfp_lock_release>:
 800bad4:	4801      	ldr	r0, [pc, #4]	; (800badc <__sfp_lock_release+0x8>)
 800bad6:	f000 b8ae 	b.w	800bc36 <__retarget_lock_release_recursive>
 800bada:	bf00      	nop
 800badc:	200023dd 	.word	0x200023dd

0800bae0 <__sinit_lock_acquire>:
 800bae0:	4801      	ldr	r0, [pc, #4]	; (800bae8 <__sinit_lock_acquire+0x8>)
 800bae2:	f000 b8a7 	b.w	800bc34 <__retarget_lock_acquire_recursive>
 800bae6:	bf00      	nop
 800bae8:	200023de 	.word	0x200023de

0800baec <__sinit_lock_release>:
 800baec:	4801      	ldr	r0, [pc, #4]	; (800baf4 <__sinit_lock_release+0x8>)
 800baee:	f000 b8a2 	b.w	800bc36 <__retarget_lock_release_recursive>
 800baf2:	bf00      	nop
 800baf4:	200023de 	.word	0x200023de

0800baf8 <__sinit>:
 800baf8:	b510      	push	{r4, lr}
 800bafa:	4604      	mov	r4, r0
 800bafc:	f7ff fff0 	bl	800bae0 <__sinit_lock_acquire>
 800bb00:	69a3      	ldr	r3, [r4, #24]
 800bb02:	b11b      	cbz	r3, 800bb0c <__sinit+0x14>
 800bb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb08:	f7ff bff0 	b.w	800baec <__sinit_lock_release>
 800bb0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb10:	6523      	str	r3, [r4, #80]	; 0x50
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <__sinit+0x68>)
 800bb14:	4a13      	ldr	r2, [pc, #76]	; (800bb64 <__sinit+0x6c>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb1a:	42a3      	cmp	r3, r4
 800bb1c:	bf08      	it	eq
 800bb1e:	2301      	moveq	r3, #1
 800bb20:	4620      	mov	r0, r4
 800bb22:	bf08      	it	eq
 800bb24:	61a3      	streq	r3, [r4, #24]
 800bb26:	f000 f81f 	bl	800bb68 <__sfp>
 800bb2a:	6060      	str	r0, [r4, #4]
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 f81b 	bl	800bb68 <__sfp>
 800bb32:	60a0      	str	r0, [r4, #8]
 800bb34:	4620      	mov	r0, r4
 800bb36:	f000 f817 	bl	800bb68 <__sfp>
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2104      	movs	r1, #4
 800bb3e:	60e0      	str	r0, [r4, #12]
 800bb40:	6860      	ldr	r0, [r4, #4]
 800bb42:	f7ff ff81 	bl	800ba48 <std>
 800bb46:	2201      	movs	r2, #1
 800bb48:	2109      	movs	r1, #9
 800bb4a:	68a0      	ldr	r0, [r4, #8]
 800bb4c:	f7ff ff7c 	bl	800ba48 <std>
 800bb50:	2202      	movs	r2, #2
 800bb52:	2112      	movs	r1, #18
 800bb54:	68e0      	ldr	r0, [r4, #12]
 800bb56:	f7ff ff77 	bl	800ba48 <std>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	61a3      	str	r3, [r4, #24]
 800bb5e:	e7d1      	b.n	800bb04 <__sinit+0xc>
 800bb60:	0800c604 	.word	0x0800c604
 800bb64:	0800ba91 	.word	0x0800ba91

0800bb68 <__sfp>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	f7ff ffac 	bl	800bac8 <__sfp_lock_acquire>
 800bb70:	4b1e      	ldr	r3, [pc, #120]	; (800bbec <__sfp+0x84>)
 800bb72:	681e      	ldr	r6, [r3, #0]
 800bb74:	69b3      	ldr	r3, [r6, #24]
 800bb76:	b913      	cbnz	r3, 800bb7e <__sfp+0x16>
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff ffbd 	bl	800baf8 <__sinit>
 800bb7e:	3648      	adds	r6, #72	; 0x48
 800bb80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	d503      	bpl.n	800bb90 <__sfp+0x28>
 800bb88:	6833      	ldr	r3, [r6, #0]
 800bb8a:	b30b      	cbz	r3, 800bbd0 <__sfp+0x68>
 800bb8c:	6836      	ldr	r6, [r6, #0]
 800bb8e:	e7f7      	b.n	800bb80 <__sfp+0x18>
 800bb90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb94:	b9d5      	cbnz	r5, 800bbcc <__sfp+0x64>
 800bb96:	4b16      	ldr	r3, [pc, #88]	; (800bbf0 <__sfp+0x88>)
 800bb98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb9c:	60e3      	str	r3, [r4, #12]
 800bb9e:	6665      	str	r5, [r4, #100]	; 0x64
 800bba0:	f000 f847 	bl	800bc32 <__retarget_lock_init_recursive>
 800bba4:	f7ff ff96 	bl	800bad4 <__sfp_lock_release>
 800bba8:	2208      	movs	r2, #8
 800bbaa:	4629      	mov	r1, r5
 800bbac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbb4:	6025      	str	r5, [r4, #0]
 800bbb6:	61a5      	str	r5, [r4, #24]
 800bbb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbbc:	f7fe ff22 	bl	800aa04 <memset>
 800bbc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbc8:	4620      	mov	r0, r4
 800bbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbcc:	3468      	adds	r4, #104	; 0x68
 800bbce:	e7d9      	b.n	800bb84 <__sfp+0x1c>
 800bbd0:	2104      	movs	r1, #4
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	f7ff ff62 	bl	800ba9c <__sfmoreglue>
 800bbd8:	4604      	mov	r4, r0
 800bbda:	6030      	str	r0, [r6, #0]
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d1d5      	bne.n	800bb8c <__sfp+0x24>
 800bbe0:	f7ff ff78 	bl	800bad4 <__sfp_lock_release>
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	e7ee      	b.n	800bbc8 <__sfp+0x60>
 800bbea:	bf00      	nop
 800bbec:	0800c604 	.word	0x0800c604
 800bbf0:	ffff0001 	.word	0xffff0001

0800bbf4 <_fwalk_reent>:
 800bbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	4688      	mov	r8, r1
 800bbfc:	2700      	movs	r7, #0
 800bbfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc06:	f1b9 0901 	subs.w	r9, r9, #1
 800bc0a:	d505      	bpl.n	800bc18 <_fwalk_reent+0x24>
 800bc0c:	6824      	ldr	r4, [r4, #0]
 800bc0e:	2c00      	cmp	r4, #0
 800bc10:	d1f7      	bne.n	800bc02 <_fwalk_reent+0xe>
 800bc12:	4638      	mov	r0, r7
 800bc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc18:	89ab      	ldrh	r3, [r5, #12]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d907      	bls.n	800bc2e <_fwalk_reent+0x3a>
 800bc1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc22:	3301      	adds	r3, #1
 800bc24:	d003      	beq.n	800bc2e <_fwalk_reent+0x3a>
 800bc26:	4629      	mov	r1, r5
 800bc28:	4630      	mov	r0, r6
 800bc2a:	47c0      	blx	r8
 800bc2c:	4307      	orrs	r7, r0
 800bc2e:	3568      	adds	r5, #104	; 0x68
 800bc30:	e7e9      	b.n	800bc06 <_fwalk_reent+0x12>

0800bc32 <__retarget_lock_init_recursive>:
 800bc32:	4770      	bx	lr

0800bc34 <__retarget_lock_acquire_recursive>:
 800bc34:	4770      	bx	lr

0800bc36 <__retarget_lock_release_recursive>:
 800bc36:	4770      	bx	lr

0800bc38 <__swhatbuf_r>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	460e      	mov	r6, r1
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	4614      	mov	r4, r2
 800bc42:	2900      	cmp	r1, #0
 800bc44:	461d      	mov	r5, r3
 800bc46:	b096      	sub	sp, #88	; 0x58
 800bc48:	da08      	bge.n	800bc5c <__swhatbuf_r+0x24>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc50:	602a      	str	r2, [r5, #0]
 800bc52:	061a      	lsls	r2, r3, #24
 800bc54:	d410      	bmi.n	800bc78 <__swhatbuf_r+0x40>
 800bc56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc5a:	e00e      	b.n	800bc7a <__swhatbuf_r+0x42>
 800bc5c:	466a      	mov	r2, sp
 800bc5e:	f000 f96d 	bl	800bf3c <_fstat_r>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	dbf1      	blt.n	800bc4a <__swhatbuf_r+0x12>
 800bc66:	9a01      	ldr	r2, [sp, #4]
 800bc68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc70:	425a      	negs	r2, r3
 800bc72:	415a      	adcs	r2, r3
 800bc74:	602a      	str	r2, [r5, #0]
 800bc76:	e7ee      	b.n	800bc56 <__swhatbuf_r+0x1e>
 800bc78:	2340      	movs	r3, #64	; 0x40
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	b016      	add	sp, #88	; 0x58
 800bc80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc84 <__smakebuf_r>:
 800bc84:	898b      	ldrh	r3, [r1, #12]
 800bc86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc88:	079d      	lsls	r5, r3, #30
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	d507      	bpl.n	800bca0 <__smakebuf_r+0x1c>
 800bc90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	6123      	str	r3, [r4, #16]
 800bc98:	2301      	movs	r3, #1
 800bc9a:	6163      	str	r3, [r4, #20]
 800bc9c:	b002      	add	sp, #8
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
 800bca0:	466a      	mov	r2, sp
 800bca2:	ab01      	add	r3, sp, #4
 800bca4:	f7ff ffc8 	bl	800bc38 <__swhatbuf_r>
 800bca8:	9900      	ldr	r1, [sp, #0]
 800bcaa:	4605      	mov	r5, r0
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7ff f877 	bl	800ada0 <_malloc_r>
 800bcb2:	b948      	cbnz	r0, 800bcc8 <__smakebuf_r+0x44>
 800bcb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb8:	059a      	lsls	r2, r3, #22
 800bcba:	d4ef      	bmi.n	800bc9c <__smakebuf_r+0x18>
 800bcbc:	f023 0303 	bic.w	r3, r3, #3
 800bcc0:	f043 0302 	orr.w	r3, r3, #2
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	e7e3      	b.n	800bc90 <__smakebuf_r+0xc>
 800bcc8:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <__smakebuf_r+0x7c>)
 800bcca:	62b3      	str	r3, [r6, #40]	; 0x28
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	6020      	str	r0, [r4, #0]
 800bcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd4:	81a3      	strh	r3, [r4, #12]
 800bcd6:	9b00      	ldr	r3, [sp, #0]
 800bcd8:	6120      	str	r0, [r4, #16]
 800bcda:	6163      	str	r3, [r4, #20]
 800bcdc:	9b01      	ldr	r3, [sp, #4]
 800bcde:	b15b      	cbz	r3, 800bcf8 <__smakebuf_r+0x74>
 800bce0:	4630      	mov	r0, r6
 800bce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bce6:	f000 f93b 	bl	800bf60 <_isatty_r>
 800bcea:	b128      	cbz	r0, 800bcf8 <__smakebuf_r+0x74>
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	f023 0303 	bic.w	r3, r3, #3
 800bcf2:	f043 0301 	orr.w	r3, r3, #1
 800bcf6:	81a3      	strh	r3, [r4, #12]
 800bcf8:	89a0      	ldrh	r0, [r4, #12]
 800bcfa:	4305      	orrs	r5, r0
 800bcfc:	81a5      	strh	r5, [r4, #12]
 800bcfe:	e7cd      	b.n	800bc9c <__smakebuf_r+0x18>
 800bd00:	0800ba91 	.word	0x0800ba91

0800bd04 <memchr>:
 800bd04:	4603      	mov	r3, r0
 800bd06:	b510      	push	{r4, lr}
 800bd08:	b2c9      	uxtb	r1, r1
 800bd0a:	4402      	add	r2, r0
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	d101      	bne.n	800bd16 <memchr+0x12>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e003      	b.n	800bd1e <memchr+0x1a>
 800bd16:	7804      	ldrb	r4, [r0, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	428c      	cmp	r4, r1
 800bd1c:	d1f6      	bne.n	800bd0c <memchr+0x8>
 800bd1e:	bd10      	pop	{r4, pc}

0800bd20 <memcpy>:
 800bd20:	440a      	add	r2, r1
 800bd22:	4291      	cmp	r1, r2
 800bd24:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd28:	d100      	bne.n	800bd2c <memcpy+0xc>
 800bd2a:	4770      	bx	lr
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd32:	4291      	cmp	r1, r2
 800bd34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd38:	d1f9      	bne.n	800bd2e <memcpy+0xe>
 800bd3a:	bd10      	pop	{r4, pc}

0800bd3c <memmove>:
 800bd3c:	4288      	cmp	r0, r1
 800bd3e:	b510      	push	{r4, lr}
 800bd40:	eb01 0402 	add.w	r4, r1, r2
 800bd44:	d902      	bls.n	800bd4c <memmove+0x10>
 800bd46:	4284      	cmp	r4, r0
 800bd48:	4623      	mov	r3, r4
 800bd4a:	d807      	bhi.n	800bd5c <memmove+0x20>
 800bd4c:	1e43      	subs	r3, r0, #1
 800bd4e:	42a1      	cmp	r1, r4
 800bd50:	d008      	beq.n	800bd64 <memmove+0x28>
 800bd52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd5a:	e7f8      	b.n	800bd4e <memmove+0x12>
 800bd5c:	4601      	mov	r1, r0
 800bd5e:	4402      	add	r2, r0
 800bd60:	428a      	cmp	r2, r1
 800bd62:	d100      	bne.n	800bd66 <memmove+0x2a>
 800bd64:	bd10      	pop	{r4, pc}
 800bd66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd6e:	e7f7      	b.n	800bd60 <memmove+0x24>

0800bd70 <__malloc_lock>:
 800bd70:	4801      	ldr	r0, [pc, #4]	; (800bd78 <__malloc_lock+0x8>)
 800bd72:	f7ff bf5f 	b.w	800bc34 <__retarget_lock_acquire_recursive>
 800bd76:	bf00      	nop
 800bd78:	200023dc 	.word	0x200023dc

0800bd7c <__malloc_unlock>:
 800bd7c:	4801      	ldr	r0, [pc, #4]	; (800bd84 <__malloc_unlock+0x8>)
 800bd7e:	f7ff bf5a 	b.w	800bc36 <__retarget_lock_release_recursive>
 800bd82:	bf00      	nop
 800bd84:	200023dc 	.word	0x200023dc

0800bd88 <_realloc_r>:
 800bd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8c:	4680      	mov	r8, r0
 800bd8e:	4614      	mov	r4, r2
 800bd90:	460e      	mov	r6, r1
 800bd92:	b921      	cbnz	r1, 800bd9e <_realloc_r+0x16>
 800bd94:	4611      	mov	r1, r2
 800bd96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9a:	f7ff b801 	b.w	800ada0 <_malloc_r>
 800bd9e:	b92a      	cbnz	r2, 800bdac <_realloc_r+0x24>
 800bda0:	f7fe ff96 	bl	800acd0 <_free_r>
 800bda4:	4625      	mov	r5, r4
 800bda6:	4628      	mov	r0, r5
 800bda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdac:	f000 f8fa 	bl	800bfa4 <_malloc_usable_size_r>
 800bdb0:	4284      	cmp	r4, r0
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	d802      	bhi.n	800bdbc <_realloc_r+0x34>
 800bdb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdba:	d812      	bhi.n	800bde2 <_realloc_r+0x5a>
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4640      	mov	r0, r8
 800bdc0:	f7fe ffee 	bl	800ada0 <_malloc_r>
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d0ed      	beq.n	800bda6 <_realloc_r+0x1e>
 800bdca:	42bc      	cmp	r4, r7
 800bdcc:	4622      	mov	r2, r4
 800bdce:	4631      	mov	r1, r6
 800bdd0:	bf28      	it	cs
 800bdd2:	463a      	movcs	r2, r7
 800bdd4:	f7ff ffa4 	bl	800bd20 <memcpy>
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4640      	mov	r0, r8
 800bddc:	f7fe ff78 	bl	800acd0 <_free_r>
 800bde0:	e7e1      	b.n	800bda6 <_realloc_r+0x1e>
 800bde2:	4635      	mov	r5, r6
 800bde4:	e7df      	b.n	800bda6 <_realloc_r+0x1e>

0800bde6 <_raise_r>:
 800bde6:	291f      	cmp	r1, #31
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4604      	mov	r4, r0
 800bdec:	460d      	mov	r5, r1
 800bdee:	d904      	bls.n	800bdfa <_raise_r+0x14>
 800bdf0:	2316      	movs	r3, #22
 800bdf2:	6003      	str	r3, [r0, #0]
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf8:	bd38      	pop	{r3, r4, r5, pc}
 800bdfa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdfc:	b112      	cbz	r2, 800be04 <_raise_r+0x1e>
 800bdfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be02:	b94b      	cbnz	r3, 800be18 <_raise_r+0x32>
 800be04:	4620      	mov	r0, r4
 800be06:	f000 f831 	bl	800be6c <_getpid_r>
 800be0a:	462a      	mov	r2, r5
 800be0c:	4601      	mov	r1, r0
 800be0e:	4620      	mov	r0, r4
 800be10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be14:	f000 b818 	b.w	800be48 <_kill_r>
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d00a      	beq.n	800be32 <_raise_r+0x4c>
 800be1c:	1c59      	adds	r1, r3, #1
 800be1e:	d103      	bne.n	800be28 <_raise_r+0x42>
 800be20:	2316      	movs	r3, #22
 800be22:	6003      	str	r3, [r0, #0]
 800be24:	2001      	movs	r0, #1
 800be26:	e7e7      	b.n	800bdf8 <_raise_r+0x12>
 800be28:	2400      	movs	r4, #0
 800be2a:	4628      	mov	r0, r5
 800be2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be30:	4798      	blx	r3
 800be32:	2000      	movs	r0, #0
 800be34:	e7e0      	b.n	800bdf8 <_raise_r+0x12>
	...

0800be38 <raise>:
 800be38:	4b02      	ldr	r3, [pc, #8]	; (800be44 <raise+0xc>)
 800be3a:	4601      	mov	r1, r0
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	f7ff bfd2 	b.w	800bde6 <_raise_r>
 800be42:	bf00      	nop
 800be44:	20000444 	.word	0x20000444

0800be48 <_kill_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	2300      	movs	r3, #0
 800be4c:	4d06      	ldr	r5, [pc, #24]	; (800be68 <_kill_r+0x20>)
 800be4e:	4604      	mov	r4, r0
 800be50:	4608      	mov	r0, r1
 800be52:	4611      	mov	r1, r2
 800be54:	602b      	str	r3, [r5, #0]
 800be56:	f7f5 f8fe 	bl	8001056 <_kill>
 800be5a:	1c43      	adds	r3, r0, #1
 800be5c:	d102      	bne.n	800be64 <_kill_r+0x1c>
 800be5e:	682b      	ldr	r3, [r5, #0]
 800be60:	b103      	cbz	r3, 800be64 <_kill_r+0x1c>
 800be62:	6023      	str	r3, [r4, #0]
 800be64:	bd38      	pop	{r3, r4, r5, pc}
 800be66:	bf00      	nop
 800be68:	200023e0 	.word	0x200023e0

0800be6c <_getpid_r>:
 800be6c:	f7f5 b8ec 	b.w	8001048 <_getpid>

0800be70 <__sread>:
 800be70:	b510      	push	{r4, lr}
 800be72:	460c      	mov	r4, r1
 800be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be78:	f000 f89c 	bl	800bfb4 <_read_r>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	bfab      	itete	ge
 800be80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be82:	89a3      	ldrhlt	r3, [r4, #12]
 800be84:	181b      	addge	r3, r3, r0
 800be86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be8a:	bfac      	ite	ge
 800be8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be8e:	81a3      	strhlt	r3, [r4, #12]
 800be90:	bd10      	pop	{r4, pc}

0800be92 <__swrite>:
 800be92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be96:	461f      	mov	r7, r3
 800be98:	898b      	ldrh	r3, [r1, #12]
 800be9a:	4605      	mov	r5, r0
 800be9c:	05db      	lsls	r3, r3, #23
 800be9e:	460c      	mov	r4, r1
 800bea0:	4616      	mov	r6, r2
 800bea2:	d505      	bpl.n	800beb0 <__swrite+0x1e>
 800bea4:	2302      	movs	r3, #2
 800bea6:	2200      	movs	r2, #0
 800bea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beac:	f000 f868 	bl	800bf80 <_lseek_r>
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	4632      	mov	r2, r6
 800beb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beb8:	81a3      	strh	r3, [r4, #12]
 800beba:	4628      	mov	r0, r5
 800bebc:	463b      	mov	r3, r7
 800bebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bec6:	f000 b817 	b.w	800bef8 <_write_r>

0800beca <__sseek>:
 800beca:	b510      	push	{r4, lr}
 800becc:	460c      	mov	r4, r1
 800bece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed2:	f000 f855 	bl	800bf80 <_lseek_r>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	bf15      	itete	ne
 800bedc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bee6:	81a3      	strheq	r3, [r4, #12]
 800bee8:	bf18      	it	ne
 800beea:	81a3      	strhne	r3, [r4, #12]
 800beec:	bd10      	pop	{r4, pc}

0800beee <__sclose>:
 800beee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef2:	f000 b813 	b.w	800bf1c <_close_r>
	...

0800bef8 <_write_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4604      	mov	r4, r0
 800befc:	4608      	mov	r0, r1
 800befe:	4611      	mov	r1, r2
 800bf00:	2200      	movs	r2, #0
 800bf02:	4d05      	ldr	r5, [pc, #20]	; (800bf18 <_write_r+0x20>)
 800bf04:	602a      	str	r2, [r5, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	f7f5 f8dc 	bl	80010c4 <_write>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_write_r+0x1e>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_write_r+0x1e>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	200023e0 	.word	0x200023e0

0800bf1c <_close_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4d05      	ldr	r5, [pc, #20]	; (800bf38 <_close_r+0x1c>)
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	f7f5 f8e8 	bl	80010fc <_close>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_close_r+0x1a>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_close_r+0x1a>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	200023e0 	.word	0x200023e0

0800bf3c <_fstat_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4d06      	ldr	r5, [pc, #24]	; (800bf5c <_fstat_r+0x20>)
 800bf42:	4604      	mov	r4, r0
 800bf44:	4608      	mov	r0, r1
 800bf46:	4611      	mov	r1, r2
 800bf48:	602b      	str	r3, [r5, #0]
 800bf4a:	f7f5 f8e2 	bl	8001112 <_fstat>
 800bf4e:	1c43      	adds	r3, r0, #1
 800bf50:	d102      	bne.n	800bf58 <_fstat_r+0x1c>
 800bf52:	682b      	ldr	r3, [r5, #0]
 800bf54:	b103      	cbz	r3, 800bf58 <_fstat_r+0x1c>
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	bd38      	pop	{r3, r4, r5, pc}
 800bf5a:	bf00      	nop
 800bf5c:	200023e0 	.word	0x200023e0

0800bf60 <_isatty_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	2300      	movs	r3, #0
 800bf64:	4d05      	ldr	r5, [pc, #20]	; (800bf7c <_isatty_r+0x1c>)
 800bf66:	4604      	mov	r4, r0
 800bf68:	4608      	mov	r0, r1
 800bf6a:	602b      	str	r3, [r5, #0]
 800bf6c:	f7f5 f8e0 	bl	8001130 <_isatty>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_isatty_r+0x1a>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_isatty_r+0x1a>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	200023e0 	.word	0x200023e0

0800bf80 <_lseek_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4604      	mov	r4, r0
 800bf84:	4608      	mov	r0, r1
 800bf86:	4611      	mov	r1, r2
 800bf88:	2200      	movs	r2, #0
 800bf8a:	4d05      	ldr	r5, [pc, #20]	; (800bfa0 <_lseek_r+0x20>)
 800bf8c:	602a      	str	r2, [r5, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7f5 f8d8 	bl	8001144 <_lseek>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_lseek_r+0x1e>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_lseek_r+0x1e>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	200023e0 	.word	0x200023e0

0800bfa4 <_malloc_usable_size_r>:
 800bfa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfa8:	1f18      	subs	r0, r3, #4
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bfbc      	itt	lt
 800bfae:	580b      	ldrlt	r3, [r1, r0]
 800bfb0:	18c0      	addlt	r0, r0, r3
 800bfb2:	4770      	bx	lr

0800bfb4 <_read_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	4611      	mov	r1, r2
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4d05      	ldr	r5, [pc, #20]	; (800bfd4 <_read_r+0x20>)
 800bfc0:	602a      	str	r2, [r5, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f7f5 f861 	bl	800108a <_read>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d102      	bne.n	800bfd2 <_read_r+0x1e>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	b103      	cbz	r3, 800bfd2 <_read_r+0x1e>
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	200023e0 	.word	0x200023e0

0800bfd8 <_init>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	bf00      	nop
 800bfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfde:	bc08      	pop	{r3}
 800bfe0:	469e      	mov	lr, r3
 800bfe2:	4770      	bx	lr

0800bfe4 <_fini>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	bf00      	nop
 800bfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfea:	bc08      	pop	{r3}
 800bfec:	469e      	mov	lr, r3
 800bfee:	4770      	bx	lr
