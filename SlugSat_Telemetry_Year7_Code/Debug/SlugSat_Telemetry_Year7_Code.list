
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd8  0800bdd8  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdd8  0800bdd8  0001bdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bde0  0800bde0  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde0  0800bde0  0001bde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800bde8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022e8  20000344  0800c12c  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000262c  0800c12c  0002262c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123c9  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c8  00000000  00000000  00032736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00035a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00036948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e18  00000000  00000000  00037738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013218  00000000  00000000  00051550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8c5  00000000  00000000  00064768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f202d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d4  00000000  00000000  000f2080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000344 	.word	0x20000344
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b5d8 	.word	0x0800b5d8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000348 	.word	0x20000348
 8000178:	0800b5d8 	.word	0x0800b5d8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	891b      	ldrh	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 f901 	bl	80016cc <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	75fb      	strb	r3, [r7, #23]

	//CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip

	uint8_t Address;
	uint8_t ConfigIndex = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	757b      	strb	r3, [r7, #21]
	// configure standard registers

	//uint8_t Register_Count = sizeof(Register_Setting);

	for (Address = 0x00; Address < 0x2F; Address++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	75bb      	strb	r3, [r7, #22]
 80004ea:	e02e      	b.n	800054a <CC1200_Configure+0x78>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004ec:	7d7b      	ldrb	r3, [r7, #21]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	7dba      	ldrb	r2, [r7, #22]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d122      	bne.n	8000542 <CC1200_Configure+0x70>
		{
			retval = CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 80004fc:	7d7b      	ldrb	r3, [r7, #21]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	4413      	add	r3, r2
 8000504:	785a      	ldrb	r2, [r3, #1]
 8000506:	7dbb      	ldrb	r3, [r7, #22]
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f85c 	bl	80005c8 <CC1200_Write_Single_Register>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Register(SPI_Info, Address);
 8000514:	7dbb      	ldrb	r3, [r7, #22]
 8000516:	4619      	mov	r1, r3
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f000 f891 	bl	8000640 <CC1200_Read_Single_Register>
 800051e:	4603      	mov	r3, r0
 8000520:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Register_Setting[ConfigIndex].Value)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7d7b      	ldrb	r3, [r7, #21]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	429a      	cmp	r2, r3
 8000534:	d001      	beq.n	800053a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	3301      	adds	r3, #1
 800053e:	757b      	strb	r3, [r7, #21]
 8000540:	e000      	b.n	8000544 <CC1200_Configure+0x72>
		}
		else
		{
			continue;
 8000542:	bf00      	nop
	for (Address = 0x00; Address < 0x2F; Address++)
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	3301      	adds	r3, #1
 8000548:	75bb      	strb	r3, [r7, #22]
 800054a:	7dbb      	ldrb	r3, [r7, #22]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d9cd      	bls.n	80004ec <CC1200_Configure+0x1a>
		}
	}

	ConfigIndex = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000554:	2300      	movs	r3, #0
 8000556:	75bb      	strb	r3, [r7, #22]
 8000558:	e02e      	b.n	80005b8 <CC1200_Configure+0xe6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 800055a:	7d7b      	ldrb	r3, [r7, #21]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	7dba      	ldrb	r2, [r7, #22]
 8000566:	429a      	cmp	r2, r3
 8000568:	d122      	bne.n	80005b0 <CC1200_Configure+0xde>
		{
			retval = CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 800056a:	7d7b      	ldrb	r3, [r7, #21]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	785a      	ldrb	r2, [r3, #1]
 8000574:	7dbb      	ldrb	r3, [r7, #22]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 f8a1 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 8000582:	7dbb      	ldrb	r3, [r7, #22]
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f000 f8ec 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800058c:	4603      	mov	r3, r0
 800058e:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Extended_Register_Setting[ConfigIndex].Value)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7d7b      	ldrb	r3, [r7, #21]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	440b      	add	r3, r1
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <CC1200_Configure+0xd6>
			{
				retval = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	3301      	adds	r3, #1
 80005ac:	757b      	strb	r3, [r7, #21]
 80005ae:	e000      	b.n	80005b2 <CC1200_Configure+0xe0>
		}
		else
		{
			continue;
 80005b0:	bf00      	nop
	for (Address = 0x00; Address <= 0xDA; Address++)
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	3301      	adds	r3, #1
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2bda      	cmp	r3, #218	; 0xda
 80005bc:	d9cd      	bls.n	800055a <CC1200_Configure+0x88>
		}
	}

	return(retval);
 80005be:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2b2e      	cmp	r3, #46	; 0x2e
 80005dc:	d829      	bhi.n	8000632 <CC1200_Write_Single_Register+0x6a>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6858      	ldr	r0, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	891b      	ldrh	r3, [r3, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 f86d 	bl	80016cc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68d8      	ldr	r0, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f107 010e 	add.w	r1, r7, #14
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f003 fb3d 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68d8      	ldr	r0, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	1cb9      	adds	r1, r7, #2
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	f003 fb33 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6858      	ldr	r0, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f001 f850 	bl	80016cc <HAL_GPIO_WritePin>

		retval = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e001      	b.n	8000636 <CC1200_Write_Single_Register+0x6e>
	}
	else
	{
		retval = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b2e      	cmp	r3, #46	; 0x2e
 8000650:	d82f      	bhi.n	80006b2 <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f001 f82e 	bl	80016cc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68d8      	ldr	r0, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f107 010e 	add.w	r1, r7, #14
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f003 fafe 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68d8      	ldr	r0, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f107 010d 	add.w	r1, r7, #13
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	f003 faf3 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	891b      	ldrh	r3, [r3, #8]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 f810 	bl	80016cc <HAL_GPIO_WritePin>

		retval = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e001      	b.n	80006b6 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b39      	cmp	r3, #57	; 0x39
 80006d4:	d902      	bls.n	80006dc <CC1200_Write_Single_Extended_Register+0x1c>
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d908      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2ba2      	cmp	r3, #162	; 0xa2
 80006e0:	d902      	bls.n	80006e8 <CC1200_Write_Single_Extended_Register+0x28>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2bd1      	cmp	r3, #209	; 0xd1
 80006e6:	d902      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006e8:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006ea:	2bda      	cmp	r3, #218	; 0xda
 80006ec:	d902      	bls.n	80006f4 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e032      	b.n	800075a <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006f4:	232f      	movs	r3, #47	; 0x2f
 80006f6:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f000 ffe2 	bl	80016cc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68d8      	ldr	r0, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f107 010e 	add.w	r1, r7, #14
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	f003 fab2 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68d8      	ldr	r0, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	1cf9      	adds	r1, r7, #3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	f003 faa8 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68d8      	ldr	r0, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	1cb9      	adds	r1, r7, #2
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f003 fa9e 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	891b      	ldrh	r3, [r3, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	f000 ffbb 	bl	80016cc <HAL_GPIO_WritePin>

		retval = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b39      	cmp	r3, #57	; 0x39
 8000774:	d902      	bls.n	800077c <CC1200_Read_Single_Extended_Register+0x18>
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b63      	cmp	r3, #99	; 0x63
 800077a:	d908      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2ba2      	cmp	r3, #162	; 0xa2
 8000780:	d902      	bls.n	8000788 <CC1200_Read_Single_Extended_Register+0x24>
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2bd1      	cmp	r3, #209	; 0xd1
 8000786:	d902      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000788:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800078a:	2bda      	cmp	r3, #218	; 0xda
 800078c:	d902      	bls.n	8000794 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e035      	b.n	8000800 <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};
		//(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
		//(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
		//(SPI_Info -> MOSI_Data)[2] = MOSI_Data[2];

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6858      	ldr	r0, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891b      	ldrh	r3, [r3, #8]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f000 ff90 	bl	80016cc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68d8      	ldr	r0, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f107 010e 	add.w	r1, r7, #14
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f003 fa60 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	1cf9      	adds	r1, r7, #3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	f003 fa56 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68d8      	ldr	r0, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	f107 010d 	add.w	r1, r7, #13
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	f003 fa4b 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f000 ff68 	bl	80016cc <HAL_GPIO_WritePin>

		retval = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
	//char Message[100];
	//uint16_t Message_Length;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b2f      	cmp	r3, #47	; 0x2f
 800081a:	d922      	bls.n	8000862 <CC1200_Command_Strobe+0x58>
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b3d      	cmp	r3, #61	; 0x3d
 8000820:	d81f      	bhi.n	8000862 <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	73bb      	strb	r3, [r7, #14]
		//SPI_Info -> MOSI_Data = &Header_Byte;

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6858      	ldr	r0, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f000 ff4b 	bl	80016cc <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f107 010e 	add.w	r1, r7, #14
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	f003 fa1b 	bl	8003c82 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f000 ff38 	bl	80016cc <HAL_GPIO_WritePin>

		retval = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
	{
 8000860:	e001      	b.n	8000866 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1200_Transmit>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Transmit(CC1200_t* SPI_Info, uint8_t* TX_Packet, uint8_t TX_Packet_Length)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t Header_Byte = 0x40 | 0x3F; // 0100 0000 | 0011 1111
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	75bb      	strb	r3, [r7, #22]
	uint8_t i; // counter
	//uint8_t Status; // status byte

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFTX); // flush TX FIFO (before loading data)
 8000882:	213b      	movs	r1, #59	; 0x3b
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffc0 	bl	800080a <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6858      	ldr	r0, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f000 ff19 	bl	80016cc <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68d8      	ldr	r0, [r3, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f107 0116 	add.w	r1, r7, #22
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	f003 f9e9 	bl	8003c82 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &TX_Packet_Length, SPI_Info -> MISO_Data, 1, 100);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68d8      	ldr	r0, [r3, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	f003 f9df 	bl	8003c82 <HAL_SPI_TransmitReceive>

	for(i = 0; i < TX_Packet_Length; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00e      	b.n	80008e8 <CC1200_Transmit+0x78>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &(TX_Packet[i]), SPI_Info -> MISO_Data, 1, 100);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	18d1      	adds	r1, r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	f003 f9d0 	bl	8003c82 <HAL_SPI_TransmitReceive>
	for(i = 0; i < TX_Packet_Length; i++)
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3301      	adds	r3, #1
 80008e6:	75fb      	strb	r3, [r7, #23]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7dfa      	ldrb	r2, [r7, #23]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3ec      	bcc.n	80008ca <CC1200_Transmit+0x5a>
	}

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6858      	ldr	r0, [r3, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f000 fee6 	bl	80016cc <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_STX); // enable TX
 8000900:	2135      	movs	r1, #53	; 0x35
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff81 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <CC1200_Receive>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Receive(CC1200_t* SPI_Info, uint8_t* RX_Packet)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af02      	add	r7, sp, #8
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
	uint8_t Header_Byte = 0xC0 | 0x3F; // 1100 0000 | 0011 1111
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	737b      	strb	r3, [r7, #13]
	uint8_t Placeholder = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	733b      	strb	r3, [r7, #12]
	uint8_t Packet_Length;
	uint8_t i; // counter

	//memset(RX_Packet, 0, sizeof(RX_Packet)); // clear contents of RX Packet

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6858      	ldr	r0, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	891b      	ldrh	r3, [r3, #8]
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f000 fecc 	bl	80016cc <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68d8      	ldr	r0, [r3, #12]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f107 010d 	add.w	r1, r7, #13
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	f003 f99c 	bl	8003c82 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68d8      	ldr	r0, [r3, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	f107 010c 	add.w	r1, r7, #12
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	f003 f991 	bl	8003c82 <HAL_SPI_TransmitReceive>
	Packet_Length = (SPI_Info -> MISO_Data) [0];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < Packet_Length; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e014      	b.n	8000998 <CC1200_Receive+0x86>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68d8      	ldr	r0, [r3, #12]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f107 010c 	add.w	r1, r7, #12
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	f003 f97f 	bl	8003c82 <HAL_SPI_TransmitReceive>
		RX_Packet[i] = (SPI_Info -> MISO_Data) [0];
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	440b      	add	r3, r1
 800098e:	7812      	ldrb	r2, [r2, #0]
 8000990:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Packet_Length; i++)
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3301      	adds	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	7bfa      	ldrb	r2, [r7, #15]
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	429a      	cmp	r2, r3
 800099e:	d3e6      	bcc.n	800096e <CC1200_Receive+0x5c>
	}

	RX_Packet[Packet_Length] = '\0'; // null termination
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6858      	ldr	r0, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	891b      	ldrh	r3, [r3, #8]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	f000 fe89 	bl	80016cc <HAL_GPIO_WritePin>

	return 0;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	f5ad 5d1e 	sub.w	sp, sp, #10112	; 0x2780
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4602      	mov	r2, r0
 80009d0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80009d4:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 80009d8:	801a      	strh	r2, [r3, #0]

	char Message[10000];
	uint16_t Message_Length;
	char str1[150];

	CC1200_Receive(&SPI_Info, RX_Packet);
 80009da:	491d      	ldr	r1, [pc, #116]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x8c>)
 80009dc:	481d      	ldr	r0, [pc, #116]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x90>)
 80009de:	f7ff ff98 	bl	8000912 <CC1200_Receive>

	sprintf(Message, "Received the Following Message: ");
 80009e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80009e6:	3b14      	subs	r3, #20
 80009e8:	491b      	ldr	r1, [pc, #108]	; (8000a58 <HAL_GPIO_EXTI_Callback+0x94>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f009 fb20 	bl	800a030 <siprintf>
	sprintf(str1, "%s\r\n", (char*) RX_Packet);
 80009f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009f4:	3b2c      	subs	r3, #44	; 0x2c
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x8c>)
 80009f8:	4918      	ldr	r1, [pc, #96]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x98>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f009 fb18 	bl	800a030 <siprintf>
	strcat(Message, str1);
 8000a00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a04:	3a2c      	subs	r2, #44	; 0x2c
 8000a06:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a0a:	3b14      	subs	r3, #20
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f009 fb2e 	bl	800a070 <strcat>
	Message_Length = strlen(Message);
 8000a14:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a18:	3b14      	subs	r3, #20
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fbae 	bl	800017c <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f507 521e 	add.w	r2, r7, #10112	; 0x2780
 8000a26:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8000a2a:	8013      	strh	r3, [r2, #0]

	CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8000a2c:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8000a30:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a3a:	3b14      	subs	r3, #20
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 fe56 	bl	80086f0 <CDC_Transmit_FS>
}
 8000a44:	bf00      	nop
 8000a46:	f507 571e 	add.w	r7, r7, #10112	; 0x2780
 8000a4a:	3738      	adds	r7, #56	; 0x38
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000410 	.word	0x20000410
 8000a54:	200003fc 	.word	0x200003fc
 8000a58:	0800b5f0 	.word	0x0800b5f0
 8000a5c:	0800b614 	.word	0x0800b614

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fb25 	bl	80010b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f80a 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 f8b4 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a70:	f000 f888 	bl	8000b84 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a74:	f000 f850 	bl	8000b18 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000a78:	f007 fd38 	bl	80084ec <MX_USB_DEVICE_Init>
	//uint8_t flag = 1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a7c:	e7fe      	b.n	8000a7c <main+0x1c>
	...

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b092      	sub	sp, #72	; 0x48
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2234      	movs	r2, #52	; 0x34
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f009 fac6 	bl	800a020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <SystemClock_Config+0x94>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <SystemClock_Config+0x94>)
 8000aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000ac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000aca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fa55 	bl	8002f84 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000ae0:	f000 f900 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fd71 	bl	80035e4 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b08:	f000 f8ec 	bl	8000ce4 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3748      	adds	r7, #72	; 0x48
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <MX_SPI1_Init+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b64:	220a      	movs	r2, #10
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b6a:	f003 f801 	bl	8003b70 <HAL_SPI_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b74:	f000 f8b6 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000360 	.word	0x20000360
 8000b80:	40013000 	.word	0x40013000

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f003 face 	bl	800415c <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f88d 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200003b8 	.word	0x200003b8
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b39      	ldr	r3, [pc, #228]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <MX_GPIO_Init+0x100>)
 8000c56:	f000 fd39 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2140      	movs	r1, #64	; 0x40
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000c60:	f000 fd34 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 8000c64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4819      	ldr	r0, [pc, #100]	; (8000ce0 <MX_GPIO_Init+0x108>)
 8000c7c:	f000 fb96 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <MX_GPIO_Init+0x100>)
 8000c9a:	f000 fb87 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c9e:	2340      	movs	r3, #64	; 0x40
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <MX_GPIO_Init+0x104>)
 8000cb6:	f000 fb79 	bl	80013ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2028      	movs	r0, #40	; 0x28
 8000cc0:	f000 fb3d 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f000 fb56 	bl	8001376 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40020800 	.word	0x40020800

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_MspInit+0x5c>)
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_MspInit+0x5c>)
 8000cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d00:	6253      	str	r3, [r2, #36]	; 0x24
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6213      	str	r3, [r2, #32]
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6253      	str	r3, [r2, #36]	; 0x24
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f000 faf2 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_SPI_MspInit+0x7c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d127      	bne.n	8000dc2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7c:	6213      	str	r3, [r2, #32]
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000da2:	23e0      	movs	r3, #224	; 0xe0
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db2:	2305      	movs	r3, #5
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_SPI_MspInit+0x84>)
 8000dbe:	f000 faf5 	bl	80013ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40013000 	.word	0x40013000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_UART_MspInit+0x7c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d127      	bne.n	8000e4a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0x80>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <HAL_UART_MspInit+0x80>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	6253      	str	r3, [r2, #36]	; 0x24
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x80>)
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0x80>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <HAL_UART_MspInit+0x80>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_UART_MspInit+0x80>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_UART_MspInit+0x84>)
 8000e46:	f000 fab1 	bl	80013ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f957 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <USB_LP_IRQHandler+0x10>)
 8000eb6:	f000 fd3d 	bl	8001934 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20002110 	.word	0x20002110

08000ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ec8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ecc:	f000 fc16 	bl	80016fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ed0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed4:	f000 fc12 	bl	80016fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <_kill>:

int _kill(int pid, int sig)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ef4:	f009 f85c 	bl	8009fb0 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2216      	movs	r2, #22
 8000efc:	601a      	str	r2, [r3, #0]
  return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_exit>:

void _exit (int status)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffe7 	bl	8000eea <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f1c:	e7fe      	b.n	8000f1c <_exit+0x12>

08000f1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e00a      	b.n	8000f46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f30:	f3af 8000 	nop.w
 8000f34:	4601      	mov	r1, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	60ba      	str	r2, [r7, #8]
 8000f3c:	b2ca      	uxtb	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dbf0      	blt.n	8000f30 <_read+0x12>
  }

  return len;
 8000f4e:	687b      	ldr	r3, [r7, #4]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e009      	b.n	8000f7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	60ba      	str	r2, [r7, #8]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	dbf1      	blt.n	8000f6a <_write+0x12>
  }
  return len;
 8000f86:	687b      	ldr	r3, [r7, #4]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_close>:

int _close(int file)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <_isatty>:

int _isatty(int file)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f008 ffc6 	bl	8009fb0 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20014000 	.word	0x20014000
 8001050:	00000400 	.word	0x00000400
 8001054:	20000490 	.word	0x20000490
 8001058:	20002630 	.word	0x20002630

0800105c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800108e:	f7ff ffe5 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f008 ff93 	bl	8009fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff fce3 	bl	8000a60 <main>
  bx lr
 800109a:	4770      	bx	lr
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80010a4:	0800bde8 	.word	0x0800bde8
  ldr r2, =_sbss
 80010a8:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 80010ac:	2000262c 	.word	0x2000262c

080010b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_IRQHandler>

080010b2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f933 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f80e 	bl	80010e4 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	e001      	b.n	80010d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d4:	f7ff fe0c 	bl	8000cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_InitTick+0x68>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d022      	beq.n	800113e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_InitTick+0x6c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_InitTick+0x68>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001104:	fbb1 f3f3 	udiv	r3, r1, r3
 8001108:	fbb2 f3f3 	udiv	r3, r2, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f940 	bl	8001392 <HAL_SYSTICK_Config>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10f      	bne.n	8001138 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	d809      	bhi.n	8001132 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111e:	2200      	movs	r2, #0
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	f04f 30ff 	mov.w	r0, #4294967295
 8001126:	f000 f90a 	bl	800133e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_InitTick+0x70>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e007      	b.n	8001142 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e004      	b.n	8001142 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e001      	b.n	8001142 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000016c 	.word	0x2000016c
 8001150:	20000164 	.word	0x20000164
 8001154:	20000168 	.word	0x20000168

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_IncTick+0x1c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_IncTick+0x20>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_IncTick+0x1c>)
 8001168:	6013      	str	r3, [r2, #0]
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000494 	.word	0x20000494
 8001178:	2000016c 	.word	0x2000016c

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <HAL_GetTick+0x10>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	20000494 	.word	0x20000494

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4906      	ldr	r1, [pc, #24]	; (8001228 <__NVIC_EnableIRQ+0x34>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff90 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff2d 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff42 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff35 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa2 	bl	80012e4 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013c2:	e160      	b.n	8001686 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8152 	beq.w	8001680 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80ac 	beq.w	8001680 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_GPIO_Init+0x2f8>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a5d      	ldr	r2, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x2f8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_GPIO_Init+0x2f8>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001540:	4a59      	ldr	r2, [pc, #356]	; (80016a8 <HAL_GPIO_Init+0x2fc>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_GPIO_Init+0x300>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d025      	beq.n	80015b8 <HAL_GPIO_Init+0x20c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a50      	ldr	r2, [pc, #320]	; (80016b0 <HAL_GPIO_Init+0x304>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d01f      	beq.n	80015b4 <HAL_GPIO_Init+0x208>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_GPIO_Init+0x308>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d019      	beq.n	80015b0 <HAL_GPIO_Init+0x204>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4e      	ldr	r2, [pc, #312]	; (80016b8 <HAL_GPIO_Init+0x30c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x200>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <HAL_GPIO_Init+0x310>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1fc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a4c      	ldr	r2, [pc, #304]	; (80016c0 <HAL_GPIO_Init+0x314>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1f8>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_GPIO_Init+0x318>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1f4>
 800159c:	2306      	movs	r3, #6
 800159e:	e00c      	b.n	80015ba <HAL_GPIO_Init+0x20e>
 80015a0:	2307      	movs	r3, #7
 80015a2:	e00a      	b.n	80015ba <HAL_GPIO_Init+0x20e>
 80015a4:	2305      	movs	r3, #5
 80015a6:	e008      	b.n	80015ba <HAL_GPIO_Init+0x20e>
 80015a8:	2304      	movs	r3, #4
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x20e>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e004      	b.n	80015ba <HAL_GPIO_Init+0x20e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x20e>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_GPIO_Init+0x20e>
 80015b8:	2300      	movs	r3, #0
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	4093      	lsls	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015ca:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_GPIO_Init+0x2fc>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d8:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015fc:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001626:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800167a:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f ae97 	bne.w	80013c4 <HAL_GPIO_Init+0x18>
  }
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40010000 	.word	0x40010000
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f952 	bl	80009c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010400 	.word	0x40010400

0800172c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af06      	add	r7, sp, #24
 8001732:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0d0      	b.n	80018e0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f008 f98c 	bl	8009a70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2203      	movs	r2, #3
 800175c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fe41 	bl	80043ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e04c      	b.n	800180a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	3301      	adds	r3, #1
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	b298      	uxth	r0, r3
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3336      	adds	r3, #54	; 0x36
 80017ae:	4602      	mov	r2, r0
 80017b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3303      	adds	r3, #3
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3338      	adds	r3, #56	; 0x38
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	333c      	adds	r3, #60	; 0x3c
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3340      	adds	r3, #64	; 0x40
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	3301      	adds	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	d3ad      	bcc.n	8001770 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e044      	b.n	80018a4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	f203 1369 	addw	r3, r3, #361	; 0x169
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	3301      	adds	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3b5      	bcc.n	800181a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	687e      	ldr	r6, [r7, #4]
 80018b6:	466d      	mov	r5, sp
 80018b8:	f106 0410 	add.w	r4, r6, #16
 80018bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	602b      	str	r3, [r5, #0]
 80018c4:	1d33      	adds	r3, r6, #4
 80018c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c8:	6838      	ldr	r0, [r7, #0]
 80018ca:	f002 fda9 	bl	8004420 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_PCD_Start+0x16>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e016      	b.n	800192c <HAL_PCD_Start+0x44>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 fd58 	bl	80043c0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001910:	2101      	movs	r1, #1
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f008 f88e 	bl	8009a34 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f005 fa3d 	bl	8006d9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f005 fa35 	bl	8006db0 <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800194c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001950:	d102      	bne.n	8001958 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 faf5 	bl	8001f42 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f005 fa27 	bl	8006db0 <USB_ReadInterrupts>
 8001962:	4603      	mov	r3, r0
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d112      	bne.n	8001994 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001980:	b292      	uxth	r2, r2
 8001982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f008 f8ed 	bl	8009b66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8c7 	bl	8001b22 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f005 fa09 	bl	8006db0 <USB_ReadInterrupts>
 800199e:	4603      	mov	r3, r0
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019a8:	d10b      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019bc:	b292      	uxth	r2, r2
 80019be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f005 f9f2 	bl	8006db0 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d6:	d10b      	bne.n	80019f0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f005 f9db 	bl	8006db0 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a04:	d126      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0204 	bic.w	r2, r2, #4
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0208 	bic.w	r2, r2, #8
 8001a30:	b292      	uxth	r2, r2
 8001a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f008 f8ce 	bl	8009bd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a4e:	b292      	uxth	r2, r2
 8001a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f005 f9a9 	bl	8006db0 <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a68:	d126      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0208 	orr.w	r2, r2, #8
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0204 	orr.w	r2, r2, #4
 8001aac:	b292      	uxth	r2, r2
 8001aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f008 f876 	bl	8009ba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f005 f977 	bl	8006db0 <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001acc:	d10e      	bne.n	8001aec <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ae0:	b292      	uxth	r2, r2
 8001ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f008 f82f 	bl	8009b4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 f95d 	bl	8006db0 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b00:	d10b      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_SetAddress+0x1a>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e013      	b.n	8001b64 <HAL_PCD_SetAddress+0x42>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f005 f90e 	bl	8006d76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	70fb      	strb	r3, [r7, #3]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	803b      	strh	r3, [r7, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da0e      	bge.n	8001bb0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
 8001bae:	e00e      	b.n	8001bce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bda:	883a      	ldrh	r2, [r7, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	78ba      	ldrb	r2, [r7, #2]
 8001be4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	785b      	ldrb	r3, [r3, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bf8:	78bb      	ldrb	r3, [r7, #2]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d102      	bne.n	8001c04 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_PCD_EP_Open+0xa6>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e00e      	b.n	8001c30 <HAL_PCD_EP_Open+0xc4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fc1d 	bl	8004460 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da0e      	bge.n	8001c6a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	705a      	strb	r2, [r3, #1]
 8001c68:	e00e      	b.n	8001c88 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 0207 	and.w	r2, r3, #7
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_PCD_EP_Close+0x6a>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e00e      	b.n	8001cc0 <HAL_PCD_EP_Close+0x88>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 ff3f 	bl	8004b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	f003 0207 	and.w	r2, r3, #7
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f8f1 	bl	8004f0c <USB_EPStartXfer>
 8001d2a:	e005      	b.n	8001d38 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 f8ea 	bl	8004f0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 0207 	and.w	r2, r3, #7
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d64:	681b      	ldr	r3, [r3, #0]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d80:	7afb      	ldrb	r3, [r7, #11]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2201      	movs	r2, #1
 8001dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6979      	ldr	r1, [r7, #20]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 f897 	bl	8004f0c <USB_EPStartXfer>
 8001dde:	e005      	b.n	8001dec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6979      	ldr	r1, [r7, #20]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 f890 	bl	8004f0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0207 	and.w	r2, r3, #7
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d901      	bls.n	8001e14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e03e      	b.n	8001e92 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da0e      	bge.n	8001e3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	705a      	strb	r2, [r3, #1]
 8001e38:	e00c      	b.n	8001e54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_PCD_EP_SetStall+0x7e>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e00e      	b.n	8001e92 <HAL_PCD_EP_SetStall+0x9c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 fe7a 	bl	8006b7c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 020f 	and.w	r2, r3, #15
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d901      	bls.n	8001eb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e040      	b.n	8001f3a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da0e      	bge.n	8001ede <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	705a      	strb	r2, [r3, #1]
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 0207 	and.w	r2, r3, #7
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_PCD_EP_ClrStall+0x82>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e00e      	b.n	8001f3a <HAL_PCD_EP_ClrStall+0xa0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fe76 	bl	8006c1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b08e      	sub	sp, #56	; 0x38
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f4a:	e2ec      	b.n	8002526 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f54:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 8161 	bne.w	800222e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d152      	bne.n	800201c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	81fb      	strh	r3, [r7, #14]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3328      	adds	r3, #40	; 0x28
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f007 fd9a 	bl	8009b16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 829b 	beq.w	8002526 <PCD_EP_ISR_Handler+0x5e4>
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 8296 	bne.w	8002526 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002006:	b2da      	uxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800201a:	e284      	b.n	8002526 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800202c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800202e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002032:	2b00      	cmp	r3, #0
 8002034:	d034      	beq.n	80020a0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	3306      	adds	r3, #6
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002074:	b29b      	uxth	r3, r3
 8002076:	f004 feef 	bl	8006e58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29a      	uxth	r2, r3
 8002082:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002086:	4013      	ands	r3, r2
 8002088:	823b      	strh	r3, [r7, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	8a3a      	ldrh	r2, [r7, #16]
 8002090:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002094:	b292      	uxth	r2, r2
 8002096:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f007 fd0f 	bl	8009abc <HAL_PCD_SetupStageCallback>
 800209e:	e242      	b.n	8002526 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f280 823e 	bge.w	8002526 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020b6:	4013      	ands	r3, r2
 80020b8:	83bb      	strh	r3, [r7, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	8bba      	ldrh	r2, [r7, #28]
 80020c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020c4:	b292      	uxth	r2, r2
 80020c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	3306      	adds	r3, #6
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d019      	beq.n	8002130 <PCD_EP_ISR_Handler+0x1ee>
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	6959      	ldr	r1, [r3, #20]
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002114:	b29b      	uxth	r3, r3
 8002116:	f004 fe9f 	bl	8006e58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	441a      	add	r2, r3
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002128:	2100      	movs	r1, #0
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f007 fcd8 	bl	8009ae0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213c:	2b00      	cmp	r3, #0
 800213e:	f040 81f2 	bne.w	8002526 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4413      	add	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d112      	bne.n	8002190 <PCD_EP_ISR_Handler+0x24e>
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002174:	b29a      	uxth	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002188:	b29a      	uxth	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	e02f      	b.n	80021f0 <PCD_EP_ISR_Handler+0x2ae>
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b3e      	cmp	r3, #62	; 0x3e
 8002196:	d813      	bhi.n	80021c0 <PCD_EP_ISR_Handler+0x27e>
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <PCD_EP_ISR_Handler+0x270>
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	3301      	adds	r3, #1
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	029b      	lsls	r3, r3, #10
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	801a      	strh	r2, [r3, #0]
 80021be:	e017      	b.n	80021f0 <PCD_EP_ISR_Handler+0x2ae>
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <PCD_EP_ISR_Handler+0x298>
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	3b01      	subs	r3, #1
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	b29b      	uxth	r3, r3
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	827b      	strh	r3, [r7, #18]
 8002202:	8a7b      	ldrh	r3, [r7, #18]
 8002204:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002208:	827b      	strh	r3, [r7, #18]
 800220a:	8a7b      	ldrh	r3, [r7, #18]
 800220c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002210:	827b      	strh	r3, [r7, #18]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	8a7b      	ldrh	r3, [r7, #18]
 8002218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	b29b      	uxth	r3, r3
 800222a:	8013      	strh	r3, [r2, #0]
 800222c:	e17b      	b.n	8002526 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002240:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002244:	2b00      	cmp	r3, #0
 8002246:	f280 80ea 	bge.w	800241e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002260:	4013      	ands	r3, r2
 8002262:	853b      	strh	r3, [r7, #40]	; 0x28
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002274:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002278:	b292      	uxth	r2, r2
 800227a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800227c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	7b1b      	ldrb	r3, [r3, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d122      	bne.n	80022e0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	3306      	adds	r3, #6
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80022c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8087 	beq.w	80023da <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	6959      	ldr	r1, [r3, #20]
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	88da      	ldrh	r2, [r3, #6]
 80022d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022da:	f004 fdbd 	bl	8006e58 <USB_ReadPMA>
 80022de:	e07c      	b.n	80023da <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	78db      	ldrb	r3, [r3, #3]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d108      	bne.n	80022fa <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ea:	461a      	mov	r2, r3
 80022ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f927 	bl	8002542 <HAL_PCD_EP_DB_Receive>
 80022f4:	4603      	mov	r3, r0
 80022f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022f8:	e06f      	b.n	80023da <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002314:	847b      	strh	r3, [r7, #34]	; 0x22
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	441a      	add	r2, r3
 8002324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800232a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002336:	b29b      	uxth	r3, r3
 8002338:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d021      	beq.n	8002398 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3302      	adds	r3, #2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800237e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002380:	2b00      	cmp	r3, #0
 8002382:	d02a      	beq.n	80023da <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	6959      	ldr	r1, [r3, #20]
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	891a      	ldrh	r2, [r3, #8]
 8002390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002392:	f004 fd61 	bl	8006e58 <USB_ReadPMA>
 8002396:	e020      	b.n	80023da <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	3306      	adds	r3, #6
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	6959      	ldr	r1, [r3, #20]
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	895a      	ldrh	r2, [r3, #10]
 80023d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d6:	f004 fd3f 	bl	8006e58 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023e0:	441a      	add	r2, r3
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ec:	441a      	add	r2, r3
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <PCD_EP_ISR_Handler+0x4c2>
 80023fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d206      	bcs.n	8002412 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f007 fb68 	bl	8009ae0 <HAL_PCD_DataOutStageCallback>
 8002410:	e005      	b.n	800241e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fd77 	bl	8004f0c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800241e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002424:	2b00      	cmp	r3, #0
 8002426:	d07e      	beq.n	8002526 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002428:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	843b      	strh	r3, [r7, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	8c3b      	ldrh	r3, [r7, #32]
 8002468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002470:	b29b      	uxth	r3, r3
 8002472:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	78db      	ldrb	r3, [r3, #3]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d00c      	beq.n	8002496 <PCD_EP_ISR_Handler+0x554>
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	78db      	ldrb	r3, [r3, #3]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002488:	2b02      	cmp	r3, #2
 800248a:	d146      	bne.n	800251a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800248c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d141      	bne.n	800251a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	3302      	adds	r3, #2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024be:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	8bfb      	ldrh	r3, [r7, #30]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d906      	bls.n	80024d8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	8bfb      	ldrh	r3, [r7, #30]
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	619a      	str	r2, [r3, #24]
 80024d6:	e002      	b.n	80024de <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4619      	mov	r1, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f007 fb12 	bl	8009b16 <HAL_PCD_DataInStageCallback>
 80024f2:	e018      	b.n	8002526 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	8bfb      	ldrh	r3, [r7, #30]
 80024fa:	441a      	add	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	8bfb      	ldrh	r3, [r7, #30]
 8002506:	441a      	add	r2, r3
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002512:	4618      	mov	r0, r3
 8002514:	f002 fcfa 	bl	8004f0c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002518:	e005      	b.n	8002526 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800251a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800251c:	461a      	mov	r2, r3
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f91b 	bl	800275c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800252e:	b29b      	uxth	r3, r3
 8002530:	b21b      	sxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f6ff ad0a 	blt.w	8001f4c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3738      	adds	r7, #56	; 0x38
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b088      	sub	sp, #32
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	4613      	mov	r3, r2
 800254e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07e      	beq.n	8002658 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	3302      	adds	r3, #2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002582:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	8b7b      	ldrh	r3, [r7, #26]
 800258a:	429a      	cmp	r2, r3
 800258c:	d306      	bcc.n	800259c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	8b7b      	ldrh	r3, [r7, #26]
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	619a      	str	r2, [r3, #24]
 800259a:	e002      	b.n	80025a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d123      	bne.n	80025f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	833b      	strh	r3, [r7, #24]
 80025c6:	8b3b      	ldrh	r3, [r7, #24]
 80025c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025cc:	833b      	strh	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	441a      	add	r2, r3
 80025dc:	8b3b      	ldrh	r3, [r7, #24]
 80025de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01f      	beq.n	800263c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	82fb      	strh	r3, [r7, #22]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	441a      	add	r2, r3
 8002626:	8afb      	ldrh	r3, [r7, #22]
 8002628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002638:	b29b      	uxth	r3, r3
 800263a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8087 	beq.w	8002752 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6959      	ldr	r1, [r3, #20]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	891a      	ldrh	r2, [r3, #8]
 8002650:	8b7b      	ldrh	r3, [r7, #26]
 8002652:	f004 fc01 	bl	8006e58 <USB_ReadPMA>
 8002656:	e07c      	b.n	8002752 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	3306      	adds	r3, #6
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002680:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	8b7b      	ldrh	r3, [r7, #26]
 8002688:	429a      	cmp	r2, r3
 800268a:	d306      	bcc.n	800269a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	8b7b      	ldrh	r3, [r7, #26]
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	619a      	str	r2, [r3, #24]
 8002698:	e002      	b.n	80026a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d123      	bne.n	80026f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	83fb      	strh	r3, [r7, #30]
 80026c4:	8bfb      	ldrh	r3, [r7, #30]
 80026c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ca:	83fb      	strh	r3, [r7, #30]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	8bfb      	ldrh	r3, [r7, #30]
 80026dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11f      	bne.n	800273a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002714:	83bb      	strh	r3, [r7, #28]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	441a      	add	r2, r3
 8002724:	8bbb      	ldrh	r3, [r7, #28]
 8002726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6959      	ldr	r1, [r3, #20]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	895a      	ldrh	r2, [r3, #10]
 800274c:	8b7b      	ldrh	r3, [r7, #26]
 800274e:	f004 fb83 	bl	8006e58 <USB_ReadPMA>
    }
  }

  return count;
 8002752:	8b7b      	ldrh	r3, [r7, #26]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0a2      	sub	sp, #136	; 0x88
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 81c7 	beq.w	8002b04 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	3302      	adds	r3, #2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d907      	bls.n	80027be <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027b6:	1ad2      	subs	r2, r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	619a      	str	r2, [r3, #24]
 80027bc:	e002      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 80b9 	bne.w	8002940 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d126      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0xc8>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	4413      	add	r3, r2
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	011a      	lsls	r2, r3, #4
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002808:	b29a      	uxth	r2, r3
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281c:	b29a      	uxth	r2, r3
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	e01a      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d116      	bne.n	800285a <HAL_PCD_EP_DB_Transmit+0xfe>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	4413      	add	r3, r2
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	011a      	lsls	r2, r3, #4
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	4413      	add	r3, r2
 800284e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	2200      	movs	r2, #0
 8002858:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d126      	bne.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	011a      	lsls	r2, r3, #4
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4413      	add	r3, r2
 800288a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800289a:	b29a      	uxth	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e017      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d113      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	4413      	add	r3, r2
 80028ce:	623b      	str	r3, [r7, #32]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	011a      	lsls	r2, r3, #4
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	4413      	add	r3, r2
 80028da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2200      	movs	r2, #0
 80028e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f007 f912 	bl	8009b16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 82d4 	beq.w	8002ea6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002918:	827b      	strh	r3, [r7, #18]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	441a      	add	r2, r3
 8002928:	8a7b      	ldrh	r3, [r7, #18]
 800292a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293a:	b29b      	uxth	r3, r3
 800293c:	8013      	strh	r3, [r2, #0]
 800293e:	e2b2      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d021      	beq.n	800298e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002964:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	441a      	add	r2, r3
 8002976:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800297a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298a:	b29b      	uxth	r3, r3
 800298c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002994:	2b01      	cmp	r3, #1
 8002996:	f040 8286 	bne.w	8002ea6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029a2:	441a      	add	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b0:	441a      	add	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d309      	bcc.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	621a      	str	r2, [r3, #32]
 80029d4:	e015      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80029de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029ec:	e009      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d155      	bne.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	4413      	add	r3, r2
 8002a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	011a      	lsls	r2, r3, #4
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
 8002a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d112      	bne.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x302>
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	801a      	strh	r2, [r3, #0]
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	e047      	b.n	8002aee <HAL_PCD_EP_DB_Transmit+0x392>
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	2b3e      	cmp	r3, #62	; 0x3e
 8002a62:	d811      	bhi.n	8002a88 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x31e>
 8002a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a76:	3301      	adds	r3, #1
 8002a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	e032      	b.n	8002aee <HAL_PCD_EP_DB_Transmit+0x392>
 8002a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x342>
 8002a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	801a      	strh	r2, [r3, #0]
 8002ab4:	e01b      	b.n	8002aee <HAL_PCD_EP_DB_Transmit+0x392>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d117      	bne.n	8002aee <HAL_PCD_EP_DB_Transmit+0x392>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	4413      	add	r3, r2
 8002ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	011a      	lsls	r2, r3, #4
 8002adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ade:	4413      	add	r3, r2
 8002ae0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6959      	ldr	r1, [r3, #20]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	891a      	ldrh	r2, [r3, #8]
 8002afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f004 f966 	bl	8006dce <USB_WritePMA>
 8002b02:	e1d0      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	3306      	adds	r3, #6
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d307      	bcc.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b44:	1ad2      	subs	r2, r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	619a      	str	r2, [r3, #24]
 8002b4a:	e002      	b.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80c4 	bne.w	8002ce4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d126      	bne.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x456>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b78:	4413      	add	r3, r2
 8002b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	011a      	lsls	r2, r3, #4
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	e01a      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d116      	bne.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	677b      	str	r3, [r7, #116]	; 0x74
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bce:	4413      	add	r3, r2
 8002bd0:	677b      	str	r3, [r7, #116]	; 0x74
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	011a      	lsls	r2, r3, #4
 8002bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bda:	4413      	add	r3, r2
 8002bdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002be0:	673b      	str	r3, [r7, #112]	; 0x70
 8002be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be4:	2200      	movs	r2, #0
 8002be6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	785b      	ldrb	r3, [r3, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d12f      	bne.n	8002c56 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c0e:	4413      	add	r3, r2
 8002c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	011a      	lsls	r2, r3, #4
 8002c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	e017      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d113      	bne.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c6c:	4413      	add	r3, r2
 8002c6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	011a      	lsls	r2, r3, #4
 8002c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c78:	4413      	add	r3, r2
 8002c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c82:	2200      	movs	r2, #0
 8002c84:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f006 ff42 	bl	8009b16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f040 8104 	bne.w	8002ea6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	8013      	strh	r3, [r2, #0]
 8002ce2:	e0e0      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d121      	bne.n	8002d32 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	f040 80b4 	bne.w	8002ea6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d46:	441a      	add	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d54:	441a      	add	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	6a1a      	ldr	r2, [r3, #32]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d309      	bcc.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d72:	1ad2      	subs	r2, r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	621a      	str	r2, [r3, #32]
 8002d78:	e015      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002d82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d90:	e009      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	667b      	str	r3, [r7, #100]	; 0x64
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d155      	bne.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x704>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc8:	4413      	add	r3, r2
 8002dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	011a      	lsls	r2, r3, #4
 8002dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dda:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d112      	bne.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df0:	801a      	strh	r2, [r3, #0]
 8002df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	e044      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8002e0c:	d811      	bhi.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	657b      	str	r3, [r7, #84]	; 0x54
 8002e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e20:	3301      	adds	r3, #1
 8002e22:	657b      	str	r3, [r7, #84]	; 0x54
 8002e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	e02f      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
 8002e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e44:	3b01      	subs	r3, #1
 8002e46:	657b      	str	r3, [r7, #84]	; 0x54
 8002e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	029b      	lsls	r3, r3, #10
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	e018      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	785b      	ldrb	r3, [r3, #1]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d114      	bne.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e76:	4413      	add	r3, r2
 8002e78:	667b      	str	r3, [r7, #100]	; 0x64
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	011a      	lsls	r2, r3, #4
 8002e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e82:	4413      	add	r3, r2
 8002e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e88:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e90:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6959      	ldr	r1, [r3, #20]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	895a      	ldrh	r2, [r3, #10]
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f003 ff94 	bl	8006dce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec0:	823b      	strh	r3, [r7, #16]
 8002ec2:	8a3b      	ldrh	r3, [r7, #16]
 8002ec4:	f083 0310 	eor.w	r3, r3, #16
 8002ec8:	823b      	strh	r3, [r7, #16]
 8002eca:	8a3b      	ldrh	r3, [r7, #16]
 8002ecc:	f083 0320 	eor.w	r3, r3, #32
 8002ed0:	823b      	strh	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	441a      	add	r2, r3
 8002ee0:	8a3b      	ldrh	r3, [r7, #16]
 8002ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3788      	adds	r7, #136	; 0x88
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f12:	897b      	ldrh	r3, [r7, #10]
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e009      	b.n	8002f4a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f36:	897a      	ldrh	r2, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f4a:	893b      	ldrh	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	80da      	strh	r2, [r3, #6]
 8002f5e:	e00b      	b.n	8002f78 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2201      	movs	r2, #1
 8002f64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e31d      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	4b94      	ldr	r3, [pc, #592]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa0:	4b91      	ldr	r3, [pc, #580]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d07b      	beq.n	80030ae <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d006      	beq.n	8002fca <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5e>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	4b87      	ldr	r3, [pc, #540]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d06a      	beq.n	80030ac <HAL_RCC_OscConfig+0x128>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d166      	bne.n	80030ac <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e2f7      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x74>
 8002fea:	4b7f      	ldr	r3, [pc, #508]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7e      	ldr	r2, [pc, #504]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e02d      	b.n	8003054 <HAL_RCC_OscConfig+0xd0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x96>
 8003000:	4b79      	ldr	r3, [pc, #484]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a78      	ldr	r2, [pc, #480]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a75      	ldr	r2, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0xd0>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0xb8>
 8003022:	4b71      	ldr	r3, [pc, #452]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a70      	ldr	r2, [pc, #448]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b6e      	ldr	r3, [pc, #440]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6d      	ldr	r2, [pc, #436]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0xd0>
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a69      	ldr	r2, [pc, #420]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a66      	ldr	r2, [pc, #408]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe f88e 	bl	800117c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe f88a 	bl	800117c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e2ad      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003076:	4b5c      	ldr	r3, [pc, #368]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xe0>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe f87a 	bl	800117c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe f876 	bl	800117c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e299      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800309e:	4b52      	ldr	r3, [pc, #328]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x108>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d05a      	beq.n	8003170 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d005      	beq.n	80030cc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	d119      	bne.n	80030fa <HAL_RCC_OscConfig+0x176>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030cc:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_OscConfig+0x160>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e276      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b40      	ldr	r3, [pc, #256]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	493d      	ldr	r1, [pc, #244]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f8:	e03a      	b.n	8003170 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_OscConfig+0x268>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe f838 	bl	800117c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe f834 	bl	800117c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e257      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	492a      	ldr	r1, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
 8003142:	e015      	b.n	8003170 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_OscConfig+0x268>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314a:	f7fe f817 	bl	800117c <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe f813 	bl	800117c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e236      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80b8 	beq.w	80032ee <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d170      	bne.n	8003266 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003184:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_OscConfig+0x218>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e21a      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d921      	bls.n	80031f0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fc7d 	bl	8003ab0 <RCC_SetFlashLatencyFromMSIRange>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e208      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4906      	ldr	r1, [pc, #24]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	061b      	lsls	r3, r3, #24
 80031e0:	4901      	ldr	r1, [pc, #4]	; (80031e8 <HAL_RCC_OscConfig+0x264>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
 80031e6:	e020      	b.n	800322a <HAL_RCC_OscConfig+0x2a6>
 80031e8:	40023800 	.word	0x40023800
 80031ec:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f0:	4b99      	ldr	r3, [pc, #612]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4996      	ldr	r1, [pc, #600]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003202:	4b95      	ldr	r3, [pc, #596]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	4991      	ldr	r1, [pc, #580]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fc48 	bl	8003ab0 <RCC_SetFlashLatencyFromMSIRange>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1d3      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	0b5b      	lsrs	r3, r3, #13
 8003230:	3301      	adds	r3, #1
 8003232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800323a:	4a87      	ldr	r2, [pc, #540]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	0912      	lsrs	r2, r2, #4
 8003240:	f002 020f 	and.w	r2, r2, #15
 8003244:	4985      	ldr	r1, [pc, #532]	; (800345c <HAL_RCC_OscConfig+0x4d8>)
 8003246:	5c8a      	ldrb	r2, [r1, r2]
 8003248:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800324a:	4a85      	ldr	r2, [pc, #532]	; (8003460 <HAL_RCC_OscConfig+0x4dc>)
 800324c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x4e0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd ff46 	bl	80010e4 <HAL_InitTick>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d045      	beq.n	80032ee <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	e1b5      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d029      	beq.n	80032c2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326e:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <HAL_RCC_OscConfig+0x4e4>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fd ff82 	bl	800117c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800327c:	f7fd ff7e 	bl	800117c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1a1      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329a:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	496c      	ldr	r1, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ac:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	4967      	ldr	r1, [pc, #412]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032c2:	4b69      	ldr	r3, [pc, #420]	; (8003468 <HAL_RCC_OscConfig+0x4e4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fd ff58 	bl	800117c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d0:	f7fd ff54 	bl	800117c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e177      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d030      	beq.n	800335c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b5a      	ldr	r3, [pc, #360]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7fd ff38 	bl	800117c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003310:	f7fd ff34 	bl	800117c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e157      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x38c>
 800332e:	e015      	b.n	800335c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003330:	4b4e      	ldr	r3, [pc, #312]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003336:	f7fd ff21 	bl	800117c <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333e:	f7fd ff1d 	bl	800117c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e140      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80b5 	beq.w	80034d4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b37      	ldr	r3, [pc, #220]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	4a36      	ldr	r2, [pc, #216]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	6253      	str	r3, [r2, #36]	; 0x24
 8003386:	4b34      	ldr	r3, [pc, #208]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a32      	ldr	r2, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fee5 	bl	800117c <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fd fee1 	bl	800117c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e104      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x466>
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6353      	str	r3, [r2, #52]	; 0x34
 80033e8:	e02d      	b.n	8003446 <HAL_RCC_OscConfig+0x4c2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x488>
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 80033f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033fc:	6353      	str	r3, [r2, #52]	; 0x34
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003408:	6353      	str	r3, [r2, #52]	; 0x34
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x4c2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x4aa>
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003418:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 800341a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800341e:	6353      	str	r3, [r2, #52]	; 0x34
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6353      	str	r3, [r2, #52]	; 0x34
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x4c2>
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003438:	6353      	str	r3, [r2, #52]	; 0x34
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	4a06      	ldr	r2, [pc, #24]	; (8003458 <HAL_RCC_OscConfig+0x4d4>)
 8003440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003444:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d024      	beq.n	8003498 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fd fe95 	bl	800117c <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003454:	e019      	b.n	800348a <HAL_RCC_OscConfig+0x506>
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	0800bb78 	.word	0x0800bb78
 8003460:	20000164 	.word	0x20000164
 8003464:	20000168 	.word	0x20000168
 8003468:	42470020 	.word	0x42470020
 800346c:	42470680 	.word	0x42470680
 8003470:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd fe82 	bl	800117c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0a3      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348a:	4b54      	ldr	r3, [pc, #336]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <HAL_RCC_OscConfig+0x4f0>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fd fe70 	bl	800117c <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fe6c 	bl	800117c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e08d      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034b6:	4b49      	ldr	r3, [pc, #292]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b44      	ldr	r3, [pc, #272]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	4a43      	ldr	r2, [pc, #268]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d079      	beq.n	80035d0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d056      	beq.n	8003590 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d13b      	bne.n	8003562 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCC_OscConfig+0x65c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fd fe44 	bl	800117c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fd fe40 	bl	800117c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e063      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4319      	orrs	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	430b      	orrs	r3, r1
 800352e:	492b      	ldr	r1, [pc, #172]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 8003530:	4313      	orrs	r3, r2
 8003532:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCC_OscConfig+0x65c>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd fe1f 	bl	800117c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fd fe1b 	bl	800117c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e03e      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x5be>
 8003560:	e036      	b.n	80035d0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCC_OscConfig+0x65c>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fd fe08 	bl	800117c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd fe04 	bl	800117c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e027      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x5ec>
 800358e:	e01f      	b.n	80035d0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01a      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_RCC_OscConfig+0x658>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10d      	bne.n	80035cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d106      	bne.n	80035cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	42470060 	.word	0x42470060

080035e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e11a      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b8f      	ldr	r3, [pc, #572]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d919      	bls.n	800363a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d105      	bne.n	8003618 <HAL_RCC_ClockConfig+0x34>
 800360c:	4b8a      	ldr	r3, [pc, #552]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a89      	ldr	r2, [pc, #548]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b87      	ldr	r3, [pc, #540]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 0201 	bic.w	r2, r3, #1
 8003620:	4985      	ldr	r1, [pc, #532]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003628:	4b83      	ldr	r3, [pc, #524]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d001      	beq.n	800363a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0f9      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003646:	4b7d      	ldr	r3, [pc, #500]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	497a      	ldr	r1, [pc, #488]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 808e 	beq.w	8003782 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800366e:	4b73      	ldr	r3, [pc, #460]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d121      	bne.n	80036be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0d7      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003686:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d115      	bne.n	80036be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0cb      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0bf      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0b7      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 0203 	bic.w	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	495c      	ldr	r1, [pc, #368]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d0:	f7fd fd54 	bl	800117c <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d112      	bne.n	8003704 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fd fd4c 	bl	800117c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e09b      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f6:	4b51      	ldr	r3, [pc, #324]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d1ee      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xfc>
 8003702:	e03e      	b.n	8003782 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d112      	bne.n	8003732 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370e:	f7fd fd35 	bl	800117c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e084      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003724:	4b45      	ldr	r3, [pc, #276]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d1ee      	bne.n	800370e <HAL_RCC_ClockConfig+0x12a>
 8003730:	e027      	b.n	8003782 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d11d      	bne.n	8003776 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fd fd1e 	bl	800117c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e06d      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003752:	4b3a      	ldr	r3, [pc, #232]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b04      	cmp	r3, #4
 800375c:	d1ee      	bne.n	800373c <HAL_RCC_ClockConfig+0x158>
 800375e:	e010      	b.n	8003782 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fd fd0c 	bl	800117c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e05b      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003776:	4b31      	ldr	r3, [pc, #196]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ee      	bne.n	8003760 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d219      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x1be>
 8003796:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0201 	bic.w	r2, r3, #1
 80037aa:	4923      	ldr	r1, [pc, #140]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_RCC_ClockConfig+0x254>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e034      	b.n	800382e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4917      	ldr	r1, [pc, #92]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490f      	ldr	r1, [pc, #60]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f823 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_RCC_ClockConfig+0x258>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490b      	ldr	r1, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x264>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fc5e 	bl	80010e4 <HAL_InitTick>
 8003828:	4603      	mov	r3, r0
 800382a:	72fb      	strb	r3, [r7, #11]

  return status;
 800382c:	7afb      	ldrb	r3, [r7, #11]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023c00 	.word	0x40023c00
 800383c:	40023800 	.word	0x40023800
 8003840:	0800bb78 	.word	0x0800bb78
 8003844:	20000164 	.word	0x20000164
 8003848:	20000168 	.word	0x20000168

0800384c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003850:	b092      	sub	sp, #72	; 0x48
 8003852:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003854:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d00d      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x34>
 8003864:	2b0c      	cmp	r3, #12
 8003866:	f200 80d5 	bhi.w	8003a14 <HAL_RCC_GetSysClockFreq+0x1c8>
 800386a:	2b04      	cmp	r3, #4
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x28>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x2e>
 8003872:	e0cf      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b72      	ldr	r3, [pc, #456]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003876:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003878:	e0da      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800387a:	4b72      	ldr	r3, [pc, #456]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800387e:	e0d7      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003882:	0c9b      	lsrs	r3, r3, #18
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800388e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003890:	0d9b      	lsrs	r3, r3, #22
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	3301      	adds	r3, #1
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389a:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d05d      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2200      	movs	r2, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	4611      	mov	r1, r2
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	0159      	lsls	r1, r3, #5
 80038c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c4:	0150      	lsls	r0, r2, #5
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4621      	mov	r1, r4
 80038cc:	1a51      	subs	r1, r2, r1
 80038ce:	6139      	str	r1, [r7, #16]
 80038d0:	4629      	mov	r1, r5
 80038d2:	eb63 0301 	sbc.w	r3, r3, r1
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038e4:	4659      	mov	r1, fp
 80038e6:	018b      	lsls	r3, r1, #6
 80038e8:	4651      	mov	r1, sl
 80038ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ee:	4651      	mov	r1, sl
 80038f0:	018a      	lsls	r2, r1, #6
 80038f2:	46d4      	mov	ip, sl
 80038f4:	ebb2 080c 	subs.w	r8, r2, ip
 80038f8:	4659      	mov	r1, fp
 80038fa:	eb63 0901 	sbc.w	r9, r3, r1
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800390e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003912:	4690      	mov	r8, r2
 8003914:	4699      	mov	r9, r3
 8003916:	4623      	mov	r3, r4
 8003918:	eb18 0303 	adds.w	r3, r8, r3
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	462b      	mov	r3, r5
 8003920:	eb49 0303 	adc.w	r3, r9, r3
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003932:	4629      	mov	r1, r5
 8003934:	024b      	lsls	r3, r1, #9
 8003936:	4620      	mov	r0, r4
 8003938:	4629      	mov	r1, r5
 800393a:	4604      	mov	r4, r0
 800393c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003940:	4601      	mov	r1, r0
 8003942:	024a      	lsls	r2, r1, #9
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	2200      	movs	r2, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003954:	f7fc fc1a 	bl	800018c <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	e055      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2200      	movs	r2, #0
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	627a      	str	r2, [r7, #36]	; 0x24
 800396a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800396e:	4642      	mov	r2, r8
 8003970:	464b      	mov	r3, r9
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	f04f 0100 	mov.w	r1, #0
 800397a:	0159      	lsls	r1, r3, #5
 800397c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003980:	0150      	lsls	r0, r2, #5
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	46c4      	mov	ip, r8
 8003988:	ebb2 0a0c 	subs.w	sl, r2, ip
 800398c:	4640      	mov	r0, r8
 800398e:	4649      	mov	r1, r9
 8003990:	468c      	mov	ip, r1
 8003992:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039aa:	ebb2 040a 	subs.w	r4, r2, sl
 80039ae:	eb63 050b 	sbc.w	r5, r3, fp
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	00eb      	lsls	r3, r5, #3
 80039bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c0:	00e2      	lsls	r2, r4, #3
 80039c2:	4614      	mov	r4, r2
 80039c4:	461d      	mov	r5, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	18e3      	adds	r3, r4, r3
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	460b      	mov	r3, r1
 80039ce:	eb45 0303 	adc.w	r3, r5, r3
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039e0:	4629      	mov	r1, r5
 80039e2:	028b      	lsls	r3, r1, #10
 80039e4:	4620      	mov	r0, r4
 80039e6:	4629      	mov	r1, r5
 80039e8:	4604      	mov	r4, r0
 80039ea:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80039ee:	4601      	mov	r1, r0
 80039f0:	028a      	lsls	r2, r1, #10
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f8:	2200      	movs	r2, #0
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	61fa      	str	r2, [r7, #28]
 80039fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a02:	f7fc fbc3 	bl	800018c <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a10:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003a12:	e00d      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0b5b      	lsrs	r3, r3, #13
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	3301      	adds	r3, #1
 8003a24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003a2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3748      	adds	r7, #72	; 0x48
 8003a36:	46bd      	mov	sp, r7
 8003a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	007a1200 	.word	0x007a1200
 8003a48:	0800bb6c 	.word	0x0800bb6c

08003a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	20000164 	.word	0x20000164

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a64:	f7ff fff2 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800bb88 	.word	0x0800bb88

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a8c:	f7ff ffde 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0adb      	lsrs	r3, r3, #11
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800bb88 	.word	0x0800bb88

08003ab0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d12c      	bne.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ac8:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e016      	b.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6253      	str	r3, [r2, #36]	; 0x24
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003b00:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003b14:	d105      	bne.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b1c:	d101      	bne.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003b1e:	2301      	movs	r3, #1
 8003b20:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d105      	bne.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003b28:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0f      	ldr	r2, [pc, #60]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 0201 	bic.w	r2, r3, #1
 8003b3c:	490b      	ldr	r1, [pc, #44]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d001      	beq.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	40023c00 	.word	0x40023c00

08003b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e07b      	b.n	8003c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b92:	d009      	beq.n	8003ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	61da      	str	r2, [r3, #28]
 8003b9a:	e005      	b.n	8003ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd f8c4 	bl	8000d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	ea42 0103 	orr.w	r1, r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0104 	and.w	r1, r3, #4
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f003 0210 	and.w	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b08c      	sub	sp, #48	; 0x30
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c90:	2301      	movs	r3, #1
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_SPI_TransmitReceive+0x26>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e18a      	b.n	8003fbe <HAL_SPI_TransmitReceive+0x33c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb0:	f7fd fa64 	bl	800117c <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d00f      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x70>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd8:	d107      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x68>
 8003ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d003      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cf0:	e15b      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x82>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x82>
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d0a:	e14e      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d003      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d007      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7c:	d178      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_SPI_TransmitReceive+0x10a>
 8003d86:	8b7b      	ldrh	r3, [r7, #26]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d166      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db0:	e053      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d11b      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x176>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x176>
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d113      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	881a      	ldrh	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d119      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x1b8>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d014      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e36:	2301      	movs	r3, #1
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e3a:	f7fd f99f 	bl	800117c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d807      	bhi.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d003      	beq.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e58:	e0a7      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1a6      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x130>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1a1      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x130>
 8003e6e:	e07c      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_TransmitReceive+0x1fc>
 8003e78:	8b7b      	ldrh	r3, [r7, #26]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d16b      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea4:	e057      	b.n	8003f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d11c      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x26c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <HAL_SPI_TransmitReceive+0x26c>
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d114      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d119      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x2ae>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d014      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f30:	f7fd f924 	bl	800117c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d803      	bhi.n	8003f48 <HAL_SPI_TransmitReceive+0x2c6>
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x2cc>
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f54:	e029      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1a2      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x224>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d19d      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f8b2 	bl	80040d8 <SPI_EndRxTxTransaction>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d006      	beq.n	8003f88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f86:	e010      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	e000      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3730      	adds	r7, #48	; 0x30
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fd8:	f7fd f8d0 	bl	800117c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fe8:	f7fd f8c8 	bl	800117c <HAL_GetTick>
 8003fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	015b      	lsls	r3, r3, #5
 8003ff4:	0d1b      	lsrs	r3, r3, #20
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	fb02 f303 	mul.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffe:	e054      	b.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d050      	beq.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004008:	f7fd f8b8 	bl	800117c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	429a      	cmp	r2, r3
 8004016:	d902      	bls.n	800401e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d13d      	bne.n	800409a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800402c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d111      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d004      	beq.n	800404c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d107      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004064:	d10f      	bne.n	8004086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e017      	b.n	80040ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d19b      	bne.n	8004000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000164 	.word	0x20000164

080040d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <SPI_EndRxTxTransaction+0x7c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <SPI_EndRxTxTransaction+0x80>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	0d5b      	lsrs	r3, r3, #21
 80040f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004102:	d112      	bne.n	800412a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	2180      	movs	r1, #128	; 0x80
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff5a 	bl	8003fc8 <SPI_WaitFlagStateUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e00f      	b.n	800414a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3b01      	subs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d0f2      	beq.n	800412a <SPI_EndRxTxTransaction+0x52>
 8004144:	e000      	b.n	8004148 <SPI_EndRxTxTransaction+0x70>
        break;
 8004146:	bf00      	nop
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000164 	.word	0x20000164
 8004158:	165e9f81 	.word	0x165e9f81

0800415c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e03f      	b.n	80041ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fc fe28 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	; 0x24
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f829 	bl	80041f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4313      	orrs	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004238:	f023 030c 	bic.w	r3, r3, #12
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	430b      	orrs	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a55      	ldr	r2, [pc, #340]	; (80043b8 <UART_SetConfig+0x1c0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d103      	bne.n	800426e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004266:	f7ff fc0f 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	e002      	b.n	8004274 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800426e:	f7ff fbf7 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8004272:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d14c      	bne.n	8004318 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009a      	lsls	r2, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	4a49      	ldr	r2, [pc, #292]	; (80043bc <UART_SetConfig+0x1c4>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	0119      	lsls	r1, r3, #4
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b4:	4b41      	ldr	r3, [pc, #260]	; (80043bc <UART_SetConfig+0x1c4>)
 80042b6:	fba3 0302 	umull	r0, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2064      	movs	r0, #100	; 0x64
 80042be:	fb00 f303 	mul.w	r3, r0, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a3c      	ldr	r2, [pc, #240]	; (80043bc <UART_SetConfig+0x1c4>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d6:	4419      	add	r1, r3
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	009a      	lsls	r2, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <UART_SetConfig+0x1c4>)
 80042f0:	fba3 0302 	umull	r0, r3, r3, r2
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	2064      	movs	r0, #100	; 0x64
 80042f8:	fb00 f303 	mul.w	r3, r0, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	3332      	adds	r3, #50	; 0x32
 8004302:	4a2e      	ldr	r2, [pc, #184]	; (80043bc <UART_SetConfig+0x1c4>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	f003 0207 	and.w	r2, r3, #7
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	440a      	add	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004316:	e04a      	b.n	80043ae <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	4a23      	ldr	r2, [pc, #140]	; (80043bc <UART_SetConfig+0x1c4>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	0119      	lsls	r1, r3, #4
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009a      	lsls	r2, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	fbb2 f2f3 	udiv	r2, r2, r3
 800434e:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <UART_SetConfig+0x1c4>)
 8004350:	fba3 0302 	umull	r0, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2064      	movs	r0, #100	; 0x64
 8004358:	fb00 f303 	mul.w	r3, r0, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	3332      	adds	r3, #50	; 0x32
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <UART_SetConfig+0x1c4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436e:	4419      	add	r1, r3
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009a      	lsls	r2, r3, #2
 800437a:	441a      	add	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	fbb2 f2f3 	udiv	r2, r2, r3
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <UART_SetConfig+0x1c4>)
 8004388:	fba3 0302 	umull	r0, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2064      	movs	r0, #100	; 0x64
 8004390:	fb00 f303 	mul.w	r3, r0, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <UART_SetConfig+0x1c4>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	440a      	add	r2, r1
 80043ac:	609a      	str	r2, [r3, #8]
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40013800 	.word	0x40013800
 80043bc:	51eb851f 	.word	0x51eb851f

080043c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	b29b      	uxth	r3, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	b29b      	uxth	r3, r3
 800440a:	4013      	ands	r3, r2
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004420:	b084      	sub	sp, #16
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	f107 0014 	add.w	r0, r7, #20
 800442e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	b004      	add	sp, #16
 800445e:	4770      	bx	lr

08004460 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004460:	b480      	push	{r7}
 8004462:	b09b      	sub	sp, #108	; 0x6c
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	78db      	ldrb	r3, [r3, #3]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d81f      	bhi.n	80044d2 <USB_ActivateEndpoint+0x72>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <USB_ActivateEndpoint+0x38>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044db 	.word	0x080044db
 80044a4:	080044b7 	.word	0x080044b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80044b4:	e012      	b.n	80044dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80044be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80044c2:	e00b      	b.n	80044dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80044d0:	e004      	b.n	80044dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80044d8:	e000      	b.n	80044dc <USB_ActivateEndpoint+0x7c>
      break;
 80044da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004514:	b29a      	uxth	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	4313      	orrs	r3, r2
 800451e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004540:	b29b      	uxth	r3, r3
 8004542:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	7b1b      	ldrb	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 8149 	bne.w	80047e0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	785b      	ldrb	r3, [r3, #1]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8084 	beq.w	8004660 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4413      	add	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	011a      	lsls	r2, r3, #4
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	88db      	ldrh	r3, [r3, #6]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	81fb      	strh	r3, [r7, #14]
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <USB_ActivateEndpoint+0x17c>
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	81bb      	strh	r3, [r7, #12]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	441a      	add	r2, r3
 80045c6:	89bb      	ldrh	r3, [r7, #12]
 80045c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	78db      	ldrb	r3, [r3, #3]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d020      	beq.n	8004626 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	813b      	strh	r3, [r7, #8]
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	f083 0320 	eor.w	r3, r3, #32
 8004602:	813b      	strh	r3, [r7, #8]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
 8004624:	e27f      	b.n	8004b26 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	817b      	strh	r3, [r7, #10]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
 800465e:	e262      	b.n	8004b26 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	4413      	add	r3, r2
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	011a      	lsls	r2, r3, #4
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	4413      	add	r3, r2
 800467e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	88db      	ldrh	r3, [r3, #6]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	4413      	add	r3, r2
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	011a      	lsls	r2, r3, #4
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	4413      	add	r3, r2
 80046b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d112      	bne.n	80046e6 <USB_ActivateEndpoint+0x286>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046de:	b29a      	uxth	r2, r3
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	e02f      	b.n	8004746 <USB_ActivateEndpoint+0x2e6>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b3e      	cmp	r3, #62	; 0x3e
 80046ec:	d813      	bhi.n	8004716 <USB_ActivateEndpoint+0x2b6>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	663b      	str	r3, [r7, #96]	; 0x60
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <USB_ActivateEndpoint+0x2a8>
 8004702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004704:	3301      	adds	r3, #1
 8004706:	663b      	str	r3, [r7, #96]	; 0x60
 8004708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800470a:	b29b      	uxth	r3, r3
 800470c:	029b      	lsls	r3, r3, #10
 800470e:	b29a      	uxth	r2, r3
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	801a      	strh	r2, [r3, #0]
 8004714:	e017      	b.n	8004746 <USB_ActivateEndpoint+0x2e6>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	663b      	str	r3, [r7, #96]	; 0x60
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <USB_ActivateEndpoint+0x2d0>
 800472a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800472c:	3b01      	subs	r3, #1
 800472e:	663b      	str	r3, [r7, #96]	; 0x60
 8004730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004732:	b29b      	uxth	r3, r3
 8004734:	029b      	lsls	r3, r3, #10
 8004736:	b29b      	uxth	r3, r3
 8004738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004740:	b29a      	uxth	r2, r3
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	83fb      	strh	r3, [r7, #30]
 8004754:	8bfb      	ldrh	r3, [r7, #30]
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01b      	beq.n	8004796 <USB_ActivateEndpoint+0x336>
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	83bb      	strh	r3, [r7, #28]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	8bbb      	ldrh	r3, [r7, #28]
 8004782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	b29b      	uxth	r3, r3
 8004794:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ac:	837b      	strh	r3, [r7, #26]
 80047ae:	8b7b      	ldrh	r3, [r7, #26]
 80047b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047b4:	837b      	strh	r3, [r7, #26]
 80047b6:	8b7b      	ldrh	r3, [r7, #26]
 80047b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047bc:	837b      	strh	r3, [r7, #26]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	8b7b      	ldrh	r3, [r7, #26]
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
 80047de:	e1a2      	b.n	8004b26 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004810:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	b29b      	uxth	r3, r3
 800481a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800482c:	4413      	add	r3, r2
 800482e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	011a      	lsls	r2, r3, #4
 8004836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004838:	4413      	add	r3, r2
 800483a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	891b      	ldrh	r3, [r3, #8]
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	b29b      	uxth	r3, r3
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	653b      	str	r3, [r7, #80]	; 0x50
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485a:	b29b      	uxth	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004860:	4413      	add	r3, r2
 8004862:	653b      	str	r3, [r7, #80]	; 0x50
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	011a      	lsls	r2, r3, #4
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	4413      	add	r3, r2
 800486e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	895b      	ldrh	r3, [r3, #10]
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	b29b      	uxth	r3, r3
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 8091 	bne.w	80049b0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800489c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800489e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01b      	beq.n	80048de <USB_ActivateEndpoint+0x47e>
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80048ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80048ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01b      	beq.n	800492e <USB_ActivateEndpoint+0x4ce>
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004946:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004948:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800494c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800494e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004950:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004954:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498c:	867b      	strh	r3, [r7, #50]	; 0x32
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
 80049ae:	e0ba      	b.n	8004b26 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80049c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01d      	beq.n	8004a08 <USB_ActivateEndpoint+0x5a8>
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01d      	beq.n	8004a60 <USB_ActivateEndpoint+0x600>
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	78db      	ldrb	r3, [r3, #3]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d024      	beq.n	8004ab2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a86:	f083 0320 	eor.w	r3, r3, #32
 8004a8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	441a      	add	r2, r3
 8004a98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	8013      	strh	r3, [r2, #0]
 8004ab0:	e01d      	b.n	8004aee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004b26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	376c      	adds	r7, #108	; 0x6c
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b08d      	sub	sp, #52	; 0x34
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	7b1b      	ldrb	r3, [r3, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f040 808e 	bne.w	8004c64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d044      	beq.n	8004bda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	81bb      	strh	r3, [r7, #12]
 8004b5e:	89bb      	ldrh	r3, [r7, #12]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <USB_DeactivateEndpoint+0x6c>
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	817b      	strh	r3, [r7, #10]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb6:	813b      	strh	r3, [r7, #8]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	893b      	ldrh	r3, [r7, #8]
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
 8004bd8:	e192      	b.n	8004f00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	827b      	strh	r3, [r7, #18]
 8004be8:	8a7b      	ldrh	r3, [r7, #18]
 8004bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01b      	beq.n	8004c2a <USB_DeactivateEndpoint+0xf6>
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	823b      	strh	r3, [r7, #16]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	8a3b      	ldrh	r3, [r7, #16]
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	81fb      	strh	r3, [r7, #14]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	89fb      	ldrh	r3, [r7, #14]
 8004c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]
 8004c62:	e14d      	b.n	8004f00 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 80a5 	bne.w	8004db8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	843b      	strh	r3, [r7, #32]
 8004c7c:	8c3b      	ldrh	r3, [r7, #32]
 8004c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01b      	beq.n	8004cbe <USB_DeactivateEndpoint+0x18a>
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9c:	83fb      	strh	r3, [r7, #30]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	8bfb      	ldrh	r3, [r7, #30]
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	83bb      	strh	r3, [r7, #28]
 8004ccc:	8bbb      	ldrh	r3, [r7, #28]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01b      	beq.n	8004d0e <USB_DeactivateEndpoint+0x1da>
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cec:	837b      	strh	r3, [r7, #26]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	441a      	add	r2, r3
 8004cf8:	8b7b      	ldrh	r3, [r7, #26]
 8004cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	833b      	strh	r3, [r7, #24]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	8b3b      	ldrh	r3, [r7, #24]
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	82fb      	strh	r3, [r7, #22]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	8afb      	ldrh	r3, [r7, #22]
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d94:	82bb      	strh	r3, [r7, #20]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	8abb      	ldrh	r3, [r7, #20]
 8004da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8013      	strh	r3, [r2, #0]
 8004db6:	e0a3      	b.n	8004f00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004dc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01b      	beq.n	8004e08 <USB_DeactivateEndpoint+0x2d4>
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01b      	beq.n	8004e58 <USB_DeactivateEndpoint+0x324>
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3734      	adds	r7, #52	; 0x34
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr

08004f0c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b0cc      	sub	sp, #304	; 0x130
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f1a:	6018      	str	r0, [r3, #0]
 8004f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f24:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	f041 817d 	bne.w	8006232 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d908      	bls.n	8004f66 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004f64:	e007      	b.n	8004f76 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	7b1b      	ldrb	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d152      	bne.n	800502c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6959      	ldr	r1, [r3, #20]
 8004f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	88da      	ldrh	r2, [r3, #6]
 8004f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fa8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fac:	6800      	ldr	r0, [r0, #0]
 8004fae:	f001 ff0e 	bl	8006dce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004fba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fbe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004fe0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fe4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	440a      	add	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	011a      	lsls	r2, r3, #4
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4413      	add	r3, r2
 8005008:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501a:	b29a      	uxth	r2, r3
 800501c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005020:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	f001 b8b5 	b.w	8006196 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	78db      	ldrb	r3, [r3, #3]
 8005038:	2b02      	cmp	r3, #2
 800503a:	f040 84c6 	bne.w	80059ca <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	f240 8443 	bls.w	80058e2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800505c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005060:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c8:	1ad2      	subs	r2, r2, r3
 80050ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 823e 	beq.w	800557a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005102:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005106:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800510a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f040 809a 	bne.w	8005258 <USB_EPStartXfer+0x34c>
 8005124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005130:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005146:	b29b      	uxth	r3, r3
 8005148:	4619      	mov	r1, r3
 800514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005152:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005156:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	440a      	add	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	011a      	lsls	r2, r3, #4
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4413      	add	r3, r2
 800517a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800517e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005182:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d122      	bne.n	80051d6 <USB_EPStartXfer+0x2ca>
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e079      	b.n	80052ca <USB_EPStartXfer+0x3be>
 80051d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051da:	2b3e      	cmp	r3, #62	; 0x3e
 80051dc:	d81b      	bhi.n	8005216 <USB_EPStartXfer+0x30a>
 80051de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <USB_EPStartXfer+0x2f2>
 80051f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051f8:	3301      	adds	r3, #1
 80051fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005202:	b29b      	uxth	r3, r3
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	b29a      	uxth	r2, r3
 8005208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e059      	b.n	80052ca <USB_EPStartXfer+0x3be>
 8005216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <USB_EPStartXfer+0x32a>
 800522c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005230:	3b01      	subs	r3, #1
 8005232:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005236:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800523a:	b29b      	uxth	r3, r3
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	b29b      	uxth	r3, r3
 8005240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005248:	b29a      	uxth	r2, r3
 800524a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e038      	b.n	80052ca <USB_EPStartXfer+0x3be>
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d130      	bne.n	80052ca <USB_EPStartXfer+0x3be>
 8005268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005276:	b29b      	uxth	r3, r3
 8005278:	4619      	mov	r1, r3
 800527a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005282:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005286:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	440a      	add	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	011a      	lsls	r2, r3, #4
 800529e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80052ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	895b      	ldrh	r3, [r3, #10]
 80052d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6959      	ldr	r1, [r3, #20]
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052f8:	6800      	ldr	r0, [r0, #0]
 80052fa:	f001 fd68 	bl	8006dce <USB_WritePMA>
            ep->xfer_buff += len;
 80052fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530e:	441a      	add	r2, r3
 8005310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800531c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d90f      	bls.n	8005358 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005348:	1ad2      	subs	r2, r2, r3
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	621a      	str	r2, [r3, #32]
 8005356:	e00e      	b.n	8005376 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 809a 	bne.w	80054bc <USB_EPStartXfer+0x5b0>
 8005388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005390:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005394:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4619      	mov	r1, r3
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80053b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053ba:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	440a      	add	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	011a      	lsls	r2, r3, #4
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4413      	add	r3, r2
 80053de:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d122      	bne.n	800543a <USB_EPStartXfer+0x52e>
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29b      	uxth	r3, r3
 8005402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005406:	b29a      	uxth	r2, r3
 8005408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005418:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542a:	b29a      	uxth	r2, r3
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e083      	b.n	8005542 <USB_EPStartXfer+0x636>
 800543a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543e:	2b3e      	cmp	r3, #62	; 0x3e
 8005440:	d81b      	bhi.n	800547a <USB_EPStartXfer+0x56e>
 8005442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800544c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <USB_EPStartXfer+0x556>
 8005458:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800545c:	3301      	adds	r3, #1
 800545e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005462:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005466:	b29b      	uxth	r3, r3
 8005468:	029b      	lsls	r3, r3, #10
 800546a:	b29a      	uxth	r2, r3
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	e063      	b.n	8005542 <USB_EPStartXfer+0x636>
 800547a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <USB_EPStartXfer+0x58e>
 8005490:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005494:	3b01      	subs	r3, #1
 8005496:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800549a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800549e:	b29b      	uxth	r3, r3
 80054a0:	029b      	lsls	r3, r3, #10
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	e042      	b.n	8005542 <USB_EPStartXfer+0x636>
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d13a      	bne.n	8005542 <USB_EPStartXfer+0x636>
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054d8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4619      	mov	r1, r3
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054fe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	440a      	add	r2, r1
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	011a      	lsls	r2, r3, #4
 8005516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4413      	add	r3, r2
 8005522:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005534:	b29a      	uxth	r2, r3
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	891b      	ldrh	r3, [r3, #8]
 800554e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6959      	ldr	r1, [r3, #20]
 800555e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005562:	b29b      	uxth	r3, r3
 8005564:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005568:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800556c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005570:	6800      	ldr	r0, [r0, #0]
 8005572:	f001 fc2c 	bl	8006dce <USB_WritePMA>
 8005576:	f000 be0e 	b.w	8006196 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800557a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d16d      	bne.n	8005666 <USB_EPStartXfer+0x75a>
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	64bb      	str	r3, [r7, #72]	; 0x48
 8005596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055aa:	4413      	add	r3, r2
 80055ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	011a      	lsls	r2, r3, #4
 80055bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055be:	4413      	add	r3, r2
 80055c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055c4:	647b      	str	r3, [r7, #68]	; 0x44
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d112      	bne.n	80055f4 <USB_EPStartXfer+0x6e8>
 80055ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e063      	b.n	80056bc <USB_EPStartXfer+0x7b0>
 80055f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f8:	2b3e      	cmp	r3, #62	; 0x3e
 80055fa:	d817      	bhi.n	800562c <USB_EPStartXfer+0x720>
 80055fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <USB_EPStartXfer+0x710>
 8005612:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005616:	3301      	adds	r3, #1
 8005618:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800561c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005620:	b29b      	uxth	r3, r3
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	b29a      	uxth	r2, r3
 8005626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e047      	b.n	80056bc <USB_EPStartXfer+0x7b0>
 800562c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <USB_EPStartXfer+0x740>
 8005642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005646:	3b01      	subs	r3, #1
 8005648:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800564c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005650:	b29b      	uxth	r3, r3
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	b29b      	uxth	r3, r3
 8005656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565e:	b29a      	uxth	r2, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005662:	801a      	strh	r2, [r3, #0]
 8005664:	e02a      	b.n	80056bc <USB_EPStartXfer+0x7b0>
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d122      	bne.n	80056bc <USB_EPStartXfer+0x7b0>
 8005676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	653b      	str	r3, [r7, #80]	; 0x50
 8005682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005690:	b29b      	uxth	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005696:	4413      	add	r3, r2
 8005698:	653b      	str	r3, [r7, #80]	; 0x50
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	011a      	lsls	r2, r3, #4
 80056a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056aa:	4413      	add	r3, r2
 80056ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	891b      	ldrh	r3, [r3, #8]
 80056c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6959      	ldr	r1, [r3, #20]
 80056d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056e2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056e6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	f001 fb6f 	bl	8006dce <USB_WritePMA>
            ep->xfer_buff += len;
 80056f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005700:	441a      	add	r2, r3
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90f      	bls.n	800574a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	621a      	str	r2, [r3, #32]
 8005748:	e00e      	b.n	8005768 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2200      	movs	r2, #0
 8005766:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	643b      	str	r3, [r7, #64]	; 0x40
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d16d      	bne.n	8005860 <USB_EPStartXfer+0x954>
 8005784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579e:	b29b      	uxth	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	4413      	add	r3, r2
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	011a      	lsls	r2, r3, #4
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	4413      	add	r3, r2
 80057ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057be:	637b      	str	r3, [r7, #52]	; 0x34
 80057c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d112      	bne.n	80057ee <USB_EPStartXfer+0x8e2>
 80057c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e05d      	b.n	80058aa <USB_EPStartXfer+0x99e>
 80057ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f2:	2b3e      	cmp	r3, #62	; 0x3e
 80057f4:	d817      	bhi.n	8005826 <USB_EPStartXfer+0x91a>
 80057f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <USB_EPStartXfer+0x90a>
 800580c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005810:	3301      	adds	r3, #1
 8005812:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800581a:	b29b      	uxth	r3, r3
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	b29a      	uxth	r2, r3
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	e041      	b.n	80058aa <USB_EPStartXfer+0x99e>
 8005826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <USB_EPStartXfer+0x93a>
 800583c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005840:	3b01      	subs	r3, #1
 8005842:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005846:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800584a:	b29b      	uxth	r3, r3
 800584c:	029b      	lsls	r3, r3, #10
 800584e:	b29b      	uxth	r3, r3
 8005850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005858:	b29a      	uxth	r2, r3
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	e024      	b.n	80058aa <USB_EPStartXfer+0x99e>
 8005860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d11c      	bne.n	80058aa <USB_EPStartXfer+0x99e>
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005884:	4413      	add	r3, r2
 8005886:	643b      	str	r3, [r7, #64]	; 0x40
 8005888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	011a      	lsls	r2, r3, #4
 8005896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005898:	4413      	add	r3, r2
 800589a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	895b      	ldrh	r3, [r3, #10]
 80058b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6959      	ldr	r1, [r3, #20]
 80058c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058d8:	6800      	ldr	r0, [r0, #0]
 80058da:	f001 fa78 	bl	8006dce <USB_WritePMA>
 80058de:	f000 bc5a 	b.w	8006196 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80058e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800591c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800593a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594a:	b29b      	uxth	r3, r3
 800594c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800595a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005968:	b29b      	uxth	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800596e:	4413      	add	r3, r2
 8005970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	011a      	lsls	r2, r3, #4
 8005980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005982:	4413      	add	r3, r2
 8005984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005988:	65bb      	str	r3, [r7, #88]	; 0x58
 800598a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598e:	b29a      	uxth	r2, r3
 8005990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005992:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	891b      	ldrh	r3, [r3, #8]
 80059a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6959      	ldr	r1, [r3, #20]
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059c2:	6800      	ldr	r0, [r0, #0]
 80059c4:	f001 fa03 	bl	8006dce <USB_WritePMA>
 80059c8:	e3e5      	b.n	8006196 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80059ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a36:	1ad2      	subs	r2, r2, r3
 8005a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 81bc 	beq.w	8005de4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d16d      	bne.n	8005b66 <USB_EPStartXfer+0xc5a>
 8005a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aaa:	4413      	add	r3, r2
 8005aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	011a      	lsls	r2, r3, #4
 8005abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005abe:	4413      	add	r3, r2
 8005ac0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ac4:	677b      	str	r3, [r7, #116]	; 0x74
 8005ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d112      	bne.n	8005af4 <USB_EPStartXfer+0xbe8>
 8005ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	e060      	b.n	8005bb6 <USB_EPStartXfer+0xcaa>
 8005af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af8:	2b3e      	cmp	r3, #62	; 0x3e
 8005afa:	d817      	bhi.n	8005b2c <USB_EPStartXfer+0xc20>
 8005afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <USB_EPStartXfer+0xc10>
 8005b12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b16:	3301      	adds	r3, #1
 8005b18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	e044      	b.n	8005bb6 <USB_EPStartXfer+0xcaa>
 8005b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <USB_EPStartXfer+0xc40>
 8005b42:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b46:	3b01      	subs	r3, #1
 8005b48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	029b      	lsls	r3, r3, #10
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	e027      	b.n	8005bb6 <USB_EPStartXfer+0xcaa>
 8005b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d11f      	bne.n	8005bb6 <USB_EPStartXfer+0xcaa>
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	011a      	lsls	r2, r3, #4
 8005ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005baa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	895b      	ldrh	r3, [r3, #10]
 8005bc2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6959      	ldr	r1, [r3, #20]
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bdc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005be0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005be4:	6800      	ldr	r0, [r0, #0]
 8005be6:	f001 f8f2 	bl	8006dce <USB_WritePMA>
          ep->xfer_buff += len;
 8005bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	441a      	add	r2, r3
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a1a      	ldr	r2, [r3, #32]
 8005c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d90f      	bls.n	8005c44 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	1ad2      	subs	r2, r2, r3
 8005c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	621a      	str	r2, [r3, #32]
 8005c42:	e00e      	b.n	8005c62 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8295 	beq.w	8006196 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d16d      	bne.n	8005d58 <USB_EPStartXfer+0xe4c>
 8005c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c9c:	4413      	add	r3, r2
 8005c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cb6:	667b      	str	r3, [r7, #100]	; 0x64
 8005cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d112      	bne.n	8005ce6 <USB_EPStartXfer+0xdda>
 8005cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e063      	b.n	8005dae <USB_EPStartXfer+0xea2>
 8005ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cea:	2b3e      	cmp	r3, #62	; 0x3e
 8005cec:	d817      	bhi.n	8005d1e <USB_EPStartXfer+0xe12>
 8005cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <USB_EPStartXfer+0xe02>
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e047      	b.n	8005dae <USB_EPStartXfer+0xea2>
 8005d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <USB_EPStartXfer+0xe32>
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e02a      	b.n	8005dae <USB_EPStartXfer+0xea2>
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d122      	bne.n	8005dae <USB_EPStartXfer+0xea2>
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	673b      	str	r3, [r7, #112]	; 0x70
 8005d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d88:	4413      	add	r3, r2
 8005d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	011a      	lsls	r2, r3, #4
 8005d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	891b      	ldrh	r3, [r3, #8]
 8005dba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6959      	ldr	r1, [r3, #20]
 8005dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dd4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dd8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f000 fff6 	bl	8006dce <USB_WritePMA>
 8005de2:	e1d8      	b.n	8006196 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d178      	bne.n	8005ee6 <USB_EPStartXfer+0xfda>
 8005df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e18:	4413      	add	r3, r2
 8005e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	011a      	lsls	r2, r3, #4
 8005e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e30:	4413      	add	r3, r2
 8005e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d116      	bne.n	8005e70 <USB_EPStartXfer+0xf64>
 8005e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e06b      	b.n	8005f48 <USB_EPStartXfer+0x103c>
 8005e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e74:	2b3e      	cmp	r3, #62	; 0x3e
 8005e76:	d818      	bhi.n	8005eaa <USB_EPStartXfer+0xf9e>
 8005e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <USB_EPStartXfer+0xf8c>
 8005e8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e92:	3301      	adds	r3, #1
 8005e94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005e98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	e04e      	b.n	8005f48 <USB_EPStartXfer+0x103c>
 8005eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <USB_EPStartXfer+0xfbe>
 8005ec0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	029b      	lsls	r3, r3, #10
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e030      	b.n	8005f48 <USB_EPStartXfer+0x103c>
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d128      	bne.n	8005f48 <USB_EPStartXfer+0x103c>
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	011a      	lsls	r2, r3, #4
 8005f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f32:	4413      	add	r3, r2
 8005f34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	891b      	ldrh	r3, [r3, #8]
 8005f54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6959      	ldr	r1, [r3, #20]
 8005f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f6e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f72:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f76:	6800      	ldr	r0, [r0, #0]
 8005f78:	f000 ff29 	bl	8006dce <USB_WritePMA>
          ep->xfer_buff += len;
 8005f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8c:	441a      	add	r2, r3
 8005f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a1a      	ldr	r2, [r3, #32]
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d90f      	bls.n	8005fd6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6a1a      	ldr	r2, [r3, #32]
 8005fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	621a      	str	r2, [r3, #32]
 8005fd4:	e00e      	b.n	8005ff4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80cc 	beq.w	8006196 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800600c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d178      	bne.n	800610e <USB_EPStartXfer+0x1202>
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800602a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006038:	b29b      	uxth	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006040:	4413      	add	r3, r2
 8006042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	011a      	lsls	r2, r3, #4
 8006054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006058:	4413      	add	r3, r2
 800605a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800605e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d116      	bne.n	8006098 <USB_EPStartXfer+0x118c>
 800606a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e064      	b.n	8006162 <USB_EPStartXfer+0x1256>
 8006098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609c:	2b3e      	cmp	r3, #62	; 0x3e
 800609e:	d818      	bhi.n	80060d2 <USB_EPStartXfer+0x11c6>
 80060a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <USB_EPStartXfer+0x11b4>
 80060b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ba:	3301      	adds	r3, #1
 80060bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	029b      	lsls	r3, r3, #10
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	e047      	b.n	8006162 <USB_EPStartXfer+0x1256>
 80060d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <USB_EPStartXfer+0x11e6>
 80060e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e029      	b.n	8006162 <USB_EPStartXfer+0x1256>
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d121      	bne.n	8006162 <USB_EPStartXfer+0x1256>
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612c:	b29b      	uxth	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006134:	4413      	add	r3, r2
 8006136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	011a      	lsls	r2, r3, #4
 8006148:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800614c:	4413      	add	r3, r2
 800614e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006160:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	895b      	ldrh	r3, [r3, #10]
 800616e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6959      	ldr	r1, [r3, #20]
 800617e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006182:	b29b      	uxth	r3, r3
 8006184:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006188:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800618c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006190:	6800      	ldr	r0, [r0, #0]
 8006192:	f000 fe1c 	bl	8006dce <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061b8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80061bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c4:	8013      	strh	r3, [r2, #0]
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80061ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061d2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80061d6:	8812      	ldrh	r2, [r2, #0]
 80061d8:	f082 0210 	eor.w	r2, r2, #16
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80061e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061ea:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80061ee:	8812      	ldrh	r2, [r2, #0]
 80061f0:	f082 0220 	eor.w	r2, r2, #32
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]
 800622e:	f000 bc9f 	b.w	8006b70 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	7b1b      	ldrb	r3, [r3, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 80ae 	bne.w	80063a0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	429a      	cmp	r2, r3
 800625e:	d917      	bls.n	8006290 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	619a      	str	r2, [r3, #24]
 800628e:	e00e      	b.n	80062ae <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80062a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062d2:	4413      	add	r3, r2
 80062d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	011a      	lsls	r2, r3, #4
 80062e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d116      	bne.n	800632a <USB_EPStartXfer+0x141e>
 80062fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e3e8      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
 800632a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632e:	2b3e      	cmp	r3, #62	; 0x3e
 8006330:	d818      	bhi.n	8006364 <USB_EPStartXfer+0x1458>
 8006332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800633c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <USB_EPStartXfer+0x1446>
 8006348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800634c:	3301      	adds	r3, #1
 800634e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006356:	b29b      	uxth	r3, r3
 8006358:	029b      	lsls	r3, r3, #10
 800635a:	b29a      	uxth	r2, r3
 800635c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e3cb      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800636e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <USB_EPStartXfer+0x1478>
 800637a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800637e:	3b01      	subs	r3, #1
 8006380:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006388:	b29b      	uxth	r3, r3
 800638a:	029b      	lsls	r3, r3, #10
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	e3ad      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	78db      	ldrb	r3, [r3, #3]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	f040 8200 	bne.w	80067b2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 8091 	bne.w	80064e6 <USB_EPStartXfer+0x15da>
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063e8:	4413      	add	r3, r2
 80063ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	011a      	lsls	r2, r3, #4
 80063fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006400:	4413      	add	r3, r2
 8006402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800640a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d116      	bne.n	8006448 <USB_EPStartXfer+0x153c>
 800641a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006426:	b29a      	uxth	r2, r3
 8006428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643e:	b29a      	uxth	r2, r3
 8006440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e083      	b.n	8006550 <USB_EPStartXfer+0x1644>
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b3e      	cmp	r3, #62	; 0x3e
 8006456:	d820      	bhi.n	800649a <USB_EPStartXfer+0x158e>
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <USB_EPStartXfer+0x157c>
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	3301      	adds	r3, #1
 8006484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	b29b      	uxth	r3, r3
 800648e:	029b      	lsls	r3, r3, #10
 8006490:	b29a      	uxth	r2, r3
 8006492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006496:	801a      	strh	r2, [r3, #0]
 8006498:	e05a      	b.n	8006550 <USB_EPStartXfer+0x1644>
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <USB_EPStartXfer+0x15be>
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	3b01      	subs	r3, #1
 80064c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	029b      	lsls	r3, r3, #10
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e034      	b.n	8006550 <USB_EPStartXfer+0x1644>
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d12c      	bne.n	8006550 <USB_EPStartXfer+0x1644>
 80064f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800651a:	4413      	add	r3, r2
 800651c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	011a      	lsls	r2, r3, #4
 800652e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006532:	4413      	add	r3, r2
 8006534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	b29a      	uxth	r2, r3
 800654a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 8091 	bne.w	8006692 <USB_EPStartXfer+0x1786>
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800657e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006594:	4413      	add	r3, r2
 8006596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	011a      	lsls	r2, r3, #4
 80065a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d116      	bne.n	80065f4 <USB_EPStartXfer+0x16e8>
 80065c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e07c      	b.n	80066ee <USB_EPStartXfer+0x17e2>
 80065f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b3e      	cmp	r3, #62	; 0x3e
 8006602:	d820      	bhi.n	8006646 <USB_EPStartXfer+0x173a>
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <USB_EPStartXfer+0x1728>
 800662a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800662e:	3301      	adds	r3, #1
 8006630:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006634:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006638:	b29b      	uxth	r3, r3
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	b29a      	uxth	r2, r3
 800663e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	e053      	b.n	80066ee <USB_EPStartXfer+0x17e2>
 8006646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <USB_EPStartXfer+0x176a>
 800666c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006670:	3b01      	subs	r3, #1
 8006672:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006676:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e02d      	b.n	80066ee <USB_EPStartXfer+0x17e2>
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d125      	bne.n	80066ee <USB_EPStartXfer+0x17e2>
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	011a      	lsls	r2, r3, #4
 80066cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066ec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 81fe 	beq.w	8006afc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006720:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <USB_EPStartXfer+0x182c>
 800672c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10d      	bne.n	8006754 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006738:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800673c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 81db 	bne.w	8006afc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006746:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 81d4 	bne.w	8006afc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
 80067b0:	e1a4      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	78db      	ldrb	r3, [r3, #3]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	f040 819a 	bne.w	8006af8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80067c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d917      	bls.n	8006810 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80067e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	619a      	str	r2, [r3, #24]
 800680e:	e00e      	b.n	800682e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800682e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d178      	bne.n	8006930 <USB_EPStartXfer+0x1a24>
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800684c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006862:	4413      	add	r3, r2
 8006864:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800687a:	4413      	add	r3, r2
 800687c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006880:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d116      	bne.n	80068ba <USB_EPStartXfer+0x19ae>
 800688c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006898:	b29a      	uxth	r2, r3
 800689a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	e06b      	b.n	8006992 <USB_EPStartXfer+0x1a86>
 80068ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068be:	2b3e      	cmp	r3, #62	; 0x3e
 80068c0:	d818      	bhi.n	80068f4 <USB_EPStartXfer+0x19e8>
 80068c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <USB_EPStartXfer+0x19d6>
 80068d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068dc:	3301      	adds	r3, #1
 80068de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	e04e      	b.n	8006992 <USB_EPStartXfer+0x1a86>
 80068f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <USB_EPStartXfer+0x1a08>
 800690a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690e:	3b01      	subs	r3, #1
 8006910:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006918:	b29b      	uxth	r3, r3
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	b29b      	uxth	r3, r3
 800691e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006926:	b29a      	uxth	r2, r3
 8006928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	e030      	b.n	8006992 <USB_EPStartXfer+0x1a86>
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d128      	bne.n	8006992 <USB_EPStartXfer+0x1a86>
 8006940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695c:	b29b      	uxth	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006964:	4413      	add	r3, r2
 8006966:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800696a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	011a      	lsls	r2, r3, #4
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697c:	4413      	add	r3, r2
 800697e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006982:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d178      	bne.n	8006aa2 <USB_EPStartXfer+0x1b96>
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d4:	4413      	add	r3, r2
 80069d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	011a      	lsls	r2, r3, #4
 80069e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ec:	4413      	add	r3, r2
 80069ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d116      	bne.n	8006a2c <USB_EPStartXfer+0x1b20>
 80069fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e067      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
 8006a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a30:	2b3e      	cmp	r3, #62	; 0x3e
 8006a32:	d818      	bhi.n	8006a66 <USB_EPStartXfer+0x1b5a>
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <USB_EPStartXfer+0x1b48>
 8006a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a4e:	3301      	adds	r3, #1
 8006a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e04a      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
 8006a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <USB_EPStartXfer+0x1b7a>
 8006a7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a80:	3b01      	subs	r3, #1
 8006a82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e02c      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d124      	bne.n	8006afc <USB_EPStartXfer+0x1bf0>
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac8:	4413      	add	r3, r2
 8006aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	011a      	lsls	r2, r3, #4
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ae6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e001      	b.n	8006afc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e03a      	b.n	8006b72 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b32:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d020      	beq.n	8006bd0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba4:	81bb      	strh	r3, [r7, #12]
 8006ba6:	89bb      	ldrh	r3, [r7, #12]
 8006ba8:	f083 0310 	eor.w	r3, r3, #16
 8006bac:	81bb      	strh	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	89bb      	ldrh	r3, [r7, #12]
 8006bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8013      	strh	r3, [r2, #0]
 8006bce:	e01f      	b.n	8006c10 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	81fb      	strh	r3, [r7, #14]
 8006be8:	89fb      	ldrh	r3, [r7, #14]
 8006bea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bee:	81fb      	strh	r3, [r7, #14]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	89fb      	ldrh	r3, [r7, #14]
 8006bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr

08006c1c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	7b1b      	ldrb	r3, [r3, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f040 809d 	bne.w	8006d6a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d04c      	beq.n	8006cd2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	823b      	strh	r3, [r7, #16]
 8006c46:	8a3b      	ldrh	r3, [r7, #16]
 8006c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01b      	beq.n	8006c88 <USB_EPClearStall+0x6c>
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c66:	81fb      	strh	r3, [r7, #14]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	441a      	add	r2, r3
 8006c72:	89fb      	ldrh	r3, [r7, #14]
 8006c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	78db      	ldrb	r3, [r3, #3]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d06c      	beq.n	8006d6a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca6:	81bb      	strh	r3, [r7, #12]
 8006ca8:	89bb      	ldrh	r3, [r7, #12]
 8006caa:	f083 0320 	eor.w	r3, r3, #32
 8006cae:	81bb      	strh	r3, [r7, #12]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	441a      	add	r2, r3
 8006cba:	89bb      	ldrh	r3, [r7, #12]
 8006cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	8013      	strh	r3, [r2, #0]
 8006cd0:	e04b      	b.n	8006d6a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	82fb      	strh	r3, [r7, #22]
 8006ce0:	8afb      	ldrh	r3, [r7, #22]
 8006ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01b      	beq.n	8006d22 <USB_EPClearStall+0x106>
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	82bb      	strh	r3, [r7, #20]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	441a      	add	r2, r3
 8006d0c:	8abb      	ldrh	r3, [r7, #20]
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d38:	827b      	strh	r3, [r7, #18]
 8006d3a:	8a7b      	ldrh	r3, [r7, #18]
 8006d3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d40:	827b      	strh	r3, [r7, #18]
 8006d42:	8a7b      	ldrh	r3, [r7, #18]
 8006d44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d48:	827b      	strh	r3, [r7, #18]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	8a7b      	ldrh	r3, [r7, #18]
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d103      	bne.n	8006d90 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2280      	movs	r2, #128	; 0x80
 8006d8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b08d      	sub	sp, #52	; 0x34
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	4611      	mov	r1, r2
 8006dda:	461a      	mov	r2, r3
 8006ddc:	460b      	mov	r3, r1
 8006dde:	80fb      	strh	r3, [r7, #6]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006de4:	88bb      	ldrh	r3, [r7, #4]
 8006de6:	3301      	adds	r3, #1
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	005a      	lsls	r2, r3, #1
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e06:	e01e      	b.n	8006e46 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	3301      	adds	r3, #1
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	3302      	adds	r3, #2
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	3302      	adds	r3, #2
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	3b01      	subs	r3, #1
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1dd      	bne.n	8006e08 <USB_WritePMA+0x3a>
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	3734      	adds	r7, #52	; 0x34
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b08b      	sub	sp, #44	; 0x2c
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4611      	mov	r1, r2
 8006e64:	461a      	mov	r2, r3
 8006e66:	460b      	mov	r3, r1
 8006e68:	80fb      	strh	r3, [r7, #6]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006e6e:	88bb      	ldrh	r3, [r7, #4]
 8006e70:	085b      	lsrs	r3, r3, #1
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	005a      	lsls	r2, r3, #1
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e90:	e01b      	b.n	8006eca <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	0a1b      	lsrs	r3, r3, #8
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	3302      	adds	r3, #2
 8006ec2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e0      	bne.n	8006e92 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ed0:	88bb      	ldrh	r3, [r7, #4]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	701a      	strb	r2, [r3, #0]
  }
}
 8006eec:	bf00      	nop
 8006eee:	372c      	adds	r7, #44	; 0x2c
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr

08006ef6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7c1b      	ldrb	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d115      	bne.n	8006f3a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f12:	2202      	movs	r2, #2
 8006f14:	2181      	movs	r1, #129	; 0x81
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f002 fee1 	bl	8009cde <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f26:	2202      	movs	r2, #2
 8006f28:	2101      	movs	r1, #1
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f002 fed7 	bl	8009cde <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006f38:	e012      	b.n	8006f60 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f3a:	2340      	movs	r3, #64	; 0x40
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	2181      	movs	r1, #129	; 0x81
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f002 fecc 	bl	8009cde <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	2202      	movs	r2, #2
 8006f50:	2101      	movs	r1, #1
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f002 fec3 	bl	8009cde <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f60:	2308      	movs	r3, #8
 8006f62:	2203      	movs	r2, #3
 8006f64:	2182      	movs	r1, #130	; 0x82
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f002 feb9 	bl	8009cde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006f72:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f76:	f002 ffd9 	bl	8009f2c <USBD_static_malloc>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e026      	b.n	8006fe0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f98:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7c1b      	ldrb	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d109      	bne.n	8006fd0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f002 ff79 	bl	8009ec0 <USBD_LL_PrepareReceive>
 8006fce:	e007      	b.n	8006fe0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	2101      	movs	r1, #1
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f002 ff70 	bl	8009ec0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ffa:	2181      	movs	r1, #129	; 0x81
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f002 fe94 	bl	8009d2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007008:	2101      	movs	r1, #1
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f002 fe8d 	bl	8009d2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007018:	2182      	movs	r1, #130	; 0x82
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f002 fe85 	bl	8009d2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007040:	4618      	mov	r0, r3
 8007042:	f002 ff7f 	bl	8009f44 <USBD_static_free>
    pdev->pClassData = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007068:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800707e:	2b00      	cmp	r3, #0
 8007080:	d039      	beq.n	80070f6 <USBD_CDC_Setup+0x9e>
 8007082:	2b20      	cmp	r3, #32
 8007084:	d17f      	bne.n	8007186 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	88db      	ldrh	r3, [r3, #6]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d029      	beq.n	80070e2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	b25b      	sxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	da11      	bge.n	80070bc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80070a4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	88d2      	ldrh	r2, [r2, #6]
 80070aa:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070ac:	6939      	ldr	r1, [r7, #16]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88db      	ldrh	r3, [r3, #6]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f994 	bl	80083e2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80070ba:	e06b      	b.n	8007194 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	785a      	ldrb	r2, [r3, #1]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	88db      	ldrh	r3, [r3, #6]
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070d2:	6939      	ldr	r1, [r7, #16]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	88db      	ldrh	r3, [r3, #6]
 80070d8:	461a      	mov	r2, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 f9af 	bl	800843e <USBD_CtlPrepareRx>
    break;
 80070e0:	e058      	b.n	8007194 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	7850      	ldrb	r0, [r2, #1]
 80070ee:	2200      	movs	r2, #0
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	4798      	blx	r3
    break;
 80070f4:	e04e      	b.n	8007194 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b0b      	cmp	r3, #11
 80070fc:	d02e      	beq.n	800715c <USBD_CDC_Setup+0x104>
 80070fe:	2b0b      	cmp	r3, #11
 8007100:	dc38      	bgt.n	8007174 <USBD_CDC_Setup+0x11c>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <USBD_CDC_Setup+0xb4>
 8007106:	2b0a      	cmp	r3, #10
 8007108:	d014      	beq.n	8007134 <USBD_CDC_Setup+0xdc>
 800710a:	e033      	b.n	8007174 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007112:	2b03      	cmp	r3, #3
 8007114:	d107      	bne.n	8007126 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007116:	f107 030c 	add.w	r3, r7, #12
 800711a:	2202      	movs	r2, #2
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 f95f 	bl	80083e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007124:	e02e      	b.n	8007184 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f8f0 	bl	800830e <USBD_CtlError>
			  ret = USBD_FAIL;
 800712e:	2302      	movs	r3, #2
 8007130:	75fb      	strb	r3, [r7, #23]
      break;
 8007132:	e027      	b.n	8007184 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800713a:	2b03      	cmp	r3, #3
 800713c:	d107      	bne.n	800714e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800713e:	f107 030f 	add.w	r3, r7, #15
 8007142:	2201      	movs	r2, #1
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 f94b 	bl	80083e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800714c:	e01a      	b.n	8007184 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f8dc 	bl	800830e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007156:	2302      	movs	r3, #2
 8007158:	75fb      	strb	r3, [r7, #23]
      break;
 800715a:	e013      	b.n	8007184 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007162:	2b03      	cmp	r3, #3
 8007164:	d00d      	beq.n	8007182 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f8d0 	bl	800830e <USBD_CtlError>
			  ret = USBD_FAIL;
 800716e:	2302      	movs	r3, #2
 8007170:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007172:	e006      	b.n	8007182 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 f8c9 	bl	800830e <USBD_CtlError>
      ret = USBD_FAIL;
 800717c:	2302      	movs	r3, #2
 800717e:	75fb      	strb	r3, [r7, #23]
      break;
 8007180:	e000      	b.n	8007184 <USBD_CDC_Setup+0x12c>
      break;
 8007182:	bf00      	nop
    }
    break;
 8007184:	e006      	b.n	8007194 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 f8c0 	bl	800830e <USBD_CtlError>
    ret = USBD_FAIL;
 800718e:	2302      	movs	r3, #2
 8007190:	75fb      	strb	r3, [r7, #23]
    break;
 8007192:	bf00      	nop
  }

  return ret;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071b0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80071b8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d03a      	beq.n	800723a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	331c      	adds	r3, #28
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d029      	beq.n	800722e <USBD_CDC_DataIn+0x90>
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	331c      	adds	r3, #28
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	78f9      	ldrb	r1, [r7, #3]
 80071ee:	68b8      	ldr	r0, [r7, #8]
 80071f0:	460b      	mov	r3, r1
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	4403      	add	r3, r0
 80071fa:	3338      	adds	r3, #56	; 0x38
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d110      	bne.n	800722e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800720c:	78fa      	ldrb	r2, [r7, #3]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	331c      	adds	r3, #28
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007220:	78f9      	ldrb	r1, [r7, #3]
 8007222:	2300      	movs	r3, #0
 8007224:	2200      	movs	r2, #0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f002 fe27 	bl	8009e7a <USBD_LL_Transmit>
 800722c:	e003      	b.n	8007236 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e000      	b.n	800723c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800723a:	2302      	movs	r3, #2
  }
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007256:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f002 fe52 	bl	8009f06 <USBD_LL_GetRxDataSize>
 8007262:	4602      	mov	r2, r0
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00d      	beq.n	8007290 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007288:	4611      	mov	r1, r2
 800728a:	4798      	blx	r3

    return USBD_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	e000      	b.n	8007292 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007290:	2302      	movs	r3, #2
  }
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072a8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d015      	beq.n	80072e0 <USBD_CDC_EP0_RxReady+0x46>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072ba:	2bff      	cmp	r3, #255	; 0xff
 80072bc:	d010      	beq.n	80072e0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80072cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072d4:	b292      	uxth	r2, r2
 80072d6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	22ff      	movs	r2, #255	; 0xff
 80072dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2243      	movs	r2, #67	; 0x43
 80072f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80072fa:	4b03      	ldr	r3, [pc, #12]	; (8007308 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	200001f8 	.word	0x200001f8

0800730c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2243      	movs	r2, #67	; 0x43
 8007318:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800731a:	4b03      	ldr	r3, [pc, #12]	; (8007328 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	200001b4 	.word	0x200001b4

0800732c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2243      	movs	r2, #67	; 0x43
 8007338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800733a:	4b03      	ldr	r3, [pc, #12]	; (8007348 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	2000023c 	.word	0x2000023c

0800734c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	220a      	movs	r2, #10
 8007358:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800735a:	4b03      	ldr	r3, [pc, #12]	; (8007368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000170 	.word	0x20000170

0800736c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr

08007398 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4613      	mov	r3, r2
 80073a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073b6:	88fa      	ldrh	r2, [r7, #6]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr

080073f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073fe:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01c      	beq.n	8007444 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007410:	2b00      	cmp	r3, #0
 8007412:	d115      	bne.n	8007440 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007432:	b29b      	uxth	r3, r3
 8007434:	2181      	movs	r1, #129	; 0x81
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f002 fd1f 	bl	8009e7a <USBD_LL_Transmit>

      return USBD_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	e002      	b.n	8007446 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007440:	2301      	movs	r3, #1
 8007442:	e000      	b.n	8007446 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007444:	2302      	movs	r3, #2
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800745c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007464:	2b00      	cmp	r3, #0
 8007466:	d017      	beq.n	8007498 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7c1b      	ldrb	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800747a:	2101      	movs	r1, #1
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f002 fd1f 	bl	8009ec0 <USBD_LL_PrepareReceive>
 8007482:	e007      	b.n	8007494 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	2101      	movs	r1, #1
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f002 fd16 	bl	8009ec0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	e000      	b.n	800749a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007498:	2302      	movs	r3, #2
  }
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	4613      	mov	r3, r2
 80074ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80074b6:	2302      	movs	r3, #2
 80074b8:	e01a      	b.n	80074f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	79fa      	ldrb	r2, [r7, #7]
 80074e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f002 fb83 	bl	8009bf4 <USBD_LL_Init>

  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d006      	beq.n	800751a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
 8007518:	e001      	b.n	800751e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800751a:	2302      	movs	r3, #2
 800751c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr

0800752a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f002 fbb8 	bl	8009ca8 <USBD_LL_Start>

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr

08007556 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007562:	2302      	movs	r3, #2
 8007564:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	78fa      	ldrb	r2, [r7, #3]
 800757a:	4611      	mov	r1, r2
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fe62 	bl	8008296 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80075e0:	461a      	mov	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d016      	beq.n	8007624 <USBD_LL_SetupStage+0x6a>
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d81c      	bhi.n	8007634 <USBD_LL_SetupStage+0x7a>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <USBD_LL_SetupStage+0x4a>
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d008      	beq.n	8007614 <USBD_LL_SetupStage+0x5a>
 8007602:	e017      	b.n	8007634 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f9c5 	bl	800799c <USBD_StdDevReq>
    break;
 8007612:	e01a      	b.n	800764a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fa27 	bl	8007a70 <USBD_StdItfReq>
    break;
 8007622:	e012      	b.n	800764a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fa67 	bl	8007b00 <USBD_StdEPReq>
    break;
 8007632:	e00a      	b.n	800764a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800763a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800763e:	b2db      	uxtb	r3, r3
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f002 fb90 	bl	8009d68 <USBD_LL_StallEP>
    break;
 8007648:	bf00      	nop
  }

  return USBD_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	460b      	mov	r3, r1
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007662:	7afb      	ldrb	r3, [r7, #11]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d14b      	bne.n	8007700 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800766e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007676:	2b03      	cmp	r3, #3
 8007678:	d134      	bne.n	80076e4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	429a      	cmp	r2, r3
 8007684:	d919      	bls.n	80076ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800769c:	429a      	cmp	r2, r3
 800769e:	d203      	bcs.n	80076a8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	e002      	b.n	80076ae <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fee1 	bl	800847a <USBD_CtlContinueRx>
 80076b8:	e038      	b.n	800772c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d105      	bne.n	80076dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fede 	bl	800849e <USBD_CtlSendStatus>
 80076e2:	e023      	b.n	800772c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	d11e      	bne.n	800772c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80076f6:	2100      	movs	r1, #0
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f002 fb35 	bl	8009d68 <USBD_LL_StallEP>
 80076fe:	e015      	b.n	800772c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007712:	2b03      	cmp	r3, #3
 8007714:	d108      	bne.n	8007728 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	7afa      	ldrb	r2, [r7, #11]
 8007720:	4611      	mov	r1, r2
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	4798      	blx	r3
 8007726:	e001      	b.n	800772c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007728:	2302      	movs	r3, #2
 800772a:	e000      	b.n	800772e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b086      	sub	sp, #24
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	460b      	mov	r3, r1
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d17f      	bne.n	800784a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3314      	adds	r3, #20
 800774e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007756:	2b02      	cmp	r3, #2
 8007758:	d15c      	bne.n	8007814 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	429a      	cmp	r2, r3
 8007764:	d915      	bls.n	8007792 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	b29b      	uxth	r3, r3
 800777a:	461a      	mov	r2, r3
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fe4b 	bl	800841a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007784:	2300      	movs	r3, #0
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f002 fb98 	bl	8009ec0 <USBD_LL_PrepareReceive>
 8007790:	e04e      	b.n	8007830 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	6912      	ldr	r2, [r2, #16]
 800779a:	fbb3 f1f2 	udiv	r1, r3, r2
 800779e:	fb01 f202 	mul.w	r2, r1, r2
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d11c      	bne.n	80077e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d316      	bcc.n	80077e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80077be:	429a      	cmp	r2, r3
 80077c0:	d20f      	bcs.n	80077e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077c2:	2200      	movs	r2, #0
 80077c4:	2100      	movs	r1, #0
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 fe27 	bl	800841a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80077d4:	2300      	movs	r3, #0
 80077d6:	2200      	movs	r2, #0
 80077d8:	2100      	movs	r1, #0
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f002 fb70 	bl	8009ec0 <USBD_LL_PrepareReceive>
 80077e0:	e026      	b.n	8007830 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d105      	bne.n	8007804 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f002 faae 	bl	8009d68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fe59 	bl	80084c4 <USBD_CtlReceiveStatus>
 8007812:	e00d      	b.n	8007830 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800781a:	2b04      	cmp	r3, #4
 800781c:	d004      	beq.n	8007828 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f002 fa9c 	bl	8009d68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007836:	2b01      	cmp	r3, #1
 8007838:	d11d      	bne.n	8007876 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fe81 	bl	8007542 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007848:	e015      	b.n	8007876 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800785c:	2b03      	cmp	r3, #3
 800785e:	d108      	bne.n	8007872 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	7afa      	ldrb	r2, [r7, #11]
 800786a:	4611      	mov	r1, r2
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	4798      	blx	r3
 8007870:	e001      	b.n	8007876 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007872:	2302      	movs	r3, #2
 8007874:	e000      	b.n	8007878 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007888:	2340      	movs	r3, #64	; 0x40
 800788a:	2200      	movs	r2, #0
 800788c:	2100      	movs	r1, #0
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 fa25 	bl	8009cde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2240      	movs	r2, #64	; 0x40
 80078a0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078a4:	2340      	movs	r3, #64	; 0x40
 80078a6:	2200      	movs	r2, #0
 80078a8:	2180      	movs	r1, #128	; 0x80
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f002 fa17 	bl	8009cde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2240      	movs	r2, #64	; 0x40
 80078ba:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d009      	beq.n	80078f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6852      	ldr	r2, [r2, #4]
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	4611      	mov	r1, r2
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
  }

  return USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	78fa      	ldrb	r2, [r7, #3]
 8007912:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr

08007920 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2204      	movs	r2, #4
 8007938:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr

08007968 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007976:	2b03      	cmp	r3, #3
 8007978:	d10b      	bne.n	8007992 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d005      	beq.n	80079c2 <USBD_StdDevReq+0x26>
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d84f      	bhi.n	8007a5a <USBD_StdDevReq+0xbe>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <USBD_StdDevReq+0x36>
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d14b      	bne.n	8007a5a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
    break;
 80079d0:	e048      	b.n	8007a64 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b09      	cmp	r3, #9
 80079d8:	d839      	bhi.n	8007a4e <USBD_StdDevReq+0xb2>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <USBD_StdDevReq+0x44>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a31 	.word	0x08007a31
 80079e4:	08007a45 	.word	0x08007a45
 80079e8:	08007a4f 	.word	0x08007a4f
 80079ec:	08007a3b 	.word	0x08007a3b
 80079f0:	08007a4f 	.word	0x08007a4f
 80079f4:	08007a13 	.word	0x08007a13
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a4f 	.word	0x08007a4f
 8007a00:	08007a27 	.word	0x08007a27
 8007a04:	08007a1d 	.word	0x08007a1d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f9da 	bl	8007dc4 <USBD_GetDescriptor>
      break;
 8007a10:	e022      	b.n	8007a58 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 facf 	bl	8007fb8 <USBD_SetAddress>
      break;
 8007a1a:	e01d      	b.n	8007a58 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fb0e 	bl	8008040 <USBD_SetConfig>
      break;
 8007a24:	e018      	b.n	8007a58 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fb97 	bl	800815c <USBD_GetConfig>
      break;
 8007a2e:	e013      	b.n	8007a58 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fbc7 	bl	80081c6 <USBD_GetStatus>
      break;
 8007a38:	e00e      	b.n	8007a58 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fbf5 	bl	800822c <USBD_SetFeature>
      break;
 8007a42:	e009      	b.n	8007a58 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fc04 	bl	8008254 <USBD_ClrFeature>
      break;
 8007a4c:	e004      	b.n	8007a58 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc5c 	bl	800830e <USBD_CtlError>
      break;
 8007a56:	bf00      	nop
    }
    break;
 8007a58:	e004      	b.n	8007a64 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc56 	bl	800830e <USBD_CtlError>
    break;
 8007a62:	bf00      	nop
  }

  return ret;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop

08007a70 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d005      	beq.n	8007a96 <USBD_StdItfReq+0x26>
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	d82e      	bhi.n	8007aec <USBD_StdItfReq+0x7c>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <USBD_StdItfReq+0x26>
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d12a      	bne.n	8007aec <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d81d      	bhi.n	8007ade <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	889b      	ldrh	r3, [r3, #4]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d813      	bhi.n	8007ad4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	88db      	ldrh	r3, [r3, #6]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d110      	bne.n	8007ae8 <USBD_StdItfReq+0x78>
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10d      	bne.n	8007ae8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fce6 	bl	800849e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007ad2:	e009      	b.n	8007ae8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fc19 	bl	800830e <USBD_CtlError>
      break;
 8007adc:	e004      	b.n	8007ae8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc14 	bl	800830e <USBD_CtlError>
      break;
 8007ae6:	e000      	b.n	8007aea <USBD_StdItfReq+0x7a>
      break;
 8007ae8:	bf00      	nop
    }
    break;
 8007aea:	e004      	b.n	8007af6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fc0d 	bl	800830e <USBD_CtlError>
    break;
 8007af4:	bf00      	nop
  }

  return USBD_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	889b      	ldrh	r3, [r3, #4]
 8007b12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d007      	beq.n	8007b30 <USBD_StdEPReq+0x30>
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	f200 8144 	bhi.w	8007dae <USBD_StdEPReq+0x2ae>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <USBD_StdEPReq+0x40>
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	f040 813f 	bne.w	8007dae <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
    break;
 8007b3e:	e13b      	b.n	8007db8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d10a      	bne.n	8007b62 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	e12b      	b.n	8007dba <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d007      	beq.n	8007b7a <USBD_StdEPReq+0x7a>
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	f300 8119 	bgt.w	8007da2 <USBD_StdEPReq+0x2a2>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d072      	beq.n	8007c5a <USBD_StdEPReq+0x15a>
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d03a      	beq.n	8007bee <USBD_StdEPReq+0xee>
 8007b78:	e113      	b.n	8007da2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d002      	beq.n	8007b8a <USBD_StdEPReq+0x8a>
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d015      	beq.n	8007bb4 <USBD_StdEPReq+0xb4>
 8007b88:	e02b      	b.n	8007be2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00c      	beq.n	8007baa <USBD_StdEPReq+0xaa>
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d009      	beq.n	8007baa <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f002 f8e4 	bl	8009d68 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007ba0:	2180      	movs	r1, #128	; 0x80
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f002 f8e0 	bl	8009d68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ba8:	e020      	b.n	8007bec <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fbae 	bl	800830e <USBD_CtlError>
        break;
 8007bb2:	e01b      	b.n	8007bec <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10e      	bne.n	8007bda <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <USBD_StdEPReq+0xda>
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b80      	cmp	r3, #128	; 0x80
 8007bc6:	d008      	beq.n	8007bda <USBD_StdEPReq+0xda>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88db      	ldrh	r3, [r3, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f002 f8c7 	bl	8009d68 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fc5f 	bl	800849e <USBD_CtlSendStatus>

        break;
 8007be0:	e004      	b.n	8007bec <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fb92 	bl	800830e <USBD_CtlError>
        break;
 8007bea:	bf00      	nop
      }
      break;
 8007bec:	e0de      	b.n	8007dac <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d002      	beq.n	8007bfe <USBD_StdEPReq+0xfe>
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d015      	beq.n	8007c28 <USBD_StdEPReq+0x128>
 8007bfc:	e026      	b.n	8007c4c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <USBD_StdEPReq+0x11e>
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b80      	cmp	r3, #128	; 0x80
 8007c08:	d009      	beq.n	8007c1e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f002 f8aa 	bl	8009d68 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f002 f8a6 	bl	8009d68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007c1c:	e01c      	b.n	8007c58 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fb74 	bl	800830e <USBD_CtlError>
        break;
 8007c26:	e017      	b.n	8007c58 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	885b      	ldrh	r3, [r3, #2]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d112      	bne.n	8007c56 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f002 f8b1 	bl	8009da6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fc2a 	bl	800849e <USBD_CtlSendStatus>
        }
        break;
 8007c4a:	e004      	b.n	8007c56 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fb5d 	bl	800830e <USBD_CtlError>
        break;
 8007c54:	e000      	b.n	8007c58 <USBD_StdEPReq+0x158>
        break;
 8007c56:	bf00      	nop
      }
      break;
 8007c58:	e0a8      	b.n	8007dac <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d002      	beq.n	8007c6a <USBD_StdEPReq+0x16a>
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d031      	beq.n	8007ccc <USBD_StdEPReq+0x1cc>
 8007c68:	e095      	b.n	8007d96 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <USBD_StdEPReq+0x180>
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d004      	beq.n	8007c80 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb48 	bl	800830e <USBD_CtlError>
          break;
 8007c7e:	e08f      	b.n	8007da0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da0b      	bge.n	8007ca0 <USBD_StdEPReq+0x1a0>
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	3310      	adds	r3, #16
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	e00a      	b.n	8007cb6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb8c 	bl	80083e2 <USBD_CtlSendData>
          break;
 8007cca:	e069      	b.n	8007da0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	da11      	bge.n	8007cf8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	f003 020f 	and.w	r2, r3, #15
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d117      	bne.n	8007d1e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fb0c 	bl	800830e <USBD_CtlError>
            break;
 8007cf6:	e053      	b.n	8007da0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	f003 020f 	and.w	r2, r3, #15
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 faf9 	bl	800830e <USBD_CtlError>
            break;
 8007d1c:	e040      	b.n	8007da0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	da0b      	bge.n	8007d3e <USBD_StdEPReq+0x23e>
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	3310      	adds	r3, #16
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	4413      	add	r3, r2
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	e00a      	b.n	8007d54 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <USBD_StdEPReq+0x262>
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	2b80      	cmp	r3, #128	; 0x80
 8007d60:	d103      	bne.n	8007d6a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e00e      	b.n	8007d88 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f002 f838 	bl	8009de4 <USBD_LL_IsStallEP>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	e002      	b.n	8007d88 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fb27 	bl	80083e2 <USBD_CtlSendData>
          break;
 8007d94:	e004      	b.n	8007da0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fab8 	bl	800830e <USBD_CtlError>
        break;
 8007d9e:	bf00      	nop
      }
      break;
 8007da0:	e004      	b.n	8007dac <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fab2 	bl	800830e <USBD_CtlError>
      break;
 8007daa:	bf00      	nop
    }
    break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 faac 	bl	800830e <USBD_CtlError>
    break;
 8007db6:	bf00      	nop
  }

  return ret;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	885b      	ldrh	r3, [r3, #2]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	2b06      	cmp	r3, #6
 8007dda:	f200 80c9 	bhi.w	8007f70 <USBD_GetDescriptor+0x1ac>
 8007dde:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <USBD_GetDescriptor+0x20>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007e19 	.word	0x08007e19
 8007dec:	08007e59 	.word	0x08007e59
 8007df0:	08007f71 	.word	0x08007f71
 8007df4:	08007f71 	.word	0x08007f71
 8007df8:	08007f1d 	.word	0x08007f1d
 8007dfc:	08007f43 	.word	0x08007f43
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 010a 	add.w	r1, r7, #10
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
    break;
 8007e16:	e0b0      	b.n	8007f7a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	7c1b      	ldrb	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10d      	bne.n	8007e3c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	f107 020a 	add.w	r2, r7, #10
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3301      	adds	r3, #1
 8007e36:	2202      	movs	r2, #2
 8007e38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007e3a:	e09e      	b.n	8007f7a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	f107 020a 	add.w	r2, r7, #10
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	2202      	movs	r2, #2
 8007e54:	701a      	strb	r2, [r3, #0]
    break;
 8007e56:	e090      	b.n	8007f7a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	885b      	ldrh	r3, [r3, #2]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	d856      	bhi.n	8007f10 <USBD_GetDescriptor+0x14c>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <USBD_GetDescriptor+0xa4>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e81 	.word	0x08007e81
 8007e6c:	08007e99 	.word	0x08007e99
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	08007ee1 	.word	0x08007ee1
 8007e7c:	08007ef9 	.word	0x08007ef9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 010a 	add.w	r1, r7, #10
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
      break;
 8007e96:	e040      	b.n	8007f1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 010a 	add.w	r1, r7, #10
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
      break;
 8007eae:	e034      	b.n	8007f1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	7c12      	ldrb	r2, [r2, #16]
 8007ebc:	f107 010a 	add.w	r1, r7, #10
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4798      	blx	r3
 8007ec4:	60f8      	str	r0, [r7, #12]
      break;
 8007ec6:	e028      	b.n	8007f1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
 8007ed4:	f107 010a 	add.w	r1, r7, #10
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
      break;
 8007ede:	e01c      	b.n	8007f1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7c12      	ldrb	r2, [r2, #16]
 8007eec:	f107 010a 	add.w	r1, r7, #10
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]
      break;
 8007ef6:	e010      	b.n	8007f1a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	7c12      	ldrb	r2, [r2, #16]
 8007f04:	f107 010a 	add.w	r1, r7, #10
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4798      	blx	r3
 8007f0c:	60f8      	str	r0, [r7, #12]
      break;
 8007f0e:	e004      	b.n	8007f1a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f9fb 	bl	800830e <USBD_CtlError>
      return;
 8007f18:	e04b      	b.n	8007fb2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007f1a:	e02e      	b.n	8007f7a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	7c1b      	ldrb	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2c:	f107 020a 	add.w	r2, r7, #10
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
      break;
 8007f36:	e020      	b.n	8007f7a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9e7 	bl	800830e <USBD_CtlError>
      return;
 8007f40:	e037      	b.n	8007fb2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7c1b      	ldrb	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10d      	bne.n	8007f66 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	f107 020a 	add.w	r2, r7, #10
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
 8007f5a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	2207      	movs	r2, #7
 8007f62:	701a      	strb	r2, [r3, #0]
      break;
 8007f64:	e009      	b.n	8007f7a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9d0 	bl	800830e <USBD_CtlError>
      return;
 8007f6e:	e020      	b.n	8007fb2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f9cb 	bl	800830e <USBD_CtlError>
    return;
 8007f78:	e01b      	b.n	8007fb2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007f7a:	897b      	ldrh	r3, [r7, #10]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <USBD_GetDescriptor+0x1e0>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	88db      	ldrh	r3, [r3, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00d      	beq.n	8007fa4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88da      	ldrh	r2, [r3, #6]
 8007f8c:	897b      	ldrh	r3, [r7, #10]
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	bf28      	it	cs
 8007f92:	4613      	movcs	r3, r2
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007f98:	897b      	ldrh	r3, [r7, #10]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68f9      	ldr	r1, [r7, #12]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa1f 	bl	80083e2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	88db      	ldrh	r3, [r3, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d102      	bne.n	8007fb2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa76 	bl	800849e <USBD_CtlSendStatus>
  }
}
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	889b      	ldrh	r3, [r3, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d130      	bne.n	800802c <USBD_SetAddress+0x74>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	88db      	ldrh	r3, [r3, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d12c      	bne.n	800802c <USBD_SetAddress+0x74>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8007fd8:	d828      	bhi.n	800802c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	885b      	ldrh	r3, [r3, #2]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d104      	bne.n	8007ffa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f98b 	bl	800830e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff8:	e01d      	b.n	8008036 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	7bfa      	ldrb	r2, [r7, #15]
 8007ffe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 ff18 	bl	8009e3c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa46 	bl	800849e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008020:	e009      	b.n	8008036 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802a:	e004      	b.n	8008036 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f96d 	bl	800830e <USBD_CtlError>
  }
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	885b      	ldrh	r3, [r3, #2]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	4b41      	ldr	r3, [pc, #260]	; (8008158 <USBD_SetConfig+0x118>)
 8008052:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008054:	4b40      	ldr	r3, [pc, #256]	; (8008158 <USBD_SetConfig+0x118>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d904      	bls.n	8008066 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f955 	bl	800830e <USBD_CtlError>
 8008064:	e075      	b.n	8008152 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800806c:	2b02      	cmp	r3, #2
 800806e:	d002      	beq.n	8008076 <USBD_SetConfig+0x36>
 8008070:	2b03      	cmp	r3, #3
 8008072:	d023      	beq.n	80080bc <USBD_SetConfig+0x7c>
 8008074:	e062      	b.n	800813c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008076:	4b38      	ldr	r3, [pc, #224]	; (8008158 <USBD_SetConfig+0x118>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01a      	beq.n	80080b4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800807e:	4b36      	ldr	r3, [pc, #216]	; (8008158 <USBD_SetConfig+0x118>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2203      	movs	r2, #3
 800808c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008090:	4b31      	ldr	r3, [pc, #196]	; (8008158 <USBD_SetConfig+0x118>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fa5d 	bl	8007556 <USBD_SetClassConfig>
 800809c:	4603      	mov	r3, r0
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d104      	bne.n	80080ac <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f932 	bl	800830e <USBD_CtlError>
          return;
 80080aa:	e052      	b.n	8008152 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f9f6 	bl	800849e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80080b2:	e04e      	b.n	8008152 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9f2 	bl	800849e <USBD_CtlSendStatus>
      break;
 80080ba:	e04a      	b.n	8008152 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080bc:	4b26      	ldr	r3, [pc, #152]	; (8008158 <USBD_SetConfig+0x118>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d112      	bne.n	80080ea <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80080cc:	4b22      	ldr	r3, [pc, #136]	; (8008158 <USBD_SetConfig+0x118>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80080d6:	4b20      	ldr	r3, [pc, #128]	; (8008158 <USBD_SetConfig+0x118>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff fa59 	bl	8007594 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9db 	bl	800849e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80080e8:	e033      	b.n	8008152 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80080ea:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <USBD_SetConfig+0x118>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d01d      	beq.n	8008134 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fa47 	bl	8007594 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008106:	4b14      	ldr	r3, [pc, #80]	; (8008158 <USBD_SetConfig+0x118>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008110:	4b11      	ldr	r3, [pc, #68]	; (8008158 <USBD_SetConfig+0x118>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fa1d 	bl	8007556 <USBD_SetClassConfig>
 800811c:	4603      	mov	r3, r0
 800811e:	2b02      	cmp	r3, #2
 8008120:	d104      	bne.n	800812c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f8f2 	bl	800830e <USBD_CtlError>
          return;
 800812a:	e012      	b.n	8008152 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f9b6 	bl	800849e <USBD_CtlSendStatus>
      break;
 8008132:	e00e      	b.n	8008152 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f9b2 	bl	800849e <USBD_CtlSendStatus>
      break;
 800813a:	e00a      	b.n	8008152 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f8e5 	bl	800830e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008144:	4b04      	ldr	r3, [pc, #16]	; (8008158 <USBD_SetConfig+0x118>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff fa22 	bl	8007594 <USBD_ClrClassConfig>
      break;
 8008150:	bf00      	nop
    }
  }
}
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000498 	.word	0x20000498

0800815c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d004      	beq.n	8008178 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f8cc 	bl	800830e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008176:	e022      	b.n	80081be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800817e:	2b02      	cmp	r3, #2
 8008180:	dc02      	bgt.n	8008188 <USBD_GetConfig+0x2c>
 8008182:	2b00      	cmp	r3, #0
 8008184:	dc03      	bgt.n	800818e <USBD_GetConfig+0x32>
 8008186:	e015      	b.n	80081b4 <USBD_GetConfig+0x58>
 8008188:	2b03      	cmp	r3, #3
 800818a:	d00b      	beq.n	80081a4 <USBD_GetConfig+0x48>
 800818c:	e012      	b.n	80081b4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3308      	adds	r3, #8
 8008198:	2201      	movs	r2, #1
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f920 	bl	80083e2 <USBD_CtlSendData>
      break;
 80081a2:	e00c      	b.n	80081be <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3304      	adds	r3, #4
 80081a8:	2201      	movs	r2, #1
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f918 	bl	80083e2 <USBD_CtlSendData>
      break;
 80081b2:	e004      	b.n	80081be <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f8a9 	bl	800830e <USBD_CtlError>
      break;
 80081bc:	bf00      	nop
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80081d6:	3b01      	subs	r3, #1
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d81e      	bhi.n	800821a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	88db      	ldrh	r3, [r3, #6]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d004      	beq.n	80081ee <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f891 	bl	800830e <USBD_CtlError>
      break;
 80081ec:	e01a      	b.n	8008224 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f043 0202 	orr.w	r2, r3, #2
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	330c      	adds	r3, #12
 800820e:	2202      	movs	r2, #2
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8e5 	bl	80083e2 <USBD_CtlSendData>
    break;
 8008218:	e004      	b.n	8008224 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f876 	bl	800830e <USBD_CtlError>
    break;
 8008222:	bf00      	nop
  }
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	885b      	ldrh	r3, [r3, #2]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d106      	bne.n	800824c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f929 	bl	800849e <USBD_CtlSendStatus>
  }

}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008264:	3b01      	subs	r3, #1
 8008266:	2b02      	cmp	r3, #2
 8008268:	d80b      	bhi.n	8008282 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	885b      	ldrh	r3, [r3, #2]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d10c      	bne.n	800828c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f90f 	bl	800849e <USBD_CtlSendStatus>
    }
    break;
 8008280:	e004      	b.n	800828c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f842 	bl	800830e <USBD_CtlError>
    break;
 800828a:	e000      	b.n	800828e <USBD_ClrFeature+0x3a>
    break;
 800828c:	bf00      	nop
  }
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781a      	ldrb	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	785a      	ldrb	r2, [r3, #1]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	3302      	adds	r3, #2
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	3303      	adds	r3, #3
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	3304      	adds	r3, #4
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	3305      	adds	r3, #5
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	b29b      	uxth	r3, r3
 80082e0:	4413      	add	r3, r2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	3306      	adds	r3, #6
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	3307      	adds	r3, #7
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	4413      	add	r3, r2
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	80da      	strh	r2, [r3, #6]

}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008318:	2180      	movs	r1, #128	; 0x80
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fd24 	bl	8009d68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008320:	2100      	movs	r1, #0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fd20 	bl	8009d68 <USBD_LL_StallEP>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d032      	beq.n	80083ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f834 	bl	80083b4 <USBD_GetLen>
 800834c:	4603      	mov	r3, r0
 800834e:	3301      	adds	r3, #1
 8008350:	b29b      	uxth	r3, r3
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	75fa      	strb	r2, [r7, #23]
 8008360:	461a      	mov	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	7812      	ldrb	r2, [r2, #0]
 800836a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	75fa      	strb	r2, [r7, #23]
 8008372:	461a      	mov	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4413      	add	r3, r2
 8008378:	2203      	movs	r2, #3
 800837a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800837c:	e012      	b.n	80083a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	60fa      	str	r2, [r7, #12]
 8008384:	7dfa      	ldrb	r2, [r7, #23]
 8008386:	1c51      	adds	r1, r2, #1
 8008388:	75f9      	strb	r1, [r7, #23]
 800838a:	4611      	mov	r1, r2
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	440a      	add	r2, r1
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	75fa      	strb	r2, [r7, #23]
 800839a:	461a      	mov	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4413      	add	r3, r2
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e8      	bne.n	800837e <USBD_GetString+0x4e>
    }
  }
}
 80083ac:	bf00      	nop
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80083c0:	e005      	b.n	80083ce <USBD_GetLen+0x1a>
    {
        len++;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	3301      	adds	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3301      	adds	r3, #1
 80083cc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f5      	bne.n	80083c2 <USBD_GetLen+0xe>
    }

    return len;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	4613      	mov	r3, r2
 80083ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80083f8:	88fa      	ldrh	r2, [r7, #6]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80083fe:	88fa      	ldrh	r2, [r7, #6]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008404:	88fb      	ldrh	r3, [r7, #6]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	2100      	movs	r1, #0
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f001 fd35 	bl	8009e7a <USBD_LL_Transmit>

  return USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	2100      	movs	r1, #0
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f001 fd23 	bl	8009e7a <USBD_LL_Transmit>

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	4613      	mov	r3, r2
 800844a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2203      	movs	r2, #3
 8008450:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008454:	88fa      	ldrh	r2, [r7, #6]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800845c:	88fa      	ldrh	r2, [r7, #6]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	2100      	movs	r1, #0
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f001 fd28 	bl	8009ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	4613      	mov	r3, r2
 8008486:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008488:	88fb      	ldrh	r3, [r7, #6]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	2100      	movs	r1, #0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f001 fd16 	bl	8009ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2204      	movs	r2, #4
 80084aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084ae:	2300      	movs	r3, #0
 80084b0:	2200      	movs	r2, #0
 80084b2:	2100      	movs	r1, #0
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fce0 	bl	8009e7a <USBD_LL_Transmit>

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2205      	movs	r2, #5
 80084d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80084d4:	2300      	movs	r3, #0
 80084d6:	2200      	movs	r2, #0
 80084d8:	2100      	movs	r1, #0
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 fcf0 	bl	8009ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084f0:	2200      	movs	r2, #0
 80084f2:	4912      	ldr	r1, [pc, #72]	; (800853c <MX_USB_DEVICE_Init+0x50>)
 80084f4:	4812      	ldr	r0, [pc, #72]	; (8008540 <MX_USB_DEVICE_Init+0x54>)
 80084f6:	f7fe ffd4 	bl	80074a2 <USBD_Init>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008500:	f7f8 fbf0 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008504:	490f      	ldr	r1, [pc, #60]	; (8008544 <MX_USB_DEVICE_Init+0x58>)
 8008506:	480e      	ldr	r0, [pc, #56]	; (8008540 <MX_USB_DEVICE_Init+0x54>)
 8008508:	f7fe fff6 	bl	80074f8 <USBD_RegisterClass>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008512:	f7f8 fbe7 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008516:	490c      	ldr	r1, [pc, #48]	; (8008548 <MX_USB_DEVICE_Init+0x5c>)
 8008518:	4809      	ldr	r0, [pc, #36]	; (8008540 <MX_USB_DEVICE_Init+0x54>)
 800851a:	f7fe ff27 	bl	800736c <USBD_CDC_RegisterInterface>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008524:	f7f8 fbde 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008528:	4805      	ldr	r0, [pc, #20]	; (8008540 <MX_USB_DEVICE_Init+0x54>)
 800852a:	f7fe fffe 	bl	800752a <USBD_Start>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008534:	f7f8 fbd6 	bl	8000ce4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008538:	bf00      	nop
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000290 	.word	0x20000290
 8008540:	2000049c 	.word	0x2000049c
 8008544:	2000017c 	.word	0x2000017c
 8008548:	20000280 	.word	0x20000280

0800854c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008550:	2200      	movs	r2, #0
 8008552:	4905      	ldr	r1, [pc, #20]	; (8008568 <CDC_Init_FS+0x1c>)
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <CDC_Init_FS+0x20>)
 8008556:	f7fe ff1f 	bl	8007398 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800855a:	4905      	ldr	r1, [pc, #20]	; (8008570 <CDC_Init_FS+0x24>)
 800855c:	4803      	ldr	r0, [pc, #12]	; (800856c <CDC_Init_FS+0x20>)
 800855e:	f7fe ff34 	bl	80073ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008562:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008564:	4618      	mov	r0, r3
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20001710 	.word	0x20001710
 800856c:	2000049c 	.word	0x2000049c
 8008570:	20000f10 	.word	0x20000f10

08008574 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008578:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800857a:	4618      	mov	r0, r3
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr
	...

08008584 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
 8008590:	4613      	mov	r3, r2
 8008592:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b23      	cmp	r3, #35	; 0x23
 8008598:	d84a      	bhi.n	8008630 <CDC_Control_FS+0xac>
 800859a:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <CDC_Control_FS+0x1c>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	08008631 	.word	0x08008631
 80085a4:	08008631 	.word	0x08008631
 80085a8:	08008631 	.word	0x08008631
 80085ac:	08008631 	.word	0x08008631
 80085b0:	08008631 	.word	0x08008631
 80085b4:	08008631 	.word	0x08008631
 80085b8:	08008631 	.word	0x08008631
 80085bc:	08008631 	.word	0x08008631
 80085c0:	08008631 	.word	0x08008631
 80085c4:	08008631 	.word	0x08008631
 80085c8:	08008631 	.word	0x08008631
 80085cc:	08008631 	.word	0x08008631
 80085d0:	08008631 	.word	0x08008631
 80085d4:	08008631 	.word	0x08008631
 80085d8:	08008631 	.word	0x08008631
 80085dc:	08008631 	.word	0x08008631
 80085e0:	08008631 	.word	0x08008631
 80085e4:	08008631 	.word	0x08008631
 80085e8:	08008631 	.word	0x08008631
 80085ec:	08008631 	.word	0x08008631
 80085f0:	08008631 	.word	0x08008631
 80085f4:	08008631 	.word	0x08008631
 80085f8:	08008631 	.word	0x08008631
 80085fc:	08008631 	.word	0x08008631
 8008600:	08008631 	.word	0x08008631
 8008604:	08008631 	.word	0x08008631
 8008608:	08008631 	.word	0x08008631
 800860c:	08008631 	.word	0x08008631
 8008610:	08008631 	.word	0x08008631
 8008614:	08008631 	.word	0x08008631
 8008618:	08008631 	.word	0x08008631
 800861c:	08008631 	.word	0x08008631
 8008620:	08008631 	.word	0x08008631
 8008624:	08008631 	.word	0x08008631
 8008628:	08008631 	.word	0x08008631
 800862c:	08008631 	.word	0x08008631
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008630:	bf00      	nop
  }

  return (USBD_OK);
 8008632:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop

08008640 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	e014      	b.n	800867a <CDC_Receive_FS+0x3a>
	{
	if (rx_buffer_len < MAX_RX_BUFFER_SIZE)
 8008650:	4b22      	ldr	r3, [pc, #136]	; (80086dc <CDC_Receive_FS+0x9c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008658:	d20c      	bcs.n	8008674 <CDC_Receive_FS+0x34>
	{
	  rx_buffer[rx_buffer_len] = Buf[i];
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	441a      	add	r2, r3
 8008660:	4b1e      	ldr	r3, [pc, #120]	; (80086dc <CDC_Receive_FS+0x9c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	7811      	ldrb	r1, [r2, #0]
 8008666:	4a1e      	ldr	r2, [pc, #120]	; (80086e0 <CDC_Receive_FS+0xa0>)
 8008668:	54d1      	strb	r1, [r2, r3]
	  rx_buffer_len = rx_buffer_len + 1;
 800866a:	4b1c      	ldr	r3, [pc, #112]	; (80086dc <CDC_Receive_FS+0x9c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3301      	adds	r3, #1
 8008670:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <CDC_Receive_FS+0x9c>)
 8008672:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3301      	adds	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	429a      	cmp	r2, r3
 8008682:	d8e5      	bhi.n	8008650 <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (rx_buffer_len > 0 && rx_buffer[rx_buffer_len - 1] == '\n')
 8008684:	4b15      	ldr	r3, [pc, #84]	; (80086dc <CDC_Receive_FS+0x9c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01b      	beq.n	80086c4 <CDC_Receive_FS+0x84>
 800868c:	4b13      	ldr	r3, [pc, #76]	; (80086dc <CDC_Receive_FS+0x9c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3b01      	subs	r3, #1
 8008692:	4a13      	ldr	r2, [pc, #76]	; (80086e0 <CDC_Receive_FS+0xa0>)
 8008694:	5cd3      	ldrb	r3, [r2, r3]
 8008696:	2b0a      	cmp	r3, #10
 8008698:	d114      	bne.n	80086c4 <CDC_Receive_FS+0x84>
	{
		// Process the received message
		memcpy(User_Input_Buffer, rx_buffer, rx_buffer_len);
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <CDC_Receive_FS+0x9c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	490f      	ldr	r1, [pc, #60]	; (80086e0 <CDC_Receive_FS+0xa0>)
 80086a2:	4810      	ldr	r0, [pc, #64]	; (80086e4 <CDC_Receive_FS+0xa4>)
 80086a4:	f001 fcae 	bl	800a004 <memcpy>
		User_Input_Buffer_Len = rx_buffer_len;
 80086a8:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <CDC_Receive_FS+0x9c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <CDC_Receive_FS+0xa8>)
 80086b0:	701a      	strb	r2, [r3, #0]
		Process_Received_Message(rx_buffer, rx_buffer_len);
 80086b2:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <CDC_Receive_FS+0x9c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4619      	mov	r1, r3
 80086b8:	4809      	ldr	r0, [pc, #36]	; (80086e0 <CDC_Receive_FS+0xa0>)
 80086ba:	f000 f83f 	bl	800873c <Process_Received_Message>
		// Clear the receive buffer
		rx_buffer_len = 0;
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <CDC_Receive_FS+0x9c>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	4809      	ldr	r0, [pc, #36]	; (80086ec <CDC_Receive_FS+0xac>)
 80086c8:	f7fe fe7f 	bl	80073ca <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086cc:	4807      	ldr	r0, [pc, #28]	; (80086ec <CDC_Receive_FS+0xac>)
 80086ce:	f7fe febe 	bl	800744e <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 80086d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000b20 	.word	0x20000b20
 80086e0:	20000738 	.word	0x20000738
 80086e4:	20000b24 	.word	0x20000b24
 80086e8:	20000f0c 	.word	0x20000f0c
 80086ec:	2000049c 	.word	0x2000049c

080086f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <CDC_Transmit_FS+0x48>)
 8008702:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008706:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008712:	2301      	movs	r3, #1
 8008714:	e00b      	b.n	800872e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008716:	887b      	ldrh	r3, [r7, #2]
 8008718:	461a      	mov	r2, r3
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4806      	ldr	r0, [pc, #24]	; (8008738 <CDC_Transmit_FS+0x48>)
 800871e:	f7fe fe3b 	bl	8007398 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008722:	4805      	ldr	r0, [pc, #20]	; (8008738 <CDC_Transmit_FS+0x48>)
 8008724:	f7fe fe64 	bl	80073f0 <USBD_CDC_TransmitPacket>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	2000049c 	.word	0x2000049c

0800873c <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* rx_buffer, uint32_t rx_buffer_len)
{
 800873c:	b5b0      	push	{r4, r5, r7, lr}
 800873e:	f5ad 5d2a 	sub.w	sp, sp, #10880	; 0x2a80
 8008742:	b08c      	sub	sp, #48	; 0x30
 8008744:	af04      	add	r7, sp, #16
 8008746:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800874a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800874e:	6018      	str	r0, [r3, #0]
 8008750:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008754:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8008758:	6019      	str	r1, [r3, #0]
	//uint8_t RX_Packet[128]; // add null character
	//uint8_t RX_Packet_Length; // max 127
	//char RX_String[128]; // convert uint8_t to char


	if(strncmp((char*) rx_buffer, "Start", strlen("Start")) == 0)
 800875a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800875e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008762:	2205      	movs	r2, #5
 8008764:	49a9      	ldr	r1, [pc, #676]	; (8008a0c <Process_Received_Message+0x2d0>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	f001 fc91 	bl	800a08e <strncmp>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d135      	bne.n	80087de <Process_Received_Message+0xa2>
	{
		sprintf(str1, "User Input: Start\r\n");
 8008772:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008776:	3b34      	subs	r3, #52	; 0x34
 8008778:	49a5      	ldr	r1, [pc, #660]	; (8008a10 <Process_Received_Message+0x2d4>)
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fc58 	bl	800a030 <siprintf>
		sprintf(str2, "Initialized the CC1200 for Operation\r\n");
 8008780:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008784:	3b0c      	subs	r3, #12
 8008786:	49a3      	ldr	r1, [pc, #652]	; (8008a14 <Process_Received_Message+0x2d8>)
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fc51 	bl	800a030 <siprintf>
		CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 800878e:	4ba2      	ldr	r3, [pc, #648]	; (8008a18 <Process_Received_Message+0x2dc>)
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	4aa1      	ldr	r2, [pc, #644]	; (8008a1c <Process_Received_Message+0x2e0>)
 8008796:	49a2      	ldr	r1, [pc, #648]	; (8008a20 <Process_Received_Message+0x2e4>)
 8008798:	48a2      	ldr	r0, [pc, #648]	; (8008a24 <Process_Received_Message+0x2e8>)
 800879a:	f7f7 fe7b 	bl	8000494 <CC1200_Init>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 800879e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80087a2:	3b0c      	subs	r3, #12
 80087a4:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80087a8:	3a34      	subs	r2, #52	; 0x34
 80087aa:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80087ae:	381c      	subs	r0, #28
 80087b0:	499d      	ldr	r1, [pc, #628]	; (8008a28 <Process_Received_Message+0x2ec>)
 80087b2:	f001 fc3d 	bl	800a030 <siprintf>
 80087b6:	4603      	mov	r3, r0
 80087b8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80087bc:	f102 021e 	add.w	r2, r2, #30
 80087c0:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80087c2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80087c6:	f103 031e 	add.w	r3, r3, #30
 80087ca:	881a      	ldrh	r2, [r3, #0]
 80087cc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80087d0:	3b1c      	subs	r3, #28
 80087d2:	4611      	mov	r1, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff ff8b 	bl	80086f0 <CDC_Transmit_FS>
 80087da:	f000 bff9 	b.w	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Configure:", strlen("Configure:")) == 0)
 80087de:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80087e2:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80087e6:	220a      	movs	r2, #10
 80087e8:	4990      	ldr	r1, [pc, #576]	; (8008a2c <Process_Received_Message+0x2f0>)
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	f001 fc4f 	bl	800a08e <strncmp>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 80b1 	bne.w	800895a <Process_Received_Message+0x21e>
	{
		sprintf(str1, "User Input: Configure\r\n");
 80087f8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80087fc:	3b34      	subs	r3, #52	; 0x34
 80087fe:	498c      	ldr	r1, [pc, #560]	; (8008a30 <Process_Received_Message+0x2f4>)
 8008800:	4618      	mov	r0, r3
 8008802:	f001 fc15 	bl	800a030 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Configure:"
 8008806:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800880a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800880e:	4989      	ldr	r1, [pc, #548]	; (8008a34 <Process_Received_Message+0x2f8>)
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f001 fc51 	bl	800a0b8 <strtok>
 8008816:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800881a:	f103 0318 	add.w	r3, r3, #24
 800881e:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[mode]"
 8008820:	4985      	ldr	r1, [pc, #532]	; (8008a38 <Process_Received_Message+0x2fc>)
 8008822:	2000      	movs	r0, #0
 8008824:	f001 fc48 	bl	800a0b8 <strtok>
 8008828:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800882c:	f103 0318 	add.w	r3, r3, #24
 8008830:	6018      	str	r0, [r3, #0]
		if (strncmp(Token, "Default", strlen("Default")) == 0)
 8008832:	2207      	movs	r2, #7
 8008834:	4981      	ldr	r1, [pc, #516]	; (8008a3c <Process_Received_Message+0x300>)
 8008836:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800883a:	f103 0318 	add.w	r3, r3, #24
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	f001 fc25 	bl	800a08e <strncmp>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d14f      	bne.n	80088ea <Process_Received_Message+0x1ae>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 800884a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800884e:	3b0c      	subs	r3, #12
 8008850:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008854:	f102 0218 	add.w	r2, r2, #24
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	4979      	ldr	r1, [pc, #484]	; (8008a40 <Process_Received_Message+0x304>)
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fbe7 	bl	800a030 <siprintf>
			sprintf(str3, "Configured the CC1200 with Default Register Settings\r\n");
 8008862:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008866:	3b24      	subs	r3, #36	; 0x24
 8008868:	4976      	ldr	r1, [pc, #472]	; (8008a44 <Process_Received_Message+0x308>)
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fbe0 	bl	800a030 <siprintf>
			check = CC1200_Configure(&SPI_Info, Preferred_Register_Settings, Preferred_Extended_Register_Settings);
 8008870:	4a75      	ldr	r2, [pc, #468]	; (8008a48 <Process_Received_Message+0x30c>)
 8008872:	4976      	ldr	r1, [pc, #472]	; (8008a4c <Process_Received_Message+0x310>)
 8008874:	486b      	ldr	r0, [pc, #428]	; (8008a24 <Process_Received_Message+0x2e8>)
 8008876:	f7f7 fe2c 	bl	80004d2 <CC1200_Configure>
 800887a:	4603      	mov	r3, r0
 800887c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008880:	f102 0217 	add.w	r2, r2, #23
 8008884:	7013      	strb	r3, [r2, #0]
			if (check == 1)
 8008886:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800888a:	f103 0317 	add.w	r3, r3, #23
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d107      	bne.n	80088a4 <Process_Received_Message+0x168>
			{
				sprintf(str4, "Error Occurred\r\n");
 8008894:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008898:	3b3c      	subs	r3, #60	; 0x3c
 800889a:	496d      	ldr	r1, [pc, #436]	; (8008a50 <Process_Received_Message+0x314>)
 800889c:	4618      	mov	r0, r3
 800889e:	f001 fbc7 	bl	800a030 <siprintf>
 80088a2:	e006      	b.n	80088b2 <Process_Received_Message+0x176>
			}
			else // check == 0
			{
				sprintf(str4, "No Error Occurred\r\n");
 80088a4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80088a8:	3b3c      	subs	r3, #60	; 0x3c
 80088aa:	496a      	ldr	r1, [pc, #424]	; (8008a54 <Process_Received_Message+0x318>)
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fbbf 	bl	800a030 <siprintf>
			}
			//Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
			Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4); // include str4
 80088b2:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80088b6:	390c      	subs	r1, #12
 80088b8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80088bc:	3a34      	subs	r2, #52	; 0x34
 80088be:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80088c2:	381c      	subs	r0, #28
 80088c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80088c8:	3b3c      	subs	r3, #60	; 0x3c
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80088d0:	3b24      	subs	r3, #36	; 0x24
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	460b      	mov	r3, r1
 80088d6:	4960      	ldr	r1, [pc, #384]	; (8008a58 <Process_Received_Message+0x31c>)
 80088d8:	f001 fbaa 	bl	800a030 <siprintf>
 80088dc:	4603      	mov	r3, r0
 80088de:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80088e2:	f102 021e 	add.w	r2, r2, #30
 80088e6:	8013      	strh	r3, [r2, #0]
 80088e8:	e029      	b.n	800893e <Process_Received_Message+0x202>
		}
		else
		{
			sprintf(str2, "Invalid Mode: %s\r\n", Token);
 80088ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80088ee:	3b0c      	subs	r3, #12
 80088f0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80088f4:	f102 0218 	add.w	r2, r2, #24
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	4958      	ldr	r1, [pc, #352]	; (8008a5c <Process_Received_Message+0x320>)
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fb97 	bl	800a030 <siprintf>
			sprintf(str3, "Could Not Configure the CC1200\r\n");
 8008902:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008906:	3b24      	subs	r3, #36	; 0x24
 8008908:	4955      	ldr	r1, [pc, #340]	; (8008a60 <Process_Received_Message+0x324>)
 800890a:	4618      	mov	r0, r3
 800890c:	f001 fb90 	bl	800a030 <siprintf>
			Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008910:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008914:	390c      	subs	r1, #12
 8008916:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800891a:	3a34      	subs	r2, #52	; 0x34
 800891c:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008920:	381c      	subs	r0, #28
 8008922:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008926:	3b24      	subs	r3, #36	; 0x24
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	460b      	mov	r3, r1
 800892c:	494d      	ldr	r1, [pc, #308]	; (8008a64 <Process_Received_Message+0x328>)
 800892e:	f001 fb7f 	bl	800a030 <siprintf>
 8008932:	4603      	mov	r3, r0
 8008934:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008938:	f102 021e 	add.w	r2, r2, #30
 800893c:	8013      	strh	r3, [r2, #0]
		}

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800893e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008942:	f103 031e 	add.w	r3, r3, #30
 8008946:	881a      	ldrh	r2, [r3, #0]
 8008948:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800894c:	3b1c      	subs	r3, #28
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fecd 	bl	80086f0 <CDC_Transmit_FS>
 8008956:	f000 bf3b 	b.w	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Transmit:", strlen("Transmit:")) == 0)
 800895a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800895e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008962:	2209      	movs	r2, #9
 8008964:	4940      	ldr	r1, [pc, #256]	; (8008a68 <Process_Received_Message+0x32c>)
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	f001 fb91 	bl	800a08e <strncmp>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 80e6 	bne.w	8008b40 <Process_Received_Message+0x404>
	{
		sprintf(str1, "User Input: Transmit\r\n");
 8008974:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008978:	3b34      	subs	r3, #52	; 0x34
 800897a:	493c      	ldr	r1, [pc, #240]	; (8008a6c <Process_Received_Message+0x330>)
 800897c:	4618      	mov	r0, r3
 800897e:	f001 fb57 	bl	800a030 <siprintf>
		sprintf(str2, "Set the CC1200 into Transmit Mode\r\n");
 8008982:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008986:	3b0c      	subs	r3, #12
 8008988:	4939      	ldr	r1, [pc, #228]	; (8008a70 <Process_Received_Message+0x334>)
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fb50 	bl	800a030 <siprintf>
		sprintf(str3, "Transmitted the Following Message: ");
 8008990:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008994:	3b24      	subs	r3, #36	; 0x24
 8008996:	4937      	ldr	r1, [pc, #220]	; (8008a74 <Process_Received_Message+0x338>)
 8008998:	4618      	mov	r0, r3
 800899a:	f001 fb49 	bl	800a030 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Transmit:"
 800899e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80089a2:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80089a6:	4923      	ldr	r1, [pc, #140]	; (8008a34 <Process_Received_Message+0x2f8>)
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	f001 fb85 	bl	800a0b8 <strtok>
 80089ae:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80089b2:	f103 0318 	add.w	r3, r3, #24
 80089b6:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 80089b8:	491f      	ldr	r1, [pc, #124]	; (8008a38 <Process_Received_Message+0x2fc>)
 80089ba:	2000      	movs	r0, #0
 80089bc:	f001 fb7c 	bl	800a0b8 <strtok>
 80089c0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80089c4:	f103 0318 	add.w	r3, r3, #24
 80089c8:	6018      	str	r0, [r3, #0]
		TX_Packet_Length = strlen(Token);
 80089ca:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80089ce:	f103 0318 	add.w	r3, r3, #24
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	f7f7 fbd2 	bl	800017c <strlen>
 80089d8:	4603      	mov	r3, r0
 80089da:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80089de:	f102 0215 	add.w	r2, r2, #21
 80089e2:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "%s\r\n", Token);
 80089e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80089e8:	3b3c      	subs	r3, #60	; 0x3c
 80089ea:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80089ee:	f102 0218 	add.w	r2, r2, #24
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	4920      	ldr	r1, [pc, #128]	; (8008a78 <Process_Received_Message+0x33c>)
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 fb1a 	bl	800a030 <siprintf>
		for (i = 0; i < TX_Packet_Length; i++)
 80089fc:	2300      	movs	r3, #0
 80089fe:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008a02:	f102 021d 	add.w	r2, r2, #29
 8008a06:	7013      	strb	r3, [r2, #0]
 8008a08:	e059      	b.n	8008abe <Process_Received_Message+0x382>
 8008a0a:	bf00      	nop
 8008a0c:	0800b61c 	.word	0x0800b61c
 8008a10:	0800b624 	.word	0x0800b624
 8008a14:	0800b638 	.word	0x0800b638
 8008a18:	20000360 	.word	0x20000360
 8008a1c:	40020400 	.word	0x40020400
 8008a20:	2000040c 	.word	0x2000040c
 8008a24:	200003fc 	.word	0x200003fc
 8008a28:	0800b660 	.word	0x0800b660
 8008a2c:	0800b668 	.word	0x0800b668
 8008a30:	0800b674 	.word	0x0800b674
 8008a34:	0800b68c 	.word	0x0800b68c
 8008a38:	0800b690 	.word	0x0800b690
 8008a3c:	0800b694 	.word	0x0800b694
 8008a40:	0800b69c 	.word	0x0800b69c
 8008a44:	0800b6b0 	.word	0x0800b6b0
 8008a48:	20000060 	.word	0x20000060
 8008a4c:	20000000 	.word	0x20000000
 8008a50:	0800b6e8 	.word	0x0800b6e8
 8008a54:	0800b6fc 	.word	0x0800b6fc
 8008a58:	0800b710 	.word	0x0800b710
 8008a5c:	0800b71c 	.word	0x0800b71c
 8008a60:	0800b730 	.word	0x0800b730
 8008a64:	0800b754 	.word	0x0800b754
 8008a68:	0800b75c 	.word	0x0800b75c
 8008a6c:	0800b768 	.word	0x0800b768
 8008a70:	0800b780 	.word	0x0800b780
 8008a74:	0800b7a4 	.word	0x0800b7a4
 8008a78:	0800b7c8 	.word	0x0800b7c8
		{
			TX_Packet[i] = (uint8_t) (Token[i]);
 8008a7c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008a80:	f103 031d 	add.w	r3, r3, #29
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008a8a:	f102 0218 	add.w	r2, r2, #24
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	441a      	add	r2, r3
 8008a92:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008a96:	f103 031d 	add.w	r3, r3, #29
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	7811      	ldrb	r1, [r2, #0]
 8008a9e:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8008aa2:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8008aa6:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < TX_Packet_Length; i++)
 8008aa8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008aac:	f103 031d 	add.w	r3, r3, #29
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008ab8:	f102 021d 	add.w	r2, r2, #29
 8008abc:	7013      	strb	r3, [r2, #0]
 8008abe:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008ac2:	f103 031d 	add.w	r3, r3, #29
 8008ac6:	781a      	ldrb	r2, [r3, #0]
 8008ac8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008acc:	f103 0315 	add.w	r3, r3, #21
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d3d2      	bcc.n	8008a7c <Process_Received_Message+0x340>
		}
		CC1200_Transmit(&SPI_Info, TX_Packet, TX_Packet_Length);
 8008ad6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008ada:	f103 0315 	add.w	r3, r3, #21
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	f107 0320 	add.w	r3, r7, #32
 8008ae4:	3b14      	subs	r3, #20
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	48a7      	ldr	r0, [pc, #668]	; (8008d88 <Process_Received_Message+0x64c>)
 8008aea:	f7f7 fec1 	bl	8000870 <CC1200_Transmit>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 8008aee:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008af2:	390c      	subs	r1, #12
 8008af4:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008af8:	3a34      	subs	r2, #52	; 0x34
 8008afa:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008afe:	381c      	subs	r0, #28
 8008b00:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008b04:	3b3c      	subs	r3, #60	; 0x3c
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008b0c:	3b24      	subs	r3, #36	; 0x24
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	460b      	mov	r3, r1
 8008b12:	499e      	ldr	r1, [pc, #632]	; (8008d8c <Process_Received_Message+0x650>)
 8008b14:	f001 fa8c 	bl	800a030 <siprintf>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008b1e:	f102 021e 	add.w	r2, r2, #30
 8008b22:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008b24:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008b28:	f103 031e 	add.w	r3, r3, #30
 8008b2c:	881a      	ldrh	r2, [r3, #0]
 8008b2e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008b32:	3b1c      	subs	r3, #28
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff fdda 	bl	80086f0 <CDC_Transmit_FS>
 8008b3c:	f000 be48 	b.w	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Receive", strlen("Receive")) == 0)
 8008b40:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008b44:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008b48:	2207      	movs	r2, #7
 8008b4a:	4991      	ldr	r1, [pc, #580]	; (8008d90 <Process_Received_Message+0x654>)
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	f001 fa9e 	bl	800a08e <strncmp>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d135      	bne.n	8008bc4 <Process_Received_Message+0x488>
	{
		sprintf(str1, "User Input: Receive\r\n");
 8008b58:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008b5c:	3b34      	subs	r3, #52	; 0x34
 8008b5e:	498d      	ldr	r1, [pc, #564]	; (8008d94 <Process_Received_Message+0x658>)
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 fa65 	bl	800a030 <siprintf>
		sprintf(str2, "Set the CC1200 into Receive Mode\r\n");
 8008b66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008b6a:	3b0c      	subs	r3, #12
 8008b6c:	498a      	ldr	r1, [pc, #552]	; (8008d98 <Process_Received_Message+0x65c>)
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 fa5e 	bl	800a030 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (before initiating receive)
 8008b74:	213a      	movs	r1, #58	; 0x3a
 8008b76:	4884      	ldr	r0, [pc, #528]	; (8008d88 <Process_Received_Message+0x64c>)
 8008b78:	f7f7 fe47 	bl	800080a <CC1200_Command_Strobe>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // enable RX
 8008b7c:	2134      	movs	r1, #52	; 0x34
 8008b7e:	4882      	ldr	r0, [pc, #520]	; (8008d88 <Process_Received_Message+0x64c>)
 8008b80:	f7f7 fe43 	bl	800080a <CC1200_Command_Strobe>
		//CC1200_Receive(&SPI_Info);
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8008b84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008b88:	3b0c      	subs	r3, #12
 8008b8a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008b8e:	3a34      	subs	r2, #52	; 0x34
 8008b90:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008b94:	381c      	subs	r0, #28
 8008b96:	4981      	ldr	r1, [pc, #516]	; (8008d9c <Process_Received_Message+0x660>)
 8008b98:	f001 fa4a 	bl	800a030 <siprintf>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008ba2:	f102 021e 	add.w	r2, r2, #30
 8008ba6:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008ba8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008bac:	f103 031e 	add.w	r3, r3, #30
 8008bb0:	881a      	ldrh	r2, [r3, #0]
 8008bb2:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008bb6:	3b1c      	subs	r3, #28
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fd98 	bl	80086f0 <CDC_Transmit_FS>
 8008bc0:	f000 be06 	b.w	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Exit", strlen("Exit")) == 0)
 8008bc4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008bc8:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008bcc:	2204      	movs	r2, #4
 8008bce:	4974      	ldr	r1, [pc, #464]	; (8008da0 <Process_Received_Message+0x664>)
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f001 fa5c 	bl	800a08e <strncmp>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d13d      	bne.n	8008c58 <Process_Received_Message+0x51c>
	{
		sprintf(str1, "User Input: Exit\r\n");
 8008bdc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008be0:	3b34      	subs	r3, #52	; 0x34
 8008be2:	4970      	ldr	r1, [pc, #448]	; (8008da4 <Process_Received_Message+0x668>)
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 fa23 	bl	800a030 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008bea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008bee:	3b0c      	subs	r3, #12
 8008bf0:	496d      	ldr	r1, [pc, #436]	; (8008da8 <Process_Received_Message+0x66c>)
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fa1c 	bl	800a030 <siprintf>
		sprintf(str3, "Register Values Can Be Changed\r\n");
 8008bf8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008bfc:	3b24      	subs	r3, #36	; 0x24
 8008bfe:	496b      	ldr	r1, [pc, #428]	; (8008dac <Process_Received_Message+0x670>)
 8008c00:	4618      	mov	r0, r3
 8008c02:	f001 fa15 	bl	800a030 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SIDLE);
 8008c06:	2136      	movs	r1, #54	; 0x36
 8008c08:	485f      	ldr	r0, [pc, #380]	; (8008d88 <Process_Received_Message+0x64c>)
 8008c0a:	f7f7 fdfe 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008c0e:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008c12:	390c      	subs	r1, #12
 8008c14:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008c18:	3a34      	subs	r2, #52	; 0x34
 8008c1a:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008c1e:	381c      	subs	r0, #28
 8008c20:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008c24:	3b24      	subs	r3, #36	; 0x24
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4961      	ldr	r1, [pc, #388]	; (8008db0 <Process_Received_Message+0x674>)
 8008c2c:	f001 fa00 	bl	800a030 <siprintf>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008c36:	f102 021e 	add.w	r2, r2, #30
 8008c3a:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008c3c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008c40:	f103 031e 	add.w	r3, r3, #30
 8008c44:	881a      	ldrh	r2, [r3, #0]
 8008c46:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008c4a:	3b1c      	subs	r3, #28
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff fd4e 	bl	80086f0 <CDC_Transmit_FS>
 8008c54:	f000 bdbc 	b.w	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Reset", strlen("Reset")) == 0)
 8008c58:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008c5c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008c60:	2205      	movs	r2, #5
 8008c62:	4954      	ldr	r1, [pc, #336]	; (8008db4 <Process_Received_Message+0x678>)
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	f001 fa12 	bl	800a08e <strncmp>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d13d      	bne.n	8008cec <Process_Received_Message+0x5b0>
	{
		sprintf(str1, "User Input: Reset\r\n");
 8008c70:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008c74:	3b34      	subs	r3, #52	; 0x34
 8008c76:	4950      	ldr	r1, [pc, #320]	; (8008db8 <Process_Received_Message+0x67c>)
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 f9d9 	bl	800a030 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008c7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008c82:	3b0c      	subs	r3, #12
 8008c84:	4948      	ldr	r1, [pc, #288]	; (8008da8 <Process_Received_Message+0x66c>)
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 f9d2 	bl	800a030 <siprintf>
		sprintf(str3, "Register Values Reset to Default Values\r\n");
 8008c8c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008c90:	3b24      	subs	r3, #36	; 0x24
 8008c92:	494a      	ldr	r1, [pc, #296]	; (8008dbc <Process_Received_Message+0x680>)
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 f9cb 	bl	800a030 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES);
 8008c9a:	2130      	movs	r1, #48	; 0x30
 8008c9c:	483a      	ldr	r0, [pc, #232]	; (8008d88 <Process_Received_Message+0x64c>)
 8008c9e:	f7f7 fdb4 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008ca2:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008ca6:	390c      	subs	r1, #12
 8008ca8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008cac:	3a34      	subs	r2, #52	; 0x34
 8008cae:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008cb2:	381c      	subs	r0, #28
 8008cb4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008cb8:	3b24      	subs	r3, #36	; 0x24
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	493c      	ldr	r1, [pc, #240]	; (8008db0 <Process_Received_Message+0x674>)
 8008cc0:	f001 f9b6 	bl	800a030 <siprintf>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008cca:	f102 021e 	add.w	r2, r2, #30
 8008cce:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008cd0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008cd4:	f103 031e 	add.w	r3, r3, #30
 8008cd8:	881a      	ldrh	r2, [r3, #0]
 8008cda:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008cde:	3b1c      	subs	r3, #28
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff fd04 	bl	80086f0 <CDC_Transmit_FS>
 8008ce8:	f000 bd72 	b.w	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Status", strlen("Status")) == 0)
 8008cec:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008cf0:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008cf4:	2206      	movs	r2, #6
 8008cf6:	4932      	ldr	r1, [pc, #200]	; (8008dc0 <Process_Received_Message+0x684>)
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	f001 f9c8 	bl	800a08e <strncmp>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d167      	bne.n	8008dd4 <Process_Received_Message+0x698>
	{
		sprintf(str1, "User Input: Status\r\n");
 8008d04:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008d08:	3b34      	subs	r3, #52	; 0x34
 8008d0a:	492e      	ldr	r1, [pc, #184]	; (8008dc4 <Process_Received_Message+0x688>)
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f98f 	bl	800a030 <siprintf>
		sprintf(str2, "CC1200 Status: ");
 8008d12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008d16:	3b0c      	subs	r3, #12
 8008d18:	492b      	ldr	r1, [pc, #172]	; (8008dc8 <Process_Received_Message+0x68c>)
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f988 	bl	800a030 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8008d20:	213d      	movs	r1, #61	; 0x3d
 8008d22:	4819      	ldr	r0, [pc, #100]	; (8008d88 <Process_Received_Message+0x64c>)
 8008d24:	f7f7 fd71 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str3, "0X%02X\r\n", MISO_Data[0]);
 8008d28:	4b28      	ldr	r3, [pc, #160]	; (8008dcc <Process_Received_Message+0x690>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008d32:	3b24      	subs	r3, #36	; 0x24
 8008d34:	4926      	ldr	r1, [pc, #152]	; (8008dd0 <Process_Received_Message+0x694>)
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 f97a 	bl	800a030 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008d3c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008d40:	390c      	subs	r1, #12
 8008d42:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008d46:	3a34      	subs	r2, #52	; 0x34
 8008d48:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008d4c:	381c      	subs	r0, #28
 8008d4e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008d52:	3b24      	subs	r3, #36	; 0x24
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	460b      	mov	r3, r1
 8008d58:	4915      	ldr	r1, [pc, #84]	; (8008db0 <Process_Received_Message+0x674>)
 8008d5a:	f001 f969 	bl	800a030 <siprintf>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008d64:	f102 021e 	add.w	r2, r2, #30
 8008d68:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008d6a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008d6e:	f103 031e 	add.w	r3, r3, #30
 8008d72:	881a      	ldrh	r2, [r3, #0]
 8008d74:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008d78:	3b1c      	subs	r3, #28
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff fcb7 	bl	80086f0 <CDC_Transmit_FS>
 8008d82:	f000 bd25 	b.w	80097d0 <Process_Received_Message+0x1094>
 8008d86:	bf00      	nop
 8008d88:	200003fc 	.word	0x200003fc
 8008d8c:	0800b710 	.word	0x0800b710
 8008d90:	0800b7d0 	.word	0x0800b7d0
 8008d94:	0800b7d8 	.word	0x0800b7d8
 8008d98:	0800b7f0 	.word	0x0800b7f0
 8008d9c:	0800b660 	.word	0x0800b660
 8008da0:	0800b814 	.word	0x0800b814
 8008da4:	0800b81c 	.word	0x0800b81c
 8008da8:	0800b830 	.word	0x0800b830
 8008dac:	0800b850 	.word	0x0800b850
 8008db0:	0800b754 	.word	0x0800b754
 8008db4:	0800b874 	.word	0x0800b874
 8008db8:	0800b87c 	.word	0x0800b87c
 8008dbc:	0800b890 	.word	0x0800b890
 8008dc0:	0800b8bc 	.word	0x0800b8bc
 8008dc4:	0800b8c4 	.word	0x0800b8c4
 8008dc8:	0800b8dc 	.word	0x0800b8dc
 8008dcc:	2000040c 	.word	0x2000040c
 8008dd0:	0800b8ec 	.word	0x0800b8ec
	}
	else if (strncmp((char*) rx_buffer, "Command:", strlen("Command:")) == 0)
 8008dd4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008dd8:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008ddc:	2208      	movs	r2, #8
 8008dde:	49cc      	ldr	r1, [pc, #816]	; (8009110 <Process_Received_Message+0x9d4>)
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f001 f954 	bl	800a08e <strncmp>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 809f 	bne.w	8008f2c <Process_Received_Message+0x7f0>
	{
		sprintf(str1, "User Input: Command\r\n");
 8008dee:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008df2:	3b34      	subs	r3, #52	; 0x34
 8008df4:	49c7      	ldr	r1, [pc, #796]	; (8009114 <Process_Received_Message+0x9d8>)
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 f91a 	bl	800a030 <siprintf>
		sprintf(str2, "Issued the Following Command: ");
 8008dfc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008e00:	3b0c      	subs	r3, #12
 8008e02:	49c5      	ldr	r1, [pc, #788]	; (8009118 <Process_Received_Message+0x9dc>)
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 f913 	bl	800a030 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Command:"
 8008e0a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008e0e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008e12:	49c2      	ldr	r1, [pc, #776]	; (800911c <Process_Received_Message+0x9e0>)
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	f001 f94f 	bl	800a0b8 <strtok>
 8008e1a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008e1e:	f103 0318 	add.w	r3, r3, #24
 8008e22:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[command strobe]"
 8008e24:	49be      	ldr	r1, [pc, #760]	; (8009120 <Process_Received_Message+0x9e4>)
 8008e26:	2000      	movs	r0, #0
 8008e28:	f001 f946 	bl	800a0b8 <strtok>
 8008e2c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008e30:	f103 0318 	add.w	r3, r3, #24
 8008e34:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8008e36:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008e3a:	3b24      	subs	r3, #36	; 0x24
 8008e3c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008e40:	f102 0218 	add.w	r2, r2, #24
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	49b7      	ldr	r1, [pc, #732]	; (8009124 <Process_Received_Message+0x9e8>)
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 f8f1 	bl	800a030 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8008e4e:	2210      	movs	r2, #16
 8008e50:	2100      	movs	r1, #0
 8008e52:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008e56:	f103 0318 	add.w	r3, r3, #24
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	f001 fa04 	bl	800a268 <strtol>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008e66:	f102 021c 	add.w	r2, r2, #28
 8008e6a:	7013      	strb	r3, [r2, #0]
		check = CC1200_Command_Strobe(&SPI_Info, Register_Address); // issue command
 8008e6c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008e70:	f103 031c 	add.w	r3, r3, #28
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4619      	mov	r1, r3
 8008e78:	48ab      	ldr	r0, [pc, #684]	; (8009128 <Process_Received_Message+0x9ec>)
 8008e7a:	f7f7 fcc6 	bl	800080a <CC1200_Command_Strobe>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008e84:	f102 0217 	add.w	r2, r2, #23
 8008e88:	7013      	strb	r3, [r2, #0]
		if (check == 1)
 8008e8a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008e8e:	f103 0317 	add.w	r3, r3, #23
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d107      	bne.n	8008ea8 <Process_Received_Message+0x76c>
		{
			sprintf(str4, "Invalid Command\r\n");
 8008e98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008e9c:	3b3c      	subs	r3, #60	; 0x3c
 8008e9e:	49a3      	ldr	r1, [pc, #652]	; (800912c <Process_Received_Message+0x9f0>)
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f001 f8c5 	bl	800a030 <siprintf>
 8008ea6:	e006      	b.n	8008eb6 <Process_Received_Message+0x77a>
		}
		else // check == 0
		{
			sprintf(str4, "Valid Command\r\n");
 8008ea8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008eac:	3b3c      	subs	r3, #60	; 0x3c
 8008eae:	49a0      	ldr	r1, [pc, #640]	; (8009130 <Process_Received_Message+0x9f4>)
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 f8bd 	bl	800a030 <siprintf>
		}
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8008eb6:	213d      	movs	r1, #61	; 0x3d
 8008eb8:	489b      	ldr	r0, [pc, #620]	; (8009128 <Process_Received_Message+0x9ec>)
 8008eba:	f7f7 fca6 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str5, "CC1200 State: 0X%02X\r\n", MISO_Data[0]);
 8008ebe:	4b9d      	ldr	r3, [pc, #628]	; (8009134 <Process_Received_Message+0x9f8>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ec8:	3b14      	subs	r3, #20
 8008eca:	499b      	ldr	r1, [pc, #620]	; (8009138 <Process_Received_Message+0x9fc>)
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 f8af 	bl	800a030 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8008ed2:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8008ed6:	390c      	subs	r1, #12
 8008ed8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008edc:	3a34      	subs	r2, #52	; 0x34
 8008ede:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8008ee2:	381c      	subs	r0, #28
 8008ee4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ee8:	3b14      	subs	r3, #20
 8008eea:	9302      	str	r3, [sp, #8]
 8008eec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008ef0:	3b3c      	subs	r3, #60	; 0x3c
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008ef8:	3b24      	subs	r3, #36	; 0x24
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	460b      	mov	r3, r1
 8008efe:	498f      	ldr	r1, [pc, #572]	; (800913c <Process_Received_Message+0xa00>)
 8008f00:	f001 f896 	bl	800a030 <siprintf>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008f0a:	f102 021e 	add.w	r2, r2, #30
 8008f0e:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008f10:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008f14:	f103 031e 	add.w	r3, r3, #30
 8008f18:	881a      	ldrh	r2, [r3, #0]
 8008f1a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008f1e:	3b1c      	subs	r3, #28
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff fbe4 	bl	80086f0 <CDC_Transmit_FS>
 8008f28:	f000 bc52 	b.w	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Print Registers", strlen("Print Registers")) == 0)
 8008f2c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008f30:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008f34:	220f      	movs	r2, #15
 8008f36:	4982      	ldr	r1, [pc, #520]	; (8009140 <Process_Received_Message+0xa04>)
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	f001 f8a8 	bl	800a08e <strncmp>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 8135 	bne.w	80091b0 <Process_Received_Message+0xa74>
	{
		sprintf(Message, "User Input: Print Registers\r\n");
 8008f46:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008f4a:	3b1c      	subs	r3, #28
 8008f4c:	497d      	ldr	r1, [pc, #500]	; (8009144 <Process_Received_Message+0xa08>)
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 f86e 	bl	800a030 <siprintf>
		strcat(Message, "Register Space\r\n");
 8008f54:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008f58:	3b1c      	subs	r3, #28
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7f7 f90e 	bl	800017c <strlen>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008f68:	3b1c      	subs	r3, #28
 8008f6a:	4413      	add	r3, r2
 8008f6c:	4a76      	ldr	r2, [pc, #472]	; (8009148 <Process_Received_Message+0xa0c>)
 8008f6e:	461d      	mov	r5, r3
 8008f70:	4614      	mov	r4, r2
 8008f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f74:	6028      	str	r0, [r5, #0]
 8008f76:	6069      	str	r1, [r5, #4]
 8008f78:	60aa      	str	r2, [r5, #8]
 8008f7a:	60eb      	str	r3, [r5, #12]
 8008f7c:	7823      	ldrb	r3, [r4, #0]
 8008f7e:	742b      	strb	r3, [r5, #16]
		strcat(Message, "Address; Value\r\n");
 8008f80:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008f84:	3b1c      	subs	r3, #28
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f7 f8f8 	bl	800017c <strlen>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8008f94:	3b1c      	subs	r3, #28
 8008f96:	4413      	add	r3, r2
 8008f98:	4a6c      	ldr	r2, [pc, #432]	; (800914c <Process_Received_Message+0xa10>)
 8008f9a:	461d      	mov	r5, r3
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fa0:	6028      	str	r0, [r5, #0]
 8008fa2:	6069      	str	r1, [r5, #4]
 8008fa4:	60aa      	str	r2, [r5, #8]
 8008fa6:	60eb      	str	r3, [r5, #12]
 8008fa8:	7823      	ldrb	r3, [r4, #0]
 8008faa:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8008fac:	2300      	movs	r3, #0
 8008fae:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008fb2:	f102 021c 	add.w	r2, r2, #28
 8008fb6:	7013      	strb	r3, [r2, #0]
 8008fb8:	e034      	b.n	8009024 <Process_Received_Message+0x8e8>
		{

			CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8008fba:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008fbe:	f103 031c 	add.w	r3, r3, #28
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4858      	ldr	r0, [pc, #352]	; (8009128 <Process_Received_Message+0x9ec>)
 8008fc8:	f7f7 fb3a 	bl	8000640 <CC1200_Read_Single_Register>
			Register_Value = MISO_Data[0];
 8008fcc:	4b59      	ldr	r3, [pc, #356]	; (8009134 <Process_Received_Message+0x9f8>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8008fd4:	f102 0216 	add.w	r2, r2, #22
 8008fd8:	7013      	strb	r3, [r2, #0]
			sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 8008fda:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008fde:	f103 031c 	add.w	r3, r3, #28
 8008fe2:	781a      	ldrb	r2, [r3, #0]
 8008fe4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8008fe8:	f103 0316 	add.w	r3, r3, #22
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8008ff2:	3834      	subs	r0, #52	; 0x34
 8008ff4:	4956      	ldr	r1, [pc, #344]	; (8009150 <Process_Received_Message+0xa14>)
 8008ff6:	f001 f81b 	bl	800a030 <siprintf>
			strcat(Message, str1);
 8008ffa:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008ffe:	3a34      	subs	r2, #52	; 0x34
 8009000:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009004:	3b1c      	subs	r3, #28
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f001 f831 	bl	800a070 <strcat>
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 800900e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009012:	f103 031c 	add.w	r3, r3, #28
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	3301      	adds	r3, #1
 800901a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800901e:	f102 021c 	add.w	r2, r2, #28
 8009022:	7013      	strb	r3, [r2, #0]
 8009024:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009028:	f103 031c 	add.w	r3, r3, #28
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b2e      	cmp	r3, #46	; 0x2e
 8009030:	d9c3      	bls.n	8008fba <Process_Received_Message+0x87e>
		}
		strcat(Message, "Extended Register Space\r\n");
 8009032:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009036:	3b1c      	subs	r3, #28
 8009038:	4618      	mov	r0, r3
 800903a:	f7f7 f89f 	bl	800017c <strlen>
 800903e:	4603      	mov	r3, r0
 8009040:	461a      	mov	r2, r3
 8009042:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009046:	3b1c      	subs	r3, #28
 8009048:	4413      	add	r3, r2
 800904a:	4a42      	ldr	r2, [pc, #264]	; (8009154 <Process_Received_Message+0xa18>)
 800904c:	461d      	mov	r5, r3
 800904e:	4614      	mov	r4, r2
 8009050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009052:	6028      	str	r0, [r5, #0]
 8009054:	6069      	str	r1, [r5, #4]
 8009056:	60aa      	str	r2, [r5, #8]
 8009058:	60eb      	str	r3, [r5, #12]
 800905a:	cc03      	ldmia	r4!, {r0, r1}
 800905c:	6128      	str	r0, [r5, #16]
 800905e:	6169      	str	r1, [r5, #20]
 8009060:	8823      	ldrh	r3, [r4, #0]
 8009062:	832b      	strh	r3, [r5, #24]
		strcat(Message, "Address; Value\r\n");
 8009064:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009068:	3b1c      	subs	r3, #28
 800906a:	4618      	mov	r0, r3
 800906c:	f7f7 f886 	bl	800017c <strlen>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009078:	3b1c      	subs	r3, #28
 800907a:	4413      	add	r3, r2
 800907c:	4a33      	ldr	r2, [pc, #204]	; (800914c <Process_Received_Message+0xa10>)
 800907e:	461d      	mov	r5, r3
 8009080:	4614      	mov	r4, r2
 8009082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009084:	6028      	str	r0, [r5, #0]
 8009086:	6069      	str	r1, [r5, #4]
 8009088:	60aa      	str	r2, [r5, #8]
 800908a:	60eb      	str	r3, [r5, #12]
 800908c:	7823      	ldrb	r3, [r4, #0]
 800908e:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 8009090:	2300      	movs	r3, #0
 8009092:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009096:	f102 021c 	add.w	r2, r2, #28
 800909a:	7013      	strb	r3, [r2, #0]
 800909c:	e068      	b.n	8009170 <Process_Received_Message+0xa34>
		{
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800909e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090a2:	f103 031c 	add.w	r3, r3, #28
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	4619      	mov	r1, r3
 80090aa:	481f      	ldr	r0, [pc, #124]	; (8009128 <Process_Received_Message+0x9ec>)
 80090ac:	f7f7 fb5a 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80090b6:	f102 0217 	add.w	r2, r2, #23
 80090ba:	7013      	strb	r3, [r2, #0]
			if (check == 0)
 80090bc:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090c0:	f103 0317 	add.w	r3, r3, #23
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d146      	bne.n	8009158 <Process_Received_Message+0xa1c>
			{
				Register_Value = MISO_Data[0];
 80090ca:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <Process_Received_Message+0x9f8>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80090d2:	f102 0216 	add.w	r2, r2, #22
 80090d6:	7013      	strb	r3, [r2, #0]
				sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 80090d8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090dc:	f103 031c 	add.w	r3, r3, #28
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090e6:	f103 0316 	add.w	r3, r3, #22
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80090f0:	3834      	subs	r0, #52	; 0x34
 80090f2:	4917      	ldr	r1, [pc, #92]	; (8009150 <Process_Received_Message+0xa14>)
 80090f4:	f000 ff9c 	bl	800a030 <siprintf>
				strcat(Message, str1);
 80090f8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80090fc:	3a34      	subs	r2, #52	; 0x34
 80090fe:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009102:	3b1c      	subs	r3, #28
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f000 ffb2 	bl	800a070 <strcat>
 800910c:	e025      	b.n	800915a <Process_Received_Message+0xa1e>
 800910e:	bf00      	nop
 8009110:	0800b8f8 	.word	0x0800b8f8
 8009114:	0800b904 	.word	0x0800b904
 8009118:	0800b91c 	.word	0x0800b91c
 800911c:	0800b68c 	.word	0x0800b68c
 8009120:	0800b690 	.word	0x0800b690
 8009124:	0800b7c8 	.word	0x0800b7c8
 8009128:	200003fc 	.word	0x200003fc
 800912c:	0800b93c 	.word	0x0800b93c
 8009130:	0800b950 	.word	0x0800b950
 8009134:	2000040c 	.word	0x2000040c
 8009138:	0800b960 	.word	0x0800b960
 800913c:	0800b978 	.word	0x0800b978
 8009140:	0800b984 	.word	0x0800b984
 8009144:	0800b994 	.word	0x0800b994
 8009148:	0800b9b4 	.word	0x0800b9b4
 800914c:	0800b9c8 	.word	0x0800b9c8
 8009150:	0800b9dc 	.word	0x0800b9dc
 8009154:	0800b9f0 	.word	0x0800b9f0
			}
			else
			{
				continue;
 8009158:	bf00      	nop
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 800915a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800915e:	f103 031c 	add.w	r3, r3, #28
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800916a:	f102 021c 	add.w	r2, r2, #28
 800916e:	7013      	strb	r3, [r2, #0]
 8009170:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009174:	f103 031c 	add.w	r3, r3, #28
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2bda      	cmp	r3, #218	; 0xda
 800917c:	d98f      	bls.n	800909e <Process_Received_Message+0x962>
			}
		}
		Message_Length = strlen(Message);
 800917e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009182:	3b1c      	subs	r3, #28
 8009184:	4618      	mov	r0, r3
 8009186:	f7f6 fff9 	bl	800017c <strlen>
 800918a:	4603      	mov	r3, r0
 800918c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009190:	f102 021e 	add.w	r2, r2, #30
 8009194:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009196:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800919a:	f103 031e 	add.w	r3, r3, #30
 800919e:	881a      	ldrh	r2, [r3, #0]
 80091a0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80091a4:	3b1c      	subs	r3, #28
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff faa1 	bl	80086f0 <CDC_Transmit_FS>
 80091ae:	e30f      	b.n	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Write Register:", strlen("Write Register:")) == 0)
 80091b0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80091b4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80091b8:	220f      	movs	r2, #15
 80091ba:	49b2      	ldr	r1, [pc, #712]	; (8009484 <Process_Received_Message+0xd48>)
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f000 ff66 	bl	800a08e <strncmp>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f040 80b3 	bne.w	8009330 <Process_Received_Message+0xbf4>
	{
		sprintf(str1, "User Input: Write Register\r\n");
 80091ca:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80091ce:	3b34      	subs	r3, #52	; 0x34
 80091d0:	49ad      	ldr	r1, [pc, #692]	; (8009488 <Process_Received_Message+0xd4c>)
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 ff2c 	bl	800a030 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 80091d8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80091dc:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80091e0:	49aa      	ldr	r1, [pc, #680]	; (800948c <Process_Received_Message+0xd50>)
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	f000 ff68 	bl	800a0b8 <strtok>
 80091e8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80091ec:	f103 0318 	add.w	r3, r3, #24
 80091f0:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 80091f2:	49a6      	ldr	r1, [pc, #664]	; (800948c <Process_Received_Message+0xd50>)
 80091f4:	2000      	movs	r0, #0
 80091f6:	f000 ff5f 	bl	800a0b8 <strtok>
 80091fa:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80091fe:	f103 0318 	add.w	r3, r3, #24
 8009202:	6018      	str	r0, [r3, #0]
		sprintf(str2, "Address to Access: ");
 8009204:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009208:	3b0c      	subs	r3, #12
 800920a:	49a1      	ldr	r1, [pc, #644]	; (8009490 <Process_Received_Message+0xd54>)
 800920c:	4618      	mov	r0, r3
 800920e:	f000 ff0f 	bl	800a030 <siprintf>
		Token = strtok(NULL, " "); // third token "[register address]"
 8009212:	499e      	ldr	r1, [pc, #632]	; (800948c <Process_Received_Message+0xd50>)
 8009214:	2000      	movs	r0, #0
 8009216:	f000 ff4f 	bl	800a0b8 <strtok>
 800921a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800921e:	f103 0318 	add.w	r3, r3, #24
 8009222:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009224:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009228:	3b24      	subs	r3, #36	; 0x24
 800922a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800922e:	f102 0218 	add.w	r2, r2, #24
 8009232:	6812      	ldr	r2, [r2, #0]
 8009234:	4997      	ldr	r1, [pc, #604]	; (8009494 <Process_Received_Message+0xd58>)
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fefa 	bl	800a030 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800923c:	2210      	movs	r2, #16
 800923e:	2100      	movs	r1, #0
 8009240:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009244:	f103 0318 	add.w	r3, r3, #24
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f001 f80d 	bl	800a268 <strtol>
 800924e:	4603      	mov	r3, r0
 8009250:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009254:	f102 021c 	add.w	r2, r2, #28
 8009258:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 800925a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800925e:	3b3c      	subs	r3, #60	; 0x3c
 8009260:	498d      	ldr	r1, [pc, #564]	; (8009498 <Process_Received_Message+0xd5c>)
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fee4 	bl	800a030 <siprintf>
		Token = strtok(NULL, "\r\n"); // fourth token "[register value]"
 8009268:	498c      	ldr	r1, [pc, #560]	; (800949c <Process_Received_Message+0xd60>)
 800926a:	2000      	movs	r0, #0
 800926c:	f000 ff24 	bl	800a0b8 <strtok>
 8009270:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009274:	f103 0318 	add.w	r3, r3, #24
 8009278:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 800927a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800927e:	3b14      	subs	r3, #20
 8009280:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009284:	f102 0218 	add.w	r2, r2, #24
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	4982      	ldr	r1, [pc, #520]	; (8009494 <Process_Received_Message+0xd58>)
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fecf 	bl	800a030 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8009292:	2210      	movs	r2, #16
 8009294:	2100      	movs	r1, #0
 8009296:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800929a:	f103 0318 	add.w	r3, r3, #24
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	f000 ffe2 	bl	800a268 <strtol>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80092aa:	f102 0216 	add.w	r2, r2, #22
 80092ae:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 80092b0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80092b4:	f103 0316 	add.w	r3, r3, #22
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80092be:	f103 031c 	add.w	r3, r3, #28
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	4619      	mov	r1, r3
 80092c6:	4876      	ldr	r0, [pc, #472]	; (80094a0 <Process_Received_Message+0xd64>)
 80092c8:	f7f7 f97e 	bl	80005c8 <CC1200_Write_Single_Register>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80092d2:	f102 0217 	add.w	r2, r2, #23
 80092d6:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 80092d8:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80092dc:	390c      	subs	r1, #12
 80092de:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80092e2:	3a34      	subs	r2, #52	; 0x34
 80092e4:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80092e8:	381c      	subs	r0, #28
 80092ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80092ee:	3b14      	subs	r3, #20
 80092f0:	9302      	str	r3, [sp, #8]
 80092f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80092f6:	3b3c      	subs	r3, #60	; 0x3c
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80092fe:	3b24      	subs	r3, #36	; 0x24
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	460b      	mov	r3, r1
 8009304:	4967      	ldr	r1, [pc, #412]	; (80094a4 <Process_Received_Message+0xd68>)
 8009306:	f000 fe93 	bl	800a030 <siprintf>
 800930a:	4603      	mov	r3, r0
 800930c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009310:	f102 021e 	add.w	r2, r2, #30
 8009314:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009316:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800931a:	f103 031e 	add.w	r3, r3, #30
 800931e:	881a      	ldrh	r2, [r3, #0]
 8009320:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009324:	3b1c      	subs	r3, #28
 8009326:	4611      	mov	r1, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff f9e1 	bl	80086f0 <CDC_Transmit_FS>
 800932e:	e24f      	b.n	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Read Register:", strlen("Read Register:")) == 0)
 8009330:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009334:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009338:	220e      	movs	r2, #14
 800933a:	495b      	ldr	r1, [pc, #364]	; (80094a8 <Process_Received_Message+0xd6c>)
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	f000 fea6 	bl	800a08e <strncmp>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	f040 80b9 	bne.w	80094bc <Process_Received_Message+0xd80>
	{
		sprintf(str1, "User Input: Read Register\r\n");
 800934a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800934e:	3b34      	subs	r3, #52	; 0x34
 8009350:	4956      	ldr	r1, [pc, #344]	; (80094ac <Process_Received_Message+0xd70>)
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fe6c 	bl	800a030 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009358:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800935c:	3b0c      	subs	r3, #12
 800935e:	494c      	ldr	r1, [pc, #304]	; (8009490 <Process_Received_Message+0xd54>)
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fe65 	bl	800a030 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8009366:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800936a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800936e:	4947      	ldr	r1, [pc, #284]	; (800948c <Process_Received_Message+0xd50>)
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f000 fea1 	bl	800a0b8 <strtok>
 8009376:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800937a:	f103 0318 	add.w	r3, r3, #24
 800937e:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 8009380:	4942      	ldr	r1, [pc, #264]	; (800948c <Process_Received_Message+0xd50>)
 8009382:	2000      	movs	r0, #0
 8009384:	f000 fe98 	bl	800a0b8 <strtok>
 8009388:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800938c:	f103 0318 	add.w	r3, r3, #24
 8009390:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // third token "[register address]"
 8009392:	4942      	ldr	r1, [pc, #264]	; (800949c <Process_Received_Message+0xd60>)
 8009394:	2000      	movs	r0, #0
 8009396:	f000 fe8f 	bl	800a0b8 <strtok>
 800939a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800939e:	f103 0318 	add.w	r3, r3, #24
 80093a2:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 80093a4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80093a8:	3b24      	subs	r3, #36	; 0x24
 80093aa:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80093ae:	f102 0218 	add.w	r2, r2, #24
 80093b2:	6812      	ldr	r2, [r2, #0]
 80093b4:	4937      	ldr	r1, [pc, #220]	; (8009494 <Process_Received_Message+0xd58>)
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fe3a 	bl	800a030 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80093bc:	2210      	movs	r2, #16
 80093be:	2100      	movs	r1, #0
 80093c0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093c4:	f103 0318 	add.w	r3, r3, #24
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	f000 ff4d 	bl	800a268 <strtol>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80093d4:	f102 021c 	add.w	r2, r2, #28
 80093d8:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 80093da:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093de:	f103 031c 	add.w	r3, r3, #28
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	4619      	mov	r1, r3
 80093e6:	482e      	ldr	r0, [pc, #184]	; (80094a0 <Process_Received_Message+0xd64>)
 80093e8:	f7f7 f92a 	bl	8000640 <CC1200_Read_Single_Register>
 80093ec:	4603      	mov	r3, r0
 80093ee:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80093f2:	f102 0217 	add.w	r2, r2, #23
 80093f6:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 80093f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80093fc:	3b3c      	subs	r3, #60	; 0x3c
 80093fe:	492c      	ldr	r1, [pc, #176]	; (80094b0 <Process_Received_Message+0xd74>)
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fe15 	bl	800a030 <siprintf>
		Register_Value = MISO_Data[0];
 8009406:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <Process_Received_Message+0xd78>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800940e:	f102 0216 	add.w	r2, r2, #22
 8009412:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 8009414:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009418:	f103 0316 	add.w	r3, r3, #22
 800941c:	781a      	ldrb	r2, [r3, #0]
 800941e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009422:	3b14      	subs	r3, #20
 8009424:	4924      	ldr	r1, [pc, #144]	; (80094b8 <Process_Received_Message+0xd7c>)
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fe02 	bl	800a030 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 800942c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009430:	390c      	subs	r1, #12
 8009432:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009436:	3a34      	subs	r2, #52	; 0x34
 8009438:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800943c:	381c      	subs	r0, #28
 800943e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009442:	3b14      	subs	r3, #20
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800944a:	3b3c      	subs	r3, #60	; 0x3c
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009452:	3b24      	subs	r3, #36	; 0x24
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	460b      	mov	r3, r1
 8009458:	4912      	ldr	r1, [pc, #72]	; (80094a4 <Process_Received_Message+0xd68>)
 800945a:	f000 fde9 	bl	800a030 <siprintf>
 800945e:	4603      	mov	r3, r0
 8009460:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009464:	f102 021e 	add.w	r2, r2, #30
 8009468:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800946a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800946e:	f103 031e 	add.w	r3, r3, #30
 8009472:	881a      	ldrh	r2, [r3, #0]
 8009474:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009478:	3b1c      	subs	r3, #28
 800947a:	4611      	mov	r1, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff f937 	bl	80086f0 <CDC_Transmit_FS>
 8009482:	e1a5      	b.n	80097d0 <Process_Received_Message+0x1094>
 8009484:	0800ba0c 	.word	0x0800ba0c
 8009488:	0800ba1c 	.word	0x0800ba1c
 800948c:	0800b68c 	.word	0x0800b68c
 8009490:	0800ba3c 	.word	0x0800ba3c
 8009494:	0800b7c8 	.word	0x0800b7c8
 8009498:	0800ba50 	.word	0x0800ba50
 800949c:	0800b690 	.word	0x0800b690
 80094a0:	200003fc 	.word	0x200003fc
 80094a4:	0800b978 	.word	0x0800b978
 80094a8:	0800ba60 	.word	0x0800ba60
 80094ac:	0800ba70 	.word	0x0800ba70
 80094b0:	0800ba8c 	.word	0x0800ba8c
 80094b4:	2000040c 	.word	0x2000040c
 80094b8:	0800b8ec 	.word	0x0800b8ec
	}
	else if (strncmp((char*) rx_buffer, "Write Extended Register:", strlen("Write Extended Register:")) == 0)
 80094bc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80094c0:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80094c4:	2218      	movs	r2, #24
 80094c6:	49c6      	ldr	r1, [pc, #792]	; (80097e0 <Process_Received_Message+0x10a4>)
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	f000 fde0 	bl	800a08e <strncmp>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f040 80bc 	bne.w	800964e <Process_Received_Message+0xf12>
	{
		sprintf(str1, "User Input: Write Extended Register\r\n");
 80094d6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80094da:	3b34      	subs	r3, #52	; 0x34
 80094dc:	49c1      	ldr	r1, [pc, #772]	; (80097e4 <Process_Received_Message+0x10a8>)
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fda6 	bl	800a030 <siprintf>
		sprintf(str2, "Address to Access: ");
 80094e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80094e8:	3b0c      	subs	r3, #12
 80094ea:	49bf      	ldr	r1, [pc, #764]	; (80097e8 <Process_Received_Message+0x10ac>)
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fd9f 	bl	800a030 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 80094f2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80094f6:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80094fa:	49bc      	ldr	r1, [pc, #752]	; (80097ec <Process_Received_Message+0x10b0>)
 80094fc:	6818      	ldr	r0, [r3, #0]
 80094fe:	f000 fddb 	bl	800a0b8 <strtok>
 8009502:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009506:	f103 0318 	add.w	r3, r3, #24
 800950a:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 800950c:	49b7      	ldr	r1, [pc, #732]	; (80097ec <Process_Received_Message+0x10b0>)
 800950e:	2000      	movs	r0, #0
 8009510:	f000 fdd2 	bl	800a0b8 <strtok>
 8009514:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009518:	f103 0318 	add.w	r3, r3, #24
 800951c:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 800951e:	49b3      	ldr	r1, [pc, #716]	; (80097ec <Process_Received_Message+0x10b0>)
 8009520:	2000      	movs	r0, #0
 8009522:	f000 fdc9 	bl	800a0b8 <strtok>
 8009526:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800952a:	f103 0318 	add.w	r3, r3, #24
 800952e:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // fourth token "[register address]"
 8009530:	49ae      	ldr	r1, [pc, #696]	; (80097ec <Process_Received_Message+0x10b0>)
 8009532:	2000      	movs	r0, #0
 8009534:	f000 fdc0 	bl	800a0b8 <strtok>
 8009538:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800953c:	f103 0318 	add.w	r3, r3, #24
 8009540:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009542:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009546:	3b24      	subs	r3, #36	; 0x24
 8009548:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800954c:	f102 0218 	add.w	r2, r2, #24
 8009550:	6812      	ldr	r2, [r2, #0]
 8009552:	49a7      	ldr	r1, [pc, #668]	; (80097f0 <Process_Received_Message+0x10b4>)
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fd6b 	bl	800a030 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800955a:	2210      	movs	r2, #16
 800955c:	2100      	movs	r1, #0
 800955e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009562:	f103 0318 	add.w	r3, r3, #24
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	f000 fe7e 	bl	800a268 <strtol>
 800956c:	4603      	mov	r3, r0
 800956e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009572:	f102 021c 	add.w	r2, r2, #28
 8009576:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 8009578:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800957c:	3b3c      	subs	r3, #60	; 0x3c
 800957e:	499d      	ldr	r1, [pc, #628]	; (80097f4 <Process_Received_Message+0x10b8>)
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fd55 	bl	800a030 <siprintf>
		Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8009586:	499c      	ldr	r1, [pc, #624]	; (80097f8 <Process_Received_Message+0x10bc>)
 8009588:	2000      	movs	r0, #0
 800958a:	f000 fd95 	bl	800a0b8 <strtok>
 800958e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009592:	f103 0318 	add.w	r3, r3, #24
 8009596:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 8009598:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800959c:	3b14      	subs	r3, #20
 800959e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80095a2:	f102 0218 	add.w	r2, r2, #24
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	4991      	ldr	r1, [pc, #580]	; (80097f0 <Process_Received_Message+0x10b4>)
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fd40 	bl	800a030 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 80095b0:	2210      	movs	r2, #16
 80095b2:	2100      	movs	r1, #0
 80095b4:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095b8:	f103 0318 	add.w	r3, r3, #24
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f000 fe53 	bl	800a268 <strtol>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80095c8:	f102 0216 	add.w	r2, r2, #22
 80095cc:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 80095ce:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095d2:	f103 0316 	add.w	r3, r3, #22
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095dc:	f103 031c 	add.w	r3, r3, #28
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	4619      	mov	r1, r3
 80095e4:	4885      	ldr	r0, [pc, #532]	; (80097fc <Process_Received_Message+0x10c0>)
 80095e6:	f7f7 f86b 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 80095ea:	4603      	mov	r3, r0
 80095ec:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80095f0:	f102 0217 	add.w	r2, r2, #23
 80095f4:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 80095f6:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80095fa:	390c      	subs	r1, #12
 80095fc:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009600:	3a34      	subs	r2, #52	; 0x34
 8009602:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009606:	381c      	subs	r0, #28
 8009608:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800960c:	3b14      	subs	r3, #20
 800960e:	9302      	str	r3, [sp, #8]
 8009610:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009614:	3b3c      	subs	r3, #60	; 0x3c
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800961c:	3b24      	subs	r3, #36	; 0x24
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	460b      	mov	r3, r1
 8009622:	4977      	ldr	r1, [pc, #476]	; (8009800 <Process_Received_Message+0x10c4>)
 8009624:	f000 fd04 	bl	800a030 <siprintf>
 8009628:	4603      	mov	r3, r0
 800962a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800962e:	f102 021e 	add.w	r2, r2, #30
 8009632:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009634:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009638:	f103 031e 	add.w	r3, r3, #30
 800963c:	881a      	ldrh	r2, [r3, #0]
 800963e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009642:	3b1c      	subs	r3, #28
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff f852 	bl	80086f0 <CDC_Transmit_FS>
 800964c:	e0c0      	b.n	80097d0 <Process_Received_Message+0x1094>
	}
	else if (strncmp((char*) rx_buffer, "Read Extended Register:", strlen("Read Extended Register:")) == 0)
 800964e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009652:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009656:	2217      	movs	r2, #23
 8009658:	496a      	ldr	r1, [pc, #424]	; (8009804 <Process_Received_Message+0x10c8>)
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	f000 fd17 	bl	800a08e <strncmp>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 80a6 	bne.w	80097b4 <Process_Received_Message+0x1078>
	{
		sprintf(str1, "User Input: Read Extended Register\r\n");
 8009668:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800966c:	3b34      	subs	r3, #52	; 0x34
 800966e:	4966      	ldr	r1, [pc, #408]	; (8009808 <Process_Received_Message+0x10cc>)
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fcdd 	bl	800a030 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009676:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800967a:	3b0c      	subs	r3, #12
 800967c:	495a      	ldr	r1, [pc, #360]	; (80097e8 <Process_Received_Message+0x10ac>)
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fcd6 	bl	800a030 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8009684:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009688:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800968c:	4957      	ldr	r1, [pc, #348]	; (80097ec <Process_Received_Message+0x10b0>)
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	f000 fd12 	bl	800a0b8 <strtok>
 8009694:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009698:	f103 0318 	add.w	r3, r3, #24
 800969c:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 800969e:	4953      	ldr	r1, [pc, #332]	; (80097ec <Process_Received_Message+0x10b0>)
 80096a0:	2000      	movs	r0, #0
 80096a2:	f000 fd09 	bl	800a0b8 <strtok>
 80096a6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80096aa:	f103 0318 	add.w	r3, r3, #24
 80096ae:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 80096b0:	494e      	ldr	r1, [pc, #312]	; (80097ec <Process_Received_Message+0x10b0>)
 80096b2:	2000      	movs	r0, #0
 80096b4:	f000 fd00 	bl	800a0b8 <strtok>
 80096b8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80096bc:	f103 0318 	add.w	r3, r3, #24
 80096c0:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 80096c2:	494d      	ldr	r1, [pc, #308]	; (80097f8 <Process_Received_Message+0x10bc>)
 80096c4:	2000      	movs	r0, #0
 80096c6:	f000 fcf7 	bl	800a0b8 <strtok>
 80096ca:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80096ce:	f103 0318 	add.w	r3, r3, #24
 80096d2:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 80096d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80096d8:	3b24      	subs	r3, #36	; 0x24
 80096da:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80096de:	f102 0218 	add.w	r2, r2, #24
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	4942      	ldr	r1, [pc, #264]	; (80097f0 <Process_Received_Message+0x10b4>)
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fca2 	bl	800a030 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80096ec:	2210      	movs	r2, #16
 80096ee:	2100      	movs	r1, #0
 80096f0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80096f4:	f103 0318 	add.w	r3, r3, #24
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	f000 fdb5 	bl	800a268 <strtol>
 80096fe:	4603      	mov	r3, r0
 8009700:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009704:	f102 021c 	add.w	r2, r2, #28
 8009708:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800970a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800970e:	f103 031c 	add.w	r3, r3, #28
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	4619      	mov	r1, r3
 8009716:	4839      	ldr	r0, [pc, #228]	; (80097fc <Process_Received_Message+0x10c0>)
 8009718:	f7f7 f824 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800971c:	4603      	mov	r3, r0
 800971e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009722:	f102 0217 	add.w	r2, r2, #23
 8009726:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 8009728:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800972c:	3b3c      	subs	r3, #60	; 0x3c
 800972e:	4937      	ldr	r1, [pc, #220]	; (800980c <Process_Received_Message+0x10d0>)
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fc7d 	bl	800a030 <siprintf>
		Register_Value = MISO_Data[0];
 8009736:	4b36      	ldr	r3, [pc, #216]	; (8009810 <Process_Received_Message+0x10d4>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800973e:	f102 0216 	add.w	r2, r2, #22
 8009742:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 8009744:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009748:	f103 0316 	add.w	r3, r3, #22
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009752:	3b14      	subs	r3, #20
 8009754:	492f      	ldr	r1, [pc, #188]	; (8009814 <Process_Received_Message+0x10d8>)
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fc6a 	bl	800a030 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 800975c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009760:	390c      	subs	r1, #12
 8009762:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009766:	3a34      	subs	r2, #52	; 0x34
 8009768:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800976c:	381c      	subs	r0, #28
 800976e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009772:	3b14      	subs	r3, #20
 8009774:	9302      	str	r3, [sp, #8]
 8009776:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800977a:	3b3c      	subs	r3, #60	; 0x3c
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009782:	3b24      	subs	r3, #36	; 0x24
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	460b      	mov	r3, r1
 8009788:	491d      	ldr	r1, [pc, #116]	; (8009800 <Process_Received_Message+0x10c4>)
 800978a:	f000 fc51 	bl	800a030 <siprintf>
 800978e:	4603      	mov	r3, r0
 8009790:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009794:	f102 021e 	add.w	r2, r2, #30
 8009798:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800979a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800979e:	f103 031e 	add.w	r3, r3, #30
 80097a2:	881a      	ldrh	r2, [r3, #0]
 80097a4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80097a8:	3b1c      	subs	r3, #28
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe ff9f 	bl	80086f0 <CDC_Transmit_FS>
 80097b2:	e00d      	b.n	80097d0 <Process_Received_Message+0x1094>
	}
	else
	{
		CDC_Transmit_FS(rx_buffer, rx_buffer_len);
 80097b4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80097b8:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	b29a      	uxth	r2, r3
 80097c0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80097c4:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80097c8:	4611      	mov	r1, r2
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	f7fe ff90 	bl	80086f0 <CDC_Transmit_FS>
	}

	return 0;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	f507 572a 	add.w	r7, r7, #10880	; 0x2a80
 80097d8:	3720      	adds	r7, #32
 80097da:	46bd      	mov	sp, r7
 80097dc:	bdb0      	pop	{r4, r5, r7, pc}
 80097de:	bf00      	nop
 80097e0:	0800baa0 	.word	0x0800baa0
 80097e4:	0800babc 	.word	0x0800babc
 80097e8:	0800ba3c 	.word	0x0800ba3c
 80097ec:	0800b68c 	.word	0x0800b68c
 80097f0:	0800b7c8 	.word	0x0800b7c8
 80097f4:	0800ba50 	.word	0x0800ba50
 80097f8:	0800b690 	.word	0x0800b690
 80097fc:	200003fc 	.word	0x200003fc
 8009800:	0800b978 	.word	0x0800b978
 8009804:	0800bae4 	.word	0x0800bae4
 8009808:	0800bafc 	.word	0x0800bafc
 800980c:	0800ba8c 	.word	0x0800ba8c
 8009810:	2000040c 	.word	0x2000040c
 8009814:	0800b8ec 	.word	0x0800b8ec

08009818 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2212      	movs	r2, #18
 8009828:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <USBD_FS_DeviceDescriptor+0x20>)
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	200002ac 	.word	0x200002ac

0800983c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2204      	movs	r2, #4
 800984c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800984e:	4b03      	ldr	r3, [pc, #12]	; (800985c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	200002c0 	.word	0x200002c0

08009860 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4907      	ldr	r1, [pc, #28]	; (8009894 <USBD_FS_ProductStrDescriptor+0x34>)
 8009876:	4808      	ldr	r0, [pc, #32]	; (8009898 <USBD_FS_ProductStrDescriptor+0x38>)
 8009878:	f7fe fd5a 	bl	8008330 <USBD_GetString>
 800987c:	e004      	b.n	8009888 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4904      	ldr	r1, [pc, #16]	; (8009894 <USBD_FS_ProductStrDescriptor+0x34>)
 8009882:	4805      	ldr	r0, [pc, #20]	; (8009898 <USBD_FS_ProductStrDescriptor+0x38>)
 8009884:	f7fe fd54 	bl	8008330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009888:	4b02      	ldr	r3, [pc, #8]	; (8009894 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20001f10 	.word	0x20001f10
 8009898:	0800bb24 	.word	0x0800bb24

0800989c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	6039      	str	r1, [r7, #0]
 80098a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	4904      	ldr	r1, [pc, #16]	; (80098bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098ac:	4804      	ldr	r0, [pc, #16]	; (80098c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098ae:	f7fe fd3f 	bl	8008330 <USBD_GetString>
  return USBD_StrDesc;
 80098b2:	4b02      	ldr	r3, [pc, #8]	; (80098bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20001f10 	.word	0x20001f10
 80098c0:	0800bb3c 	.word	0x0800bb3c

080098c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	6039      	str	r1, [r7, #0]
 80098ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	221a      	movs	r2, #26
 80098d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098d6:	f000 f843 	bl	8009960 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098da:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	200002c4 	.word	0x200002c4

080098e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	4907      	ldr	r1, [pc, #28]	; (800991c <USBD_FS_ConfigStrDescriptor+0x34>)
 80098fe:	4808      	ldr	r0, [pc, #32]	; (8009920 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009900:	f7fe fd16 	bl	8008330 <USBD_GetString>
 8009904:	e004      	b.n	8009910 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	4904      	ldr	r1, [pc, #16]	; (800991c <USBD_FS_ConfigStrDescriptor+0x34>)
 800990a:	4805      	ldr	r0, [pc, #20]	; (8009920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800990c:	f7fe fd10 	bl	8008330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20001f10 	.word	0x20001f10
 8009920:	0800bb50 	.word	0x0800bb50

08009924 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	6039      	str	r1, [r7, #0]
 800992e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d105      	bne.n	8009942 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	4907      	ldr	r1, [pc, #28]	; (8009958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800993a:	4808      	ldr	r0, [pc, #32]	; (800995c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800993c:	f7fe fcf8 	bl	8008330 <USBD_GetString>
 8009940:	e004      	b.n	800994c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	4904      	ldr	r1, [pc, #16]	; (8009958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009946:	4805      	ldr	r0, [pc, #20]	; (800995c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009948:	f7fe fcf2 	bl	8008330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800994c:	4b02      	ldr	r3, [pc, #8]	; (8009958 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20001f10 	.word	0x20001f10
 800995c:	0800bb5c 	.word	0x0800bb5c

08009960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009966:	4b0f      	ldr	r3, [pc, #60]	; (80099a4 <Get_SerialNum+0x44>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800996c:	4b0e      	ldr	r3, [pc, #56]	; (80099a8 <Get_SerialNum+0x48>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009972:	4b0e      	ldr	r3, [pc, #56]	; (80099ac <Get_SerialNum+0x4c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d009      	beq.n	800999a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009986:	2208      	movs	r2, #8
 8009988:	4909      	ldr	r1, [pc, #36]	; (80099b0 <Get_SerialNum+0x50>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f814 	bl	80099b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009990:	2204      	movs	r2, #4
 8009992:	4908      	ldr	r1, [pc, #32]	; (80099b4 <Get_SerialNum+0x54>)
 8009994:	68b8      	ldr	r0, [r7, #8]
 8009996:	f000 f80f 	bl	80099b8 <IntToUnicode>
  }
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	1ff800d0 	.word	0x1ff800d0
 80099a8:	1ff800d4 	.word	0x1ff800d4
 80099ac:	1ff800d8 	.word	0x1ff800d8
 80099b0:	200002c6 	.word	0x200002c6
 80099b4:	200002d6 	.word	0x200002d6

080099b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099ca:	2300      	movs	r3, #0
 80099cc:	75fb      	strb	r3, [r7, #23]
 80099ce:	e027      	b.n	8009a20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	0f1b      	lsrs	r3, r3, #28
 80099d4:	2b09      	cmp	r3, #9
 80099d6:	d80b      	bhi.n	80099f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	0f1b      	lsrs	r3, r3, #28
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	4619      	mov	r1, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	440b      	add	r3, r1
 80099e8:	3230      	adds	r2, #48	; 0x30
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	e00a      	b.n	8009a06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	0f1b      	lsrs	r3, r3, #28
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	4619      	mov	r1, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	440b      	add	r3, r1
 8009a00:	3237      	adds	r2, #55	; 0x37
 8009a02:	b2d2      	uxtb	r2, r2
 8009a04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	011b      	lsls	r3, r3, #4
 8009a0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	3301      	adds	r3, #1
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	75fb      	strb	r3, [r7, #23]
 8009a20:	7dfa      	ldrb	r2, [r7, #23]
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d3d3      	bcc.n	80099d0 <IntToUnicode+0x18>
  }
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr

08009a34 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d106      	bne.n	8009a54 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009a4c:	f043 0301 	orr.w	r3, r3, #1
 8009a50:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009a52:	e005      	b.n	8009a60 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	4a04      	ldr	r2, [pc, #16]	; (8009a6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009a5a:	f023 0301 	bic.w	r3, r3, #1
 8009a5e:	6053      	str	r3, [r2, #4]
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	40010000 	.word	0x40010000

08009a70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a0d      	ldr	r2, [pc, #52]	; (8009ab4 <HAL_PCD_MspInit+0x44>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d113      	bne.n	8009aaa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a82:	4b0d      	ldr	r3, [pc, #52]	; (8009ab8 <HAL_PCD_MspInit+0x48>)
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	4a0c      	ldr	r2, [pc, #48]	; (8009ab8 <HAL_PCD_MspInit+0x48>)
 8009a88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a8c:	6253      	str	r3, [r2, #36]	; 0x24
 8009a8e:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <HAL_PCD_MspInit+0x48>)
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	2014      	movs	r0, #20
 8009aa0:	f7f7 fc4d 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009aa4:	2014      	movs	r0, #20
 8009aa6:	f7f7 fc66 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009aaa:	bf00      	nop
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	40005c00 	.word	0x40005c00
 8009ab8:	40023800 	.word	0x40023800

08009abc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fd fd71 	bl	80075ba <USBD_LL_SetupStage>
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	440b      	add	r3, r1
 8009b00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f7fd fda3 	bl	8007654 <USBD_LL_DataOutStage>
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009b28:	78fa      	ldrb	r2, [r7, #3]
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	440b      	add	r3, r1
 8009b36:	333c      	adds	r3, #60	; 0x3c
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	f7fd fdfa 	bl	8007736 <USBD_LL_DataInStage>
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fd ff05 	bl	8007968 <USBD_LL_SOF>
}
 8009b5e:	bf00      	nop
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d001      	beq.n	8009b7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b7a:	f7f7 f8b3 	bl	8000ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b84:	7bfa      	ldrb	r2, [r7, #15]
 8009b86:	4611      	mov	r1, r2
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fd feba 	bl	8007902 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fd fe73 	bl	8007880 <USBD_LL_Reset>
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fd feb4 	bl	8007920 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <HAL_PCD_SuspendCallback+0x30>)
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	4a03      	ldr	r2, [pc, #12]	; (8009bd4 <HAL_PCD_SuspendCallback+0x30>)
 8009bc6:	f043 0306 	orr.w	r3, r3, #6
 8009bca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	e000ed00 	.word	0xe000ed00

08009bd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fd feae 	bl	8007948 <USBD_LL_Resume>
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009bfc:	4a28      	ldr	r2, [pc, #160]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a26      	ldr	r2, [pc, #152]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009c0c:	4b24      	ldr	r3, [pc, #144]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c0e:	4a25      	ldr	r2, [pc, #148]	; (8009ca4 <USBD_LL_Init+0xb0>)
 8009c10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c12:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c14:	2208      	movs	r2, #8
 8009c16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c18:	4b21      	ldr	r3, [pc, #132]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c1e:	4b20      	ldr	r3, [pc, #128]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c20:	2202      	movs	r2, #2
 8009c22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c24:	4b1e      	ldr	r3, [pc, #120]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c30:	481b      	ldr	r0, [pc, #108]	; (8009ca0 <USBD_LL_Init+0xac>)
 8009c32:	f7f7 fd7b 	bl	800172c <HAL_PCD_Init>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009c3c:	f7f7 f852 	bl	8000ce4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009c46:	2318      	movs	r3, #24
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	f7f9 f958 	bl	8002f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009c56:	2358      	movs	r3, #88	; 0x58
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2180      	movs	r1, #128	; 0x80
 8009c5c:	f7f9 f950 	bl	8002f00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009c66:	23c0      	movs	r3, #192	; 0xc0
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2181      	movs	r1, #129	; 0x81
 8009c6c:	f7f9 f948 	bl	8002f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009c76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	f7f9 f93f 	bl	8002f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2182      	movs	r1, #130	; 0x82
 8009c90:	f7f9 f936 	bl	8002f00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20002110 	.word	0x20002110
 8009ca4:	40005c00 	.word	0x40005c00

08009ca8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f7 fe12 	bl	80018e8 <HAL_PCD_Start>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f944 	bl	8009f58 <USBD_Get_USB_Status>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	461a      	mov	r2, r3
 8009cec:	4603      	mov	r3, r0
 8009cee:	70fb      	strb	r3, [r7, #3]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70bb      	strb	r3, [r7, #2]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d06:	78bb      	ldrb	r3, [r7, #2]
 8009d08:	883a      	ldrh	r2, [r7, #0]
 8009d0a:	78f9      	ldrb	r1, [r7, #3]
 8009d0c:	f7f7 ff2e 	bl	8001b6c <HAL_PCD_EP_Open>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f91e 	bl	8009f58 <USBD_Get_USB_Status>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7f7 ff75 	bl	8001c38 <HAL_PCD_EP_Close>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 f8ff 	bl	8009f58 <USBD_Get_USB_Status>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009d82:	78fa      	ldrb	r2, [r7, #3]
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7f8 f835 	bl	8001df6 <HAL_PCD_EP_SetStall>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f000 f8e0 	bl	8009f58 <USBD_Get_USB_Status>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7f8 f868 	bl	8001e9a <HAL_PCD_EP_ClrStall>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 f8c1 	bl	8009f58 <USBD_Get_USB_Status>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009df6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	da0c      	bge.n	8009e1a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e06:	68f9      	ldr	r1, [r7, #12]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	00db      	lsls	r3, r3, #3
 8009e12:	440b      	add	r3, r1
 8009e14:	3302      	adds	r3, #2
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	e00b      	b.n	8009e32 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e20:	68f9      	ldr	r1, [r7, #12]
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	440b      	add	r3, r1
 8009e2c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009e30:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e56:	78fa      	ldrb	r2, [r7, #3]
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f7 fe61 	bl	8001b22 <HAL_PCD_SetAddress>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 f876 	bl	8009f58 <USBD_Get_USB_Status>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	461a      	mov	r2, r3
 8009e86:	460b      	mov	r3, r1
 8009e88:	72fb      	strb	r3, [r7, #11]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009e9c:	893b      	ldrh	r3, [r7, #8]
 8009e9e:	7af9      	ldrb	r1, [r7, #11]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	f7f7 ff65 	bl	8001d70 <HAL_PCD_EP_Transmit>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f853 	bl	8009f58 <USBD_Get_USB_Status>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	460b      	mov	r3, r1
 8009ece:	72fb      	strb	r3, [r7, #11]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009ee2:	893b      	ldrh	r3, [r7, #8]
 8009ee4:	7af9      	ldrb	r1, [r7, #11]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	f7f7 feee 	bl	8001cc8 <HAL_PCD_EP_Receive>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f830 	bl	8009f58 <USBD_Get_USB_Status>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009efc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f18:	78fa      	ldrb	r2, [r7, #3]
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7f7 ff10 	bl	8001d42 <HAL_PCD_EP_GetRxCount>
 8009f22:	4603      	mov	r3, r0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f34:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <USBD_static_malloc+0x14>)
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bc80      	pop	{r7}
 8009f3e:	4770      	bx	lr
 8009f40:	200023fc 	.word	0x200023fc

08009f44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]

}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bc80      	pop	{r7}
 8009f54:	4770      	bx	lr
	...

08009f58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	2b03      	cmp	r3, #3
 8009f6a:	d817      	bhi.n	8009f9c <USBD_Get_USB_Status+0x44>
 8009f6c:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <USBD_Get_USB_Status+0x1c>)
 8009f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f72:	bf00      	nop
 8009f74:	08009f85 	.word	0x08009f85
 8009f78:	08009f8b 	.word	0x08009f8b
 8009f7c:	08009f91 	.word	0x08009f91
 8009f80:	08009f97 	.word	0x08009f97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
    break;
 8009f88:	e00b      	b.n	8009fa2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8e:	e008      	b.n	8009fa2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f90:	2301      	movs	r3, #1
 8009f92:	73fb      	strb	r3, [r7, #15]
    break;
 8009f94:	e005      	b.n	8009fa2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f96:	2302      	movs	r3, #2
 8009f98:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9a:	e002      	b.n	8009fa2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa0:	bf00      	nop
  }
  return usb_status;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bc80      	pop	{r7}
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop

08009fb0 <__errno>:
 8009fb0:	4b01      	ldr	r3, [pc, #4]	; (8009fb8 <__errno+0x8>)
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	200002e0 	.word	0x200002e0

08009fbc <__libc_init_array>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	4d0c      	ldr	r5, [pc, #48]	; (8009ff4 <__libc_init_array+0x38>)
 8009fc2:	4c0d      	ldr	r4, [pc, #52]	; (8009ff8 <__libc_init_array+0x3c>)
 8009fc4:	1b64      	subs	r4, r4, r5
 8009fc6:	10a4      	asrs	r4, r4, #2
 8009fc8:	42a6      	cmp	r6, r4
 8009fca:	d109      	bne.n	8009fe0 <__libc_init_array+0x24>
 8009fcc:	f001 fb04 	bl	800b5d8 <_init>
 8009fd0:	2600      	movs	r6, #0
 8009fd2:	4d0a      	ldr	r5, [pc, #40]	; (8009ffc <__libc_init_array+0x40>)
 8009fd4:	4c0a      	ldr	r4, [pc, #40]	; (800a000 <__libc_init_array+0x44>)
 8009fd6:	1b64      	subs	r4, r4, r5
 8009fd8:	10a4      	asrs	r4, r4, #2
 8009fda:	42a6      	cmp	r6, r4
 8009fdc:	d105      	bne.n	8009fea <__libc_init_array+0x2e>
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe4:	4798      	blx	r3
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7ee      	b.n	8009fc8 <__libc_init_array+0xc>
 8009fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fee:	4798      	blx	r3
 8009ff0:	3601      	adds	r6, #1
 8009ff2:	e7f2      	b.n	8009fda <__libc_init_array+0x1e>
 8009ff4:	0800bde0 	.word	0x0800bde0
 8009ff8:	0800bde0 	.word	0x0800bde0
 8009ffc:	0800bde0 	.word	0x0800bde0
 800a000:	0800bde4 	.word	0x0800bde4

0800a004 <memcpy>:
 800a004:	440a      	add	r2, r1
 800a006:	4291      	cmp	r1, r2
 800a008:	f100 33ff 	add.w	r3, r0, #4294967295
 800a00c:	d100      	bne.n	800a010 <memcpy+0xc>
 800a00e:	4770      	bx	lr
 800a010:	b510      	push	{r4, lr}
 800a012:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a016:	4291      	cmp	r1, r2
 800a018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a01c:	d1f9      	bne.n	800a012 <memcpy+0xe>
 800a01e:	bd10      	pop	{r4, pc}

0800a020 <memset>:
 800a020:	4603      	mov	r3, r0
 800a022:	4402      	add	r2, r0
 800a024:	4293      	cmp	r3, r2
 800a026:	d100      	bne.n	800a02a <memset+0xa>
 800a028:	4770      	bx	lr
 800a02a:	f803 1b01 	strb.w	r1, [r3], #1
 800a02e:	e7f9      	b.n	800a024 <memset+0x4>

0800a030 <siprintf>:
 800a030:	b40e      	push	{r1, r2, r3}
 800a032:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a036:	b500      	push	{lr}
 800a038:	b09c      	sub	sp, #112	; 0x70
 800a03a:	ab1d      	add	r3, sp, #116	; 0x74
 800a03c:	9002      	str	r0, [sp, #8]
 800a03e:	9006      	str	r0, [sp, #24]
 800a040:	9107      	str	r1, [sp, #28]
 800a042:	9104      	str	r1, [sp, #16]
 800a044:	4808      	ldr	r0, [pc, #32]	; (800a068 <siprintf+0x38>)
 800a046:	4909      	ldr	r1, [pc, #36]	; (800a06c <siprintf+0x3c>)
 800a048:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04c:	9105      	str	r1, [sp, #20]
 800a04e:	6800      	ldr	r0, [r0, #0]
 800a050:	a902      	add	r1, sp, #8
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	f000 fa82 	bl	800a55c <_svfiprintf_r>
 800a058:	2200      	movs	r2, #0
 800a05a:	9b02      	ldr	r3, [sp, #8]
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	b01c      	add	sp, #112	; 0x70
 800a060:	f85d eb04 	ldr.w	lr, [sp], #4
 800a064:	b003      	add	sp, #12
 800a066:	4770      	bx	lr
 800a068:	200002e0 	.word	0x200002e0
 800a06c:	ffff0208 	.word	0xffff0208

0800a070 <strcat>:
 800a070:	4602      	mov	r2, r0
 800a072:	b510      	push	{r4, lr}
 800a074:	7814      	ldrb	r4, [r2, #0]
 800a076:	4613      	mov	r3, r2
 800a078:	3201      	adds	r2, #1
 800a07a:	2c00      	cmp	r4, #0
 800a07c:	d1fa      	bne.n	800a074 <strcat+0x4>
 800a07e:	3b01      	subs	r3, #1
 800a080:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a084:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a088:	2a00      	cmp	r2, #0
 800a08a:	d1f9      	bne.n	800a080 <strcat+0x10>
 800a08c:	bd10      	pop	{r4, pc}

0800a08e <strncmp>:
 800a08e:	4603      	mov	r3, r0
 800a090:	b510      	push	{r4, lr}
 800a092:	b172      	cbz	r2, 800a0b2 <strncmp+0x24>
 800a094:	3901      	subs	r1, #1
 800a096:	1884      	adds	r4, r0, r2
 800a098:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a09c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0a0:	4290      	cmp	r0, r2
 800a0a2:	d101      	bne.n	800a0a8 <strncmp+0x1a>
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	d101      	bne.n	800a0ac <strncmp+0x1e>
 800a0a8:	1a80      	subs	r0, r0, r2
 800a0aa:	bd10      	pop	{r4, pc}
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d1f3      	bne.n	800a098 <strncmp+0xa>
 800a0b0:	e7fa      	b.n	800a0a8 <strncmp+0x1a>
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	e7f9      	b.n	800a0aa <strncmp+0x1c>
	...

0800a0b8 <strtok>:
 800a0b8:	4b16      	ldr	r3, [pc, #88]	; (800a114 <strtok+0x5c>)
 800a0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0be:	681f      	ldr	r7, [r3, #0]
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a0c4:	460e      	mov	r6, r1
 800a0c6:	b9ec      	cbnz	r4, 800a104 <strtok+0x4c>
 800a0c8:	2050      	movs	r0, #80	; 0x50
 800a0ca:	f000 f907 	bl	800a2dc <malloc>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	65b8      	str	r0, [r7, #88]	; 0x58
 800a0d2:	b920      	cbnz	r0, 800a0de <strtok+0x26>
 800a0d4:	2157      	movs	r1, #87	; 0x57
 800a0d6:	4b10      	ldr	r3, [pc, #64]	; (800a118 <strtok+0x60>)
 800a0d8:	4810      	ldr	r0, [pc, #64]	; (800a11c <strtok+0x64>)
 800a0da:	f000 f8cf 	bl	800a27c <__assert_func>
 800a0de:	e9c0 4400 	strd	r4, r4, [r0]
 800a0e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a0e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a0ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a0ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a0f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a0f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a0fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a0fe:	6184      	str	r4, [r0, #24]
 800a100:	7704      	strb	r4, [r0, #28]
 800a102:	6244      	str	r4, [r0, #36]	; 0x24
 800a104:	4631      	mov	r1, r6
 800a106:	4628      	mov	r0, r5
 800a108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a10a:	2301      	movs	r3, #1
 800a10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	f000 b806 	b.w	800a120 <__strtok_r>
 800a114:	200002e0 	.word	0x200002e0
 800a118:	0800bb94 	.word	0x0800bb94
 800a11c:	0800bbab 	.word	0x0800bbab

0800a120 <__strtok_r>:
 800a120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a122:	b908      	cbnz	r0, 800a128 <__strtok_r+0x8>
 800a124:	6810      	ldr	r0, [r2, #0]
 800a126:	b188      	cbz	r0, 800a14c <__strtok_r+0x2c>
 800a128:	4604      	mov	r4, r0
 800a12a:	460f      	mov	r7, r1
 800a12c:	4620      	mov	r0, r4
 800a12e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a132:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a136:	b91e      	cbnz	r6, 800a140 <__strtok_r+0x20>
 800a138:	b965      	cbnz	r5, 800a154 <__strtok_r+0x34>
 800a13a:	4628      	mov	r0, r5
 800a13c:	6015      	str	r5, [r2, #0]
 800a13e:	e005      	b.n	800a14c <__strtok_r+0x2c>
 800a140:	42b5      	cmp	r5, r6
 800a142:	d1f6      	bne.n	800a132 <__strtok_r+0x12>
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1f0      	bne.n	800a12a <__strtok_r+0xa>
 800a148:	6014      	str	r4, [r2, #0]
 800a14a:	7003      	strb	r3, [r0, #0]
 800a14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a14e:	461c      	mov	r4, r3
 800a150:	e00c      	b.n	800a16c <__strtok_r+0x4c>
 800a152:	b915      	cbnz	r5, 800a15a <__strtok_r+0x3a>
 800a154:	460e      	mov	r6, r1
 800a156:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a15a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a15e:	42ab      	cmp	r3, r5
 800a160:	d1f7      	bne.n	800a152 <__strtok_r+0x32>
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0f3      	beq.n	800a14e <__strtok_r+0x2e>
 800a166:	2300      	movs	r3, #0
 800a168:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a16c:	6014      	str	r4, [r2, #0]
 800a16e:	e7ed      	b.n	800a14c <__strtok_r+0x2c>

0800a170 <_strtol_l.constprop.0>:
 800a170:	2b01      	cmp	r3, #1
 800a172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a176:	4680      	mov	r8, r0
 800a178:	d001      	beq.n	800a17e <_strtol_l.constprop.0+0xe>
 800a17a:	2b24      	cmp	r3, #36	; 0x24
 800a17c:	d906      	bls.n	800a18c <_strtol_l.constprop.0+0x1c>
 800a17e:	f7ff ff17 	bl	8009fb0 <__errno>
 800a182:	2316      	movs	r3, #22
 800a184:	6003      	str	r3, [r0, #0]
 800a186:	2000      	movs	r0, #0
 800a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18c:	460d      	mov	r5, r1
 800a18e:	4f35      	ldr	r7, [pc, #212]	; (800a264 <_strtol_l.constprop.0+0xf4>)
 800a190:	4628      	mov	r0, r5
 800a192:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a196:	5de6      	ldrb	r6, [r4, r7]
 800a198:	f016 0608 	ands.w	r6, r6, #8
 800a19c:	d1f8      	bne.n	800a190 <_strtol_l.constprop.0+0x20>
 800a19e:	2c2d      	cmp	r4, #45	; 0x2d
 800a1a0:	d12f      	bne.n	800a202 <_strtol_l.constprop.0+0x92>
 800a1a2:	2601      	movs	r6, #1
 800a1a4:	782c      	ldrb	r4, [r5, #0]
 800a1a6:	1c85      	adds	r5, r0, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d057      	beq.n	800a25c <_strtol_l.constprop.0+0xec>
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d109      	bne.n	800a1c4 <_strtol_l.constprop.0+0x54>
 800a1b0:	2c30      	cmp	r4, #48	; 0x30
 800a1b2:	d107      	bne.n	800a1c4 <_strtol_l.constprop.0+0x54>
 800a1b4:	7828      	ldrb	r0, [r5, #0]
 800a1b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a1ba:	2858      	cmp	r0, #88	; 0x58
 800a1bc:	d149      	bne.n	800a252 <_strtol_l.constprop.0+0xe2>
 800a1be:	2310      	movs	r3, #16
 800a1c0:	786c      	ldrb	r4, [r5, #1]
 800a1c2:	3502      	adds	r5, #2
 800a1c4:	2700      	movs	r7, #0
 800a1c6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a1ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a1ce:	fbbe f9f3 	udiv	r9, lr, r3
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	fb03 ea19 	mls	sl, r3, r9, lr
 800a1d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a1dc:	f1bc 0f09 	cmp.w	ip, #9
 800a1e0:	d814      	bhi.n	800a20c <_strtol_l.constprop.0+0x9c>
 800a1e2:	4664      	mov	r4, ip
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	dd22      	ble.n	800a22e <_strtol_l.constprop.0+0xbe>
 800a1e8:	2f00      	cmp	r7, #0
 800a1ea:	db1d      	blt.n	800a228 <_strtol_l.constprop.0+0xb8>
 800a1ec:	4581      	cmp	r9, r0
 800a1ee:	d31b      	bcc.n	800a228 <_strtol_l.constprop.0+0xb8>
 800a1f0:	d101      	bne.n	800a1f6 <_strtol_l.constprop.0+0x86>
 800a1f2:	45a2      	cmp	sl, r4
 800a1f4:	db18      	blt.n	800a228 <_strtol_l.constprop.0+0xb8>
 800a1f6:	2701      	movs	r7, #1
 800a1f8:	fb00 4003 	mla	r0, r0, r3, r4
 800a1fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a200:	e7ea      	b.n	800a1d8 <_strtol_l.constprop.0+0x68>
 800a202:	2c2b      	cmp	r4, #43	; 0x2b
 800a204:	bf04      	itt	eq
 800a206:	782c      	ldrbeq	r4, [r5, #0]
 800a208:	1c85      	addeq	r5, r0, #2
 800a20a:	e7cd      	b.n	800a1a8 <_strtol_l.constprop.0+0x38>
 800a20c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a210:	f1bc 0f19 	cmp.w	ip, #25
 800a214:	d801      	bhi.n	800a21a <_strtol_l.constprop.0+0xaa>
 800a216:	3c37      	subs	r4, #55	; 0x37
 800a218:	e7e4      	b.n	800a1e4 <_strtol_l.constprop.0+0x74>
 800a21a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a21e:	f1bc 0f19 	cmp.w	ip, #25
 800a222:	d804      	bhi.n	800a22e <_strtol_l.constprop.0+0xbe>
 800a224:	3c57      	subs	r4, #87	; 0x57
 800a226:	e7dd      	b.n	800a1e4 <_strtol_l.constprop.0+0x74>
 800a228:	f04f 37ff 	mov.w	r7, #4294967295
 800a22c:	e7e6      	b.n	800a1fc <_strtol_l.constprop.0+0x8c>
 800a22e:	2f00      	cmp	r7, #0
 800a230:	da07      	bge.n	800a242 <_strtol_l.constprop.0+0xd2>
 800a232:	2322      	movs	r3, #34	; 0x22
 800a234:	4670      	mov	r0, lr
 800a236:	f8c8 3000 	str.w	r3, [r8]
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	d0a4      	beq.n	800a188 <_strtol_l.constprop.0+0x18>
 800a23e:	1e69      	subs	r1, r5, #1
 800a240:	e005      	b.n	800a24e <_strtol_l.constprop.0+0xde>
 800a242:	b106      	cbz	r6, 800a246 <_strtol_l.constprop.0+0xd6>
 800a244:	4240      	negs	r0, r0
 800a246:	2a00      	cmp	r2, #0
 800a248:	d09e      	beq.n	800a188 <_strtol_l.constprop.0+0x18>
 800a24a:	2f00      	cmp	r7, #0
 800a24c:	d1f7      	bne.n	800a23e <_strtol_l.constprop.0+0xce>
 800a24e:	6011      	str	r1, [r2, #0]
 800a250:	e79a      	b.n	800a188 <_strtol_l.constprop.0+0x18>
 800a252:	2430      	movs	r4, #48	; 0x30
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1b5      	bne.n	800a1c4 <_strtol_l.constprop.0+0x54>
 800a258:	2308      	movs	r3, #8
 800a25a:	e7b3      	b.n	800a1c4 <_strtol_l.constprop.0+0x54>
 800a25c:	2c30      	cmp	r4, #48	; 0x30
 800a25e:	d0a9      	beq.n	800a1b4 <_strtol_l.constprop.0+0x44>
 800a260:	230a      	movs	r3, #10
 800a262:	e7af      	b.n	800a1c4 <_strtol_l.constprop.0+0x54>
 800a264:	0800bc45 	.word	0x0800bc45

0800a268 <strtol>:
 800a268:	4613      	mov	r3, r2
 800a26a:	460a      	mov	r2, r1
 800a26c:	4601      	mov	r1, r0
 800a26e:	4802      	ldr	r0, [pc, #8]	; (800a278 <strtol+0x10>)
 800a270:	6800      	ldr	r0, [r0, #0]
 800a272:	f7ff bf7d 	b.w	800a170 <_strtol_l.constprop.0>
 800a276:	bf00      	nop
 800a278:	200002e0 	.word	0x200002e0

0800a27c <__assert_func>:
 800a27c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a27e:	4614      	mov	r4, r2
 800a280:	461a      	mov	r2, r3
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <__assert_func+0x2c>)
 800a284:	4605      	mov	r5, r0
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68d8      	ldr	r0, [r3, #12]
 800a28a:	b14c      	cbz	r4, 800a2a0 <__assert_func+0x24>
 800a28c:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <__assert_func+0x30>)
 800a28e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a292:	9100      	str	r1, [sp, #0]
 800a294:	462b      	mov	r3, r5
 800a296:	4906      	ldr	r1, [pc, #24]	; (800a2b0 <__assert_func+0x34>)
 800a298:	f000 f80e 	bl	800a2b8 <fiprintf>
 800a29c:	f000 fe1c 	bl	800aed8 <abort>
 800a2a0:	4b04      	ldr	r3, [pc, #16]	; (800a2b4 <__assert_func+0x38>)
 800a2a2:	461c      	mov	r4, r3
 800a2a4:	e7f3      	b.n	800a28e <__assert_func+0x12>
 800a2a6:	bf00      	nop
 800a2a8:	200002e0 	.word	0x200002e0
 800a2ac:	0800bc08 	.word	0x0800bc08
 800a2b0:	0800bc15 	.word	0x0800bc15
 800a2b4:	0800bc43 	.word	0x0800bc43

0800a2b8 <fiprintf>:
 800a2b8:	b40e      	push	{r1, r2, r3}
 800a2ba:	b503      	push	{r0, r1, lr}
 800a2bc:	4601      	mov	r1, r0
 800a2be:	ab03      	add	r3, sp, #12
 800a2c0:	4805      	ldr	r0, [pc, #20]	; (800a2d8 <fiprintf+0x20>)
 800a2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c6:	6800      	ldr	r0, [r0, #0]
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	f000 fa6f 	bl	800a7ac <_vfiprintf_r>
 800a2ce:	b002      	add	sp, #8
 800a2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2d4:	b003      	add	sp, #12
 800a2d6:	4770      	bx	lr
 800a2d8:	200002e0 	.word	0x200002e0

0800a2dc <malloc>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <malloc+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f000 b86b 	b.w	800a3bc <_malloc_r>
 800a2e6:	bf00      	nop
 800a2e8:	200002e0 	.word	0x200002e0

0800a2ec <_free_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	d040      	beq.n	800a376 <_free_r+0x8a>
 800a2f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2f8:	1f0c      	subs	r4, r1, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bfb8      	it	lt
 800a2fe:	18e4      	addlt	r4, r4, r3
 800a300:	f001 f836 	bl	800b370 <__malloc_lock>
 800a304:	4a1c      	ldr	r2, [pc, #112]	; (800a378 <_free_r+0x8c>)
 800a306:	6813      	ldr	r3, [r2, #0]
 800a308:	b933      	cbnz	r3, 800a318 <_free_r+0x2c>
 800a30a:	6063      	str	r3, [r4, #4]
 800a30c:	6014      	str	r4, [r2, #0]
 800a30e:	4628      	mov	r0, r5
 800a310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a314:	f001 b832 	b.w	800b37c <__malloc_unlock>
 800a318:	42a3      	cmp	r3, r4
 800a31a:	d908      	bls.n	800a32e <_free_r+0x42>
 800a31c:	6820      	ldr	r0, [r4, #0]
 800a31e:	1821      	adds	r1, r4, r0
 800a320:	428b      	cmp	r3, r1
 800a322:	bf01      	itttt	eq
 800a324:	6819      	ldreq	r1, [r3, #0]
 800a326:	685b      	ldreq	r3, [r3, #4]
 800a328:	1809      	addeq	r1, r1, r0
 800a32a:	6021      	streq	r1, [r4, #0]
 800a32c:	e7ed      	b.n	800a30a <_free_r+0x1e>
 800a32e:	461a      	mov	r2, r3
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	b10b      	cbz	r3, 800a338 <_free_r+0x4c>
 800a334:	42a3      	cmp	r3, r4
 800a336:	d9fa      	bls.n	800a32e <_free_r+0x42>
 800a338:	6811      	ldr	r1, [r2, #0]
 800a33a:	1850      	adds	r0, r2, r1
 800a33c:	42a0      	cmp	r0, r4
 800a33e:	d10b      	bne.n	800a358 <_free_r+0x6c>
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	4401      	add	r1, r0
 800a344:	1850      	adds	r0, r2, r1
 800a346:	4283      	cmp	r3, r0
 800a348:	6011      	str	r1, [r2, #0]
 800a34a:	d1e0      	bne.n	800a30e <_free_r+0x22>
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4401      	add	r1, r0
 800a352:	6011      	str	r1, [r2, #0]
 800a354:	6053      	str	r3, [r2, #4]
 800a356:	e7da      	b.n	800a30e <_free_r+0x22>
 800a358:	d902      	bls.n	800a360 <_free_r+0x74>
 800a35a:	230c      	movs	r3, #12
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	e7d6      	b.n	800a30e <_free_r+0x22>
 800a360:	6820      	ldr	r0, [r4, #0]
 800a362:	1821      	adds	r1, r4, r0
 800a364:	428b      	cmp	r3, r1
 800a366:	bf01      	itttt	eq
 800a368:	6819      	ldreq	r1, [r3, #0]
 800a36a:	685b      	ldreq	r3, [r3, #4]
 800a36c:	1809      	addeq	r1, r1, r0
 800a36e:	6021      	streq	r1, [r4, #0]
 800a370:	6063      	str	r3, [r4, #4]
 800a372:	6054      	str	r4, [r2, #4]
 800a374:	e7cb      	b.n	800a30e <_free_r+0x22>
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	2000261c 	.word	0x2000261c

0800a37c <sbrk_aligned>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	4e0e      	ldr	r6, [pc, #56]	; (800a3b8 <sbrk_aligned+0x3c>)
 800a380:	460c      	mov	r4, r1
 800a382:	6831      	ldr	r1, [r6, #0]
 800a384:	4605      	mov	r5, r0
 800a386:	b911      	cbnz	r1, 800a38e <sbrk_aligned+0x12>
 800a388:	f000 fcd6 	bl	800ad38 <_sbrk_r>
 800a38c:	6030      	str	r0, [r6, #0]
 800a38e:	4621      	mov	r1, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f000 fcd1 	bl	800ad38 <_sbrk_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d00a      	beq.n	800a3b0 <sbrk_aligned+0x34>
 800a39a:	1cc4      	adds	r4, r0, #3
 800a39c:	f024 0403 	bic.w	r4, r4, #3
 800a3a0:	42a0      	cmp	r0, r4
 800a3a2:	d007      	beq.n	800a3b4 <sbrk_aligned+0x38>
 800a3a4:	1a21      	subs	r1, r4, r0
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 fcc6 	bl	800ad38 <_sbrk_r>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d101      	bne.n	800a3b4 <sbrk_aligned+0x38>
 800a3b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	20002620 	.word	0x20002620

0800a3bc <_malloc_r>:
 800a3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c0:	1ccd      	adds	r5, r1, #3
 800a3c2:	f025 0503 	bic.w	r5, r5, #3
 800a3c6:	3508      	adds	r5, #8
 800a3c8:	2d0c      	cmp	r5, #12
 800a3ca:	bf38      	it	cc
 800a3cc:	250c      	movcc	r5, #12
 800a3ce:	2d00      	cmp	r5, #0
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	db01      	blt.n	800a3d8 <_malloc_r+0x1c>
 800a3d4:	42a9      	cmp	r1, r5
 800a3d6:	d905      	bls.n	800a3e4 <_malloc_r+0x28>
 800a3d8:	230c      	movs	r3, #12
 800a3da:	2600      	movs	r6, #0
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	4630      	mov	r0, r6
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	4e2e      	ldr	r6, [pc, #184]	; (800a4a0 <_malloc_r+0xe4>)
 800a3e6:	f000 ffc3 	bl	800b370 <__malloc_lock>
 800a3ea:	6833      	ldr	r3, [r6, #0]
 800a3ec:	461c      	mov	r4, r3
 800a3ee:	bb34      	cbnz	r4, 800a43e <_malloc_r+0x82>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f7ff ffc2 	bl	800a37c <sbrk_aligned>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	d14d      	bne.n	800a49a <_malloc_r+0xde>
 800a3fe:	6834      	ldr	r4, [r6, #0]
 800a400:	4626      	mov	r6, r4
 800a402:	2e00      	cmp	r6, #0
 800a404:	d140      	bne.n	800a488 <_malloc_r+0xcc>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	4631      	mov	r1, r6
 800a40a:	4638      	mov	r0, r7
 800a40c:	eb04 0803 	add.w	r8, r4, r3
 800a410:	f000 fc92 	bl	800ad38 <_sbrk_r>
 800a414:	4580      	cmp	r8, r0
 800a416:	d13a      	bne.n	800a48e <_malloc_r+0xd2>
 800a418:	6821      	ldr	r1, [r4, #0]
 800a41a:	3503      	adds	r5, #3
 800a41c:	1a6d      	subs	r5, r5, r1
 800a41e:	f025 0503 	bic.w	r5, r5, #3
 800a422:	3508      	adds	r5, #8
 800a424:	2d0c      	cmp	r5, #12
 800a426:	bf38      	it	cc
 800a428:	250c      	movcc	r5, #12
 800a42a:	4638      	mov	r0, r7
 800a42c:	4629      	mov	r1, r5
 800a42e:	f7ff ffa5 	bl	800a37c <sbrk_aligned>
 800a432:	3001      	adds	r0, #1
 800a434:	d02b      	beq.n	800a48e <_malloc_r+0xd2>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	442b      	add	r3, r5
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	e00e      	b.n	800a45c <_malloc_r+0xa0>
 800a43e:	6822      	ldr	r2, [r4, #0]
 800a440:	1b52      	subs	r2, r2, r5
 800a442:	d41e      	bmi.n	800a482 <_malloc_r+0xc6>
 800a444:	2a0b      	cmp	r2, #11
 800a446:	d916      	bls.n	800a476 <_malloc_r+0xba>
 800a448:	1961      	adds	r1, r4, r5
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	6025      	str	r5, [r4, #0]
 800a44e:	bf18      	it	ne
 800a450:	6059      	strne	r1, [r3, #4]
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	bf08      	it	eq
 800a456:	6031      	streq	r1, [r6, #0]
 800a458:	5162      	str	r2, [r4, r5]
 800a45a:	604b      	str	r3, [r1, #4]
 800a45c:	4638      	mov	r0, r7
 800a45e:	f104 060b 	add.w	r6, r4, #11
 800a462:	f000 ff8b 	bl	800b37c <__malloc_unlock>
 800a466:	f026 0607 	bic.w	r6, r6, #7
 800a46a:	1d23      	adds	r3, r4, #4
 800a46c:	1af2      	subs	r2, r6, r3
 800a46e:	d0b6      	beq.n	800a3de <_malloc_r+0x22>
 800a470:	1b9b      	subs	r3, r3, r6
 800a472:	50a3      	str	r3, [r4, r2]
 800a474:	e7b3      	b.n	800a3de <_malloc_r+0x22>
 800a476:	6862      	ldr	r2, [r4, #4]
 800a478:	42a3      	cmp	r3, r4
 800a47a:	bf0c      	ite	eq
 800a47c:	6032      	streq	r2, [r6, #0]
 800a47e:	605a      	strne	r2, [r3, #4]
 800a480:	e7ec      	b.n	800a45c <_malloc_r+0xa0>
 800a482:	4623      	mov	r3, r4
 800a484:	6864      	ldr	r4, [r4, #4]
 800a486:	e7b2      	b.n	800a3ee <_malloc_r+0x32>
 800a488:	4634      	mov	r4, r6
 800a48a:	6876      	ldr	r6, [r6, #4]
 800a48c:	e7b9      	b.n	800a402 <_malloc_r+0x46>
 800a48e:	230c      	movs	r3, #12
 800a490:	4638      	mov	r0, r7
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	f000 ff72 	bl	800b37c <__malloc_unlock>
 800a498:	e7a1      	b.n	800a3de <_malloc_r+0x22>
 800a49a:	6025      	str	r5, [r4, #0]
 800a49c:	e7de      	b.n	800a45c <_malloc_r+0xa0>
 800a49e:	bf00      	nop
 800a4a0:	2000261c 	.word	0x2000261c

0800a4a4 <__ssputs_r>:
 800a4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	688e      	ldr	r6, [r1, #8]
 800a4aa:	4682      	mov	sl, r0
 800a4ac:	429e      	cmp	r6, r3
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	4690      	mov	r8, r2
 800a4b2:	461f      	mov	r7, r3
 800a4b4:	d838      	bhi.n	800a528 <__ssputs_r+0x84>
 800a4b6:	898a      	ldrh	r2, [r1, #12]
 800a4b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4bc:	d032      	beq.n	800a524 <__ssputs_r+0x80>
 800a4be:	6825      	ldr	r5, [r4, #0]
 800a4c0:	6909      	ldr	r1, [r1, #16]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	eba5 0901 	sub.w	r9, r5, r1
 800a4c8:	6965      	ldr	r5, [r4, #20]
 800a4ca:	444b      	add	r3, r9
 800a4cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4d4:	106d      	asrs	r5, r5, #1
 800a4d6:	429d      	cmp	r5, r3
 800a4d8:	bf38      	it	cc
 800a4da:	461d      	movcc	r5, r3
 800a4dc:	0553      	lsls	r3, r2, #21
 800a4de:	d531      	bpl.n	800a544 <__ssputs_r+0xa0>
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	f7ff ff6b 	bl	800a3bc <_malloc_r>
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	b950      	cbnz	r0, 800a500 <__ssputs_r+0x5c>
 800a4ea:	230c      	movs	r3, #12
 800a4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f0:	f8ca 3000 	str.w	r3, [sl]
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4fa:	81a3      	strh	r3, [r4, #12]
 800a4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a500:	464a      	mov	r2, r9
 800a502:	6921      	ldr	r1, [r4, #16]
 800a504:	f7ff fd7e 	bl	800a004 <memcpy>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a50e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	6126      	str	r6, [r4, #16]
 800a516:	444e      	add	r6, r9
 800a518:	6026      	str	r6, [r4, #0]
 800a51a:	463e      	mov	r6, r7
 800a51c:	6165      	str	r5, [r4, #20]
 800a51e:	eba5 0509 	sub.w	r5, r5, r9
 800a522:	60a5      	str	r5, [r4, #8]
 800a524:	42be      	cmp	r6, r7
 800a526:	d900      	bls.n	800a52a <__ssputs_r+0x86>
 800a528:	463e      	mov	r6, r7
 800a52a:	4632      	mov	r2, r6
 800a52c:	4641      	mov	r1, r8
 800a52e:	6820      	ldr	r0, [r4, #0]
 800a530:	f000 ff04 	bl	800b33c <memmove>
 800a534:	68a3      	ldr	r3, [r4, #8]
 800a536:	2000      	movs	r0, #0
 800a538:	1b9b      	subs	r3, r3, r6
 800a53a:	60a3      	str	r3, [r4, #8]
 800a53c:	6823      	ldr	r3, [r4, #0]
 800a53e:	4433      	add	r3, r6
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	e7db      	b.n	800a4fc <__ssputs_r+0x58>
 800a544:	462a      	mov	r2, r5
 800a546:	f000 ff1f 	bl	800b388 <_realloc_r>
 800a54a:	4606      	mov	r6, r0
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d1e1      	bne.n	800a514 <__ssputs_r+0x70>
 800a550:	4650      	mov	r0, sl
 800a552:	6921      	ldr	r1, [r4, #16]
 800a554:	f7ff feca 	bl	800a2ec <_free_r>
 800a558:	e7c7      	b.n	800a4ea <__ssputs_r+0x46>
	...

0800a55c <_svfiprintf_r>:
 800a55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a560:	4698      	mov	r8, r3
 800a562:	898b      	ldrh	r3, [r1, #12]
 800a564:	4607      	mov	r7, r0
 800a566:	061b      	lsls	r3, r3, #24
 800a568:	460d      	mov	r5, r1
 800a56a:	4614      	mov	r4, r2
 800a56c:	b09d      	sub	sp, #116	; 0x74
 800a56e:	d50e      	bpl.n	800a58e <_svfiprintf_r+0x32>
 800a570:	690b      	ldr	r3, [r1, #16]
 800a572:	b963      	cbnz	r3, 800a58e <_svfiprintf_r+0x32>
 800a574:	2140      	movs	r1, #64	; 0x40
 800a576:	f7ff ff21 	bl	800a3bc <_malloc_r>
 800a57a:	6028      	str	r0, [r5, #0]
 800a57c:	6128      	str	r0, [r5, #16]
 800a57e:	b920      	cbnz	r0, 800a58a <_svfiprintf_r+0x2e>
 800a580:	230c      	movs	r3, #12
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	f04f 30ff 	mov.w	r0, #4294967295
 800a588:	e0d1      	b.n	800a72e <_svfiprintf_r+0x1d2>
 800a58a:	2340      	movs	r3, #64	; 0x40
 800a58c:	616b      	str	r3, [r5, #20]
 800a58e:	2300      	movs	r3, #0
 800a590:	9309      	str	r3, [sp, #36]	; 0x24
 800a592:	2320      	movs	r3, #32
 800a594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a598:	2330      	movs	r3, #48	; 0x30
 800a59a:	f04f 0901 	mov.w	r9, #1
 800a59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a748 <_svfiprintf_r+0x1ec>
 800a5a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5aa:	4623      	mov	r3, r4
 800a5ac:	469a      	mov	sl, r3
 800a5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b2:	b10a      	cbz	r2, 800a5b8 <_svfiprintf_r+0x5c>
 800a5b4:	2a25      	cmp	r2, #37	; 0x25
 800a5b6:	d1f9      	bne.n	800a5ac <_svfiprintf_r+0x50>
 800a5b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a5bc:	d00b      	beq.n	800a5d6 <_svfiprintf_r+0x7a>
 800a5be:	465b      	mov	r3, fp
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	f7ff ff6d 	bl	800a4a4 <__ssputs_r>
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	f000 80aa 	beq.w	800a724 <_svfiprintf_r+0x1c8>
 800a5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d2:	445a      	add	r2, fp
 800a5d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80a2 	beq.w	800a724 <_svfiprintf_r+0x1c8>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5ea:	f10a 0a01 	add.w	sl, sl, #1
 800a5ee:	9304      	str	r3, [sp, #16]
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a5f8:	4654      	mov	r4, sl
 800a5fa:	2205      	movs	r2, #5
 800a5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a600:	4851      	ldr	r0, [pc, #324]	; (800a748 <_svfiprintf_r+0x1ec>)
 800a602:	f000 fe8d 	bl	800b320 <memchr>
 800a606:	9a04      	ldr	r2, [sp, #16]
 800a608:	b9d8      	cbnz	r0, 800a642 <_svfiprintf_r+0xe6>
 800a60a:	06d0      	lsls	r0, r2, #27
 800a60c:	bf44      	itt	mi
 800a60e:	2320      	movmi	r3, #32
 800a610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a614:	0711      	lsls	r1, r2, #28
 800a616:	bf44      	itt	mi
 800a618:	232b      	movmi	r3, #43	; 0x2b
 800a61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a61e:	f89a 3000 	ldrb.w	r3, [sl]
 800a622:	2b2a      	cmp	r3, #42	; 0x2a
 800a624:	d015      	beq.n	800a652 <_svfiprintf_r+0xf6>
 800a626:	4654      	mov	r4, sl
 800a628:	2000      	movs	r0, #0
 800a62a:	f04f 0c0a 	mov.w	ip, #10
 800a62e:	9a07      	ldr	r2, [sp, #28]
 800a630:	4621      	mov	r1, r4
 800a632:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a636:	3b30      	subs	r3, #48	; 0x30
 800a638:	2b09      	cmp	r3, #9
 800a63a:	d94e      	bls.n	800a6da <_svfiprintf_r+0x17e>
 800a63c:	b1b0      	cbz	r0, 800a66c <_svfiprintf_r+0x110>
 800a63e:	9207      	str	r2, [sp, #28]
 800a640:	e014      	b.n	800a66c <_svfiprintf_r+0x110>
 800a642:	eba0 0308 	sub.w	r3, r0, r8
 800a646:	fa09 f303 	lsl.w	r3, r9, r3
 800a64a:	4313      	orrs	r3, r2
 800a64c:	46a2      	mov	sl, r4
 800a64e:	9304      	str	r3, [sp, #16]
 800a650:	e7d2      	b.n	800a5f8 <_svfiprintf_r+0x9c>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	1d19      	adds	r1, r3, #4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	9103      	str	r1, [sp, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	bfbb      	ittet	lt
 800a65e:	425b      	neglt	r3, r3
 800a660:	f042 0202 	orrlt.w	r2, r2, #2
 800a664:	9307      	strge	r3, [sp, #28]
 800a666:	9307      	strlt	r3, [sp, #28]
 800a668:	bfb8      	it	lt
 800a66a:	9204      	strlt	r2, [sp, #16]
 800a66c:	7823      	ldrb	r3, [r4, #0]
 800a66e:	2b2e      	cmp	r3, #46	; 0x2e
 800a670:	d10c      	bne.n	800a68c <_svfiprintf_r+0x130>
 800a672:	7863      	ldrb	r3, [r4, #1]
 800a674:	2b2a      	cmp	r3, #42	; 0x2a
 800a676:	d135      	bne.n	800a6e4 <_svfiprintf_r+0x188>
 800a678:	9b03      	ldr	r3, [sp, #12]
 800a67a:	3402      	adds	r4, #2
 800a67c:	1d1a      	adds	r2, r3, #4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	9203      	str	r2, [sp, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfb8      	it	lt
 800a686:	f04f 33ff 	movlt.w	r3, #4294967295
 800a68a:	9305      	str	r3, [sp, #20]
 800a68c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a74c <_svfiprintf_r+0x1f0>
 800a690:	2203      	movs	r2, #3
 800a692:	4650      	mov	r0, sl
 800a694:	7821      	ldrb	r1, [r4, #0]
 800a696:	f000 fe43 	bl	800b320 <memchr>
 800a69a:	b140      	cbz	r0, 800a6ae <_svfiprintf_r+0x152>
 800a69c:	2340      	movs	r3, #64	; 0x40
 800a69e:	eba0 000a 	sub.w	r0, r0, sl
 800a6a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a6a6:	9b04      	ldr	r3, [sp, #16]
 800a6a8:	3401      	adds	r4, #1
 800a6aa:	4303      	orrs	r3, r0
 800a6ac:	9304      	str	r3, [sp, #16]
 800a6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b2:	2206      	movs	r2, #6
 800a6b4:	4826      	ldr	r0, [pc, #152]	; (800a750 <_svfiprintf_r+0x1f4>)
 800a6b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ba:	f000 fe31 	bl	800b320 <memchr>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d038      	beq.n	800a734 <_svfiprintf_r+0x1d8>
 800a6c2:	4b24      	ldr	r3, [pc, #144]	; (800a754 <_svfiprintf_r+0x1f8>)
 800a6c4:	bb1b      	cbnz	r3, 800a70e <_svfiprintf_r+0x1b2>
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	3307      	adds	r3, #7
 800a6ca:	f023 0307 	bic.w	r3, r3, #7
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	9303      	str	r3, [sp, #12]
 800a6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d4:	4433      	add	r3, r6
 800a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d8:	e767      	b.n	800a5aa <_svfiprintf_r+0x4e>
 800a6da:	460c      	mov	r4, r1
 800a6dc:	2001      	movs	r0, #1
 800a6de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6e2:	e7a5      	b.n	800a630 <_svfiprintf_r+0xd4>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f04f 0c0a 	mov.w	ip, #10
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	3401      	adds	r4, #1
 800a6ee:	9305      	str	r3, [sp, #20]
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6f6:	3a30      	subs	r2, #48	; 0x30
 800a6f8:	2a09      	cmp	r2, #9
 800a6fa:	d903      	bls.n	800a704 <_svfiprintf_r+0x1a8>
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0c5      	beq.n	800a68c <_svfiprintf_r+0x130>
 800a700:	9105      	str	r1, [sp, #20]
 800a702:	e7c3      	b.n	800a68c <_svfiprintf_r+0x130>
 800a704:	4604      	mov	r4, r0
 800a706:	2301      	movs	r3, #1
 800a708:	fb0c 2101 	mla	r1, ip, r1, r2
 800a70c:	e7f0      	b.n	800a6f0 <_svfiprintf_r+0x194>
 800a70e:	ab03      	add	r3, sp, #12
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	462a      	mov	r2, r5
 800a714:	4638      	mov	r0, r7
 800a716:	4b10      	ldr	r3, [pc, #64]	; (800a758 <_svfiprintf_r+0x1fc>)
 800a718:	a904      	add	r1, sp, #16
 800a71a:	f3af 8000 	nop.w
 800a71e:	1c42      	adds	r2, r0, #1
 800a720:	4606      	mov	r6, r0
 800a722:	d1d6      	bne.n	800a6d2 <_svfiprintf_r+0x176>
 800a724:	89ab      	ldrh	r3, [r5, #12]
 800a726:	065b      	lsls	r3, r3, #25
 800a728:	f53f af2c 	bmi.w	800a584 <_svfiprintf_r+0x28>
 800a72c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a72e:	b01d      	add	sp, #116	; 0x74
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	ab03      	add	r3, sp, #12
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	462a      	mov	r2, r5
 800a73a:	4638      	mov	r0, r7
 800a73c:	4b06      	ldr	r3, [pc, #24]	; (800a758 <_svfiprintf_r+0x1fc>)
 800a73e:	a904      	add	r1, sp, #16
 800a740:	f000 f9d4 	bl	800aaec <_printf_i>
 800a744:	e7eb      	b.n	800a71e <_svfiprintf_r+0x1c2>
 800a746:	bf00      	nop
 800a748:	0800bd45 	.word	0x0800bd45
 800a74c:	0800bd4b 	.word	0x0800bd4b
 800a750:	0800bd4f 	.word	0x0800bd4f
 800a754:	00000000 	.word	0x00000000
 800a758:	0800a4a5 	.word	0x0800a4a5

0800a75c <__sfputc_r>:
 800a75c:	6893      	ldr	r3, [r2, #8]
 800a75e:	b410      	push	{r4}
 800a760:	3b01      	subs	r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	6093      	str	r3, [r2, #8]
 800a766:	da07      	bge.n	800a778 <__sfputc_r+0x1c>
 800a768:	6994      	ldr	r4, [r2, #24]
 800a76a:	42a3      	cmp	r3, r4
 800a76c:	db01      	blt.n	800a772 <__sfputc_r+0x16>
 800a76e:	290a      	cmp	r1, #10
 800a770:	d102      	bne.n	800a778 <__sfputc_r+0x1c>
 800a772:	bc10      	pop	{r4}
 800a774:	f000 baf0 	b.w	800ad58 <__swbuf_r>
 800a778:	6813      	ldr	r3, [r2, #0]
 800a77a:	1c58      	adds	r0, r3, #1
 800a77c:	6010      	str	r0, [r2, #0]
 800a77e:	7019      	strb	r1, [r3, #0]
 800a780:	4608      	mov	r0, r1
 800a782:	bc10      	pop	{r4}
 800a784:	4770      	bx	lr

0800a786 <__sfputs_r>:
 800a786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a788:	4606      	mov	r6, r0
 800a78a:	460f      	mov	r7, r1
 800a78c:	4614      	mov	r4, r2
 800a78e:	18d5      	adds	r5, r2, r3
 800a790:	42ac      	cmp	r4, r5
 800a792:	d101      	bne.n	800a798 <__sfputs_r+0x12>
 800a794:	2000      	movs	r0, #0
 800a796:	e007      	b.n	800a7a8 <__sfputs_r+0x22>
 800a798:	463a      	mov	r2, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a0:	f7ff ffdc 	bl	800a75c <__sfputc_r>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d1f3      	bne.n	800a790 <__sfputs_r+0xa>
 800a7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7ac <_vfiprintf_r>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	4614      	mov	r4, r2
 800a7b4:	4698      	mov	r8, r3
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	b09d      	sub	sp, #116	; 0x74
 800a7ba:	b118      	cbz	r0, 800a7c4 <_vfiprintf_r+0x18>
 800a7bc:	6983      	ldr	r3, [r0, #24]
 800a7be:	b90b      	cbnz	r3, 800a7c4 <_vfiprintf_r+0x18>
 800a7c0:	f000 fca8 	bl	800b114 <__sinit>
 800a7c4:	4b89      	ldr	r3, [pc, #548]	; (800a9ec <_vfiprintf_r+0x240>)
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	d11b      	bne.n	800a802 <_vfiprintf_r+0x56>
 800a7ca:	6875      	ldr	r5, [r6, #4]
 800a7cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ce:	07d9      	lsls	r1, r3, #31
 800a7d0:	d405      	bmi.n	800a7de <_vfiprintf_r+0x32>
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	059a      	lsls	r2, r3, #22
 800a7d6:	d402      	bmi.n	800a7de <_vfiprintf_r+0x32>
 800a7d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7da:	f000 fd39 	bl	800b250 <__retarget_lock_acquire_recursive>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	071b      	lsls	r3, r3, #28
 800a7e2:	d501      	bpl.n	800a7e8 <_vfiprintf_r+0x3c>
 800a7e4:	692b      	ldr	r3, [r5, #16]
 800a7e6:	b9eb      	cbnz	r3, 800a824 <_vfiprintf_r+0x78>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 fb06 	bl	800adfc <__swsetup_r>
 800a7f0:	b1c0      	cbz	r0, 800a824 <_vfiprintf_r+0x78>
 800a7f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f4:	07dc      	lsls	r4, r3, #31
 800a7f6:	d50e      	bpl.n	800a816 <_vfiprintf_r+0x6a>
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	b01d      	add	sp, #116	; 0x74
 800a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a802:	4b7b      	ldr	r3, [pc, #492]	; (800a9f0 <_vfiprintf_r+0x244>)
 800a804:	429d      	cmp	r5, r3
 800a806:	d101      	bne.n	800a80c <_vfiprintf_r+0x60>
 800a808:	68b5      	ldr	r5, [r6, #8]
 800a80a:	e7df      	b.n	800a7cc <_vfiprintf_r+0x20>
 800a80c:	4b79      	ldr	r3, [pc, #484]	; (800a9f4 <_vfiprintf_r+0x248>)
 800a80e:	429d      	cmp	r5, r3
 800a810:	bf08      	it	eq
 800a812:	68f5      	ldreq	r5, [r6, #12]
 800a814:	e7da      	b.n	800a7cc <_vfiprintf_r+0x20>
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4ed      	bmi.n	800a7f8 <_vfiprintf_r+0x4c>
 800a81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a81e:	f000 fd18 	bl	800b252 <__retarget_lock_release_recursive>
 800a822:	e7e9      	b.n	800a7f8 <_vfiprintf_r+0x4c>
 800a824:	2300      	movs	r3, #0
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	2320      	movs	r3, #32
 800a82a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a82e:	2330      	movs	r3, #48	; 0x30
 800a830:	f04f 0901 	mov.w	r9, #1
 800a834:	f8cd 800c 	str.w	r8, [sp, #12]
 800a838:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a9f8 <_vfiprintf_r+0x24c>
 800a83c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0xa2>
 800a84a:	2a25      	cmp	r2, #37	; 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x96>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xc0>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ff93 	bl	800a786 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80aa 	beq.w	800a9ba <_vfiprintf_r+0x20e>
 800a866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	; 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80a2 	beq.w	800a9ba <_vfiprintf_r+0x20e>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a88c:	931a      	str	r3, [sp, #104]	; 0x68
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a896:	4858      	ldr	r0, [pc, #352]	; (800a9f8 <_vfiprintf_r+0x24c>)
 800a898:	f000 fd42 	bl	800b320 <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x12c>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	; 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x13c>
 800a8bc:	4654      	mov	r4, sl
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f04f 0c0a 	mov.w	ip, #10
 800a8c4:	9a07      	ldr	r2, [sp, #28]
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	; 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94e      	bls.n	800a970 <_vfiprintf_r+0x1c4>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x156>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x156>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	46a2      	mov	sl, r4
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xe2>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9103      	str	r1, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	; 0x2e
 800a906:	d10c      	bne.n	800a922 <_vfiprintf_r+0x176>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	; 0x2a
 800a90c:	d135      	bne.n	800a97a <_vfiprintf_r+0x1ce>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	3402      	adds	r4, #2
 800a912:	1d1a      	adds	r2, r3, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	9203      	str	r2, [sp, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	bfb8      	it	lt
 800a91c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a9fc <_vfiprintf_r+0x250>
 800a926:	2203      	movs	r2, #3
 800a928:	4650      	mov	r0, sl
 800a92a:	7821      	ldrb	r1, [r4, #0]
 800a92c:	f000 fcf8 	bl	800b320 <memchr>
 800a930:	b140      	cbz	r0, 800a944 <_vfiprintf_r+0x198>
 800a932:	2340      	movs	r3, #64	; 0x40
 800a934:	eba0 000a 	sub.w	r0, r0, sl
 800a938:	fa03 f000 	lsl.w	r0, r3, r0
 800a93c:	9b04      	ldr	r3, [sp, #16]
 800a93e:	3401      	adds	r4, #1
 800a940:	4303      	orrs	r3, r0
 800a942:	9304      	str	r3, [sp, #16]
 800a944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a948:	2206      	movs	r2, #6
 800a94a:	482d      	ldr	r0, [pc, #180]	; (800aa00 <_vfiprintf_r+0x254>)
 800a94c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a950:	f000 fce6 	bl	800b320 <memchr>
 800a954:	2800      	cmp	r0, #0
 800a956:	d03f      	beq.n	800a9d8 <_vfiprintf_r+0x22c>
 800a958:	4b2a      	ldr	r3, [pc, #168]	; (800aa04 <_vfiprintf_r+0x258>)
 800a95a:	bb1b      	cbnz	r3, 800a9a4 <_vfiprintf_r+0x1f8>
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	3307      	adds	r3, #7
 800a960:	f023 0307 	bic.w	r3, r3, #7
 800a964:	3308      	adds	r3, #8
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96a:	443b      	add	r3, r7
 800a96c:	9309      	str	r3, [sp, #36]	; 0x24
 800a96e:	e767      	b.n	800a840 <_vfiprintf_r+0x94>
 800a970:	460c      	mov	r4, r1
 800a972:	2001      	movs	r0, #1
 800a974:	fb0c 3202 	mla	r2, ip, r2, r3
 800a978:	e7a5      	b.n	800a8c6 <_vfiprintf_r+0x11a>
 800a97a:	2300      	movs	r3, #0
 800a97c:	f04f 0c0a 	mov.w	ip, #10
 800a980:	4619      	mov	r1, r3
 800a982:	3401      	adds	r4, #1
 800a984:	9305      	str	r3, [sp, #20]
 800a986:	4620      	mov	r0, r4
 800a988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98c:	3a30      	subs	r2, #48	; 0x30
 800a98e:	2a09      	cmp	r2, #9
 800a990:	d903      	bls.n	800a99a <_vfiprintf_r+0x1ee>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0c5      	beq.n	800a922 <_vfiprintf_r+0x176>
 800a996:	9105      	str	r1, [sp, #20]
 800a998:	e7c3      	b.n	800a922 <_vfiprintf_r+0x176>
 800a99a:	4604      	mov	r4, r0
 800a99c:	2301      	movs	r3, #1
 800a99e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a2:	e7f0      	b.n	800a986 <_vfiprintf_r+0x1da>
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4b16      	ldr	r3, [pc, #88]	; (800aa08 <_vfiprintf_r+0x25c>)
 800a9ae:	a904      	add	r1, sp, #16
 800a9b0:	f3af 8000 	nop.w
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	1c78      	adds	r0, r7, #1
 800a9b8:	d1d6      	bne.n	800a968 <_vfiprintf_r+0x1bc>
 800a9ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9bc:	07d9      	lsls	r1, r3, #31
 800a9be:	d405      	bmi.n	800a9cc <_vfiprintf_r+0x220>
 800a9c0:	89ab      	ldrh	r3, [r5, #12]
 800a9c2:	059a      	lsls	r2, r3, #22
 800a9c4:	d402      	bmi.n	800a9cc <_vfiprintf_r+0x220>
 800a9c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c8:	f000 fc43 	bl	800b252 <__retarget_lock_release_recursive>
 800a9cc:	89ab      	ldrh	r3, [r5, #12]
 800a9ce:	065b      	lsls	r3, r3, #25
 800a9d0:	f53f af12 	bmi.w	800a7f8 <_vfiprintf_r+0x4c>
 800a9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9d6:	e711      	b.n	800a7fc <_vfiprintf_r+0x50>
 800a9d8:	ab03      	add	r3, sp, #12
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	462a      	mov	r2, r5
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4b09      	ldr	r3, [pc, #36]	; (800aa08 <_vfiprintf_r+0x25c>)
 800a9e2:	a904      	add	r1, sp, #16
 800a9e4:	f000 f882 	bl	800aaec <_printf_i>
 800a9e8:	e7e4      	b.n	800a9b4 <_vfiprintf_r+0x208>
 800a9ea:	bf00      	nop
 800a9ec:	0800bd98 	.word	0x0800bd98
 800a9f0:	0800bdb8 	.word	0x0800bdb8
 800a9f4:	0800bd78 	.word	0x0800bd78
 800a9f8:	0800bd45 	.word	0x0800bd45
 800a9fc:	0800bd4b 	.word	0x0800bd4b
 800aa00:	0800bd4f 	.word	0x0800bd4f
 800aa04:	00000000 	.word	0x00000000
 800aa08:	0800a787 	.word	0x0800a787

0800aa0c <_printf_common>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	4616      	mov	r6, r2
 800aa12:	4699      	mov	r9, r3
 800aa14:	688a      	ldr	r2, [r1, #8]
 800aa16:	690b      	ldr	r3, [r1, #16]
 800aa18:	4607      	mov	r7, r0
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	bfb8      	it	lt
 800aa1e:	4613      	movlt	r3, r2
 800aa20:	6033      	str	r3, [r6, #0]
 800aa22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa26:	460c      	mov	r4, r1
 800aa28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa2c:	b10a      	cbz	r2, 800aa32 <_printf_common+0x26>
 800aa2e:	3301      	adds	r3, #1
 800aa30:	6033      	str	r3, [r6, #0]
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	0699      	lsls	r1, r3, #26
 800aa36:	bf42      	ittt	mi
 800aa38:	6833      	ldrmi	r3, [r6, #0]
 800aa3a:	3302      	addmi	r3, #2
 800aa3c:	6033      	strmi	r3, [r6, #0]
 800aa3e:	6825      	ldr	r5, [r4, #0]
 800aa40:	f015 0506 	ands.w	r5, r5, #6
 800aa44:	d106      	bne.n	800aa54 <_printf_common+0x48>
 800aa46:	f104 0a19 	add.w	sl, r4, #25
 800aa4a:	68e3      	ldr	r3, [r4, #12]
 800aa4c:	6832      	ldr	r2, [r6, #0]
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	42ab      	cmp	r3, r5
 800aa52:	dc28      	bgt.n	800aaa6 <_printf_common+0x9a>
 800aa54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa58:	1e13      	subs	r3, r2, #0
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	bf18      	it	ne
 800aa5e:	2301      	movne	r3, #1
 800aa60:	0692      	lsls	r2, r2, #26
 800aa62:	d42d      	bmi.n	800aac0 <_printf_common+0xb4>
 800aa64:	4649      	mov	r1, r9
 800aa66:	4638      	mov	r0, r7
 800aa68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa6c:	47c0      	blx	r8
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d020      	beq.n	800aab4 <_printf_common+0xa8>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	68e5      	ldr	r5, [r4, #12]
 800aa76:	f003 0306 	and.w	r3, r3, #6
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	bf18      	it	ne
 800aa7e:	2500      	movne	r5, #0
 800aa80:	6832      	ldr	r2, [r6, #0]
 800aa82:	f04f 0600 	mov.w	r6, #0
 800aa86:	68a3      	ldr	r3, [r4, #8]
 800aa88:	bf08      	it	eq
 800aa8a:	1aad      	subeq	r5, r5, r2
 800aa8c:	6922      	ldr	r2, [r4, #16]
 800aa8e:	bf08      	it	eq
 800aa90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa94:	4293      	cmp	r3, r2
 800aa96:	bfc4      	itt	gt
 800aa98:	1a9b      	subgt	r3, r3, r2
 800aa9a:	18ed      	addgt	r5, r5, r3
 800aa9c:	341a      	adds	r4, #26
 800aa9e:	42b5      	cmp	r5, r6
 800aaa0:	d11a      	bne.n	800aad8 <_printf_common+0xcc>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e008      	b.n	800aab8 <_printf_common+0xac>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	4652      	mov	r2, sl
 800aaaa:	4649      	mov	r1, r9
 800aaac:	4638      	mov	r0, r7
 800aaae:	47c0      	blx	r8
 800aab0:	3001      	adds	r0, #1
 800aab2:	d103      	bne.n	800aabc <_printf_common+0xb0>
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295
 800aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabc:	3501      	adds	r5, #1
 800aabe:	e7c4      	b.n	800aa4a <_printf_common+0x3e>
 800aac0:	2030      	movs	r0, #48	; 0x30
 800aac2:	18e1      	adds	r1, r4, r3
 800aac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aace:	4422      	add	r2, r4
 800aad0:	3302      	adds	r3, #2
 800aad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aad6:	e7c5      	b.n	800aa64 <_printf_common+0x58>
 800aad8:	2301      	movs	r3, #1
 800aada:	4622      	mov	r2, r4
 800aadc:	4649      	mov	r1, r9
 800aade:	4638      	mov	r0, r7
 800aae0:	47c0      	blx	r8
 800aae2:	3001      	adds	r0, #1
 800aae4:	d0e6      	beq.n	800aab4 <_printf_common+0xa8>
 800aae6:	3601      	adds	r6, #1
 800aae8:	e7d9      	b.n	800aa9e <_printf_common+0x92>
	...

0800aaec <_printf_i>:
 800aaec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf0:	7e0f      	ldrb	r7, [r1, #24]
 800aaf2:	4691      	mov	r9, r2
 800aaf4:	2f78      	cmp	r7, #120	; 0x78
 800aaf6:	4680      	mov	r8, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	469a      	mov	sl, r3
 800aafc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aafe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab02:	d807      	bhi.n	800ab14 <_printf_i+0x28>
 800ab04:	2f62      	cmp	r7, #98	; 0x62
 800ab06:	d80a      	bhi.n	800ab1e <_printf_i+0x32>
 800ab08:	2f00      	cmp	r7, #0
 800ab0a:	f000 80d9 	beq.w	800acc0 <_printf_i+0x1d4>
 800ab0e:	2f58      	cmp	r7, #88	; 0x58
 800ab10:	f000 80a4 	beq.w	800ac5c <_printf_i+0x170>
 800ab14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab1c:	e03a      	b.n	800ab94 <_printf_i+0xa8>
 800ab1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab22:	2b15      	cmp	r3, #21
 800ab24:	d8f6      	bhi.n	800ab14 <_printf_i+0x28>
 800ab26:	a101      	add	r1, pc, #4	; (adr r1, 800ab2c <_printf_i+0x40>)
 800ab28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab2c:	0800ab85 	.word	0x0800ab85
 800ab30:	0800ab99 	.word	0x0800ab99
 800ab34:	0800ab15 	.word	0x0800ab15
 800ab38:	0800ab15 	.word	0x0800ab15
 800ab3c:	0800ab15 	.word	0x0800ab15
 800ab40:	0800ab15 	.word	0x0800ab15
 800ab44:	0800ab99 	.word	0x0800ab99
 800ab48:	0800ab15 	.word	0x0800ab15
 800ab4c:	0800ab15 	.word	0x0800ab15
 800ab50:	0800ab15 	.word	0x0800ab15
 800ab54:	0800ab15 	.word	0x0800ab15
 800ab58:	0800aca7 	.word	0x0800aca7
 800ab5c:	0800abc9 	.word	0x0800abc9
 800ab60:	0800ac89 	.word	0x0800ac89
 800ab64:	0800ab15 	.word	0x0800ab15
 800ab68:	0800ab15 	.word	0x0800ab15
 800ab6c:	0800acc9 	.word	0x0800acc9
 800ab70:	0800ab15 	.word	0x0800ab15
 800ab74:	0800abc9 	.word	0x0800abc9
 800ab78:	0800ab15 	.word	0x0800ab15
 800ab7c:	0800ab15 	.word	0x0800ab15
 800ab80:	0800ac91 	.word	0x0800ac91
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	1d1a      	adds	r2, r3, #4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	602a      	str	r2, [r5, #0]
 800ab8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab94:	2301      	movs	r3, #1
 800ab96:	e0a4      	b.n	800ace2 <_printf_i+0x1f6>
 800ab98:	6820      	ldr	r0, [r4, #0]
 800ab9a:	6829      	ldr	r1, [r5, #0]
 800ab9c:	0606      	lsls	r6, r0, #24
 800ab9e:	f101 0304 	add.w	r3, r1, #4
 800aba2:	d50a      	bpl.n	800abba <_printf_i+0xce>
 800aba4:	680e      	ldr	r6, [r1, #0]
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	2e00      	cmp	r6, #0
 800abaa:	da03      	bge.n	800abb4 <_printf_i+0xc8>
 800abac:	232d      	movs	r3, #45	; 0x2d
 800abae:	4276      	negs	r6, r6
 800abb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abb4:	230a      	movs	r3, #10
 800abb6:	485e      	ldr	r0, [pc, #376]	; (800ad30 <_printf_i+0x244>)
 800abb8:	e019      	b.n	800abee <_printf_i+0x102>
 800abba:	680e      	ldr	r6, [r1, #0]
 800abbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	bf18      	it	ne
 800abc4:	b236      	sxthne	r6, r6
 800abc6:	e7ef      	b.n	800aba8 <_printf_i+0xbc>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	6820      	ldr	r0, [r4, #0]
 800abcc:	1d19      	adds	r1, r3, #4
 800abce:	6029      	str	r1, [r5, #0]
 800abd0:	0601      	lsls	r1, r0, #24
 800abd2:	d501      	bpl.n	800abd8 <_printf_i+0xec>
 800abd4:	681e      	ldr	r6, [r3, #0]
 800abd6:	e002      	b.n	800abde <_printf_i+0xf2>
 800abd8:	0646      	lsls	r6, r0, #25
 800abda:	d5fb      	bpl.n	800abd4 <_printf_i+0xe8>
 800abdc:	881e      	ldrh	r6, [r3, #0]
 800abde:	2f6f      	cmp	r7, #111	; 0x6f
 800abe0:	bf0c      	ite	eq
 800abe2:	2308      	moveq	r3, #8
 800abe4:	230a      	movne	r3, #10
 800abe6:	4852      	ldr	r0, [pc, #328]	; (800ad30 <_printf_i+0x244>)
 800abe8:	2100      	movs	r1, #0
 800abea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abee:	6865      	ldr	r5, [r4, #4]
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	bfa8      	it	ge
 800abf4:	6821      	ldrge	r1, [r4, #0]
 800abf6:	60a5      	str	r5, [r4, #8]
 800abf8:	bfa4      	itt	ge
 800abfa:	f021 0104 	bicge.w	r1, r1, #4
 800abfe:	6021      	strge	r1, [r4, #0]
 800ac00:	b90e      	cbnz	r6, 800ac06 <_printf_i+0x11a>
 800ac02:	2d00      	cmp	r5, #0
 800ac04:	d04d      	beq.n	800aca2 <_printf_i+0x1b6>
 800ac06:	4615      	mov	r5, r2
 800ac08:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac0c:	fb03 6711 	mls	r7, r3, r1, r6
 800ac10:	5dc7      	ldrb	r7, [r0, r7]
 800ac12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac16:	4637      	mov	r7, r6
 800ac18:	42bb      	cmp	r3, r7
 800ac1a:	460e      	mov	r6, r1
 800ac1c:	d9f4      	bls.n	800ac08 <_printf_i+0x11c>
 800ac1e:	2b08      	cmp	r3, #8
 800ac20:	d10b      	bne.n	800ac3a <_printf_i+0x14e>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	07de      	lsls	r6, r3, #31
 800ac26:	d508      	bpl.n	800ac3a <_printf_i+0x14e>
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	6861      	ldr	r1, [r4, #4]
 800ac2c:	4299      	cmp	r1, r3
 800ac2e:	bfde      	ittt	le
 800ac30:	2330      	movle	r3, #48	; 0x30
 800ac32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac36:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac3a:	1b52      	subs	r2, r2, r5
 800ac3c:	6122      	str	r2, [r4, #16]
 800ac3e:	464b      	mov	r3, r9
 800ac40:	4621      	mov	r1, r4
 800ac42:	4640      	mov	r0, r8
 800ac44:	f8cd a000 	str.w	sl, [sp]
 800ac48:	aa03      	add	r2, sp, #12
 800ac4a:	f7ff fedf 	bl	800aa0c <_printf_common>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d14c      	bne.n	800acec <_printf_i+0x200>
 800ac52:	f04f 30ff 	mov.w	r0, #4294967295
 800ac56:	b004      	add	sp, #16
 800ac58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac5c:	4834      	ldr	r0, [pc, #208]	; (800ad30 <_printf_i+0x244>)
 800ac5e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac62:	6829      	ldr	r1, [r5, #0]
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac6a:	6029      	str	r1, [r5, #0]
 800ac6c:	061d      	lsls	r5, r3, #24
 800ac6e:	d514      	bpl.n	800ac9a <_printf_i+0x1ae>
 800ac70:	07df      	lsls	r7, r3, #31
 800ac72:	bf44      	itt	mi
 800ac74:	f043 0320 	orrmi.w	r3, r3, #32
 800ac78:	6023      	strmi	r3, [r4, #0]
 800ac7a:	b91e      	cbnz	r6, 800ac84 <_printf_i+0x198>
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	f023 0320 	bic.w	r3, r3, #32
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	2310      	movs	r3, #16
 800ac86:	e7af      	b.n	800abe8 <_printf_i+0xfc>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	f043 0320 	orr.w	r3, r3, #32
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	2378      	movs	r3, #120	; 0x78
 800ac92:	4828      	ldr	r0, [pc, #160]	; (800ad34 <_printf_i+0x248>)
 800ac94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac98:	e7e3      	b.n	800ac62 <_printf_i+0x176>
 800ac9a:	0659      	lsls	r1, r3, #25
 800ac9c:	bf48      	it	mi
 800ac9e:	b2b6      	uxthmi	r6, r6
 800aca0:	e7e6      	b.n	800ac70 <_printf_i+0x184>
 800aca2:	4615      	mov	r5, r2
 800aca4:	e7bb      	b.n	800ac1e <_printf_i+0x132>
 800aca6:	682b      	ldr	r3, [r5, #0]
 800aca8:	6826      	ldr	r6, [r4, #0]
 800acaa:	1d18      	adds	r0, r3, #4
 800acac:	6961      	ldr	r1, [r4, #20]
 800acae:	6028      	str	r0, [r5, #0]
 800acb0:	0635      	lsls	r5, r6, #24
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	d501      	bpl.n	800acba <_printf_i+0x1ce>
 800acb6:	6019      	str	r1, [r3, #0]
 800acb8:	e002      	b.n	800acc0 <_printf_i+0x1d4>
 800acba:	0670      	lsls	r0, r6, #25
 800acbc:	d5fb      	bpl.n	800acb6 <_printf_i+0x1ca>
 800acbe:	8019      	strh	r1, [r3, #0]
 800acc0:	2300      	movs	r3, #0
 800acc2:	4615      	mov	r5, r2
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	e7ba      	b.n	800ac3e <_printf_i+0x152>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	2100      	movs	r1, #0
 800accc:	1d1a      	adds	r2, r3, #4
 800acce:	602a      	str	r2, [r5, #0]
 800acd0:	681d      	ldr	r5, [r3, #0]
 800acd2:	6862      	ldr	r2, [r4, #4]
 800acd4:	4628      	mov	r0, r5
 800acd6:	f000 fb23 	bl	800b320 <memchr>
 800acda:	b108      	cbz	r0, 800ace0 <_printf_i+0x1f4>
 800acdc:	1b40      	subs	r0, r0, r5
 800acde:	6060      	str	r0, [r4, #4]
 800ace0:	6863      	ldr	r3, [r4, #4]
 800ace2:	6123      	str	r3, [r4, #16]
 800ace4:	2300      	movs	r3, #0
 800ace6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acea:	e7a8      	b.n	800ac3e <_printf_i+0x152>
 800acec:	462a      	mov	r2, r5
 800acee:	4649      	mov	r1, r9
 800acf0:	4640      	mov	r0, r8
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	47d0      	blx	sl
 800acf6:	3001      	adds	r0, #1
 800acf8:	d0ab      	beq.n	800ac52 <_printf_i+0x166>
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	079b      	lsls	r3, r3, #30
 800acfe:	d413      	bmi.n	800ad28 <_printf_i+0x23c>
 800ad00:	68e0      	ldr	r0, [r4, #12]
 800ad02:	9b03      	ldr	r3, [sp, #12]
 800ad04:	4298      	cmp	r0, r3
 800ad06:	bfb8      	it	lt
 800ad08:	4618      	movlt	r0, r3
 800ad0a:	e7a4      	b.n	800ac56 <_printf_i+0x16a>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4649      	mov	r1, r9
 800ad12:	4640      	mov	r0, r8
 800ad14:	47d0      	blx	sl
 800ad16:	3001      	adds	r0, #1
 800ad18:	d09b      	beq.n	800ac52 <_printf_i+0x166>
 800ad1a:	3501      	adds	r5, #1
 800ad1c:	68e3      	ldr	r3, [r4, #12]
 800ad1e:	9903      	ldr	r1, [sp, #12]
 800ad20:	1a5b      	subs	r3, r3, r1
 800ad22:	42ab      	cmp	r3, r5
 800ad24:	dcf2      	bgt.n	800ad0c <_printf_i+0x220>
 800ad26:	e7eb      	b.n	800ad00 <_printf_i+0x214>
 800ad28:	2500      	movs	r5, #0
 800ad2a:	f104 0619 	add.w	r6, r4, #25
 800ad2e:	e7f5      	b.n	800ad1c <_printf_i+0x230>
 800ad30:	0800bd56 	.word	0x0800bd56
 800ad34:	0800bd67 	.word	0x0800bd67

0800ad38 <_sbrk_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	4d05      	ldr	r5, [pc, #20]	; (800ad54 <_sbrk_r+0x1c>)
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	f7f6 f954 	bl	8000ff0 <_sbrk>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_sbrk_r+0x1a>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_sbrk_r+0x1a>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	20002628 	.word	0x20002628

0800ad58 <__swbuf_r>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	460e      	mov	r6, r1
 800ad5c:	4614      	mov	r4, r2
 800ad5e:	4605      	mov	r5, r0
 800ad60:	b118      	cbz	r0, 800ad6a <__swbuf_r+0x12>
 800ad62:	6983      	ldr	r3, [r0, #24]
 800ad64:	b90b      	cbnz	r3, 800ad6a <__swbuf_r+0x12>
 800ad66:	f000 f9d5 	bl	800b114 <__sinit>
 800ad6a:	4b21      	ldr	r3, [pc, #132]	; (800adf0 <__swbuf_r+0x98>)
 800ad6c:	429c      	cmp	r4, r3
 800ad6e:	d12b      	bne.n	800adc8 <__swbuf_r+0x70>
 800ad70:	686c      	ldr	r4, [r5, #4]
 800ad72:	69a3      	ldr	r3, [r4, #24]
 800ad74:	60a3      	str	r3, [r4, #8]
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	071a      	lsls	r2, r3, #28
 800ad7a:	d52f      	bpl.n	800addc <__swbuf_r+0x84>
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	b36b      	cbz	r3, 800addc <__swbuf_r+0x84>
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	6820      	ldr	r0, [r4, #0]
 800ad84:	b2f6      	uxtb	r6, r6
 800ad86:	1ac0      	subs	r0, r0, r3
 800ad88:	6963      	ldr	r3, [r4, #20]
 800ad8a:	4637      	mov	r7, r6
 800ad8c:	4283      	cmp	r3, r0
 800ad8e:	dc04      	bgt.n	800ad9a <__swbuf_r+0x42>
 800ad90:	4621      	mov	r1, r4
 800ad92:	4628      	mov	r0, r5
 800ad94:	f000 f92a 	bl	800afec <_fflush_r>
 800ad98:	bb30      	cbnz	r0, 800ade8 <__swbuf_r+0x90>
 800ad9a:	68a3      	ldr	r3, [r4, #8]
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	60a3      	str	r3, [r4, #8]
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	1c5a      	adds	r2, r3, #1
 800ada6:	6022      	str	r2, [r4, #0]
 800ada8:	701e      	strb	r6, [r3, #0]
 800adaa:	6963      	ldr	r3, [r4, #20]
 800adac:	4283      	cmp	r3, r0
 800adae:	d004      	beq.n	800adba <__swbuf_r+0x62>
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	07db      	lsls	r3, r3, #31
 800adb4:	d506      	bpl.n	800adc4 <__swbuf_r+0x6c>
 800adb6:	2e0a      	cmp	r6, #10
 800adb8:	d104      	bne.n	800adc4 <__swbuf_r+0x6c>
 800adba:	4621      	mov	r1, r4
 800adbc:	4628      	mov	r0, r5
 800adbe:	f000 f915 	bl	800afec <_fflush_r>
 800adc2:	b988      	cbnz	r0, 800ade8 <__swbuf_r+0x90>
 800adc4:	4638      	mov	r0, r7
 800adc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <__swbuf_r+0x9c>)
 800adca:	429c      	cmp	r4, r3
 800adcc:	d101      	bne.n	800add2 <__swbuf_r+0x7a>
 800adce:	68ac      	ldr	r4, [r5, #8]
 800add0:	e7cf      	b.n	800ad72 <__swbuf_r+0x1a>
 800add2:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <__swbuf_r+0xa0>)
 800add4:	429c      	cmp	r4, r3
 800add6:	bf08      	it	eq
 800add8:	68ec      	ldreq	r4, [r5, #12]
 800adda:	e7ca      	b.n	800ad72 <__swbuf_r+0x1a>
 800addc:	4621      	mov	r1, r4
 800adde:	4628      	mov	r0, r5
 800ade0:	f000 f80c 	bl	800adfc <__swsetup_r>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d0cb      	beq.n	800ad80 <__swbuf_r+0x28>
 800ade8:	f04f 37ff 	mov.w	r7, #4294967295
 800adec:	e7ea      	b.n	800adc4 <__swbuf_r+0x6c>
 800adee:	bf00      	nop
 800adf0:	0800bd98 	.word	0x0800bd98
 800adf4:	0800bdb8 	.word	0x0800bdb8
 800adf8:	0800bd78 	.word	0x0800bd78

0800adfc <__swsetup_r>:
 800adfc:	4b32      	ldr	r3, [pc, #200]	; (800aec8 <__swsetup_r+0xcc>)
 800adfe:	b570      	push	{r4, r5, r6, lr}
 800ae00:	681d      	ldr	r5, [r3, #0]
 800ae02:	4606      	mov	r6, r0
 800ae04:	460c      	mov	r4, r1
 800ae06:	b125      	cbz	r5, 800ae12 <__swsetup_r+0x16>
 800ae08:	69ab      	ldr	r3, [r5, #24]
 800ae0a:	b913      	cbnz	r3, 800ae12 <__swsetup_r+0x16>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f000 f981 	bl	800b114 <__sinit>
 800ae12:	4b2e      	ldr	r3, [pc, #184]	; (800aecc <__swsetup_r+0xd0>)
 800ae14:	429c      	cmp	r4, r3
 800ae16:	d10f      	bne.n	800ae38 <__swsetup_r+0x3c>
 800ae18:	686c      	ldr	r4, [r5, #4]
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae20:	0719      	lsls	r1, r3, #28
 800ae22:	d42c      	bmi.n	800ae7e <__swsetup_r+0x82>
 800ae24:	06dd      	lsls	r5, r3, #27
 800ae26:	d411      	bmi.n	800ae4c <__swsetup_r+0x50>
 800ae28:	2309      	movs	r3, #9
 800ae2a:	6033      	str	r3, [r6, #0]
 800ae2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	e03e      	b.n	800aeb6 <__swsetup_r+0xba>
 800ae38:	4b25      	ldr	r3, [pc, #148]	; (800aed0 <__swsetup_r+0xd4>)
 800ae3a:	429c      	cmp	r4, r3
 800ae3c:	d101      	bne.n	800ae42 <__swsetup_r+0x46>
 800ae3e:	68ac      	ldr	r4, [r5, #8]
 800ae40:	e7eb      	b.n	800ae1a <__swsetup_r+0x1e>
 800ae42:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <__swsetup_r+0xd8>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	bf08      	it	eq
 800ae48:	68ec      	ldreq	r4, [r5, #12]
 800ae4a:	e7e6      	b.n	800ae1a <__swsetup_r+0x1e>
 800ae4c:	0758      	lsls	r0, r3, #29
 800ae4e:	d512      	bpl.n	800ae76 <__swsetup_r+0x7a>
 800ae50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae52:	b141      	cbz	r1, 800ae66 <__swsetup_r+0x6a>
 800ae54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae58:	4299      	cmp	r1, r3
 800ae5a:	d002      	beq.n	800ae62 <__swsetup_r+0x66>
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff fa45 	bl	800a2ec <_free_r>
 800ae62:	2300      	movs	r3, #0
 800ae64:	6363      	str	r3, [r4, #52]	; 0x34
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae6c:	81a3      	strh	r3, [r4, #12]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	6063      	str	r3, [r4, #4]
 800ae72:	6923      	ldr	r3, [r4, #16]
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	f043 0308 	orr.w	r3, r3, #8
 800ae7c:	81a3      	strh	r3, [r4, #12]
 800ae7e:	6923      	ldr	r3, [r4, #16]
 800ae80:	b94b      	cbnz	r3, 800ae96 <__swsetup_r+0x9a>
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae8c:	d003      	beq.n	800ae96 <__swsetup_r+0x9a>
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4630      	mov	r0, r6
 800ae92:	f000 fa05 	bl	800b2a0 <__smakebuf_r>
 800ae96:	89a0      	ldrh	r0, [r4, #12]
 800ae98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae9c:	f010 0301 	ands.w	r3, r0, #1
 800aea0:	d00a      	beq.n	800aeb8 <__swsetup_r+0xbc>
 800aea2:	2300      	movs	r3, #0
 800aea4:	60a3      	str	r3, [r4, #8]
 800aea6:	6963      	ldr	r3, [r4, #20]
 800aea8:	425b      	negs	r3, r3
 800aeaa:	61a3      	str	r3, [r4, #24]
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	b943      	cbnz	r3, 800aec2 <__swsetup_r+0xc6>
 800aeb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aeb4:	d1ba      	bne.n	800ae2c <__swsetup_r+0x30>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	0781      	lsls	r1, r0, #30
 800aeba:	bf58      	it	pl
 800aebc:	6963      	ldrpl	r3, [r4, #20]
 800aebe:	60a3      	str	r3, [r4, #8]
 800aec0:	e7f4      	b.n	800aeac <__swsetup_r+0xb0>
 800aec2:	2000      	movs	r0, #0
 800aec4:	e7f7      	b.n	800aeb6 <__swsetup_r+0xba>
 800aec6:	bf00      	nop
 800aec8:	200002e0 	.word	0x200002e0
 800aecc:	0800bd98 	.word	0x0800bd98
 800aed0:	0800bdb8 	.word	0x0800bdb8
 800aed4:	0800bd78 	.word	0x0800bd78

0800aed8 <abort>:
 800aed8:	2006      	movs	r0, #6
 800aeda:	b508      	push	{r3, lr}
 800aedc:	f000 faac 	bl	800b438 <raise>
 800aee0:	2001      	movs	r0, #1
 800aee2:	f7f6 f812 	bl	8000f0a <_exit>
	...

0800aee8 <__sflush_r>:
 800aee8:	898a      	ldrh	r2, [r1, #12]
 800aeea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeec:	4605      	mov	r5, r0
 800aeee:	0710      	lsls	r0, r2, #28
 800aef0:	460c      	mov	r4, r1
 800aef2:	d457      	bmi.n	800afa4 <__sflush_r+0xbc>
 800aef4:	684b      	ldr	r3, [r1, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dc04      	bgt.n	800af04 <__sflush_r+0x1c>
 800aefa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dc01      	bgt.n	800af04 <__sflush_r+0x1c>
 800af00:	2000      	movs	r0, #0
 800af02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af06:	2e00      	cmp	r6, #0
 800af08:	d0fa      	beq.n	800af00 <__sflush_r+0x18>
 800af0a:	2300      	movs	r3, #0
 800af0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af10:	682f      	ldr	r7, [r5, #0]
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	d032      	beq.n	800af7c <__sflush_r+0x94>
 800af16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	075a      	lsls	r2, r3, #29
 800af1c:	d505      	bpl.n	800af2a <__sflush_r+0x42>
 800af1e:	6863      	ldr	r3, [r4, #4]
 800af20:	1ac0      	subs	r0, r0, r3
 800af22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af24:	b10b      	cbz	r3, 800af2a <__sflush_r+0x42>
 800af26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af28:	1ac0      	subs	r0, r0, r3
 800af2a:	2300      	movs	r3, #0
 800af2c:	4602      	mov	r2, r0
 800af2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af30:	4628      	mov	r0, r5
 800af32:	6a21      	ldr	r1, [r4, #32]
 800af34:	47b0      	blx	r6
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	d106      	bne.n	800af4a <__sflush_r+0x62>
 800af3c:	6829      	ldr	r1, [r5, #0]
 800af3e:	291d      	cmp	r1, #29
 800af40:	d82c      	bhi.n	800af9c <__sflush_r+0xb4>
 800af42:	4a29      	ldr	r2, [pc, #164]	; (800afe8 <__sflush_r+0x100>)
 800af44:	40ca      	lsrs	r2, r1
 800af46:	07d6      	lsls	r6, r2, #31
 800af48:	d528      	bpl.n	800af9c <__sflush_r+0xb4>
 800af4a:	2200      	movs	r2, #0
 800af4c:	6062      	str	r2, [r4, #4]
 800af4e:	6922      	ldr	r2, [r4, #16]
 800af50:	04d9      	lsls	r1, r3, #19
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	d504      	bpl.n	800af60 <__sflush_r+0x78>
 800af56:	1c42      	adds	r2, r0, #1
 800af58:	d101      	bne.n	800af5e <__sflush_r+0x76>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	b903      	cbnz	r3, 800af60 <__sflush_r+0x78>
 800af5e:	6560      	str	r0, [r4, #84]	; 0x54
 800af60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af62:	602f      	str	r7, [r5, #0]
 800af64:	2900      	cmp	r1, #0
 800af66:	d0cb      	beq.n	800af00 <__sflush_r+0x18>
 800af68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af6c:	4299      	cmp	r1, r3
 800af6e:	d002      	beq.n	800af76 <__sflush_r+0x8e>
 800af70:	4628      	mov	r0, r5
 800af72:	f7ff f9bb 	bl	800a2ec <_free_r>
 800af76:	2000      	movs	r0, #0
 800af78:	6360      	str	r0, [r4, #52]	; 0x34
 800af7a:	e7c2      	b.n	800af02 <__sflush_r+0x1a>
 800af7c:	6a21      	ldr	r1, [r4, #32]
 800af7e:	2301      	movs	r3, #1
 800af80:	4628      	mov	r0, r5
 800af82:	47b0      	blx	r6
 800af84:	1c41      	adds	r1, r0, #1
 800af86:	d1c7      	bne.n	800af18 <__sflush_r+0x30>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0c4      	beq.n	800af18 <__sflush_r+0x30>
 800af8e:	2b1d      	cmp	r3, #29
 800af90:	d001      	beq.n	800af96 <__sflush_r+0xae>
 800af92:	2b16      	cmp	r3, #22
 800af94:	d101      	bne.n	800af9a <__sflush_r+0xb2>
 800af96:	602f      	str	r7, [r5, #0]
 800af98:	e7b2      	b.n	800af00 <__sflush_r+0x18>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	e7ae      	b.n	800af02 <__sflush_r+0x1a>
 800afa4:	690f      	ldr	r7, [r1, #16]
 800afa6:	2f00      	cmp	r7, #0
 800afa8:	d0aa      	beq.n	800af00 <__sflush_r+0x18>
 800afaa:	0793      	lsls	r3, r2, #30
 800afac:	bf18      	it	ne
 800afae:	2300      	movne	r3, #0
 800afb0:	680e      	ldr	r6, [r1, #0]
 800afb2:	bf08      	it	eq
 800afb4:	694b      	ldreq	r3, [r1, #20]
 800afb6:	1bf6      	subs	r6, r6, r7
 800afb8:	600f      	str	r7, [r1, #0]
 800afba:	608b      	str	r3, [r1, #8]
 800afbc:	2e00      	cmp	r6, #0
 800afbe:	dd9f      	ble.n	800af00 <__sflush_r+0x18>
 800afc0:	4633      	mov	r3, r6
 800afc2:	463a      	mov	r2, r7
 800afc4:	4628      	mov	r0, r5
 800afc6:	6a21      	ldr	r1, [r4, #32]
 800afc8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800afcc:	47e0      	blx	ip
 800afce:	2800      	cmp	r0, #0
 800afd0:	dc06      	bgt.n	800afe0 <__sflush_r+0xf8>
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	e790      	b.n	800af02 <__sflush_r+0x1a>
 800afe0:	4407      	add	r7, r0
 800afe2:	1a36      	subs	r6, r6, r0
 800afe4:	e7ea      	b.n	800afbc <__sflush_r+0xd4>
 800afe6:	bf00      	nop
 800afe8:	20400001 	.word	0x20400001

0800afec <_fflush_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	690b      	ldr	r3, [r1, #16]
 800aff0:	4605      	mov	r5, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b913      	cbnz	r3, 800affc <_fflush_r+0x10>
 800aff6:	2500      	movs	r5, #0
 800aff8:	4628      	mov	r0, r5
 800affa:	bd38      	pop	{r3, r4, r5, pc}
 800affc:	b118      	cbz	r0, 800b006 <_fflush_r+0x1a>
 800affe:	6983      	ldr	r3, [r0, #24]
 800b000:	b90b      	cbnz	r3, 800b006 <_fflush_r+0x1a>
 800b002:	f000 f887 	bl	800b114 <__sinit>
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <_fflush_r+0x6c>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	d11b      	bne.n	800b044 <_fflush_r+0x58>
 800b00c:	686c      	ldr	r4, [r5, #4]
 800b00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0ef      	beq.n	800aff6 <_fflush_r+0xa>
 800b016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b018:	07d0      	lsls	r0, r2, #31
 800b01a:	d404      	bmi.n	800b026 <_fflush_r+0x3a>
 800b01c:	0599      	lsls	r1, r3, #22
 800b01e:	d402      	bmi.n	800b026 <_fflush_r+0x3a>
 800b020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b022:	f000 f915 	bl	800b250 <__retarget_lock_acquire_recursive>
 800b026:	4628      	mov	r0, r5
 800b028:	4621      	mov	r1, r4
 800b02a:	f7ff ff5d 	bl	800aee8 <__sflush_r>
 800b02e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b030:	4605      	mov	r5, r0
 800b032:	07da      	lsls	r2, r3, #31
 800b034:	d4e0      	bmi.n	800aff8 <_fflush_r+0xc>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	059b      	lsls	r3, r3, #22
 800b03a:	d4dd      	bmi.n	800aff8 <_fflush_r+0xc>
 800b03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b03e:	f000 f908 	bl	800b252 <__retarget_lock_release_recursive>
 800b042:	e7d9      	b.n	800aff8 <_fflush_r+0xc>
 800b044:	4b05      	ldr	r3, [pc, #20]	; (800b05c <_fflush_r+0x70>)
 800b046:	429c      	cmp	r4, r3
 800b048:	d101      	bne.n	800b04e <_fflush_r+0x62>
 800b04a:	68ac      	ldr	r4, [r5, #8]
 800b04c:	e7df      	b.n	800b00e <_fflush_r+0x22>
 800b04e:	4b04      	ldr	r3, [pc, #16]	; (800b060 <_fflush_r+0x74>)
 800b050:	429c      	cmp	r4, r3
 800b052:	bf08      	it	eq
 800b054:	68ec      	ldreq	r4, [r5, #12]
 800b056:	e7da      	b.n	800b00e <_fflush_r+0x22>
 800b058:	0800bd98 	.word	0x0800bd98
 800b05c:	0800bdb8 	.word	0x0800bdb8
 800b060:	0800bd78 	.word	0x0800bd78

0800b064 <std>:
 800b064:	2300      	movs	r3, #0
 800b066:	b510      	push	{r4, lr}
 800b068:	4604      	mov	r4, r0
 800b06a:	e9c0 3300 	strd	r3, r3, [r0]
 800b06e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b072:	6083      	str	r3, [r0, #8]
 800b074:	8181      	strh	r1, [r0, #12]
 800b076:	6643      	str	r3, [r0, #100]	; 0x64
 800b078:	81c2      	strh	r2, [r0, #14]
 800b07a:	6183      	str	r3, [r0, #24]
 800b07c:	4619      	mov	r1, r3
 800b07e:	2208      	movs	r2, #8
 800b080:	305c      	adds	r0, #92	; 0x5c
 800b082:	f7fe ffcd 	bl	800a020 <memset>
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <std+0x38>)
 800b088:	6224      	str	r4, [r4, #32]
 800b08a:	6263      	str	r3, [r4, #36]	; 0x24
 800b08c:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <std+0x3c>)
 800b08e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b090:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <std+0x40>)
 800b092:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b094:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <std+0x44>)
 800b096:	6323      	str	r3, [r4, #48]	; 0x30
 800b098:	bd10      	pop	{r4, pc}
 800b09a:	bf00      	nop
 800b09c:	0800b471 	.word	0x0800b471
 800b0a0:	0800b493 	.word	0x0800b493
 800b0a4:	0800b4cb 	.word	0x0800b4cb
 800b0a8:	0800b4ef 	.word	0x0800b4ef

0800b0ac <_cleanup_r>:
 800b0ac:	4901      	ldr	r1, [pc, #4]	; (800b0b4 <_cleanup_r+0x8>)
 800b0ae:	f000 b8af 	b.w	800b210 <_fwalk_reent>
 800b0b2:	bf00      	nop
 800b0b4:	0800afed 	.word	0x0800afed

0800b0b8 <__sfmoreglue>:
 800b0b8:	2268      	movs	r2, #104	; 0x68
 800b0ba:	b570      	push	{r4, r5, r6, lr}
 800b0bc:	1e4d      	subs	r5, r1, #1
 800b0be:	4355      	muls	r5, r2
 800b0c0:	460e      	mov	r6, r1
 800b0c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0c6:	f7ff f979 	bl	800a3bc <_malloc_r>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	b140      	cbz	r0, 800b0e0 <__sfmoreglue+0x28>
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	e9c0 1600 	strd	r1, r6, [r0]
 800b0d4:	300c      	adds	r0, #12
 800b0d6:	60a0      	str	r0, [r4, #8]
 800b0d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0dc:	f7fe ffa0 	bl	800a020 <memset>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}

0800b0e4 <__sfp_lock_acquire>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	; (800b0ec <__sfp_lock_acquire+0x8>)
 800b0e6:	f000 b8b3 	b.w	800b250 <__retarget_lock_acquire_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	20002625 	.word	0x20002625

0800b0f0 <__sfp_lock_release>:
 800b0f0:	4801      	ldr	r0, [pc, #4]	; (800b0f8 <__sfp_lock_release+0x8>)
 800b0f2:	f000 b8ae 	b.w	800b252 <__retarget_lock_release_recursive>
 800b0f6:	bf00      	nop
 800b0f8:	20002625 	.word	0x20002625

0800b0fc <__sinit_lock_acquire>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	; (800b104 <__sinit_lock_acquire+0x8>)
 800b0fe:	f000 b8a7 	b.w	800b250 <__retarget_lock_acquire_recursive>
 800b102:	bf00      	nop
 800b104:	20002626 	.word	0x20002626

0800b108 <__sinit_lock_release>:
 800b108:	4801      	ldr	r0, [pc, #4]	; (800b110 <__sinit_lock_release+0x8>)
 800b10a:	f000 b8a2 	b.w	800b252 <__retarget_lock_release_recursive>
 800b10e:	bf00      	nop
 800b110:	20002626 	.word	0x20002626

0800b114 <__sinit>:
 800b114:	b510      	push	{r4, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	f7ff fff0 	bl	800b0fc <__sinit_lock_acquire>
 800b11c:	69a3      	ldr	r3, [r4, #24]
 800b11e:	b11b      	cbz	r3, 800b128 <__sinit+0x14>
 800b120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b124:	f7ff bff0 	b.w	800b108 <__sinit_lock_release>
 800b128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b12c:	6523      	str	r3, [r4, #80]	; 0x50
 800b12e:	4b13      	ldr	r3, [pc, #76]	; (800b17c <__sinit+0x68>)
 800b130:	4a13      	ldr	r2, [pc, #76]	; (800b180 <__sinit+0x6c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	62a2      	str	r2, [r4, #40]	; 0x28
 800b136:	42a3      	cmp	r3, r4
 800b138:	bf08      	it	eq
 800b13a:	2301      	moveq	r3, #1
 800b13c:	4620      	mov	r0, r4
 800b13e:	bf08      	it	eq
 800b140:	61a3      	streq	r3, [r4, #24]
 800b142:	f000 f81f 	bl	800b184 <__sfp>
 800b146:	6060      	str	r0, [r4, #4]
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 f81b 	bl	800b184 <__sfp>
 800b14e:	60a0      	str	r0, [r4, #8]
 800b150:	4620      	mov	r0, r4
 800b152:	f000 f817 	bl	800b184 <__sfp>
 800b156:	2200      	movs	r2, #0
 800b158:	2104      	movs	r1, #4
 800b15a:	60e0      	str	r0, [r4, #12]
 800b15c:	6860      	ldr	r0, [r4, #4]
 800b15e:	f7ff ff81 	bl	800b064 <std>
 800b162:	2201      	movs	r2, #1
 800b164:	2109      	movs	r1, #9
 800b166:	68a0      	ldr	r0, [r4, #8]
 800b168:	f7ff ff7c 	bl	800b064 <std>
 800b16c:	2202      	movs	r2, #2
 800b16e:	2112      	movs	r1, #18
 800b170:	68e0      	ldr	r0, [r4, #12]
 800b172:	f7ff ff77 	bl	800b064 <std>
 800b176:	2301      	movs	r3, #1
 800b178:	61a3      	str	r3, [r4, #24]
 800b17a:	e7d1      	b.n	800b120 <__sinit+0xc>
 800b17c:	0800bb90 	.word	0x0800bb90
 800b180:	0800b0ad 	.word	0x0800b0ad

0800b184 <__sfp>:
 800b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b186:	4607      	mov	r7, r0
 800b188:	f7ff ffac 	bl	800b0e4 <__sfp_lock_acquire>
 800b18c:	4b1e      	ldr	r3, [pc, #120]	; (800b208 <__sfp+0x84>)
 800b18e:	681e      	ldr	r6, [r3, #0]
 800b190:	69b3      	ldr	r3, [r6, #24]
 800b192:	b913      	cbnz	r3, 800b19a <__sfp+0x16>
 800b194:	4630      	mov	r0, r6
 800b196:	f7ff ffbd 	bl	800b114 <__sinit>
 800b19a:	3648      	adds	r6, #72	; 0x48
 800b19c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	d503      	bpl.n	800b1ac <__sfp+0x28>
 800b1a4:	6833      	ldr	r3, [r6, #0]
 800b1a6:	b30b      	cbz	r3, 800b1ec <__sfp+0x68>
 800b1a8:	6836      	ldr	r6, [r6, #0]
 800b1aa:	e7f7      	b.n	800b19c <__sfp+0x18>
 800b1ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1b0:	b9d5      	cbnz	r5, 800b1e8 <__sfp+0x64>
 800b1b2:	4b16      	ldr	r3, [pc, #88]	; (800b20c <__sfp+0x88>)
 800b1b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1b8:	60e3      	str	r3, [r4, #12]
 800b1ba:	6665      	str	r5, [r4, #100]	; 0x64
 800b1bc:	f000 f847 	bl	800b24e <__retarget_lock_init_recursive>
 800b1c0:	f7ff ff96 	bl	800b0f0 <__sfp_lock_release>
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1d0:	6025      	str	r5, [r4, #0]
 800b1d2:	61a5      	str	r5, [r4, #24]
 800b1d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1d8:	f7fe ff22 	bl	800a020 <memset>
 800b1dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e8:	3468      	adds	r4, #104	; 0x68
 800b1ea:	e7d9      	b.n	800b1a0 <__sfp+0x1c>
 800b1ec:	2104      	movs	r1, #4
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	f7ff ff62 	bl	800b0b8 <__sfmoreglue>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	6030      	str	r0, [r6, #0]
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1d5      	bne.n	800b1a8 <__sfp+0x24>
 800b1fc:	f7ff ff78 	bl	800b0f0 <__sfp_lock_release>
 800b200:	230c      	movs	r3, #12
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	e7ee      	b.n	800b1e4 <__sfp+0x60>
 800b206:	bf00      	nop
 800b208:	0800bb90 	.word	0x0800bb90
 800b20c:	ffff0001 	.word	0xffff0001

0800b210 <_fwalk_reent>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	4606      	mov	r6, r0
 800b216:	4688      	mov	r8, r1
 800b218:	2700      	movs	r7, #0
 800b21a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b21e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b222:	f1b9 0901 	subs.w	r9, r9, #1
 800b226:	d505      	bpl.n	800b234 <_fwalk_reent+0x24>
 800b228:	6824      	ldr	r4, [r4, #0]
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d1f7      	bne.n	800b21e <_fwalk_reent+0xe>
 800b22e:	4638      	mov	r0, r7
 800b230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b234:	89ab      	ldrh	r3, [r5, #12]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d907      	bls.n	800b24a <_fwalk_reent+0x3a>
 800b23a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b23e:	3301      	adds	r3, #1
 800b240:	d003      	beq.n	800b24a <_fwalk_reent+0x3a>
 800b242:	4629      	mov	r1, r5
 800b244:	4630      	mov	r0, r6
 800b246:	47c0      	blx	r8
 800b248:	4307      	orrs	r7, r0
 800b24a:	3568      	adds	r5, #104	; 0x68
 800b24c:	e7e9      	b.n	800b222 <_fwalk_reent+0x12>

0800b24e <__retarget_lock_init_recursive>:
 800b24e:	4770      	bx	lr

0800b250 <__retarget_lock_acquire_recursive>:
 800b250:	4770      	bx	lr

0800b252 <__retarget_lock_release_recursive>:
 800b252:	4770      	bx	lr

0800b254 <__swhatbuf_r>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	460e      	mov	r6, r1
 800b258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25c:	4614      	mov	r4, r2
 800b25e:	2900      	cmp	r1, #0
 800b260:	461d      	mov	r5, r3
 800b262:	b096      	sub	sp, #88	; 0x58
 800b264:	da08      	bge.n	800b278 <__swhatbuf_r+0x24>
 800b266:	2200      	movs	r2, #0
 800b268:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b26c:	602a      	str	r2, [r5, #0]
 800b26e:	061a      	lsls	r2, r3, #24
 800b270:	d410      	bmi.n	800b294 <__swhatbuf_r+0x40>
 800b272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b276:	e00e      	b.n	800b296 <__swhatbuf_r+0x42>
 800b278:	466a      	mov	r2, sp
 800b27a:	f000 f95f 	bl	800b53c <_fstat_r>
 800b27e:	2800      	cmp	r0, #0
 800b280:	dbf1      	blt.n	800b266 <__swhatbuf_r+0x12>
 800b282:	9a01      	ldr	r2, [sp, #4]
 800b284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b28c:	425a      	negs	r2, r3
 800b28e:	415a      	adcs	r2, r3
 800b290:	602a      	str	r2, [r5, #0]
 800b292:	e7ee      	b.n	800b272 <__swhatbuf_r+0x1e>
 800b294:	2340      	movs	r3, #64	; 0x40
 800b296:	2000      	movs	r0, #0
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	b016      	add	sp, #88	; 0x58
 800b29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2a0 <__smakebuf_r>:
 800b2a0:	898b      	ldrh	r3, [r1, #12]
 800b2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2a4:	079d      	lsls	r5, r3, #30
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	d507      	bpl.n	800b2bc <__smakebuf_r+0x1c>
 800b2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	6163      	str	r3, [r4, #20]
 800b2b8:	b002      	add	sp, #8
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	466a      	mov	r2, sp
 800b2be:	ab01      	add	r3, sp, #4
 800b2c0:	f7ff ffc8 	bl	800b254 <__swhatbuf_r>
 800b2c4:	9900      	ldr	r1, [sp, #0]
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f7ff f877 	bl	800a3bc <_malloc_r>
 800b2ce:	b948      	cbnz	r0, 800b2e4 <__smakebuf_r+0x44>
 800b2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2d4:	059a      	lsls	r2, r3, #22
 800b2d6:	d4ef      	bmi.n	800b2b8 <__smakebuf_r+0x18>
 800b2d8:	f023 0303 	bic.w	r3, r3, #3
 800b2dc:	f043 0302 	orr.w	r3, r3, #2
 800b2e0:	81a3      	strh	r3, [r4, #12]
 800b2e2:	e7e3      	b.n	800b2ac <__smakebuf_r+0xc>
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <__smakebuf_r+0x7c>)
 800b2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	6020      	str	r0, [r4, #0]
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	81a3      	strh	r3, [r4, #12]
 800b2f2:	9b00      	ldr	r3, [sp, #0]
 800b2f4:	6120      	str	r0, [r4, #16]
 800b2f6:	6163      	str	r3, [r4, #20]
 800b2f8:	9b01      	ldr	r3, [sp, #4]
 800b2fa:	b15b      	cbz	r3, 800b314 <__smakebuf_r+0x74>
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b302:	f000 f92d 	bl	800b560 <_isatty_r>
 800b306:	b128      	cbz	r0, 800b314 <__smakebuf_r+0x74>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	f043 0301 	orr.w	r3, r3, #1
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	89a0      	ldrh	r0, [r4, #12]
 800b316:	4305      	orrs	r5, r0
 800b318:	81a5      	strh	r5, [r4, #12]
 800b31a:	e7cd      	b.n	800b2b8 <__smakebuf_r+0x18>
 800b31c:	0800b0ad 	.word	0x0800b0ad

0800b320 <memchr>:
 800b320:	4603      	mov	r3, r0
 800b322:	b510      	push	{r4, lr}
 800b324:	b2c9      	uxtb	r1, r1
 800b326:	4402      	add	r2, r0
 800b328:	4293      	cmp	r3, r2
 800b32a:	4618      	mov	r0, r3
 800b32c:	d101      	bne.n	800b332 <memchr+0x12>
 800b32e:	2000      	movs	r0, #0
 800b330:	e003      	b.n	800b33a <memchr+0x1a>
 800b332:	7804      	ldrb	r4, [r0, #0]
 800b334:	3301      	adds	r3, #1
 800b336:	428c      	cmp	r4, r1
 800b338:	d1f6      	bne.n	800b328 <memchr+0x8>
 800b33a:	bd10      	pop	{r4, pc}

0800b33c <memmove>:
 800b33c:	4288      	cmp	r0, r1
 800b33e:	b510      	push	{r4, lr}
 800b340:	eb01 0402 	add.w	r4, r1, r2
 800b344:	d902      	bls.n	800b34c <memmove+0x10>
 800b346:	4284      	cmp	r4, r0
 800b348:	4623      	mov	r3, r4
 800b34a:	d807      	bhi.n	800b35c <memmove+0x20>
 800b34c:	1e43      	subs	r3, r0, #1
 800b34e:	42a1      	cmp	r1, r4
 800b350:	d008      	beq.n	800b364 <memmove+0x28>
 800b352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b35a:	e7f8      	b.n	800b34e <memmove+0x12>
 800b35c:	4601      	mov	r1, r0
 800b35e:	4402      	add	r2, r0
 800b360:	428a      	cmp	r2, r1
 800b362:	d100      	bne.n	800b366 <memmove+0x2a>
 800b364:	bd10      	pop	{r4, pc}
 800b366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b36a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b36e:	e7f7      	b.n	800b360 <memmove+0x24>

0800b370 <__malloc_lock>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__malloc_lock+0x8>)
 800b372:	f7ff bf6d 	b.w	800b250 <__retarget_lock_acquire_recursive>
 800b376:	bf00      	nop
 800b378:	20002624 	.word	0x20002624

0800b37c <__malloc_unlock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__malloc_unlock+0x8>)
 800b37e:	f7ff bf68 	b.w	800b252 <__retarget_lock_release_recursive>
 800b382:	bf00      	nop
 800b384:	20002624 	.word	0x20002624

0800b388 <_realloc_r>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	4680      	mov	r8, r0
 800b38e:	4614      	mov	r4, r2
 800b390:	460e      	mov	r6, r1
 800b392:	b921      	cbnz	r1, 800b39e <_realloc_r+0x16>
 800b394:	4611      	mov	r1, r2
 800b396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	f7ff b80f 	b.w	800a3bc <_malloc_r>
 800b39e:	b92a      	cbnz	r2, 800b3ac <_realloc_r+0x24>
 800b3a0:	f7fe ffa4 	bl	800a2ec <_free_r>
 800b3a4:	4625      	mov	r5, r4
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ac:	f000 f8fa 	bl	800b5a4 <_malloc_usable_size_r>
 800b3b0:	4284      	cmp	r4, r0
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	d802      	bhi.n	800b3bc <_realloc_r+0x34>
 800b3b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3ba:	d812      	bhi.n	800b3e2 <_realloc_r+0x5a>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4640      	mov	r0, r8
 800b3c0:	f7fe fffc 	bl	800a3bc <_malloc_r>
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d0ed      	beq.n	800b3a6 <_realloc_r+0x1e>
 800b3ca:	42bc      	cmp	r4, r7
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	bf28      	it	cs
 800b3d2:	463a      	movcs	r2, r7
 800b3d4:	f7fe fe16 	bl	800a004 <memcpy>
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4640      	mov	r0, r8
 800b3dc:	f7fe ff86 	bl	800a2ec <_free_r>
 800b3e0:	e7e1      	b.n	800b3a6 <_realloc_r+0x1e>
 800b3e2:	4635      	mov	r5, r6
 800b3e4:	e7df      	b.n	800b3a6 <_realloc_r+0x1e>

0800b3e6 <_raise_r>:
 800b3e6:	291f      	cmp	r1, #31
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	d904      	bls.n	800b3fa <_raise_r+0x14>
 800b3f0:	2316      	movs	r3, #22
 800b3f2:	6003      	str	r3, [r0, #0]
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f8:	bd38      	pop	{r3, r4, r5, pc}
 800b3fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3fc:	b112      	cbz	r2, 800b404 <_raise_r+0x1e>
 800b3fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b402:	b94b      	cbnz	r3, 800b418 <_raise_r+0x32>
 800b404:	4620      	mov	r0, r4
 800b406:	f000 f831 	bl	800b46c <_getpid_r>
 800b40a:	462a      	mov	r2, r5
 800b40c:	4601      	mov	r1, r0
 800b40e:	4620      	mov	r0, r4
 800b410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b414:	f000 b818 	b.w	800b448 <_kill_r>
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d00a      	beq.n	800b432 <_raise_r+0x4c>
 800b41c:	1c59      	adds	r1, r3, #1
 800b41e:	d103      	bne.n	800b428 <_raise_r+0x42>
 800b420:	2316      	movs	r3, #22
 800b422:	6003      	str	r3, [r0, #0]
 800b424:	2001      	movs	r0, #1
 800b426:	e7e7      	b.n	800b3f8 <_raise_r+0x12>
 800b428:	2400      	movs	r4, #0
 800b42a:	4628      	mov	r0, r5
 800b42c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b430:	4798      	blx	r3
 800b432:	2000      	movs	r0, #0
 800b434:	e7e0      	b.n	800b3f8 <_raise_r+0x12>
	...

0800b438 <raise>:
 800b438:	4b02      	ldr	r3, [pc, #8]	; (800b444 <raise+0xc>)
 800b43a:	4601      	mov	r1, r0
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	f7ff bfd2 	b.w	800b3e6 <_raise_r>
 800b442:	bf00      	nop
 800b444:	200002e0 	.word	0x200002e0

0800b448 <_kill_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	2300      	movs	r3, #0
 800b44c:	4d06      	ldr	r5, [pc, #24]	; (800b468 <_kill_r+0x20>)
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	4611      	mov	r1, r2
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	f7f5 fd48 	bl	8000eea <_kill>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	d102      	bne.n	800b464 <_kill_r+0x1c>
 800b45e:	682b      	ldr	r3, [r5, #0]
 800b460:	b103      	cbz	r3, 800b464 <_kill_r+0x1c>
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	bd38      	pop	{r3, r4, r5, pc}
 800b466:	bf00      	nop
 800b468:	20002628 	.word	0x20002628

0800b46c <_getpid_r>:
 800b46c:	f7f5 bd36 	b.w	8000edc <_getpid>

0800b470 <__sread>:
 800b470:	b510      	push	{r4, lr}
 800b472:	460c      	mov	r4, r1
 800b474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b478:	f000 f89c 	bl	800b5b4 <_read_r>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	bfab      	itete	ge
 800b480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b482:	89a3      	ldrhlt	r3, [r4, #12]
 800b484:	181b      	addge	r3, r3, r0
 800b486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b48a:	bfac      	ite	ge
 800b48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b48e:	81a3      	strhlt	r3, [r4, #12]
 800b490:	bd10      	pop	{r4, pc}

0800b492 <__swrite>:
 800b492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b496:	461f      	mov	r7, r3
 800b498:	898b      	ldrh	r3, [r1, #12]
 800b49a:	4605      	mov	r5, r0
 800b49c:	05db      	lsls	r3, r3, #23
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4616      	mov	r6, r2
 800b4a2:	d505      	bpl.n	800b4b0 <__swrite+0x1e>
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ac:	f000 f868 	bl	800b580 <_lseek_r>
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	463b      	mov	r3, r7
 800b4be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c6:	f000 b817 	b.w	800b4f8 <_write_r>

0800b4ca <__sseek>:
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d2:	f000 f855 	bl	800b580 <_lseek_r>
 800b4d6:	1c43      	adds	r3, r0, #1
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	bf15      	itete	ne
 800b4dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4e6:	81a3      	strheq	r3, [r4, #12]
 800b4e8:	bf18      	it	ne
 800b4ea:	81a3      	strhne	r3, [r4, #12]
 800b4ec:	bd10      	pop	{r4, pc}

0800b4ee <__sclose>:
 800b4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f2:	f000 b813 	b.w	800b51c <_close_r>
	...

0800b4f8 <_write_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	4611      	mov	r1, r2
 800b500:	2200      	movs	r2, #0
 800b502:	4d05      	ldr	r5, [pc, #20]	; (800b518 <_write_r+0x20>)
 800b504:	602a      	str	r2, [r5, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	f7f5 fd26 	bl	8000f58 <_write>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_write_r+0x1e>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_write_r+0x1e>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	20002628 	.word	0x20002628

0800b51c <_close_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	2300      	movs	r3, #0
 800b520:	4d05      	ldr	r5, [pc, #20]	; (800b538 <_close_r+0x1c>)
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f5 fd32 	bl	8000f90 <_close>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_close_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_close_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20002628 	.word	0x20002628

0800b53c <_fstat_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	2300      	movs	r3, #0
 800b540:	4d06      	ldr	r5, [pc, #24]	; (800b55c <_fstat_r+0x20>)
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	4611      	mov	r1, r2
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	f7f5 fd2c 	bl	8000fa6 <_fstat>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d102      	bne.n	800b558 <_fstat_r+0x1c>
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	b103      	cbz	r3, 800b558 <_fstat_r+0x1c>
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	bf00      	nop
 800b55c:	20002628 	.word	0x20002628

0800b560 <_isatty_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	2300      	movs	r3, #0
 800b564:	4d05      	ldr	r5, [pc, #20]	; (800b57c <_isatty_r+0x1c>)
 800b566:	4604      	mov	r4, r0
 800b568:	4608      	mov	r0, r1
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	f7f5 fd2a 	bl	8000fc4 <_isatty>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d102      	bne.n	800b57a <_isatty_r+0x1a>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	b103      	cbz	r3, 800b57a <_isatty_r+0x1a>
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	20002628 	.word	0x20002628

0800b580 <_lseek_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	4611      	mov	r1, r2
 800b588:	2200      	movs	r2, #0
 800b58a:	4d05      	ldr	r5, [pc, #20]	; (800b5a0 <_lseek_r+0x20>)
 800b58c:	602a      	str	r2, [r5, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	f7f5 fd22 	bl	8000fd8 <_lseek>
 800b594:	1c43      	adds	r3, r0, #1
 800b596:	d102      	bne.n	800b59e <_lseek_r+0x1e>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	b103      	cbz	r3, 800b59e <_lseek_r+0x1e>
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	20002628 	.word	0x20002628

0800b5a4 <_malloc_usable_size_r>:
 800b5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a8:	1f18      	subs	r0, r3, #4
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	bfbc      	itt	lt
 800b5ae:	580b      	ldrlt	r3, [r1, r0]
 800b5b0:	18c0      	addlt	r0, r0, r3
 800b5b2:	4770      	bx	lr

0800b5b4 <_read_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	2200      	movs	r2, #0
 800b5be:	4d05      	ldr	r5, [pc, #20]	; (800b5d4 <_read_r+0x20>)
 800b5c0:	602a      	str	r2, [r5, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f7f5 fcab 	bl	8000f1e <_read>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_read_r+0x1e>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_read_r+0x1e>
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	20002628 	.word	0x20002628

0800b5d8 <_init>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	bf00      	nop
 800b5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5de:	bc08      	pop	{r3}
 800b5e0:	469e      	mov	lr, r3
 800b5e2:	4770      	bx	lr

0800b5e4 <_fini>:
 800b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e6:	bf00      	nop
 800b5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ea:	bc08      	pop	{r3}
 800b5ec:	469e      	mov	lr, r3
 800b5ee:	4770      	bx	lr
