
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bedc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  0800c018  0800c018  0001c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c874  0800c874  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c87c  0800c87c  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c87c  0800c87c  0001c87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c880  0800c880  0001c880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0800c884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f3c  200004a8  0800cd2c  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  0800cd2c  000223e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001628a  00000000  00000000  000204d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036cf  00000000  00000000  0003675b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00039e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aba3  00000000  00000000  0003c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dd0  00000000  00000000  00056f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094bfb  00000000  00000000  0006dcfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001028f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c9c  00000000  00000000  00102948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200004a8 	.word	0x200004a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800c000 	.word	0x0800c000

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200004ac 	.word	0x200004ac
 8000178:	0800c000 	.word	0x0800c000

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	891b      	ldrh	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 f9d3 	bl	8001870 <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	75fb      	strb	r3, [r7, #23]

	//CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip

	uint8_t Address;
	uint8_t ConfigIndex = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	757b      	strb	r3, [r7, #21]
	// configure standard registers

	//uint8_t Register_Count = sizeof(Register_Setting);

	for (Address = 0x00; Address < 0x2F; Address++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	75bb      	strb	r3, [r7, #22]
 80004ea:	e02e      	b.n	800054a <CC1200_Configure+0x78>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004ec:	7d7b      	ldrb	r3, [r7, #21]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	7dba      	ldrb	r2, [r7, #22]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d122      	bne.n	8000542 <CC1200_Configure+0x70>
		{
			retval = CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 80004fc:	7d7b      	ldrb	r3, [r7, #21]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	4413      	add	r3, r2
 8000504:	785a      	ldrb	r2, [r3, #1]
 8000506:	7dbb      	ldrb	r3, [r7, #22]
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f85c 	bl	80005c8 <CC1200_Write_Single_Register>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Register(SPI_Info, Address);
 8000514:	7dbb      	ldrb	r3, [r7, #22]
 8000516:	4619      	mov	r1, r3
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f000 f891 	bl	8000640 <CC1200_Read_Single_Register>
 800051e:	4603      	mov	r3, r0
 8000520:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Register_Setting[ConfigIndex].Value)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7d7b      	ldrb	r3, [r7, #21]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	429a      	cmp	r2, r3
 8000534:	d001      	beq.n	800053a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	3301      	adds	r3, #1
 800053e:	757b      	strb	r3, [r7, #21]
 8000540:	e000      	b.n	8000544 <CC1200_Configure+0x72>
		}
		else
		{
			continue;
 8000542:	bf00      	nop
	for (Address = 0x00; Address < 0x2F; Address++)
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	3301      	adds	r3, #1
 8000548:	75bb      	strb	r3, [r7, #22]
 800054a:	7dbb      	ldrb	r3, [r7, #22]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d9cd      	bls.n	80004ec <CC1200_Configure+0x1a>
		}
	}

	ConfigIndex = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000554:	2300      	movs	r3, #0
 8000556:	75bb      	strb	r3, [r7, #22]
 8000558:	e02e      	b.n	80005b8 <CC1200_Configure+0xe6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 800055a:	7d7b      	ldrb	r3, [r7, #21]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	7dba      	ldrb	r2, [r7, #22]
 8000566:	429a      	cmp	r2, r3
 8000568:	d122      	bne.n	80005b0 <CC1200_Configure+0xde>
		{
			retval = CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 800056a:	7d7b      	ldrb	r3, [r7, #21]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	785a      	ldrb	r2, [r3, #1]
 8000574:	7dbb      	ldrb	r3, [r7, #22]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 f8a1 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 8000582:	7dbb      	ldrb	r3, [r7, #22]
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f000 f8ec 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800058c:	4603      	mov	r3, r0
 800058e:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Extended_Register_Setting[ConfigIndex].Value)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7d7b      	ldrb	r3, [r7, #21]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	440b      	add	r3, r1
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <CC1200_Configure+0xd6>
			{
				retval = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	3301      	adds	r3, #1
 80005ac:	757b      	strb	r3, [r7, #21]
 80005ae:	e000      	b.n	80005b2 <CC1200_Configure+0xe0>
		}
		else
		{
			continue;
 80005b0:	bf00      	nop
	for (Address = 0x00; Address <= 0xDA; Address++)
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	3301      	adds	r3, #1
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2bda      	cmp	r3, #218	; 0xda
 80005bc:	d9cd      	bls.n	800055a <CC1200_Configure+0x88>
		}
	}

	return(retval);
 80005be:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if (Register_Address < 0x2F)
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2b2e      	cmp	r3, #46	; 0x2e
 80005dc:	d829      	bhi.n	8000632 <CC1200_Write_Single_Register+0x6a>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6858      	ldr	r0, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	891b      	ldrh	r3, [r3, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 f93f 	bl	8001870 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68d8      	ldr	r0, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f107 010e 	add.w	r1, r7, #14
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f003 fc0f 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68d8      	ldr	r0, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	1cb9      	adds	r1, r7, #2
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	f003 fc05 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6858      	ldr	r0, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f001 f922 	bl	8001870 <HAL_GPIO_WritePin>

		retval = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e001      	b.n	8000636 <CC1200_Write_Single_Register+0x6e>
	}
	else
	{
		retval = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if (Register_Address < 0x2F)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b2e      	cmp	r3, #46	; 0x2e
 8000650:	d82f      	bhi.n	80006b2 <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f001 f900 	bl	8001870 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68d8      	ldr	r0, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f107 010e 	add.w	r1, r7, #14
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f003 fbd0 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68d8      	ldr	r0, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f107 010d 	add.w	r1, r7, #13
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	f003 fbc5 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	891b      	ldrh	r3, [r3, #8]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 f8e2 	bl	8001870 <HAL_GPIO_WritePin>

		retval = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e001      	b.n	80006b6 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b39      	cmp	r3, #57	; 0x39
 80006d4:	d902      	bls.n	80006dc <CC1200_Write_Single_Extended_Register+0x1c>
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d908      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2ba2      	cmp	r3, #162	; 0xa2
 80006e0:	d902      	bls.n	80006e8 <CC1200_Write_Single_Extended_Register+0x28>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2bd1      	cmp	r3, #209	; 0xd1
 80006e6:	d902      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006e8:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006ea:	2bda      	cmp	r3, #218	; 0xda
 80006ec:	d902      	bls.n	80006f4 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e032      	b.n	800075a <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006f4:	232f      	movs	r3, #47	; 0x2f
 80006f6:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f001 f8b4 	bl	8001870 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68d8      	ldr	r0, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f107 010e 	add.w	r1, r7, #14
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	f003 fb84 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68d8      	ldr	r0, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	1cf9      	adds	r1, r7, #3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	f003 fb7a 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68d8      	ldr	r0, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	1cb9      	adds	r1, r7, #2
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f003 fb70 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	891b      	ldrh	r3, [r3, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	f001 f88d 	bl	8001870 <HAL_GPIO_WritePin>

		retval = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b39      	cmp	r3, #57	; 0x39
 8000774:	d902      	bls.n	800077c <CC1200_Read_Single_Extended_Register+0x18>
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b63      	cmp	r3, #99	; 0x63
 800077a:	d908      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2ba2      	cmp	r3, #162	; 0xa2
 8000780:	d902      	bls.n	8000788 <CC1200_Read_Single_Extended_Register+0x24>
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2bd1      	cmp	r3, #209	; 0xd1
 8000786:	d902      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000788:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800078a:	2bda      	cmp	r3, #218	; 0xda
 800078c:	d902      	bls.n	8000794 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e035      	b.n	8000800 <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};
		//(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
		//(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
		//(SPI_Info -> MOSI_Data)[2] = MOSI_Data[2];

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6858      	ldr	r0, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891b      	ldrh	r3, [r3, #8]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f001 f862 	bl	8001870 <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68d8      	ldr	r0, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f107 010e 	add.w	r1, r7, #14
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f003 fb32 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	1cf9      	adds	r1, r7, #3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	f003 fb28 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68d8      	ldr	r0, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	f107 010d 	add.w	r1, r7, #13
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	f003 fb1d 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 f83a 	bl	8001870 <HAL_GPIO_WritePin>

		retval = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b2f      	cmp	r3, #47	; 0x2f
 800081a:	d922      	bls.n	8000862 <CC1200_Command_Strobe+0x58>
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b3d      	cmp	r3, #61	; 0x3d
 8000820:	d81f      	bhi.n	8000862 <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	73bb      	strb	r3, [r7, #14]
		//SPI_Info -> MOSI_Data = &Header_Byte;

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6858      	ldr	r0, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f001 f81d 	bl	8001870 <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f107 010e 	add.w	r1, r7, #14
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	f003 faed 	bl	8003e26 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f001 f80a 	bl	8001870 <HAL_GPIO_WritePin>

		retval = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
	{
 8000860:	e001      	b.n	8000866 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1200_Transmit>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Transmit(CC1200_t* SPI_Info, uint8_t* TX_Packet, uint8_t TX_Packet_Length)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t Header_Byte = 0x40 | 0x3F; // 0100 0000 | 0011 1111
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	75bb      	strb	r3, [r7, #22]
	uint8_t i; // counter
	//uint8_t Status; // status byte

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFTX); // flush TX FIFO (before loading data)
 8000882:	213b      	movs	r1, #59	; 0x3b
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffc0 	bl	800080a <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6858      	ldr	r0, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f000 ffeb 	bl	8001870 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68d8      	ldr	r0, [r3, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f107 0116 	add.w	r1, r7, #22
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	f003 fabb 	bl	8003e26 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &TX_Packet_Length, SPI_Info -> MISO_Data, 1, 100);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68d8      	ldr	r0, [r3, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	f003 fab1 	bl	8003e26 <HAL_SPI_TransmitReceive>

	for(i = 0; i < TX_Packet_Length; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00e      	b.n	80008e8 <CC1200_Transmit+0x78>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &(TX_Packet[i]), SPI_Info -> MISO_Data, 1, 100);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	18d1      	adds	r1, r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	f003 faa2 	bl	8003e26 <HAL_SPI_TransmitReceive>
	for(i = 0; i < TX_Packet_Length; i++)
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3301      	adds	r3, #1
 80008e6:	75fb      	strb	r3, [r7, #23]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7dfa      	ldrb	r2, [r7, #23]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3ec      	bcc.n	80008ca <CC1200_Transmit+0x5a>
	}

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6858      	ldr	r0, [r3, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f000 ffb8 	bl	8001870 <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_STX); // enable TX
 8000900:	2135      	movs	r1, #53	; 0x35
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff81 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <CC1200_Receive>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Receive(CC1200_t* SPI_Info, uint8_t* RX_Packet)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af02      	add	r7, sp, #8
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
	uint8_t Header_Byte = 0xC0 | 0x3F; // 1100 0000 | 0011 1111
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	737b      	strb	r3, [r7, #13]
	uint8_t Placeholder = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	733b      	strb	r3, [r7, #12]
//    if (Packet_Length == 0)
//    {
//		return 1;
//    }

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6858      	ldr	r0, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	891b      	ldrh	r3, [r3, #8]
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f000 ff9e 	bl	8001870 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68d8      	ldr	r0, [r3, #12]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f107 010d 	add.w	r1, r7, #13
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	f003 fa6e 	bl	8003e26 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68d8      	ldr	r0, [r3, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	f107 010c 	add.w	r1, r7, #12
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	f003 fa63 	bl	8003e26 <HAL_SPI_TransmitReceive>

	Packet_Length = (SPI_Info -> MISO_Data) [0];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < Packet_Length; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e014      	b.n	8000998 <CC1200_Receive+0x86>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68d8      	ldr	r0, [r3, #12]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f107 010c 	add.w	r1, r7, #12
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	f003 fa51 	bl	8003e26 <HAL_SPI_TransmitReceive>
		RX_Packet[i] = (SPI_Info -> MISO_Data) [0];
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	440b      	add	r3, r1
 800098e:	7812      	ldrb	r2, [r2, #0]
 8000990:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Packet_Length; i++)
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3301      	adds	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	7bfa      	ldrb	r2, [r7, #15]
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	429a      	cmp	r2, r3
 800099e:	d3e6      	bcc.n	800096e <CC1200_Receive+0x5c>
	}

	RX_Packet[Packet_Length] = '\0'; // null termination
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6858      	ldr	r0, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	891b      	ldrh	r3, [r3, #8]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	f000 ff5b 	bl	8001870 <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (after processing data)
 80009ba:	213a      	movs	r1, #58	; 0x3a
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff24 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
//	sprintf(str1, "%s\r\n", (char*) RX_Packet);
//	strcat(Message, str1);
//	Message_Length = strlen(Message);
//
//	CDC_Transmit_FS((uint8_t*) Message, Message_Length);
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
	...

080009e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	f5ad 5d1e 	sub.w	sp, sp, #10112	; 0x2780
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4602      	mov	r2, r0
 80009ec:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80009f0:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 80009f4:	801a      	strh	r2, [r3, #0]
	uint16_t Message_Length;
	char str1[150];

	uint8_t check;

	check = CC1200_Receive(&SPI_Info, RX_Packet);
 80009f6:	4939      	ldr	r1, [pc, #228]	; (8000adc <HAL_GPIO_EXTI_Callback+0xfc>)
 80009f8:	4839      	ldr	r0, [pc, #228]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x100>)
 80009fa:	f7ff ff8a 	bl	8000912 <CC1200_Receive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f507 521e 	add.w	r2, r7, #10112	; 0x2780
 8000a04:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000a08:	7013      	strb	r3, [r2, #0]

	if (check) // check == 1
 8000a0a:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8000a0e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d029      	beq.n	8000a6c <HAL_GPIO_EXTI_Callback+0x8c>
	{
		sprintf(str1, "RX FIFO Empty!\r\n");
 8000a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1c:	3b2c      	subs	r3, #44	; 0x2c
 8000a1e:	4931      	ldr	r1, [pc, #196]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x104>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00a f80b 	bl	800aa3c <siprintf>
		strcat(Message, str1);
 8000a26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a2a:	3a2c      	subs	r2, #44	; 0x2c
 8000a2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a30:	3b14      	subs	r3, #20
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00a f821 	bl	800aa7c <strcat>
		Message_Length = strlen(Message);
 8000a3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a3e:	3b14      	subs	r3, #20
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fb9b 	bl	800017c <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f507 521e 	add.w	r2, r7, #10112	; 0x2780
 8000a4c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000a50:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8000a52:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8000a56:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000a5a:	881a      	ldrh	r2, [r3, #0]
 8000a5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a60:	3b14      	subs	r3, #20
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 fa6d 	bl	8008f44 <CDC_Transmit_FS>
		strcat(Message, str1);
		Message_Length = strlen(Message);

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
	}
}
 8000a6a:	e030      	b.n	8000ace <HAL_GPIO_EXTI_Callback+0xee>
		sprintf(Message, "Received the Following Message: ");
 8000a6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a70:	3b14      	subs	r3, #20
 8000a72:	491d      	ldr	r1, [pc, #116]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x108>)
 8000a74:	4618      	mov	r0, r3
 8000a76:	f009 ffe1 	bl	800aa3c <siprintf>
		sprintf(str1, "%s\r\n", (char*) RX_Packet);
 8000a7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a7e:	3b2c      	subs	r3, #44	; 0x2c
 8000a80:	4a16      	ldr	r2, [pc, #88]	; (8000adc <HAL_GPIO_EXTI_Callback+0xfc>)
 8000a82:	491a      	ldr	r1, [pc, #104]	; (8000aec <HAL_GPIO_EXTI_Callback+0x10c>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f009 ffd9 	bl	800aa3c <siprintf>
		strcat(Message, str1);
 8000a8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a8e:	3a2c      	subs	r2, #44	; 0x2c
 8000a90:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a94:	3b14      	subs	r3, #20
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f009 ffef 	bl	800aa7c <strcat>
		Message_Length = strlen(Message);
 8000a9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000aa2:	3b14      	subs	r3, #20
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fb69 	bl	800017c <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f507 521e 	add.w	r2, r7, #10112	; 0x2780
 8000ab0:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000ab4:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8000ab6:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8000aba:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000abe:	881a      	ldrh	r2, [r3, #0]
 8000ac0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000ac4:	3b14      	subs	r3, #20
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f008 fa3b 	bl	8008f44 <CDC_Transmit_FS>
}
 8000ace:	bf00      	nop
 8000ad0:	f507 571e 	add.w	r7, r7, #10112	; 0x2780
 8000ad4:	3738      	adds	r7, #56	; 0x38
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200005b4 	.word	0x200005b4
 8000ae0:	200005a0 	.word	0x200005a0
 8000ae4:	0800c018 	.word	0x0800c018
 8000ae8:	0800c02c 	.word	0x0800c02c
 8000aec:	0800c050 	.word	0x0800c050

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af4:	f000 fbaf 	bl	8001256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af8:	f000 f80c 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afc:	f000 f902 	bl	8000d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b00:	f000 f8d6 	bl	8000cb0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000b04:	f000 f852 	bl	8000bac <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000b08:	f008 f92a 	bl	8008d60 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000b0c:	f000 f884 	bl	8000c18 <MX_TIM2_Init>
	//uint8_t flag = 1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0x20>
	...

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b092      	sub	sp, #72	; 0x48
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2234      	movs	r2, #52	; 0x34
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f009 ff82 	bl	800aa2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <SystemClock_Config+0x94>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <SystemClock_Config+0x94>)
 8000b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b44:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000b5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fadd 	bl	8003128 <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000b74:	f000 f95a 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 fdf9 	bl	8003788 <HAL_RCC_ClockConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f946 	bl	8000e2c <Error_Handler>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3748      	adds	r7, #72	; 0x48
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40007000 	.word	0x40007000

08000bac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000be0:	2210      	movs	r2, #16
 8000be2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bf8:	220a      	movs	r2, #10
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_SPI1_Init+0x64>)
 8000bfe:	f003 f889 	bl	8003d14 <HAL_SPI_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c08:	f000 f910 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200004c4 	.word	0x200004c4
 8000c14:	40013000 	.word	0x40013000

08000c18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c5e:	f003 fb4f 	bl	8004300 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c68:	f000 f8e0 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c7a:	f003 fc5c 	bl	8004536 <HAL_TIM_ConfigClockSource>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c84:	f000 f8d2 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_TIM2_Init+0x94>)
 8000c96:	f003 fe3d 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f000 f8c4 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000051c 	.word	0x2000051c

08000cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_USART2_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f003 fe72 	bl	80049d0 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 f89b 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000055c 	.word	0x2000055c
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a3f      	ldr	r2, [pc, #252]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a39      	ldr	r2, [pc, #228]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0320 	and.w	r3, r3, #32
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a33      	ldr	r2, [pc, #204]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <MX_GPIO_Init+0x118>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d82:	f000 fd75 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4826      	ldr	r0, [pc, #152]	; (8000e24 <MX_GPIO_Init+0x120>)
 8000d8c:	f000 fd70 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4820      	ldr	r0, [pc, #128]	; (8000e28 <MX_GPIO_Init+0x124>)
 8000da8:	f000 fbd2 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4816      	ldr	r0, [pc, #88]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000dc6:	f000 fbc3 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <MX_GPIO_Init+0x124>)
 8000de2:	f000 fbb5 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de6:	2340      	movs	r3, #64	; 0x40
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_GPIO_Init+0x120>)
 8000dfe:	f000 fba7 	bl	8001550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2028      	movs	r0, #40	; 0x28
 8000e08:	f000 fb6b 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e0c:	2028      	movs	r0, #40	; 0x28
 8000e0e:	f000 fb84 	bl	800151a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e48:	6253      	str	r3, [r2, #36]	; 0x24
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6213      	str	r3, [r2, #32]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6253      	str	r3, [r2, #36]	; 0x24
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e86:	2007      	movs	r0, #7
 8000e88:	f000 fb20 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800

08000e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_SPI_MspInit+0x7c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d127      	bne.n	8000f0a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eea:	23e0      	movs	r3, #224	; 0xe0
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efa:	2305      	movs	r3, #5
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_SPI_MspInit+0x84>)
 8000f06:	f000 fb23 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d113      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201c      	movs	r0, #28
 8000f50:	f000 fac7 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f54:	201c      	movs	r0, #28
 8000f56:	f000 fae0 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_UART_MspInit+0x7c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d127      	bne.n	8000fda <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0x80>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <HAL_UART_MspInit+0x80>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	6253      	str	r3, [r2, #36]	; 0x24
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_UART_MspInit+0x80>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0x80>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_UART_MspInit+0x80>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_UART_MspInit+0x80>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_UART_MspInit+0x84>)
 8000fd6:	f000 fabb 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 f961 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <USB_LP_IRQHandler+0x10>)
 8001046:	f000 fd47 	bl	8001ad8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20001ec8 	.word	0x20001ec8

08001054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM2_IRQHandler+0x10>)
 800105a:	f003 f990 	bl	800437e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000051c 	.word	0x2000051c

08001068 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800106c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001070:	f000 fc16 	bl	80018a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001074:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001078:	f000 fc12 	bl	80018a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return 1;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <_kill>:

int _kill(int pid, int sig)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001098:	f009 fc9e 	bl	800a9d8 <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	2216      	movs	r2, #22
 80010a0:	601a      	str	r2, [r3, #0]
  return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_exit>:

void _exit (int status)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010b6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffe7 	bl	800108e <_kill>
  while (1) {}    /* Make sure we hang here */
 80010c0:	e7fe      	b.n	80010c0 <_exit+0x12>

080010c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e00a      	b.n	80010ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d4:	f3af 8000 	nop.w
 80010d8:	4601      	mov	r1, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	b2ca      	uxtb	r2, r1
 80010e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf0      	blt.n	80010d4 <_read+0x12>
  }

  return len;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e009      	b.n	8001122 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	60ba      	str	r2, [r7, #8]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	dbf1      	blt.n	800110e <_write+0x12>
  }
  return len;
 800112a:	687b      	ldr	r3, [r7, #4]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_close>:

int _close(int file)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115a:	605a      	str	r2, [r3, #4]
  return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <_isatty>:

int _isatty(int file)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f009 fc08 	bl	800a9d8 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20014000 	.word	0x20014000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000634 	.word	0x20000634
 80011fc:	200023e8 	.word	0x200023e8

08001200 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001232:	f7ff ffe5 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f009 fbd5 	bl	800a9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123a:	f7ff fc59 	bl	8000af0 <main>
  bx lr
 800123e:	4770      	bx	lr
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8001248:	0800c884 	.word	0x0800c884
  ldr r2, =_sbss
 800124c:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8001250:	200023e4 	.word	0x200023e4

08001254 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_IRQHandler>

08001256 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f933 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f80e 	bl	8001288 <HAL_InitTick>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	e001      	b.n	800127c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001278:	f7ff fdde 	bl	8000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127c:	79fb      	ldrb	r3, [r7, #7]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_InitTick+0x68>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d022      	beq.n	80012e2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_InitTick+0x6c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_InitTick+0x68>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f940 	bl	8001536 <HAL_SYSTICK_Config>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10f      	bne.n	80012dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	d809      	bhi.n	80012d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c2:	2200      	movs	r2, #0
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ca:	f000 f90a 	bl	80014e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_InitTick+0x70>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e007      	b.n	80012e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e004      	b.n	80012e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002d0 	.word	0x200002d0
 80012f4:	200002c8 	.word	0x200002c8
 80012f8:	200002cc 	.word	0x200002cc

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x1c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x20>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4413      	add	r3, r2
 800130a:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_IncTick+0x1c>)
 800130c:	6013      	str	r3, [r2, #0]
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000638 	.word	0x20000638
 800131c:	200002d0 	.word	0x200002d0

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <HAL_GetTick+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000638 	.word	0x20000638

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4906      	ldr	r1, [pc, #24]	; (80013cc <__NVIC_EnableIRQ+0x34>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff90 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff2d 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff42 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff90 	bl	8001424 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5f 	bl	80013d0 <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff35 	bl	8001398 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa2 	bl	8001488 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001566:	e160      	b.n	800182a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8152 	beq.w	8001824 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d005      	beq.n	8001598 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001594:	2b02      	cmp	r3, #2
 8001596:	d130      	bne.n	80015fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80015ce:	2201      	movs	r2, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 0201 	and.w	r2, r3, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b03      	cmp	r3, #3
 8001604:	d017      	beq.n	8001636 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d123      	bne.n	800168a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691a      	ldr	r2, [r3, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	6939      	ldr	r1, [r7, #16]
 8001686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0203 	and.w	r2, r3, #3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80ac 	beq.w	8001824 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <HAL_GPIO_Init+0x2f8>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a5d      	ldr	r2, [pc, #372]	; (8001848 <HAL_GPIO_Init+0x2f8>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	4b5b      	ldr	r3, [pc, #364]	; (8001848 <HAL_GPIO_Init+0x2f8>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80016e4:	4a59      	ldr	r2, [pc, #356]	; (800184c <HAL_GPIO_Init+0x2fc>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_GPIO_Init+0x300>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d025      	beq.n	800175c <HAL_GPIO_Init+0x20c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_GPIO_Init+0x304>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d01f      	beq.n	8001758 <HAL_GPIO_Init+0x208>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_GPIO_Init+0x308>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d019      	beq.n	8001754 <HAL_GPIO_Init+0x204>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_GPIO_Init+0x30c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d013      	beq.n	8001750 <HAL_GPIO_Init+0x200>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4d      	ldr	r2, [pc, #308]	; (8001860 <HAL_GPIO_Init+0x310>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d00d      	beq.n	800174c <HAL_GPIO_Init+0x1fc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <HAL_GPIO_Init+0x314>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d007      	beq.n	8001748 <HAL_GPIO_Init+0x1f8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <HAL_GPIO_Init+0x318>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_GPIO_Init+0x1f4>
 8001740:	2306      	movs	r3, #6
 8001742:	e00c      	b.n	800175e <HAL_GPIO_Init+0x20e>
 8001744:	2307      	movs	r3, #7
 8001746:	e00a      	b.n	800175e <HAL_GPIO_Init+0x20e>
 8001748:	2305      	movs	r3, #5
 800174a:	e008      	b.n	800175e <HAL_GPIO_Init+0x20e>
 800174c:	2304      	movs	r3, #4
 800174e:	e006      	b.n	800175e <HAL_GPIO_Init+0x20e>
 8001750:	2303      	movs	r3, #3
 8001752:	e004      	b.n	800175e <HAL_GPIO_Init+0x20e>
 8001754:	2302      	movs	r3, #2
 8001756:	e002      	b.n	800175e <HAL_GPIO_Init+0x20e>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_GPIO_Init+0x20e>
 800175c:	2300      	movs	r3, #0
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	f002 0203 	and.w	r2, r2, #3
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	4093      	lsls	r3, r2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800176e:	4937      	ldr	r1, [pc, #220]	; (800184c <HAL_GPIO_Init+0x2fc>)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_GPIO_Init+0x31c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_GPIO_Init+0x31c>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_GPIO_Init+0x31c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017ca:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_GPIO_Init+0x31c>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_GPIO_Init+0x31c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_GPIO_Init+0x31c>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_GPIO_Init+0x31c>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <HAL_GPIO_Init+0x31c>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	f47f ae97 	bne.w	8001568 <HAL_GPIO_Init+0x18>
  }
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40010000 	.word	0x40010000
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40021400 	.word	0x40021400
 8001868:	40021800 	.word	0x40021800
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	6153      	str	r3, [r2, #20]
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f88e 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	b08b      	sub	sp, #44	; 0x2c
 80018d4:	af06      	add	r7, sp, #24
 80018d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0d0      	b.n	8001a84 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f008 fdce 	bl	800a498 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2203      	movs	r2, #3
 8001900:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 f9a9 	bl	8004c60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e04c      	b.n	80019ae <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3301      	adds	r3, #1
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	b298      	uxth	r0, r3
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3336      	adds	r3, #54	; 0x36
 8001952:	4602      	mov	r2, r0
 8001954:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	440b      	add	r3, r1
 8001966:	3303      	adds	r3, #3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	3338      	adds	r3, #56	; 0x38
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	333c      	adds	r3, #60	; 0x3c
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	3340      	adds	r3, #64	; 0x40
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	3301      	adds	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3ad      	bcc.n	8001914 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e044      	b.n	8001a48 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3b5      	bcc.n	80019be <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	687e      	ldr	r6, [r7, #4]
 8001a5a:	466d      	mov	r5, sp
 8001a5c:	f106 0410 	add.w	r4, r6, #16
 8001a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	1d33      	adds	r3, r6, #4
 8001a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6c:	6838      	ldr	r0, [r7, #0]
 8001a6e:	f003 f911 	bl	8004c94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_PCD_Start+0x16>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e016      	b.n	8001ad0 <HAL_PCD_Start+0x44>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 f8c0 	bl	8004c34 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f008 fcd0 	bl	800a45c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 fda5 	bl	8007610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 fd9d 	bl	8007624 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af4:	d102      	bne.n	8001afc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 faf5 	bl	80020e6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f005 fd8f 	bl	8007624 <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b10:	d112      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b24:	b292      	uxth	r2, r2
 8001b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f008 fd2f 	bl	800a58e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8c7 	bl	8001cc6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 fd71 	bl	8007624 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b60:	b292      	uxth	r2, r2
 8001b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f005 fd5a 	bl	8007624 <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7a:	d10b      	bne.n	8001b94 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 fd43 	bl	8007624 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba8:	d126      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0204 	bic.w	r2, r2, #4
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0208 	bic.w	r2, r2, #8
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f008 fd10 	bl	800a600 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 fd11 	bl	8007624 <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c0c:	d126      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0208 	orr.w	r2, r2, #8
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0204 	orr.w	r2, r2, #4
 8001c50:	b292      	uxth	r2, r2
 8001c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f008 fcb8 	bl	800a5cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f005 fcdf 	bl	8007624 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c70:	d10e      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f008 fc71 	bl	800a572 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f005 fcc5 	bl	8007624 <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca4:	d10b      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_PCD_SetAddress+0x1a>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e013      	b.n	8001d08 <HAL_PCD_SetAddress+0x42>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f005 fc76 	bl	80075ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	70fb      	strb	r3, [r7, #3]
 8001d22:	460b      	mov	r3, r1
 8001d24:	803b      	strh	r3, [r7, #0]
 8001d26:	4613      	mov	r3, r2
 8001d28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da0e      	bge.n	8001d54 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
 8001d52:	e00e      	b.n	8001d72 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 0207 	and.w	r2, r3, #7
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d7e:	883a      	ldrh	r2, [r7, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	78ba      	ldrb	r2, [r7, #2]
 8001d88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d9c:	78bb      	ldrb	r3, [r7, #2]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d102      	bne.n	8001da8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_PCD_EP_Open+0xa6>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e00e      	b.n	8001dd4 <HAL_PCD_EP_Open+0xc4>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 ff85 	bl	8004cd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da0e      	bge.n	8001e0e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	705a      	strb	r2, [r3, #1]
 8001e0c:	e00e      	b.n	8001e2c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0207 	and.w	r2, r3, #7
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_PCD_EP_Close+0x6a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e00e      	b.n	8001e64 <HAL_PCD_EP_Close+0x88>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68f9      	ldr	r1, [r7, #12]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 faa7 	bl	80053a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6979      	ldr	r1, [r7, #20]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fc59 	bl	8005780 <USB_EPStartXfer>
 8001ece:	e005      	b.n	8001edc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6979      	ldr	r1, [r7, #20]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fc52 	bl	8005780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0207 	and.w	r2, r3, #7
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f08:	681b      	ldr	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	460b      	mov	r3, r1
 8001f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fbff 	bl	8005780 <USB_EPStartXfer>
 8001f82:	e005      	b.n	8001f90 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6979      	ldr	r1, [r7, #20]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fbf8 	bl	8005780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 0207 	and.w	r2, r3, #7
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d901      	bls.n	8001fb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e03e      	b.n	8002036 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da0e      	bge.n	8001fde <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	705a      	strb	r2, [r3, #1]
 8001fdc:	e00c      	b.n	8001ff8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_PCD_EP_SetStall+0x7e>
 8002014:	2302      	movs	r3, #2
 8002016:	e00e      	b.n	8002036 <HAL_PCD_EP_SetStall+0x9c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	4618      	mov	r0, r3
 8002028:	f005 f9e2 	bl	80073f0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d901      	bls.n	800205c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e040      	b.n	80020de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da0e      	bge.n	8002082 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	e00e      	b.n	80020a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 0207 	and.w	r2, r3, #7
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_PCD_EP_ClrStall+0x82>
 80020bc:	2302      	movs	r3, #2
 80020be:	e00e      	b.n	80020de <HAL_PCD_EP_ClrStall+0xa0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 f9de 	bl	8007490 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b08e      	sub	sp, #56	; 0x38
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020ee:	e2ec      	b.n	80026ca <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002106:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8161 	bne.w	80023d2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d152      	bne.n	80021c0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213a:	b29b      	uxth	r3, r3
 800213c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3328      	adds	r3, #40	; 0x28
 8002142:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	3302      	adds	r3, #2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	441a      	add	r2, r3
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f008 f9dc 	bl	800a53e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 829b 	beq.w	80026ca <PCD_EP_ISR_Handler+0x5e4>
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 8296 	bne.w	80026ca <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	b292      	uxth	r2, r2
 80021b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021be:	e284      	b.n	80026ca <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d034      	beq.n	8002244 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	3306      	adds	r3, #6
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002218:	b29b      	uxth	r3, r3
 800221a:	f005 fa57 	bl	80076cc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29a      	uxth	r2, r3
 8002226:	f640 738f 	movw	r3, #3983	; 0xf8f
 800222a:	4013      	ands	r3, r2
 800222c:	823b      	strh	r3, [r7, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	8a3a      	ldrh	r2, [r7, #16]
 8002234:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002238:	b292      	uxth	r2, r2
 800223a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f008 f951 	bl	800a4e4 <HAL_PCD_SetupStageCallback>
 8002242:	e242      	b.n	80026ca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002244:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002248:	2b00      	cmp	r3, #0
 800224a:	f280 823e 	bge.w	80026ca <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	f640 738f 	movw	r3, #3983	; 0xf8f
 800225a:	4013      	ands	r3, r2
 800225c:	83bb      	strh	r3, [r7, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	8bba      	ldrh	r2, [r7, #28]
 8002264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002268:	b292      	uxth	r2, r2
 800226a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	3306      	adds	r3, #6
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <PCD_EP_ISR_Handler+0x1ee>
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	6959      	ldr	r1, [r3, #20]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f005 fa07 	bl	80076cc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	441a      	add	r2, r3
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022cc:	2100      	movs	r1, #0
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f008 f91a 	bl	800a508 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 81f2 	bne.w	80026ca <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	4413      	add	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d112      	bne.n	8002334 <PCD_EP_ISR_Handler+0x24e>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002318:	b29a      	uxth	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800232c:	b29a      	uxth	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	e02f      	b.n	8002394 <PCD_EP_ISR_Handler+0x2ae>
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b3e      	cmp	r3, #62	; 0x3e
 800233a:	d813      	bhi.n	8002364 <PCD_EP_ISR_Handler+0x27e>
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <PCD_EP_ISR_Handler+0x270>
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	3301      	adds	r3, #1
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	b29b      	uxth	r3, r3
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	b29a      	uxth	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	e017      	b.n	8002394 <PCD_EP_ISR_Handler+0x2ae>
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <PCD_EP_ISR_Handler+0x298>
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	3b01      	subs	r3, #1
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	b29b      	uxth	r3, r3
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	b29b      	uxth	r3, r3
 8002386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800238a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238e:	b29a      	uxth	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a4:	827b      	strh	r3, [r7, #18]
 80023a6:	8a7b      	ldrh	r3, [r7, #18]
 80023a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023ac:	827b      	strh	r3, [r7, #18]
 80023ae:	8a7b      	ldrh	r3, [r7, #18]
 80023b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023b4:	827b      	strh	r3, [r7, #18]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	8a7b      	ldrh	r3, [r7, #18]
 80023bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8013      	strh	r3, [r2, #0]
 80023d0:	e17b      	b.n	80026ca <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f280 80ea 	bge.w	80025c2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002404:	4013      	ands	r3, r2
 8002406:	853b      	strh	r3, [r7, #40]	; 0x28
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241c:	b292      	uxth	r2, r2
 800241e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002420:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	7b1b      	ldrb	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d122      	bne.n	8002484 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	3306      	adds	r3, #6
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002466:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8087 	beq.w	800257e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	6959      	ldr	r1, [r3, #20]
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	88da      	ldrh	r2, [r3, #6]
 800247c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800247e:	f005 f925 	bl	80076cc <USB_ReadPMA>
 8002482:	e07c      	b.n	800257e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d108      	bne.n	800249e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800248c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800248e:	461a      	mov	r2, r3
 8002490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f927 	bl	80026e6 <HAL_PCD_EP_DB_Receive>
 8002498:	4603      	mov	r3, r0
 800249a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800249c:	e06f      	b.n	800257e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	441a      	add	r2, r3
 80024c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d021      	beq.n	800253c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002520:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002524:	2b00      	cmp	r3, #0
 8002526:	d02a      	beq.n	800257e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	6959      	ldr	r1, [r3, #20]
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	891a      	ldrh	r2, [r3, #8]
 8002534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002536:	f005 f8c9 	bl	80076cc <USB_ReadPMA>
 800253a:	e020      	b.n	800257e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3306      	adds	r3, #6
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002566:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	895a      	ldrh	r2, [r3, #10]
 8002578:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800257a:	f005 f8a7 	bl	80076cc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002584:	441a      	add	r2, r3
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002590:	441a      	add	r2, r3
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <PCD_EP_ISR_Handler+0x4c2>
 800259e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d206      	bcs.n	80025b6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f007 ffaa 	bl	800a508 <HAL_PCD_DataOutStageCallback>
 80025b4:	e005      	b.n	80025c2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 f8df 	bl	8005780 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d07e      	beq.n	80026ca <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	843b      	strh	r3, [r7, #32]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	8c3b      	ldrh	r3, [r7, #32]
 800260c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002614:	b29b      	uxth	r3, r3
 8002616:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	78db      	ldrb	r3, [r3, #3]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d00c      	beq.n	800263a <PCD_EP_ISR_Handler+0x554>
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800262c:	2b02      	cmp	r3, #2
 800262e:	d146      	bne.n	80026be <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002630:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d141      	bne.n	80026be <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	3302      	adds	r3, #2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002662:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	8bfb      	ldrh	r3, [r7, #30]
 800266a:	429a      	cmp	r2, r3
 800266c:	d906      	bls.n	800267c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	8bfb      	ldrh	r3, [r7, #30]
 8002674:	1ad2      	subs	r2, r2, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	e002      	b.n	8002682 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f007 ff54 	bl	800a53e <HAL_PCD_DataInStageCallback>
 8002696:	e018      	b.n	80026ca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	8bfb      	ldrh	r3, [r7, #30]
 800269e:	441a      	add	r2, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	8bfb      	ldrh	r3, [r7, #30]
 80026aa:	441a      	add	r2, r3
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 f862 	bl	8005780 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026bc:	e005      	b.n	80026ca <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026c0:	461a      	mov	r2, r3
 80026c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f91b 	bl	8002900 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f6ff ad0a 	blt.w	80020f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3738      	adds	r7, #56	; 0x38
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b088      	sub	sp, #32
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	4613      	mov	r3, r2
 80026f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d07e      	beq.n	80027fc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	3302      	adds	r3, #2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002726:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	8b7b      	ldrh	r3, [r7, #26]
 800272e:	429a      	cmp	r2, r3
 8002730:	d306      	bcc.n	8002740 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	8b7b      	ldrh	r3, [r7, #26]
 8002738:	1ad2      	subs	r2, r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	e002      	b.n	8002746 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d123      	bne.n	8002796 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002768:	833b      	strh	r3, [r7, #24]
 800276a:	8b3b      	ldrh	r3, [r7, #24]
 800276c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002770:	833b      	strh	r3, [r7, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	441a      	add	r2, r3
 8002780:	8b3b      	ldrh	r3, [r7, #24]
 8002782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800278a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002792:	b29b      	uxth	r3, r3
 8002794:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01f      	beq.n	80027e0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	82fb      	strh	r3, [r7, #22]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	8afb      	ldrh	r3, [r7, #22]
 80027cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027dc:	b29b      	uxth	r3, r3
 80027de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027e0:	8b7b      	ldrh	r3, [r7, #26]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8087 	beq.w	80028f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	6959      	ldr	r1, [r3, #20]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	891a      	ldrh	r2, [r3, #8]
 80027f4:	8b7b      	ldrh	r3, [r7, #26]
 80027f6:	f004 ff69 	bl	80076cc <USB_ReadPMA>
 80027fa:	e07c      	b.n	80028f6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	3306      	adds	r3, #6
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002824:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	8b7b      	ldrh	r3, [r7, #26]
 800282c:	429a      	cmp	r2, r3
 800282e:	d306      	bcc.n	800283e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	8b7b      	ldrh	r3, [r7, #26]
 8002836:	1ad2      	subs	r2, r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	619a      	str	r2, [r3, #24]
 800283c:	e002      	b.n	8002844 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d123      	bne.n	8002894 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	83fb      	strh	r3, [r7, #30]
 8002868:	8bfb      	ldrh	r3, [r7, #30]
 800286a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800286e:	83fb      	strh	r3, [r7, #30]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	8bfb      	ldrh	r3, [r7, #30]
 8002880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	b29b      	uxth	r3, r3
 8002892:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11f      	bne.n	80028de <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	83bb      	strh	r3, [r7, #28]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	441a      	add	r2, r3
 80028c8:	8bbb      	ldrh	r3, [r7, #28]
 80028ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028de:	8b7b      	ldrh	r3, [r7, #26]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6959      	ldr	r1, [r3, #20]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	895a      	ldrh	r2, [r3, #10]
 80028f0:	8b7b      	ldrh	r3, [r7, #26]
 80028f2:	f004 feeb 	bl	80076cc <USB_ReadPMA>
    }
  }

  return count;
 80028f6:	8b7b      	ldrh	r3, [r7, #26]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b0a2      	sub	sp, #136	; 0x88
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 81c7 	beq.w	8002ca8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	3302      	adds	r3, #2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002942:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800294e:	429a      	cmp	r2, r3
 8002950:	d907      	bls.n	8002962 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	1ad2      	subs	r2, r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	619a      	str	r2, [r3, #24]
 8002960:	e002      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 80b9 	bne.w	8002ae4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d126      	bne.n	80029c8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	4413      	add	r3, r2
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	011a      	lsls	r2, r3, #4
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	4413      	add	r3, r2
 800299c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	e01a      	b.n	80029fe <HAL_PCD_EP_DB_Transmit+0xfe>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	785b      	ldrb	r3, [r3, #1]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d116      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0xfe>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	4413      	add	r3, r2
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	011a      	lsls	r2, r3, #4
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	4413      	add	r3, r2
 80029f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	2200      	movs	r2, #0
 80029fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d126      	bne.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	011a      	lsls	r2, r3, #4
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	801a      	strh	r2, [r3, #0]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	e017      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d113      	bne.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	4413      	add	r3, r2
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	011a      	lsls	r2, r3, #4
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f007 fd54 	bl	800a53e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 82d4 	beq.w	800304a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abc:	827b      	strh	r3, [r7, #18]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	8a7b      	ldrh	r3, [r7, #18]
 8002ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8013      	strh	r3, [r2, #0]
 8002ae2:	e2b2      	b.n	800304a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d021      	beq.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 8286 	bne.w	800304a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b46:	441a      	add	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b54:	441a      	add	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d309      	bcc.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a1a      	ldr	r2, [r3, #32]
 8002b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	621a      	str	r2, [r3, #32]
 8002b78:	e015      	b.n	8002ba6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b90:	e009      	b.n	8002ba6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d155      	bne.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x35a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	4413      	add	r3, r2
 8002bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	011a      	lsls	r2, r3, #4
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	4413      	add	r3, r2
 8002bd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d112      	bne.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x302>
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bea:	801a      	strh	r2, [r3, #0]
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	801a      	strh	r2, [r3, #0]
 8002c00:	e047      	b.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	2b3e      	cmp	r3, #62	; 0x3e
 8002c06:	d811      	bhi.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	029b      	lsls	r3, r3, #10
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	e032      	b.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	e01b      	b.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d117      	bne.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c76:	4413      	add	r3, r2
 8002c78:	643b      	str	r3, [r7, #64]	; 0x40
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	011a      	lsls	r2, r3, #4
 8002c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c82:	4413      	add	r3, r2
 8002c84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c90:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6959      	ldr	r1, [r3, #20]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	891a      	ldrh	r2, [r3, #8]
 8002c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f004 fcce 	bl	8007642 <USB_WritePMA>
 8002ca6:	e1d0      	b.n	800304a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3306      	adds	r3, #6
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d307      	bcc.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce8:	1ad2      	subs	r2, r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	e002      	b.n	8002cf6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80c4 	bne.w	8002e88 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d126      	bne.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x456>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1c:	4413      	add	r3, r2
 8002d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	011a      	lsls	r2, r3, #4
 8002d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d28:	4413      	add	r3, r2
 8002d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	e01a      	b.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d116      	bne.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	677b      	str	r3, [r7, #116]	; 0x74
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d72:	4413      	add	r3, r2
 8002d74:	677b      	str	r3, [r7, #116]	; 0x74
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	011a      	lsls	r2, r3, #4
 8002d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7e:	4413      	add	r3, r2
 8002d80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d84:	673b      	str	r3, [r7, #112]	; 0x70
 8002d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d88:	2200      	movs	r2, #0
 8002d8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d12f      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db2:	4413      	add	r3, r2
 8002db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	011a      	lsls	r2, r3, #4
 8002dbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	e017      	b.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d113      	bne.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e10:	4413      	add	r3, r2
 8002e12:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	011a      	lsls	r2, r3, #4
 8002e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e26:	2200      	movs	r2, #0
 8002e28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f007 fb84 	bl	800a53e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 8104 	bne.w	800304a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8013      	strh	r3, [r2, #0]
 8002e86:	e0e0      	b.n	800304a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d121      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	f040 80b4 	bne.w	800304a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eea:	441a      	add	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ef8:	441a      	add	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d309      	bcc.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f16:	1ad2      	subs	r2, r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	621a      	str	r2, [r3, #32]
 8002f1c:	e015      	b.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f34:	e009      	b.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d155      	bne.n	8003004 <HAL_PCD_EP_DB_Transmit+0x704>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	4413      	add	r3, r2
 8002f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	011a      	lsls	r2, r3, #4
 8002f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f78:	4413      	add	r3, r2
 8002f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d112      	bne.n	8002fac <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f94:	801a      	strh	r2, [r3, #0]
 8002f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	e044      	b.n	8003036 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fae:	2b3e      	cmp	r3, #62	; 0x3e
 8002fb0:	d811      	bhi.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	029b      	lsls	r3, r3, #10
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	e02f      	b.n	8003036 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	657b      	str	r3, [r7, #84]	; 0x54
 8002fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
 8002fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	e018      	b.n	8003036 <HAL_PCD_EP_DB_Transmit+0x736>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d114      	bne.n	8003036 <HAL_PCD_EP_DB_Transmit+0x736>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003014:	b29b      	uxth	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800301a:	4413      	add	r3, r2
 800301c:	667b      	str	r3, [r7, #100]	; 0x64
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	011a      	lsls	r2, r3, #4
 8003024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003026:	4413      	add	r3, r2
 8003028:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800302c:	663b      	str	r3, [r7, #96]	; 0x60
 800302e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003030:	b29a      	uxth	r2, r3
 8003032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003034:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6959      	ldr	r1, [r3, #20]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	895a      	ldrh	r2, [r3, #10]
 8003042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003044:	b29b      	uxth	r3, r3
 8003046:	f004 fafc 	bl	8007642 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003064:	823b      	strh	r3, [r7, #16]
 8003066:	8a3b      	ldrh	r3, [r7, #16]
 8003068:	f083 0310 	eor.w	r3, r3, #16
 800306c:	823b      	strh	r3, [r7, #16]
 800306e:	8a3b      	ldrh	r3, [r7, #16]
 8003070:	f083 0320 	eor.w	r3, r3, #32
 8003074:	823b      	strh	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	8a3b      	ldrh	r3, [r7, #16]
 8003086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800308a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3788      	adds	r7, #136	; 0x88
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	4613      	mov	r3, r2
 80030b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e009      	b.n	80030ee <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030da:	897a      	ldrh	r2, [r7, #10]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030ee:	893b      	ldrh	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2200      	movs	r2, #0
 80030f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	80da      	strh	r2, [r3, #6]
 8003102:	e00b      	b.n	800311c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2201      	movs	r2, #1
 8003108:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	b29a      	uxth	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	b29a      	uxth	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e31d      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	4b94      	ldr	r3, [pc, #592]	; (800338c <HAL_RCC_OscConfig+0x264>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003144:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d07b      	beq.n	8003252 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d006      	beq.n	800316e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d10f      	bne.n	8003186 <HAL_RCC_OscConfig+0x5e>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d10b      	bne.n	8003186 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316e:	4b87      	ldr	r3, [pc, #540]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d06a      	beq.n	8003250 <HAL_RCC_OscConfig+0x128>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d166      	bne.n	8003250 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e2f7      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x74>
 800318e:	4b7f      	ldr	r3, [pc, #508]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7e      	ldr	r2, [pc, #504]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e02d      	b.n	80031f8 <HAL_RCC_OscConfig+0xd0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10c      	bne.n	80031be <HAL_RCC_OscConfig+0x96>
 80031a4:	4b79      	ldr	r3, [pc, #484]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a78      	ldr	r2, [pc, #480]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a75      	ldr	r2, [pc, #468]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e01c      	b.n	80031f8 <HAL_RCC_OscConfig+0xd0>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0xb8>
 80031c6:	4b71      	ldr	r3, [pc, #452]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a70      	ldr	r2, [pc, #448]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b6e      	ldr	r3, [pc, #440]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6d      	ldr	r2, [pc, #436]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xd0>
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a69      	ldr	r2, [pc, #420]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b67      	ldr	r3, [pc, #412]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a66      	ldr	r2, [pc, #408]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe f88e 	bl	8001320 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe f88a 	bl	8001320 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e2ad      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800321a:	4b5c      	ldr	r3, [pc, #368]	; (800338c <HAL_RCC_OscConfig+0x264>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xe0>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe f87a 	bl	8001320 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe f876 	bl	8001320 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e299      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003242:	4b52      	ldr	r3, [pc, #328]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x108>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d05a      	beq.n	8003314 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d005      	beq.n	8003270 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d119      	bne.n	800329e <HAL_RCC_OscConfig+0x176>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_OscConfig+0x160>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d001      	beq.n	8003288 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e276      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_RCC_OscConfig+0x264>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	493d      	ldr	r1, [pc, #244]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329c:	e03a      	b.n	8003314 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d020      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_RCC_OscConfig+0x268>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe f838 	bl	8001320 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b4:	f7fe f834 	bl	8001320 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e257      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b2e      	ldr	r3, [pc, #184]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	492a      	ldr	r1, [pc, #168]	; (800338c <HAL_RCC_OscConfig+0x264>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
 80032e6:	e015      	b.n	8003314 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_OscConfig+0x268>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe f817 	bl	8001320 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe f813 	bl	8001320 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e236      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCC_OscConfig+0x264>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80b8 	beq.w	8003492 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d170      	bne.n	800340a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_RCC_OscConfig+0x264>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_OscConfig+0x218>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e21a      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800334c:	429a      	cmp	r2, r3
 800334e:	d921      	bls.n	8003394 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fc7d 	bl	8003c54 <RCC_SetFlashLatencyFromMSIRange>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e208      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4906      	ldr	r1, [pc, #24]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4901      	ldr	r1, [pc, #4]	; (800338c <HAL_RCC_OscConfig+0x264>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
 800338a:	e020      	b.n	80033ce <HAL_RCC_OscConfig+0x2a6>
 800338c:	40023800 	.word	0x40023800
 8003390:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003394:	4b99      	ldr	r3, [pc, #612]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4996      	ldr	r1, [pc, #600]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a6:	4b95      	ldr	r3, [pc, #596]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	4991      	ldr	r1, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fc48 	bl	8003c54 <RCC_SetFlashLatencyFromMSIRange>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e1d3      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	0b5b      	lsrs	r3, r3, #13
 80033d4:	3301      	adds	r3, #1
 80033d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033de:	4a87      	ldr	r2, [pc, #540]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	0912      	lsrs	r2, r2, #4
 80033e4:	f002 020f 	and.w	r2, r2, #15
 80033e8:	4985      	ldr	r1, [pc, #532]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80033ea:	5c8a      	ldrb	r2, [r1, r2]
 80033ec:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033ee:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_RCC_OscConfig+0x4dc>)
 80033f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033f2:	4b85      	ldr	r3, [pc, #532]	; (8003608 <HAL_RCC_OscConfig+0x4e0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd ff46 	bl	8001288 <HAL_InitTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d045      	beq.n	8003492 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	e1b5      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d029      	beq.n	8003466 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003412:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x4e4>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fd ff82 	bl	8001320 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003420:	f7fd ff7e 	bl	8001320 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1a1      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003432:	4b72      	ldr	r3, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800343e:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	496c      	ldr	r1, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003450:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	4967      	ldr	r1, [pc, #412]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003466:	4b69      	ldr	r3, [pc, #420]	; (800360c <HAL_RCC_OscConfig+0x4e4>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fd ff58 	bl	8001320 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003474:	f7fd ff54 	bl	8001320 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e177      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003486:	4b5d      	ldr	r3, [pc, #372]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d030      	beq.n	8003500 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b5a      	ldr	r3, [pc, #360]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fd ff38 	bl	8001320 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fd ff34 	bl	8001320 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e157      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034c6:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x38c>
 80034d2:	e015      	b.n	8003500 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	4b4e      	ldr	r3, [pc, #312]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034da:	f7fd ff21 	bl	8001320 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e2:	f7fd ff1d 	bl	8001320 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e140      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80b5 	beq.w	8003678 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b37      	ldr	r3, [pc, #220]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	4a36      	ldr	r2, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003528:	6253      	str	r3, [r2, #36]	; 0x24
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a32      	ldr	r2, [pc, #200]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fd fee5 	bl	8001320 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fd fee1 	bl	8001320 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	; 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e104      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x466>
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358a:	6353      	str	r3, [r2, #52]	; 0x34
 800358c:	e02d      	b.n	80035ea <HAL_RCC_OscConfig+0x4c2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x488>
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 800359c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a0:	6353      	str	r3, [r2, #52]	; 0x34
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ac:	6353      	str	r3, [r2, #52]	; 0x34
 80035ae:	e01c      	b.n	80035ea <HAL_RCC_OscConfig+0x4c2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x4aa>
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c2:	6353      	str	r3, [r2, #52]	; 0x34
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6353      	str	r3, [r2, #52]	; 0x34
 80035d0:	e00b      	b.n	80035ea <HAL_RCC_OscConfig+0x4c2>
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035dc:	6353      	str	r3, [r2, #52]	; 0x34
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	4a06      	ldr	r2, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80035e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d024      	beq.n	800363c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fd fe95 	bl	8001320 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035f8:	e019      	b.n	800362e <HAL_RCC_OscConfig+0x506>
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	0800c614 	.word	0x0800c614
 8003604:	200002c8 	.word	0x200002c8
 8003608:	200002cc 	.word	0x200002cc
 800360c:	42470020 	.word	0x42470020
 8003610:	42470680 	.word	0x42470680
 8003614:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fd fe82 	bl	8001320 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0a3      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800362e:	4b54      	ldr	r3, [pc, #336]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCC_OscConfig+0x4f0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7fd fe70 	bl	8001320 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fd fe6c 	bl	8001320 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e08d      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800365a:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ee      	bne.n	8003644 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003666:	7ffb      	ldrb	r3, [r7, #31]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b44      	ldr	r3, [pc, #272]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	4a43      	ldr	r2, [pc, #268]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003676:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d079      	beq.n	8003774 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d056      	beq.n	8003734 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b02      	cmp	r3, #2
 800368c:	d13b      	bne.n	8003706 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_RCC_OscConfig+0x65c>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fd fe44 	bl	8001320 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fe40 	bl	8001320 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e063      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4319      	orrs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	430b      	orrs	r3, r1
 80036d2:	492b      	ldr	r1, [pc, #172]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <HAL_RCC_OscConfig+0x65c>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fd fe1f 	bl	8001320 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fd fe1b 	bl	8001320 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e03e      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036f8:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x5be>
 8003704:	e036      	b.n	8003774 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_RCC_OscConfig+0x65c>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd fe08 	bl	8001320 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fd fe04 	bl	8001320 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e027      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x5ec>
 8003732:	e01f      	b.n	8003774 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e01a      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_RCC_OscConfig+0x658>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	429a      	cmp	r2, r3
 8003752:	d10d      	bne.n	8003770 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	42470060 	.word	0x42470060

08003788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e11a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b8f      	ldr	r3, [pc, #572]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d919      	bls.n	80037de <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_ClockConfig+0x34>
 80037b0:	4b8a      	ldr	r3, [pc, #552]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a89      	ldr	r2, [pc, #548]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b87      	ldr	r3, [pc, #540]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 0201 	bic.w	r2, r3, #1
 80037c4:	4985      	ldr	r1, [pc, #532]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037cc:	4b83      	ldr	r3, [pc, #524]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d001      	beq.n	80037de <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0f9      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ea:	4b7d      	ldr	r3, [pc, #500]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	497a      	ldr	r1, [pc, #488]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 808e 	beq.w	8003926 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003812:	4b73      	ldr	r3, [pc, #460]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d121      	bne.n	8003862 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0d7      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800382a:	4b6d      	ldr	r3, [pc, #436]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d115      	bne.n	8003862 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0cb      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0bf      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0b7      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	495c      	ldr	r1, [pc, #368]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003874:	f7fd fd54 	bl	8001320 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d112      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd fd4c 	bl	8001320 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e09b      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800389a:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d1ee      	bne.n	8003884 <HAL_RCC_ClockConfig+0xfc>
 80038a6:	e03e      	b.n	8003926 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d112      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fd fd35 	bl	8001320 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e084      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c8:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	d1ee      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x12a>
 80038d4:	e027      	b.n	8003926 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11d      	bne.n	800391a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fd fd1e 	bl	8001320 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e06d      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038f6:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x158>
 8003902:	e010      	b.n	8003926 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fd fd0c 	bl	8001320 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e05b      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800391a:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1ee      	bne.n	8003904 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003926:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d219      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d105      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1be>
 800393a:	4b28      	ldr	r3, [pc, #160]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a27      	ldr	r2, [pc, #156]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b25      	ldr	r3, [pc, #148]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 0201 	bic.w	r2, r3, #1
 800394e:	4923      	ldr	r1, [pc, #140]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_RCC_ClockConfig+0x254>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e034      	b.n	80039d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4917      	ldr	r1, [pc, #92]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	490f      	ldr	r1, [pc, #60]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a6:	f000 f823 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039aa:	4602      	mov	r2, r0
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_RCC_ClockConfig+0x258>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	490b      	ldr	r1, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x25c>)
 80039b8:	5ccb      	ldrb	r3, [r1, r3]
 80039ba:	fa22 f303 	lsr.w	r3, r2, r3
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <HAL_RCC_ClockConfig+0x260>)
 80039c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_ClockConfig+0x264>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd fc5e 	bl	8001288 <HAL_InitTick>
 80039cc:	4603      	mov	r3, r0
 80039ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80039d0:	7afb      	ldrb	r3, [r7, #11]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00
 80039e0:	40023800 	.word	0x40023800
 80039e4:	0800c614 	.word	0x0800c614
 80039e8:	200002c8 	.word	0x200002c8
 80039ec:	200002cc 	.word	0x200002cc

080039f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f4:	b092      	sub	sp, #72	; 0x48
 80039f6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80039f8:	4b79      	ldr	r3, [pc, #484]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d00d      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x34>
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	f200 80d5 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d002      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x28>
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x2e>
 8003a16:	e0cf      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003a1c:	e0da      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a1e:	4b72      	ldr	r3, [pc, #456]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003a20:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003a22:	e0d7      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	0c9b      	lsrs	r3, r3, #18
 8003a28:	f003 020f 	and.w	r2, r3, #15
 8003a2c:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a2e:	5c9b      	ldrb	r3, [r3, r2]
 8003a30:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a34:	0d9b      	lsrs	r3, r3, #22
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a3e:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d05d      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4611      	mov	r1, r2
 8003a52:	4604      	mov	r4, r0
 8003a54:	460d      	mov	r5, r1
 8003a56:	4622      	mov	r2, r4
 8003a58:	462b      	mov	r3, r5
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	0159      	lsls	r1, r3, #5
 8003a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a68:	0150      	lsls	r0, r2, #5
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4621      	mov	r1, r4
 8003a70:	1a51      	subs	r1, r2, r1
 8003a72:	6139      	str	r1, [r7, #16]
 8003a74:	4629      	mov	r1, r5
 8003a76:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a88:	4659      	mov	r1, fp
 8003a8a:	018b      	lsls	r3, r1, #6
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a92:	4651      	mov	r1, sl
 8003a94:	018a      	lsls	r2, r1, #6
 8003a96:	46d4      	mov	ip, sl
 8003a98:	ebb2 080c 	subs.w	r8, r2, ip
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab6:	4690      	mov	r8, r2
 8003ab8:	4699      	mov	r9, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	eb18 0303 	adds.w	r3, r8, r3
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	eb49 0303 	adc.w	r3, r9, r3
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	024b      	lsls	r3, r1, #9
 8003ada:	4620      	mov	r0, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	4604      	mov	r4, r0
 8003ae0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	024a      	lsls	r2, r1, #9
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	2200      	movs	r2, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af8:	f7fc fb48 	bl	800018c <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	647b      	str	r3, [r7, #68]	; 0x44
 8003b04:	e055      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2200      	movs	r2, #0
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b0e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b12:	4642      	mov	r2, r8
 8003b14:	464b      	mov	r3, r9
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b24:	0150      	lsls	r0, r2, #5
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	46c4      	mov	ip, r8
 8003b2c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003b30:	4640      	mov	r0, r8
 8003b32:	4649      	mov	r1, r9
 8003b34:	468c      	mov	ip, r1
 8003b36:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b46:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b4a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b4e:	ebb2 040a 	subs.w	r4, r2, sl
 8003b52:	eb63 050b 	sbc.w	r5, r3, fp
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	00eb      	lsls	r3, r5, #3
 8003b60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b64:	00e2      	lsls	r2, r4, #3
 8003b66:	4614      	mov	r4, r2
 8003b68:	461d      	mov	r5, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	18e3      	adds	r3, r4, r3
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	460b      	mov	r3, r1
 8003b72:	eb45 0303 	adc.w	r3, r5, r3
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b84:	4629      	mov	r1, r5
 8003b86:	028b      	lsls	r3, r1, #10
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003b92:	4601      	mov	r1, r0
 8003b94:	028a      	lsls	r2, r1, #10
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	61fa      	str	r2, [r7, #28]
 8003ba2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba6:	f7fc faf1 	bl	800018c <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4613      	mov	r3, r2
 8003bb0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003bb6:	e00d      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0b5b      	lsrs	r3, r3, #13
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3748      	adds	r7, #72	; 0x48
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200
 8003bec:	0800c608 	.word	0x0800c608

08003bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf4:	4b02      	ldr	r3, [pc, #8]	; (8003c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	200002c8 	.word	0x200002c8

08003c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c08:	f7ff fff2 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800c624 	.word	0x0800c624

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c30:	f7ff ffde 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0adb      	lsrs	r3, r3, #11
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4903      	ldr	r1, [pc, #12]	; (8003c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	0800c624 	.word	0x0800c624

08003c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c60:	4b29      	ldr	r3, [pc, #164]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d12c      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c78:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e016      	b.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	6253      	str	r3, [r2, #36]	; 0x24
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003ca4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003cb8:	d105      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cc0:	d101      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003ccc:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 0201 	bic.w	r2, r3, #1
 8003ce0:	490b      	ldr	r1, [pc, #44]	; (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d001      	beq.n	8003cfa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	40023c00 	.word	0x40023c00

08003d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07b      	b.n	8003e1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d36:	d009      	beq.n	8003d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
 8003d3e:	e005      	b.n	8003d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd f896 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	ea42 0103 	orr.w	r1, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0104 	and.w	r1, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0210 	and.w	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b08c      	sub	sp, #48	; 0x30
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x26>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e18a      	b.n	8004162 <HAL_SPI_TransmitReceive+0x33c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e54:	f7fd fa64 	bl	8001320 <HAL_GetTick>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d00f      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x70>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7c:	d107      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x68>
 8003e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d003      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e94:	e15b      	b.n	800414e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x82>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x82>
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eae:	e14e      	b.n	800414e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d003      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	887a      	ldrh	r2, [r7, #2]
 8003eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	887a      	ldrh	r2, [r7, #2]
 8003ee6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d007      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	d178      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x10a>
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d166      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f54:	e053      	b.n	8003ffe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d11b      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x176>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x176>
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d113      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	1c9a      	adds	r2, r3, #2
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d119      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x1b8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d014      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	1c9a      	adds	r2, r3, #2
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fde:	f7fd f99f 	bl	8001320 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d807      	bhi.n	8003ffe <HAL_SPI_TransmitReceive+0x1d8>
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d003      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ffc:	e0a7      	b.n	800414e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1a6      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x130>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1a1      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x130>
 8004012:	e07c      	b.n	800410e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_SPI_TransmitReceive+0x1fc>
 800401c:	8b7b      	ldrh	r3, [r7, #26]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d16b      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	7812      	ldrb	r2, [r2, #0]
 800402e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004048:	e057      	b.n	80040fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d11c      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x26c>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x26c>
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d114      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	7812      	ldrb	r2, [r2, #0]
 8004074:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d119      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x2ae>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d014      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d0:	2301      	movs	r3, #1
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040d4:	f7fd f924 	bl	8001320 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d803      	bhi.n	80040ec <HAL_SPI_TransmitReceive+0x2c6>
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d102      	bne.n	80040f2 <HAL_SPI_TransmitReceive+0x2cc>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040f8:	e029      	b.n	800414e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1a2      	bne.n	800404a <HAL_SPI_TransmitReceive+0x224>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d19d      	bne.n	800404a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f8b2 	bl	800427c <SPI_EndRxTxTransaction>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d006      	beq.n	800412c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800412a:	e010      	b.n	800414e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	e000      	b.n	800414e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800414c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800415e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004162:	4618      	mov	r0, r3
 8004164:	3730      	adds	r7, #48	; 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800417c:	f7fd f8d0 	bl	8001320 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	4413      	add	r3, r2
 800418a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800418c:	f7fd f8c8 	bl	8001320 <HAL_GetTick>
 8004190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004192:	4b39      	ldr	r3, [pc, #228]	; (8004278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	015b      	lsls	r3, r3, #5
 8004198:	0d1b      	lsrs	r3, r3, #20
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a2:	e054      	b.n	800424e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d050      	beq.n	800424e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041ac:	f7fd f8b8 	bl	8001320 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d902      	bls.n	80041c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d13d      	bne.n	800423e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041da:	d111      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e4:	d004      	beq.n	80041f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ee:	d107      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004208:	d10f      	bne.n	800422a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e017      	b.n	800426e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3b01      	subs	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	429a      	cmp	r2, r3
 800426a:	d19b      	bne.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200002c8 	.word	0x200002c8

0800427c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <SPI_EndRxTxTransaction+0x7c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <SPI_EndRxTxTransaction+0x80>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	0d5b      	lsrs	r3, r3, #21
 8004294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004298:	fb02 f303 	mul.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a6:	d112      	bne.n	80042ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff ff5a 	bl	800416c <SPI_WaitFlagStateUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00f      	b.n	80042ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d0f2      	beq.n	80042ce <SPI_EndRxTxTransaction+0x52>
 80042e8:	e000      	b.n	80042ec <SPI_EndRxTxTransaction+0x70>
        break;
 80042ea:	bf00      	nop
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	200002c8 	.word	0x200002c8
 80042fc:	165e9f81 	.word	0x165e9f81

08004300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e031      	b.n	8004376 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fdfa 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f000 f9e2 	bl	8004708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d122      	bne.n	80043da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d11b      	bne.n	80043da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f06f 0202 	mvn.w	r2, #2
 80043aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f985 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 80043c6:	e005      	b.n	80043d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f978 	bl	80046be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f987 	bl	80046e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d122      	bne.n	800442e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d11b      	bne.n	800442e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f06f 0204 	mvn.w	r2, #4
 80043fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f95b 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 800441a:	e005      	b.n	8004428 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f94e 	bl	80046be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f95d 	bl	80046e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d122      	bne.n	8004482 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0208 	mvn.w	r2, #8
 8004452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2204      	movs	r2, #4
 8004458:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f931 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f924 	bl	80046be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f933 	bl	80046e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d122      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b10      	cmp	r3, #16
 800449c:	d11b      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0210 	mvn.w	r2, #16
 80044a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2208      	movs	r2, #8
 80044ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f907 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8fa 	bl	80046be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f909 	bl	80046e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10e      	bne.n	8004502 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0201 	mvn.w	r2, #1
 80044fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc fa65 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d10e      	bne.n	800452e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d107      	bne.n	800452e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8e3 	bl	80046f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIM_ConfigClockSource+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e0b3      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x180>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800456c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004574:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004586:	d03e      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xd0>
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	f200 8087 	bhi.w	800469e <HAL_TIM_ConfigClockSource+0x168>
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	f000 8085 	beq.w	80046a2 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d87f      	bhi.n	800469e <HAL_TIM_ConfigClockSource+0x168>
 800459e:	2b70      	cmp	r3, #112	; 0x70
 80045a0:	d01a      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0xa2>
 80045a2:	2b70      	cmp	r3, #112	; 0x70
 80045a4:	d87b      	bhi.n	800469e <HAL_TIM_ConfigClockSource+0x168>
 80045a6:	2b60      	cmp	r3, #96	; 0x60
 80045a8:	d050      	beq.n	800464c <HAL_TIM_ConfigClockSource+0x116>
 80045aa:	2b60      	cmp	r3, #96	; 0x60
 80045ac:	d877      	bhi.n	800469e <HAL_TIM_ConfigClockSource+0x168>
 80045ae:	2b50      	cmp	r3, #80	; 0x50
 80045b0:	d03c      	beq.n	800462c <HAL_TIM_ConfigClockSource+0xf6>
 80045b2:	2b50      	cmp	r3, #80	; 0x50
 80045b4:	d873      	bhi.n	800469e <HAL_TIM_ConfigClockSource+0x168>
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d058      	beq.n	800466c <HAL_TIM_ConfigClockSource+0x136>
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d86f      	bhi.n	800469e <HAL_TIM_ConfigClockSource+0x168>
 80045be:	2b30      	cmp	r3, #48	; 0x30
 80045c0:	d064      	beq.n	800468c <HAL_TIM_ConfigClockSource+0x156>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d86b      	bhi.n	800469e <HAL_TIM_ConfigClockSource+0x168>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d060      	beq.n	800468c <HAL_TIM_ConfigClockSource+0x156>
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d867      	bhi.n	800469e <HAL_TIM_ConfigClockSource+0x168>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d05c      	beq.n	800468c <HAL_TIM_ConfigClockSource+0x156>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d05a      	beq.n	800468c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80045d6:	e062      	b.n	800469e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f000 f975 	bl	80048d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e04e      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f000 f95e 	bl	80048d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004628:	609a      	str	r2, [r3, #8]
      break;
 800462a:	e03b      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	461a      	mov	r2, r3
 800463a:	f000 f8d5 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2150      	movs	r1, #80	; 0x50
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f92c 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 800464a:	e02b      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	461a      	mov	r2, r3
 800465a:	f000 f8f3 	bl	8004844 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2160      	movs	r1, #96	; 0x60
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f91c 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 800466a:	e01b      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	461a      	mov	r2, r3
 800467a:	f000 f8b5 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2140      	movs	r1, #64	; 0x40
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f90c 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 800468a:	e00b      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4619      	mov	r1, r3
 8004696:	4610      	mov	r0, r2
 8004698:	f000 f903 	bl	80048a2 <TIM_ITRx_SetConfig>
        break;
 800469c:	e002      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
	...

08004708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d00f      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a2b      	ldr	r2, [pc, #172]	; (80047d0 <TIM_Base_SetConfig+0xc8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <TIM_Base_SetConfig+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <TIM_Base_SetConfig+0xd0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a28      	ldr	r2, [pc, #160]	; (80047dc <TIM_Base_SetConfig+0xd4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d017      	beq.n	800478a <TIM_Base_SetConfig+0x82>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <TIM_Base_SetConfig+0xc8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_Base_SetConfig+0x82>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <TIM_Base_SetConfig+0xcc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0x82>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <TIM_Base_SetConfig+0xd0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0x82>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <TIM_Base_SetConfig+0xd4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0x82>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <TIM_Base_SetConfig+0xd8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0x82>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <TIM_Base_SetConfig+0xdc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	615a      	str	r2, [r3, #20]
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00
 80047dc:	40010800 	.word	0x40010800
 80047e0:	40010c00 	.word	0x40010c00
 80047e4:	40011000 	.word	0x40011000

080047e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 030a 	bic.w	r3, r3, #10
 8004824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f023 0210 	bic.w	r2, r3, #16
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800486e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	031b      	lsls	r3, r3, #12
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004880:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	621a      	str	r2, [r3, #32]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	f043 0307 	orr.w	r3, r3, #7
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b087      	sub	sp, #28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	021a      	lsls	r2, r3, #8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	609a      	str	r2, [r3, #8]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e046      	b.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d00e      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a10      	ldr	r2, [pc, #64]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10c      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4313      	orrs	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40010800 	.word	0x40010800

080049d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e03f      	b.n	8004a62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fab6 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2224      	movs	r2, #36	; 0x24
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f829 	bl	8004a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004aac:	f023 030c 	bic.w	r3, r3, #12
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a55      	ldr	r2, [pc, #340]	; (8004c2c <UART_SetConfig+0x1c0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d103      	bne.n	8004ae2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ada:	f7ff f8a7 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	e002      	b.n	8004ae8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ae2:	f7ff f88f 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004ae6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af0:	d14c      	bne.n	8004b8c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	441a      	add	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	4a49      	ldr	r2, [pc, #292]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	0119      	lsls	r1, r3, #4
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b28:	4b41      	ldr	r3, [pc, #260]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2064      	movs	r0, #100	; 0x64
 8004b32:	fb00 f303 	mul.w	r3, r0, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	3332      	adds	r3, #50	; 0x32
 8004b3c:	4a3c      	ldr	r2, [pc, #240]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b4a:	4419      	add	r1, r3
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009a      	lsls	r2, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b62:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004b64:	fba3 0302 	umull	r0, r3, r3, r2
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	2064      	movs	r0, #100	; 0x64
 8004b6c:	fb00 f303 	mul.w	r3, r0, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	3332      	adds	r3, #50	; 0x32
 8004b76:	4a2e      	ldr	r2, [pc, #184]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f003 0207 	and.w	r2, r3, #7
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	440a      	add	r2, r1
 8004b88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b8a:	e04a      	b.n	8004c22 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009a      	lsls	r2, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	0119      	lsls	r1, r3, #4
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009a      	lsls	r2, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2064      	movs	r0, #100	; 0x64
 8004bcc:	fb00 f303 	mul.w	r3, r0, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	3332      	adds	r3, #50	; 0x32
 8004bd6:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be2:	4419      	add	r1, r3
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009a      	lsls	r2, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004bfc:	fba3 0302 	umull	r0, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2064      	movs	r0, #100	; 0x64
 8004c04:	fb00 f303 	mul.w	r3, r0, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <UART_SetConfig+0x1c4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	440a      	add	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40013800 	.word	0x40013800
 8004c30:	51eb851f 	.word	0x51eb851f

08004c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	4013      	ands	r3, r2
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c94:	b084      	sub	sp, #16
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	f107 0014 	add.w	r0, r7, #20
 8004ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	b004      	add	sp, #16
 8004cd2:	4770      	bx	lr

08004cd4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b09b      	sub	sp, #108	; 0x6c
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	78db      	ldrb	r3, [r3, #3]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d81f      	bhi.n	8004d46 <USB_ActivateEndpoint+0x72>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <USB_ActivateEndpoint+0x38>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d4f 	.word	0x08004d4f
 8004d18:	08004d2b 	.word	0x08004d2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d28:	e012      	b.n	8004d50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d36:	e00b      	b.n	8004d50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d44:	e004      	b.n	8004d50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d4c:	e000      	b.n	8004d50 <USB_ActivateEndpoint+0x7c>
      break;
 8004d4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	7b1b      	ldrb	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 8149 	bne.w	8005054 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 8084 	beq.w	8004ed4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	88db      	ldrh	r3, [r3, #6]
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	81fb      	strh	r3, [r7, #14]
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01b      	beq.n	8004e50 <USB_ActivateEndpoint+0x17c>
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	81bb      	strh	r3, [r7, #12]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	89bb      	ldrh	r3, [r7, #12]
 8004e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	78db      	ldrb	r3, [r3, #3]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d020      	beq.n	8004e9a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6e:	813b      	strh	r3, [r7, #8]
 8004e70:	893b      	ldrh	r3, [r7, #8]
 8004e72:	f083 0320 	eor.w	r3, r3, #32
 8004e76:	813b      	strh	r3, [r7, #8]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	893b      	ldrh	r3, [r7, #8]
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]
 8004e98:	e27f      	b.n	800539a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb0:	817b      	strh	r3, [r7, #10]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	897b      	ldrh	r3, [r7, #10]
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]
 8004ed2:	e262      	b.n	800539a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	4413      	add	r3, r2
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	88db      	ldrh	r3, [r3, #6]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	4413      	add	r3, r2
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	011a      	lsls	r2, r3, #4
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	4413      	add	r3, r2
 8004f26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f2a:	623b      	str	r3, [r7, #32]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d112      	bne.n	8004f5a <USB_ActivateEndpoint+0x286>
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e02f      	b.n	8004fba <USB_ActivateEndpoint+0x2e6>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f60:	d813      	bhi.n	8004f8a <USB_ActivateEndpoint+0x2b6>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	663b      	str	r3, [r7, #96]	; 0x60
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <USB_ActivateEndpoint+0x2a8>
 8004f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f78:	3301      	adds	r3, #1
 8004f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	e017      	b.n	8004fba <USB_ActivateEndpoint+0x2e6>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	663b      	str	r3, [r7, #96]	; 0x60
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <USB_ActivateEndpoint+0x2d0>
 8004f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	029b      	lsls	r3, r3, #10
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	83fb      	strh	r3, [r7, #30]
 8004fc8:	8bfb      	ldrh	r3, [r7, #30]
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01b      	beq.n	800500a <USB_ActivateEndpoint+0x336>
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	83bb      	strh	r3, [r7, #28]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8bbb      	ldrh	r3, [r7, #28]
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	837b      	strh	r3, [r7, #26]
 8005022:	8b7b      	ldrh	r3, [r7, #26]
 8005024:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005028:	837b      	strh	r3, [r7, #26]
 800502a:	8b7b      	ldrh	r3, [r7, #26]
 800502c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005030:	837b      	strh	r3, [r7, #26]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	8b7b      	ldrh	r3, [r7, #26]
 800503e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504e:	b29b      	uxth	r3, r3
 8005050:	8013      	strh	r3, [r2, #0]
 8005052:	e1a2      	b.n	800539a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	441a      	add	r2, r3
 8005078:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005084:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	65bb      	str	r3, [r7, #88]	; 0x58
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509a:	b29b      	uxth	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a0:	4413      	add	r3, r2
 80050a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	011a      	lsls	r2, r3, #4
 80050aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b2:	657b      	str	r3, [r7, #84]	; 0x54
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	891b      	ldrh	r3, [r3, #8]
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	653b      	str	r3, [r7, #80]	; 0x50
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d4:	4413      	add	r3, r2
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	011a      	lsls	r2, r3, #4
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	895b      	ldrh	r3, [r3, #10]
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8091 	bne.w	8005224 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005110:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01b      	beq.n	8005152 <USB_ActivateEndpoint+0x47e>
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	441a      	add	r2, r3
 800513c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800513e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800514a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514e:	b29b      	uxth	r3, r3
 8005150:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005160:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01b      	beq.n	80051a2 <USB_ActivateEndpoint+0x4ce>
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005180:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005200:	867b      	strh	r3, [r7, #50]	; 0x32
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800520e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521e:	b29b      	uxth	r3, r3
 8005220:	8013      	strh	r3, [r2, #0]
 8005222:	e0ba      	b.n	800539a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005234:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01d      	beq.n	800527c <USB_ActivateEndpoint+0x5a8>
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800528c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01d      	beq.n	80052d4 <USB_ActivateEndpoint+0x600>
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	441a      	add	r2, r3
 80052bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	78db      	ldrb	r3, [r3, #3]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d024      	beq.n	8005326 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052fa:	f083 0320 	eor.w	r3, r3, #32
 80052fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	441a      	add	r2, r3
 800530c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	b29b      	uxth	r3, r3
 8005322:	8013      	strh	r3, [r2, #0]
 8005324:	e01d      	b.n	8005362 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	441a      	add	r2, r3
 800534a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800534e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535e:	b29b      	uxth	r3, r3
 8005360:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800539a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800539e:	4618      	mov	r0, r3
 80053a0:	376c      	adds	r7, #108	; 0x6c
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b08d      	sub	sp, #52	; 0x34
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	7b1b      	ldrb	r3, [r3, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 808e 	bne.w	80054d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d044      	beq.n	800544e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	81bb      	strh	r3, [r7, #12]
 80053d2:	89bb      	ldrh	r3, [r7, #12]
 80053d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01b      	beq.n	8005414 <USB_DeactivateEndpoint+0x6c>
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	817b      	strh	r3, [r7, #10]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	897b      	ldrh	r3, [r7, #10]
 8005400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005410:	b29b      	uxth	r3, r3
 8005412:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800542a:	813b      	strh	r3, [r7, #8]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005448:	b29b      	uxth	r3, r3
 800544a:	8013      	strh	r3, [r2, #0]
 800544c:	e192      	b.n	8005774 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	827b      	strh	r3, [r7, #18]
 800545c:	8a7b      	ldrh	r3, [r7, #18]
 800545e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01b      	beq.n	800549e <USB_DeactivateEndpoint+0xf6>
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	823b      	strh	r3, [r7, #16]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	8a3b      	ldrh	r3, [r7, #16]
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b4:	81fb      	strh	r3, [r7, #14]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	441a      	add	r2, r3
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	8013      	strh	r3, [r2, #0]
 80054d6:	e14d      	b.n	8005774 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f040 80a5 	bne.w	800562c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	843b      	strh	r3, [r7, #32]
 80054f0:	8c3b      	ldrh	r3, [r7, #32]
 80054f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01b      	beq.n	8005532 <USB_DeactivateEndpoint+0x18a>
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005510:	83fb      	strh	r3, [r7, #30]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	441a      	add	r2, r3
 800551c:	8bfb      	ldrh	r3, [r7, #30]
 800551e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800552a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552e:	b29b      	uxth	r3, r3
 8005530:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	83bb      	strh	r3, [r7, #28]
 8005540:	8bbb      	ldrh	r3, [r7, #28]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01b      	beq.n	8005582 <USB_DeactivateEndpoint+0x1da>
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	837b      	strh	r3, [r7, #26]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	8b7b      	ldrh	r3, [r7, #26]
 800556e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800557e:	b29b      	uxth	r3, r3
 8005580:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005598:	833b      	strh	r3, [r7, #24]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	441a      	add	r2, r3
 80055a4:	8b3b      	ldrh	r3, [r7, #24]
 80055a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	82fb      	strh	r3, [r7, #22]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	8afb      	ldrh	r3, [r7, #22]
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	82bb      	strh	r3, [r7, #20]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	8abb      	ldrh	r3, [r7, #20]
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]
 800562a:	e0a3      	b.n	8005774 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800563a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800563c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <USB_DeactivateEndpoint+0x2d4>
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	857b      	strh	r3, [r7, #42]	; 0x2a
 800568a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01b      	beq.n	80056cc <USB_DeactivateEndpoint+0x324>
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	441a      	add	r2, r3
 80056b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005700:	b29b      	uxth	r3, r3
 8005702:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	441a      	add	r2, r3
 8005726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005738:	b29b      	uxth	r3, r3
 800573a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	847b      	strh	r3, [r7, #34]	; 0x22
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3734      	adds	r7, #52	; 0x34
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b0cc      	sub	sp, #304	; 0x130
 8005784:	af00      	add	r7, sp, #0
 8005786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800578e:	6018      	str	r0, [r3, #0]
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005798:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	785b      	ldrb	r3, [r3, #1]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	f041 817d 	bne.w	8006aa6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d908      	bls.n	80057da <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80057d8:	e007      	b.n	80057ea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	7b1b      	ldrb	r3, [r3, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d152      	bne.n	80058a0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6959      	ldr	r1, [r3, #20]
 8005806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	88da      	ldrh	r2, [r3, #6]
 8005812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005816:	b29b      	uxth	r3, r3
 8005818:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800581c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005820:	6800      	ldr	r0, [r0, #0]
 8005822:	f001 ff0e 	bl	8007642 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800582e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005832:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	4619      	mov	r1, r3
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005854:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005858:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	440a      	add	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	011a      	lsls	r2, r3, #4
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4413      	add	r3, r2
 800587c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005884:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588e:	b29a      	uxth	r2, r3
 8005890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005894:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	f001 b8b5 	b.w	8006a0a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	78db      	ldrb	r3, [r3, #3]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	f040 84c6 	bne.w	800623e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6a1a      	ldr	r2, [r3, #32]
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	f240 8443 	bls.w	8006156 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80058fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005920:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593c:	1ad2      	subs	r2, r2, r3
 800593e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 823e 	beq.w	8005dee <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800597a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800597e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 809a 	bne.w	8005acc <USB_EPStartXfer+0x34c>
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4619      	mov	r1, r3
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059ca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	440a      	add	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	011a      	lsls	r2, r3, #4
 80059e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d122      	bne.n	8005a4a <USB_EPStartXfer+0x2ca>
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	e079      	b.n	8005b3e <USB_EPStartXfer+0x3be>
 8005a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a50:	d81b      	bhi.n	8005a8a <USB_EPStartXfer+0x30a>
 8005a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <USB_EPStartXfer+0x2f2>
 8005a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	029b      	lsls	r3, r3, #10
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	e059      	b.n	8005b3e <USB_EPStartXfer+0x3be>
 8005a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <USB_EPStartXfer+0x32a>
 8005aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	029b      	lsls	r3, r3, #10
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	e038      	b.n	8005b3e <USB_EPStartXfer+0x3be>
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d130      	bne.n	8005b3e <USB_EPStartXfer+0x3be>
 8005adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	4619      	mov	r1, r3
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005af6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005afa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	440a      	add	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	895b      	ldrh	r3, [r3, #10]
 8005b4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6959      	ldr	r1, [r3, #20]
 8005b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	f001 fd68 	bl	8007642 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b82:	441a      	add	r2, r3
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d90f      	bls.n	8005bcc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbc:	1ad2      	subs	r2, r2, r3
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	621a      	str	r2, [r3, #32]
 8005bca:	e00e      	b.n	8005bea <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f040 809a 	bne.w	8005d30 <USB_EPStartXfer+0x5b0>
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c08:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	4619      	mov	r1, r3
 8005c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c2e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	440a      	add	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4413      	add	r3, r2
 8005c52:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d122      	bne.n	8005cae <USB_EPStartXfer+0x52e>
 8005c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e083      	b.n	8005db6 <USB_EPStartXfer+0x636>
 8005cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb4:	d81b      	bhi.n	8005cee <USB_EPStartXfer+0x56e>
 8005cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <USB_EPStartXfer+0x556>
 8005ccc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cd6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	029b      	lsls	r3, r3, #10
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	e063      	b.n	8005db6 <USB_EPStartXfer+0x636>
 8005cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <USB_EPStartXfer+0x58e>
 8005d04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e042      	b.n	8005db6 <USB_EPStartXfer+0x636>
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d13a      	bne.n	8005db6 <USB_EPStartXfer+0x636>
 8005d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d72:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	440a      	add	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	011a      	lsls	r2, r3, #4
 8005d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	891b      	ldrh	r3, [r3, #8]
 8005dc2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6959      	ldr	r1, [r3, #20]
 8005dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ddc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005de0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005de4:	6800      	ldr	r0, [r0, #0]
 8005de6:	f001 fc2c 	bl	8007642 <USB_WritePMA>
 8005dea:	f000 be0e 	b.w	8006a0a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d16d      	bne.n	8005eda <USB_EPStartXfer+0x75a>
 8005dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1e:	4413      	add	r3, r2
 8005e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	011a      	lsls	r2, r3, #4
 8005e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e38:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d112      	bne.n	8005e68 <USB_EPStartXfer+0x6e8>
 8005e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	e063      	b.n	8005f30 <USB_EPStartXfer+0x7b0>
 8005e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e6e:	d817      	bhi.n	8005ea0 <USB_EPStartXfer+0x720>
 8005e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e74:	085b      	lsrs	r3, r3, #1
 8005e76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <USB_EPStartXfer+0x710>
 8005e86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	029b      	lsls	r3, r3, #10
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	e047      	b.n	8005f30 <USB_EPStartXfer+0x7b0>
 8005ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <USB_EPStartXfer+0x740>
 8005eb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	029b      	lsls	r3, r3, #10
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	e02a      	b.n	8005f30 <USB_EPStartXfer+0x7b0>
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d122      	bne.n	8005f30 <USB_EPStartXfer+0x7b0>
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0a:	4413      	add	r3, r2
 8005f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	011a      	lsls	r2, r3, #4
 8005f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1e:	4413      	add	r3, r2
 8005f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	891b      	ldrh	r3, [r3, #8]
 8005f3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6959      	ldr	r1, [r3, #20]
 8005f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f56:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f5a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f5e:	6800      	ldr	r0, [r0, #0]
 8005f60:	f001 fb6f 	bl	8007642 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f74:	441a      	add	r2, r3
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a1a      	ldr	r2, [r3, #32]
 8005f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d90f      	bls.n	8005fbe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6a1a      	ldr	r2, [r3, #32]
 8005faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	621a      	str	r2, [r3, #32]
 8005fbc:	e00e      	b.n	8005fdc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d16d      	bne.n	80060d4 <USB_EPStartXfer+0x954>
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
 8006004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	4413      	add	r3, r2
 800601a:	63bb      	str	r3, [r7, #56]	; 0x38
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	011a      	lsls	r2, r3, #4
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	4413      	add	r3, r2
 800602e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
 8006034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d112      	bne.n	8006062 <USB_EPStartXfer+0x8e2>
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006046:	b29a      	uxth	r2, r3
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e05d      	b.n	800611e <USB_EPStartXfer+0x99e>
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	2b3e      	cmp	r3, #62	; 0x3e
 8006068:	d817      	bhi.n	800609a <USB_EPStartXfer+0x91a>
 800606a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <USB_EPStartXfer+0x90a>
 8006080:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800608a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800608e:	b29b      	uxth	r3, r3
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	b29a      	uxth	r2, r3
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e041      	b.n	800611e <USB_EPStartXfer+0x99e>
 800609a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <USB_EPStartXfer+0x93a>
 80060b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060b4:	3b01      	subs	r3, #1
 80060b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060be:	b29b      	uxth	r3, r3
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	e024      	b.n	800611e <USB_EPStartXfer+0x99e>
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d11c      	bne.n	800611e <USB_EPStartXfer+0x99e>
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f8:	4413      	add	r3, r2
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
 80060fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	011a      	lsls	r2, r3, #4
 800610a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610c:	4413      	add	r3, r2
 800610e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	b29a      	uxth	r2, r3
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	895b      	ldrh	r3, [r3, #10]
 800612a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800612e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6959      	ldr	r1, [r3, #20]
 800613a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613e:	b29b      	uxth	r3, r3
 8006140:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006144:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006148:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800614c:	6800      	ldr	r0, [r0, #0]
 800614e:	f001 fa78 	bl	8007642 <USB_WritePMA>
 8006152:	f000 bc5a 	b.w	8006a0a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061dc:	b29b      	uxth	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e2:	4413      	add	r3, r2
 80061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	011a      	lsls	r2, r3, #4
 80061f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	b29a      	uxth	r2, r3
 8006204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006206:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	891b      	ldrh	r3, [r3, #8]
 8006214:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6959      	ldr	r1, [r3, #20]
 8006224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006228:	b29b      	uxth	r3, r3
 800622a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800622e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006232:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	f001 fa03 	bl	8007642 <USB_WritePMA>
 800623c:	e3e5      	b.n	8006a0a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006264:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800629a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062aa:	1ad2      	subs	r2, r2, r3
 80062ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 81bc 	beq.w	8006658 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d16d      	bne.n	80063da <USB_EPStartXfer+0xc5a>
 80062fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	67bb      	str	r3, [r7, #120]	; 0x78
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006318:	b29b      	uxth	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800631e:	4413      	add	r3, r2
 8006320:	67bb      	str	r3, [r7, #120]	; 0x78
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	011a      	lsls	r2, r3, #4
 8006330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006332:	4413      	add	r3, r2
 8006334:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006338:	677b      	str	r3, [r7, #116]	; 0x74
 800633a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d112      	bne.n	8006368 <USB_EPStartXfer+0xbe8>
 8006342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800634c:	b29a      	uxth	r2, r3
 800634e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006360:	b29a      	uxth	r2, r3
 8006362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e060      	b.n	800642a <USB_EPStartXfer+0xcaa>
 8006368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636c:	2b3e      	cmp	r3, #62	; 0x3e
 800636e:	d817      	bhi.n	80063a0 <USB_EPStartXfer+0xc20>
 8006370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800637a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <USB_EPStartXfer+0xc10>
 8006386:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800638a:	3301      	adds	r3, #1
 800638c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006390:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006394:	b29b      	uxth	r3, r3
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	b29a      	uxth	r2, r3
 800639a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	e044      	b.n	800642a <USB_EPStartXfer+0xcaa>
 80063a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80063aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <USB_EPStartXfer+0xc40>
 80063b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80063ba:	3b01      	subs	r3, #1
 80063bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80063c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	029b      	lsls	r3, r3, #10
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	e027      	b.n	800642a <USB_EPStartXfer+0xcaa>
 80063da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d11f      	bne.n	800642a <USB_EPStartXfer+0xcaa>
 80063ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006400:	4413      	add	r3, r2
 8006402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	011a      	lsls	r2, r3, #4
 8006414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006418:	4413      	add	r3, r2
 800641a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800641e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006424:	b29a      	uxth	r2, r3
 8006426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006428:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800642a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	895b      	ldrh	r3, [r3, #10]
 8006436:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6959      	ldr	r1, [r3, #20]
 8006446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644a:	b29b      	uxth	r3, r3
 800644c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006450:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006454:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006458:	6800      	ldr	r0, [r0, #0]
 800645a:	f001 f8f2 	bl	8007642 <USB_WritePMA>
          ep->xfer_buff += len;
 800645e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646e:	441a      	add	r2, r3
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	429a      	cmp	r2, r3
 8006496:	d90f      	bls.n	80064b8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6a1a      	ldr	r2, [r3, #32]
 80064a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a8:	1ad2      	subs	r2, r2, r3
 80064aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	621a      	str	r2, [r3, #32]
 80064b6:	e00e      	b.n	80064d6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80064c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2200      	movs	r2, #0
 80064d4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80064d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8295 	beq.w	8006a0a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d16d      	bne.n	80065cc <USB_EPStartXfer+0xe4c>
 80064f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80064fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006510:	4413      	add	r3, r2
 8006512:	66bb      	str	r3, [r7, #104]	; 0x68
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	011a      	lsls	r2, r3, #4
 8006522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006524:	4413      	add	r3, r2
 8006526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800652a:	667b      	str	r3, [r7, #100]	; 0x64
 800652c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d112      	bne.n	800655a <USB_EPStartXfer+0xdda>
 8006534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800653e:	b29a      	uxth	r2, r3
 8006540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006552:	b29a      	uxth	r2, r3
 8006554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e063      	b.n	8006622 <USB_EPStartXfer+0xea2>
 800655a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655e:	2b3e      	cmp	r3, #62	; 0x3e
 8006560:	d817      	bhi.n	8006592 <USB_EPStartXfer+0xe12>
 8006562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800656c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <USB_EPStartXfer+0xe02>
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	3301      	adds	r3, #1
 800657e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006586:	b29b      	uxth	r3, r3
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	b29a      	uxth	r2, r3
 800658c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e047      	b.n	8006622 <USB_EPStartXfer+0xea2>
 8006592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800659c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <USB_EPStartXfer+0xe32>
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ac:	3b01      	subs	r3, #1
 80065ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e02a      	b.n	8006622 <USB_EPStartXfer+0xea2>
 80065cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d122      	bne.n	8006622 <USB_EPStartXfer+0xea2>
 80065dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	673b      	str	r3, [r7, #112]	; 0x70
 80065e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065fc:	4413      	add	r3, r2
 80065fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	011a      	lsls	r2, r3, #4
 800660e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006610:	4413      	add	r3, r2
 8006612:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661c:	b29a      	uxth	r2, r3
 800661e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	891b      	ldrh	r3, [r3, #8]
 800662e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6959      	ldr	r1, [r3, #20]
 800663e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006642:	b29b      	uxth	r3, r3
 8006644:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006648:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800664c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006650:	6800      	ldr	r0, [r0, #0]
 8006652:	f000 fff6 	bl	8007642 <USB_WritePMA>
 8006656:	e1d8      	b.n	8006a0a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d178      	bne.n	800675a <USB_EPStartXfer+0xfda>
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006684:	b29b      	uxth	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800668c:	4413      	add	r3, r2
 800668e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	011a      	lsls	r2, r3, #4
 80066a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d116      	bne.n	80066e4 <USB_EPStartXfer+0xf64>
 80066b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	e06b      	b.n	80067bc <USB_EPStartXfer+0x103c>
 80066e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e8:	2b3e      	cmp	r3, #62	; 0x3e
 80066ea:	d818      	bhi.n	800671e <USB_EPStartXfer+0xf9e>
 80066ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <USB_EPStartXfer+0xf8c>
 8006702:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006706:	3301      	adds	r3, #1
 8006708:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800670c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006710:	b29b      	uxth	r3, r3
 8006712:	029b      	lsls	r3, r3, #10
 8006714:	b29a      	uxth	r2, r3
 8006716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e04e      	b.n	80067bc <USB_EPStartXfer+0x103c>
 800671e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <USB_EPStartXfer+0xfbe>
 8006734:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006738:	3b01      	subs	r3, #1
 800673a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800673e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e030      	b.n	80067bc <USB_EPStartXfer+0x103c>
 800675a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d128      	bne.n	80067bc <USB_EPStartXfer+0x103c>
 800676a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800678e:	4413      	add	r3, r2
 8006790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067a6:	4413      	add	r3, r2
 80067a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	891b      	ldrh	r3, [r3, #8]
 80067c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6959      	ldr	r1, [r3, #20]
 80067d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067e2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067e6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	f000 ff29 	bl	8007642 <USB_WritePMA>
          ep->xfer_buff += len;
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	441a      	add	r2, r3
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a1a      	ldr	r2, [r3, #32]
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d90f      	bls.n	800684a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6a1a      	ldr	r2, [r3, #32]
 8006836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683a:	1ad2      	subs	r2, r2, r3
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	621a      	str	r2, [r3, #32]
 8006848:	e00e      	b.n	8006868 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800684a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2200      	movs	r2, #0
 8006866:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80cc 	beq.w	8006a0a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d178      	bne.n	8006982 <USB_EPStartXfer+0x1202>
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068b4:	4413      	add	r3, r2
 80068b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d116      	bne.n	800690c <USB_EPStartXfer+0x118c>
 80068de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e064      	b.n	80069d6 <USB_EPStartXfer+0x1256>
 800690c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006910:	2b3e      	cmp	r3, #62	; 0x3e
 8006912:	d818      	bhi.n	8006946 <USB_EPStartXfer+0x11c6>
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <USB_EPStartXfer+0x11b4>
 800692a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692e:	3301      	adds	r3, #1
 8006930:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006938:	b29b      	uxth	r3, r3
 800693a:	029b      	lsls	r3, r3, #10
 800693c:	b29a      	uxth	r2, r3
 800693e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e047      	b.n	80069d6 <USB_EPStartXfer+0x1256>
 8006946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <USB_EPStartXfer+0x11e6>
 800695c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006960:	3b01      	subs	r3, #1
 8006962:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e029      	b.n	80069d6 <USB_EPStartXfer+0x1256>
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d121      	bne.n	80069d6 <USB_EPStartXfer+0x1256>
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069a8:	4413      	add	r3, r2
 80069aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	011a      	lsls	r2, r3, #4
 80069bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	895b      	ldrh	r3, [r3, #10]
 80069e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6959      	ldr	r1, [r3, #20]
 80069f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a04:	6800      	ldr	r0, [r0, #0]
 8006a06:	f000 fe1c 	bl	8007642 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a2c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a38:	8013      	strh	r3, [r2, #0]
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a46:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a4a:	8812      	ldrh	r2, [r2, #0]
 8006a4c:	f082 0210 	eor.w	r2, r2, #16
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a5e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a62:	8812      	ldrh	r2, [r2, #0]
 8006a64:	f082 0220 	eor.w	r2, r2, #32
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a88:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]
 8006aa2:	f000 bc9f 	b.w	80073e4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	7b1b      	ldrb	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80ae 	bne.w	8006c14 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d917      	bls.n	8006b04 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af4:	1ad2      	subs	r2, r2, r3
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	619a      	str	r2, [r3, #24]
 8006b02:	e00e      	b.n	8006b22 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b46:	4413      	add	r3, r2
 8006b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	011a      	lsls	r2, r3, #4
 8006b5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b5e:	4413      	add	r3, r2
 8006b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d116      	bne.n	8006b9e <USB_EPStartXfer+0x141e>
 8006b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e3e8      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba4:	d818      	bhi.n	8006bd8 <USB_EPStartXfer+0x1458>
 8006ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <USB_EPStartXfer+0x1446>
 8006bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	029b      	lsls	r3, r3, #10
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e3cb      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
 8006bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <USB_EPStartXfer+0x1478>
 8006bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	029b      	lsls	r3, r3, #10
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e3ad      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	f040 8200 	bne.w	8007026 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 8091 	bne.w	8006d5a <USB_EPStartXfer+0x15da>
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	011a      	lsls	r2, r3, #4
 8006c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d116      	bne.n	8006cbc <USB_EPStartXfer+0x153c>
 8006c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cb8:	801a      	strh	r2, [r3, #0]
 8006cba:	e083      	b.n	8006dc4 <USB_EPStartXfer+0x1644>
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cca:	d820      	bhi.n	8006d0e <USB_EPStartXfer+0x158e>
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <USB_EPStartXfer+0x157c>
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	029b      	lsls	r3, r3, #10
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e05a      	b.n	8006dc4 <USB_EPStartXfer+0x1644>
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <USB_EPStartXfer+0x15be>
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	029b      	lsls	r3, r3, #10
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e034      	b.n	8006dc4 <USB_EPStartXfer+0x1644>
 8006d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d12c      	bne.n	8006dc4 <USB_EPStartXfer+0x1644>
 8006d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8e:	4413      	add	r3, r2
 8006d90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	011a      	lsls	r2, r3, #4
 8006da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006da6:	4413      	add	r3, r2
 8006da8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 8091 	bne.w	8006f06 <USB_EPStartXfer+0x1786>
 8006de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e08:	4413      	add	r3, r2
 8006e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	011a      	lsls	r2, r3, #4
 8006e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e20:	4413      	add	r3, r2
 8006e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d116      	bne.n	8006e68 <USB_EPStartXfer+0x16e8>
 8006e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	e07c      	b.n	8006f62 <USB_EPStartXfer+0x17e2>
 8006e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b3e      	cmp	r3, #62	; 0x3e
 8006e76:	d820      	bhi.n	8006eba <USB_EPStartXfer+0x173a>
 8006e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <USB_EPStartXfer+0x1728>
 8006e9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ea8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	029b      	lsls	r3, r3, #10
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	e053      	b.n	8006f62 <USB_EPStartXfer+0x17e2>
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <USB_EPStartXfer+0x176a>
 8006ee0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	029b      	lsls	r3, r3, #10
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e02d      	b.n	8006f62 <USB_EPStartXfer+0x17e2>
 8006f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d125      	bne.n	8006f62 <USB_EPStartXfer+0x17e2>
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	011a      	lsls	r2, r3, #4
 8006f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 81fe 	beq.w	8007370 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <USB_EPStartXfer+0x182c>
 8006fa0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10d      	bne.n	8006fc8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 81db 	bne.w	8007370 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 81d4 	bne.w	8007370 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	441a      	add	r2, r3
 800700c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007020:	b29b      	uxth	r3, r3
 8007022:	8013      	strh	r3, [r2, #0]
 8007024:	e1a4      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	78db      	ldrb	r3, [r3, #3]
 8007032:	2b01      	cmp	r3, #1
 8007034:	f040 819a 	bne.w	800736c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	429a      	cmp	r2, r3
 8007052:	d917      	bls.n	8007084 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007074:	1ad2      	subs	r2, r2, r3
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	619a      	str	r2, [r3, #24]
 8007082:	e00e      	b.n	80070a2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d178      	bne.n	80071a4 <USB_EPStartXfer+0x1a24>
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070d6:	4413      	add	r3, r2
 80070d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	011a      	lsls	r2, r3, #4
 80070ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070ee:	4413      	add	r3, r2
 80070f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d116      	bne.n	800712e <USB_EPStartXfer+0x19ae>
 8007100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800710c:	b29a      	uxth	r2, r3
 800710e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	e06b      	b.n	8007206 <USB_EPStartXfer+0x1a86>
 800712e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007132:	2b3e      	cmp	r3, #62	; 0x3e
 8007134:	d818      	bhi.n	8007168 <USB_EPStartXfer+0x19e8>
 8007136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <USB_EPStartXfer+0x19d6>
 800714c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007150:	3301      	adds	r3, #1
 8007152:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715a:	b29b      	uxth	r3, r3
 800715c:	029b      	lsls	r3, r3, #10
 800715e:	b29a      	uxth	r2, r3
 8007160:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	e04e      	b.n	8007206 <USB_EPStartXfer+0x1a86>
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	2b00      	cmp	r3, #0
 800717c:	d104      	bne.n	8007188 <USB_EPStartXfer+0x1a08>
 800717e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007182:	3b01      	subs	r3, #1
 8007184:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800718c:	b29b      	uxth	r3, r3
 800718e:	029b      	lsls	r3, r3, #10
 8007190:	b29b      	uxth	r3, r3
 8007192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719a:	b29a      	uxth	r2, r3
 800719c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e030      	b.n	8007206 <USB_EPStartXfer+0x1a86>
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d128      	bne.n	8007206 <USB_EPStartXfer+0x1a86>
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	4413      	add	r3, r2
 80071da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	011a      	lsls	r2, r3, #4
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fe:	b29a      	uxth	r2, r3
 8007200:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d178      	bne.n	8007316 <USB_EPStartXfer+0x1b96>
 8007224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007240:	b29b      	uxth	r3, r3
 8007242:	461a      	mov	r2, r3
 8007244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007248:	4413      	add	r3, r2
 800724a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	011a      	lsls	r2, r3, #4
 800725c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007260:	4413      	add	r3, r2
 8007262:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d116      	bne.n	80072a0 <USB_EPStartXfer+0x1b20>
 8007272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800727e:	b29a      	uxth	r2, r3
 8007280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29b      	uxth	r3, r3
 800728e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007296:	b29a      	uxth	r2, r3
 8007298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e067      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
 80072a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a4:	2b3e      	cmp	r3, #62	; 0x3e
 80072a6:	d818      	bhi.n	80072da <USB_EPStartXfer+0x1b5a>
 80072a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ac:	085b      	lsrs	r3, r3, #1
 80072ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <USB_EPStartXfer+0x1b48>
 80072be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072c2:	3301      	adds	r3, #1
 80072c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	029b      	lsls	r3, r3, #10
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e04a      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
 80072da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <USB_EPStartXfer+0x1b7a>
 80072f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072f4:	3b01      	subs	r3, #1
 80072f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072fe:	b29b      	uxth	r3, r3
 8007300:	029b      	lsls	r3, r3, #10
 8007302:	b29b      	uxth	r3, r3
 8007304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730c:	b29a      	uxth	r2, r3
 800730e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e02c      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d124      	bne.n	8007370 <USB_EPStartXfer+0x1bf0>
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007334:	b29b      	uxth	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733c:	4413      	add	r3, r2
 800733e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	011a      	lsls	r2, r3, #4
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	4413      	add	r3, r2
 8007356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800735a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800735e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e001      	b.n	8007370 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e03a      	b.n	80073e6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007396:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800739a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800739e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073a6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80073aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	441a      	add	r2, r3
 80073cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80073d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d020      	beq.n	8007444 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007418:	81bb      	strh	r3, [r7, #12]
 800741a:	89bb      	ldrh	r3, [r7, #12]
 800741c:	f083 0310 	eor.w	r3, r3, #16
 8007420:	81bb      	strh	r3, [r7, #12]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	441a      	add	r2, r3
 800742c:	89bb      	ldrh	r3, [r7, #12]
 800742e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743e:	b29b      	uxth	r3, r3
 8007440:	8013      	strh	r3, [r2, #0]
 8007442:	e01f      	b.n	8007484 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745a:	81fb      	strh	r3, [r7, #14]
 800745c:	89fb      	ldrh	r3, [r7, #14]
 800745e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007462:	81fb      	strh	r3, [r7, #14]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	89fb      	ldrh	r3, [r7, #14]
 8007470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007480:	b29b      	uxth	r3, r3
 8007482:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	7b1b      	ldrb	r3, [r3, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f040 809d 	bne.w	80075de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d04c      	beq.n	8007546 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	823b      	strh	r3, [r7, #16]
 80074ba:	8a3b      	ldrh	r3, [r7, #16]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01b      	beq.n	80074fc <USB_EPClearStall+0x6c>
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074da:	81fb      	strh	r3, [r7, #14]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	89fb      	ldrh	r3, [r7, #14]
 80074e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	78db      	ldrb	r3, [r3, #3]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d06c      	beq.n	80075de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751a:	81bb      	strh	r3, [r7, #12]
 800751c:	89bb      	ldrh	r3, [r7, #12]
 800751e:	f083 0320 	eor.w	r3, r3, #32
 8007522:	81bb      	strh	r3, [r7, #12]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	89bb      	ldrh	r3, [r7, #12]
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]
 8007544:	e04b      	b.n	80075de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	82fb      	strh	r3, [r7, #22]
 8007554:	8afb      	ldrh	r3, [r7, #22]
 8007556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01b      	beq.n	8007596 <USB_EPClearStall+0x106>
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007574:	82bb      	strh	r3, [r7, #20]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	8abb      	ldrh	r3, [r7, #20]
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800758e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ac:	827b      	strh	r3, [r7, #18]
 80075ae:	8a7b      	ldrh	r3, [r7, #18]
 80075b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075b4:	827b      	strh	r3, [r7, #18]
 80075b6:	8a7b      	ldrh	r3, [r7, #18]
 80075b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075bc:	827b      	strh	r3, [r7, #18]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8a7b      	ldrh	r3, [r7, #18]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bc80      	pop	{r7}
 80075e8:	4770      	bx	lr

080075ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d103      	bne.n	8007604 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2280      	movs	r2, #128	; 0x80
 8007600:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007632:	b29b      	uxth	r3, r3
 8007634:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007636:	68fb      	ldr	r3, [r7, #12]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr

08007642 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007642:	b480      	push	{r7}
 8007644:	b08d      	sub	sp, #52	; 0x34
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	4611      	mov	r1, r2
 800764e:	461a      	mov	r2, r3
 8007650:	460b      	mov	r3, r1
 8007652:	80fb      	strh	r3, [r7, #6]
 8007654:	4613      	mov	r3, r2
 8007656:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007658:	88bb      	ldrh	r3, [r7, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	085b      	lsrs	r3, r3, #1
 800765e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	005a      	lsls	r2, r3, #1
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800767a:	e01e      	b.n	80076ba <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	3301      	adds	r3, #1
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	b29b      	uxth	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	b29a      	uxth	r2, r3
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	3302      	adds	r3, #2
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	3302      	adds	r3, #2
 80076ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	3301      	adds	r3, #1
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	3b01      	subs	r3, #1
 80076b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1dd      	bne.n	800767c <USB_WritePMA+0x3a>
  }
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	3734      	adds	r7, #52	; 0x34
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b08b      	sub	sp, #44	; 0x2c
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4611      	mov	r1, r2
 80076d8:	461a      	mov	r2, r3
 80076da:	460b      	mov	r3, r1
 80076dc:	80fb      	strh	r3, [r7, #6]
 80076de:	4613      	mov	r3, r2
 80076e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076e2:	88bb      	ldrh	r3, [r7, #4]
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	005a      	lsls	r2, r3, #1
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
 8007704:	e01b      	b.n	800773e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	3302      	adds	r3, #2
 8007712:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	3301      	adds	r3, #1
 8007720:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	b2da      	uxtb	r2, r3
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	3301      	adds	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	3302      	adds	r3, #2
 8007736:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	3b01      	subs	r3, #1
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e0      	bne.n	8007706 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007744:	88bb      	ldrh	r3, [r7, #4]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	701a      	strb	r2, [r3, #0]
  }
}
 8007760:	bf00      	nop
 8007762:	372c      	adds	r7, #44	; 0x2c
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	7c1b      	ldrb	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d115      	bne.n	80077ae <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007786:	2202      	movs	r2, #2
 8007788:	2181      	movs	r1, #129	; 0x81
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f002 ffbb 	bl	800a706 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800779a:	2202      	movs	r2, #2
 800779c:	2101      	movs	r1, #1
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f002 ffb1 	bl	800a706 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80077ac:	e012      	b.n	80077d4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077ae:	2340      	movs	r3, #64	; 0x40
 80077b0:	2202      	movs	r2, #2
 80077b2:	2181      	movs	r1, #129	; 0x81
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f002 ffa6 	bl	800a706 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	2202      	movs	r2, #2
 80077c4:	2101      	movs	r1, #1
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f002 ff9d 	bl	800a706 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80077d4:	2308      	movs	r3, #8
 80077d6:	2203      	movs	r2, #3
 80077d8:	2182      	movs	r1, #130	; 0x82
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f002 ff93 	bl	800a706 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80077e6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077ea:	f003 f8b3 	bl	800a954 <USBD_static_malloc>
 80077ee:	4602      	mov	r2, r0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
 8007804:	e026      	b.n	8007854 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800780c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7c1b      	ldrb	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783a:	2101      	movs	r1, #1
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f003 f853 	bl	800a8e8 <USBD_LL_PrepareReceive>
 8007842:	e007      	b.n	8007854 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	2101      	movs	r1, #1
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f003 f84a 	bl	800a8e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800786e:	2181      	movs	r1, #129	; 0x81
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f002 ff6e 	bl	800a752 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800787c:	2101      	movs	r1, #1
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 ff67 	bl	800a752 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800788c:	2182      	movs	r1, #130	; 0x82
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 ff5f 	bl	800a752 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00e      	beq.n	80078c2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078b4:	4618      	mov	r0, r3
 80078b6:	f003 f859 	bl	800a96c <USBD_static_free>
    pdev->pClassData = NULL;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078dc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d039      	beq.n	800796a <USBD_CDC_Setup+0x9e>
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d17f      	bne.n	80079fa <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d029      	beq.n	8007956 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b25b      	sxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	da11      	bge.n	8007930 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007918:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	88d2      	ldrh	r2, [r2, #6]
 800791e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007920:	6939      	ldr	r1, [r7, #16]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	88db      	ldrh	r3, [r3, #6]
 8007926:	461a      	mov	r2, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f994 	bl	8008c56 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800792e:	e06b      	b.n	8007a08 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	785a      	ldrb	r2, [r3, #1]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88db      	ldrh	r3, [r3, #6]
 800793e:	b2da      	uxtb	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007946:	6939      	ldr	r1, [r7, #16]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	88db      	ldrh	r3, [r3, #6]
 800794c:	461a      	mov	r2, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f9af 	bl	8008cb2 <USBD_CtlPrepareRx>
    break;
 8007954:	e058      	b.n	8007a08 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	7850      	ldrb	r0, [r2, #1]
 8007962:	2200      	movs	r2, #0
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	4798      	blx	r3
    break;
 8007968:	e04e      	b.n	8007a08 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	2b0b      	cmp	r3, #11
 8007970:	d02e      	beq.n	80079d0 <USBD_CDC_Setup+0x104>
 8007972:	2b0b      	cmp	r3, #11
 8007974:	dc38      	bgt.n	80079e8 <USBD_CDC_Setup+0x11c>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <USBD_CDC_Setup+0xb4>
 800797a:	2b0a      	cmp	r3, #10
 800797c:	d014      	beq.n	80079a8 <USBD_CDC_Setup+0xdc>
 800797e:	e033      	b.n	80079e8 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007986:	2b03      	cmp	r3, #3
 8007988:	d107      	bne.n	800799a <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	2202      	movs	r2, #2
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 f95f 	bl	8008c56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007998:	e02e      	b.n	80079f8 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f8f0 	bl	8008b82 <USBD_CtlError>
			  ret = USBD_FAIL;
 80079a2:	2302      	movs	r3, #2
 80079a4:	75fb      	strb	r3, [r7, #23]
      break;
 80079a6:	e027      	b.n	80079f8 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d107      	bne.n	80079c2 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80079b2:	f107 030f 	add.w	r3, r7, #15
 80079b6:	2201      	movs	r2, #1
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 f94b 	bl	8008c56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80079c0:	e01a      	b.n	80079f8 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f8dc 	bl	8008b82 <USBD_CtlError>
			  ret = USBD_FAIL;
 80079ca:	2302      	movs	r3, #2
 80079cc:	75fb      	strb	r3, [r7, #23]
      break;
 80079ce:	e013      	b.n	80079f8 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d00d      	beq.n	80079f6 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f8d0 	bl	8008b82 <USBD_CtlError>
			  ret = USBD_FAIL;
 80079e2:	2302      	movs	r3, #2
 80079e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80079e6:	e006      	b.n	80079f6 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 f8c9 	bl	8008b82 <USBD_CtlError>
      ret = USBD_FAIL;
 80079f0:	2302      	movs	r3, #2
 80079f2:	75fb      	strb	r3, [r7, #23]
      break;
 80079f4:	e000      	b.n	80079f8 <USBD_CDC_Setup+0x12c>
      break;
 80079f6:	bf00      	nop
    }
    break;
 80079f8:	e006      	b.n	8007a08 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 f8c0 	bl	8008b82 <USBD_CtlError>
    ret = USBD_FAIL;
 8007a02:	2302      	movs	r3, #2
 8007a04:	75fb      	strb	r3, [r7, #23]
    break;
 8007a06:	bf00      	nop
  }

  return ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a24:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007a2c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d03a      	beq.n	8007aae <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	331c      	adds	r3, #28
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d029      	beq.n	8007aa2 <USBD_CDC_DataIn+0x90>
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	331c      	adds	r3, #28
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	78f9      	ldrb	r1, [r7, #3]
 8007a62:	68b8      	ldr	r0, [r7, #8]
 8007a64:	460b      	mov	r3, r1
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	4403      	add	r3, r0
 8007a6e:	3338      	adds	r3, #56	; 0x38
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a76:	fb01 f303 	mul.w	r3, r1, r3
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d110      	bne.n	8007aa2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007a80:	78fa      	ldrb	r2, [r7, #3]
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	331c      	adds	r3, #28
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007a94:	78f9      	ldrb	r1, [r7, #3]
 8007a96:	2300      	movs	r3, #0
 8007a98:	2200      	movs	r2, #0
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f002 ff01 	bl	800a8a2 <USBD_LL_Transmit>
 8007aa0:	e003      	b.n	8007aaa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e000      	b.n	8007ab0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007aae:	2302      	movs	r3, #2
  }
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f002 ff2c 	bl	800a92e <USBD_LL_GetRxDataSize>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00d      	beq.n	8007b04 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007afc:	4611      	mov	r1, r2
 8007afe:	4798      	blx	r3

    return USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e000      	b.n	8007b06 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b04:	2302      	movs	r3, #2
  }
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b1c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d015      	beq.n	8007b54 <USBD_CDC_EP0_RxReady+0x46>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b2e:	2bff      	cmp	r3, #255	; 0xff
 8007b30:	d010      	beq.n	8007b54 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007b40:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b48:	b292      	uxth	r2, r2
 8007b4a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	22ff      	movs	r2, #255	; 0xff
 8007b50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2243      	movs	r2, #67	; 0x43
 8007b6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	2000035c 	.word	0x2000035c

08007b80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2243      	movs	r2, #67	; 0x43
 8007b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b8e:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20000318 	.word	0x20000318

08007ba0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2243      	movs	r2, #67	; 0x43
 8007bac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007bae:	4b03      	ldr	r3, [pc, #12]	; (8007bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	200003a0 	.word	0x200003a0

08007bc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	220a      	movs	r2, #10
 8007bcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007bce:	4b03      	ldr	r3, [pc, #12]	; (8007bdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	200002d4 	.word	0x200002d4

08007be0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007bea:	2302      	movs	r3, #2
 8007bec:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c2a:	88fa      	ldrh	r2, [r7, #6]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bc80      	pop	{r7}
 8007c3c:	4770      	bx	lr

08007c3e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c4e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c72:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01c      	beq.n	8007cb8 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d115      	bne.n	8007cb4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2181      	movs	r1, #129	; 0x81
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f002 fdf9 	bl	800a8a2 <USBD_LL_Transmit>

      return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e002      	b.n	8007cba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007cb8:	2302      	movs	r3, #2
  }
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d017      	beq.n	8007d0c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cee:	2101      	movs	r1, #1
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f002 fdf9 	bl	800a8e8 <USBD_LL_PrepareReceive>
 8007cf6:	e007      	b.n	8007d08 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cfe:	2340      	movs	r3, #64	; 0x40
 8007d00:	2101      	movs	r1, #1
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f002 fdf0 	bl	800a8e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e000      	b.n	8007d0e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007d0c:	2302      	movs	r3, #2
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	4613      	mov	r3, r2
 8007d22:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e01a      	b.n	8007d64 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	79fa      	ldrb	r2, [r7, #7]
 8007d5a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f002 fc5d 	bl	800a61c <USBD_LL_Init>

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]
 8007d8c:	e001      	b.n	8007d92 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr

08007d9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f002 fc92 	bl	800a6d0 <USBD_LL_Start>

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr

08007dca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00c      	beq.n	8007dfe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	4611      	mov	r1, r2
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	78fa      	ldrb	r2, [r7, #3]
 8007e1e:	4611      	mov	r1, r2
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fe62 	bl	8008b0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007e54:	461a      	mov	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d016      	beq.n	8007e98 <USBD_LL_SetupStage+0x6a>
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d81c      	bhi.n	8007ea8 <USBD_LL_SetupStage+0x7a>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <USBD_LL_SetupStage+0x4a>
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d008      	beq.n	8007e88 <USBD_LL_SetupStage+0x5a>
 8007e76:	e017      	b.n	8007ea8 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f9c5 	bl	8008210 <USBD_StdDevReq>
    break;
 8007e86:	e01a      	b.n	8007ebe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa27 	bl	80082e4 <USBD_StdItfReq>
    break;
 8007e96:	e012      	b.n	8007ebe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa67 	bl	8008374 <USBD_StdEPReq>
    break;
 8007ea6:	e00a      	b.n	8007ebe <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007eae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f002 fc6a 	bl	800a790 <USBD_LL_StallEP>
    break;
 8007ebc:	bf00      	nop
  }

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d14b      	bne.n	8007f74 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007ee2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d134      	bne.n	8007f58 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d919      	bls.n	8007f2e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	1ad2      	subs	r2, r2, r3
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d203      	bcs.n	8007f1c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	e002      	b.n	8007f22 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 fee1 	bl	8008cee <USBD_CtlContinueRx>
 8007f2c:	e038      	b.n	8007fa0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d105      	bne.n	8007f50 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fede 	bl	8008d12 <USBD_CtlSendStatus>
 8007f56:	e023      	b.n	8007fa0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d11e      	bne.n	8007fa0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f002 fc0f 	bl	800a790 <USBD_LL_StallEP>
 8007f72:	e015      	b.n	8007fa0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00d      	beq.n	8007f9c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d108      	bne.n	8007f9c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	7afa      	ldrb	r2, [r7, #11]
 8007f94:	4611      	mov	r1, r2
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	4798      	blx	r3
 8007f9a:	e001      	b.n	8007fa0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e000      	b.n	8007fa2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b086      	sub	sp, #24
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	607a      	str	r2, [r7, #4]
 8007fb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d17f      	bne.n	80080be <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3314      	adds	r3, #20
 8007fc2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d15c      	bne.n	8008088 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d915      	bls.n	8008006 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	1ad2      	subs	r2, r2, r3
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fe4b 	bl	8008c8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f002 fc72 	bl	800a8e8 <USBD_LL_PrepareReceive>
 8008004:	e04e      	b.n	80080a4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	6912      	ldr	r2, [r2, #16]
 800800e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008012:	fb01 f202 	mul.w	r2, r1, r2
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d11c      	bne.n	8008056 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008024:	429a      	cmp	r2, r3
 8008026:	d316      	bcc.n	8008056 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008032:	429a      	cmp	r2, r3
 8008034:	d20f      	bcs.n	8008056 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008036:	2200      	movs	r2, #0
 8008038:	2100      	movs	r1, #0
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fe27 	bl	8008c8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008048:	2300      	movs	r3, #0
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f002 fc4a 	bl	800a8e8 <USBD_LL_PrepareReceive>
 8008054:	e026      	b.n	80080a4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008068:	2b03      	cmp	r3, #3
 800806a:	d105      	bne.n	8008078 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008078:	2180      	movs	r1, #128	; 0x80
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f002 fb88 	bl	800a790 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fe59 	bl	8008d38 <USBD_CtlReceiveStatus>
 8008086:	e00d      	b.n	80080a4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800808e:	2b04      	cmp	r3, #4
 8008090:	d004      	beq.n	800809c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008098:	2b00      	cmp	r3, #0
 800809a:	d103      	bne.n	80080a4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800809c:	2180      	movs	r1, #128	; 0x80
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f002 fb76 	bl	800a790 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d11d      	bne.n	80080ea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff fe81 	bl	8007db6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80080bc:	e015      	b.n	80080ea <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00d      	beq.n	80080e6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d108      	bne.n	80080e6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	7afa      	ldrb	r2, [r7, #11]
 80080de:	4611      	mov	r1, r2
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	4798      	blx	r3
 80080e4:	e001      	b.n	80080ea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080e6:	2302      	movs	r3, #2
 80080e8:	e000      	b.n	80080ec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080fc:	2340      	movs	r3, #64	; 0x40
 80080fe:	2200      	movs	r2, #0
 8008100:	2100      	movs	r1, #0
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f002 faff 	bl	800a706 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2240      	movs	r2, #64	; 0x40
 8008114:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008118:	2340      	movs	r3, #64	; 0x40
 800811a:	2200      	movs	r2, #0
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f002 faf1 	bl	800a706 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2240      	movs	r2, #64	; 0x40
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6852      	ldr	r2, [r2, #4]
 8008164:	b2d2      	uxtb	r2, r2
 8008166:	4611      	mov	r1, r2
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
  }

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2204      	movs	r2, #4
 80081ac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr

080081bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bc80      	pop	{r7}
 80081da:	4770      	bx	lr

080081dc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d10b      	bne.n	8008206 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d005      	beq.n	8008236 <USBD_StdDevReq+0x26>
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d84f      	bhi.n	80082ce <USBD_StdDevReq+0xbe>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <USBD_StdDevReq+0x36>
 8008232:	2b20      	cmp	r3, #32
 8008234:	d14b      	bne.n	80082ce <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
    break;
 8008244:	e048      	b.n	80082d8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	2b09      	cmp	r3, #9
 800824c:	d839      	bhi.n	80082c2 <USBD_StdDevReq+0xb2>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <USBD_StdDevReq+0x44>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080082b9 	.word	0x080082b9
 800825c:	080082c3 	.word	0x080082c3
 8008260:	080082af 	.word	0x080082af
 8008264:	080082c3 	.word	0x080082c3
 8008268:	08008287 	.word	0x08008287
 800826c:	0800827d 	.word	0x0800827d
 8008270:	080082c3 	.word	0x080082c3
 8008274:	0800829b 	.word	0x0800829b
 8008278:	08008291 	.word	0x08008291
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9da 	bl	8008638 <USBD_GetDescriptor>
      break;
 8008284:	e022      	b.n	80082cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 facf 	bl	800882c <USBD_SetAddress>
      break;
 800828e:	e01d      	b.n	80082cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb0e 	bl	80088b4 <USBD_SetConfig>
      break;
 8008298:	e018      	b.n	80082cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb97 	bl	80089d0 <USBD_GetConfig>
      break;
 80082a2:	e013      	b.n	80082cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fbc7 	bl	8008a3a <USBD_GetStatus>
      break;
 80082ac:	e00e      	b.n	80082cc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fbf5 	bl	8008aa0 <USBD_SetFeature>
      break;
 80082b6:	e009      	b.n	80082cc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fc04 	bl	8008ac8 <USBD_ClrFeature>
      break;
 80082c0:	e004      	b.n	80082cc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc5c 	bl	8008b82 <USBD_CtlError>
      break;
 80082ca:	bf00      	nop
    }
    break;
 80082cc:	e004      	b.n	80082d8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fc56 	bl	8008b82 <USBD_CtlError>
    break;
 80082d6:	bf00      	nop
  }

  return ret;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop

080082e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082fa:	2b40      	cmp	r3, #64	; 0x40
 80082fc:	d005      	beq.n	800830a <USBD_StdItfReq+0x26>
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d82e      	bhi.n	8008360 <USBD_StdItfReq+0x7c>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <USBD_StdItfReq+0x26>
 8008306:	2b20      	cmp	r3, #32
 8008308:	d12a      	bne.n	8008360 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008310:	3b01      	subs	r3, #1
 8008312:	2b02      	cmp	r3, #2
 8008314:	d81d      	bhi.n	8008352 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	889b      	ldrh	r3, [r3, #4]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d813      	bhi.n	8008348 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d110      	bne.n	800835c <USBD_StdItfReq+0x78>
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10d      	bne.n	800835c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fce6 	bl	8008d12 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008346:	e009      	b.n	800835c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fc19 	bl	8008b82 <USBD_CtlError>
      break;
 8008350:	e004      	b.n	800835c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc14 	bl	8008b82 <USBD_CtlError>
      break;
 800835a:	e000      	b.n	800835e <USBD_StdItfReq+0x7a>
      break;
 800835c:	bf00      	nop
    }
    break;
 800835e:	e004      	b.n	800836a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fc0d 	bl	8008b82 <USBD_CtlError>
    break;
 8008368:	bf00      	nop
  }

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	889b      	ldrh	r3, [r3, #4]
 8008386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	d007      	beq.n	80083a4 <USBD_StdEPReq+0x30>
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	f200 8144 	bhi.w	8008622 <USBD_StdEPReq+0x2ae>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <USBD_StdEPReq+0x40>
 800839e:	2b20      	cmp	r3, #32
 80083a0:	f040 813f 	bne.w	8008622 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
    break;
 80083b2:	e13b      	b.n	800862c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d10a      	bne.n	80083d6 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]

      return ret;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	e12b      	b.n	800862e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d007      	beq.n	80083ee <USBD_StdEPReq+0x7a>
 80083de:	2b03      	cmp	r3, #3
 80083e0:	f300 8119 	bgt.w	8008616 <USBD_StdEPReq+0x2a2>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d072      	beq.n	80084ce <USBD_StdEPReq+0x15a>
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d03a      	beq.n	8008462 <USBD_StdEPReq+0xee>
 80083ec:	e113      	b.n	8008616 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d002      	beq.n	80083fe <USBD_StdEPReq+0x8a>
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d015      	beq.n	8008428 <USBD_StdEPReq+0xb4>
 80083fc:	e02b      	b.n	8008456 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00c      	beq.n	800841e <USBD_StdEPReq+0xaa>
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b80      	cmp	r3, #128	; 0x80
 8008408:	d009      	beq.n	800841e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f002 f9be 	bl	800a790 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008414:	2180      	movs	r1, #128	; 0x80
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f002 f9ba 	bl	800a790 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800841c:	e020      	b.n	8008460 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fbae 	bl	8008b82 <USBD_CtlError>
        break;
 8008426:	e01b      	b.n	8008460 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	885b      	ldrh	r3, [r3, #2]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10e      	bne.n	800844e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00b      	beq.n	800844e <USBD_StdEPReq+0xda>
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b80      	cmp	r3, #128	; 0x80
 800843a:	d008      	beq.n	800844e <USBD_StdEPReq+0xda>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	88db      	ldrh	r3, [r3, #6]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f002 f9a1 	bl	800a790 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fc5f 	bl	8008d12 <USBD_CtlSendStatus>

        break;
 8008454:	e004      	b.n	8008460 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fb92 	bl	8008b82 <USBD_CtlError>
        break;
 800845e:	bf00      	nop
      }
      break;
 8008460:	e0de      	b.n	8008620 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008468:	2b02      	cmp	r3, #2
 800846a:	d002      	beq.n	8008472 <USBD_StdEPReq+0xfe>
 800846c:	2b03      	cmp	r3, #3
 800846e:	d015      	beq.n	800849c <USBD_StdEPReq+0x128>
 8008470:	e026      	b.n	80084c0 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00c      	beq.n	8008492 <USBD_StdEPReq+0x11e>
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	2b80      	cmp	r3, #128	; 0x80
 800847c:	d009      	beq.n	8008492 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f002 f984 	bl	800a790 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008488:	2180      	movs	r1, #128	; 0x80
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f002 f980 	bl	800a790 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008490:	e01c      	b.n	80084cc <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fb74 	bl	8008b82 <USBD_CtlError>
        break;
 800849a:	e017      	b.n	80084cc <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	885b      	ldrh	r3, [r3, #2]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d112      	bne.n	80084ca <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f002 f98b 	bl	800a7ce <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fc2a 	bl	8008d12 <USBD_CtlSendStatus>
        }
        break;
 80084be:	e004      	b.n	80084ca <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fb5d 	bl	8008b82 <USBD_CtlError>
        break;
 80084c8:	e000      	b.n	80084cc <USBD_StdEPReq+0x158>
        break;
 80084ca:	bf00      	nop
      }
      break;
 80084cc:	e0a8      	b.n	8008620 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d002      	beq.n	80084de <USBD_StdEPReq+0x16a>
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d031      	beq.n	8008540 <USBD_StdEPReq+0x1cc>
 80084dc:	e095      	b.n	800860a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <USBD_StdEPReq+0x180>
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	d004      	beq.n	80084f4 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fb48 	bl	8008b82 <USBD_CtlError>
          break;
 80084f2:	e08f      	b.n	8008614 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80084f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	da0b      	bge.n	8008514 <USBD_StdEPReq+0x1a0>
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	3310      	adds	r3, #16
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	4413      	add	r3, r2
 8008510:	3304      	adds	r3, #4
 8008512:	e00a      	b.n	800852a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	4413      	add	r3, r2
 800852a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2202      	movs	r2, #2
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fb8c 	bl	8008c56 <USBD_CtlSendData>
          break;
 800853e:	e069      	b.n	8008614 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da11      	bge.n	800856c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	3318      	adds	r3, #24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d117      	bne.n	8008592 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb0c 	bl	8008b82 <USBD_CtlError>
            break;
 800856a:	e053      	b.n	8008614 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	f003 020f 	and.w	r2, r3, #15
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 faf9 	bl	8008b82 <USBD_CtlError>
            break;
 8008590:	e040      	b.n	8008614 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008596:	2b00      	cmp	r3, #0
 8008598:	da0b      	bge.n	80085b2 <USBD_StdEPReq+0x23e>
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	3310      	adds	r3, #16
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	e00a      	b.n	80085c8 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4413      	add	r3, r2
 80085c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <USBD_StdEPReq+0x262>
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b80      	cmp	r3, #128	; 0x80
 80085d4:	d103      	bne.n	80085de <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e00e      	b.n	80085fc <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f002 f912 	bl	800a80c <USBD_LL_IsStallEP>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2201      	movs	r2, #1
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	e002      	b.n	80085fc <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2202      	movs	r2, #2
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fb27 	bl	8008c56 <USBD_CtlSendData>
          break;
 8008608:	e004      	b.n	8008614 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fab8 	bl	8008b82 <USBD_CtlError>
        break;
 8008612:	bf00      	nop
      }
      break;
 8008614:	e004      	b.n	8008620 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fab2 	bl	8008b82 <USBD_CtlError>
      break;
 800861e:	bf00      	nop
    }
    break;
 8008620:	e004      	b.n	800862c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 faac 	bl	8008b82 <USBD_CtlError>
    break;
 800862a:	bf00      	nop
  }

  return ret;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	885b      	ldrh	r3, [r3, #2]
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	b29b      	uxth	r3, r3
 800864a:	3b01      	subs	r3, #1
 800864c:	2b06      	cmp	r3, #6
 800864e:	f200 80c9 	bhi.w	80087e4 <USBD_GetDescriptor+0x1ac>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <USBD_GetDescriptor+0x20>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	08008675 	.word	0x08008675
 800865c:	0800868d 	.word	0x0800868d
 8008660:	080086cd 	.word	0x080086cd
 8008664:	080087e5 	.word	0x080087e5
 8008668:	080087e5 	.word	0x080087e5
 800866c:	08008791 	.word	0x08008791
 8008670:	080087b7 	.word	0x080087b7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	7c12      	ldrb	r2, [r2, #16]
 8008680:	f107 010a 	add.w	r1, r7, #10
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
    break;
 800868a:	e0b0      	b.n	80087ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7c1b      	ldrb	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10d      	bne.n	80086b0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	f107 020a 	add.w	r2, r7, #10
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	2202      	movs	r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80086ae:	e09e      	b.n	80087ee <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	f107 020a 	add.w	r2, r7, #10
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	2202      	movs	r2, #2
 80086c8:	701a      	strb	r2, [r3, #0]
    break;
 80086ca:	e090      	b.n	80087ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	885b      	ldrh	r3, [r3, #2]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d856      	bhi.n	8008784 <USBD_GetDescriptor+0x14c>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <USBD_GetDescriptor+0xa4>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	080086f5 	.word	0x080086f5
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	08008725 	.word	0x08008725
 80086e8:	0800873d 	.word	0x0800873d
 80086ec:	08008755 	.word	0x08008755
 80086f0:	0800876d 	.word	0x0800876d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	7c12      	ldrb	r2, [r2, #16]
 8008700:	f107 010a 	add.w	r1, r7, #10
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
      break;
 800870a:	e040      	b.n	800878e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7c12      	ldrb	r2, [r2, #16]
 8008718:	f107 010a 	add.w	r1, r7, #10
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
 8008720:	60f8      	str	r0, [r7, #12]
      break;
 8008722:	e034      	b.n	800878e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7c12      	ldrb	r2, [r2, #16]
 8008730:	f107 010a 	add.w	r1, r7, #10
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
      break;
 800873a:	e028      	b.n	800878e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	7c12      	ldrb	r2, [r2, #16]
 8008748:	f107 010a 	add.w	r1, r7, #10
 800874c:	4610      	mov	r0, r2
 800874e:	4798      	blx	r3
 8008750:	60f8      	str	r0, [r7, #12]
      break;
 8008752:	e01c      	b.n	800878e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7c12      	ldrb	r2, [r2, #16]
 8008760:	f107 010a 	add.w	r1, r7, #10
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
 8008768:	60f8      	str	r0, [r7, #12]
      break;
 800876a:	e010      	b.n	800878e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	7c12      	ldrb	r2, [r2, #16]
 8008778:	f107 010a 	add.w	r1, r7, #10
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
 8008780:	60f8      	str	r0, [r7, #12]
      break;
 8008782:	e004      	b.n	800878e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f9fb 	bl	8008b82 <USBD_CtlError>
      return;
 800878c:	e04b      	b.n	8008826 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800878e:	e02e      	b.n	80087ee <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7c1b      	ldrb	r3, [r3, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800879e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a0:	f107 020a 	add.w	r2, r7, #10
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
      break;
 80087aa:	e020      	b.n	80087ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9e7 	bl	8008b82 <USBD_CtlError>
      return;
 80087b4:	e037      	b.n	8008826 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7c1b      	ldrb	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10d      	bne.n	80087da <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	f107 020a 	add.w	r2, r7, #10
 80087ca:	4610      	mov	r0, r2
 80087cc:	4798      	blx	r3
 80087ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	2207      	movs	r2, #7
 80087d6:	701a      	strb	r2, [r3, #0]
      break;
 80087d8:	e009      	b.n	80087ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f9d0 	bl	8008b82 <USBD_CtlError>
      return;
 80087e2:	e020      	b.n	8008826 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f9cb 	bl	8008b82 <USBD_CtlError>
    return;
 80087ec:	e01b      	b.n	8008826 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80087ee:	897b      	ldrh	r3, [r7, #10]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d011      	beq.n	8008818 <USBD_GetDescriptor+0x1e0>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	88db      	ldrh	r3, [r3, #6]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00d      	beq.n	8008818 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	88da      	ldrh	r2, [r3, #6]
 8008800:	897b      	ldrh	r3, [r7, #10]
 8008802:	4293      	cmp	r3, r2
 8008804:	bf28      	it	cs
 8008806:	4613      	movcs	r3, r2
 8008808:	b29b      	uxth	r3, r3
 800880a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800880c:	897b      	ldrh	r3, [r7, #10]
 800880e:	461a      	mov	r2, r3
 8008810:	68f9      	ldr	r1, [r7, #12]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa1f 	bl	8008c56 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	88db      	ldrh	r3, [r3, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fa76 	bl	8008d12 <USBD_CtlSendStatus>
  }
}
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	889b      	ldrh	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d130      	bne.n	80088a0 <USBD_SetAddress+0x74>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d12c      	bne.n	80088a0 <USBD_SetAddress+0x74>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	2b7f      	cmp	r3, #127	; 0x7f
 800884c:	d828      	bhi.n	80088a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008860:	2b03      	cmp	r3, #3
 8008862:	d104      	bne.n	800886e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f98b 	bl	8008b82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886c:	e01d      	b.n	80088aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7bfa      	ldrb	r2, [r7, #15]
 8008872:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f001 fff2 	bl	800a864 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fa46 	bl	8008d12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008894:	e009      	b.n	80088aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889e:	e004      	b.n	80088aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f96d 	bl	8008b82 <USBD_CtlError>
  }
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	885b      	ldrh	r3, [r3, #2]
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	4b41      	ldr	r3, [pc, #260]	; (80089cc <USBD_SetConfig+0x118>)
 80088c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088c8:	4b40      	ldr	r3, [pc, #256]	; (80089cc <USBD_SetConfig+0x118>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d904      	bls.n	80088da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f955 	bl	8008b82 <USBD_CtlError>
 80088d8:	e075      	b.n	80089c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d002      	beq.n	80088ea <USBD_SetConfig+0x36>
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d023      	beq.n	8008930 <USBD_SetConfig+0x7c>
 80088e8:	e062      	b.n	80089b0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80088ea:	4b38      	ldr	r3, [pc, #224]	; (80089cc <USBD_SetConfig+0x118>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01a      	beq.n	8008928 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80088f2:	4b36      	ldr	r3, [pc, #216]	; (80089cc <USBD_SetConfig+0x118>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2203      	movs	r2, #3
 8008900:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008904:	4b31      	ldr	r3, [pc, #196]	; (80089cc <USBD_SetConfig+0x118>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff fa5d 	bl	8007dca <USBD_SetClassConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	2b02      	cmp	r3, #2
 8008914:	d104      	bne.n	8008920 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f932 	bl	8008b82 <USBD_CtlError>
          return;
 800891e:	e052      	b.n	80089c6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f9f6 	bl	8008d12 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008926:	e04e      	b.n	80089c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9f2 	bl	8008d12 <USBD_CtlSendStatus>
      break;
 800892e:	e04a      	b.n	80089c6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008930:	4b26      	ldr	r3, [pc, #152]	; (80089cc <USBD_SetConfig+0x118>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d112      	bne.n	800895e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <USBD_SetConfig+0x118>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800894a:	4b20      	ldr	r3, [pc, #128]	; (80089cc <USBD_SetConfig+0x118>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff fa59 	bl	8007e08 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9db 	bl	8008d12 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800895c:	e033      	b.n	80089c6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800895e:	4b1b      	ldr	r3, [pc, #108]	; (80089cc <USBD_SetConfig+0x118>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	429a      	cmp	r2, r3
 800896a:	d01d      	beq.n	80089a8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff fa47 	bl	8007e08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800897a:	4b14      	ldr	r3, [pc, #80]	; (80089cc <USBD_SetConfig+0x118>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008984:	4b11      	ldr	r3, [pc, #68]	; (80089cc <USBD_SetConfig+0x118>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fa1d 	bl	8007dca <USBD_SetClassConfig>
 8008990:	4603      	mov	r3, r0
 8008992:	2b02      	cmp	r3, #2
 8008994:	d104      	bne.n	80089a0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f8f2 	bl	8008b82 <USBD_CtlError>
          return;
 800899e:	e012      	b.n	80089c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f9b6 	bl	8008d12 <USBD_CtlSendStatus>
      break;
 80089a6:	e00e      	b.n	80089c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9b2 	bl	8008d12 <USBD_CtlSendStatus>
      break;
 80089ae:	e00a      	b.n	80089c6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8e5 	bl	8008b82 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80089b8:	4b04      	ldr	r3, [pc, #16]	; (80089cc <USBD_SetConfig+0x118>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff fa22 	bl	8007e08 <USBD_ClrClassConfig>
      break;
 80089c4:	bf00      	nop
    }
  }
}
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	2000063c 	.word	0x2000063c

080089d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	88db      	ldrh	r3, [r3, #6]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d004      	beq.n	80089ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f8cc 	bl	8008b82 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80089ea:	e022      	b.n	8008a32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	dc02      	bgt.n	80089fc <USBD_GetConfig+0x2c>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dc03      	bgt.n	8008a02 <USBD_GetConfig+0x32>
 80089fa:	e015      	b.n	8008a28 <USBD_GetConfig+0x58>
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetConfig+0x48>
 8008a00:	e012      	b.n	8008a28 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f920 	bl	8008c56 <USBD_CtlSendData>
      break;
 8008a16:	e00c      	b.n	8008a32 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f918 	bl	8008c56 <USBD_CtlSendData>
      break;
 8008a26:	e004      	b.n	8008a32 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8a9 	bl	8008b82 <USBD_CtlError>
      break;
 8008a30:	bf00      	nop
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d81e      	bhi.n	8008a8e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88db      	ldrh	r3, [r3, #6]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d004      	beq.n	8008a62 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f891 	bl	8008b82 <USBD_CtlError>
      break;
 8008a60:	e01a      	b.n	8008a98 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f043 0202 	orr.w	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	330c      	adds	r3, #12
 8008a82:	2202      	movs	r2, #2
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f8e5 	bl	8008c56 <USBD_CtlSendData>
    break;
 8008a8c:	e004      	b.n	8008a98 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f876 	bl	8008b82 <USBD_CtlError>
    break;
 8008a96:	bf00      	nop
  }
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d106      	bne.n	8008ac0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f929 	bl	8008d12 <USBD_CtlSendStatus>
  }

}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d80b      	bhi.n	8008af6 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d10c      	bne.n	8008b00 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f90f 	bl	8008d12 <USBD_CtlSendStatus>
    }
    break;
 8008af4:	e004      	b.n	8008b00 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f842 	bl	8008b82 <USBD_CtlError>
    break;
 8008afe:	e000      	b.n	8008b02 <USBD_ClrFeature+0x3a>
    break;
 8008b00:	bf00      	nop
  }
}
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	785a      	ldrb	r2, [r3, #1]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	3302      	adds	r3, #2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	3303      	adds	r3, #3
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	3304      	adds	r3, #4
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	3305      	adds	r3, #5
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	3306      	adds	r3, #6
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	3307      	adds	r3, #7
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	4413      	add	r3, r2
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	80da      	strh	r2, [r3, #6]

}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008b8c:	2180      	movs	r1, #128	; 0x80
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 fdfe 	bl	800a790 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008b94:	2100      	movs	r1, #0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f001 fdfa 	bl	800a790 <USBD_LL_StallEP>
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d032      	beq.n	8008c20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f834 	bl	8008c28 <USBD_GetLen>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	75fa      	strb	r2, [r7, #23]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	4413      	add	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	7812      	ldrb	r2, [r2, #0]
 8008bde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	75fa      	strb	r2, [r7, #23]
 8008be6:	461a      	mov	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4413      	add	r3, r2
 8008bec:	2203      	movs	r2, #3
 8008bee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bf0:	e012      	b.n	8008c18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	60fa      	str	r2, [r7, #12]
 8008bf8:	7dfa      	ldrb	r2, [r7, #23]
 8008bfa:	1c51      	adds	r1, r2, #1
 8008bfc:	75f9      	strb	r1, [r7, #23]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	440a      	add	r2, r1
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	75fa      	strb	r2, [r7, #23]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4413      	add	r3, r2
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e8      	bne.n	8008bf2 <USBD_GetString+0x4e>
    }
  }
}
 8008c20:	bf00      	nop
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008c34:	e005      	b.n	8008c42 <USBD_GetLen+0x1a>
    {
        len++;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f5      	bne.n	8008c36 <USBD_GetLen+0xe>
    }

    return len;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr

08008c56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	4613      	mov	r3, r2
 8008c62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c72:	88fa      	ldrh	r2, [r7, #6]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008c78:	88fb      	ldrh	r3, [r7, #6]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f001 fe0f 	bl	800a8a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f001 fdfd 	bl	800a8a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008cc8:	88fa      	ldrh	r2, [r7, #6]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f001 fe02 	bl	800a8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cfc:	88fb      	ldrh	r3, [r7, #6]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	2100      	movs	r1, #0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f001 fdf0 	bl	800a8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2204      	movs	r2, #4
 8008d1e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d22:	2300      	movs	r3, #0
 8008d24:	2200      	movs	r2, #0
 8008d26:	2100      	movs	r1, #0
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fdba 	bl	800a8a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2205      	movs	r2, #5
 8008d44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fdca 	bl	800a8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d64:	2200      	movs	r2, #0
 8008d66:	4912      	ldr	r1, [pc, #72]	; (8008db0 <MX_USB_DEVICE_Init+0x50>)
 8008d68:	4812      	ldr	r0, [pc, #72]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d6a:	f7fe ffd4 	bl	8007d16 <USBD_Init>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d74:	f7f8 f85a 	bl	8000e2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d78:	490f      	ldr	r1, [pc, #60]	; (8008db8 <MX_USB_DEVICE_Init+0x58>)
 8008d7a:	480e      	ldr	r0, [pc, #56]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d7c:	f7fe fff6 	bl	8007d6c <USBD_RegisterClass>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d86:	f7f8 f851 	bl	8000e2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d8a:	490c      	ldr	r1, [pc, #48]	; (8008dbc <MX_USB_DEVICE_Init+0x5c>)
 8008d8c:	4809      	ldr	r0, [pc, #36]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d8e:	f7fe ff27 	bl	8007be0 <USBD_CDC_RegisterInterface>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d98:	f7f8 f848 	bl	8000e2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d9c:	4805      	ldr	r0, [pc, #20]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d9e:	f7fe fffe 	bl	8007d9e <USBD_Start>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008da8:	f7f8 f840 	bl	8000e2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dac:	bf00      	nop
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	200003f4 	.word	0x200003f4
 8008db4:	20000640 	.word	0x20000640
 8008db8:	200002e0 	.word	0x200002e0
 8008dbc:	200003e4 	.word	0x200003e4

08008dc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4905      	ldr	r1, [pc, #20]	; (8008ddc <CDC_Init_FS+0x1c>)
 8008dc8:	4805      	ldr	r0, [pc, #20]	; (8008de0 <CDC_Init_FS+0x20>)
 8008dca:	f7fe ff1f 	bl	8007c0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dce:	4905      	ldr	r1, [pc, #20]	; (8008de4 <CDC_Init_FS+0x24>)
 8008dd0:	4803      	ldr	r0, [pc, #12]	; (8008de0 <CDC_Init_FS+0x20>)
 8008dd2:	f7fe ff34 	bl	8007c3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	200014c8 	.word	0x200014c8
 8008de0:	20000640 	.word	0x20000640
 8008de4:	20000cc8 	.word	0x20000cc8

08008de8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bc80      	pop	{r7}
 8008df4:	4770      	bx	lr
	...

08008df8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
 8008e04:	4613      	mov	r3, r2
 8008e06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	2b23      	cmp	r3, #35	; 0x23
 8008e0c:	d84a      	bhi.n	8008ea4 <CDC_Control_FS+0xac>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <CDC_Control_FS+0x1c>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008ea5 	.word	0x08008ea5
 8008e18:	08008ea5 	.word	0x08008ea5
 8008e1c:	08008ea5 	.word	0x08008ea5
 8008e20:	08008ea5 	.word	0x08008ea5
 8008e24:	08008ea5 	.word	0x08008ea5
 8008e28:	08008ea5 	.word	0x08008ea5
 8008e2c:	08008ea5 	.word	0x08008ea5
 8008e30:	08008ea5 	.word	0x08008ea5
 8008e34:	08008ea5 	.word	0x08008ea5
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	08008ea5 	.word	0x08008ea5
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008ea5 	.word	0x08008ea5
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008ea5 	.word	0x08008ea5
 8008e60:	08008ea5 	.word	0x08008ea5
 8008e64:	08008ea5 	.word	0x08008ea5
 8008e68:	08008ea5 	.word	0x08008ea5
 8008e6c:	08008ea5 	.word	0x08008ea5
 8008e70:	08008ea5 	.word	0x08008ea5
 8008e74:	08008ea5 	.word	0x08008ea5
 8008e78:	08008ea5 	.word	0x08008ea5
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008ea5 	.word	0x08008ea5
 8008e84:	08008ea5 	.word	0x08008ea5
 8008e88:	08008ea5 	.word	0x08008ea5
 8008e8c:	08008ea5 	.word	0x08008ea5
 8008e90:	08008ea5 	.word	0x08008ea5
 8008e94:	08008ea5 	.word	0x08008ea5
 8008e98:	08008ea5 	.word	0x08008ea5
 8008e9c:	08008ea5 	.word	0x08008ea5
 8008ea0:	08008ea5 	.word	0x08008ea5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ea4:	bf00      	nop
  }

  return (USBD_OK);
 8008ea6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop

08008eb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	e014      	b.n	8008eee <CDC_Receive_FS+0x3a>
	{
	if (rx_buffer_len < MAX_RX_BUFFER_SIZE)
 8008ec4:	4b1c      	ldr	r3, [pc, #112]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ecc:	d20c      	bcs.n	8008ee8 <CDC_Receive_FS+0x34>
	{
	  rx_buffer[rx_buffer_len] = Buf[i];
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	441a      	add	r2, r3
 8008ed4:	4b18      	ldr	r3, [pc, #96]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	7811      	ldrb	r1, [r2, #0]
 8008eda:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <CDC_Receive_FS+0x88>)
 8008edc:	54d1      	strb	r1, [r2, r3]
	  rx_buffer_len = rx_buffer_len + 1;
 8008ede:	4b16      	ldr	r3, [pc, #88]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	4a14      	ldr	r2, [pc, #80]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008ee6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3301      	adds	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d8e5      	bhi.n	8008ec4 <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (rx_buffer_len > 0 && rx_buffer[rx_buffer_len - 1] == '\n')
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00f      	beq.n	8008f20 <CDC_Receive_FS+0x6c>
 8008f00:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	4a0d      	ldr	r2, [pc, #52]	; (8008f3c <CDC_Receive_FS+0x88>)
 8008f08:	5cd3      	ldrb	r3, [r2, r3]
 8008f0a:	2b0a      	cmp	r3, #10
 8008f0c:	d108      	bne.n	8008f20 <CDC_Receive_FS+0x6c>
	{
		// Process the received message
		Process_Received_Message(rx_buffer, rx_buffer_len);
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4619      	mov	r1, r3
 8008f14:	4809      	ldr	r0, [pc, #36]	; (8008f3c <CDC_Receive_FS+0x88>)
 8008f16:	f000 f83b 	bl	8008f90 <Process_Received_Message>
		// Clear the receive buffer
		rx_buffer_len = 0;
 8008f1a:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <CDC_Receive_FS+0x84>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4807      	ldr	r0, [pc, #28]	; (8008f40 <CDC_Receive_FS+0x8c>)
 8008f24:	f7fe fe8b 	bl	8007c3e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f28:	4805      	ldr	r0, [pc, #20]	; (8008f40 <CDC_Receive_FS+0x8c>)
 8008f2a:	f7fe feca 	bl	8007cc2 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8008f2e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20000cc4 	.word	0x20000cc4
 8008f3c:	200008dc 	.word	0x200008dc
 8008f40:	20000640 	.word	0x20000640

08008f44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <CDC_Transmit_FS+0x48>)
 8008f56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e00b      	b.n	8008f82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f6a:	887b      	ldrh	r3, [r7, #2]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	4806      	ldr	r0, [pc, #24]	; (8008f8c <CDC_Transmit_FS+0x48>)
 8008f72:	f7fe fe4b 	bl	8007c0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f76:	4805      	ldr	r0, [pc, #20]	; (8008f8c <CDC_Transmit_FS+0x48>)
 8008f78:	f7fe fe74 	bl	8007c64 <USBD_CDC_TransmitPacket>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20000640 	.word	0x20000640

08008f90 <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* rx_buffer, uint32_t rx_buffer_len)
{
 8008f90:	b5b0      	push	{r4, r5, r7, lr}
 8008f92:	f5ad 5d2a 	sub.w	sp, sp, #10880	; 0x2a80
 8008f96:	b08c      	sub	sp, #48	; 0x30
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008f9e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008fa2:	6018      	str	r0, [r3, #0]
 8008fa4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008fa8:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8008fac:	6019      	str	r1, [r3, #0]
	//uint8_t RX_Packet[128]; // add null character
	//uint8_t RX_Packet_Length; // max 127
	//char RX_String[128]; // convert uint8_t to char


	if(strncmp((char*) rx_buffer, "start", strlen("start")) == 0)
 8008fae:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8008fb2:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	49ab      	ldr	r1, [pc, #684]	; (8009268 <Process_Received_Message+0x2d8>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	f001 fd6d 	bl	800aa9a <strncmp>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d135      	bne.n	8009032 <Process_Received_Message+0xa2>
	{
		sprintf(str1, "User Input: Start\r\n");
 8008fc6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008fca:	3b34      	subs	r3, #52	; 0x34
 8008fcc:	49a7      	ldr	r1, [pc, #668]	; (800926c <Process_Received_Message+0x2dc>)
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 fd34 	bl	800aa3c <siprintf>
		sprintf(str2, "Initialized the CC1200 for Operation\r\n");
 8008fd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008fd8:	3b0c      	subs	r3, #12
 8008fda:	49a5      	ldr	r1, [pc, #660]	; (8009270 <Process_Received_Message+0x2e0>)
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fd2d 	bl	800aa3c <siprintf>
		CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 8008fe2:	4ba4      	ldr	r3, [pc, #656]	; (8009274 <Process_Received_Message+0x2e4>)
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	2340      	movs	r3, #64	; 0x40
 8008fe8:	4aa3      	ldr	r2, [pc, #652]	; (8009278 <Process_Received_Message+0x2e8>)
 8008fea:	49a4      	ldr	r1, [pc, #656]	; (800927c <Process_Received_Message+0x2ec>)
 8008fec:	48a4      	ldr	r0, [pc, #656]	; (8009280 <Process_Received_Message+0x2f0>)
 8008fee:	f7f7 fa51 	bl	8000494 <CC1200_Init>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8008ff2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8008ff6:	3b0c      	subs	r3, #12
 8008ff8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008ffc:	3a34      	subs	r2, #52	; 0x34
 8008ffe:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009002:	381c      	subs	r0, #28
 8009004:	499f      	ldr	r1, [pc, #636]	; (8009284 <Process_Received_Message+0x2f4>)
 8009006:	f001 fd19 	bl	800aa3c <siprintf>
 800900a:	4603      	mov	r3, r0
 800900c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009010:	f102 021e 	add.w	r2, r2, #30
 8009014:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009016:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800901a:	f103 031e 	add.w	r3, r3, #30
 800901e:	881a      	ldrh	r2, [r3, #0]
 8009020:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009024:	3b1c      	subs	r3, #28
 8009026:	4611      	mov	r1, r2
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff ff8b 	bl	8008f44 <CDC_Transmit_FS>
 800902e:	f001 b8e3 	b.w	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "configure", strlen("configure")) == 0)
 8009032:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009036:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800903a:	2209      	movs	r2, #9
 800903c:	4992      	ldr	r1, [pc, #584]	; (8009288 <Process_Received_Message+0x2f8>)
 800903e:	6818      	ldr	r0, [r3, #0]
 8009040:	f001 fd2b 	bl	800aa9a <strncmp>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	f040 8144 	bne.w	80092d4 <Process_Received_Message+0x344>
	{
		sprintf(str1, "User Input: Configure\r\n");
 800904c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009050:	3b34      	subs	r3, #52	; 0x34
 8009052:	498e      	ldr	r1, [pc, #568]	; (800928c <Process_Received_Message+0x2fc>)
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fcf1 	bl	800aa3c <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Configure:"
 800905a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800905e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009062:	498b      	ldr	r1, [pc, #556]	; (8009290 <Process_Received_Message+0x300>)
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f001 fd2d 	bl	800aac4 <strtok>
 800906a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800906e:	f103 0318 	add.w	r3, r3, #24
 8009072:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[mode]"
 8009074:	4987      	ldr	r1, [pc, #540]	; (8009294 <Process_Received_Message+0x304>)
 8009076:	2000      	movs	r0, #0
 8009078:	f001 fd24 	bl	800aac4 <strtok>
 800907c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009080:	f103 0318 	add.w	r3, r3, #24
 8009084:	6018      	str	r0, [r3, #0]
		if (strncmp(Token, "transmit", strlen("transmit")) == 0)
 8009086:	2208      	movs	r2, #8
 8009088:	4983      	ldr	r1, [pc, #524]	; (8009298 <Process_Received_Message+0x308>)
 800908a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800908e:	f103 0318 	add.w	r3, r3, #24
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	f001 fd01 	bl	800aa9a <strncmp>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d14f      	bne.n	800913e <Process_Received_Message+0x1ae>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 800909e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80090a2:	3b0c      	subs	r3, #12
 80090a4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80090a8:	f102 0218 	add.w	r2, r2, #24
 80090ac:	6812      	ldr	r2, [r2, #0]
 80090ae:	497b      	ldr	r1, [pc, #492]	; (800929c <Process_Received_Message+0x30c>)
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 fcc3 	bl	800aa3c <siprintf>
			sprintf(str3, "Configured the CC1200 with Transmit Settings\r\n");
 80090b6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80090ba:	3b24      	subs	r3, #36	; 0x24
 80090bc:	4978      	ldr	r1, [pc, #480]	; (80092a0 <Process_Received_Message+0x310>)
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fcbc 	bl	800aa3c <siprintf>
			check = CC1200_Configure(&SPI_Info, Transmit_Register_Settings, Transmit_Extended_Register_Settings);
 80090c4:	4a77      	ldr	r2, [pc, #476]	; (80092a4 <Process_Received_Message+0x314>)
 80090c6:	4978      	ldr	r1, [pc, #480]	; (80092a8 <Process_Received_Message+0x318>)
 80090c8:	486d      	ldr	r0, [pc, #436]	; (8009280 <Process_Received_Message+0x2f0>)
 80090ca:	f7f7 fa02 	bl	80004d2 <CC1200_Configure>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80090d4:	f102 0217 	add.w	r2, r2, #23
 80090d8:	7013      	strb	r3, [r2, #0]
			if (check == 1)
 80090da:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80090de:	f103 0317 	add.w	r3, r3, #23
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d107      	bne.n	80090f8 <Process_Received_Message+0x168>
			{
				sprintf(str4, "Error Occurred\r\n");
 80090e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80090ec:	3b3c      	subs	r3, #60	; 0x3c
 80090ee:	496f      	ldr	r1, [pc, #444]	; (80092ac <Process_Received_Message+0x31c>)
 80090f0:	4618      	mov	r0, r3
 80090f2:	f001 fca3 	bl	800aa3c <siprintf>
 80090f6:	e006      	b.n	8009106 <Process_Received_Message+0x176>
			}
			else // check == 0
			{
				sprintf(str4, "No Error Occurred\r\n");
 80090f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80090fc:	3b3c      	subs	r3, #60	; 0x3c
 80090fe:	496c      	ldr	r1, [pc, #432]	; (80092b0 <Process_Received_Message+0x320>)
 8009100:	4618      	mov	r0, r3
 8009102:	f001 fc9b 	bl	800aa3c <siprintf>
			}
			Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4); // include str4
 8009106:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800910a:	390c      	subs	r1, #12
 800910c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009110:	3a34      	subs	r2, #52	; 0x34
 8009112:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009116:	381c      	subs	r0, #28
 8009118:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800911c:	3b3c      	subs	r3, #60	; 0x3c
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009124:	3b24      	subs	r3, #36	; 0x24
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	460b      	mov	r3, r1
 800912a:	4962      	ldr	r1, [pc, #392]	; (80092b4 <Process_Received_Message+0x324>)
 800912c:	f001 fc86 	bl	800aa3c <siprintf>
 8009130:	4603      	mov	r3, r0
 8009132:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009136:	f102 021e 	add.w	r2, r2, #30
 800913a:	8013      	strh	r3, [r2, #0]
 800913c:	e085      	b.n	800924a <Process_Received_Message+0x2ba>
		}
		else if (strncmp(Token, "receive", strlen("receive")) == 0)
 800913e:	2207      	movs	r2, #7
 8009140:	495d      	ldr	r1, [pc, #372]	; (80092b8 <Process_Received_Message+0x328>)
 8009142:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009146:	f103 0318 	add.w	r3, r3, #24
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	f001 fca5 	bl	800aa9a <strncmp>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d14f      	bne.n	80091f6 <Process_Received_Message+0x266>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 8009156:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800915a:	3b0c      	subs	r3, #12
 800915c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009160:	f102 0218 	add.w	r2, r2, #24
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	494d      	ldr	r1, [pc, #308]	; (800929c <Process_Received_Message+0x30c>)
 8009168:	4618      	mov	r0, r3
 800916a:	f001 fc67 	bl	800aa3c <siprintf>
			sprintf(str3, "Configured the CC1200 with Receive Settings\r\n");
 800916e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009172:	3b24      	subs	r3, #36	; 0x24
 8009174:	4951      	ldr	r1, [pc, #324]	; (80092bc <Process_Received_Message+0x32c>)
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fc60 	bl	800aa3c <siprintf>
			check = CC1200_Configure(&SPI_Info, Receive_Register_Settings, Receive_Extended_Register_Settings);
 800917c:	4a50      	ldr	r2, [pc, #320]	; (80092c0 <Process_Received_Message+0x330>)
 800917e:	4951      	ldr	r1, [pc, #324]	; (80092c4 <Process_Received_Message+0x334>)
 8009180:	483f      	ldr	r0, [pc, #252]	; (8009280 <Process_Received_Message+0x2f0>)
 8009182:	f7f7 f9a6 	bl	80004d2 <CC1200_Configure>
 8009186:	4603      	mov	r3, r0
 8009188:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800918c:	f102 0217 	add.w	r2, r2, #23
 8009190:	7013      	strb	r3, [r2, #0]
			if (check == 1)
 8009192:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009196:	f103 0317 	add.w	r3, r3, #23
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d107      	bne.n	80091b0 <Process_Received_Message+0x220>
			{
				sprintf(str4, "Error Occurred\r\n");
 80091a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80091a4:	3b3c      	subs	r3, #60	; 0x3c
 80091a6:	4941      	ldr	r1, [pc, #260]	; (80092ac <Process_Received_Message+0x31c>)
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 fc47 	bl	800aa3c <siprintf>
 80091ae:	e006      	b.n	80091be <Process_Received_Message+0x22e>
			}
			else // check == 0
			{
				sprintf(str4, "No Error Occurred\r\n");
 80091b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80091b4:	3b3c      	subs	r3, #60	; 0x3c
 80091b6:	493e      	ldr	r1, [pc, #248]	; (80092b0 <Process_Received_Message+0x320>)
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 fc3f 	bl	800aa3c <siprintf>
			}
			Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4); // include str4
 80091be:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80091c2:	390c      	subs	r1, #12
 80091c4:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80091c8:	3a34      	subs	r2, #52	; 0x34
 80091ca:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80091ce:	381c      	subs	r0, #28
 80091d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80091d4:	3b3c      	subs	r3, #60	; 0x3c
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091dc:	3b24      	subs	r3, #36	; 0x24
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	460b      	mov	r3, r1
 80091e2:	4934      	ldr	r1, [pc, #208]	; (80092b4 <Process_Received_Message+0x324>)
 80091e4:	f001 fc2a 	bl	800aa3c <siprintf>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80091ee:	f102 021e 	add.w	r2, r2, #30
 80091f2:	8013      	strh	r3, [r2, #0]
 80091f4:	e029      	b.n	800924a <Process_Received_Message+0x2ba>
		}
		else
		{
			sprintf(str2, "Invalid Mode: %s\r\n", Token);
 80091f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80091fa:	3b0c      	subs	r3, #12
 80091fc:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009200:	f102 0218 	add.w	r2, r2, #24
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	4930      	ldr	r1, [pc, #192]	; (80092c8 <Process_Received_Message+0x338>)
 8009208:	4618      	mov	r0, r3
 800920a:	f001 fc17 	bl	800aa3c <siprintf>
			sprintf(str3, "Could Not Configure the CC1200\r\n");
 800920e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009212:	3b24      	subs	r3, #36	; 0x24
 8009214:	492d      	ldr	r1, [pc, #180]	; (80092cc <Process_Received_Message+0x33c>)
 8009216:	4618      	mov	r0, r3
 8009218:	f001 fc10 	bl	800aa3c <siprintf>
			Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 800921c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009220:	390c      	subs	r1, #12
 8009222:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009226:	3a34      	subs	r2, #52	; 0x34
 8009228:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800922c:	381c      	subs	r0, #28
 800922e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009232:	3b24      	subs	r3, #36	; 0x24
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	460b      	mov	r3, r1
 8009238:	4925      	ldr	r1, [pc, #148]	; (80092d0 <Process_Received_Message+0x340>)
 800923a:	f001 fbff 	bl	800aa3c <siprintf>
 800923e:	4603      	mov	r3, r0
 8009240:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009244:	f102 021e 	add.w	r2, r2, #30
 8009248:	8013      	strh	r3, [r2, #0]
		}

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800924a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800924e:	f103 031e 	add.w	r3, r3, #30
 8009252:	881a      	ldrh	r2, [r3, #0]
 8009254:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009258:	3b1c      	subs	r3, #28
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fe71 	bl	8008f44 <CDC_Transmit_FS>
 8009262:	f000 bfc9 	b.w	800a1f8 <Process_Received_Message+0x1268>
 8009266:	bf00      	nop
 8009268:	0800c058 	.word	0x0800c058
 800926c:	0800c060 	.word	0x0800c060
 8009270:	0800c074 	.word	0x0800c074
 8009274:	200004c4 	.word	0x200004c4
 8009278:	40020400 	.word	0x40020400
 800927c:	200005b0 	.word	0x200005b0
 8009280:	200005a0 	.word	0x200005a0
 8009284:	0800c09c 	.word	0x0800c09c
 8009288:	0800c0a4 	.word	0x0800c0a4
 800928c:	0800c0b0 	.word	0x0800c0b0
 8009290:	0800c0c8 	.word	0x0800c0c8
 8009294:	0800c0cc 	.word	0x0800c0cc
 8009298:	0800c0d0 	.word	0x0800c0d0
 800929c:	0800c0dc 	.word	0x0800c0dc
 80092a0:	0800c0f0 	.word	0x0800c0f0
 80092a4:	20000060 	.word	0x20000060
 80092a8:	20000000 	.word	0x20000000
 80092ac:	0800c120 	.word	0x0800c120
 80092b0:	0800c134 	.word	0x0800c134
 80092b4:	0800c148 	.word	0x0800c148
 80092b8:	0800c154 	.word	0x0800c154
 80092bc:	0800c15c 	.word	0x0800c15c
 80092c0:	200001c4 	.word	0x200001c4
 80092c4:	20000164 	.word	0x20000164
 80092c8:	0800c18c 	.word	0x0800c18c
 80092cc:	0800c1a0 	.word	0x0800c1a0
 80092d0:	0800c1c4 	.word	0x0800c1c4
	}
	else if (strncmp((char*) rx_buffer, "transmit", strlen("transmit")) == 0)
 80092d4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80092d8:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80092dc:	2208      	movs	r2, #8
 80092de:	49b7      	ldr	r1, [pc, #732]	; (80095bc <Process_Received_Message+0x62c>)
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	f001 fbda 	bl	800aa9a <strncmp>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 80ad 	bne.w	8009448 <Process_Received_Message+0x4b8>
	{
		sprintf(str1, "User Input: Transmit\r\n");
 80092ee:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80092f2:	3b34      	subs	r3, #52	; 0x34
 80092f4:	49b2      	ldr	r1, [pc, #712]	; (80095c0 <Process_Received_Message+0x630>)
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 fba0 	bl	800aa3c <siprintf>
		sprintf(str2, "Set the CC1200 into Transmit Mode\r\n");
 80092fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009300:	3b0c      	subs	r3, #12
 8009302:	49b0      	ldr	r1, [pc, #704]	; (80095c4 <Process_Received_Message+0x634>)
 8009304:	4618      	mov	r0, r3
 8009306:	f001 fb99 	bl	800aa3c <siprintf>
		sprintf(str3, "Transmitted the Following Message: ");
 800930a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800930e:	3b24      	subs	r3, #36	; 0x24
 8009310:	49ad      	ldr	r1, [pc, #692]	; (80095c8 <Process_Received_Message+0x638>)
 8009312:	4618      	mov	r0, r3
 8009314:	f001 fb92 	bl	800aa3c <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Transmit:"
 8009318:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800931c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009320:	49aa      	ldr	r1, [pc, #680]	; (80095cc <Process_Received_Message+0x63c>)
 8009322:	6818      	ldr	r0, [r3, #0]
 8009324:	f001 fbce 	bl	800aac4 <strtok>
 8009328:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800932c:	f103 0318 	add.w	r3, r3, #24
 8009330:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 8009332:	49a7      	ldr	r1, [pc, #668]	; (80095d0 <Process_Received_Message+0x640>)
 8009334:	2000      	movs	r0, #0
 8009336:	f001 fbc5 	bl	800aac4 <strtok>
 800933a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800933e:	f103 0318 	add.w	r3, r3, #24
 8009342:	6018      	str	r0, [r3, #0]
		TX_Packet_Length = strlen(Token);
 8009344:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009348:	f103 0318 	add.w	r3, r3, #24
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f7f6 ff15 	bl	800017c <strlen>
 8009352:	4603      	mov	r3, r0
 8009354:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009358:	f102 0215 	add.w	r2, r2, #21
 800935c:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "%s\r\n", Token);
 800935e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009362:	3b3c      	subs	r3, #60	; 0x3c
 8009364:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009368:	f102 0218 	add.w	r2, r2, #24
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	4999      	ldr	r1, [pc, #612]	; (80095d4 <Process_Received_Message+0x644>)
 8009370:	4618      	mov	r0, r3
 8009372:	f001 fb63 	bl	800aa3c <siprintf>
		for (i = 0; i < TX_Packet_Length; i++)
 8009376:	2300      	movs	r3, #0
 8009378:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800937c:	f102 021d 	add.w	r2, r2, #29
 8009380:	7013      	strb	r3, [r2, #0]
 8009382:	e020      	b.n	80093c6 <Process_Received_Message+0x436>
		{
			TX_Packet[i] = (uint8_t) (Token[i]);
 8009384:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009388:	f103 031d 	add.w	r3, r3, #29
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009392:	f102 0218 	add.w	r2, r2, #24
 8009396:	6812      	ldr	r2, [r2, #0]
 8009398:	441a      	add	r2, r3
 800939a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800939e:	f103 031d 	add.w	r3, r3, #29
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	7811      	ldrb	r1, [r2, #0]
 80093a6:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 80093aa:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80093ae:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < TX_Packet_Length; i++)
 80093b0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093b4:	f103 031d 	add.w	r3, r3, #29
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80093c0:	f102 021d 	add.w	r2, r2, #29
 80093c4:	7013      	strb	r3, [r2, #0]
 80093c6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093ca:	f103 031d 	add.w	r3, r3, #29
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093d4:	f103 0315 	add.w	r3, r3, #21
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d3d2      	bcc.n	8009384 <Process_Received_Message+0x3f4>
		}
		CC1200_Transmit(&SPI_Info, TX_Packet, TX_Packet_Length);
 80093de:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80093e2:	f103 0315 	add.w	r3, r3, #21
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	f107 0320 	add.w	r3, r7, #32
 80093ec:	3b14      	subs	r3, #20
 80093ee:	4619      	mov	r1, r3
 80093f0:	4879      	ldr	r0, [pc, #484]	; (80095d8 <Process_Received_Message+0x648>)
 80093f2:	f7f7 fa3d 	bl	8000870 <CC1200_Transmit>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 80093f6:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80093fa:	390c      	subs	r1, #12
 80093fc:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009400:	3a34      	subs	r2, #52	; 0x34
 8009402:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009406:	381c      	subs	r0, #28
 8009408:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800940c:	3b3c      	subs	r3, #60	; 0x3c
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009414:	3b24      	subs	r3, #36	; 0x24
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	460b      	mov	r3, r1
 800941a:	4970      	ldr	r1, [pc, #448]	; (80095dc <Process_Received_Message+0x64c>)
 800941c:	f001 fb0e 	bl	800aa3c <siprintf>
 8009420:	4603      	mov	r3, r0
 8009422:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009426:	f102 021e 	add.w	r2, r2, #30
 800942a:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800942c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009430:	f103 031e 	add.w	r3, r3, #30
 8009434:	881a      	ldrh	r2, [r3, #0]
 8009436:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800943a:	3b1c      	subs	r3, #28
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff fd80 	bl	8008f44 <CDC_Transmit_FS>
 8009444:	f000 bed8 	b.w	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "receive", strlen("receive")) == 0)
 8009448:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800944c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009450:	2207      	movs	r2, #7
 8009452:	4963      	ldr	r1, [pc, #396]	; (80095e0 <Process_Received_Message+0x650>)
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f001 fb20 	bl	800aa9a <strncmp>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d131      	bne.n	80094c4 <Process_Received_Message+0x534>
	{
		sprintf(str1, "User Input: Receive\r\n");
 8009460:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009464:	3b34      	subs	r3, #52	; 0x34
 8009466:	495f      	ldr	r1, [pc, #380]	; (80095e4 <Process_Received_Message+0x654>)
 8009468:	4618      	mov	r0, r3
 800946a:	f001 fae7 	bl	800aa3c <siprintf>
		sprintf(str2, "Set the CC1200 into Receive Mode\r\n");
 800946e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009472:	3b0c      	subs	r3, #12
 8009474:	495c      	ldr	r1, [pc, #368]	; (80095e8 <Process_Received_Message+0x658>)
 8009476:	4618      	mov	r0, r3
 8009478:	f001 fae0 	bl	800aa3c <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // enable RX
 800947c:	2134      	movs	r1, #52	; 0x34
 800947e:	4856      	ldr	r0, [pc, #344]	; (80095d8 <Process_Received_Message+0x648>)
 8009480:	f7f7 f9c3 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8009484:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009488:	3b0c      	subs	r3, #12
 800948a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800948e:	3a34      	subs	r2, #52	; 0x34
 8009490:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009494:	381c      	subs	r0, #28
 8009496:	4955      	ldr	r1, [pc, #340]	; (80095ec <Process_Received_Message+0x65c>)
 8009498:	f001 fad0 	bl	800aa3c <siprintf>
 800949c:	4603      	mov	r3, r0
 800949e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80094a2:	f102 021e 	add.w	r2, r2, #30
 80094a6:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80094a8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80094ac:	f103 031e 	add.w	r3, r3, #30
 80094b0:	881a      	ldrh	r2, [r3, #0]
 80094b2:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80094b6:	3b1c      	subs	r3, #28
 80094b8:	4611      	mov	r1, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fd42 	bl	8008f44 <CDC_Transmit_FS>
 80094c0:	f000 be9a 	b.w	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "read rx fifo", strlen("read rx fifo")) == 0)
 80094c4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80094c8:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80094cc:	220c      	movs	r2, #12
 80094ce:	4948      	ldr	r1, [pc, #288]	; (80095f0 <Process_Received_Message+0x660>)
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	f001 fae2 	bl	800aa9a <strncmp>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f040 8091 	bne.w	8009600 <Process_Received_Message+0x670>
	{

		check = CC1200_Receive(&SPI_Info, RX_Packet);
 80094de:	4945      	ldr	r1, [pc, #276]	; (80095f4 <Process_Received_Message+0x664>)
 80094e0:	483d      	ldr	r0, [pc, #244]	; (80095d8 <Process_Received_Message+0x648>)
 80094e2:	f7f7 fa16 	bl	8000912 <CC1200_Receive>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80094ec:	f102 0217 	add.w	r2, r2, #23
 80094f0:	7013      	strb	r3, [r2, #0]

		if (check) // check == 1
 80094f2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80094f6:	f103 0317 	add.w	r3, r3, #23
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d02a      	beq.n	8009556 <Process_Received_Message+0x5c6>
		{
			sprintf(str1, "RX FIFO Empty!\r\n");
 8009500:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009504:	3b34      	subs	r3, #52	; 0x34
 8009506:	493c      	ldr	r1, [pc, #240]	; (80095f8 <Process_Received_Message+0x668>)
 8009508:	4618      	mov	r0, r3
 800950a:	f001 fa97 	bl	800aa3c <siprintf>
			strcat(Message, str1);
 800950e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009512:	3a34      	subs	r2, #52	; 0x34
 8009514:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009518:	3b1c      	subs	r3, #28
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f001 faad 	bl	800aa7c <strcat>
			Message_Length = strlen(Message);
 8009522:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009526:	3b1c      	subs	r3, #28
 8009528:	4618      	mov	r0, r3
 800952a:	f7f6 fe27 	bl	800017c <strlen>
 800952e:	4603      	mov	r3, r0
 8009530:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009534:	f102 021e 	add.w	r2, r2, #30
 8009538:	8013      	strh	r3, [r2, #0]
			CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800953a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800953e:	f103 031e 	add.w	r3, r3, #30
 8009542:	881a      	ldrh	r2, [r3, #0]
 8009544:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009548:	3b1c      	subs	r3, #28
 800954a:	4611      	mov	r1, r2
 800954c:	4618      	mov	r0, r3
 800954e:	f7ff fcf9 	bl	8008f44 <CDC_Transmit_FS>
 8009552:	f000 be51 	b.w	800a1f8 <Process_Received_Message+0x1268>
		}
		else // check == 0
		{
			sprintf(Message, "Received the Following Message: ");
 8009556:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800955a:	3b1c      	subs	r3, #28
 800955c:	4927      	ldr	r1, [pc, #156]	; (80095fc <Process_Received_Message+0x66c>)
 800955e:	4618      	mov	r0, r3
 8009560:	f001 fa6c 	bl	800aa3c <siprintf>
			sprintf(str1, "%s\r\n", (char*) RX_Packet);
 8009564:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009568:	3b34      	subs	r3, #52	; 0x34
 800956a:	4a22      	ldr	r2, [pc, #136]	; (80095f4 <Process_Received_Message+0x664>)
 800956c:	4919      	ldr	r1, [pc, #100]	; (80095d4 <Process_Received_Message+0x644>)
 800956e:	4618      	mov	r0, r3
 8009570:	f001 fa64 	bl	800aa3c <siprintf>
			strcat(Message, str1);
 8009574:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009578:	3a34      	subs	r2, #52	; 0x34
 800957a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800957e:	3b1c      	subs	r3, #28
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fa7a 	bl	800aa7c <strcat>
			Message_Length = strlen(Message);
 8009588:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800958c:	3b1c      	subs	r3, #28
 800958e:	4618      	mov	r0, r3
 8009590:	f7f6 fdf4 	bl	800017c <strlen>
 8009594:	4603      	mov	r3, r0
 8009596:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800959a:	f102 021e 	add.w	r2, r2, #30
 800959e:	8013      	strh	r3, [r2, #0]

			CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80095a0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80095a4:	f103 031e 	add.w	r3, r3, #30
 80095a8:	881a      	ldrh	r2, [r3, #0]
 80095aa:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80095ae:	3b1c      	subs	r3, #28
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff fcc6 	bl	8008f44 <CDC_Transmit_FS>
 80095b8:	f000 be1e 	b.w	800a1f8 <Process_Received_Message+0x1268>
 80095bc:	0800c0d0 	.word	0x0800c0d0
 80095c0:	0800c1cc 	.word	0x0800c1cc
 80095c4:	0800c1e4 	.word	0x0800c1e4
 80095c8:	0800c208 	.word	0x0800c208
 80095cc:	0800c0c8 	.word	0x0800c0c8
 80095d0:	0800c0cc 	.word	0x0800c0cc
 80095d4:	0800c22c 	.word	0x0800c22c
 80095d8:	200005a0 	.word	0x200005a0
 80095dc:	0800c148 	.word	0x0800c148
 80095e0:	0800c154 	.word	0x0800c154
 80095e4:	0800c234 	.word	0x0800c234
 80095e8:	0800c24c 	.word	0x0800c24c
 80095ec:	0800c09c 	.word	0x0800c09c
 80095f0:	0800c270 	.word	0x0800c270
 80095f4:	200005b4 	.word	0x200005b4
 80095f8:	0800c280 	.word	0x0800c280
 80095fc:	0800c294 	.word	0x0800c294
		}

	}
	else if (strncmp((char*) rx_buffer, "exit", strlen("exit")) == 0)
 8009600:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009604:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009608:	2204      	movs	r2, #4
 800960a:	49c4      	ldr	r1, [pc, #784]	; (800991c <Process_Received_Message+0x98c>)
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f001 fa44 	bl	800aa9a <strncmp>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d13d      	bne.n	8009694 <Process_Received_Message+0x704>
	{
		sprintf(str1, "User Input: Exit\r\n");
 8009618:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800961c:	3b34      	subs	r3, #52	; 0x34
 800961e:	49c0      	ldr	r1, [pc, #768]	; (8009920 <Process_Received_Message+0x990>)
 8009620:	4618      	mov	r0, r3
 8009622:	f001 fa0b 	bl	800aa3c <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8009626:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800962a:	3b0c      	subs	r3, #12
 800962c:	49bd      	ldr	r1, [pc, #756]	; (8009924 <Process_Received_Message+0x994>)
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fa04 	bl	800aa3c <siprintf>
		sprintf(str3, "Register Values Can Be Changed\r\n");
 8009634:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009638:	3b24      	subs	r3, #36	; 0x24
 800963a:	49bb      	ldr	r1, [pc, #748]	; (8009928 <Process_Received_Message+0x998>)
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f9fd 	bl	800aa3c <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SIDLE);
 8009642:	2136      	movs	r1, #54	; 0x36
 8009644:	48b9      	ldr	r0, [pc, #740]	; (800992c <Process_Received_Message+0x99c>)
 8009646:	f7f7 f8e0 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 800964a:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800964e:	390c      	subs	r1, #12
 8009650:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009654:	3a34      	subs	r2, #52	; 0x34
 8009656:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800965a:	381c      	subs	r0, #28
 800965c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009660:	3b24      	subs	r3, #36	; 0x24
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	460b      	mov	r3, r1
 8009666:	49b2      	ldr	r1, [pc, #712]	; (8009930 <Process_Received_Message+0x9a0>)
 8009668:	f001 f9e8 	bl	800aa3c <siprintf>
 800966c:	4603      	mov	r3, r0
 800966e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009672:	f102 021e 	add.w	r2, r2, #30
 8009676:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009678:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800967c:	f103 031e 	add.w	r3, r3, #30
 8009680:	881a      	ldrh	r2, [r3, #0]
 8009682:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009686:	3b1c      	subs	r3, #28
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7ff fc5a 	bl	8008f44 <CDC_Transmit_FS>
 8009690:	f000 bdb2 	b.w	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "reset", strlen("reset")) == 0)
 8009694:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009698:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800969c:	2205      	movs	r2, #5
 800969e:	49a5      	ldr	r1, [pc, #660]	; (8009934 <Process_Received_Message+0x9a4>)
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f001 f9fa 	bl	800aa9a <strncmp>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d13d      	bne.n	8009728 <Process_Received_Message+0x798>
	{
		sprintf(str1, "User Input: Reset\r\n");
 80096ac:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80096b0:	3b34      	subs	r3, #52	; 0x34
 80096b2:	49a1      	ldr	r1, [pc, #644]	; (8009938 <Process_Received_Message+0x9a8>)
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 f9c1 	bl	800aa3c <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 80096ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80096be:	3b0c      	subs	r3, #12
 80096c0:	4998      	ldr	r1, [pc, #608]	; (8009924 <Process_Received_Message+0x994>)
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 f9ba 	bl	800aa3c <siprintf>
		sprintf(str3, "Register Values Reset to Default Values\r\n");
 80096c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80096cc:	3b24      	subs	r3, #36	; 0x24
 80096ce:	499b      	ldr	r1, [pc, #620]	; (800993c <Process_Received_Message+0x9ac>)
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 f9b3 	bl	800aa3c <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES);
 80096d6:	2130      	movs	r1, #48	; 0x30
 80096d8:	4894      	ldr	r0, [pc, #592]	; (800992c <Process_Received_Message+0x99c>)
 80096da:	f7f7 f896 	bl	800080a <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 80096de:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80096e2:	390c      	subs	r1, #12
 80096e4:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80096e8:	3a34      	subs	r2, #52	; 0x34
 80096ea:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80096ee:	381c      	subs	r0, #28
 80096f0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80096f4:	3b24      	subs	r3, #36	; 0x24
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	460b      	mov	r3, r1
 80096fa:	498d      	ldr	r1, [pc, #564]	; (8009930 <Process_Received_Message+0x9a0>)
 80096fc:	f001 f99e 	bl	800aa3c <siprintf>
 8009700:	4603      	mov	r3, r0
 8009702:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009706:	f102 021e 	add.w	r2, r2, #30
 800970a:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800970c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009710:	f103 031e 	add.w	r3, r3, #30
 8009714:	881a      	ldrh	r2, [r3, #0]
 8009716:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800971a:	3b1c      	subs	r3, #28
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff fc10 	bl	8008f44 <CDC_Transmit_FS>
 8009724:	f000 bd68 	b.w	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "status", strlen("status")) == 0)
 8009728:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800972c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009730:	2206      	movs	r2, #6
 8009732:	4983      	ldr	r1, [pc, #524]	; (8009940 <Process_Received_Message+0x9b0>)
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	f001 f9b0 	bl	800aa9a <strncmp>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d140      	bne.n	80097c2 <Process_Received_Message+0x832>
	{
		sprintf(str1, "User Input: Status\r\n");
 8009740:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009744:	3b34      	subs	r3, #52	; 0x34
 8009746:	497f      	ldr	r1, [pc, #508]	; (8009944 <Process_Received_Message+0x9b4>)
 8009748:	4618      	mov	r0, r3
 800974a:	f001 f977 	bl	800aa3c <siprintf>
		sprintf(str2, "CC1200 Status: ");
 800974e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009752:	3b0c      	subs	r3, #12
 8009754:	497c      	ldr	r1, [pc, #496]	; (8009948 <Process_Received_Message+0x9b8>)
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f970 	bl	800aa3c <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 800975c:	213d      	movs	r1, #61	; 0x3d
 800975e:	4873      	ldr	r0, [pc, #460]	; (800992c <Process_Received_Message+0x99c>)
 8009760:	f7f7 f853 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str3, "0X%02X\r\n", MISO_Data[0]);
 8009764:	4b79      	ldr	r3, [pc, #484]	; (800994c <Process_Received_Message+0x9bc>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800976e:	3b24      	subs	r3, #36	; 0x24
 8009770:	4977      	ldr	r1, [pc, #476]	; (8009950 <Process_Received_Message+0x9c0>)
 8009772:	4618      	mov	r0, r3
 8009774:	f001 f962 	bl	800aa3c <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8009778:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800977c:	390c      	subs	r1, #12
 800977e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009782:	3a34      	subs	r2, #52	; 0x34
 8009784:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009788:	381c      	subs	r0, #28
 800978a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800978e:	3b24      	subs	r3, #36	; 0x24
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	460b      	mov	r3, r1
 8009794:	4966      	ldr	r1, [pc, #408]	; (8009930 <Process_Received_Message+0x9a0>)
 8009796:	f001 f951 	bl	800aa3c <siprintf>
 800979a:	4603      	mov	r3, r0
 800979c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80097a0:	f102 021e 	add.w	r2, r2, #30
 80097a4:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80097a6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 80097aa:	f103 031e 	add.w	r3, r3, #30
 80097ae:	881a      	ldrh	r2, [r3, #0]
 80097b0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80097b4:	3b1c      	subs	r3, #28
 80097b6:	4611      	mov	r1, r2
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff fbc3 	bl	8008f44 <CDC_Transmit_FS>
 80097be:	f000 bd1b 	b.w	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "command", strlen("command")) == 0)
 80097c2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80097c6:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80097ca:	2207      	movs	r2, #7
 80097cc:	4961      	ldr	r1, [pc, #388]	; (8009954 <Process_Received_Message+0x9c4>)
 80097ce:	6818      	ldr	r0, [r3, #0]
 80097d0:	f001 f963 	bl	800aa9a <strncmp>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f040 80d0 	bne.w	800997c <Process_Received_Message+0x9ec>
	{
		sprintf(str1, "User Input: Command\r\n");
 80097dc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80097e0:	3b34      	subs	r3, #52	; 0x34
 80097e2:	495d      	ldr	r1, [pc, #372]	; (8009958 <Process_Received_Message+0x9c8>)
 80097e4:	4618      	mov	r0, r3
 80097e6:	f001 f929 	bl	800aa3c <siprintf>
		sprintf(str2, "Issued the Following Command: ");
 80097ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80097ee:	3b0c      	subs	r3, #12
 80097f0:	495a      	ldr	r1, [pc, #360]	; (800995c <Process_Received_Message+0x9cc>)
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 f922 	bl	800aa3c <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Command:"
 80097f8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80097fc:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009800:	4957      	ldr	r1, [pc, #348]	; (8009960 <Process_Received_Message+0x9d0>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f001 f95e 	bl	800aac4 <strtok>
 8009808:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800980c:	f103 0318 	add.w	r3, r3, #24
 8009810:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // second token "[command strobe]"
 8009812:	4954      	ldr	r1, [pc, #336]	; (8009964 <Process_Received_Message+0x9d4>)
 8009814:	2000      	movs	r0, #0
 8009816:	f001 f955 	bl	800aac4 <strtok>
 800981a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800981e:	f103 0318 	add.w	r3, r3, #24
 8009822:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009824:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009828:	3b24      	subs	r3, #36	; 0x24
 800982a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800982e:	f102 0218 	add.w	r2, r2, #24
 8009832:	6812      	ldr	r2, [r2, #0]
 8009834:	494c      	ldr	r1, [pc, #304]	; (8009968 <Process_Received_Message+0x9d8>)
 8009836:	4618      	mov	r0, r3
 8009838:	f001 f900 	bl	800aa3c <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800983c:	2210      	movs	r2, #16
 800983e:	2100      	movs	r1, #0
 8009840:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009844:	f103 0318 	add.w	r3, r3, #24
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	f001 fa13 	bl	800ac74 <strtol>
 800984e:	4603      	mov	r3, r0
 8009850:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009854:	f102 021c 	add.w	r2, r2, #28
 8009858:	7013      	strb	r3, [r2, #0]
		check = CC1200_Command_Strobe(&SPI_Info, Register_Address); // issue command
 800985a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800985e:	f103 031c 	add.w	r3, r3, #28
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	4619      	mov	r1, r3
 8009866:	4831      	ldr	r0, [pc, #196]	; (800992c <Process_Received_Message+0x99c>)
 8009868:	f7f6 ffcf 	bl	800080a <CC1200_Command_Strobe>
 800986c:	4603      	mov	r3, r0
 800986e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009872:	f102 0217 	add.w	r2, r2, #23
 8009876:	7013      	strb	r3, [r2, #0]
		if (check == 1)
 8009878:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800987c:	f103 0317 	add.w	r3, r3, #23
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d107      	bne.n	8009896 <Process_Received_Message+0x906>
		{
			sprintf(str4, "Invalid Command\r\n");
 8009886:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800988a:	3b3c      	subs	r3, #60	; 0x3c
 800988c:	4937      	ldr	r1, [pc, #220]	; (800996c <Process_Received_Message+0x9dc>)
 800988e:	4618      	mov	r0, r3
 8009890:	f001 f8d4 	bl	800aa3c <siprintf>
 8009894:	e006      	b.n	80098a4 <Process_Received_Message+0x914>
		}
		else // check == 0
		{
			sprintf(str4, "Valid Command\r\n");
 8009896:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800989a:	3b3c      	subs	r3, #60	; 0x3c
 800989c:	4934      	ldr	r1, [pc, #208]	; (8009970 <Process_Received_Message+0x9e0>)
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 f8cc 	bl	800aa3c <siprintf>
		}
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 80098a4:	213d      	movs	r1, #61	; 0x3d
 80098a6:	4821      	ldr	r0, [pc, #132]	; (800992c <Process_Received_Message+0x99c>)
 80098a8:	f7f6 ffaf 	bl	800080a <CC1200_Command_Strobe>
		sprintf(str5, "CC1200 State: 0X%02X\r\n", MISO_Data[0]);
 80098ac:	4b27      	ldr	r3, [pc, #156]	; (800994c <Process_Received_Message+0x9bc>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80098b6:	3b14      	subs	r3, #20
 80098b8:	492e      	ldr	r1, [pc, #184]	; (8009974 <Process_Received_Message+0x9e4>)
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 f8be 	bl	800aa3c <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 80098c0:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80098c4:	390c      	subs	r1, #12
 80098c6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80098ca:	3a34      	subs	r2, #52	; 0x34
 80098cc:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80098d0:	381c      	subs	r0, #28
 80098d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80098d6:	3b14      	subs	r3, #20
 80098d8:	9302      	str	r3, [sp, #8]
 80098da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80098de:	3b3c      	subs	r3, #60	; 0x3c
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80098e6:	3b24      	subs	r3, #36	; 0x24
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	460b      	mov	r3, r1
 80098ec:	4922      	ldr	r1, [pc, #136]	; (8009978 <Process_Received_Message+0x9e8>)
 80098ee:	f001 f8a5 	bl	800aa3c <siprintf>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 80098f8:	f102 021e 	add.w	r2, r2, #30
 80098fc:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80098fe:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009902:	f103 031e 	add.w	r3, r3, #30
 8009906:	881a      	ldrh	r2, [r3, #0]
 8009908:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800990c:	3b1c      	subs	r3, #28
 800990e:	4611      	mov	r1, r2
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fb17 	bl	8008f44 <CDC_Transmit_FS>
 8009916:	f000 bc6f 	b.w	800a1f8 <Process_Received_Message+0x1268>
 800991a:	bf00      	nop
 800991c:	0800c2b8 	.word	0x0800c2b8
 8009920:	0800c2c0 	.word	0x0800c2c0
 8009924:	0800c2d4 	.word	0x0800c2d4
 8009928:	0800c2f4 	.word	0x0800c2f4
 800992c:	200005a0 	.word	0x200005a0
 8009930:	0800c1c4 	.word	0x0800c1c4
 8009934:	0800c318 	.word	0x0800c318
 8009938:	0800c320 	.word	0x0800c320
 800993c:	0800c334 	.word	0x0800c334
 8009940:	0800c360 	.word	0x0800c360
 8009944:	0800c368 	.word	0x0800c368
 8009948:	0800c380 	.word	0x0800c380
 800994c:	200005b0 	.word	0x200005b0
 8009950:	0800c390 	.word	0x0800c390
 8009954:	0800c39c 	.word	0x0800c39c
 8009958:	0800c3a4 	.word	0x0800c3a4
 800995c:	0800c3bc 	.word	0x0800c3bc
 8009960:	0800c0c8 	.word	0x0800c0c8
 8009964:	0800c0cc 	.word	0x0800c0cc
 8009968:	0800c22c 	.word	0x0800c22c
 800996c:	0800c3dc 	.word	0x0800c3dc
 8009970:	0800c3f0 	.word	0x0800c3f0
 8009974:	0800c400 	.word	0x0800c400
 8009978:	0800c418 	.word	0x0800c418
	}
	else if (strncmp((char*) rx_buffer, "print registers", strlen("print registers")) == 0)
 800997c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009980:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009984:	220f      	movs	r2, #15
 8009986:	498c      	ldr	r1, [pc, #560]	; (8009bb8 <Process_Received_Message+0xc28>)
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f001 f886 	bl	800aa9a <strncmp>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	f040 8121 	bne.w	8009bd8 <Process_Received_Message+0xc48>
	{
		sprintf(Message, "User Input: Print Registers\r\n");
 8009996:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800999a:	3b1c      	subs	r3, #28
 800999c:	4987      	ldr	r1, [pc, #540]	; (8009bbc <Process_Received_Message+0xc2c>)
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 f84c 	bl	800aa3c <siprintf>
		strcat(Message, "Register Space\r\n");
 80099a4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80099a8:	3b1c      	subs	r3, #28
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f6 fbe6 	bl	800017c <strlen>
 80099b0:	4603      	mov	r3, r0
 80099b2:	461a      	mov	r2, r3
 80099b4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80099b8:	3b1c      	subs	r3, #28
 80099ba:	4413      	add	r3, r2
 80099bc:	4a80      	ldr	r2, [pc, #512]	; (8009bc0 <Process_Received_Message+0xc30>)
 80099be:	461d      	mov	r5, r3
 80099c0:	4614      	mov	r4, r2
 80099c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099c4:	6028      	str	r0, [r5, #0]
 80099c6:	6069      	str	r1, [r5, #4]
 80099c8:	60aa      	str	r2, [r5, #8]
 80099ca:	60eb      	str	r3, [r5, #12]
 80099cc:	7823      	ldrb	r3, [r4, #0]
 80099ce:	742b      	strb	r3, [r5, #16]
		strcat(Message, "Address; Value\r\n");
 80099d0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80099d4:	3b1c      	subs	r3, #28
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7f6 fbd0 	bl	800017c <strlen>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80099e4:	3b1c      	subs	r3, #28
 80099e6:	4413      	add	r3, r2
 80099e8:	4a76      	ldr	r2, [pc, #472]	; (8009bc4 <Process_Received_Message+0xc34>)
 80099ea:	461d      	mov	r5, r3
 80099ec:	4614      	mov	r4, r2
 80099ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099f0:	6028      	str	r0, [r5, #0]
 80099f2:	6069      	str	r1, [r5, #4]
 80099f4:	60aa      	str	r2, [r5, #8]
 80099f6:	60eb      	str	r3, [r5, #12]
 80099f8:	7823      	ldrb	r3, [r4, #0]
 80099fa:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 80099fc:	2300      	movs	r3, #0
 80099fe:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009a02:	f102 021c 	add.w	r2, r2, #28
 8009a06:	7013      	strb	r3, [r2, #0]
 8009a08:	e034      	b.n	8009a74 <Process_Received_Message+0xae4>
		{

			CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8009a0a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a0e:	f103 031c 	add.w	r3, r3, #28
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	4619      	mov	r1, r3
 8009a16:	486c      	ldr	r0, [pc, #432]	; (8009bc8 <Process_Received_Message+0xc38>)
 8009a18:	f7f6 fe12 	bl	8000640 <CC1200_Read_Single_Register>
			Register_Value = MISO_Data[0];
 8009a1c:	4b6b      	ldr	r3, [pc, #428]	; (8009bcc <Process_Received_Message+0xc3c>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009a24:	f102 0216 	add.w	r2, r2, #22
 8009a28:	7013      	strb	r3, [r2, #0]
			sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 8009a2a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a2e:	f103 031c 	add.w	r3, r3, #28
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a38:	f103 0316 	add.w	r3, r3, #22
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8009a42:	3834      	subs	r0, #52	; 0x34
 8009a44:	4962      	ldr	r1, [pc, #392]	; (8009bd0 <Process_Received_Message+0xc40>)
 8009a46:	f000 fff9 	bl	800aa3c <siprintf>
			strcat(Message, str1);
 8009a4a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009a4e:	3a34      	subs	r2, #52	; 0x34
 8009a50:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009a54:	3b1c      	subs	r3, #28
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f001 f80f 	bl	800aa7c <strcat>
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8009a5e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a62:	f103 031c 	add.w	r3, r3, #28
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009a6e:	f102 021c 	add.w	r2, r2, #28
 8009a72:	7013      	strb	r3, [r2, #0]
 8009a74:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009a78:	f103 031c 	add.w	r3, r3, #28
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a80:	d9c3      	bls.n	8009a0a <Process_Received_Message+0xa7a>
		}
		strcat(Message, "Extended Register Space\r\n");
 8009a82:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009a86:	3b1c      	subs	r3, #28
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f6 fb77 	bl	800017c <strlen>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	461a      	mov	r2, r3
 8009a92:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009a96:	3b1c      	subs	r3, #28
 8009a98:	4413      	add	r3, r2
 8009a9a:	4a4e      	ldr	r2, [pc, #312]	; (8009bd4 <Process_Received_Message+0xc44>)
 8009a9c:	461d      	mov	r5, r3
 8009a9e:	4614      	mov	r4, r2
 8009aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aa2:	6028      	str	r0, [r5, #0]
 8009aa4:	6069      	str	r1, [r5, #4]
 8009aa6:	60aa      	str	r2, [r5, #8]
 8009aa8:	60eb      	str	r3, [r5, #12]
 8009aaa:	cc03      	ldmia	r4!, {r0, r1}
 8009aac:	6128      	str	r0, [r5, #16]
 8009aae:	6169      	str	r1, [r5, #20]
 8009ab0:	8823      	ldrh	r3, [r4, #0]
 8009ab2:	832b      	strh	r3, [r5, #24]
		strcat(Message, "Address; Value\r\n");
 8009ab4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009ab8:	3b1c      	subs	r3, #28
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f6 fb5e 	bl	800017c <strlen>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009ac8:	3b1c      	subs	r3, #28
 8009aca:	4413      	add	r3, r2
 8009acc:	4a3d      	ldr	r2, [pc, #244]	; (8009bc4 <Process_Received_Message+0xc34>)
 8009ace:	461d      	mov	r5, r3
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ad4:	6028      	str	r0, [r5, #0]
 8009ad6:	6069      	str	r1, [r5, #4]
 8009ad8:	60aa      	str	r2, [r5, #8]
 8009ada:	60eb      	str	r3, [r5, #12]
 8009adc:	7823      	ldrb	r3, [r4, #0]
 8009ade:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009ae6:	f102 021c 	add.w	r2, r2, #28
 8009aea:	7013      	strb	r3, [r2, #0]
 8009aec:	e043      	b.n	8009b76 <Process_Received_Message+0xbe6>
		{
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 8009aee:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009af2:	f103 031c 	add.w	r3, r3, #28
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	4619      	mov	r1, r3
 8009afa:	4833      	ldr	r0, [pc, #204]	; (8009bc8 <Process_Received_Message+0xc38>)
 8009afc:	f7f6 fe32 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009b06:	f102 0217 	add.w	r2, r2, #23
 8009b0a:	7013      	strb	r3, [r2, #0]
			if (check == 0)
 8009b0c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b10:	f103 0317 	add.w	r3, r3, #23
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d121      	bne.n	8009b5e <Process_Received_Message+0xbce>
			{
				Register_Value = MISO_Data[0];
 8009b1a:	4b2c      	ldr	r3, [pc, #176]	; (8009bcc <Process_Received_Message+0xc3c>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009b22:	f102 0216 	add.w	r2, r2, #22
 8009b26:	7013      	strb	r3, [r2, #0]
				sprintf(str1, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 8009b28:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b2c:	f103 031c 	add.w	r3, r3, #28
 8009b30:	781a      	ldrb	r2, [r3, #0]
 8009b32:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b36:	f103 0316 	add.w	r3, r3, #22
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8009b40:	3834      	subs	r0, #52	; 0x34
 8009b42:	4923      	ldr	r1, [pc, #140]	; (8009bd0 <Process_Received_Message+0xc40>)
 8009b44:	f000 ff7a 	bl	800aa3c <siprintf>
				strcat(Message, str1);
 8009b48:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009b4c:	3a34      	subs	r2, #52	; 0x34
 8009b4e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009b52:	3b1c      	subs	r3, #28
 8009b54:	4611      	mov	r1, r2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 ff90 	bl	800aa7c <strcat>
 8009b5c:	e000      	b.n	8009b60 <Process_Received_Message+0xbd0>
			}
			else
			{
				continue;
 8009b5e:	bf00      	nop
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 8009b60:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b64:	f103 031c 	add.w	r3, r3, #28
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009b70:	f102 021c 	add.w	r2, r2, #28
 8009b74:	7013      	strb	r3, [r2, #0]
 8009b76:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009b7a:	f103 031c 	add.w	r3, r3, #28
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2bda      	cmp	r3, #218	; 0xda
 8009b82:	d9b4      	bls.n	8009aee <Process_Received_Message+0xb5e>
			}
		}
		Message_Length = strlen(Message);
 8009b84:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009b88:	3b1c      	subs	r3, #28
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f6 faf6 	bl	800017c <strlen>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009b96:	f102 021e 	add.w	r2, r2, #30
 8009b9a:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009b9c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009ba0:	f103 031e 	add.w	r3, r3, #30
 8009ba4:	881a      	ldrh	r2, [r3, #0]
 8009ba6:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009baa:	3b1c      	subs	r3, #28
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff f9c8 	bl	8008f44 <CDC_Transmit_FS>
 8009bb4:	e320      	b.n	800a1f8 <Process_Received_Message+0x1268>
 8009bb6:	bf00      	nop
 8009bb8:	0800c424 	.word	0x0800c424
 8009bbc:	0800c434 	.word	0x0800c434
 8009bc0:	0800c454 	.word	0x0800c454
 8009bc4:	0800c468 	.word	0x0800c468
 8009bc8:	200005a0 	.word	0x200005a0
 8009bcc:	200005b0 	.word	0x200005b0
 8009bd0:	0800c47c 	.word	0x0800c47c
 8009bd4:	0800c490 	.word	0x0800c490
	}
	else if (strncmp((char*) rx_buffer, "write register", strlen("write register")) == 0)
 8009bd8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009bdc:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009be0:	220e      	movs	r2, #14
 8009be2:	49b2      	ldr	r1, [pc, #712]	; (8009eac <Process_Received_Message+0xf1c>)
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	f000 ff58 	bl	800aa9a <strncmp>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f040 80b3 	bne.w	8009d58 <Process_Received_Message+0xdc8>
	{
		sprintf(str1, "User Input: Write Register\r\n");
 8009bf2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009bf6:	3b34      	subs	r3, #52	; 0x34
 8009bf8:	49ad      	ldr	r1, [pc, #692]	; (8009eb0 <Process_Received_Message+0xf20>)
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 ff1e 	bl	800aa3c <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 8009c00:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009c04:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009c08:	49aa      	ldr	r1, [pc, #680]	; (8009eb4 <Process_Received_Message+0xf24>)
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	f000 ff5a 	bl	800aac4 <strtok>
 8009c10:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c14:	f103 0318 	add.w	r3, r3, #24
 8009c18:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 8009c1a:	49a6      	ldr	r1, [pc, #664]	; (8009eb4 <Process_Received_Message+0xf24>)
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f000 ff51 	bl	800aac4 <strtok>
 8009c22:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c26:	f103 0318 	add.w	r3, r3, #24
 8009c2a:	6018      	str	r0, [r3, #0]
		sprintf(str2, "Address to Access: ");
 8009c2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009c30:	3b0c      	subs	r3, #12
 8009c32:	49a1      	ldr	r1, [pc, #644]	; (8009eb8 <Process_Received_Message+0xf28>)
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 ff01 	bl	800aa3c <siprintf>
		Token = strtok(NULL, " "); // third token "[register address]"
 8009c3a:	499e      	ldr	r1, [pc, #632]	; (8009eb4 <Process_Received_Message+0xf24>)
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	f000 ff41 	bl	800aac4 <strtok>
 8009c42:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c46:	f103 0318 	add.w	r3, r3, #24
 8009c4a:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009c4c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009c50:	3b24      	subs	r3, #36	; 0x24
 8009c52:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009c56:	f102 0218 	add.w	r2, r2, #24
 8009c5a:	6812      	ldr	r2, [r2, #0]
 8009c5c:	4997      	ldr	r1, [pc, #604]	; (8009ebc <Process_Received_Message+0xf2c>)
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 feec 	bl	800aa3c <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009c64:	2210      	movs	r2, #16
 8009c66:	2100      	movs	r1, #0
 8009c68:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c6c:	f103 0318 	add.w	r3, r3, #24
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	f000 ffff 	bl	800ac74 <strtol>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009c7c:	f102 021c 	add.w	r2, r2, #28
 8009c80:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 8009c82:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009c86:	3b3c      	subs	r3, #60	; 0x3c
 8009c88:	498d      	ldr	r1, [pc, #564]	; (8009ec0 <Process_Received_Message+0xf30>)
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fed6 	bl	800aa3c <siprintf>
		Token = strtok(NULL, "\r\n"); // fourth token "[register value]"
 8009c90:	498c      	ldr	r1, [pc, #560]	; (8009ec4 <Process_Received_Message+0xf34>)
 8009c92:	2000      	movs	r0, #0
 8009c94:	f000 ff16 	bl	800aac4 <strtok>
 8009c98:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009c9c:	f103 0318 	add.w	r3, r3, #24
 8009ca0:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 8009ca2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009ca6:	3b14      	subs	r3, #20
 8009ca8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009cac:	f102 0218 	add.w	r2, r2, #24
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	4982      	ldr	r1, [pc, #520]	; (8009ebc <Process_Received_Message+0xf2c>)
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fec1 	bl	800aa3c <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8009cba:	2210      	movs	r2, #16
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009cc2:	f103 0318 	add.w	r3, r3, #24
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	f000 ffd4 	bl	800ac74 <strtol>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009cd2:	f102 0216 	add.w	r2, r2, #22
 8009cd6:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 8009cd8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009cdc:	f103 0316 	add.w	r3, r3, #22
 8009ce0:	781a      	ldrb	r2, [r3, #0]
 8009ce2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009ce6:	f103 031c 	add.w	r3, r3, #28
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	4619      	mov	r1, r3
 8009cee:	4876      	ldr	r0, [pc, #472]	; (8009ec8 <Process_Received_Message+0xf38>)
 8009cf0:	f7f6 fc6a 	bl	80005c8 <CC1200_Write_Single_Register>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009cfa:	f102 0217 	add.w	r2, r2, #23
 8009cfe:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009d00:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009d04:	390c      	subs	r1, #12
 8009d06:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009d0a:	3a34      	subs	r2, #52	; 0x34
 8009d0c:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009d10:	381c      	subs	r0, #28
 8009d12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009d16:	3b14      	subs	r3, #20
 8009d18:	9302      	str	r3, [sp, #8]
 8009d1a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009d1e:	3b3c      	subs	r3, #60	; 0x3c
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009d26:	3b24      	subs	r3, #36	; 0x24
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4967      	ldr	r1, [pc, #412]	; (8009ecc <Process_Received_Message+0xf3c>)
 8009d2e:	f000 fe85 	bl	800aa3c <siprintf>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009d38:	f102 021e 	add.w	r2, r2, #30
 8009d3c:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009d3e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009d42:	f103 031e 	add.w	r3, r3, #30
 8009d46:	881a      	ldrh	r2, [r3, #0]
 8009d48:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009d4c:	3b1c      	subs	r3, #28
 8009d4e:	4611      	mov	r1, r2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7ff f8f7 	bl	8008f44 <CDC_Transmit_FS>
 8009d56:	e24f      	b.n	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "read register", strlen("read register")) == 0)
 8009d58:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009d5c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009d60:	220d      	movs	r2, #13
 8009d62:	495b      	ldr	r1, [pc, #364]	; (8009ed0 <Process_Received_Message+0xf40>)
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f000 fe98 	bl	800aa9a <strncmp>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 80b9 	bne.w	8009ee4 <Process_Received_Message+0xf54>
	{
		sprintf(str1, "User Input: Read Register\r\n");
 8009d72:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009d76:	3b34      	subs	r3, #52	; 0x34
 8009d78:	4956      	ldr	r1, [pc, #344]	; (8009ed4 <Process_Received_Message+0xf44>)
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 fe5e 	bl	800aa3c <siprintf>
		sprintf(str2, "Address to Access: ");
 8009d80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009d84:	3b0c      	subs	r3, #12
 8009d86:	494c      	ldr	r1, [pc, #304]	; (8009eb8 <Process_Received_Message+0xf28>)
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fe57 	bl	800aa3c <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8009d8e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009d92:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009d96:	4947      	ldr	r1, [pc, #284]	; (8009eb4 <Process_Received_Message+0xf24>)
 8009d98:	6818      	ldr	r0, [r3, #0]
 8009d9a:	f000 fe93 	bl	800aac4 <strtok>
 8009d9e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009da2:	f103 0318 	add.w	r3, r3, #24
 8009da6:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Register:"
 8009da8:	4942      	ldr	r1, [pc, #264]	; (8009eb4 <Process_Received_Message+0xf24>)
 8009daa:	2000      	movs	r0, #0
 8009dac:	f000 fe8a 	bl	800aac4 <strtok>
 8009db0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009db4:	f103 0318 	add.w	r3, r3, #24
 8009db8:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // third token "[register address]"
 8009dba:	4942      	ldr	r1, [pc, #264]	; (8009ec4 <Process_Received_Message+0xf34>)
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	f000 fe81 	bl	800aac4 <strtok>
 8009dc2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009dc6:	f103 0318 	add.w	r3, r3, #24
 8009dca:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009dcc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009dd0:	3b24      	subs	r3, #36	; 0x24
 8009dd2:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009dd6:	f102 0218 	add.w	r2, r2, #24
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	4937      	ldr	r1, [pc, #220]	; (8009ebc <Process_Received_Message+0xf2c>)
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fe2c 	bl	800aa3c <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009de4:	2210      	movs	r2, #16
 8009de6:	2100      	movs	r1, #0
 8009de8:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009dec:	f103 0318 	add.w	r3, r3, #24
 8009df0:	6818      	ldr	r0, [r3, #0]
 8009df2:	f000 ff3f 	bl	800ac74 <strtol>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009dfc:	f102 021c 	add.w	r2, r2, #28
 8009e00:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8009e02:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009e06:	f103 031c 	add.w	r3, r3, #28
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	482e      	ldr	r0, [pc, #184]	; (8009ec8 <Process_Received_Message+0xf38>)
 8009e10:	f7f6 fc16 	bl	8000640 <CC1200_Read_Single_Register>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009e1a:	f102 0217 	add.w	r2, r2, #23
 8009e1e:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 8009e20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009e24:	3b3c      	subs	r3, #60	; 0x3c
 8009e26:	492c      	ldr	r1, [pc, #176]	; (8009ed8 <Process_Received_Message+0xf48>)
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fe07 	bl	800aa3c <siprintf>
		Register_Value = MISO_Data[0];
 8009e2e:	4b2b      	ldr	r3, [pc, #172]	; (8009edc <Process_Received_Message+0xf4c>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009e36:	f102 0216 	add.w	r2, r2, #22
 8009e3a:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 8009e3c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009e40:	f103 0316 	add.w	r3, r3, #22
 8009e44:	781a      	ldrb	r2, [r3, #0]
 8009e46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009e4a:	3b14      	subs	r3, #20
 8009e4c:	4924      	ldr	r1, [pc, #144]	; (8009ee0 <Process_Received_Message+0xf50>)
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fdf4 	bl	800aa3c <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009e54:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8009e58:	390c      	subs	r1, #12
 8009e5a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009e5e:	3a34      	subs	r2, #52	; 0x34
 8009e60:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8009e64:	381c      	subs	r0, #28
 8009e66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009e6a:	3b14      	subs	r3, #20
 8009e6c:	9302      	str	r3, [sp, #8]
 8009e6e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009e72:	3b3c      	subs	r3, #60	; 0x3c
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009e7a:	3b24      	subs	r3, #36	; 0x24
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4912      	ldr	r1, [pc, #72]	; (8009ecc <Process_Received_Message+0xf3c>)
 8009e82:	f000 fddb 	bl	800aa3c <siprintf>
 8009e86:	4603      	mov	r3, r0
 8009e88:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009e8c:	f102 021e 	add.w	r2, r2, #30
 8009e90:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009e92:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009e96:	f103 031e 	add.w	r3, r3, #30
 8009e9a:	881a      	ldrh	r2, [r3, #0]
 8009e9c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8009ea0:	3b1c      	subs	r3, #28
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff f84d 	bl	8008f44 <CDC_Transmit_FS>
 8009eaa:	e1a5      	b.n	800a1f8 <Process_Received_Message+0x1268>
 8009eac:	0800c4ac 	.word	0x0800c4ac
 8009eb0:	0800c4bc 	.word	0x0800c4bc
 8009eb4:	0800c0c8 	.word	0x0800c0c8
 8009eb8:	0800c4dc 	.word	0x0800c4dc
 8009ebc:	0800c22c 	.word	0x0800c22c
 8009ec0:	0800c4f0 	.word	0x0800c4f0
 8009ec4:	0800c0cc 	.word	0x0800c0cc
 8009ec8:	200005a0 	.word	0x200005a0
 8009ecc:	0800c418 	.word	0x0800c418
 8009ed0:	0800c500 	.word	0x0800c500
 8009ed4:	0800c510 	.word	0x0800c510
 8009ed8:	0800c52c 	.word	0x0800c52c
 8009edc:	200005b0 	.word	0x200005b0
 8009ee0:	0800c390 	.word	0x0800c390
	}
	else if (strncmp((char*) rx_buffer, "write extended register", strlen("write extended register")) == 0)
 8009ee4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009ee8:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009eec:	2217      	movs	r2, #23
 8009eee:	49c6      	ldr	r1, [pc, #792]	; (800a208 <Process_Received_Message+0x1278>)
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	f000 fdd2 	bl	800aa9a <strncmp>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f040 80bc 	bne.w	800a076 <Process_Received_Message+0x10e6>
	{
		sprintf(str1, "User Input: Write Extended Register\r\n");
 8009efe:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009f02:	3b34      	subs	r3, #52	; 0x34
 8009f04:	49c1      	ldr	r1, [pc, #772]	; (800a20c <Process_Received_Message+0x127c>)
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fd98 	bl	800aa3c <siprintf>
		sprintf(str2, "Address to Access: ");
 8009f0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009f10:	3b0c      	subs	r3, #12
 8009f12:	49bf      	ldr	r1, [pc, #764]	; (800a210 <Process_Received_Message+0x1280>)
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fd91 	bl	800aa3c <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 8009f1a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8009f1e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8009f22:	49bc      	ldr	r1, [pc, #752]	; (800a214 <Process_Received_Message+0x1284>)
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f000 fdcd 	bl	800aac4 <strtok>
 8009f2a:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f2e:	f103 0318 	add.w	r3, r3, #24
 8009f32:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 8009f34:	49b7      	ldr	r1, [pc, #732]	; (800a214 <Process_Received_Message+0x1284>)
 8009f36:	2000      	movs	r0, #0
 8009f38:	f000 fdc4 	bl	800aac4 <strtok>
 8009f3c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f40:	f103 0318 	add.w	r3, r3, #24
 8009f44:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 8009f46:	49b3      	ldr	r1, [pc, #716]	; (800a214 <Process_Received_Message+0x1284>)
 8009f48:	2000      	movs	r0, #0
 8009f4a:	f000 fdbb 	bl	800aac4 <strtok>
 8009f4e:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f52:	f103 0318 	add.w	r3, r3, #24
 8009f56:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // fourth token "[register address]"
 8009f58:	49ae      	ldr	r1, [pc, #696]	; (800a214 <Process_Received_Message+0x1284>)
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	f000 fdb2 	bl	800aac4 <strtok>
 8009f60:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f64:	f103 0318 	add.w	r3, r3, #24
 8009f68:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 8009f6a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8009f6e:	3b24      	subs	r3, #36	; 0x24
 8009f70:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009f74:	f102 0218 	add.w	r2, r2, #24
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	49a7      	ldr	r1, [pc, #668]	; (800a218 <Process_Received_Message+0x1288>)
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fd5d 	bl	800aa3c <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009f82:	2210      	movs	r2, #16
 8009f84:	2100      	movs	r1, #0
 8009f86:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009f8a:	f103 0318 	add.w	r3, r3, #24
 8009f8e:	6818      	ldr	r0, [r3, #0]
 8009f90:	f000 fe70 	bl	800ac74 <strtol>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009f9a:	f102 021c 	add.w	r2, r2, #28
 8009f9e:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Sent: ");
 8009fa0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009fa4:	3b3c      	subs	r3, #60	; 0x3c
 8009fa6:	499d      	ldr	r1, [pc, #628]	; (800a21c <Process_Received_Message+0x128c>)
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 fd47 	bl	800aa3c <siprintf>
		Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8009fae:	499c      	ldr	r1, [pc, #624]	; (800a220 <Process_Received_Message+0x1290>)
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	f000 fd87 	bl	800aac4 <strtok>
 8009fb6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009fba:	f103 0318 	add.w	r3, r3, #24
 8009fbe:	6018      	str	r0, [r3, #0]
		sprintf(str5, "%s\r\n", Token);
 8009fc0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009fc4:	3b14      	subs	r3, #20
 8009fc6:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009fca:	f102 0218 	add.w	r2, r2, #24
 8009fce:	6812      	ldr	r2, [r2, #0]
 8009fd0:	4991      	ldr	r1, [pc, #580]	; (800a218 <Process_Received_Message+0x1288>)
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 fd32 	bl	800aa3c <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8009fd8:	2210      	movs	r2, #16
 8009fda:	2100      	movs	r1, #0
 8009fdc:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009fe0:	f103 0318 	add.w	r3, r3, #24
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	f000 fe45 	bl	800ac74 <strtol>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8009ff0:	f102 0216 	add.w	r2, r2, #22
 8009ff4:	7013      	strb	r3, [r2, #0]
		check = CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 8009ff6:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8009ffa:	f103 0316 	add.w	r3, r3, #22
 8009ffe:	781a      	ldrb	r2, [r3, #0]
 800a000:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a004:	f103 031c 	add.w	r3, r3, #28
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	4619      	mov	r1, r3
 800a00c:	4885      	ldr	r0, [pc, #532]	; (800a224 <Process_Received_Message+0x1294>)
 800a00e:	f7f6 fb57 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800a012:	4603      	mov	r3, r0
 800a014:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a018:	f102 0217 	add.w	r2, r2, #23
 800a01c:	7013      	strb	r3, [r2, #0]
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 800a01e:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800a022:	390c      	subs	r1, #12
 800a024:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a028:	3a34      	subs	r2, #52	; 0x34
 800a02a:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800a02e:	381c      	subs	r0, #28
 800a030:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a034:	3b14      	subs	r3, #20
 800a036:	9302      	str	r3, [sp, #8]
 800a038:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a03c:	3b3c      	subs	r3, #60	; 0x3c
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a044:	3b24      	subs	r3, #36	; 0x24
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	460b      	mov	r3, r1
 800a04a:	4977      	ldr	r1, [pc, #476]	; (800a228 <Process_Received_Message+0x1298>)
 800a04c:	f000 fcf6 	bl	800aa3c <siprintf>
 800a050:	4603      	mov	r3, r0
 800a052:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a056:	f102 021e 	add.w	r2, r2, #30
 800a05a:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800a05c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a060:	f103 031e 	add.w	r3, r3, #30
 800a064:	881a      	ldrh	r2, [r3, #0]
 800a066:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800a06a:	3b1c      	subs	r3, #28
 800a06c:	4611      	mov	r1, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe ff68 	bl	8008f44 <CDC_Transmit_FS>
 800a074:	e0c0      	b.n	800a1f8 <Process_Received_Message+0x1268>
	}
	else if (strncmp((char*) rx_buffer, "read extended register", strlen("read extended register")) == 0)
 800a076:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a07a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800a07e:	2216      	movs	r2, #22
 800a080:	496a      	ldr	r1, [pc, #424]	; (800a22c <Process_Received_Message+0x129c>)
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	f000 fd09 	bl	800aa9a <strncmp>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f040 80a6 	bne.w	800a1dc <Process_Received_Message+0x124c>
	{
		sprintf(str1, "User Input: Read Extended Register\r\n");
 800a090:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800a094:	3b34      	subs	r3, #52	; 0x34
 800a096:	4966      	ldr	r1, [pc, #408]	; (800a230 <Process_Received_Message+0x12a0>)
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fccf 	bl	800aa3c <siprintf>
		sprintf(str2, "Address to Access: ");
 800a09e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800a0a2:	3b0c      	subs	r3, #12
 800a0a4:	495a      	ldr	r1, [pc, #360]	; (800a210 <Process_Received_Message+0x1280>)
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fcc8 	bl	800aa3c <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 800a0ac:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a0b0:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800a0b4:	4957      	ldr	r1, [pc, #348]	; (800a214 <Process_Received_Message+0x1284>)
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	f000 fd04 	bl	800aac4 <strtok>
 800a0bc:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0c0:	f103 0318 	add.w	r3, r3, #24
 800a0c4:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // second token "Extended"
 800a0c6:	4953      	ldr	r1, [pc, #332]	; (800a214 <Process_Received_Message+0x1284>)
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	f000 fcfb 	bl	800aac4 <strtok>
 800a0ce:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0d2:	f103 0318 	add.w	r3, r3, #24
 800a0d6:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, " "); // third token "Register:"
 800a0d8:	494e      	ldr	r1, [pc, #312]	; (800a214 <Process_Received_Message+0x1284>)
 800a0da:	2000      	movs	r0, #0
 800a0dc:	f000 fcf2 	bl	800aac4 <strtok>
 800a0e0:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0e4:	f103 0318 	add.w	r3, r3, #24
 800a0e8:	6018      	str	r0, [r3, #0]
		Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 800a0ea:	494d      	ldr	r1, [pc, #308]	; (800a220 <Process_Received_Message+0x1290>)
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f000 fce9 	bl	800aac4 <strtok>
 800a0f2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a0f6:	f103 0318 	add.w	r3, r3, #24
 800a0fa:	6018      	str	r0, [r3, #0]
		sprintf(str3, "%s\r\n", Token);
 800a0fc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a100:	3b24      	subs	r3, #36	; 0x24
 800a102:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a106:	f102 0218 	add.w	r2, r2, #24
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	4942      	ldr	r1, [pc, #264]	; (800a218 <Process_Received_Message+0x1288>)
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fc94 	bl	800aa3c <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800a114:	2210      	movs	r2, #16
 800a116:	2100      	movs	r1, #0
 800a118:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a11c:	f103 0318 	add.w	r3, r3, #24
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	f000 fda7 	bl	800ac74 <strtol>
 800a126:	4603      	mov	r3, r0
 800a128:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a12c:	f102 021c 	add.w	r2, r2, #28
 800a130:	7013      	strb	r3, [r2, #0]
		check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800a132:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a136:	f103 031c 	add.w	r3, r3, #28
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	4619      	mov	r1, r3
 800a13e:	4839      	ldr	r0, [pc, #228]	; (800a224 <Process_Received_Message+0x1294>)
 800a140:	f7f6 fb10 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800a144:	4603      	mov	r3, r0
 800a146:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a14a:	f102 0217 	add.w	r2, r2, #23
 800a14e:	7013      	strb	r3, [r2, #0]
		sprintf(str4, "Value Received: ");
 800a150:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a154:	3b3c      	subs	r3, #60	; 0x3c
 800a156:	4937      	ldr	r1, [pc, #220]	; (800a234 <Process_Received_Message+0x12a4>)
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fc6f 	bl	800aa3c <siprintf>
		Register_Value = MISO_Data[0];
 800a15e:	4b36      	ldr	r3, [pc, #216]	; (800a238 <Process_Received_Message+0x12a8>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a166:	f102 0216 	add.w	r2, r2, #22
 800a16a:	7013      	strb	r3, [r2, #0]
		sprintf(str5, "0X%02X\r\n", Register_Value);
 800a16c:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a170:	f103 0316 	add.w	r3, r3, #22
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a17a:	3b14      	subs	r3, #20
 800a17c:	492f      	ldr	r1, [pc, #188]	; (800a23c <Process_Received_Message+0x12ac>)
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fc5c 	bl	800aa3c <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 800a184:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800a188:	390c      	subs	r1, #12
 800a18a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a18e:	3a34      	subs	r2, #52	; 0x34
 800a190:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 800a194:	381c      	subs	r0, #28
 800a196:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a19a:	3b14      	subs	r3, #20
 800a19c:	9302      	str	r3, [sp, #8]
 800a19e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a1a2:	3b3c      	subs	r3, #60	; 0x3c
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a1aa:	3b24      	subs	r3, #36	; 0x24
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	491d      	ldr	r1, [pc, #116]	; (800a228 <Process_Received_Message+0x1298>)
 800a1b2:	f000 fc43 	bl	800aa3c <siprintf>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 800a1bc:	f102 021e 	add.w	r2, r2, #30
 800a1c0:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800a1c2:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800a1c6:	f103 031e 	add.w	r3, r3, #30
 800a1ca:	881a      	ldrh	r2, [r3, #0]
 800a1cc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800a1d0:	3b1c      	subs	r3, #28
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe feb5 	bl	8008f44 <CDC_Transmit_FS>
 800a1da:	e00d      	b.n	800a1f8 <Process_Received_Message+0x1268>
	}
	else
	{
		CDC_Transmit_FS(rx_buffer, rx_buffer_len);
 800a1dc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a1e0:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a1ec:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	f7fe fea6 	bl	8008f44 <CDC_Transmit_FS>
	}

	return 0;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f507 572a 	add.w	r7, r7, #10880	; 0x2a80
 800a200:	3720      	adds	r7, #32
 800a202:	46bd      	mov	sp, r7
 800a204:	bdb0      	pop	{r4, r5, r7, pc}
 800a206:	bf00      	nop
 800a208:	0800c540 	.word	0x0800c540
 800a20c:	0800c558 	.word	0x0800c558
 800a210:	0800c4dc 	.word	0x0800c4dc
 800a214:	0800c0c8 	.word	0x0800c0c8
 800a218:	0800c22c 	.word	0x0800c22c
 800a21c:	0800c4f0 	.word	0x0800c4f0
 800a220:	0800c0cc 	.word	0x0800c0cc
 800a224:	200005a0 	.word	0x200005a0
 800a228:	0800c418 	.word	0x0800c418
 800a22c:	0800c580 	.word	0x0800c580
 800a230:	0800c598 	.word	0x0800c598
 800a234:	0800c52c 	.word	0x0800c52c
 800a238:	200005b0 	.word	0x200005b0
 800a23c:	0800c390 	.word	0x0800c390

0800a240 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2212      	movs	r2, #18
 800a250:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a252:	4b03      	ldr	r3, [pc, #12]	; (800a260 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	bc80      	pop	{r7}
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20000410 	.word	0x20000410

0800a264 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2204      	movs	r2, #4
 800a274:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a276:	4b03      	ldr	r3, [pc, #12]	; (800a284 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bc80      	pop	{r7}
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20000424 	.word	0x20000424

0800a288 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	6039      	str	r1, [r7, #0]
 800a292:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a294:	79fb      	ldrb	r3, [r7, #7]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d105      	bne.n	800a2a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	4907      	ldr	r1, [pc, #28]	; (800a2bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a29e:	4808      	ldr	r0, [pc, #32]	; (800a2c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2a0:	f7fe fc80 	bl	8008ba4 <USBD_GetString>
 800a2a4:	e004      	b.n	800a2b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	4904      	ldr	r1, [pc, #16]	; (800a2bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a2aa:	4805      	ldr	r0, [pc, #20]	; (800a2c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2ac:	f7fe fc7a 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2b0:	4b02      	ldr	r3, [pc, #8]	; (800a2bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20001cc8 	.word	0x20001cc8
 800a2c0:	0800c5c0 	.word	0x0800c5c0

0800a2c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6039      	str	r1, [r7, #0]
 800a2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	4904      	ldr	r1, [pc, #16]	; (800a2e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2d4:	4804      	ldr	r0, [pc, #16]	; (800a2e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2d6:	f7fe fc65 	bl	8008ba4 <USBD_GetString>
  return USBD_StrDesc;
 800a2da:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20001cc8 	.word	0x20001cc8
 800a2e8:	0800c5d8 	.word	0x0800c5d8

0800a2ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	221a      	movs	r2, #26
 800a2fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2fe:	f000 f843 	bl	800a388 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a302:	4b02      	ldr	r3, [pc, #8]	; (800a30c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20000428 	.word	0x20000428

0800a310 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	6039      	str	r1, [r7, #0]
 800a31a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d105      	bne.n	800a32e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	4907      	ldr	r1, [pc, #28]	; (800a344 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a326:	4808      	ldr	r0, [pc, #32]	; (800a348 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a328:	f7fe fc3c 	bl	8008ba4 <USBD_GetString>
 800a32c:	e004      	b.n	800a338 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	4904      	ldr	r1, [pc, #16]	; (800a344 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a332:	4805      	ldr	r0, [pc, #20]	; (800a348 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a334:	f7fe fc36 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a338:	4b02      	ldr	r3, [pc, #8]	; (800a344 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20001cc8 	.word	0x20001cc8
 800a348:	0800c5ec 	.word	0x0800c5ec

0800a34c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	6039      	str	r1, [r7, #0]
 800a356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d105      	bne.n	800a36a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	4907      	ldr	r1, [pc, #28]	; (800a380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a362:	4808      	ldr	r0, [pc, #32]	; (800a384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a364:	f7fe fc1e 	bl	8008ba4 <USBD_GetString>
 800a368:	e004      	b.n	800a374 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	4904      	ldr	r1, [pc, #16]	; (800a380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a36e:	4805      	ldr	r0, [pc, #20]	; (800a384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a370:	f7fe fc18 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a374:	4b02      	ldr	r3, [pc, #8]	; (800a380 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20001cc8 	.word	0x20001cc8
 800a384:	0800c5f8 	.word	0x0800c5f8

0800a388 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a38e:	4b0f      	ldr	r3, [pc, #60]	; (800a3cc <Get_SerialNum+0x44>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a394:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <Get_SerialNum+0x48>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <Get_SerialNum+0x4c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d009      	beq.n	800a3c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3ae:	2208      	movs	r2, #8
 800a3b0:	4909      	ldr	r1, [pc, #36]	; (800a3d8 <Get_SerialNum+0x50>)
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 f814 	bl	800a3e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3b8:	2204      	movs	r2, #4
 800a3ba:	4908      	ldr	r1, [pc, #32]	; (800a3dc <Get_SerialNum+0x54>)
 800a3bc:	68b8      	ldr	r0, [r7, #8]
 800a3be:	f000 f80f 	bl	800a3e0 <IntToUnicode>
  }
}
 800a3c2:	bf00      	nop
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	1ff800d0 	.word	0x1ff800d0
 800a3d0:	1ff800d4 	.word	0x1ff800d4
 800a3d4:	1ff800d8 	.word	0x1ff800d8
 800a3d8:	2000042a 	.word	0x2000042a
 800a3dc:	2000043a 	.word	0x2000043a

0800a3e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	75fb      	strb	r3, [r7, #23]
 800a3f6:	e027      	b.n	800a448 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	0f1b      	lsrs	r3, r3, #28
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	d80b      	bhi.n	800a418 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	0f1b      	lsrs	r3, r3, #28
 800a404:	b2da      	uxtb	r2, r3
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	4619      	mov	r1, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	440b      	add	r3, r1
 800a410:	3230      	adds	r2, #48	; 0x30
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	e00a      	b.n	800a42e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	0f1b      	lsrs	r3, r3, #28
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	4619      	mov	r1, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	440b      	add	r3, r1
 800a428:	3237      	adds	r2, #55	; 0x37
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a434:	7dfb      	ldrb	r3, [r7, #23]
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	3301      	adds	r3, #1
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	4413      	add	r3, r2
 800a43e:	2200      	movs	r2, #0
 800a440:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	3301      	adds	r3, #1
 800a446:	75fb      	strb	r3, [r7, #23]
 800a448:	7dfa      	ldrb	r2, [r7, #23]
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d3d3      	bcc.n	800a3f8 <IntToUnicode+0x18>
  }
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	bc80      	pop	{r7}
 800a45a:	4770      	bx	lr

0800a45c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d106      	bne.n	800a47c <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a46e:	4b09      	ldr	r3, [pc, #36]	; (800a494 <HAL_PCDEx_SetConnectionState+0x38>)
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	4a08      	ldr	r2, [pc, #32]	; (800a494 <HAL_PCDEx_SetConnectionState+0x38>)
 800a474:	f043 0301 	orr.w	r3, r3, #1
 800a478:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800a47a:	e005      	b.n	800a488 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800a47c:	4b05      	ldr	r3, [pc, #20]	; (800a494 <HAL_PCDEx_SetConnectionState+0x38>)
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	4a04      	ldr	r2, [pc, #16]	; (800a494 <HAL_PCDEx_SetConnectionState+0x38>)
 800a482:	f023 0301 	bic.w	r3, r3, #1
 800a486:	6053      	str	r3, [r2, #4]
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	40010000 	.word	0x40010000

0800a498 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a0d      	ldr	r2, [pc, #52]	; (800a4dc <HAL_PCD_MspInit+0x44>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d113      	bne.n	800a4d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4aa:	4b0d      	ldr	r3, [pc, #52]	; (800a4e0 <HAL_PCD_MspInit+0x48>)
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <HAL_PCD_MspInit+0x48>)
 800a4b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4b4:	6253      	str	r3, [r2, #36]	; 0x24
 800a4b6:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <HAL_PCD_MspInit+0x48>)
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	2014      	movs	r0, #20
 800a4c8:	f7f7 f80b 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a4cc:	2014      	movs	r0, #20
 800a4ce:	f7f7 f824 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	40005c00 	.word	0x40005c00
 800a4e0:	40023800 	.word	0x40023800

0800a4e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	f7fd fc97 	bl	8007e2e <USBD_LL_SetupStage>
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	4613      	mov	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4413      	add	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	440b      	add	r3, r1
 800a528:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	78fb      	ldrb	r3, [r7, #3]
 800a530:	4619      	mov	r1, r3
 800a532:	f7fd fcc9 	bl	8007ec8 <USBD_LL_DataOutStage>
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	440b      	add	r3, r1
 800a55e:	333c      	adds	r3, #60	; 0x3c
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	4619      	mov	r1, r3
 800a566:	f7fd fd20 	bl	8007faa <USBD_LL_DataInStage>
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a580:	4618      	mov	r0, r3
 800a582:	f7fd fe2b 	bl	80081dc <USBD_LL_SOF>
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a596:	2301      	movs	r3, #1
 800a598:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d001      	beq.n	800a5a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a5a2:	f7f6 fc43 	bl	8000e2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5ac:	7bfa      	ldrb	r2, [r7, #15]
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fd fde0 	bl	8008176 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fd fd99 	bl	80080f4 <USBD_LL_Reset>
}
 800a5c2:	bf00      	nop
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fd fdda 	bl	8008194 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d005      	beq.n	800a5f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5e8:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <HAL_PCD_SuspendCallback+0x30>)
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	4a03      	ldr	r2, [pc, #12]	; (800a5fc <HAL_PCD_SuspendCallback+0x30>)
 800a5ee:	f043 0306 	orr.w	r3, r3, #6
 800a5f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	e000ed00 	.word	0xe000ed00

0800a600 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fd fdd4 	bl	80081bc <USBD_LL_Resume>
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a624:	4a28      	ldr	r2, [pc, #160]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a26      	ldr	r2, [pc, #152]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a630:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800a634:	4b24      	ldr	r3, [pc, #144]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a636:	4a25      	ldr	r2, [pc, #148]	; (800a6cc <USBD_LL_Init+0xb0>)
 800a638:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a63a:	4b23      	ldr	r3, [pc, #140]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a63c:	2208      	movs	r2, #8
 800a63e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a640:	4b21      	ldr	r3, [pc, #132]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a642:	2202      	movs	r2, #2
 800a644:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a646:	4b20      	ldr	r3, [pc, #128]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a648:	2202      	movs	r2, #2
 800a64a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a64c:	4b1e      	ldr	r3, [pc, #120]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a64e:	2200      	movs	r2, #0
 800a650:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a652:	4b1d      	ldr	r3, [pc, #116]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a654:	2200      	movs	r2, #0
 800a656:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a658:	481b      	ldr	r0, [pc, #108]	; (800a6c8 <USBD_LL_Init+0xac>)
 800a65a:	f7f7 f939 	bl	80018d0 <HAL_PCD_Init>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a664:	f7f6 fbe2 	bl	8000e2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a66e:	2318      	movs	r3, #24
 800a670:	2200      	movs	r2, #0
 800a672:	2100      	movs	r1, #0
 800a674:	f7f8 fd16 	bl	80030a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a67e:	2358      	movs	r3, #88	; 0x58
 800a680:	2200      	movs	r2, #0
 800a682:	2180      	movs	r1, #128	; 0x80
 800a684:	f7f8 fd0e 	bl	80030a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a68e:	23c0      	movs	r3, #192	; 0xc0
 800a690:	2200      	movs	r2, #0
 800a692:	2181      	movs	r1, #129	; 0x81
 800a694:	f7f8 fd06 	bl	80030a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a69e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	f7f8 fcfd 	bl	80030a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a6b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2182      	movs	r1, #130	; 0x82
 800a6b8:	f7f8 fcf4 	bl	80030a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20001ec8 	.word	0x20001ec8
 800a6cc:	40005c00 	.word	0x40005c00

0800a6d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7f7 f9d0 	bl	8001a8c <HAL_PCD_Start>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 f944 	bl	800a980 <USBD_Get_USB_Status>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	4608      	mov	r0, r1
 800a710:	4611      	mov	r1, r2
 800a712:	461a      	mov	r2, r3
 800a714:	4603      	mov	r3, r0
 800a716:	70fb      	strb	r3, [r7, #3]
 800a718:	460b      	mov	r3, r1
 800a71a:	70bb      	strb	r3, [r7, #2]
 800a71c:	4613      	mov	r3, r2
 800a71e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a72e:	78bb      	ldrb	r3, [r7, #2]
 800a730:	883a      	ldrh	r2, [r7, #0]
 800a732:	78f9      	ldrb	r1, [r7, #3]
 800a734:	f7f7 faec 	bl	8001d10 <HAL_PCD_EP_Open>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f91e 	bl	800a980 <USBD_Get_USB_Status>
 800a744:	4603      	mov	r3, r0
 800a746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a748:	7bbb      	ldrb	r3, [r7, #14]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f7f7 fb33 	bl	8001ddc <HAL_PCD_EP_Close>
 800a776:	4603      	mov	r3, r0
 800a778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f8ff 	bl	800a980 <USBD_Get_USB_Status>
 800a782:	4603      	mov	r3, r0
 800a784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a786:	7bbb      	ldrb	r3, [r7, #14]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a7aa:	78fa      	ldrb	r2, [r7, #3]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f7 fbf3 	bl	8001f9a <HAL_PCD_EP_SetStall>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f8e0 	bl	800a980 <USBD_Get_USB_Status>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a7e8:	78fa      	ldrb	r2, [r7, #3]
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7f7 fc26 	bl	800203e <HAL_PCD_EP_ClrStall>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f8c1 	bl	800a980 <USBD_Get_USB_Status>
 800a7fe:	4603      	mov	r3, r0
 800a800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a802:	7bbb      	ldrb	r3, [r7, #14]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a81e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a824:	2b00      	cmp	r3, #0
 800a826:	da0c      	bge.n	800a842 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a828:	78fb      	ldrb	r3, [r7, #3]
 800a82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82e:	68f9      	ldr	r1, [r7, #12]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	440b      	add	r3, r1
 800a83c:	3302      	adds	r3, #2
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	e00b      	b.n	800a85a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	440b      	add	r3, r1
 800a854:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a858:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr

0800a864 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a870:	2300      	movs	r3, #0
 800a872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a87e:	78fa      	ldrb	r2, [r7, #3]
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f7f7 fa1f 	bl	8001cc6 <HAL_PCD_SetAddress>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 f876 	bl	800a980 <USBD_Get_USB_Status>
 800a894:	4603      	mov	r3, r0
 800a896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a898:	7bbb      	ldrb	r3, [r7, #14]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	72fb      	strb	r3, [r7, #11]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a8c4:	893b      	ldrh	r3, [r7, #8]
 800a8c6:	7af9      	ldrb	r1, [r7, #11]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	f7f7 fb23 	bl	8001f14 <HAL_PCD_EP_Transmit>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 f853 	bl	800a980 <USBD_Get_USB_Status>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8de:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	607a      	str	r2, [r7, #4]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	72fb      	strb	r3, [r7, #11]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a90a:	893b      	ldrh	r3, [r7, #8]
 800a90c:	7af9      	ldrb	r1, [r7, #11]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	f7f7 faac 	bl	8001e6c <HAL_PCD_EP_Receive>
 800a914:	4603      	mov	r3, r0
 800a916:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f830 	bl	800a980 <USBD_Get_USB_Status>
 800a920:	4603      	mov	r3, r0
 800a922:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a924:	7dbb      	ldrb	r3, [r7, #22]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	460b      	mov	r3, r1
 800a938:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a940:	78fa      	ldrb	r2, [r7, #3]
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f7f7 face 	bl	8001ee6 <HAL_PCD_EP_GetRxCount>
 800a94a:	4603      	mov	r3, r0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a95c:	4b02      	ldr	r3, [pc, #8]	; (800a968 <USBD_static_malloc+0x14>)
}
 800a95e:	4618      	mov	r0, r3
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	bc80      	pop	{r7}
 800a966:	4770      	bx	lr
 800a968:	200021b4 	.word	0x200021b4

0800a96c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]

}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr
	...

0800a980 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	2b03      	cmp	r3, #3
 800a992:	d817      	bhi.n	800a9c4 <USBD_Get_USB_Status+0x44>
 800a994:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <USBD_Get_USB_Status+0x1c>)
 800a996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99a:	bf00      	nop
 800a99c:	0800a9ad 	.word	0x0800a9ad
 800a9a0:	0800a9b3 	.word	0x0800a9b3
 800a9a4:	0800a9b9 	.word	0x0800a9b9
 800a9a8:	0800a9bf 	.word	0x0800a9bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b0:	e00b      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b6:	e008      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a9bc:	e005      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c2:	e002      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	bf00      	nop
  }
  return usb_status;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop

0800a9d8 <__errno>:
 800a9d8:	4b01      	ldr	r3, [pc, #4]	; (800a9e0 <__errno+0x8>)
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	20000444 	.word	0x20000444

0800a9e4 <__libc_init_array>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	2600      	movs	r6, #0
 800a9e8:	4d0c      	ldr	r5, [pc, #48]	; (800aa1c <__libc_init_array+0x38>)
 800a9ea:	4c0d      	ldr	r4, [pc, #52]	; (800aa20 <__libc_init_array+0x3c>)
 800a9ec:	1b64      	subs	r4, r4, r5
 800a9ee:	10a4      	asrs	r4, r4, #2
 800a9f0:	42a6      	cmp	r6, r4
 800a9f2:	d109      	bne.n	800aa08 <__libc_init_array+0x24>
 800a9f4:	f001 fb04 	bl	800c000 <_init>
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	4d0a      	ldr	r5, [pc, #40]	; (800aa24 <__libc_init_array+0x40>)
 800a9fc:	4c0a      	ldr	r4, [pc, #40]	; (800aa28 <__libc_init_array+0x44>)
 800a9fe:	1b64      	subs	r4, r4, r5
 800aa00:	10a4      	asrs	r4, r4, #2
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	d105      	bne.n	800aa12 <__libc_init_array+0x2e>
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0c:	4798      	blx	r3
 800aa0e:	3601      	adds	r6, #1
 800aa10:	e7ee      	b.n	800a9f0 <__libc_init_array+0xc>
 800aa12:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa16:	4798      	blx	r3
 800aa18:	3601      	adds	r6, #1
 800aa1a:	e7f2      	b.n	800aa02 <__libc_init_array+0x1e>
 800aa1c:	0800c87c 	.word	0x0800c87c
 800aa20:	0800c87c 	.word	0x0800c87c
 800aa24:	0800c87c 	.word	0x0800c87c
 800aa28:	0800c880 	.word	0x0800c880

0800aa2c <memset>:
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	4402      	add	r2, r0
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d100      	bne.n	800aa36 <memset+0xa>
 800aa34:	4770      	bx	lr
 800aa36:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3a:	e7f9      	b.n	800aa30 <memset+0x4>

0800aa3c <siprintf>:
 800aa3c:	b40e      	push	{r1, r2, r3}
 800aa3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa42:	b500      	push	{lr}
 800aa44:	b09c      	sub	sp, #112	; 0x70
 800aa46:	ab1d      	add	r3, sp, #116	; 0x74
 800aa48:	9002      	str	r0, [sp, #8]
 800aa4a:	9006      	str	r0, [sp, #24]
 800aa4c:	9107      	str	r1, [sp, #28]
 800aa4e:	9104      	str	r1, [sp, #16]
 800aa50:	4808      	ldr	r0, [pc, #32]	; (800aa74 <siprintf+0x38>)
 800aa52:	4909      	ldr	r1, [pc, #36]	; (800aa78 <siprintf+0x3c>)
 800aa54:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa58:	9105      	str	r1, [sp, #20]
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	a902      	add	r1, sp, #8
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	f000 fa82 	bl	800af68 <_svfiprintf_r>
 800aa64:	2200      	movs	r2, #0
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	b01c      	add	sp, #112	; 0x70
 800aa6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa70:	b003      	add	sp, #12
 800aa72:	4770      	bx	lr
 800aa74:	20000444 	.word	0x20000444
 800aa78:	ffff0208 	.word	0xffff0208

0800aa7c <strcat>:
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	b510      	push	{r4, lr}
 800aa80:	7814      	ldrb	r4, [r2, #0]
 800aa82:	4613      	mov	r3, r2
 800aa84:	3201      	adds	r2, #1
 800aa86:	2c00      	cmp	r4, #0
 800aa88:	d1fa      	bne.n	800aa80 <strcat+0x4>
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa90:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	d1f9      	bne.n	800aa8c <strcat+0x10>
 800aa98:	bd10      	pop	{r4, pc}

0800aa9a <strncmp>:
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	b172      	cbz	r2, 800aabe <strncmp+0x24>
 800aaa0:	3901      	subs	r1, #1
 800aaa2:	1884      	adds	r4, r0, r2
 800aaa4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aaa8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aaac:	4290      	cmp	r0, r2
 800aaae:	d101      	bne.n	800aab4 <strncmp+0x1a>
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	d101      	bne.n	800aab8 <strncmp+0x1e>
 800aab4:	1a80      	subs	r0, r0, r2
 800aab6:	bd10      	pop	{r4, pc}
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1f3      	bne.n	800aaa4 <strncmp+0xa>
 800aabc:	e7fa      	b.n	800aab4 <strncmp+0x1a>
 800aabe:	4610      	mov	r0, r2
 800aac0:	e7f9      	b.n	800aab6 <strncmp+0x1c>
	...

0800aac4 <strtok>:
 800aac4:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <strtok+0x5c>)
 800aac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	681f      	ldr	r7, [r3, #0]
 800aacc:	4605      	mov	r5, r0
 800aace:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800aad0:	460e      	mov	r6, r1
 800aad2:	b9ec      	cbnz	r4, 800ab10 <strtok+0x4c>
 800aad4:	2050      	movs	r0, #80	; 0x50
 800aad6:	f000 f907 	bl	800ace8 <malloc>
 800aada:	4602      	mov	r2, r0
 800aadc:	65b8      	str	r0, [r7, #88]	; 0x58
 800aade:	b920      	cbnz	r0, 800aaea <strtok+0x26>
 800aae0:	2157      	movs	r1, #87	; 0x57
 800aae2:	4b10      	ldr	r3, [pc, #64]	; (800ab24 <strtok+0x60>)
 800aae4:	4810      	ldr	r0, [pc, #64]	; (800ab28 <strtok+0x64>)
 800aae6:	f000 f8cf 	bl	800ac88 <__assert_func>
 800aaea:	e9c0 4400 	strd	r4, r4, [r0]
 800aaee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aaf2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aaf6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800aafa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aafe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ab02:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ab06:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ab0a:	6184      	str	r4, [r0, #24]
 800ab0c:	7704      	strb	r4, [r0, #28]
 800ab0e:	6244      	str	r4, [r0, #36]	; 0x24
 800ab10:	4631      	mov	r1, r6
 800ab12:	4628      	mov	r0, r5
 800ab14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab16:	2301      	movs	r3, #1
 800ab18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1c:	f000 b806 	b.w	800ab2c <__strtok_r>
 800ab20:	20000444 	.word	0x20000444
 800ab24:	0800c630 	.word	0x0800c630
 800ab28:	0800c647 	.word	0x0800c647

0800ab2c <__strtok_r>:
 800ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2e:	b908      	cbnz	r0, 800ab34 <__strtok_r+0x8>
 800ab30:	6810      	ldr	r0, [r2, #0]
 800ab32:	b188      	cbz	r0, 800ab58 <__strtok_r+0x2c>
 800ab34:	4604      	mov	r4, r0
 800ab36:	460f      	mov	r7, r1
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ab3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ab42:	b91e      	cbnz	r6, 800ab4c <__strtok_r+0x20>
 800ab44:	b965      	cbnz	r5, 800ab60 <__strtok_r+0x34>
 800ab46:	4628      	mov	r0, r5
 800ab48:	6015      	str	r5, [r2, #0]
 800ab4a:	e005      	b.n	800ab58 <__strtok_r+0x2c>
 800ab4c:	42b5      	cmp	r5, r6
 800ab4e:	d1f6      	bne.n	800ab3e <__strtok_r+0x12>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f0      	bne.n	800ab36 <__strtok_r+0xa>
 800ab54:	6014      	str	r4, [r2, #0]
 800ab56:	7003      	strb	r3, [r0, #0]
 800ab58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab5a:	461c      	mov	r4, r3
 800ab5c:	e00c      	b.n	800ab78 <__strtok_r+0x4c>
 800ab5e:	b915      	cbnz	r5, 800ab66 <__strtok_r+0x3a>
 800ab60:	460e      	mov	r6, r1
 800ab62:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab66:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ab6a:	42ab      	cmp	r3, r5
 800ab6c:	d1f7      	bne.n	800ab5e <__strtok_r+0x32>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f3      	beq.n	800ab5a <__strtok_r+0x2e>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ab78:	6014      	str	r4, [r2, #0]
 800ab7a:	e7ed      	b.n	800ab58 <__strtok_r+0x2c>

0800ab7c <_strtol_l.constprop.0>:
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab82:	4680      	mov	r8, r0
 800ab84:	d001      	beq.n	800ab8a <_strtol_l.constprop.0+0xe>
 800ab86:	2b24      	cmp	r3, #36	; 0x24
 800ab88:	d906      	bls.n	800ab98 <_strtol_l.constprop.0+0x1c>
 800ab8a:	f7ff ff25 	bl	800a9d8 <__errno>
 800ab8e:	2316      	movs	r3, #22
 800ab90:	6003      	str	r3, [r0, #0]
 800ab92:	2000      	movs	r0, #0
 800ab94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab98:	460d      	mov	r5, r1
 800ab9a:	4f35      	ldr	r7, [pc, #212]	; (800ac70 <_strtol_l.constprop.0+0xf4>)
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aba2:	5de6      	ldrb	r6, [r4, r7]
 800aba4:	f016 0608 	ands.w	r6, r6, #8
 800aba8:	d1f8      	bne.n	800ab9c <_strtol_l.constprop.0+0x20>
 800abaa:	2c2d      	cmp	r4, #45	; 0x2d
 800abac:	d12f      	bne.n	800ac0e <_strtol_l.constprop.0+0x92>
 800abae:	2601      	movs	r6, #1
 800abb0:	782c      	ldrb	r4, [r5, #0]
 800abb2:	1c85      	adds	r5, r0, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d057      	beq.n	800ac68 <_strtol_l.constprop.0+0xec>
 800abb8:	2b10      	cmp	r3, #16
 800abba:	d109      	bne.n	800abd0 <_strtol_l.constprop.0+0x54>
 800abbc:	2c30      	cmp	r4, #48	; 0x30
 800abbe:	d107      	bne.n	800abd0 <_strtol_l.constprop.0+0x54>
 800abc0:	7828      	ldrb	r0, [r5, #0]
 800abc2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800abc6:	2858      	cmp	r0, #88	; 0x58
 800abc8:	d149      	bne.n	800ac5e <_strtol_l.constprop.0+0xe2>
 800abca:	2310      	movs	r3, #16
 800abcc:	786c      	ldrb	r4, [r5, #1]
 800abce:	3502      	adds	r5, #2
 800abd0:	2700      	movs	r7, #0
 800abd2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800abd6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800abda:	fbbe f9f3 	udiv	r9, lr, r3
 800abde:	4638      	mov	r0, r7
 800abe0:	fb03 ea19 	mls	sl, r3, r9, lr
 800abe4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800abe8:	f1bc 0f09 	cmp.w	ip, #9
 800abec:	d814      	bhi.n	800ac18 <_strtol_l.constprop.0+0x9c>
 800abee:	4664      	mov	r4, ip
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	dd22      	ble.n	800ac3a <_strtol_l.constprop.0+0xbe>
 800abf4:	2f00      	cmp	r7, #0
 800abf6:	db1d      	blt.n	800ac34 <_strtol_l.constprop.0+0xb8>
 800abf8:	4581      	cmp	r9, r0
 800abfa:	d31b      	bcc.n	800ac34 <_strtol_l.constprop.0+0xb8>
 800abfc:	d101      	bne.n	800ac02 <_strtol_l.constprop.0+0x86>
 800abfe:	45a2      	cmp	sl, r4
 800ac00:	db18      	blt.n	800ac34 <_strtol_l.constprop.0+0xb8>
 800ac02:	2701      	movs	r7, #1
 800ac04:	fb00 4003 	mla	r0, r0, r3, r4
 800ac08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac0c:	e7ea      	b.n	800abe4 <_strtol_l.constprop.0+0x68>
 800ac0e:	2c2b      	cmp	r4, #43	; 0x2b
 800ac10:	bf04      	itt	eq
 800ac12:	782c      	ldrbeq	r4, [r5, #0]
 800ac14:	1c85      	addeq	r5, r0, #2
 800ac16:	e7cd      	b.n	800abb4 <_strtol_l.constprop.0+0x38>
 800ac18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac1c:	f1bc 0f19 	cmp.w	ip, #25
 800ac20:	d801      	bhi.n	800ac26 <_strtol_l.constprop.0+0xaa>
 800ac22:	3c37      	subs	r4, #55	; 0x37
 800ac24:	e7e4      	b.n	800abf0 <_strtol_l.constprop.0+0x74>
 800ac26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac2a:	f1bc 0f19 	cmp.w	ip, #25
 800ac2e:	d804      	bhi.n	800ac3a <_strtol_l.constprop.0+0xbe>
 800ac30:	3c57      	subs	r4, #87	; 0x57
 800ac32:	e7dd      	b.n	800abf0 <_strtol_l.constprop.0+0x74>
 800ac34:	f04f 37ff 	mov.w	r7, #4294967295
 800ac38:	e7e6      	b.n	800ac08 <_strtol_l.constprop.0+0x8c>
 800ac3a:	2f00      	cmp	r7, #0
 800ac3c:	da07      	bge.n	800ac4e <_strtol_l.constprop.0+0xd2>
 800ac3e:	2322      	movs	r3, #34	; 0x22
 800ac40:	4670      	mov	r0, lr
 800ac42:	f8c8 3000 	str.w	r3, [r8]
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	d0a4      	beq.n	800ab94 <_strtol_l.constprop.0+0x18>
 800ac4a:	1e69      	subs	r1, r5, #1
 800ac4c:	e005      	b.n	800ac5a <_strtol_l.constprop.0+0xde>
 800ac4e:	b106      	cbz	r6, 800ac52 <_strtol_l.constprop.0+0xd6>
 800ac50:	4240      	negs	r0, r0
 800ac52:	2a00      	cmp	r2, #0
 800ac54:	d09e      	beq.n	800ab94 <_strtol_l.constprop.0+0x18>
 800ac56:	2f00      	cmp	r7, #0
 800ac58:	d1f7      	bne.n	800ac4a <_strtol_l.constprop.0+0xce>
 800ac5a:	6011      	str	r1, [r2, #0]
 800ac5c:	e79a      	b.n	800ab94 <_strtol_l.constprop.0+0x18>
 800ac5e:	2430      	movs	r4, #48	; 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1b5      	bne.n	800abd0 <_strtol_l.constprop.0+0x54>
 800ac64:	2308      	movs	r3, #8
 800ac66:	e7b3      	b.n	800abd0 <_strtol_l.constprop.0+0x54>
 800ac68:	2c30      	cmp	r4, #48	; 0x30
 800ac6a:	d0a9      	beq.n	800abc0 <_strtol_l.constprop.0+0x44>
 800ac6c:	230a      	movs	r3, #10
 800ac6e:	e7af      	b.n	800abd0 <_strtol_l.constprop.0+0x54>
 800ac70:	0800c6e1 	.word	0x0800c6e1

0800ac74 <strtol>:
 800ac74:	4613      	mov	r3, r2
 800ac76:	460a      	mov	r2, r1
 800ac78:	4601      	mov	r1, r0
 800ac7a:	4802      	ldr	r0, [pc, #8]	; (800ac84 <strtol+0x10>)
 800ac7c:	6800      	ldr	r0, [r0, #0]
 800ac7e:	f7ff bf7d 	b.w	800ab7c <_strtol_l.constprop.0>
 800ac82:	bf00      	nop
 800ac84:	20000444 	.word	0x20000444

0800ac88 <__assert_func>:
 800ac88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac8a:	4614      	mov	r4, r2
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <__assert_func+0x2c>)
 800ac90:	4605      	mov	r5, r0
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68d8      	ldr	r0, [r3, #12]
 800ac96:	b14c      	cbz	r4, 800acac <__assert_func+0x24>
 800ac98:	4b07      	ldr	r3, [pc, #28]	; (800acb8 <__assert_func+0x30>)
 800ac9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac9e:	9100      	str	r1, [sp, #0]
 800aca0:	462b      	mov	r3, r5
 800aca2:	4906      	ldr	r1, [pc, #24]	; (800acbc <__assert_func+0x34>)
 800aca4:	f000 f80e 	bl	800acc4 <fiprintf>
 800aca8:	f000 fe1c 	bl	800b8e4 <abort>
 800acac:	4b04      	ldr	r3, [pc, #16]	; (800acc0 <__assert_func+0x38>)
 800acae:	461c      	mov	r4, r3
 800acb0:	e7f3      	b.n	800ac9a <__assert_func+0x12>
 800acb2:	bf00      	nop
 800acb4:	20000444 	.word	0x20000444
 800acb8:	0800c6a4 	.word	0x0800c6a4
 800acbc:	0800c6b1 	.word	0x0800c6b1
 800acc0:	0800c6df 	.word	0x0800c6df

0800acc4 <fiprintf>:
 800acc4:	b40e      	push	{r1, r2, r3}
 800acc6:	b503      	push	{r0, r1, lr}
 800acc8:	4601      	mov	r1, r0
 800acca:	ab03      	add	r3, sp, #12
 800accc:	4805      	ldr	r0, [pc, #20]	; (800ace4 <fiprintf+0x20>)
 800acce:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd2:	6800      	ldr	r0, [r0, #0]
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	f000 fa6f 	bl	800b1b8 <_vfiprintf_r>
 800acda:	b002      	add	sp, #8
 800acdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ace0:	b003      	add	sp, #12
 800ace2:	4770      	bx	lr
 800ace4:	20000444 	.word	0x20000444

0800ace8 <malloc>:
 800ace8:	4b02      	ldr	r3, [pc, #8]	; (800acf4 <malloc+0xc>)
 800acea:	4601      	mov	r1, r0
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f000 b86b 	b.w	800adc8 <_malloc_r>
 800acf2:	bf00      	nop
 800acf4:	20000444 	.word	0x20000444

0800acf8 <_free_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4605      	mov	r5, r0
 800acfc:	2900      	cmp	r1, #0
 800acfe:	d040      	beq.n	800ad82 <_free_r+0x8a>
 800ad00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad04:	1f0c      	subs	r4, r1, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bfb8      	it	lt
 800ad0a:	18e4      	addlt	r4, r4, r3
 800ad0c:	f001 f844 	bl	800bd98 <__malloc_lock>
 800ad10:	4a1c      	ldr	r2, [pc, #112]	; (800ad84 <_free_r+0x8c>)
 800ad12:	6813      	ldr	r3, [r2, #0]
 800ad14:	b933      	cbnz	r3, 800ad24 <_free_r+0x2c>
 800ad16:	6063      	str	r3, [r4, #4]
 800ad18:	6014      	str	r4, [r2, #0]
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad20:	f001 b840 	b.w	800bda4 <__malloc_unlock>
 800ad24:	42a3      	cmp	r3, r4
 800ad26:	d908      	bls.n	800ad3a <_free_r+0x42>
 800ad28:	6820      	ldr	r0, [r4, #0]
 800ad2a:	1821      	adds	r1, r4, r0
 800ad2c:	428b      	cmp	r3, r1
 800ad2e:	bf01      	itttt	eq
 800ad30:	6819      	ldreq	r1, [r3, #0]
 800ad32:	685b      	ldreq	r3, [r3, #4]
 800ad34:	1809      	addeq	r1, r1, r0
 800ad36:	6021      	streq	r1, [r4, #0]
 800ad38:	e7ed      	b.n	800ad16 <_free_r+0x1e>
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	b10b      	cbz	r3, 800ad44 <_free_r+0x4c>
 800ad40:	42a3      	cmp	r3, r4
 800ad42:	d9fa      	bls.n	800ad3a <_free_r+0x42>
 800ad44:	6811      	ldr	r1, [r2, #0]
 800ad46:	1850      	adds	r0, r2, r1
 800ad48:	42a0      	cmp	r0, r4
 800ad4a:	d10b      	bne.n	800ad64 <_free_r+0x6c>
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	4401      	add	r1, r0
 800ad50:	1850      	adds	r0, r2, r1
 800ad52:	4283      	cmp	r3, r0
 800ad54:	6011      	str	r1, [r2, #0]
 800ad56:	d1e0      	bne.n	800ad1a <_free_r+0x22>
 800ad58:	6818      	ldr	r0, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	4401      	add	r1, r0
 800ad5e:	6011      	str	r1, [r2, #0]
 800ad60:	6053      	str	r3, [r2, #4]
 800ad62:	e7da      	b.n	800ad1a <_free_r+0x22>
 800ad64:	d902      	bls.n	800ad6c <_free_r+0x74>
 800ad66:	230c      	movs	r3, #12
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	e7d6      	b.n	800ad1a <_free_r+0x22>
 800ad6c:	6820      	ldr	r0, [r4, #0]
 800ad6e:	1821      	adds	r1, r4, r0
 800ad70:	428b      	cmp	r3, r1
 800ad72:	bf01      	itttt	eq
 800ad74:	6819      	ldreq	r1, [r3, #0]
 800ad76:	685b      	ldreq	r3, [r3, #4]
 800ad78:	1809      	addeq	r1, r1, r0
 800ad7a:	6021      	streq	r1, [r4, #0]
 800ad7c:	6063      	str	r3, [r4, #4]
 800ad7e:	6054      	str	r4, [r2, #4]
 800ad80:	e7cb      	b.n	800ad1a <_free_r+0x22>
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	200023d4 	.word	0x200023d4

0800ad88 <sbrk_aligned>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	4e0e      	ldr	r6, [pc, #56]	; (800adc4 <sbrk_aligned+0x3c>)
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	6831      	ldr	r1, [r6, #0]
 800ad90:	4605      	mov	r5, r0
 800ad92:	b911      	cbnz	r1, 800ad9a <sbrk_aligned+0x12>
 800ad94:	f000 fcd6 	bl	800b744 <_sbrk_r>
 800ad98:	6030      	str	r0, [r6, #0]
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f000 fcd1 	bl	800b744 <_sbrk_r>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	d00a      	beq.n	800adbc <sbrk_aligned+0x34>
 800ada6:	1cc4      	adds	r4, r0, #3
 800ada8:	f024 0403 	bic.w	r4, r4, #3
 800adac:	42a0      	cmp	r0, r4
 800adae:	d007      	beq.n	800adc0 <sbrk_aligned+0x38>
 800adb0:	1a21      	subs	r1, r4, r0
 800adb2:	4628      	mov	r0, r5
 800adb4:	f000 fcc6 	bl	800b744 <_sbrk_r>
 800adb8:	3001      	adds	r0, #1
 800adba:	d101      	bne.n	800adc0 <sbrk_aligned+0x38>
 800adbc:	f04f 34ff 	mov.w	r4, #4294967295
 800adc0:	4620      	mov	r0, r4
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	200023d8 	.word	0x200023d8

0800adc8 <_malloc_r>:
 800adc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adcc:	1ccd      	adds	r5, r1, #3
 800adce:	f025 0503 	bic.w	r5, r5, #3
 800add2:	3508      	adds	r5, #8
 800add4:	2d0c      	cmp	r5, #12
 800add6:	bf38      	it	cc
 800add8:	250c      	movcc	r5, #12
 800adda:	2d00      	cmp	r5, #0
 800addc:	4607      	mov	r7, r0
 800adde:	db01      	blt.n	800ade4 <_malloc_r+0x1c>
 800ade0:	42a9      	cmp	r1, r5
 800ade2:	d905      	bls.n	800adf0 <_malloc_r+0x28>
 800ade4:	230c      	movs	r3, #12
 800ade6:	2600      	movs	r6, #0
 800ade8:	603b      	str	r3, [r7, #0]
 800adea:	4630      	mov	r0, r6
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf0:	4e2e      	ldr	r6, [pc, #184]	; (800aeac <_malloc_r+0xe4>)
 800adf2:	f000 ffd1 	bl	800bd98 <__malloc_lock>
 800adf6:	6833      	ldr	r3, [r6, #0]
 800adf8:	461c      	mov	r4, r3
 800adfa:	bb34      	cbnz	r4, 800ae4a <_malloc_r+0x82>
 800adfc:	4629      	mov	r1, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	f7ff ffc2 	bl	800ad88 <sbrk_aligned>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	4604      	mov	r4, r0
 800ae08:	d14d      	bne.n	800aea6 <_malloc_r+0xde>
 800ae0a:	6834      	ldr	r4, [r6, #0]
 800ae0c:	4626      	mov	r6, r4
 800ae0e:	2e00      	cmp	r6, #0
 800ae10:	d140      	bne.n	800ae94 <_malloc_r+0xcc>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	4631      	mov	r1, r6
 800ae16:	4638      	mov	r0, r7
 800ae18:	eb04 0803 	add.w	r8, r4, r3
 800ae1c:	f000 fc92 	bl	800b744 <_sbrk_r>
 800ae20:	4580      	cmp	r8, r0
 800ae22:	d13a      	bne.n	800ae9a <_malloc_r+0xd2>
 800ae24:	6821      	ldr	r1, [r4, #0]
 800ae26:	3503      	adds	r5, #3
 800ae28:	1a6d      	subs	r5, r5, r1
 800ae2a:	f025 0503 	bic.w	r5, r5, #3
 800ae2e:	3508      	adds	r5, #8
 800ae30:	2d0c      	cmp	r5, #12
 800ae32:	bf38      	it	cc
 800ae34:	250c      	movcc	r5, #12
 800ae36:	4638      	mov	r0, r7
 800ae38:	4629      	mov	r1, r5
 800ae3a:	f7ff ffa5 	bl	800ad88 <sbrk_aligned>
 800ae3e:	3001      	adds	r0, #1
 800ae40:	d02b      	beq.n	800ae9a <_malloc_r+0xd2>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	442b      	add	r3, r5
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	e00e      	b.n	800ae68 <_malloc_r+0xa0>
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	1b52      	subs	r2, r2, r5
 800ae4e:	d41e      	bmi.n	800ae8e <_malloc_r+0xc6>
 800ae50:	2a0b      	cmp	r2, #11
 800ae52:	d916      	bls.n	800ae82 <_malloc_r+0xba>
 800ae54:	1961      	adds	r1, r4, r5
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	6025      	str	r5, [r4, #0]
 800ae5a:	bf18      	it	ne
 800ae5c:	6059      	strne	r1, [r3, #4]
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	bf08      	it	eq
 800ae62:	6031      	streq	r1, [r6, #0]
 800ae64:	5162      	str	r2, [r4, r5]
 800ae66:	604b      	str	r3, [r1, #4]
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f104 060b 	add.w	r6, r4, #11
 800ae6e:	f000 ff99 	bl	800bda4 <__malloc_unlock>
 800ae72:	f026 0607 	bic.w	r6, r6, #7
 800ae76:	1d23      	adds	r3, r4, #4
 800ae78:	1af2      	subs	r2, r6, r3
 800ae7a:	d0b6      	beq.n	800adea <_malloc_r+0x22>
 800ae7c:	1b9b      	subs	r3, r3, r6
 800ae7e:	50a3      	str	r3, [r4, r2]
 800ae80:	e7b3      	b.n	800adea <_malloc_r+0x22>
 800ae82:	6862      	ldr	r2, [r4, #4]
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	bf0c      	ite	eq
 800ae88:	6032      	streq	r2, [r6, #0]
 800ae8a:	605a      	strne	r2, [r3, #4]
 800ae8c:	e7ec      	b.n	800ae68 <_malloc_r+0xa0>
 800ae8e:	4623      	mov	r3, r4
 800ae90:	6864      	ldr	r4, [r4, #4]
 800ae92:	e7b2      	b.n	800adfa <_malloc_r+0x32>
 800ae94:	4634      	mov	r4, r6
 800ae96:	6876      	ldr	r6, [r6, #4]
 800ae98:	e7b9      	b.n	800ae0e <_malloc_r+0x46>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	f000 ff80 	bl	800bda4 <__malloc_unlock>
 800aea4:	e7a1      	b.n	800adea <_malloc_r+0x22>
 800aea6:	6025      	str	r5, [r4, #0]
 800aea8:	e7de      	b.n	800ae68 <_malloc_r+0xa0>
 800aeaa:	bf00      	nop
 800aeac:	200023d4 	.word	0x200023d4

0800aeb0 <__ssputs_r>:
 800aeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb4:	688e      	ldr	r6, [r1, #8]
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	429e      	cmp	r6, r3
 800aeba:	460c      	mov	r4, r1
 800aebc:	4690      	mov	r8, r2
 800aebe:	461f      	mov	r7, r3
 800aec0:	d838      	bhi.n	800af34 <__ssputs_r+0x84>
 800aec2:	898a      	ldrh	r2, [r1, #12]
 800aec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aec8:	d032      	beq.n	800af30 <__ssputs_r+0x80>
 800aeca:	6825      	ldr	r5, [r4, #0]
 800aecc:	6909      	ldr	r1, [r1, #16]
 800aece:	3301      	adds	r3, #1
 800aed0:	eba5 0901 	sub.w	r9, r5, r1
 800aed4:	6965      	ldr	r5, [r4, #20]
 800aed6:	444b      	add	r3, r9
 800aed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aedc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aee0:	106d      	asrs	r5, r5, #1
 800aee2:	429d      	cmp	r5, r3
 800aee4:	bf38      	it	cc
 800aee6:	461d      	movcc	r5, r3
 800aee8:	0553      	lsls	r3, r2, #21
 800aeea:	d531      	bpl.n	800af50 <__ssputs_r+0xa0>
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7ff ff6b 	bl	800adc8 <_malloc_r>
 800aef2:	4606      	mov	r6, r0
 800aef4:	b950      	cbnz	r0, 800af0c <__ssputs_r+0x5c>
 800aef6:	230c      	movs	r3, #12
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	f8ca 3000 	str.w	r3, [sl]
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af06:	81a3      	strh	r3, [r4, #12]
 800af08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0c:	464a      	mov	r2, r9
 800af0e:	6921      	ldr	r1, [r4, #16]
 800af10:	f000 ff1a 	bl	800bd48 <memcpy>
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	6126      	str	r6, [r4, #16]
 800af22:	444e      	add	r6, r9
 800af24:	6026      	str	r6, [r4, #0]
 800af26:	463e      	mov	r6, r7
 800af28:	6165      	str	r5, [r4, #20]
 800af2a:	eba5 0509 	sub.w	r5, r5, r9
 800af2e:	60a5      	str	r5, [r4, #8]
 800af30:	42be      	cmp	r6, r7
 800af32:	d900      	bls.n	800af36 <__ssputs_r+0x86>
 800af34:	463e      	mov	r6, r7
 800af36:	4632      	mov	r2, r6
 800af38:	4641      	mov	r1, r8
 800af3a:	6820      	ldr	r0, [r4, #0]
 800af3c:	f000 ff12 	bl	800bd64 <memmove>
 800af40:	68a3      	ldr	r3, [r4, #8]
 800af42:	2000      	movs	r0, #0
 800af44:	1b9b      	subs	r3, r3, r6
 800af46:	60a3      	str	r3, [r4, #8]
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	4433      	add	r3, r6
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	e7db      	b.n	800af08 <__ssputs_r+0x58>
 800af50:	462a      	mov	r2, r5
 800af52:	f000 ff2d 	bl	800bdb0 <_realloc_r>
 800af56:	4606      	mov	r6, r0
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1e1      	bne.n	800af20 <__ssputs_r+0x70>
 800af5c:	4650      	mov	r0, sl
 800af5e:	6921      	ldr	r1, [r4, #16]
 800af60:	f7ff feca 	bl	800acf8 <_free_r>
 800af64:	e7c7      	b.n	800aef6 <__ssputs_r+0x46>
	...

0800af68 <_svfiprintf_r>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	4698      	mov	r8, r3
 800af6e:	898b      	ldrh	r3, [r1, #12]
 800af70:	4607      	mov	r7, r0
 800af72:	061b      	lsls	r3, r3, #24
 800af74:	460d      	mov	r5, r1
 800af76:	4614      	mov	r4, r2
 800af78:	b09d      	sub	sp, #116	; 0x74
 800af7a:	d50e      	bpl.n	800af9a <_svfiprintf_r+0x32>
 800af7c:	690b      	ldr	r3, [r1, #16]
 800af7e:	b963      	cbnz	r3, 800af9a <_svfiprintf_r+0x32>
 800af80:	2140      	movs	r1, #64	; 0x40
 800af82:	f7ff ff21 	bl	800adc8 <_malloc_r>
 800af86:	6028      	str	r0, [r5, #0]
 800af88:	6128      	str	r0, [r5, #16]
 800af8a:	b920      	cbnz	r0, 800af96 <_svfiprintf_r+0x2e>
 800af8c:	230c      	movs	r3, #12
 800af8e:	603b      	str	r3, [r7, #0]
 800af90:	f04f 30ff 	mov.w	r0, #4294967295
 800af94:	e0d1      	b.n	800b13a <_svfiprintf_r+0x1d2>
 800af96:	2340      	movs	r3, #64	; 0x40
 800af98:	616b      	str	r3, [r5, #20]
 800af9a:	2300      	movs	r3, #0
 800af9c:	9309      	str	r3, [sp, #36]	; 0x24
 800af9e:	2320      	movs	r3, #32
 800afa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afa4:	2330      	movs	r3, #48	; 0x30
 800afa6:	f04f 0901 	mov.w	r9, #1
 800afaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800afae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b154 <_svfiprintf_r+0x1ec>
 800afb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afb6:	4623      	mov	r3, r4
 800afb8:	469a      	mov	sl, r3
 800afba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afbe:	b10a      	cbz	r2, 800afc4 <_svfiprintf_r+0x5c>
 800afc0:	2a25      	cmp	r2, #37	; 0x25
 800afc2:	d1f9      	bne.n	800afb8 <_svfiprintf_r+0x50>
 800afc4:	ebba 0b04 	subs.w	fp, sl, r4
 800afc8:	d00b      	beq.n	800afe2 <_svfiprintf_r+0x7a>
 800afca:	465b      	mov	r3, fp
 800afcc:	4622      	mov	r2, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	4638      	mov	r0, r7
 800afd2:	f7ff ff6d 	bl	800aeb0 <__ssputs_r>
 800afd6:	3001      	adds	r0, #1
 800afd8:	f000 80aa 	beq.w	800b130 <_svfiprintf_r+0x1c8>
 800afdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afde:	445a      	add	r2, fp
 800afe0:	9209      	str	r2, [sp, #36]	; 0x24
 800afe2:	f89a 3000 	ldrb.w	r3, [sl]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 80a2 	beq.w	800b130 <_svfiprintf_r+0x1c8>
 800afec:	2300      	movs	r3, #0
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aff6:	f10a 0a01 	add.w	sl, sl, #1
 800affa:	9304      	str	r3, [sp, #16]
 800affc:	9307      	str	r3, [sp, #28]
 800affe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b002:	931a      	str	r3, [sp, #104]	; 0x68
 800b004:	4654      	mov	r4, sl
 800b006:	2205      	movs	r2, #5
 800b008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b00c:	4851      	ldr	r0, [pc, #324]	; (800b154 <_svfiprintf_r+0x1ec>)
 800b00e:	f000 fe8d 	bl	800bd2c <memchr>
 800b012:	9a04      	ldr	r2, [sp, #16]
 800b014:	b9d8      	cbnz	r0, 800b04e <_svfiprintf_r+0xe6>
 800b016:	06d0      	lsls	r0, r2, #27
 800b018:	bf44      	itt	mi
 800b01a:	2320      	movmi	r3, #32
 800b01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b020:	0711      	lsls	r1, r2, #28
 800b022:	bf44      	itt	mi
 800b024:	232b      	movmi	r3, #43	; 0x2b
 800b026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b02a:	f89a 3000 	ldrb.w	r3, [sl]
 800b02e:	2b2a      	cmp	r3, #42	; 0x2a
 800b030:	d015      	beq.n	800b05e <_svfiprintf_r+0xf6>
 800b032:	4654      	mov	r4, sl
 800b034:	2000      	movs	r0, #0
 800b036:	f04f 0c0a 	mov.w	ip, #10
 800b03a:	9a07      	ldr	r2, [sp, #28]
 800b03c:	4621      	mov	r1, r4
 800b03e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b042:	3b30      	subs	r3, #48	; 0x30
 800b044:	2b09      	cmp	r3, #9
 800b046:	d94e      	bls.n	800b0e6 <_svfiprintf_r+0x17e>
 800b048:	b1b0      	cbz	r0, 800b078 <_svfiprintf_r+0x110>
 800b04a:	9207      	str	r2, [sp, #28]
 800b04c:	e014      	b.n	800b078 <_svfiprintf_r+0x110>
 800b04e:	eba0 0308 	sub.w	r3, r0, r8
 800b052:	fa09 f303 	lsl.w	r3, r9, r3
 800b056:	4313      	orrs	r3, r2
 800b058:	46a2      	mov	sl, r4
 800b05a:	9304      	str	r3, [sp, #16]
 800b05c:	e7d2      	b.n	800b004 <_svfiprintf_r+0x9c>
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	1d19      	adds	r1, r3, #4
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	9103      	str	r1, [sp, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	bfbb      	ittet	lt
 800b06a:	425b      	neglt	r3, r3
 800b06c:	f042 0202 	orrlt.w	r2, r2, #2
 800b070:	9307      	strge	r3, [sp, #28]
 800b072:	9307      	strlt	r3, [sp, #28]
 800b074:	bfb8      	it	lt
 800b076:	9204      	strlt	r2, [sp, #16]
 800b078:	7823      	ldrb	r3, [r4, #0]
 800b07a:	2b2e      	cmp	r3, #46	; 0x2e
 800b07c:	d10c      	bne.n	800b098 <_svfiprintf_r+0x130>
 800b07e:	7863      	ldrb	r3, [r4, #1]
 800b080:	2b2a      	cmp	r3, #42	; 0x2a
 800b082:	d135      	bne.n	800b0f0 <_svfiprintf_r+0x188>
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	3402      	adds	r4, #2
 800b088:	1d1a      	adds	r2, r3, #4
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	9203      	str	r2, [sp, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	bfb8      	it	lt
 800b092:	f04f 33ff 	movlt.w	r3, #4294967295
 800b096:	9305      	str	r3, [sp, #20]
 800b098:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b158 <_svfiprintf_r+0x1f0>
 800b09c:	2203      	movs	r2, #3
 800b09e:	4650      	mov	r0, sl
 800b0a0:	7821      	ldrb	r1, [r4, #0]
 800b0a2:	f000 fe43 	bl	800bd2c <memchr>
 800b0a6:	b140      	cbz	r0, 800b0ba <_svfiprintf_r+0x152>
 800b0a8:	2340      	movs	r3, #64	; 0x40
 800b0aa:	eba0 000a 	sub.w	r0, r0, sl
 800b0ae:	fa03 f000 	lsl.w	r0, r3, r0
 800b0b2:	9b04      	ldr	r3, [sp, #16]
 800b0b4:	3401      	adds	r4, #1
 800b0b6:	4303      	orrs	r3, r0
 800b0b8:	9304      	str	r3, [sp, #16]
 800b0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0be:	2206      	movs	r2, #6
 800b0c0:	4826      	ldr	r0, [pc, #152]	; (800b15c <_svfiprintf_r+0x1f4>)
 800b0c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0c6:	f000 fe31 	bl	800bd2c <memchr>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d038      	beq.n	800b140 <_svfiprintf_r+0x1d8>
 800b0ce:	4b24      	ldr	r3, [pc, #144]	; (800b160 <_svfiprintf_r+0x1f8>)
 800b0d0:	bb1b      	cbnz	r3, 800b11a <_svfiprintf_r+0x1b2>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	3307      	adds	r3, #7
 800b0d6:	f023 0307 	bic.w	r3, r3, #7
 800b0da:	3308      	adds	r3, #8
 800b0dc:	9303      	str	r3, [sp, #12]
 800b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e0:	4433      	add	r3, r6
 800b0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e4:	e767      	b.n	800afb6 <_svfiprintf_r+0x4e>
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ee:	e7a5      	b.n	800b03c <_svfiprintf_r+0xd4>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f04f 0c0a 	mov.w	ip, #10
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	3401      	adds	r4, #1
 800b0fa:	9305      	str	r3, [sp, #20]
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b102:	3a30      	subs	r2, #48	; 0x30
 800b104:	2a09      	cmp	r2, #9
 800b106:	d903      	bls.n	800b110 <_svfiprintf_r+0x1a8>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d0c5      	beq.n	800b098 <_svfiprintf_r+0x130>
 800b10c:	9105      	str	r1, [sp, #20]
 800b10e:	e7c3      	b.n	800b098 <_svfiprintf_r+0x130>
 800b110:	4604      	mov	r4, r0
 800b112:	2301      	movs	r3, #1
 800b114:	fb0c 2101 	mla	r1, ip, r1, r2
 800b118:	e7f0      	b.n	800b0fc <_svfiprintf_r+0x194>
 800b11a:	ab03      	add	r3, sp, #12
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	462a      	mov	r2, r5
 800b120:	4638      	mov	r0, r7
 800b122:	4b10      	ldr	r3, [pc, #64]	; (800b164 <_svfiprintf_r+0x1fc>)
 800b124:	a904      	add	r1, sp, #16
 800b126:	f3af 8000 	nop.w
 800b12a:	1c42      	adds	r2, r0, #1
 800b12c:	4606      	mov	r6, r0
 800b12e:	d1d6      	bne.n	800b0de <_svfiprintf_r+0x176>
 800b130:	89ab      	ldrh	r3, [r5, #12]
 800b132:	065b      	lsls	r3, r3, #25
 800b134:	f53f af2c 	bmi.w	800af90 <_svfiprintf_r+0x28>
 800b138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b13a:	b01d      	add	sp, #116	; 0x74
 800b13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b140:	ab03      	add	r3, sp, #12
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	462a      	mov	r2, r5
 800b146:	4638      	mov	r0, r7
 800b148:	4b06      	ldr	r3, [pc, #24]	; (800b164 <_svfiprintf_r+0x1fc>)
 800b14a:	a904      	add	r1, sp, #16
 800b14c:	f000 f9d4 	bl	800b4f8 <_printf_i>
 800b150:	e7eb      	b.n	800b12a <_svfiprintf_r+0x1c2>
 800b152:	bf00      	nop
 800b154:	0800c7e1 	.word	0x0800c7e1
 800b158:	0800c7e7 	.word	0x0800c7e7
 800b15c:	0800c7eb 	.word	0x0800c7eb
 800b160:	00000000 	.word	0x00000000
 800b164:	0800aeb1 	.word	0x0800aeb1

0800b168 <__sfputc_r>:
 800b168:	6893      	ldr	r3, [r2, #8]
 800b16a:	b410      	push	{r4}
 800b16c:	3b01      	subs	r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	6093      	str	r3, [r2, #8]
 800b172:	da07      	bge.n	800b184 <__sfputc_r+0x1c>
 800b174:	6994      	ldr	r4, [r2, #24]
 800b176:	42a3      	cmp	r3, r4
 800b178:	db01      	blt.n	800b17e <__sfputc_r+0x16>
 800b17a:	290a      	cmp	r1, #10
 800b17c:	d102      	bne.n	800b184 <__sfputc_r+0x1c>
 800b17e:	bc10      	pop	{r4}
 800b180:	f000 baf0 	b.w	800b764 <__swbuf_r>
 800b184:	6813      	ldr	r3, [r2, #0]
 800b186:	1c58      	adds	r0, r3, #1
 800b188:	6010      	str	r0, [r2, #0]
 800b18a:	7019      	strb	r1, [r3, #0]
 800b18c:	4608      	mov	r0, r1
 800b18e:	bc10      	pop	{r4}
 800b190:	4770      	bx	lr

0800b192 <__sfputs_r>:
 800b192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b194:	4606      	mov	r6, r0
 800b196:	460f      	mov	r7, r1
 800b198:	4614      	mov	r4, r2
 800b19a:	18d5      	adds	r5, r2, r3
 800b19c:	42ac      	cmp	r4, r5
 800b19e:	d101      	bne.n	800b1a4 <__sfputs_r+0x12>
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	e007      	b.n	800b1b4 <__sfputs_r+0x22>
 800b1a4:	463a      	mov	r2, r7
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ac:	f7ff ffdc 	bl	800b168 <__sfputc_r>
 800b1b0:	1c43      	adds	r3, r0, #1
 800b1b2:	d1f3      	bne.n	800b19c <__sfputs_r+0xa>
 800b1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1b8 <_vfiprintf_r>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	460d      	mov	r5, r1
 800b1be:	4614      	mov	r4, r2
 800b1c0:	4698      	mov	r8, r3
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	b09d      	sub	sp, #116	; 0x74
 800b1c6:	b118      	cbz	r0, 800b1d0 <_vfiprintf_r+0x18>
 800b1c8:	6983      	ldr	r3, [r0, #24]
 800b1ca:	b90b      	cbnz	r3, 800b1d0 <_vfiprintf_r+0x18>
 800b1cc:	f000 fca8 	bl	800bb20 <__sinit>
 800b1d0:	4b89      	ldr	r3, [pc, #548]	; (800b3f8 <_vfiprintf_r+0x240>)
 800b1d2:	429d      	cmp	r5, r3
 800b1d4:	d11b      	bne.n	800b20e <_vfiprintf_r+0x56>
 800b1d6:	6875      	ldr	r5, [r6, #4]
 800b1d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1da:	07d9      	lsls	r1, r3, #31
 800b1dc:	d405      	bmi.n	800b1ea <_vfiprintf_r+0x32>
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	059a      	lsls	r2, r3, #22
 800b1e2:	d402      	bmi.n	800b1ea <_vfiprintf_r+0x32>
 800b1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1e6:	f000 fd39 	bl	800bc5c <__retarget_lock_acquire_recursive>
 800b1ea:	89ab      	ldrh	r3, [r5, #12]
 800b1ec:	071b      	lsls	r3, r3, #28
 800b1ee:	d501      	bpl.n	800b1f4 <_vfiprintf_r+0x3c>
 800b1f0:	692b      	ldr	r3, [r5, #16]
 800b1f2:	b9eb      	cbnz	r3, 800b230 <_vfiprintf_r+0x78>
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f000 fb06 	bl	800b808 <__swsetup_r>
 800b1fc:	b1c0      	cbz	r0, 800b230 <_vfiprintf_r+0x78>
 800b1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b200:	07dc      	lsls	r4, r3, #31
 800b202:	d50e      	bpl.n	800b222 <_vfiprintf_r+0x6a>
 800b204:	f04f 30ff 	mov.w	r0, #4294967295
 800b208:	b01d      	add	sp, #116	; 0x74
 800b20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20e:	4b7b      	ldr	r3, [pc, #492]	; (800b3fc <_vfiprintf_r+0x244>)
 800b210:	429d      	cmp	r5, r3
 800b212:	d101      	bne.n	800b218 <_vfiprintf_r+0x60>
 800b214:	68b5      	ldr	r5, [r6, #8]
 800b216:	e7df      	b.n	800b1d8 <_vfiprintf_r+0x20>
 800b218:	4b79      	ldr	r3, [pc, #484]	; (800b400 <_vfiprintf_r+0x248>)
 800b21a:	429d      	cmp	r5, r3
 800b21c:	bf08      	it	eq
 800b21e:	68f5      	ldreq	r5, [r6, #12]
 800b220:	e7da      	b.n	800b1d8 <_vfiprintf_r+0x20>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	0598      	lsls	r0, r3, #22
 800b226:	d4ed      	bmi.n	800b204 <_vfiprintf_r+0x4c>
 800b228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b22a:	f000 fd18 	bl	800bc5e <__retarget_lock_release_recursive>
 800b22e:	e7e9      	b.n	800b204 <_vfiprintf_r+0x4c>
 800b230:	2300      	movs	r3, #0
 800b232:	9309      	str	r3, [sp, #36]	; 0x24
 800b234:	2320      	movs	r3, #32
 800b236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b23a:	2330      	movs	r3, #48	; 0x30
 800b23c:	f04f 0901 	mov.w	r9, #1
 800b240:	f8cd 800c 	str.w	r8, [sp, #12]
 800b244:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b404 <_vfiprintf_r+0x24c>
 800b248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b24c:	4623      	mov	r3, r4
 800b24e:	469a      	mov	sl, r3
 800b250:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b254:	b10a      	cbz	r2, 800b25a <_vfiprintf_r+0xa2>
 800b256:	2a25      	cmp	r2, #37	; 0x25
 800b258:	d1f9      	bne.n	800b24e <_vfiprintf_r+0x96>
 800b25a:	ebba 0b04 	subs.w	fp, sl, r4
 800b25e:	d00b      	beq.n	800b278 <_vfiprintf_r+0xc0>
 800b260:	465b      	mov	r3, fp
 800b262:	4622      	mov	r2, r4
 800b264:	4629      	mov	r1, r5
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ff93 	bl	800b192 <__sfputs_r>
 800b26c:	3001      	adds	r0, #1
 800b26e:	f000 80aa 	beq.w	800b3c6 <_vfiprintf_r+0x20e>
 800b272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b274:	445a      	add	r2, fp
 800b276:	9209      	str	r2, [sp, #36]	; 0x24
 800b278:	f89a 3000 	ldrb.w	r3, [sl]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80a2 	beq.w	800b3c6 <_vfiprintf_r+0x20e>
 800b282:	2300      	movs	r3, #0
 800b284:	f04f 32ff 	mov.w	r2, #4294967295
 800b288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b28c:	f10a 0a01 	add.w	sl, sl, #1
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	9307      	str	r3, [sp, #28]
 800b294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b298:	931a      	str	r3, [sp, #104]	; 0x68
 800b29a:	4654      	mov	r4, sl
 800b29c:	2205      	movs	r2, #5
 800b29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a2:	4858      	ldr	r0, [pc, #352]	; (800b404 <_vfiprintf_r+0x24c>)
 800b2a4:	f000 fd42 	bl	800bd2c <memchr>
 800b2a8:	9a04      	ldr	r2, [sp, #16]
 800b2aa:	b9d8      	cbnz	r0, 800b2e4 <_vfiprintf_r+0x12c>
 800b2ac:	06d1      	lsls	r1, r2, #27
 800b2ae:	bf44      	itt	mi
 800b2b0:	2320      	movmi	r3, #32
 800b2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2b6:	0713      	lsls	r3, r2, #28
 800b2b8:	bf44      	itt	mi
 800b2ba:	232b      	movmi	r3, #43	; 0x2b
 800b2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c6:	d015      	beq.n	800b2f4 <_vfiprintf_r+0x13c>
 800b2c8:	4654      	mov	r4, sl
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	f04f 0c0a 	mov.w	ip, #10
 800b2d0:	9a07      	ldr	r2, [sp, #28]
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2d8:	3b30      	subs	r3, #48	; 0x30
 800b2da:	2b09      	cmp	r3, #9
 800b2dc:	d94e      	bls.n	800b37c <_vfiprintf_r+0x1c4>
 800b2de:	b1b0      	cbz	r0, 800b30e <_vfiprintf_r+0x156>
 800b2e0:	9207      	str	r2, [sp, #28]
 800b2e2:	e014      	b.n	800b30e <_vfiprintf_r+0x156>
 800b2e4:	eba0 0308 	sub.w	r3, r0, r8
 800b2e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	46a2      	mov	sl, r4
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	e7d2      	b.n	800b29a <_vfiprintf_r+0xe2>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	1d19      	adds	r1, r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	9103      	str	r1, [sp, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfbb      	ittet	lt
 800b300:	425b      	neglt	r3, r3
 800b302:	f042 0202 	orrlt.w	r2, r2, #2
 800b306:	9307      	strge	r3, [sp, #28]
 800b308:	9307      	strlt	r3, [sp, #28]
 800b30a:	bfb8      	it	lt
 800b30c:	9204      	strlt	r2, [sp, #16]
 800b30e:	7823      	ldrb	r3, [r4, #0]
 800b310:	2b2e      	cmp	r3, #46	; 0x2e
 800b312:	d10c      	bne.n	800b32e <_vfiprintf_r+0x176>
 800b314:	7863      	ldrb	r3, [r4, #1]
 800b316:	2b2a      	cmp	r3, #42	; 0x2a
 800b318:	d135      	bne.n	800b386 <_vfiprintf_r+0x1ce>
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	3402      	adds	r4, #2
 800b31e:	1d1a      	adds	r2, r3, #4
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	9203      	str	r2, [sp, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	bfb8      	it	lt
 800b328:	f04f 33ff 	movlt.w	r3, #4294967295
 800b32c:	9305      	str	r3, [sp, #20]
 800b32e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b408 <_vfiprintf_r+0x250>
 800b332:	2203      	movs	r2, #3
 800b334:	4650      	mov	r0, sl
 800b336:	7821      	ldrb	r1, [r4, #0]
 800b338:	f000 fcf8 	bl	800bd2c <memchr>
 800b33c:	b140      	cbz	r0, 800b350 <_vfiprintf_r+0x198>
 800b33e:	2340      	movs	r3, #64	; 0x40
 800b340:	eba0 000a 	sub.w	r0, r0, sl
 800b344:	fa03 f000 	lsl.w	r0, r3, r0
 800b348:	9b04      	ldr	r3, [sp, #16]
 800b34a:	3401      	adds	r4, #1
 800b34c:	4303      	orrs	r3, r0
 800b34e:	9304      	str	r3, [sp, #16]
 800b350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b354:	2206      	movs	r2, #6
 800b356:	482d      	ldr	r0, [pc, #180]	; (800b40c <_vfiprintf_r+0x254>)
 800b358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b35c:	f000 fce6 	bl	800bd2c <memchr>
 800b360:	2800      	cmp	r0, #0
 800b362:	d03f      	beq.n	800b3e4 <_vfiprintf_r+0x22c>
 800b364:	4b2a      	ldr	r3, [pc, #168]	; (800b410 <_vfiprintf_r+0x258>)
 800b366:	bb1b      	cbnz	r3, 800b3b0 <_vfiprintf_r+0x1f8>
 800b368:	9b03      	ldr	r3, [sp, #12]
 800b36a:	3307      	adds	r3, #7
 800b36c:	f023 0307 	bic.w	r3, r3, #7
 800b370:	3308      	adds	r3, #8
 800b372:	9303      	str	r3, [sp, #12]
 800b374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b376:	443b      	add	r3, r7
 800b378:	9309      	str	r3, [sp, #36]	; 0x24
 800b37a:	e767      	b.n	800b24c <_vfiprintf_r+0x94>
 800b37c:	460c      	mov	r4, r1
 800b37e:	2001      	movs	r0, #1
 800b380:	fb0c 3202 	mla	r2, ip, r2, r3
 800b384:	e7a5      	b.n	800b2d2 <_vfiprintf_r+0x11a>
 800b386:	2300      	movs	r3, #0
 800b388:	f04f 0c0a 	mov.w	ip, #10
 800b38c:	4619      	mov	r1, r3
 800b38e:	3401      	adds	r4, #1
 800b390:	9305      	str	r3, [sp, #20]
 800b392:	4620      	mov	r0, r4
 800b394:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b398:	3a30      	subs	r2, #48	; 0x30
 800b39a:	2a09      	cmp	r2, #9
 800b39c:	d903      	bls.n	800b3a6 <_vfiprintf_r+0x1ee>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0c5      	beq.n	800b32e <_vfiprintf_r+0x176>
 800b3a2:	9105      	str	r1, [sp, #20]
 800b3a4:	e7c3      	b.n	800b32e <_vfiprintf_r+0x176>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ae:	e7f0      	b.n	800b392 <_vfiprintf_r+0x1da>
 800b3b0:	ab03      	add	r3, sp, #12
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	462a      	mov	r2, r5
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	4b16      	ldr	r3, [pc, #88]	; (800b414 <_vfiprintf_r+0x25c>)
 800b3ba:	a904      	add	r1, sp, #16
 800b3bc:	f3af 8000 	nop.w
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	1c78      	adds	r0, r7, #1
 800b3c4:	d1d6      	bne.n	800b374 <_vfiprintf_r+0x1bc>
 800b3c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3c8:	07d9      	lsls	r1, r3, #31
 800b3ca:	d405      	bmi.n	800b3d8 <_vfiprintf_r+0x220>
 800b3cc:	89ab      	ldrh	r3, [r5, #12]
 800b3ce:	059a      	lsls	r2, r3, #22
 800b3d0:	d402      	bmi.n	800b3d8 <_vfiprintf_r+0x220>
 800b3d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3d4:	f000 fc43 	bl	800bc5e <__retarget_lock_release_recursive>
 800b3d8:	89ab      	ldrh	r3, [r5, #12]
 800b3da:	065b      	lsls	r3, r3, #25
 800b3dc:	f53f af12 	bmi.w	800b204 <_vfiprintf_r+0x4c>
 800b3e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3e2:	e711      	b.n	800b208 <_vfiprintf_r+0x50>
 800b3e4:	ab03      	add	r3, sp, #12
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	462a      	mov	r2, r5
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	4b09      	ldr	r3, [pc, #36]	; (800b414 <_vfiprintf_r+0x25c>)
 800b3ee:	a904      	add	r1, sp, #16
 800b3f0:	f000 f882 	bl	800b4f8 <_printf_i>
 800b3f4:	e7e4      	b.n	800b3c0 <_vfiprintf_r+0x208>
 800b3f6:	bf00      	nop
 800b3f8:	0800c834 	.word	0x0800c834
 800b3fc:	0800c854 	.word	0x0800c854
 800b400:	0800c814 	.word	0x0800c814
 800b404:	0800c7e1 	.word	0x0800c7e1
 800b408:	0800c7e7 	.word	0x0800c7e7
 800b40c:	0800c7eb 	.word	0x0800c7eb
 800b410:	00000000 	.word	0x00000000
 800b414:	0800b193 	.word	0x0800b193

0800b418 <_printf_common>:
 800b418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b41c:	4616      	mov	r6, r2
 800b41e:	4699      	mov	r9, r3
 800b420:	688a      	ldr	r2, [r1, #8]
 800b422:	690b      	ldr	r3, [r1, #16]
 800b424:	4607      	mov	r7, r0
 800b426:	4293      	cmp	r3, r2
 800b428:	bfb8      	it	lt
 800b42a:	4613      	movlt	r3, r2
 800b42c:	6033      	str	r3, [r6, #0]
 800b42e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b432:	460c      	mov	r4, r1
 800b434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b438:	b10a      	cbz	r2, 800b43e <_printf_common+0x26>
 800b43a:	3301      	adds	r3, #1
 800b43c:	6033      	str	r3, [r6, #0]
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	0699      	lsls	r1, r3, #26
 800b442:	bf42      	ittt	mi
 800b444:	6833      	ldrmi	r3, [r6, #0]
 800b446:	3302      	addmi	r3, #2
 800b448:	6033      	strmi	r3, [r6, #0]
 800b44a:	6825      	ldr	r5, [r4, #0]
 800b44c:	f015 0506 	ands.w	r5, r5, #6
 800b450:	d106      	bne.n	800b460 <_printf_common+0x48>
 800b452:	f104 0a19 	add.w	sl, r4, #25
 800b456:	68e3      	ldr	r3, [r4, #12]
 800b458:	6832      	ldr	r2, [r6, #0]
 800b45a:	1a9b      	subs	r3, r3, r2
 800b45c:	42ab      	cmp	r3, r5
 800b45e:	dc28      	bgt.n	800b4b2 <_printf_common+0x9a>
 800b460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b464:	1e13      	subs	r3, r2, #0
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	bf18      	it	ne
 800b46a:	2301      	movne	r3, #1
 800b46c:	0692      	lsls	r2, r2, #26
 800b46e:	d42d      	bmi.n	800b4cc <_printf_common+0xb4>
 800b470:	4649      	mov	r1, r9
 800b472:	4638      	mov	r0, r7
 800b474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b478:	47c0      	blx	r8
 800b47a:	3001      	adds	r0, #1
 800b47c:	d020      	beq.n	800b4c0 <_printf_common+0xa8>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	68e5      	ldr	r5, [r4, #12]
 800b482:	f003 0306 	and.w	r3, r3, #6
 800b486:	2b04      	cmp	r3, #4
 800b488:	bf18      	it	ne
 800b48a:	2500      	movne	r5, #0
 800b48c:	6832      	ldr	r2, [r6, #0]
 800b48e:	f04f 0600 	mov.w	r6, #0
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	bf08      	it	eq
 800b496:	1aad      	subeq	r5, r5, r2
 800b498:	6922      	ldr	r2, [r4, #16]
 800b49a:	bf08      	it	eq
 800b49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	bfc4      	itt	gt
 800b4a4:	1a9b      	subgt	r3, r3, r2
 800b4a6:	18ed      	addgt	r5, r5, r3
 800b4a8:	341a      	adds	r4, #26
 800b4aa:	42b5      	cmp	r5, r6
 800b4ac:	d11a      	bne.n	800b4e4 <_printf_common+0xcc>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e008      	b.n	800b4c4 <_printf_common+0xac>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4652      	mov	r2, sl
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	47c0      	blx	r8
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d103      	bne.n	800b4c8 <_printf_common+0xb0>
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	e7c4      	b.n	800b456 <_printf_common+0x3e>
 800b4cc:	2030      	movs	r0, #48	; 0x30
 800b4ce:	18e1      	adds	r1, r4, r3
 800b4d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4da:	4422      	add	r2, r4
 800b4dc:	3302      	adds	r3, #2
 800b4de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4e2:	e7c5      	b.n	800b470 <_printf_common+0x58>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c0      	blx	r8
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d0e6      	beq.n	800b4c0 <_printf_common+0xa8>
 800b4f2:	3601      	adds	r6, #1
 800b4f4:	e7d9      	b.n	800b4aa <_printf_common+0x92>
	...

0800b4f8 <_printf_i>:
 800b4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fc:	7e0f      	ldrb	r7, [r1, #24]
 800b4fe:	4691      	mov	r9, r2
 800b500:	2f78      	cmp	r7, #120	; 0x78
 800b502:	4680      	mov	r8, r0
 800b504:	460c      	mov	r4, r1
 800b506:	469a      	mov	sl, r3
 800b508:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b50e:	d807      	bhi.n	800b520 <_printf_i+0x28>
 800b510:	2f62      	cmp	r7, #98	; 0x62
 800b512:	d80a      	bhi.n	800b52a <_printf_i+0x32>
 800b514:	2f00      	cmp	r7, #0
 800b516:	f000 80d9 	beq.w	800b6cc <_printf_i+0x1d4>
 800b51a:	2f58      	cmp	r7, #88	; 0x58
 800b51c:	f000 80a4 	beq.w	800b668 <_printf_i+0x170>
 800b520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b528:	e03a      	b.n	800b5a0 <_printf_i+0xa8>
 800b52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b52e:	2b15      	cmp	r3, #21
 800b530:	d8f6      	bhi.n	800b520 <_printf_i+0x28>
 800b532:	a101      	add	r1, pc, #4	; (adr r1, 800b538 <_printf_i+0x40>)
 800b534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b538:	0800b591 	.word	0x0800b591
 800b53c:	0800b5a5 	.word	0x0800b5a5
 800b540:	0800b521 	.word	0x0800b521
 800b544:	0800b521 	.word	0x0800b521
 800b548:	0800b521 	.word	0x0800b521
 800b54c:	0800b521 	.word	0x0800b521
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b521 	.word	0x0800b521
 800b558:	0800b521 	.word	0x0800b521
 800b55c:	0800b521 	.word	0x0800b521
 800b560:	0800b521 	.word	0x0800b521
 800b564:	0800b6b3 	.word	0x0800b6b3
 800b568:	0800b5d5 	.word	0x0800b5d5
 800b56c:	0800b695 	.word	0x0800b695
 800b570:	0800b521 	.word	0x0800b521
 800b574:	0800b521 	.word	0x0800b521
 800b578:	0800b6d5 	.word	0x0800b6d5
 800b57c:	0800b521 	.word	0x0800b521
 800b580:	0800b5d5 	.word	0x0800b5d5
 800b584:	0800b521 	.word	0x0800b521
 800b588:	0800b521 	.word	0x0800b521
 800b58c:	0800b69d 	.word	0x0800b69d
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	1d1a      	adds	r2, r3, #4
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	602a      	str	r2, [r5, #0]
 800b598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e0a4      	b.n	800b6ee <_printf_i+0x1f6>
 800b5a4:	6820      	ldr	r0, [r4, #0]
 800b5a6:	6829      	ldr	r1, [r5, #0]
 800b5a8:	0606      	lsls	r6, r0, #24
 800b5aa:	f101 0304 	add.w	r3, r1, #4
 800b5ae:	d50a      	bpl.n	800b5c6 <_printf_i+0xce>
 800b5b0:	680e      	ldr	r6, [r1, #0]
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	2e00      	cmp	r6, #0
 800b5b6:	da03      	bge.n	800b5c0 <_printf_i+0xc8>
 800b5b8:	232d      	movs	r3, #45	; 0x2d
 800b5ba:	4276      	negs	r6, r6
 800b5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5c0:	230a      	movs	r3, #10
 800b5c2:	485e      	ldr	r0, [pc, #376]	; (800b73c <_printf_i+0x244>)
 800b5c4:	e019      	b.n	800b5fa <_printf_i+0x102>
 800b5c6:	680e      	ldr	r6, [r1, #0]
 800b5c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5cc:	602b      	str	r3, [r5, #0]
 800b5ce:	bf18      	it	ne
 800b5d0:	b236      	sxthne	r6, r6
 800b5d2:	e7ef      	b.n	800b5b4 <_printf_i+0xbc>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	1d19      	adds	r1, r3, #4
 800b5da:	6029      	str	r1, [r5, #0]
 800b5dc:	0601      	lsls	r1, r0, #24
 800b5de:	d501      	bpl.n	800b5e4 <_printf_i+0xec>
 800b5e0:	681e      	ldr	r6, [r3, #0]
 800b5e2:	e002      	b.n	800b5ea <_printf_i+0xf2>
 800b5e4:	0646      	lsls	r6, r0, #25
 800b5e6:	d5fb      	bpl.n	800b5e0 <_printf_i+0xe8>
 800b5e8:	881e      	ldrh	r6, [r3, #0]
 800b5ea:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ec:	bf0c      	ite	eq
 800b5ee:	2308      	moveq	r3, #8
 800b5f0:	230a      	movne	r3, #10
 800b5f2:	4852      	ldr	r0, [pc, #328]	; (800b73c <_printf_i+0x244>)
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5fa:	6865      	ldr	r5, [r4, #4]
 800b5fc:	2d00      	cmp	r5, #0
 800b5fe:	bfa8      	it	ge
 800b600:	6821      	ldrge	r1, [r4, #0]
 800b602:	60a5      	str	r5, [r4, #8]
 800b604:	bfa4      	itt	ge
 800b606:	f021 0104 	bicge.w	r1, r1, #4
 800b60a:	6021      	strge	r1, [r4, #0]
 800b60c:	b90e      	cbnz	r6, 800b612 <_printf_i+0x11a>
 800b60e:	2d00      	cmp	r5, #0
 800b610:	d04d      	beq.n	800b6ae <_printf_i+0x1b6>
 800b612:	4615      	mov	r5, r2
 800b614:	fbb6 f1f3 	udiv	r1, r6, r3
 800b618:	fb03 6711 	mls	r7, r3, r1, r6
 800b61c:	5dc7      	ldrb	r7, [r0, r7]
 800b61e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b622:	4637      	mov	r7, r6
 800b624:	42bb      	cmp	r3, r7
 800b626:	460e      	mov	r6, r1
 800b628:	d9f4      	bls.n	800b614 <_printf_i+0x11c>
 800b62a:	2b08      	cmp	r3, #8
 800b62c:	d10b      	bne.n	800b646 <_printf_i+0x14e>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	07de      	lsls	r6, r3, #31
 800b632:	d508      	bpl.n	800b646 <_printf_i+0x14e>
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	6861      	ldr	r1, [r4, #4]
 800b638:	4299      	cmp	r1, r3
 800b63a:	bfde      	ittt	le
 800b63c:	2330      	movle	r3, #48	; 0x30
 800b63e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b642:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b646:	1b52      	subs	r2, r2, r5
 800b648:	6122      	str	r2, [r4, #16]
 800b64a:	464b      	mov	r3, r9
 800b64c:	4621      	mov	r1, r4
 800b64e:	4640      	mov	r0, r8
 800b650:	f8cd a000 	str.w	sl, [sp]
 800b654:	aa03      	add	r2, sp, #12
 800b656:	f7ff fedf 	bl	800b418 <_printf_common>
 800b65a:	3001      	adds	r0, #1
 800b65c:	d14c      	bne.n	800b6f8 <_printf_i+0x200>
 800b65e:	f04f 30ff 	mov.w	r0, #4294967295
 800b662:	b004      	add	sp, #16
 800b664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b668:	4834      	ldr	r0, [pc, #208]	; (800b73c <_printf_i+0x244>)
 800b66a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b66e:	6829      	ldr	r1, [r5, #0]
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	f851 6b04 	ldr.w	r6, [r1], #4
 800b676:	6029      	str	r1, [r5, #0]
 800b678:	061d      	lsls	r5, r3, #24
 800b67a:	d514      	bpl.n	800b6a6 <_printf_i+0x1ae>
 800b67c:	07df      	lsls	r7, r3, #31
 800b67e:	bf44      	itt	mi
 800b680:	f043 0320 	orrmi.w	r3, r3, #32
 800b684:	6023      	strmi	r3, [r4, #0]
 800b686:	b91e      	cbnz	r6, 800b690 <_printf_i+0x198>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	f023 0320 	bic.w	r3, r3, #32
 800b68e:	6023      	str	r3, [r4, #0]
 800b690:	2310      	movs	r3, #16
 800b692:	e7af      	b.n	800b5f4 <_printf_i+0xfc>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	f043 0320 	orr.w	r3, r3, #32
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	2378      	movs	r3, #120	; 0x78
 800b69e:	4828      	ldr	r0, [pc, #160]	; (800b740 <_printf_i+0x248>)
 800b6a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6a4:	e7e3      	b.n	800b66e <_printf_i+0x176>
 800b6a6:	0659      	lsls	r1, r3, #25
 800b6a8:	bf48      	it	mi
 800b6aa:	b2b6      	uxthmi	r6, r6
 800b6ac:	e7e6      	b.n	800b67c <_printf_i+0x184>
 800b6ae:	4615      	mov	r5, r2
 800b6b0:	e7bb      	b.n	800b62a <_printf_i+0x132>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	6826      	ldr	r6, [r4, #0]
 800b6b6:	1d18      	adds	r0, r3, #4
 800b6b8:	6961      	ldr	r1, [r4, #20]
 800b6ba:	6028      	str	r0, [r5, #0]
 800b6bc:	0635      	lsls	r5, r6, #24
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	d501      	bpl.n	800b6c6 <_printf_i+0x1ce>
 800b6c2:	6019      	str	r1, [r3, #0]
 800b6c4:	e002      	b.n	800b6cc <_printf_i+0x1d4>
 800b6c6:	0670      	lsls	r0, r6, #25
 800b6c8:	d5fb      	bpl.n	800b6c2 <_printf_i+0x1ca>
 800b6ca:	8019      	strh	r1, [r3, #0]
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4615      	mov	r5, r2
 800b6d0:	6123      	str	r3, [r4, #16]
 800b6d2:	e7ba      	b.n	800b64a <_printf_i+0x152>
 800b6d4:	682b      	ldr	r3, [r5, #0]
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	1d1a      	adds	r2, r3, #4
 800b6da:	602a      	str	r2, [r5, #0]
 800b6dc:	681d      	ldr	r5, [r3, #0]
 800b6de:	6862      	ldr	r2, [r4, #4]
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f000 fb23 	bl	800bd2c <memchr>
 800b6e6:	b108      	cbz	r0, 800b6ec <_printf_i+0x1f4>
 800b6e8:	1b40      	subs	r0, r0, r5
 800b6ea:	6060      	str	r0, [r4, #4]
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	6123      	str	r3, [r4, #16]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f6:	e7a8      	b.n	800b64a <_printf_i+0x152>
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	47d0      	blx	sl
 800b702:	3001      	adds	r0, #1
 800b704:	d0ab      	beq.n	800b65e <_printf_i+0x166>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	079b      	lsls	r3, r3, #30
 800b70a:	d413      	bmi.n	800b734 <_printf_i+0x23c>
 800b70c:	68e0      	ldr	r0, [r4, #12]
 800b70e:	9b03      	ldr	r3, [sp, #12]
 800b710:	4298      	cmp	r0, r3
 800b712:	bfb8      	it	lt
 800b714:	4618      	movlt	r0, r3
 800b716:	e7a4      	b.n	800b662 <_printf_i+0x16a>
 800b718:	2301      	movs	r3, #1
 800b71a:	4632      	mov	r2, r6
 800b71c:	4649      	mov	r1, r9
 800b71e:	4640      	mov	r0, r8
 800b720:	47d0      	blx	sl
 800b722:	3001      	adds	r0, #1
 800b724:	d09b      	beq.n	800b65e <_printf_i+0x166>
 800b726:	3501      	adds	r5, #1
 800b728:	68e3      	ldr	r3, [r4, #12]
 800b72a:	9903      	ldr	r1, [sp, #12]
 800b72c:	1a5b      	subs	r3, r3, r1
 800b72e:	42ab      	cmp	r3, r5
 800b730:	dcf2      	bgt.n	800b718 <_printf_i+0x220>
 800b732:	e7eb      	b.n	800b70c <_printf_i+0x214>
 800b734:	2500      	movs	r5, #0
 800b736:	f104 0619 	add.w	r6, r4, #25
 800b73a:	e7f5      	b.n	800b728 <_printf_i+0x230>
 800b73c:	0800c7f2 	.word	0x0800c7f2
 800b740:	0800c803 	.word	0x0800c803

0800b744 <_sbrk_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	2300      	movs	r3, #0
 800b748:	4d05      	ldr	r5, [pc, #20]	; (800b760 <_sbrk_r+0x1c>)
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f5 fd20 	bl	8001194 <_sbrk>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_sbrk_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_sbrk_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	200023e0 	.word	0x200023e0

0800b764 <__swbuf_r>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	460e      	mov	r6, r1
 800b768:	4614      	mov	r4, r2
 800b76a:	4605      	mov	r5, r0
 800b76c:	b118      	cbz	r0, 800b776 <__swbuf_r+0x12>
 800b76e:	6983      	ldr	r3, [r0, #24]
 800b770:	b90b      	cbnz	r3, 800b776 <__swbuf_r+0x12>
 800b772:	f000 f9d5 	bl	800bb20 <__sinit>
 800b776:	4b21      	ldr	r3, [pc, #132]	; (800b7fc <__swbuf_r+0x98>)
 800b778:	429c      	cmp	r4, r3
 800b77a:	d12b      	bne.n	800b7d4 <__swbuf_r+0x70>
 800b77c:	686c      	ldr	r4, [r5, #4]
 800b77e:	69a3      	ldr	r3, [r4, #24]
 800b780:	60a3      	str	r3, [r4, #8]
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	071a      	lsls	r2, r3, #28
 800b786:	d52f      	bpl.n	800b7e8 <__swbuf_r+0x84>
 800b788:	6923      	ldr	r3, [r4, #16]
 800b78a:	b36b      	cbz	r3, 800b7e8 <__swbuf_r+0x84>
 800b78c:	6923      	ldr	r3, [r4, #16]
 800b78e:	6820      	ldr	r0, [r4, #0]
 800b790:	b2f6      	uxtb	r6, r6
 800b792:	1ac0      	subs	r0, r0, r3
 800b794:	6963      	ldr	r3, [r4, #20]
 800b796:	4637      	mov	r7, r6
 800b798:	4283      	cmp	r3, r0
 800b79a:	dc04      	bgt.n	800b7a6 <__swbuf_r+0x42>
 800b79c:	4621      	mov	r1, r4
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f000 f92a 	bl	800b9f8 <_fflush_r>
 800b7a4:	bb30      	cbnz	r0, 800b7f4 <__swbuf_r+0x90>
 800b7a6:	68a3      	ldr	r3, [r4, #8]
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	60a3      	str	r3, [r4, #8]
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	6022      	str	r2, [r4, #0]
 800b7b4:	701e      	strb	r6, [r3, #0]
 800b7b6:	6963      	ldr	r3, [r4, #20]
 800b7b8:	4283      	cmp	r3, r0
 800b7ba:	d004      	beq.n	800b7c6 <__swbuf_r+0x62>
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	07db      	lsls	r3, r3, #31
 800b7c0:	d506      	bpl.n	800b7d0 <__swbuf_r+0x6c>
 800b7c2:	2e0a      	cmp	r6, #10
 800b7c4:	d104      	bne.n	800b7d0 <__swbuf_r+0x6c>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f000 f915 	bl	800b9f8 <_fflush_r>
 800b7ce:	b988      	cbnz	r0, 800b7f4 <__swbuf_r+0x90>
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d4:	4b0a      	ldr	r3, [pc, #40]	; (800b800 <__swbuf_r+0x9c>)
 800b7d6:	429c      	cmp	r4, r3
 800b7d8:	d101      	bne.n	800b7de <__swbuf_r+0x7a>
 800b7da:	68ac      	ldr	r4, [r5, #8]
 800b7dc:	e7cf      	b.n	800b77e <__swbuf_r+0x1a>
 800b7de:	4b09      	ldr	r3, [pc, #36]	; (800b804 <__swbuf_r+0xa0>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	bf08      	it	eq
 800b7e4:	68ec      	ldreq	r4, [r5, #12]
 800b7e6:	e7ca      	b.n	800b77e <__swbuf_r+0x1a>
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f000 f80c 	bl	800b808 <__swsetup_r>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d0cb      	beq.n	800b78c <__swbuf_r+0x28>
 800b7f4:	f04f 37ff 	mov.w	r7, #4294967295
 800b7f8:	e7ea      	b.n	800b7d0 <__swbuf_r+0x6c>
 800b7fa:	bf00      	nop
 800b7fc:	0800c834 	.word	0x0800c834
 800b800:	0800c854 	.word	0x0800c854
 800b804:	0800c814 	.word	0x0800c814

0800b808 <__swsetup_r>:
 800b808:	4b32      	ldr	r3, [pc, #200]	; (800b8d4 <__swsetup_r+0xcc>)
 800b80a:	b570      	push	{r4, r5, r6, lr}
 800b80c:	681d      	ldr	r5, [r3, #0]
 800b80e:	4606      	mov	r6, r0
 800b810:	460c      	mov	r4, r1
 800b812:	b125      	cbz	r5, 800b81e <__swsetup_r+0x16>
 800b814:	69ab      	ldr	r3, [r5, #24]
 800b816:	b913      	cbnz	r3, 800b81e <__swsetup_r+0x16>
 800b818:	4628      	mov	r0, r5
 800b81a:	f000 f981 	bl	800bb20 <__sinit>
 800b81e:	4b2e      	ldr	r3, [pc, #184]	; (800b8d8 <__swsetup_r+0xd0>)
 800b820:	429c      	cmp	r4, r3
 800b822:	d10f      	bne.n	800b844 <__swsetup_r+0x3c>
 800b824:	686c      	ldr	r4, [r5, #4]
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b82c:	0719      	lsls	r1, r3, #28
 800b82e:	d42c      	bmi.n	800b88a <__swsetup_r+0x82>
 800b830:	06dd      	lsls	r5, r3, #27
 800b832:	d411      	bmi.n	800b858 <__swsetup_r+0x50>
 800b834:	2309      	movs	r3, #9
 800b836:	6033      	str	r3, [r6, #0]
 800b838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	81a3      	strh	r3, [r4, #12]
 800b842:	e03e      	b.n	800b8c2 <__swsetup_r+0xba>
 800b844:	4b25      	ldr	r3, [pc, #148]	; (800b8dc <__swsetup_r+0xd4>)
 800b846:	429c      	cmp	r4, r3
 800b848:	d101      	bne.n	800b84e <__swsetup_r+0x46>
 800b84a:	68ac      	ldr	r4, [r5, #8]
 800b84c:	e7eb      	b.n	800b826 <__swsetup_r+0x1e>
 800b84e:	4b24      	ldr	r3, [pc, #144]	; (800b8e0 <__swsetup_r+0xd8>)
 800b850:	429c      	cmp	r4, r3
 800b852:	bf08      	it	eq
 800b854:	68ec      	ldreq	r4, [r5, #12]
 800b856:	e7e6      	b.n	800b826 <__swsetup_r+0x1e>
 800b858:	0758      	lsls	r0, r3, #29
 800b85a:	d512      	bpl.n	800b882 <__swsetup_r+0x7a>
 800b85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b85e:	b141      	cbz	r1, 800b872 <__swsetup_r+0x6a>
 800b860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b864:	4299      	cmp	r1, r3
 800b866:	d002      	beq.n	800b86e <__swsetup_r+0x66>
 800b868:	4630      	mov	r0, r6
 800b86a:	f7ff fa45 	bl	800acf8 <_free_r>
 800b86e:	2300      	movs	r3, #0
 800b870:	6363      	str	r3, [r4, #52]	; 0x34
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b878:	81a3      	strh	r3, [r4, #12]
 800b87a:	2300      	movs	r3, #0
 800b87c:	6063      	str	r3, [r4, #4]
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	f043 0308 	orr.w	r3, r3, #8
 800b888:	81a3      	strh	r3, [r4, #12]
 800b88a:	6923      	ldr	r3, [r4, #16]
 800b88c:	b94b      	cbnz	r3, 800b8a2 <__swsetup_r+0x9a>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b898:	d003      	beq.n	800b8a2 <__swsetup_r+0x9a>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4630      	mov	r0, r6
 800b89e:	f000 fa05 	bl	800bcac <__smakebuf_r>
 800b8a2:	89a0      	ldrh	r0, [r4, #12]
 800b8a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8a8:	f010 0301 	ands.w	r3, r0, #1
 800b8ac:	d00a      	beq.n	800b8c4 <__swsetup_r+0xbc>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60a3      	str	r3, [r4, #8]
 800b8b2:	6963      	ldr	r3, [r4, #20]
 800b8b4:	425b      	negs	r3, r3
 800b8b6:	61a3      	str	r3, [r4, #24]
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	b943      	cbnz	r3, 800b8ce <__swsetup_r+0xc6>
 800b8bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8c0:	d1ba      	bne.n	800b838 <__swsetup_r+0x30>
 800b8c2:	bd70      	pop	{r4, r5, r6, pc}
 800b8c4:	0781      	lsls	r1, r0, #30
 800b8c6:	bf58      	it	pl
 800b8c8:	6963      	ldrpl	r3, [r4, #20]
 800b8ca:	60a3      	str	r3, [r4, #8]
 800b8cc:	e7f4      	b.n	800b8b8 <__swsetup_r+0xb0>
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e7f7      	b.n	800b8c2 <__swsetup_r+0xba>
 800b8d2:	bf00      	nop
 800b8d4:	20000444 	.word	0x20000444
 800b8d8:	0800c834 	.word	0x0800c834
 800b8dc:	0800c854 	.word	0x0800c854
 800b8e0:	0800c814 	.word	0x0800c814

0800b8e4 <abort>:
 800b8e4:	2006      	movs	r0, #6
 800b8e6:	b508      	push	{r3, lr}
 800b8e8:	f000 faba 	bl	800be60 <raise>
 800b8ec:	2001      	movs	r0, #1
 800b8ee:	f7f5 fbde 	bl	80010ae <_exit>
	...

0800b8f4 <__sflush_r>:
 800b8f4:	898a      	ldrh	r2, [r1, #12]
 800b8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	0710      	lsls	r0, r2, #28
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	d457      	bmi.n	800b9b0 <__sflush_r+0xbc>
 800b900:	684b      	ldr	r3, [r1, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	dc04      	bgt.n	800b910 <__sflush_r+0x1c>
 800b906:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dc01      	bgt.n	800b910 <__sflush_r+0x1c>
 800b90c:	2000      	movs	r0, #0
 800b90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b912:	2e00      	cmp	r6, #0
 800b914:	d0fa      	beq.n	800b90c <__sflush_r+0x18>
 800b916:	2300      	movs	r3, #0
 800b918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b91c:	682f      	ldr	r7, [r5, #0]
 800b91e:	602b      	str	r3, [r5, #0]
 800b920:	d032      	beq.n	800b988 <__sflush_r+0x94>
 800b922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	075a      	lsls	r2, r3, #29
 800b928:	d505      	bpl.n	800b936 <__sflush_r+0x42>
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	1ac0      	subs	r0, r0, r3
 800b92e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b930:	b10b      	cbz	r3, 800b936 <__sflush_r+0x42>
 800b932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b934:	1ac0      	subs	r0, r0, r3
 800b936:	2300      	movs	r3, #0
 800b938:	4602      	mov	r2, r0
 800b93a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b93c:	4628      	mov	r0, r5
 800b93e:	6a21      	ldr	r1, [r4, #32]
 800b940:	47b0      	blx	r6
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	d106      	bne.n	800b956 <__sflush_r+0x62>
 800b948:	6829      	ldr	r1, [r5, #0]
 800b94a:	291d      	cmp	r1, #29
 800b94c:	d82c      	bhi.n	800b9a8 <__sflush_r+0xb4>
 800b94e:	4a29      	ldr	r2, [pc, #164]	; (800b9f4 <__sflush_r+0x100>)
 800b950:	40ca      	lsrs	r2, r1
 800b952:	07d6      	lsls	r6, r2, #31
 800b954:	d528      	bpl.n	800b9a8 <__sflush_r+0xb4>
 800b956:	2200      	movs	r2, #0
 800b958:	6062      	str	r2, [r4, #4]
 800b95a:	6922      	ldr	r2, [r4, #16]
 800b95c:	04d9      	lsls	r1, r3, #19
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	d504      	bpl.n	800b96c <__sflush_r+0x78>
 800b962:	1c42      	adds	r2, r0, #1
 800b964:	d101      	bne.n	800b96a <__sflush_r+0x76>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b903      	cbnz	r3, 800b96c <__sflush_r+0x78>
 800b96a:	6560      	str	r0, [r4, #84]	; 0x54
 800b96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b96e:	602f      	str	r7, [r5, #0]
 800b970:	2900      	cmp	r1, #0
 800b972:	d0cb      	beq.n	800b90c <__sflush_r+0x18>
 800b974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b978:	4299      	cmp	r1, r3
 800b97a:	d002      	beq.n	800b982 <__sflush_r+0x8e>
 800b97c:	4628      	mov	r0, r5
 800b97e:	f7ff f9bb 	bl	800acf8 <_free_r>
 800b982:	2000      	movs	r0, #0
 800b984:	6360      	str	r0, [r4, #52]	; 0x34
 800b986:	e7c2      	b.n	800b90e <__sflush_r+0x1a>
 800b988:	6a21      	ldr	r1, [r4, #32]
 800b98a:	2301      	movs	r3, #1
 800b98c:	4628      	mov	r0, r5
 800b98e:	47b0      	blx	r6
 800b990:	1c41      	adds	r1, r0, #1
 800b992:	d1c7      	bne.n	800b924 <__sflush_r+0x30>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0c4      	beq.n	800b924 <__sflush_r+0x30>
 800b99a:	2b1d      	cmp	r3, #29
 800b99c:	d001      	beq.n	800b9a2 <__sflush_r+0xae>
 800b99e:	2b16      	cmp	r3, #22
 800b9a0:	d101      	bne.n	800b9a6 <__sflush_r+0xb2>
 800b9a2:	602f      	str	r7, [r5, #0]
 800b9a4:	e7b2      	b.n	800b90c <__sflush_r+0x18>
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	e7ae      	b.n	800b90e <__sflush_r+0x1a>
 800b9b0:	690f      	ldr	r7, [r1, #16]
 800b9b2:	2f00      	cmp	r7, #0
 800b9b4:	d0aa      	beq.n	800b90c <__sflush_r+0x18>
 800b9b6:	0793      	lsls	r3, r2, #30
 800b9b8:	bf18      	it	ne
 800b9ba:	2300      	movne	r3, #0
 800b9bc:	680e      	ldr	r6, [r1, #0]
 800b9be:	bf08      	it	eq
 800b9c0:	694b      	ldreq	r3, [r1, #20]
 800b9c2:	1bf6      	subs	r6, r6, r7
 800b9c4:	600f      	str	r7, [r1, #0]
 800b9c6:	608b      	str	r3, [r1, #8]
 800b9c8:	2e00      	cmp	r6, #0
 800b9ca:	dd9f      	ble.n	800b90c <__sflush_r+0x18>
 800b9cc:	4633      	mov	r3, r6
 800b9ce:	463a      	mov	r2, r7
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	6a21      	ldr	r1, [r4, #32]
 800b9d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b9d8:	47e0      	blx	ip
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	dc06      	bgt.n	800b9ec <__sflush_r+0xf8>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e8:	81a3      	strh	r3, [r4, #12]
 800b9ea:	e790      	b.n	800b90e <__sflush_r+0x1a>
 800b9ec:	4407      	add	r7, r0
 800b9ee:	1a36      	subs	r6, r6, r0
 800b9f0:	e7ea      	b.n	800b9c8 <__sflush_r+0xd4>
 800b9f2:	bf00      	nop
 800b9f4:	20400001 	.word	0x20400001

0800b9f8 <_fflush_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	690b      	ldr	r3, [r1, #16]
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	b913      	cbnz	r3, 800ba08 <_fflush_r+0x10>
 800ba02:	2500      	movs	r5, #0
 800ba04:	4628      	mov	r0, r5
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	b118      	cbz	r0, 800ba12 <_fflush_r+0x1a>
 800ba0a:	6983      	ldr	r3, [r0, #24]
 800ba0c:	b90b      	cbnz	r3, 800ba12 <_fflush_r+0x1a>
 800ba0e:	f000 f887 	bl	800bb20 <__sinit>
 800ba12:	4b14      	ldr	r3, [pc, #80]	; (800ba64 <_fflush_r+0x6c>)
 800ba14:	429c      	cmp	r4, r3
 800ba16:	d11b      	bne.n	800ba50 <_fflush_r+0x58>
 800ba18:	686c      	ldr	r4, [r5, #4]
 800ba1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0ef      	beq.n	800ba02 <_fflush_r+0xa>
 800ba22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba24:	07d0      	lsls	r0, r2, #31
 800ba26:	d404      	bmi.n	800ba32 <_fflush_r+0x3a>
 800ba28:	0599      	lsls	r1, r3, #22
 800ba2a:	d402      	bmi.n	800ba32 <_fflush_r+0x3a>
 800ba2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba2e:	f000 f915 	bl	800bc5c <__retarget_lock_acquire_recursive>
 800ba32:	4628      	mov	r0, r5
 800ba34:	4621      	mov	r1, r4
 800ba36:	f7ff ff5d 	bl	800b8f4 <__sflush_r>
 800ba3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	07da      	lsls	r2, r3, #31
 800ba40:	d4e0      	bmi.n	800ba04 <_fflush_r+0xc>
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	059b      	lsls	r3, r3, #22
 800ba46:	d4dd      	bmi.n	800ba04 <_fflush_r+0xc>
 800ba48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba4a:	f000 f908 	bl	800bc5e <__retarget_lock_release_recursive>
 800ba4e:	e7d9      	b.n	800ba04 <_fflush_r+0xc>
 800ba50:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <_fflush_r+0x70>)
 800ba52:	429c      	cmp	r4, r3
 800ba54:	d101      	bne.n	800ba5a <_fflush_r+0x62>
 800ba56:	68ac      	ldr	r4, [r5, #8]
 800ba58:	e7df      	b.n	800ba1a <_fflush_r+0x22>
 800ba5a:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <_fflush_r+0x74>)
 800ba5c:	429c      	cmp	r4, r3
 800ba5e:	bf08      	it	eq
 800ba60:	68ec      	ldreq	r4, [r5, #12]
 800ba62:	e7da      	b.n	800ba1a <_fflush_r+0x22>
 800ba64:	0800c834 	.word	0x0800c834
 800ba68:	0800c854 	.word	0x0800c854
 800ba6c:	0800c814 	.word	0x0800c814

0800ba70 <std>:
 800ba70:	2300      	movs	r3, #0
 800ba72:	b510      	push	{r4, lr}
 800ba74:	4604      	mov	r4, r0
 800ba76:	e9c0 3300 	strd	r3, r3, [r0]
 800ba7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba7e:	6083      	str	r3, [r0, #8]
 800ba80:	8181      	strh	r1, [r0, #12]
 800ba82:	6643      	str	r3, [r0, #100]	; 0x64
 800ba84:	81c2      	strh	r2, [r0, #14]
 800ba86:	6183      	str	r3, [r0, #24]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	2208      	movs	r2, #8
 800ba8c:	305c      	adds	r0, #92	; 0x5c
 800ba8e:	f7fe ffcd 	bl	800aa2c <memset>
 800ba92:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <std+0x38>)
 800ba94:	6224      	str	r4, [r4, #32]
 800ba96:	6263      	str	r3, [r4, #36]	; 0x24
 800ba98:	4b04      	ldr	r3, [pc, #16]	; (800baac <std+0x3c>)
 800ba9a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <std+0x40>)
 800ba9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baa0:	4b04      	ldr	r3, [pc, #16]	; (800bab4 <std+0x44>)
 800baa2:	6323      	str	r3, [r4, #48]	; 0x30
 800baa4:	bd10      	pop	{r4, pc}
 800baa6:	bf00      	nop
 800baa8:	0800be99 	.word	0x0800be99
 800baac:	0800bebb 	.word	0x0800bebb
 800bab0:	0800bef3 	.word	0x0800bef3
 800bab4:	0800bf17 	.word	0x0800bf17

0800bab8 <_cleanup_r>:
 800bab8:	4901      	ldr	r1, [pc, #4]	; (800bac0 <_cleanup_r+0x8>)
 800baba:	f000 b8af 	b.w	800bc1c <_fwalk_reent>
 800babe:	bf00      	nop
 800bac0:	0800b9f9 	.word	0x0800b9f9

0800bac4 <__sfmoreglue>:
 800bac4:	2268      	movs	r2, #104	; 0x68
 800bac6:	b570      	push	{r4, r5, r6, lr}
 800bac8:	1e4d      	subs	r5, r1, #1
 800baca:	4355      	muls	r5, r2
 800bacc:	460e      	mov	r6, r1
 800bace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bad2:	f7ff f979 	bl	800adc8 <_malloc_r>
 800bad6:	4604      	mov	r4, r0
 800bad8:	b140      	cbz	r0, 800baec <__sfmoreglue+0x28>
 800bada:	2100      	movs	r1, #0
 800badc:	e9c0 1600 	strd	r1, r6, [r0]
 800bae0:	300c      	adds	r0, #12
 800bae2:	60a0      	str	r0, [r4, #8]
 800bae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bae8:	f7fe ffa0 	bl	800aa2c <memset>
 800baec:	4620      	mov	r0, r4
 800baee:	bd70      	pop	{r4, r5, r6, pc}

0800baf0 <__sfp_lock_acquire>:
 800baf0:	4801      	ldr	r0, [pc, #4]	; (800baf8 <__sfp_lock_acquire+0x8>)
 800baf2:	f000 b8b3 	b.w	800bc5c <__retarget_lock_acquire_recursive>
 800baf6:	bf00      	nop
 800baf8:	200023dd 	.word	0x200023dd

0800bafc <__sfp_lock_release>:
 800bafc:	4801      	ldr	r0, [pc, #4]	; (800bb04 <__sfp_lock_release+0x8>)
 800bafe:	f000 b8ae 	b.w	800bc5e <__retarget_lock_release_recursive>
 800bb02:	bf00      	nop
 800bb04:	200023dd 	.word	0x200023dd

0800bb08 <__sinit_lock_acquire>:
 800bb08:	4801      	ldr	r0, [pc, #4]	; (800bb10 <__sinit_lock_acquire+0x8>)
 800bb0a:	f000 b8a7 	b.w	800bc5c <__retarget_lock_acquire_recursive>
 800bb0e:	bf00      	nop
 800bb10:	200023de 	.word	0x200023de

0800bb14 <__sinit_lock_release>:
 800bb14:	4801      	ldr	r0, [pc, #4]	; (800bb1c <__sinit_lock_release+0x8>)
 800bb16:	f000 b8a2 	b.w	800bc5e <__retarget_lock_release_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	200023de 	.word	0x200023de

0800bb20 <__sinit>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	4604      	mov	r4, r0
 800bb24:	f7ff fff0 	bl	800bb08 <__sinit_lock_acquire>
 800bb28:	69a3      	ldr	r3, [r4, #24]
 800bb2a:	b11b      	cbz	r3, 800bb34 <__sinit+0x14>
 800bb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb30:	f7ff bff0 	b.w	800bb14 <__sinit_lock_release>
 800bb34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb38:	6523      	str	r3, [r4, #80]	; 0x50
 800bb3a:	4b13      	ldr	r3, [pc, #76]	; (800bb88 <__sinit+0x68>)
 800bb3c:	4a13      	ldr	r2, [pc, #76]	; (800bb8c <__sinit+0x6c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb42:	42a3      	cmp	r3, r4
 800bb44:	bf08      	it	eq
 800bb46:	2301      	moveq	r3, #1
 800bb48:	4620      	mov	r0, r4
 800bb4a:	bf08      	it	eq
 800bb4c:	61a3      	streq	r3, [r4, #24]
 800bb4e:	f000 f81f 	bl	800bb90 <__sfp>
 800bb52:	6060      	str	r0, [r4, #4]
 800bb54:	4620      	mov	r0, r4
 800bb56:	f000 f81b 	bl	800bb90 <__sfp>
 800bb5a:	60a0      	str	r0, [r4, #8]
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 f817 	bl	800bb90 <__sfp>
 800bb62:	2200      	movs	r2, #0
 800bb64:	2104      	movs	r1, #4
 800bb66:	60e0      	str	r0, [r4, #12]
 800bb68:	6860      	ldr	r0, [r4, #4]
 800bb6a:	f7ff ff81 	bl	800ba70 <std>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	2109      	movs	r1, #9
 800bb72:	68a0      	ldr	r0, [r4, #8]
 800bb74:	f7ff ff7c 	bl	800ba70 <std>
 800bb78:	2202      	movs	r2, #2
 800bb7a:	2112      	movs	r1, #18
 800bb7c:	68e0      	ldr	r0, [r4, #12]
 800bb7e:	f7ff ff77 	bl	800ba70 <std>
 800bb82:	2301      	movs	r3, #1
 800bb84:	61a3      	str	r3, [r4, #24]
 800bb86:	e7d1      	b.n	800bb2c <__sinit+0xc>
 800bb88:	0800c62c 	.word	0x0800c62c
 800bb8c:	0800bab9 	.word	0x0800bab9

0800bb90 <__sfp>:
 800bb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb92:	4607      	mov	r7, r0
 800bb94:	f7ff ffac 	bl	800baf0 <__sfp_lock_acquire>
 800bb98:	4b1e      	ldr	r3, [pc, #120]	; (800bc14 <__sfp+0x84>)
 800bb9a:	681e      	ldr	r6, [r3, #0]
 800bb9c:	69b3      	ldr	r3, [r6, #24]
 800bb9e:	b913      	cbnz	r3, 800bba6 <__sfp+0x16>
 800bba0:	4630      	mov	r0, r6
 800bba2:	f7ff ffbd 	bl	800bb20 <__sinit>
 800bba6:	3648      	adds	r6, #72	; 0x48
 800bba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	d503      	bpl.n	800bbb8 <__sfp+0x28>
 800bbb0:	6833      	ldr	r3, [r6, #0]
 800bbb2:	b30b      	cbz	r3, 800bbf8 <__sfp+0x68>
 800bbb4:	6836      	ldr	r6, [r6, #0]
 800bbb6:	e7f7      	b.n	800bba8 <__sfp+0x18>
 800bbb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbbc:	b9d5      	cbnz	r5, 800bbf4 <__sfp+0x64>
 800bbbe:	4b16      	ldr	r3, [pc, #88]	; (800bc18 <__sfp+0x88>)
 800bbc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbc4:	60e3      	str	r3, [r4, #12]
 800bbc6:	6665      	str	r5, [r4, #100]	; 0x64
 800bbc8:	f000 f847 	bl	800bc5a <__retarget_lock_init_recursive>
 800bbcc:	f7ff ff96 	bl	800bafc <__sfp_lock_release>
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbdc:	6025      	str	r5, [r4, #0]
 800bbde:	61a5      	str	r5, [r4, #24]
 800bbe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbe4:	f7fe ff22 	bl	800aa2c <memset>
 800bbe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbf4:	3468      	adds	r4, #104	; 0x68
 800bbf6:	e7d9      	b.n	800bbac <__sfp+0x1c>
 800bbf8:	2104      	movs	r1, #4
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	f7ff ff62 	bl	800bac4 <__sfmoreglue>
 800bc00:	4604      	mov	r4, r0
 800bc02:	6030      	str	r0, [r6, #0]
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d1d5      	bne.n	800bbb4 <__sfp+0x24>
 800bc08:	f7ff ff78 	bl	800bafc <__sfp_lock_release>
 800bc0c:	230c      	movs	r3, #12
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	e7ee      	b.n	800bbf0 <__sfp+0x60>
 800bc12:	bf00      	nop
 800bc14:	0800c62c 	.word	0x0800c62c
 800bc18:	ffff0001 	.word	0xffff0001

0800bc1c <_fwalk_reent>:
 800bc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc20:	4606      	mov	r6, r0
 800bc22:	4688      	mov	r8, r1
 800bc24:	2700      	movs	r7, #0
 800bc26:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc2e:	f1b9 0901 	subs.w	r9, r9, #1
 800bc32:	d505      	bpl.n	800bc40 <_fwalk_reent+0x24>
 800bc34:	6824      	ldr	r4, [r4, #0]
 800bc36:	2c00      	cmp	r4, #0
 800bc38:	d1f7      	bne.n	800bc2a <_fwalk_reent+0xe>
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc40:	89ab      	ldrh	r3, [r5, #12]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d907      	bls.n	800bc56 <_fwalk_reent+0x3a>
 800bc46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	d003      	beq.n	800bc56 <_fwalk_reent+0x3a>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4630      	mov	r0, r6
 800bc52:	47c0      	blx	r8
 800bc54:	4307      	orrs	r7, r0
 800bc56:	3568      	adds	r5, #104	; 0x68
 800bc58:	e7e9      	b.n	800bc2e <_fwalk_reent+0x12>

0800bc5a <__retarget_lock_init_recursive>:
 800bc5a:	4770      	bx	lr

0800bc5c <__retarget_lock_acquire_recursive>:
 800bc5c:	4770      	bx	lr

0800bc5e <__retarget_lock_release_recursive>:
 800bc5e:	4770      	bx	lr

0800bc60 <__swhatbuf_r>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	460e      	mov	r6, r1
 800bc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc68:	4614      	mov	r4, r2
 800bc6a:	2900      	cmp	r1, #0
 800bc6c:	461d      	mov	r5, r3
 800bc6e:	b096      	sub	sp, #88	; 0x58
 800bc70:	da08      	bge.n	800bc84 <__swhatbuf_r+0x24>
 800bc72:	2200      	movs	r2, #0
 800bc74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc78:	602a      	str	r2, [r5, #0]
 800bc7a:	061a      	lsls	r2, r3, #24
 800bc7c:	d410      	bmi.n	800bca0 <__swhatbuf_r+0x40>
 800bc7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc82:	e00e      	b.n	800bca2 <__swhatbuf_r+0x42>
 800bc84:	466a      	mov	r2, sp
 800bc86:	f000 f96d 	bl	800bf64 <_fstat_r>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	dbf1      	blt.n	800bc72 <__swhatbuf_r+0x12>
 800bc8e:	9a01      	ldr	r2, [sp, #4]
 800bc90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc98:	425a      	negs	r2, r3
 800bc9a:	415a      	adcs	r2, r3
 800bc9c:	602a      	str	r2, [r5, #0]
 800bc9e:	e7ee      	b.n	800bc7e <__swhatbuf_r+0x1e>
 800bca0:	2340      	movs	r3, #64	; 0x40
 800bca2:	2000      	movs	r0, #0
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	b016      	add	sp, #88	; 0x58
 800bca8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bcac <__smakebuf_r>:
 800bcac:	898b      	ldrh	r3, [r1, #12]
 800bcae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcb0:	079d      	lsls	r5, r3, #30
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	d507      	bpl.n	800bcc8 <__smakebuf_r+0x1c>
 800bcb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	6163      	str	r3, [r4, #20]
 800bcc4:	b002      	add	sp, #8
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	466a      	mov	r2, sp
 800bcca:	ab01      	add	r3, sp, #4
 800bccc:	f7ff ffc8 	bl	800bc60 <__swhatbuf_r>
 800bcd0:	9900      	ldr	r1, [sp, #0]
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7ff f877 	bl	800adc8 <_malloc_r>
 800bcda:	b948      	cbnz	r0, 800bcf0 <__smakebuf_r+0x44>
 800bcdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce0:	059a      	lsls	r2, r3, #22
 800bce2:	d4ef      	bmi.n	800bcc4 <__smakebuf_r+0x18>
 800bce4:	f023 0303 	bic.w	r3, r3, #3
 800bce8:	f043 0302 	orr.w	r3, r3, #2
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	e7e3      	b.n	800bcb8 <__smakebuf_r+0xc>
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <__smakebuf_r+0x7c>)
 800bcf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	9b00      	ldr	r3, [sp, #0]
 800bd00:	6120      	str	r0, [r4, #16]
 800bd02:	6163      	str	r3, [r4, #20]
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	b15b      	cbz	r3, 800bd20 <__smakebuf_r+0x74>
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd0e:	f000 f93b 	bl	800bf88 <_isatty_r>
 800bd12:	b128      	cbz	r0, 800bd20 <__smakebuf_r+0x74>
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	f023 0303 	bic.w	r3, r3, #3
 800bd1a:	f043 0301 	orr.w	r3, r3, #1
 800bd1e:	81a3      	strh	r3, [r4, #12]
 800bd20:	89a0      	ldrh	r0, [r4, #12]
 800bd22:	4305      	orrs	r5, r0
 800bd24:	81a5      	strh	r5, [r4, #12]
 800bd26:	e7cd      	b.n	800bcc4 <__smakebuf_r+0x18>
 800bd28:	0800bab9 	.word	0x0800bab9

0800bd2c <memchr>:
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	b2c9      	uxtb	r1, r1
 800bd32:	4402      	add	r2, r0
 800bd34:	4293      	cmp	r3, r2
 800bd36:	4618      	mov	r0, r3
 800bd38:	d101      	bne.n	800bd3e <memchr+0x12>
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	e003      	b.n	800bd46 <memchr+0x1a>
 800bd3e:	7804      	ldrb	r4, [r0, #0]
 800bd40:	3301      	adds	r3, #1
 800bd42:	428c      	cmp	r4, r1
 800bd44:	d1f6      	bne.n	800bd34 <memchr+0x8>
 800bd46:	bd10      	pop	{r4, pc}

0800bd48 <memcpy>:
 800bd48:	440a      	add	r2, r1
 800bd4a:	4291      	cmp	r1, r2
 800bd4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd50:	d100      	bne.n	800bd54 <memcpy+0xc>
 800bd52:	4770      	bx	lr
 800bd54:	b510      	push	{r4, lr}
 800bd56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd5a:	4291      	cmp	r1, r2
 800bd5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd60:	d1f9      	bne.n	800bd56 <memcpy+0xe>
 800bd62:	bd10      	pop	{r4, pc}

0800bd64 <memmove>:
 800bd64:	4288      	cmp	r0, r1
 800bd66:	b510      	push	{r4, lr}
 800bd68:	eb01 0402 	add.w	r4, r1, r2
 800bd6c:	d902      	bls.n	800bd74 <memmove+0x10>
 800bd6e:	4284      	cmp	r4, r0
 800bd70:	4623      	mov	r3, r4
 800bd72:	d807      	bhi.n	800bd84 <memmove+0x20>
 800bd74:	1e43      	subs	r3, r0, #1
 800bd76:	42a1      	cmp	r1, r4
 800bd78:	d008      	beq.n	800bd8c <memmove+0x28>
 800bd7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd82:	e7f8      	b.n	800bd76 <memmove+0x12>
 800bd84:	4601      	mov	r1, r0
 800bd86:	4402      	add	r2, r0
 800bd88:	428a      	cmp	r2, r1
 800bd8a:	d100      	bne.n	800bd8e <memmove+0x2a>
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd96:	e7f7      	b.n	800bd88 <memmove+0x24>

0800bd98 <__malloc_lock>:
 800bd98:	4801      	ldr	r0, [pc, #4]	; (800bda0 <__malloc_lock+0x8>)
 800bd9a:	f7ff bf5f 	b.w	800bc5c <__retarget_lock_acquire_recursive>
 800bd9e:	bf00      	nop
 800bda0:	200023dc 	.word	0x200023dc

0800bda4 <__malloc_unlock>:
 800bda4:	4801      	ldr	r0, [pc, #4]	; (800bdac <__malloc_unlock+0x8>)
 800bda6:	f7ff bf5a 	b.w	800bc5e <__retarget_lock_release_recursive>
 800bdaa:	bf00      	nop
 800bdac:	200023dc 	.word	0x200023dc

0800bdb0 <_realloc_r>:
 800bdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb4:	4680      	mov	r8, r0
 800bdb6:	4614      	mov	r4, r2
 800bdb8:	460e      	mov	r6, r1
 800bdba:	b921      	cbnz	r1, 800bdc6 <_realloc_r+0x16>
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc2:	f7ff b801 	b.w	800adc8 <_malloc_r>
 800bdc6:	b92a      	cbnz	r2, 800bdd4 <_realloc_r+0x24>
 800bdc8:	f7fe ff96 	bl	800acf8 <_free_r>
 800bdcc:	4625      	mov	r5, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd4:	f000 f8fa 	bl	800bfcc <_malloc_usable_size_r>
 800bdd8:	4284      	cmp	r4, r0
 800bdda:	4607      	mov	r7, r0
 800bddc:	d802      	bhi.n	800bde4 <_realloc_r+0x34>
 800bdde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bde2:	d812      	bhi.n	800be0a <_realloc_r+0x5a>
 800bde4:	4621      	mov	r1, r4
 800bde6:	4640      	mov	r0, r8
 800bde8:	f7fe ffee 	bl	800adc8 <_malloc_r>
 800bdec:	4605      	mov	r5, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d0ed      	beq.n	800bdce <_realloc_r+0x1e>
 800bdf2:	42bc      	cmp	r4, r7
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	bf28      	it	cs
 800bdfa:	463a      	movcs	r2, r7
 800bdfc:	f7ff ffa4 	bl	800bd48 <memcpy>
 800be00:	4631      	mov	r1, r6
 800be02:	4640      	mov	r0, r8
 800be04:	f7fe ff78 	bl	800acf8 <_free_r>
 800be08:	e7e1      	b.n	800bdce <_realloc_r+0x1e>
 800be0a:	4635      	mov	r5, r6
 800be0c:	e7df      	b.n	800bdce <_realloc_r+0x1e>

0800be0e <_raise_r>:
 800be0e:	291f      	cmp	r1, #31
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4604      	mov	r4, r0
 800be14:	460d      	mov	r5, r1
 800be16:	d904      	bls.n	800be22 <_raise_r+0x14>
 800be18:	2316      	movs	r3, #22
 800be1a:	6003      	str	r3, [r0, #0]
 800be1c:	f04f 30ff 	mov.w	r0, #4294967295
 800be20:	bd38      	pop	{r3, r4, r5, pc}
 800be22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be24:	b112      	cbz	r2, 800be2c <_raise_r+0x1e>
 800be26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be2a:	b94b      	cbnz	r3, 800be40 <_raise_r+0x32>
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 f831 	bl	800be94 <_getpid_r>
 800be32:	462a      	mov	r2, r5
 800be34:	4601      	mov	r1, r0
 800be36:	4620      	mov	r0, r4
 800be38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be3c:	f000 b818 	b.w	800be70 <_kill_r>
 800be40:	2b01      	cmp	r3, #1
 800be42:	d00a      	beq.n	800be5a <_raise_r+0x4c>
 800be44:	1c59      	adds	r1, r3, #1
 800be46:	d103      	bne.n	800be50 <_raise_r+0x42>
 800be48:	2316      	movs	r3, #22
 800be4a:	6003      	str	r3, [r0, #0]
 800be4c:	2001      	movs	r0, #1
 800be4e:	e7e7      	b.n	800be20 <_raise_r+0x12>
 800be50:	2400      	movs	r4, #0
 800be52:	4628      	mov	r0, r5
 800be54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be58:	4798      	blx	r3
 800be5a:	2000      	movs	r0, #0
 800be5c:	e7e0      	b.n	800be20 <_raise_r+0x12>
	...

0800be60 <raise>:
 800be60:	4b02      	ldr	r3, [pc, #8]	; (800be6c <raise+0xc>)
 800be62:	4601      	mov	r1, r0
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	f7ff bfd2 	b.w	800be0e <_raise_r>
 800be6a:	bf00      	nop
 800be6c:	20000444 	.word	0x20000444

0800be70 <_kill_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	2300      	movs	r3, #0
 800be74:	4d06      	ldr	r5, [pc, #24]	; (800be90 <_kill_r+0x20>)
 800be76:	4604      	mov	r4, r0
 800be78:	4608      	mov	r0, r1
 800be7a:	4611      	mov	r1, r2
 800be7c:	602b      	str	r3, [r5, #0]
 800be7e:	f7f5 f906 	bl	800108e <_kill>
 800be82:	1c43      	adds	r3, r0, #1
 800be84:	d102      	bne.n	800be8c <_kill_r+0x1c>
 800be86:	682b      	ldr	r3, [r5, #0]
 800be88:	b103      	cbz	r3, 800be8c <_kill_r+0x1c>
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	bd38      	pop	{r3, r4, r5, pc}
 800be8e:	bf00      	nop
 800be90:	200023e0 	.word	0x200023e0

0800be94 <_getpid_r>:
 800be94:	f7f5 b8f4 	b.w	8001080 <_getpid>

0800be98 <__sread>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	460c      	mov	r4, r1
 800be9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea0:	f000 f89c 	bl	800bfdc <_read_r>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	bfab      	itete	ge
 800bea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beaa:	89a3      	ldrhlt	r3, [r4, #12]
 800beac:	181b      	addge	r3, r3, r0
 800beae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800beb2:	bfac      	ite	ge
 800beb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800beb6:	81a3      	strhlt	r3, [r4, #12]
 800beb8:	bd10      	pop	{r4, pc}

0800beba <__swrite>:
 800beba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebe:	461f      	mov	r7, r3
 800bec0:	898b      	ldrh	r3, [r1, #12]
 800bec2:	4605      	mov	r5, r0
 800bec4:	05db      	lsls	r3, r3, #23
 800bec6:	460c      	mov	r4, r1
 800bec8:	4616      	mov	r6, r2
 800beca:	d505      	bpl.n	800bed8 <__swrite+0x1e>
 800becc:	2302      	movs	r3, #2
 800bece:	2200      	movs	r2, #0
 800bed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed4:	f000 f868 	bl	800bfa8 <_lseek_r>
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	4632      	mov	r2, r6
 800bedc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bee0:	81a3      	strh	r3, [r4, #12]
 800bee2:	4628      	mov	r0, r5
 800bee4:	463b      	mov	r3, r7
 800bee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beee:	f000 b817 	b.w	800bf20 <_write_r>

0800bef2 <__sseek>:
 800bef2:	b510      	push	{r4, lr}
 800bef4:	460c      	mov	r4, r1
 800bef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befa:	f000 f855 	bl	800bfa8 <_lseek_r>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	bf15      	itete	ne
 800bf04:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf0e:	81a3      	strheq	r3, [r4, #12]
 800bf10:	bf18      	it	ne
 800bf12:	81a3      	strhne	r3, [r4, #12]
 800bf14:	bd10      	pop	{r4, pc}

0800bf16 <__sclose>:
 800bf16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1a:	f000 b813 	b.w	800bf44 <_close_r>
	...

0800bf20 <_write_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	4611      	mov	r1, r2
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4d05      	ldr	r5, [pc, #20]	; (800bf40 <_write_r+0x20>)
 800bf2c:	602a      	str	r2, [r5, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f7f5 f8e4 	bl	80010fc <_write>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_write_r+0x1e>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_write_r+0x1e>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	200023e0 	.word	0x200023e0

0800bf44 <_close_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	2300      	movs	r3, #0
 800bf48:	4d05      	ldr	r5, [pc, #20]	; (800bf60 <_close_r+0x1c>)
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f5 f8f0 	bl	8001134 <_close>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_close_r+0x1a>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_close_r+0x1a>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	200023e0 	.word	0x200023e0

0800bf64 <_fstat_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	2300      	movs	r3, #0
 800bf68:	4d06      	ldr	r5, [pc, #24]	; (800bf84 <_fstat_r+0x20>)
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	4611      	mov	r1, r2
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	f7f5 f8ea 	bl	800114a <_fstat>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d102      	bne.n	800bf80 <_fstat_r+0x1c>
 800bf7a:	682b      	ldr	r3, [r5, #0]
 800bf7c:	b103      	cbz	r3, 800bf80 <_fstat_r+0x1c>
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	bd38      	pop	{r3, r4, r5, pc}
 800bf82:	bf00      	nop
 800bf84:	200023e0 	.word	0x200023e0

0800bf88 <_isatty_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4d05      	ldr	r5, [pc, #20]	; (800bfa4 <_isatty_r+0x1c>)
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	602b      	str	r3, [r5, #0]
 800bf94:	f7f5 f8e8 	bl	8001168 <_isatty>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_isatty_r+0x1a>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_isatty_r+0x1a>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	200023e0 	.word	0x200023e0

0800bfa8 <_lseek_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	4611      	mov	r1, r2
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	4d05      	ldr	r5, [pc, #20]	; (800bfc8 <_lseek_r+0x20>)
 800bfb4:	602a      	str	r2, [r5, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f7f5 f8e0 	bl	800117c <_lseek>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	d102      	bne.n	800bfc6 <_lseek_r+0x1e>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	b103      	cbz	r3, 800bfc6 <_lseek_r+0x1e>
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	200023e0 	.word	0x200023e0

0800bfcc <_malloc_usable_size_r>:
 800bfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd0:	1f18      	subs	r0, r3, #4
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bfbc      	itt	lt
 800bfd6:	580b      	ldrlt	r3, [r1, r0]
 800bfd8:	18c0      	addlt	r0, r0, r3
 800bfda:	4770      	bx	lr

0800bfdc <_read_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4d05      	ldr	r5, [pc, #20]	; (800bffc <_read_r+0x20>)
 800bfe8:	602a      	str	r2, [r5, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f7f5 f869 	bl	80010c2 <_read>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_read_r+0x1e>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_read_r+0x1e>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	200023e0 	.word	0x200023e0

0800c000 <_init>:
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	bf00      	nop
 800c004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c006:	bc08      	pop	{r3}
 800c008:	469e      	mov	lr, r3
 800c00a:	4770      	bx	lr

0800c00c <_fini>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	bf00      	nop
 800c010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c012:	bc08      	pop	{r3}
 800c014:	469e      	mov	lr, r3
 800c016:	4770      	bx	lr
