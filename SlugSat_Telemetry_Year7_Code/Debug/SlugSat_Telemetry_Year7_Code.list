
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9b4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f4  0800c2f4  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2f4  0800c2f4  0001c2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2fc  0800c2fc  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2fc  0800c2fc  0001c2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c300  0800c300  0001c300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0800c304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004774  200004a8  0800c7ac  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c1c  0800c7ac  00024c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016689  00000000  00000000  000204d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ab  00000000  00000000  00036b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afc5  00000000  00000000  0003ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b67  00000000  00000000  00057a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ca2  00000000  00000000  0006f59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010423e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00104290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200004a8 	.word	0x200004a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800bad8 	.word	0x0800bad8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200004ac 	.word	0x200004ac
 8000178:	0800bad8 	.word	0x0800bad8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	891b      	ldrh	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f002 f819 	bl	80024fc <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	75fb      	strb	r3, [r7, #23]

	// CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip

	uint8_t Address;

	uint8_t ConfigIndex = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	757b      	strb	r3, [r7, #21]
	// configure standard registers
	for (Address = 0x00; Address < 0x2F; Address++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	75bb      	strb	r3, [r7, #22]
 80004ea:	e02e      	b.n	800054a <CC1200_Configure+0x78>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004ec:	7d7b      	ldrb	r3, [r7, #21]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	7dba      	ldrb	r2, [r7, #22]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d122      	bne.n	8000542 <CC1200_Configure+0x70>
		{
			retval = CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 80004fc:	7d7b      	ldrb	r3, [r7, #21]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	4413      	add	r3, r2
 8000504:	785a      	ldrb	r2, [r3, #1]
 8000506:	7dbb      	ldrb	r3, [r7, #22]
 8000508:	4619      	mov	r1, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f85c 	bl	80005c8 <CC1200_Write_Single_Register>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Register(SPI_Info, Address);
 8000514:	7dbb      	ldrb	r3, [r7, #22]
 8000516:	4619      	mov	r1, r3
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f000 f891 	bl	8000640 <CC1200_Read_Single_Register>
 800051e:	4603      	mov	r3, r0
 8000520:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Register_Setting[ConfigIndex].Value)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7d7b      	ldrb	r3, [r7, #21]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	429a      	cmp	r2, r3
 8000534:	d001      	beq.n	800053a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	3301      	adds	r3, #1
 800053e:	757b      	strb	r3, [r7, #21]
 8000540:	e000      	b.n	8000544 <CC1200_Configure+0x72>
		}
		else
		{
			continue;
 8000542:	bf00      	nop
	for (Address = 0x00; Address < 0x2F; Address++)
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	3301      	adds	r3, #1
 8000548:	75bb      	strb	r3, [r7, #22]
 800054a:	7dbb      	ldrb	r3, [r7, #22]
 800054c:	2b2e      	cmp	r3, #46	; 0x2e
 800054e:	d9cd      	bls.n	80004ec <CC1200_Configure+0x1a>
		}
	}

	ConfigIndex = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000554:	2300      	movs	r3, #0
 8000556:	75bb      	strb	r3, [r7, #22]
 8000558:	e02e      	b.n	80005b8 <CC1200_Configure+0xe6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 800055a:	7d7b      	ldrb	r3, [r7, #21]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	7dba      	ldrb	r2, [r7, #22]
 8000566:	429a      	cmp	r2, r3
 8000568:	d122      	bne.n	80005b0 <CC1200_Configure+0xde>
		{
			retval = CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 800056a:	7d7b      	ldrb	r3, [r7, #21]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	785a      	ldrb	r2, [r3, #1]
 8000574:	7dbb      	ldrb	r3, [r7, #22]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 f8a1 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
			retval = CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 8000582:	7dbb      	ldrb	r3, [r7, #22]
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f000 f8ec 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800058c:	4603      	mov	r3, r0
 800058e:	75fb      	strb	r3, [r7, #23]
			if ((SPI_Info->MISO_Data) [0] != Extended_Register_Setting[ConfigIndex].Value)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7d7b      	ldrb	r3, [r7, #21]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	440b      	add	r3, r1
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <CC1200_Configure+0xd6>
			{
				retval = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	3301      	adds	r3, #1
 80005ac:	757b      	strb	r3, [r7, #21]
 80005ae:	e000      	b.n	80005b2 <CC1200_Configure+0xe0>
		}
		else
		{
			continue;
 80005b0:	bf00      	nop
	for (Address = 0x00; Address <= 0xDA; Address++)
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	3301      	adds	r3, #1
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	7dbb      	ldrb	r3, [r7, #22]
 80005ba:	2bda      	cmp	r3, #218	; 0xda
 80005bc:	d9cd      	bls.n	800055a <CC1200_Configure+0x88>
		}
	}

	return(retval);
 80005be:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if (Register_Address < 0x2F)
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2b2e      	cmp	r3, #46	; 0x2e
 80005dc:	d829      	bhi.n	8000632 <CC1200_Write_Single_Register+0x6a>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6858      	ldr	r0, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	891b      	ldrh	r3, [r3, #8]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 ff85 	bl	80024fc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68d8      	ldr	r0, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f107 010e 	add.w	r1, r7, #14
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	f004 fa55 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68d8      	ldr	r0, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	1cb9      	adds	r1, r7, #2
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	f004 fa4b 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6858      	ldr	r0, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f001 ff68 	bl	80024fc <HAL_GPIO_WritePin>

		retval = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e001      	b.n	8000636 <CC1200_Write_Single_Register+0x6e>
	}
	else
	{
		retval = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if (Register_Address < 0x2F)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b2e      	cmp	r3, #46	; 0x2e
 8000650:	d82f      	bhi.n	80006b2 <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f001 ff46 	bl	80024fc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68d8      	ldr	r0, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f107 010e 	add.w	r1, r7, #14
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f004 fa16 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68d8      	ldr	r0, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f107 010d 	add.w	r1, r7, #13
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	f004 fa0b 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	891b      	ldrh	r3, [r3, #8]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 ff28 	bl	80024fc <HAL_GPIO_WritePin>

		retval = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e001      	b.n	80006b6 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b39      	cmp	r3, #57	; 0x39
 80006d4:	d902      	bls.n	80006dc <CC1200_Write_Single_Extended_Register+0x1c>
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d908      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2ba2      	cmp	r3, #162	; 0xa2
 80006e0:	d902      	bls.n	80006e8 <CC1200_Write_Single_Extended_Register+0x28>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2bd1      	cmp	r3, #209	; 0xd1
 80006e6:	d902      	bls.n	80006ee <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006e8:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006ea:	2bda      	cmp	r3, #218	; 0xda
 80006ec:	d902      	bls.n	80006f4 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e032      	b.n	800075a <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006f4:	232f      	movs	r3, #47	; 0x2f
 80006f6:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f001 fefa 	bl	80024fc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68d8      	ldr	r0, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f107 010e 	add.w	r1, r7, #14
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	f004 f9ca 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68d8      	ldr	r0, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	1cf9      	adds	r1, r7, #3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	f004 f9c0 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68d8      	ldr	r0, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	1cb9      	adds	r1, r7, #2
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f004 f9b6 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	891b      	ldrh	r3, [r3, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	f001 fed3 	bl	80024fc <HAL_GPIO_WritePin>

		retval = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b39      	cmp	r3, #57	; 0x39
 8000774:	d902      	bls.n	800077c <CC1200_Read_Single_Extended_Register+0x18>
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b63      	cmp	r3, #99	; 0x63
 800077a:	d908      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2ba2      	cmp	r3, #162	; 0xa2
 8000780:	d902      	bls.n	8000788 <CC1200_Read_Single_Extended_Register+0x24>
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2bd1      	cmp	r3, #209	; 0xd1
 8000786:	d902      	bls.n	800078e <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000788:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800078a:	2bda      	cmp	r3, #218	; 0xda
 800078c:	d902      	bls.n	8000794 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e035      	b.n	8000800 <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6858      	ldr	r0, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891b      	ldrh	r3, [r3, #8]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f001 fea8 	bl	80024fc <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68d8      	ldr	r0, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f107 010e 	add.w	r1, r7, #14
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f004 f978 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68d8      	ldr	r0, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	1cf9      	adds	r1, r7, #3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	f004 f96e 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68d8      	ldr	r0, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	f107 010d 	add.w	r1, r7, #13
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	f004 f963 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 fe80 	bl	80024fc <HAL_GPIO_WritePin>

		retval = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b2f      	cmp	r3, #47	; 0x2f
 800081a:	d922      	bls.n	8000862 <CC1200_Command_Strobe+0x58>
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b3d      	cmp	r3, #61	; 0x3d
 8000820:	d81f      	bhi.n	8000862 <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	73bb      	strb	r3, [r7, #14]

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6858      	ldr	r0, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f001 fe63 	bl	80024fc <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f107 010e 	add.w	r1, r7, #14
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	f004 f933 	bl	8004ab2 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f001 fe50 	bl	80024fc <HAL_GPIO_WritePin>

		retval = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
	{
 8000860:	e001      	b.n	8000866 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1200_Transmit>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Transmit(CC1200_t* SPI_Info, uint8_t* TX_Packet, uint8_t TX_Packet_Length)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t Header_Byte = 0x40 | 0x3F; // 0100 0000 | 0011 1111
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	75bb      	strb	r3, [r7, #22]
	uint8_t i; // counter

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFTX); // flush TX FIFO (before loading data)
 8000882:	213b      	movs	r1, #59	; 0x3b
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffc0 	bl	800080a <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6858      	ldr	r0, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f001 fe31 	bl	80024fc <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68d8      	ldr	r0, [r3, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f107 0116 	add.w	r1, r7, #22
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	f004 f901 	bl	8004ab2 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &TX_Packet_Length, SPI_Info -> MISO_Data, 1, 100);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68d8      	ldr	r0, [r3, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	f004 f8f7 	bl	8004ab2 <HAL_SPI_TransmitReceive>

	for(i = 0; i < TX_Packet_Length; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00e      	b.n	80008e8 <CC1200_Transmit+0x78>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &(TX_Packet[i]), SPI_Info -> MISO_Data, 1, 100);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68d8      	ldr	r0, [r3, #12]
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	18d1      	adds	r1, r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	f004 f8e8 	bl	8004ab2 <HAL_SPI_TransmitReceive>
	for(i = 0; i < TX_Packet_Length; i++)
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3301      	adds	r3, #1
 80008e6:	75fb      	strb	r3, [r7, #23]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7dfa      	ldrb	r2, [r7, #23]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3ec      	bcc.n	80008ca <CC1200_Transmit+0x5a>
	}

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6858      	ldr	r0, [r3, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f001 fdfe 	bl	80024fc <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_STX); // enable TX
 8000900:	2135      	movs	r1, #53	; 0x35
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff81 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <CC1200_Read_RX_FIFO>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_RX_FIFO(CC1200_t* SPI_Info, uint8_t* RX_Packet)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af02      	add	r7, sp, #8
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
	uint8_t Header_Byte = 0xC0 | 0x3F; // 1100 0000 | 0011 1111
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	737b      	strb	r3, [r7, #13]
	uint8_t Placeholder = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	733b      	strb	r3, [r7, #12]
	uint8_t Packet_Length;
	uint8_t i; // counter

	CC1200_Read_Single_Register(SPI_Info, CC1200_NUM_RXBYTES);
 8000924:	21d7      	movs	r1, #215	; 0xd7
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fe8a 	bl	8000640 <CC1200_Read_Single_Register>
	Packet_Length = (SPI_Info -> MISO_Data) [0];
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	73bb      	strb	r3, [r7, #14]

    if (Packet_Length == 0)
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <CC1200_Read_RX_FIFO+0x2c>
    {
		return 1;
 800093a:	2301      	movs	r3, #1
 800093c:	e04f      	b.n	80009de <CC1200_Read_RX_FIFO+0xcc>
    }

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6858      	ldr	r0, [r3, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	891b      	ldrh	r3, [r3, #8]
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	f001 fdd7 	bl	80024fc <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68d8      	ldr	r0, [r3, #12]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f107 010d 	add.w	r1, r7, #13
 800095a:	2364      	movs	r3, #100	; 0x64
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	f004 f8a7 	bl	8004ab2 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68d8      	ldr	r0, [r3, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	f107 010c 	add.w	r1, r7, #12
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	f004 f89c 	bl	8004ab2 <HAL_SPI_TransmitReceive>

	Packet_Length = (SPI_Info -> MISO_Data) [0];
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < Packet_Length; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e014      	b.n	80009b2 <CC1200_Read_RX_FIFO+0xa0>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68d8      	ldr	r0, [r3, #12]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	f107 010c 	add.w	r1, r7, #12
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	f004 f88a 	bl	8004ab2 <HAL_SPI_TransmitReceive>
		RX_Packet[i] = (SPI_Info -> MISO_Data) [0];
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	6839      	ldr	r1, [r7, #0]
 80009a6:	440b      	add	r3, r1
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Packet_Length; i++)
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	3301      	adds	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	7bfa      	ldrb	r2, [r7, #15]
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3e6      	bcc.n	8000988 <CC1200_Read_RX_FIFO+0x76>
	}

	RX_Packet[Packet_Length] = '\0'; // null termination
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6858      	ldr	r0, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	891b      	ldrh	r3, [r3, #8]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4619      	mov	r1, r3
 80009d0:	f001 fd94 	bl	80024fc <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (after processing data)
 80009d4:	213a      	movs	r1, #58	; 0x3a
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff17 	bl	800080a <CC1200_Command_Strobe>

	return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <CC1200_Read_RSSI>:

int16_t CC1200_Read_RSSI(CC1200_t* SPI_Info)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	CC1200_Read_Single_Extended_Register(SPI_Info, CC1200_RSSI1);
 80009ee:	2171      	movs	r1, #113	; 0x71
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff feb7 	bl	8000764 <CC1200_Read_Single_Extended_Register>
	int16_t RSSI_MSB = (SPI_Info -> MISO_Data) [0]; // whole number component
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	81fb      	strh	r3, [r7, #14]
	return RSSI_MSB;
 80009fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <Configure>:
int16_t RSSI_Value;

// Active Functions

void Configure(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Configure\r\n");
 8000a16:	4989      	ldr	r1, [pc, #548]	; (8000c3c <Configure+0x230>)
 8000a18:	4889      	ldr	r0, [pc, #548]	; (8000c40 <Configure+0x234>)
 8000a1a:	f009 fd7b 	bl	800a514 <siprintf>
	Token = strtok((char*) RX_Buffer, " "); // first token "configure"
 8000a1e:	4989      	ldr	r1, [pc, #548]	; (8000c44 <Configure+0x238>)
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f009 fdbb 	bl	800a59c <strtok>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a87      	ldr	r2, [pc, #540]	; (8000c48 <Configure+0x23c>)
 8000a2a:	6013      	str	r3, [r2, #0]
	Token = strtok(NULL, "\r\n"); // second token "[mode]"
 8000a2c:	4987      	ldr	r1, [pc, #540]	; (8000c4c <Configure+0x240>)
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f009 fdb4 	bl	800a59c <strtok>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a84      	ldr	r2, [pc, #528]	; (8000c48 <Configure+0x23c>)
 8000a38:	6013      	str	r3, [r2, #0]
	if (strncmp(Token, "transmit", strlen("transmit")) == 0)
 8000a3a:	4b83      	ldr	r3, [pc, #524]	; (8000c48 <Configure+0x23c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2208      	movs	r2, #8
 8000a40:	4983      	ldr	r1, [pc, #524]	; (8000c50 <Configure+0x244>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f009 fd95 	bl	800a572 <strncmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d161      	bne.n	8000b12 <Configure+0x106>
	{
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES); // reset the chip
 8000a4e:	2130      	movs	r1, #48	; 0x30
 8000a50:	4880      	ldr	r0, [pc, #512]	; (8000c54 <Configure+0x248>)
 8000a52:	f7ff feda 	bl	800080a <CC1200_Command_Strobe>
		sprintf(Message_Part, "Selected Mode: %s\r\n", Token);
 8000a56:	4b7c      	ldr	r3, [pc, #496]	; (8000c48 <Configure+0x23c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	497e      	ldr	r1, [pc, #504]	; (8000c58 <Configure+0x24c>)
 8000a5e:	487f      	ldr	r0, [pc, #508]	; (8000c5c <Configure+0x250>)
 8000a60:	f009 fd58 	bl	800a514 <siprintf>
		strcat(Message, Message_Part);
 8000a64:	497d      	ldr	r1, [pc, #500]	; (8000c5c <Configure+0x250>)
 8000a66:	4876      	ldr	r0, [pc, #472]	; (8000c40 <Configure+0x234>)
 8000a68:	f009 fd74 	bl	800a554 <strcat>
		strcat(Message, "Configured the CC1200 with Transmit Settings\r\n");
 8000a6c:	4874      	ldr	r0, [pc, #464]	; (8000c40 <Configure+0x234>)
 8000a6e:	f7ff fb85 	bl	800017c <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b72      	ldr	r3, [pc, #456]	; (8000c40 <Configure+0x234>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a79      	ldr	r2, [pc, #484]	; (8000c60 <Configure+0x254>)
 8000a7c:	4615      	mov	r5, r2
 8000a7e:	469c      	mov	ip, r3
 8000a80:	f105 0e20 	add.w	lr, r5, #32
 8000a84:	4664      	mov	r4, ip
 8000a86:	462e      	mov	r6, r5
 8000a88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a8a:	6020      	str	r0, [r4, #0]
 8000a8c:	6061      	str	r1, [r4, #4]
 8000a8e:	60a2      	str	r2, [r4, #8]
 8000a90:	60e3      	str	r3, [r4, #12]
 8000a92:	3510      	adds	r5, #16
 8000a94:	f10c 0c10 	add.w	ip, ip, #16
 8000a98:	4575      	cmp	r5, lr
 8000a9a:	d1f3      	bne.n	8000a84 <Configure+0x78>
 8000a9c:	4664      	mov	r4, ip
 8000a9e:	462b      	mov	r3, r5
 8000aa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000aa2:	6020      	str	r0, [r4, #0]
 8000aa4:	6061      	str	r1, [r4, #4]
 8000aa6:	60a2      	str	r2, [r4, #8]
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	789b      	ldrb	r3, [r3, #2]
 8000aac:	81a2      	strh	r2, [r4, #12]
 8000aae:	73a3      	strb	r3, [r4, #14]
		check = CC1200_Configure(&SPI_Info, Transmit_Register_Settings, Transmit_Extended_Register_Settings);
 8000ab0:	4a6c      	ldr	r2, [pc, #432]	; (8000c64 <Configure+0x258>)
 8000ab2:	496d      	ldr	r1, [pc, #436]	; (8000c68 <Configure+0x25c>)
 8000ab4:	4867      	ldr	r0, [pc, #412]	; (8000c54 <Configure+0x248>)
 8000ab6:	f7ff fd0c 	bl	80004d2 <CC1200_Configure>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b6b      	ldr	r3, [pc, #428]	; (8000c6c <Configure+0x260>)
 8000ac0:	701a      	strb	r2, [r3, #0]
		if (check == 1)
 8000ac2:	4b6a      	ldr	r3, [pc, #424]	; (8000c6c <Configure+0x260>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d111      	bne.n	8000aee <Configure+0xe2>
		{
			strcat(Message, "Error Occurred\r\n");
 8000aca:	485d      	ldr	r0, [pc, #372]	; (8000c40 <Configure+0x234>)
 8000acc:	f7ff fb56 	bl	800017c <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b5a      	ldr	r3, [pc, #360]	; (8000c40 <Configure+0x234>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a65      	ldr	r2, [pc, #404]	; (8000c70 <Configure+0x264>)
 8000ada:	461d      	mov	r5, r3
 8000adc:	4614      	mov	r4, r2
 8000ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae0:	6028      	str	r0, [r5, #0]
 8000ae2:	6069      	str	r1, [r5, #4]
 8000ae4:	60aa      	str	r2, [r5, #8]
 8000ae6:	60eb      	str	r3, [r5, #12]
 8000ae8:	7823      	ldrb	r3, [r4, #0]
 8000aea:	742b      	strb	r3, [r5, #16]
	{
		sprintf(Message_Part, "Invalid Mode: %s\r\n", Token);
		strcat(Message, Message_Part);
		strcat(Message, "Could Not Configure the CC1200\r\n");
	}
}
 8000aec:	e0a2      	b.n	8000c34 <Configure+0x228>
			strcat(Message, "No Error Occurred\r\n");
 8000aee:	4854      	ldr	r0, [pc, #336]	; (8000c40 <Configure+0x234>)
 8000af0:	f7ff fb44 	bl	800017c <strlen>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b51      	ldr	r3, [pc, #324]	; (8000c40 <Configure+0x234>)
 8000afa:	4413      	add	r3, r2
 8000afc:	4a5d      	ldr	r2, [pc, #372]	; (8000c74 <Configure+0x268>)
 8000afe:	461d      	mov	r5, r3
 8000b00:	4614      	mov	r4, r2
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	6028      	str	r0, [r5, #0]
 8000b06:	6069      	str	r1, [r5, #4]
 8000b08:	60aa      	str	r2, [r5, #8]
 8000b0a:	60eb      	str	r3, [r5, #12]
 8000b0c:	6820      	ldr	r0, [r4, #0]
 8000b0e:	6128      	str	r0, [r5, #16]
}
 8000b10:	e090      	b.n	8000c34 <Configure+0x228>
	else if (strncmp(Token, "receive", strlen("receive")) == 0)
 8000b12:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <Configure+0x23c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2207      	movs	r2, #7
 8000b18:	4957      	ldr	r1, [pc, #348]	; (8000c78 <Configure+0x26c>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f009 fd29 	bl	800a572 <strncmp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d15f      	bne.n	8000be6 <Configure+0x1da>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES); // reset the chip
 8000b26:	2130      	movs	r1, #48	; 0x30
 8000b28:	484a      	ldr	r0, [pc, #296]	; (8000c54 <Configure+0x248>)
 8000b2a:	f7ff fe6e 	bl	800080a <CC1200_Command_Strobe>
		sprintf(Message_Part, "Selected Mode: %s\r\n", Token);
 8000b2e:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <Configure+0x23c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4948      	ldr	r1, [pc, #288]	; (8000c58 <Configure+0x24c>)
 8000b36:	4849      	ldr	r0, [pc, #292]	; (8000c5c <Configure+0x250>)
 8000b38:	f009 fcec 	bl	800a514 <siprintf>
		strcat(Message, Message_Part);
 8000b3c:	4947      	ldr	r1, [pc, #284]	; (8000c5c <Configure+0x250>)
 8000b3e:	4840      	ldr	r0, [pc, #256]	; (8000c40 <Configure+0x234>)
 8000b40:	f009 fd08 	bl	800a554 <strcat>
		strcat(Message, "Configured the CC1200 with Receive Settings\r\n");
 8000b44:	483e      	ldr	r0, [pc, #248]	; (8000c40 <Configure+0x234>)
 8000b46:	f7ff fb19 	bl	800017c <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <Configure+0x234>)
 8000b50:	4413      	add	r3, r2
 8000b52:	4a4a      	ldr	r2, [pc, #296]	; (8000c7c <Configure+0x270>)
 8000b54:	4614      	mov	r4, r2
 8000b56:	469c      	mov	ip, r3
 8000b58:	f104 0e20 	add.w	lr, r4, #32
 8000b5c:	4665      	mov	r5, ip
 8000b5e:	4626      	mov	r6, r4
 8000b60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b62:	6028      	str	r0, [r5, #0]
 8000b64:	6069      	str	r1, [r5, #4]
 8000b66:	60aa      	str	r2, [r5, #8]
 8000b68:	60eb      	str	r3, [r5, #12]
 8000b6a:	3410      	adds	r4, #16
 8000b6c:	f10c 0c10 	add.w	ip, ip, #16
 8000b70:	4574      	cmp	r4, lr
 8000b72:	d1f3      	bne.n	8000b5c <Configure+0x150>
 8000b74:	4665      	mov	r5, ip
 8000b76:	4623      	mov	r3, r4
 8000b78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b7a:	6028      	str	r0, [r5, #0]
 8000b7c:	6069      	str	r1, [r5, #4]
 8000b7e:	60aa      	str	r2, [r5, #8]
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	81ab      	strh	r3, [r5, #12]
		check = CC1200_Configure(&SPI_Info, Receive_Register_Settings, Receive_Extended_Register_Settings);
 8000b84:	4a3e      	ldr	r2, [pc, #248]	; (8000c80 <Configure+0x274>)
 8000b86:	493f      	ldr	r1, [pc, #252]	; (8000c84 <Configure+0x278>)
 8000b88:	4832      	ldr	r0, [pc, #200]	; (8000c54 <Configure+0x248>)
 8000b8a:	f7ff fca2 	bl	80004d2 <CC1200_Configure>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <Configure+0x260>)
 8000b94:	701a      	strb	r2, [r3, #0]
		if (check == 1)
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <Configure+0x260>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d111      	bne.n	8000bc2 <Configure+0x1b6>
			strcat(Message, "Error Occurred\r\n");
 8000b9e:	4828      	ldr	r0, [pc, #160]	; (8000c40 <Configure+0x234>)
 8000ba0:	f7ff faec 	bl	800017c <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <Configure+0x234>)
 8000baa:	4413      	add	r3, r2
 8000bac:	4a30      	ldr	r2, [pc, #192]	; (8000c70 <Configure+0x264>)
 8000bae:	461d      	mov	r5, r3
 8000bb0:	4614      	mov	r4, r2
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	6028      	str	r0, [r5, #0]
 8000bb6:	6069      	str	r1, [r5, #4]
 8000bb8:	60aa      	str	r2, [r5, #8]
 8000bba:	60eb      	str	r3, [r5, #12]
 8000bbc:	7823      	ldrb	r3, [r4, #0]
 8000bbe:	742b      	strb	r3, [r5, #16]
}
 8000bc0:	e038      	b.n	8000c34 <Configure+0x228>
			strcat(Message, "No Error Occurred\r\n");
 8000bc2:	481f      	ldr	r0, [pc, #124]	; (8000c40 <Configure+0x234>)
 8000bc4:	f7ff fada 	bl	800017c <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <Configure+0x234>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <Configure+0x268>)
 8000bd2:	461d      	mov	r5, r3
 8000bd4:	4614      	mov	r4, r2
 8000bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd8:	6028      	str	r0, [r5, #0]
 8000bda:	6069      	str	r1, [r5, #4]
 8000bdc:	60aa      	str	r2, [r5, #8]
 8000bde:	60eb      	str	r3, [r5, #12]
 8000be0:	6820      	ldr	r0, [r4, #0]
 8000be2:	6128      	str	r0, [r5, #16]
}
 8000be4:	e026      	b.n	8000c34 <Configure+0x228>
		sprintf(Message_Part, "Invalid Mode: %s\r\n", Token);
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <Configure+0x23c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4926      	ldr	r1, [pc, #152]	; (8000c88 <Configure+0x27c>)
 8000bee:	481b      	ldr	r0, [pc, #108]	; (8000c5c <Configure+0x250>)
 8000bf0:	f009 fc90 	bl	800a514 <siprintf>
		strcat(Message, Message_Part);
 8000bf4:	4919      	ldr	r1, [pc, #100]	; (8000c5c <Configure+0x250>)
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <Configure+0x234>)
 8000bf8:	f009 fcac 	bl	800a554 <strcat>
		strcat(Message, "Could Not Configure the CC1200\r\n");
 8000bfc:	4810      	ldr	r0, [pc, #64]	; (8000c40 <Configure+0x234>)
 8000bfe:	f7ff fabd 	bl	800017c <strlen>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <Configure+0x234>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <Configure+0x280>)
 8000c0c:	4614      	mov	r4, r2
 8000c0e:	469c      	mov	ip, r3
 8000c10:	f104 0e20 	add.w	lr, r4, #32
 8000c14:	4665      	mov	r5, ip
 8000c16:	4626      	mov	r6, r4
 8000c18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c1a:	6028      	str	r0, [r5, #0]
 8000c1c:	6069      	str	r1, [r5, #4]
 8000c1e:	60aa      	str	r2, [r5, #8]
 8000c20:	60eb      	str	r3, [r5, #12]
 8000c22:	3410      	adds	r4, #16
 8000c24:	f10c 0c10 	add.w	ip, ip, #16
 8000c28:	4574      	cmp	r4, lr
 8000c2a:	d1f3      	bne.n	8000c14 <Configure+0x208>
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	4622      	mov	r2, r4
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	701a      	strb	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3c:	0800baf0 	.word	0x0800baf0
 8000c40:	200004c4 	.word	0x200004c4
 8000c44:	0800bb08 	.word	0x0800bb08
 8000c48:	20002c70 	.word	0x20002c70
 8000c4c:	0800bb0c 	.word	0x0800bb0c
 8000c50:	0800bb10 	.word	0x0800bb10
 8000c54:	20002dd8 	.word	0x20002dd8
 8000c58:	0800bb1c 	.word	0x0800bb1c
 8000c5c:	20002bd8 	.word	0x20002bd8
 8000c60:	0800bb30 	.word	0x0800bb30
 8000c64:	20000060 	.word	0x20000060
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20002c75 	.word	0x20002c75
 8000c70:	0800bb60 	.word	0x0800bb60
 8000c74:	0800bb74 	.word	0x0800bb74
 8000c78:	0800bb88 	.word	0x0800bb88
 8000c7c:	0800bb90 	.word	0x0800bb90
 8000c80:	200001c4 	.word	0x200001c4
 8000c84:	20000164 	.word	0x20000164
 8000c88:	0800bbc0 	.word	0x0800bbc0
 8000c8c:	0800bbd4 	.word	0x0800bbd4

08000c90 <Transmit>:

void Transmit(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Transmit\r\n");
 8000c9a:	4941      	ldr	r1, [pc, #260]	; (8000da0 <Transmit+0x110>)
 8000c9c:	4841      	ldr	r0, [pc, #260]	; (8000da4 <Transmit+0x114>)
 8000c9e:	f009 fc39 	bl	800a514 <siprintf>
	strcat(Message, "Set the CC1200 into Transmit Mode\r\n");
 8000ca2:	4840      	ldr	r0, [pc, #256]	; (8000da4 <Transmit+0x114>)
 8000ca4:	f7ff fa6a 	bl	800017c <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <Transmit+0x114>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a3d      	ldr	r2, [pc, #244]	; (8000da8 <Transmit+0x118>)
 8000cb2:	4614      	mov	r4, r2
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	f104 0e20 	add.w	lr, r4, #32
 8000cba:	4665      	mov	r5, ip
 8000cbc:	4626      	mov	r6, r4
 8000cbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cc0:	6028      	str	r0, [r5, #0]
 8000cc2:	6069      	str	r1, [r5, #4]
 8000cc4:	60aa      	str	r2, [r5, #8]
 8000cc6:	60eb      	str	r3, [r5, #12]
 8000cc8:	3410      	adds	r4, #16
 8000cca:	f10c 0c10 	add.w	ip, ip, #16
 8000cce:	4574      	cmp	r4, lr
 8000cd0:	d1f3      	bne.n	8000cba <Transmit+0x2a>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	6810      	ldr	r0, [r2, #0]
 8000cd8:	6018      	str	r0, [r3, #0]
	strcat(Message, "Transmitted the Following Message: ");
 8000cda:	4832      	ldr	r0, [pc, #200]	; (8000da4 <Transmit+0x114>)
 8000cdc:	f7ff fa4e 	bl	800017c <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <Transmit+0x114>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a30      	ldr	r2, [pc, #192]	; (8000dac <Transmit+0x11c>)
 8000cea:	4614      	mov	r4, r2
 8000cec:	469c      	mov	ip, r3
 8000cee:	f104 0e20 	add.w	lr, r4, #32
 8000cf2:	4665      	mov	r5, ip
 8000cf4:	4626      	mov	r6, r4
 8000cf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cf8:	6028      	str	r0, [r5, #0]
 8000cfa:	6069      	str	r1, [r5, #4]
 8000cfc:	60aa      	str	r2, [r5, #8]
 8000cfe:	60eb      	str	r3, [r5, #12]
 8000d00:	3410      	adds	r4, #16
 8000d02:	f10c 0c10 	add.w	ip, ip, #16
 8000d06:	4574      	cmp	r4, lr
 8000d08:	d1f3      	bne.n	8000cf2 <Transmit+0x62>
 8000d0a:	4663      	mov	r3, ip
 8000d0c:	4622      	mov	r2, r4
 8000d0e:	6810      	ldr	r0, [r2, #0]
 8000d10:	6018      	str	r0, [r3, #0]
	Token = strtok((char*) RX_Buffer, " "); // first token "transmit"
 8000d12:	4927      	ldr	r1, [pc, #156]	; (8000db0 <Transmit+0x120>)
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f009 fc41 	bl	800a59c <strtok>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a25      	ldr	r2, [pc, #148]	; (8000db4 <Transmit+0x124>)
 8000d1e:	6013      	str	r3, [r2, #0]
	Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 8000d20:	4925      	ldr	r1, [pc, #148]	; (8000db8 <Transmit+0x128>)
 8000d22:	2000      	movs	r0, #0
 8000d24:	f009 fc3a 	bl	800a59c <strtok>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <Transmit+0x124>)
 8000d2c:	6013      	str	r3, [r2, #0]
	TX_Packet_Length = strlen(Token);
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <Transmit+0x124>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fa22 	bl	800017c <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <Transmit+0x12c>)
 8000d3e:	701a      	strb	r2, [r3, #0]
	sprintf(Message_Part, "%s\r\n", Token);
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <Transmit+0x124>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	491e      	ldr	r1, [pc, #120]	; (8000dc0 <Transmit+0x130>)
 8000d48:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <Transmit+0x134>)
 8000d4a:	f009 fbe3 	bl	800a514 <siprintf>
	strcat(Message, Message_Part);
 8000d4e:	491d      	ldr	r1, [pc, #116]	; (8000dc4 <Transmit+0x134>)
 8000d50:	4814      	ldr	r0, [pc, #80]	; (8000da4 <Transmit+0x114>)
 8000d52:	f009 fbff 	bl	800a554 <strcat>
	for (counter = 0; counter < TX_Packet_Length; counter++)
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <Transmit+0x138>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	e00f      	b.n	8000d7e <Transmit+0xee>
	{
		TX_Packet[counter] = (uint8_t) (Token[counter]);
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <Transmit+0x124>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <Transmit+0x138>)
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <Transmit+0x138>)
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	7819      	ldrb	r1, [r3, #0]
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <Transmit+0x13c>)
 8000d70:	5499      	strb	r1, [r3, r2]
	for (counter = 0; counter < TX_Packet_Length; counter++)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <Transmit+0x138>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <Transmit+0x138>)
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <Transmit+0x138>)
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <Transmit+0x12c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3e9      	bcc.n	8000d5e <Transmit+0xce>
	}
	CC1200_Transmit(&SPI_Info, TX_Packet, TX_Packet_Length);
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <Transmit+0x12c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	490e      	ldr	r1, [pc, #56]	; (8000dcc <Transmit+0x13c>)
 8000d92:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <Transmit+0x140>)
 8000d94:	f7ff fd6c 	bl	8000870 <CC1200_Transmit>
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	0800bbf8 	.word	0x0800bbf8
 8000da4:	200004c4 	.word	0x200004c4
 8000da8:	0800bc10 	.word	0x0800bc10
 8000dac:	0800bc34 	.word	0x0800bc34
 8000db0:	0800bb08 	.word	0x0800bb08
 8000db4:	20002c70 	.word	0x20002c70
 8000db8:	0800bb0c 	.word	0x0800bb0c
 8000dbc:	20002cf7 	.word	0x20002cf7
 8000dc0:	0800bc58 	.word	0x0800bc58
 8000dc4:	20002bd8 	.word	0x20002bd8
 8000dc8:	20002c74 	.word	0x20002c74
 8000dcc:	20002c78 	.word	0x20002c78
 8000dd0:	20002dd8 	.word	0x20002dd8

08000dd4 <Receive>:

void Receive(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Receive\r\n");
 8000dde:	4915      	ldr	r1, [pc, #84]	; (8000e34 <Receive+0x60>)
 8000de0:	4815      	ldr	r0, [pc, #84]	; (8000e38 <Receive+0x64>)
 8000de2:	f009 fb97 	bl	800a514 <siprintf>
	strcat(Message, "Set the CC1200 into Receive Mode\r\n");
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <Receive+0x64>)
 8000de8:	f7ff f9c8 	bl	800017c <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <Receive+0x64>)
 8000df2:	4413      	add	r3, r2
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <Receive+0x68>)
 8000df6:	4614      	mov	r4, r2
 8000df8:	469c      	mov	ip, r3
 8000dfa:	f104 0e20 	add.w	lr, r4, #32
 8000dfe:	4665      	mov	r5, ip
 8000e00:	4626      	mov	r6, r4
 8000e02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e04:	6028      	str	r0, [r5, #0]
 8000e06:	6069      	str	r1, [r5, #4]
 8000e08:	60aa      	str	r2, [r5, #8]
 8000e0a:	60eb      	str	r3, [r5, #12]
 8000e0c:	3410      	adds	r4, #16
 8000e0e:	f10c 0c10 	add.w	ip, ip, #16
 8000e12:	4574      	cmp	r4, lr
 8000e14:	d1f3      	bne.n	8000dfe <Receive+0x2a>
 8000e16:	4663      	mov	r3, ip
 8000e18:	4622      	mov	r2, r4
 8000e1a:	8811      	ldrh	r1, [r2, #0]
 8000e1c:	7892      	ldrb	r2, [r2, #2]
 8000e1e:	8019      	strh	r1, [r3, #0]
 8000e20:	709a      	strb	r2, [r3, #2]
	CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // enable RX
 8000e22:	2134      	movs	r1, #52	; 0x34
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <Receive+0x6c>)
 8000e26:	f7ff fcf0 	bl	800080a <CC1200_Command_Strobe>
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	0800bc60 	.word	0x0800bc60
 8000e38:	200004c4 	.word	0x200004c4
 8000e3c:	0800bc78 	.word	0x0800bc78
 8000e40:	20002dd8 	.word	0x20002dd8

08000e44 <Read_RX_FIFO>:

// used with the GPIO interrupt
void Read_RX_FIFO(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

	RSSI_Value = CC1200_Read_RSSI(&SPI_Info);
 8000e48:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <Read_RX_FIFO+0x74>)
 8000e4a:	f7ff fdcc 	bl	80009e6 <CC1200_Read_RSSI>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <Read_RX_FIFO+0x78>)
 8000e54:	801a      	strh	r2, [r3, #0]
	check = CC1200_Read_RX_FIFO(&SPI_Info, RX_Packet);
 8000e56:	491a      	ldr	r1, [pc, #104]	; (8000ec0 <Read_RX_FIFO+0x7c>)
 8000e58:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <Read_RX_FIFO+0x74>)
 8000e5a:	f7ff fd5a 	bl	8000912 <CC1200_Read_RX_FIFO>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <Read_RX_FIFO+0x80>)
 8000e64:	701a      	strb	r2, [r3, #0]

	if (check) // check == 1
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <Read_RX_FIFO+0x80>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d004      	beq.n	8000e78 <Read_RX_FIFO+0x34>
	{
		sprintf(Message, "RX FIFO Empty!\r\n");
 8000e6e:	4916      	ldr	r1, [pc, #88]	; (8000ec8 <Read_RX_FIFO+0x84>)
 8000e70:	4816      	ldr	r0, [pc, #88]	; (8000ecc <Read_RX_FIFO+0x88>)
 8000e72:	f009 fb4f 	bl	800a514 <siprintf>
		strcat(Message, Message_Part);
		sprintf(Message_Part, "RSSI (dBm): %d\r\n", RSSI_Value);
		strcat(Message, Message_Part);
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // re-enter RX
	}
}
 8000e76:	e01c      	b.n	8000eb2 <Read_RX_FIFO+0x6e>
		sprintf(Message, "Received the Following Message: ");
 8000e78:	4915      	ldr	r1, [pc, #84]	; (8000ed0 <Read_RX_FIFO+0x8c>)
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <Read_RX_FIFO+0x88>)
 8000e7c:	f009 fb4a 	bl	800a514 <siprintf>
		sprintf(Message_Part, "%s\r\n", (char*) RX_Packet);
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <Read_RX_FIFO+0x7c>)
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <Read_RX_FIFO+0x90>)
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <Read_RX_FIFO+0x94>)
 8000e86:	f009 fb45 	bl	800a514 <siprintf>
		strcat(Message, Message_Part);
 8000e8a:	4913      	ldr	r1, [pc, #76]	; (8000ed8 <Read_RX_FIFO+0x94>)
 8000e8c:	480f      	ldr	r0, [pc, #60]	; (8000ecc <Read_RX_FIFO+0x88>)
 8000e8e:	f009 fb61 	bl	800a554 <strcat>
		sprintf(Message_Part, "RSSI (dBm): %d\r\n", RSSI_Value);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <Read_RX_FIFO+0x78>)
 8000e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4910      	ldr	r1, [pc, #64]	; (8000edc <Read_RX_FIFO+0x98>)
 8000e9c:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <Read_RX_FIFO+0x94>)
 8000e9e:	f009 fb39 	bl	800a514 <siprintf>
		strcat(Message, Message_Part);
 8000ea2:	490d      	ldr	r1, [pc, #52]	; (8000ed8 <Read_RX_FIFO+0x94>)
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <Read_RX_FIFO+0x88>)
 8000ea6:	f009 fb55 	bl	800a554 <strcat>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRX); // re-enter RX
 8000eaa:	2134      	movs	r1, #52	; 0x34
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <Read_RX_FIFO+0x74>)
 8000eae:	f7ff fcac 	bl	800080a <CC1200_Command_Strobe>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20002dd8 	.word	0x20002dd8
 8000ebc:	20002cf8 	.word	0x20002cf8
 8000ec0:	20002dec 	.word	0x20002dec
 8000ec4:	20002c75 	.word	0x20002c75
 8000ec8:	0800bc9c 	.word	0x0800bc9c
 8000ecc:	200004c4 	.word	0x200004c4
 8000ed0:	0800bcb0 	.word	0x0800bcb0
 8000ed4:	0800bc58 	.word	0x0800bc58
 8000ed8:	20002bd8 	.word	0x20002bd8
 8000edc:	0800bcd4 	.word	0x0800bcd4

08000ee0 <Status>:

void Status(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Status\r\n");
 8000eea:	4913      	ldr	r1, [pc, #76]	; (8000f38 <Status+0x58>)
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <Status+0x5c>)
 8000eee:	f009 fb11 	bl	800a514 <siprintf>
	strcat(Message, "CC1200 Status: ");
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <Status+0x5c>)
 8000ef4:	f7ff f942 	bl	800017c <strlen>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <Status+0x5c>)
 8000efe:	4413      	add	r3, r2
 8000f00:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <Status+0x60>)
 8000f02:	461c      	mov	r4, r3
 8000f04:	4615      	mov	r5, r2
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	6020      	str	r0, [r4, #0]
 8000f0a:	6061      	str	r1, [r4, #4]
 8000f0c:	60a2      	str	r2, [r4, #8]
 8000f0e:	60e3      	str	r3, [r4, #12]
	CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8000f10:	213d      	movs	r1, #61	; 0x3d
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <Status+0x64>)
 8000f14:	f7ff fc79 	bl	800080a <CC1200_Command_Strobe>
	sprintf(Message_Part, "0X%02X\r\n", MISO_Data[0]);
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <Status+0x68>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	490b      	ldr	r1, [pc, #44]	; (8000f4c <Status+0x6c>)
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <Status+0x70>)
 8000f22:	f009 faf7 	bl	800a514 <siprintf>
	strcat(Message, Message_Part);
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <Status+0x70>)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <Status+0x5c>)
 8000f2a:	f009 fb13 	bl	800a554 <strcat>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bdb0      	pop	{r4, r5, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	0800bce8 	.word	0x0800bce8
 8000f3c:	200004c4 	.word	0x200004c4
 8000f40:	0800bd00 	.word	0x0800bd00
 8000f44:	20002dd8 	.word	0x20002dd8
 8000f48:	20002de8 	.word	0x20002de8
 8000f4c:	0800bd10 	.word	0x0800bd10
 8000f50:	20002bd8 	.word	0x20002bd8

08000f54 <Register_Access>:

void Register_Access(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Register\r\n");
 8000f5e:	499d      	ldr	r1, [pc, #628]	; (80011d4 <Register_Access+0x280>)
 8000f60:	489d      	ldr	r0, [pc, #628]	; (80011d8 <Register_Access+0x284>)
 8000f62:	f009 fad7 	bl	800a514 <siprintf>
	Token = strtok((char*) RX_Buffer, " "); // first token "register"
 8000f66:	499d      	ldr	r1, [pc, #628]	; (80011dc <Register_Access+0x288>)
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f009 fb17 	bl	800a59c <strtok>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a9b      	ldr	r2, [pc, #620]	; (80011e0 <Register_Access+0x28c>)
 8000f72:	6013      	str	r3, [r2, #0]
	Token = strtok(NULL, " "); // second token "[access type]"
 8000f74:	4999      	ldr	r1, [pc, #612]	; (80011dc <Register_Access+0x288>)
 8000f76:	2000      	movs	r0, #0
 8000f78:	f009 fb10 	bl	800a59c <strtok>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a98      	ldr	r2, [pc, #608]	; (80011e0 <Register_Access+0x28c>)
 8000f80:	6013      	str	r3, [r2, #0]
	if (strncmp(Token, "print", strlen("print")) == 0)
 8000f82:	4b97      	ldr	r3, [pc, #604]	; (80011e0 <Register_Access+0x28c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2205      	movs	r2, #5
 8000f88:	4996      	ldr	r1, [pc, #600]	; (80011e4 <Register_Access+0x290>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f009 faf1 	bl	800a572 <strncmp>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 80a7 	bne.w	80010e6 <Register_Access+0x192>
	{
		sprintf(Message_Part, "Selected Access Type: %s\r\n", Token);
 8000f98:	4b91      	ldr	r3, [pc, #580]	; (80011e0 <Register_Access+0x28c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4992      	ldr	r1, [pc, #584]	; (80011e8 <Register_Access+0x294>)
 8000fa0:	4892      	ldr	r0, [pc, #584]	; (80011ec <Register_Access+0x298>)
 8000fa2:	f009 fab7 	bl	800a514 <siprintf>
		strcat(Message, Message_Part);
 8000fa6:	4991      	ldr	r1, [pc, #580]	; (80011ec <Register_Access+0x298>)
 8000fa8:	488b      	ldr	r0, [pc, #556]	; (80011d8 <Register_Access+0x284>)
 8000faa:	f009 fad3 	bl	800a554 <strcat>
		strcat(Message, "Register Space\r\n");
 8000fae:	488a      	ldr	r0, [pc, #552]	; (80011d8 <Register_Access+0x284>)
 8000fb0:	f7ff f8e4 	bl	800017c <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b87      	ldr	r3, [pc, #540]	; (80011d8 <Register_Access+0x284>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a8c      	ldr	r2, [pc, #560]	; (80011f0 <Register_Access+0x29c>)
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc4:	6028      	str	r0, [r5, #0]
 8000fc6:	6069      	str	r1, [r5, #4]
 8000fc8:	60aa      	str	r2, [r5, #8]
 8000fca:	60eb      	str	r3, [r5, #12]
 8000fcc:	7823      	ldrb	r3, [r4, #0]
 8000fce:	742b      	strb	r3, [r5, #16]
		strcat(Message, "Address; Value\r\n");
 8000fd0:	4881      	ldr	r0, [pc, #516]	; (80011d8 <Register_Access+0x284>)
 8000fd2:	f7ff f8d3 	bl	800017c <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b7f      	ldr	r3, [pc, #508]	; (80011d8 <Register_Access+0x284>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a85      	ldr	r2, [pc, #532]	; (80011f4 <Register_Access+0x2a0>)
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	4614      	mov	r4, r2
 8000fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe6:	6028      	str	r0, [r5, #0]
 8000fe8:	6069      	str	r1, [r5, #4]
 8000fea:	60aa      	str	r2, [r5, #8]
 8000fec:	60eb      	str	r3, [r5, #12]
 8000fee:	7823      	ldrb	r3, [r4, #0]
 8000ff0:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8000ff2:	4b81      	ldr	r3, [pc, #516]	; (80011f8 <Register_Access+0x2a4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e01c      	b.n	8001034 <Register_Access+0xe0>
		{

			CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8000ffa:	4b7f      	ldr	r3, [pc, #508]	; (80011f8 <Register_Access+0x2a4>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	487e      	ldr	r0, [pc, #504]	; (80011fc <Register_Access+0x2a8>)
 8001002:	f7ff fb1d 	bl	8000640 <CC1200_Read_Single_Register>
			Register_Value = MISO_Data[0];
 8001006:	4b7e      	ldr	r3, [pc, #504]	; (8001200 <Register_Access+0x2ac>)
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	4b7e      	ldr	r3, [pc, #504]	; (8001204 <Register_Access+0x2b0>)
 800100c:	701a      	strb	r2, [r3, #0]
			sprintf(Message_Part, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 800100e:	4b7a      	ldr	r3, [pc, #488]	; (80011f8 <Register_Access+0x2a4>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <Register_Access+0x2b0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	497b      	ldr	r1, [pc, #492]	; (8001208 <Register_Access+0x2b4>)
 800101a:	4874      	ldr	r0, [pc, #464]	; (80011ec <Register_Access+0x298>)
 800101c:	f009 fa7a 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 8001020:	4972      	ldr	r1, [pc, #456]	; (80011ec <Register_Access+0x298>)
 8001022:	486d      	ldr	r0, [pc, #436]	; (80011d8 <Register_Access+0x284>)
 8001024:	f009 fa96 	bl	800a554 <strcat>
		for (Register_Address = 0x00; Register_Address < 0x2F; Register_Address++)
 8001028:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <Register_Access+0x2a4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b71      	ldr	r3, [pc, #452]	; (80011f8 <Register_Access+0x2a4>)
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <Register_Access+0x2a4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b2e      	cmp	r3, #46	; 0x2e
 800103a:	d9de      	bls.n	8000ffa <Register_Access+0xa6>
		}
		strcat(Message, "Extended Register Space\r\n");
 800103c:	4866      	ldr	r0, [pc, #408]	; (80011d8 <Register_Access+0x284>)
 800103e:	f7ff f89d 	bl	800017c <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b64      	ldr	r3, [pc, #400]	; (80011d8 <Register_Access+0x284>)
 8001048:	4413      	add	r3, r2
 800104a:	4a70      	ldr	r2, [pc, #448]	; (800120c <Register_Access+0x2b8>)
 800104c:	461d      	mov	r5, r3
 800104e:	4614      	mov	r4, r2
 8001050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001052:	6028      	str	r0, [r5, #0]
 8001054:	6069      	str	r1, [r5, #4]
 8001056:	60aa      	str	r2, [r5, #8]
 8001058:	60eb      	str	r3, [r5, #12]
 800105a:	cc03      	ldmia	r4!, {r0, r1}
 800105c:	6128      	str	r0, [r5, #16]
 800105e:	6169      	str	r1, [r5, #20]
 8001060:	8823      	ldrh	r3, [r4, #0]
 8001062:	832b      	strh	r3, [r5, #24]
		strcat(Message, "Address; Value\r\n");
 8001064:	485c      	ldr	r0, [pc, #368]	; (80011d8 <Register_Access+0x284>)
 8001066:	f7ff f889 	bl	800017c <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b5a      	ldr	r3, [pc, #360]	; (80011d8 <Register_Access+0x284>)
 8001070:	4413      	add	r3, r2
 8001072:	4a60      	ldr	r2, [pc, #384]	; (80011f4 <Register_Access+0x2a0>)
 8001074:	461d      	mov	r5, r3
 8001076:	4614      	mov	r4, r2
 8001078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107a:	6028      	str	r0, [r5, #0]
 800107c:	6069      	str	r1, [r5, #4]
 800107e:	60aa      	str	r2, [r5, #8]
 8001080:	60eb      	str	r3, [r5, #12]
 8001082:	7823      	ldrb	r3, [r4, #0]
 8001084:	742b      	strb	r3, [r5, #16]
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <Register_Access+0x2a4>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e026      	b.n	80010dc <Register_Access+0x188>
		{
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <Register_Access+0x2a4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	4859      	ldr	r0, [pc, #356]	; (80011fc <Register_Access+0x2a8>)
 8001096:	f7ff fb65 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <Register_Access+0x2bc>)
 80010a0:	701a      	strb	r2, [r3, #0]
			if (check == 0)
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <Register_Access+0x2bc>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d111      	bne.n	80010ce <Register_Access+0x17a>
			{
				Register_Value = MISO_Data[0];
 80010aa:	4b55      	ldr	r3, [pc, #340]	; (8001200 <Register_Access+0x2ac>)
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	4b55      	ldr	r3, [pc, #340]	; (8001204 <Register_Access+0x2b0>)
 80010b0:	701a      	strb	r2, [r3, #0]
				sprintf(Message_Part, "0X%02X; 0X%02X\r\n", Register_Address, Register_Value);
 80010b2:	4b51      	ldr	r3, [pc, #324]	; (80011f8 <Register_Access+0x2a4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b52      	ldr	r3, [pc, #328]	; (8001204 <Register_Access+0x2b0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4952      	ldr	r1, [pc, #328]	; (8001208 <Register_Access+0x2b4>)
 80010be:	484b      	ldr	r0, [pc, #300]	; (80011ec <Register_Access+0x298>)
 80010c0:	f009 fa28 	bl	800a514 <siprintf>
				strcat(Message, Message_Part);
 80010c4:	4949      	ldr	r1, [pc, #292]	; (80011ec <Register_Access+0x298>)
 80010c6:	4844      	ldr	r0, [pc, #272]	; (80011d8 <Register_Access+0x284>)
 80010c8:	f009 fa44 	bl	800a554 <strcat>
 80010cc:	e000      	b.n	80010d0 <Register_Access+0x17c>
			}
			else
			{
				continue;
 80010ce:	bf00      	nop
		for (Register_Address = 0x00; Register_Address <= 0xDA; Register_Address++)
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <Register_Access+0x2a4>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <Register_Access+0x2a4>)
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <Register_Access+0x2a4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2bda      	cmp	r3, #218	; 0xda
 80010e2:	d9d4      	bls.n	800108e <Register_Access+0x13a>
	}
	else
	{
		strcat(Message, "Invalid Access\r\n");
	}
}
 80010e4:	e262      	b.n	80015ac <Register_Access+0x658>
	else if (strncmp(Token, "read", strlen("read")) == 0)
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <Register_Access+0x28c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2204      	movs	r2, #4
 80010ec:	4949      	ldr	r1, [pc, #292]	; (8001214 <Register_Access+0x2c0>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 fa3f 	bl	800a572 <strncmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 810f 	bne.w	800131a <Register_Access+0x3c6>
		Token = strtok(NULL, " "); // third token "[register space]"
 80010fc:	4937      	ldr	r1, [pc, #220]	; (80011dc <Register_Access+0x288>)
 80010fe:	2000      	movs	r0, #0
 8001100:	f009 fa4c 	bl	800a59c <strtok>
 8001104:	4603      	mov	r3, r0
 8001106:	4a36      	ldr	r2, [pc, #216]	; (80011e0 <Register_Access+0x28c>)
 8001108:	6013      	str	r3, [r2, #0]
		if (strncmp(Token, "extended", strlen("extended")) == 0)
 800110a:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <Register_Access+0x28c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2208      	movs	r2, #8
 8001110:	4941      	ldr	r1, [pc, #260]	; (8001218 <Register_Access+0x2c4>)
 8001112:	4618      	mov	r0, r3
 8001114:	f009 fa2d 	bl	800a572 <strncmp>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 8088 	bne.w	8001230 <Register_Access+0x2dc>
			strcat(Message, "Address to Read: ");
 8001120:	482d      	ldr	r0, [pc, #180]	; (80011d8 <Register_Access+0x284>)
 8001122:	f7ff f82b 	bl	800017c <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <Register_Access+0x284>)
 800112c:	4413      	add	r3, r2
 800112e:	4a3b      	ldr	r2, [pc, #236]	; (800121c <Register_Access+0x2c8>)
 8001130:	461d      	mov	r5, r3
 8001132:	4614      	mov	r4, r2
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	6028      	str	r0, [r5, #0]
 8001138:	6069      	str	r1, [r5, #4]
 800113a:	60aa      	str	r2, [r5, #8]
 800113c:	60eb      	str	r3, [r5, #12]
 800113e:	8823      	ldrh	r3, [r4, #0]
 8001140:	822b      	strh	r3, [r5, #16]
			Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 8001142:	4937      	ldr	r1, [pc, #220]	; (8001220 <Register_Access+0x2cc>)
 8001144:	2000      	movs	r0, #0
 8001146:	f009 fa29 	bl	800a59c <strtok>
 800114a:	4603      	mov	r3, r0
 800114c:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <Register_Access+0x28c>)
 800114e:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <Register_Access+0x28c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4933      	ldr	r1, [pc, #204]	; (8001224 <Register_Access+0x2d0>)
 8001158:	4824      	ldr	r0, [pc, #144]	; (80011ec <Register_Access+0x298>)
 800115a:	f009 f9db 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 800115e:	4923      	ldr	r1, [pc, #140]	; (80011ec <Register_Access+0x298>)
 8001160:	481d      	ldr	r0, [pc, #116]	; (80011d8 <Register_Access+0x284>)
 8001162:	f009 f9f7 	bl	800a554 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <Register_Access+0x28c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2210      	movs	r2, #16
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f009 faec 	bl	800a74c <strtol>
 8001174:	4603      	mov	r3, r0
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <Register_Access+0x2a4>)
 800117a:	701a      	strb	r2, [r3, #0]
			check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <Register_Access+0x2a4>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	481e      	ldr	r0, [pc, #120]	; (80011fc <Register_Access+0x2a8>)
 8001184:	f7ff faee 	bl	8000764 <CC1200_Read_Single_Extended_Register>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <Register_Access+0x2bc>)
 800118e:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Received: ");
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <Register_Access+0x284>)
 8001192:	f7fe fff3 	bl	800017c <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <Register_Access+0x284>)
 800119c:	4413      	add	r3, r2
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <Register_Access+0x2d4>)
 80011a0:	461d      	mov	r5, r3
 80011a2:	4614      	mov	r4, r2
 80011a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a6:	6028      	str	r0, [r5, #0]
 80011a8:	6069      	str	r1, [r5, #4]
 80011aa:	60aa      	str	r2, [r5, #8]
 80011ac:	60eb      	str	r3, [r5, #12]
 80011ae:	7823      	ldrb	r3, [r4, #0]
 80011b0:	742b      	strb	r3, [r5, #16]
			Register_Value = MISO_Data[0];
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <Register_Access+0x2ac>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <Register_Access+0x2b0>)
 80011b8:	701a      	strb	r2, [r3, #0]
			sprintf(Message_Part, "0X%02X\r\n", Register_Value);
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <Register_Access+0x2b0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	491a      	ldr	r1, [pc, #104]	; (800122c <Register_Access+0x2d8>)
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <Register_Access+0x298>)
 80011c4:	f009 f9a6 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 80011c8:	4908      	ldr	r1, [pc, #32]	; (80011ec <Register_Access+0x298>)
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <Register_Access+0x284>)
 80011cc:	f009 f9c2 	bl	800a554 <strcat>
}
 80011d0:	e1ec      	b.n	80015ac <Register_Access+0x658>
 80011d2:	bf00      	nop
 80011d4:	0800bd1c 	.word	0x0800bd1c
 80011d8:	200004c4 	.word	0x200004c4
 80011dc:	0800bb08 	.word	0x0800bb08
 80011e0:	20002c70 	.word	0x20002c70
 80011e4:	0800bd34 	.word	0x0800bd34
 80011e8:	0800bd3c 	.word	0x0800bd3c
 80011ec:	20002bd8 	.word	0x20002bd8
 80011f0:	0800bd58 	.word	0x0800bd58
 80011f4:	0800bd6c 	.word	0x0800bd6c
 80011f8:	20002c76 	.word	0x20002c76
 80011fc:	20002dd8 	.word	0x20002dd8
 8001200:	20002de8 	.word	0x20002de8
 8001204:	20002c77 	.word	0x20002c77
 8001208:	0800bd80 	.word	0x0800bd80
 800120c:	0800bd94 	.word	0x0800bd94
 8001210:	20002c75 	.word	0x20002c75
 8001214:	0800bdb0 	.word	0x0800bdb0
 8001218:	0800bdb8 	.word	0x0800bdb8
 800121c:	0800bdc4 	.word	0x0800bdc4
 8001220:	0800bb0c 	.word	0x0800bb0c
 8001224:	0800bc58 	.word	0x0800bc58
 8001228:	0800bdd8 	.word	0x0800bdd8
 800122c:	0800bd10 	.word	0x0800bd10
		else if (strncmp(Token, "regular", strlen("regular")) == 0)
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <Register_Access+0x4d8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2207      	movs	r2, #7
 8001236:	497e      	ldr	r1, [pc, #504]	; (8001430 <Register_Access+0x4dc>)
 8001238:	4618      	mov	r0, r3
 800123a:	f009 f99a 	bl	800a572 <strncmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d158      	bne.n	80012f6 <Register_Access+0x3a2>
			strcat(Message, "Address to Read: ");
 8001244:	487b      	ldr	r0, [pc, #492]	; (8001434 <Register_Access+0x4e0>)
 8001246:	f7fe ff99 	bl	800017c <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b79      	ldr	r3, [pc, #484]	; (8001434 <Register_Access+0x4e0>)
 8001250:	4413      	add	r3, r2
 8001252:	4a79      	ldr	r2, [pc, #484]	; (8001438 <Register_Access+0x4e4>)
 8001254:	461d      	mov	r5, r3
 8001256:	4614      	mov	r4, r2
 8001258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800125a:	6028      	str	r0, [r5, #0]
 800125c:	6069      	str	r1, [r5, #4]
 800125e:	60aa      	str	r2, [r5, #8]
 8001260:	60eb      	str	r3, [r5, #12]
 8001262:	8823      	ldrh	r3, [r4, #0]
 8001264:	822b      	strh	r3, [r5, #16]
			Token = strtok(NULL, "\r\n"); // third token "[register address]"
 8001266:	4975      	ldr	r1, [pc, #468]	; (800143c <Register_Access+0x4e8>)
 8001268:	2000      	movs	r0, #0
 800126a:	f009 f997 	bl	800a59c <strtok>
 800126e:	4603      	mov	r3, r0
 8001270:	4a6e      	ldr	r2, [pc, #440]	; (800142c <Register_Access+0x4d8>)
 8001272:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 8001274:	4b6d      	ldr	r3, [pc, #436]	; (800142c <Register_Access+0x4d8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4971      	ldr	r1, [pc, #452]	; (8001440 <Register_Access+0x4ec>)
 800127c:	4871      	ldr	r0, [pc, #452]	; (8001444 <Register_Access+0x4f0>)
 800127e:	f009 f949 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 8001282:	4970      	ldr	r1, [pc, #448]	; (8001444 <Register_Access+0x4f0>)
 8001284:	486b      	ldr	r0, [pc, #428]	; (8001434 <Register_Access+0x4e0>)
 8001286:	f009 f965 	bl	800a554 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <Register_Access+0x4d8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f009 fa5a 	bl	800a74c <strtol>
 8001298:	4603      	mov	r3, r0
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <Register_Access+0x4f4>)
 800129e:	701a      	strb	r2, [r3, #0]
			check = CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 80012a0:	4b69      	ldr	r3, [pc, #420]	; (8001448 <Register_Access+0x4f4>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4869      	ldr	r0, [pc, #420]	; (800144c <Register_Access+0x4f8>)
 80012a8:	f7ff f9ca 	bl	8000640 <CC1200_Read_Single_Register>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <Register_Access+0x4fc>)
 80012b2:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Received: ");
 80012b4:	485f      	ldr	r0, [pc, #380]	; (8001434 <Register_Access+0x4e0>)
 80012b6:	f7fe ff61 	bl	800017c <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <Register_Access+0x4e0>)
 80012c0:	4413      	add	r3, r2
 80012c2:	4a64      	ldr	r2, [pc, #400]	; (8001454 <Register_Access+0x500>)
 80012c4:	461d      	mov	r5, r3
 80012c6:	4614      	mov	r4, r2
 80012c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ca:	6028      	str	r0, [r5, #0]
 80012cc:	6069      	str	r1, [r5, #4]
 80012ce:	60aa      	str	r2, [r5, #8]
 80012d0:	60eb      	str	r3, [r5, #12]
 80012d2:	7823      	ldrb	r3, [r4, #0]
 80012d4:	742b      	strb	r3, [r5, #16]
			Register_Value = MISO_Data[0];
 80012d6:	4b60      	ldr	r3, [pc, #384]	; (8001458 <Register_Access+0x504>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <Register_Access+0x508>)
 80012dc:	701a      	strb	r2, [r3, #0]
			sprintf(Message_Part, "0X%02X\r\n", Register_Value);
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <Register_Access+0x508>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	495e      	ldr	r1, [pc, #376]	; (8001460 <Register_Access+0x50c>)
 80012e6:	4857      	ldr	r0, [pc, #348]	; (8001444 <Register_Access+0x4f0>)
 80012e8:	f009 f914 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 80012ec:	4955      	ldr	r1, [pc, #340]	; (8001444 <Register_Access+0x4f0>)
 80012ee:	4851      	ldr	r0, [pc, #324]	; (8001434 <Register_Access+0x4e0>)
 80012f0:	f009 f930 	bl	800a554 <strcat>
}
 80012f4:	e15a      	b.n	80015ac <Register_Access+0x658>
			strcat(Message, "Invalid Access\r\n");
 80012f6:	484f      	ldr	r0, [pc, #316]	; (8001434 <Register_Access+0x4e0>)
 80012f8:	f7fe ff40 	bl	800017c <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <Register_Access+0x4e0>)
 8001302:	4413      	add	r3, r2
 8001304:	4a57      	ldr	r2, [pc, #348]	; (8001464 <Register_Access+0x510>)
 8001306:	461d      	mov	r5, r3
 8001308:	4614      	mov	r4, r2
 800130a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130c:	6028      	str	r0, [r5, #0]
 800130e:	6069      	str	r1, [r5, #4]
 8001310:	60aa      	str	r2, [r5, #8]
 8001312:	60eb      	str	r3, [r5, #12]
 8001314:	7823      	ldrb	r3, [r4, #0]
 8001316:	742b      	strb	r3, [r5, #16]
}
 8001318:	e148      	b.n	80015ac <Register_Access+0x658>
	else if (strncmp(Token, "write", strlen("write")) == 0)
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <Register_Access+0x4d8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2205      	movs	r2, #5
 8001320:	4951      	ldr	r1, [pc, #324]	; (8001468 <Register_Access+0x514>)
 8001322:	4618      	mov	r0, r3
 8001324:	f009 f925 	bl	800a572 <strncmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 812d 	bne.w	800158a <Register_Access+0x636>
		Token = strtok(NULL, " "); // third token "[register space]"
 8001330:	494e      	ldr	r1, [pc, #312]	; (800146c <Register_Access+0x518>)
 8001332:	2000      	movs	r0, #0
 8001334:	f009 f932 	bl	800a59c <strtok>
 8001338:	4603      	mov	r3, r0
 800133a:	4a3c      	ldr	r2, [pc, #240]	; (800142c <Register_Access+0x4d8>)
 800133c:	6013      	str	r3, [r2, #0]
		if (strncmp(Token, "extended", strlen("extended")) == 0)
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <Register_Access+0x4d8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2208      	movs	r2, #8
 8001344:	494a      	ldr	r1, [pc, #296]	; (8001470 <Register_Access+0x51c>)
 8001346:	4618      	mov	r0, r3
 8001348:	f009 f913 	bl	800a572 <strncmp>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 8094 	bne.w	800147c <Register_Access+0x528>
			strcat(Message, "Address to Write: ");
 8001354:	4837      	ldr	r0, [pc, #220]	; (8001434 <Register_Access+0x4e0>)
 8001356:	f7fe ff11 	bl	800017c <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b35      	ldr	r3, [pc, #212]	; (8001434 <Register_Access+0x4e0>)
 8001360:	4413      	add	r3, r2
 8001362:	4a44      	ldr	r2, [pc, #272]	; (8001474 <Register_Access+0x520>)
 8001364:	461d      	mov	r5, r3
 8001366:	4614      	mov	r4, r2
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	6028      	str	r0, [r5, #0]
 800136c:	6069      	str	r1, [r5, #4]
 800136e:	60aa      	str	r2, [r5, #8]
 8001370:	60eb      	str	r3, [r5, #12]
 8001372:	8823      	ldrh	r3, [r4, #0]
 8001374:	78a2      	ldrb	r2, [r4, #2]
 8001376:	822b      	strh	r3, [r5, #16]
 8001378:	4613      	mov	r3, r2
 800137a:	74ab      	strb	r3, [r5, #18]
			Token = strtok(NULL, " "); // fourth token "[register address]"
 800137c:	493b      	ldr	r1, [pc, #236]	; (800146c <Register_Access+0x518>)
 800137e:	2000      	movs	r0, #0
 8001380:	f009 f90c 	bl	800a59c <strtok>
 8001384:	4603      	mov	r3, r0
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <Register_Access+0x4d8>)
 8001388:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <Register_Access+0x4d8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	492b      	ldr	r1, [pc, #172]	; (8001440 <Register_Access+0x4ec>)
 8001392:	482c      	ldr	r0, [pc, #176]	; (8001444 <Register_Access+0x4f0>)
 8001394:	f009 f8be 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 8001398:	492a      	ldr	r1, [pc, #168]	; (8001444 <Register_Access+0x4f0>)
 800139a:	4826      	ldr	r0, [pc, #152]	; (8001434 <Register_Access+0x4e0>)
 800139c:	f009 f8da 	bl	800a554 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <Register_Access+0x4d8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2210      	movs	r2, #16
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 f9cf 	bl	800a74c <strtol>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b25      	ldr	r3, [pc, #148]	; (8001448 <Register_Access+0x4f4>)
 80013b4:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Sent: ");
 80013b6:	481f      	ldr	r0, [pc, #124]	; (8001434 <Register_Access+0x4e0>)
 80013b8:	f7fe fee0 	bl	800017c <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <Register_Access+0x4e0>)
 80013c2:	4413      	add	r3, r2
 80013c4:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <Register_Access+0x524>)
 80013c6:	461c      	mov	r4, r3
 80013c8:	4613      	mov	r3, r2
 80013ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013cc:	6020      	str	r0, [r4, #0]
 80013ce:	6061      	str	r1, [r4, #4]
 80013d0:	60a2      	str	r2, [r4, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	7323      	strb	r3, [r4, #12]
			Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 80013d6:	4919      	ldr	r1, [pc, #100]	; (800143c <Register_Access+0x4e8>)
 80013d8:	2000      	movs	r0, #0
 80013da:	f009 f8df 	bl	800a59c <strtok>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <Register_Access+0x4d8>)
 80013e2:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <Register_Access+0x4d8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4915      	ldr	r1, [pc, #84]	; (8001440 <Register_Access+0x4ec>)
 80013ec:	4815      	ldr	r0, [pc, #84]	; (8001444 <Register_Access+0x4f0>)
 80013ee:	f009 f891 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 80013f2:	4914      	ldr	r1, [pc, #80]	; (8001444 <Register_Access+0x4f0>)
 80013f4:	480f      	ldr	r0, [pc, #60]	; (8001434 <Register_Access+0x4e0>)
 80013f6:	f009 f8ad 	bl	800a554 <strcat>
			Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <Register_Access+0x4d8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2210      	movs	r2, #16
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f009 f9a2 	bl	800a74c <strtol>
 8001408:	4603      	mov	r3, r0
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <Register_Access+0x508>)
 800140e:	701a      	strb	r2, [r3, #0]
			check = CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <Register_Access+0x4f4>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <Register_Access+0x508>)
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	480c      	ldr	r0, [pc, #48]	; (800144c <Register_Access+0x4f8>)
 800141c:	f7ff f950 	bl	80006c0 <CC1200_Write_Single_Extended_Register>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <Register_Access+0x4fc>)
 8001426:	701a      	strb	r2, [r3, #0]
}
 8001428:	e0c0      	b.n	80015ac <Register_Access+0x658>
 800142a:	bf00      	nop
 800142c:	20002c70 	.word	0x20002c70
 8001430:	0800bdec 	.word	0x0800bdec
 8001434:	200004c4 	.word	0x200004c4
 8001438:	0800bdc4 	.word	0x0800bdc4
 800143c:	0800bb0c 	.word	0x0800bb0c
 8001440:	0800bc58 	.word	0x0800bc58
 8001444:	20002bd8 	.word	0x20002bd8
 8001448:	20002c76 	.word	0x20002c76
 800144c:	20002dd8 	.word	0x20002dd8
 8001450:	20002c75 	.word	0x20002c75
 8001454:	0800bdd8 	.word	0x0800bdd8
 8001458:	20002de8 	.word	0x20002de8
 800145c:	20002c77 	.word	0x20002c77
 8001460:	0800bd10 	.word	0x0800bd10
 8001464:	0800bdf4 	.word	0x0800bdf4
 8001468:	0800be08 	.word	0x0800be08
 800146c:	0800bb08 	.word	0x0800bb08
 8001470:	0800bdb8 	.word	0x0800bdb8
 8001474:	0800be10 	.word	0x0800be10
 8001478:	0800be24 	.word	0x0800be24
		else if (strncmp(Token, "regular", strlen("regular")) == 0)
 800147c:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <Register_Access+0x660>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2207      	movs	r2, #7
 8001482:	494d      	ldr	r1, [pc, #308]	; (80015b8 <Register_Access+0x664>)
 8001484:	4618      	mov	r0, r3
 8001486:	f009 f874 	bl	800a572 <strncmp>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d16a      	bne.n	8001566 <Register_Access+0x612>
			strcat(Message, "Address to Write: ");
 8001490:	484a      	ldr	r0, [pc, #296]	; (80015bc <Register_Access+0x668>)
 8001492:	f7fe fe73 	bl	800017c <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <Register_Access+0x668>)
 800149c:	4413      	add	r3, r2
 800149e:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <Register_Access+0x66c>)
 80014a0:	461d      	mov	r5, r3
 80014a2:	4614      	mov	r4, r2
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	6028      	str	r0, [r5, #0]
 80014a8:	6069      	str	r1, [r5, #4]
 80014aa:	60aa      	str	r2, [r5, #8]
 80014ac:	60eb      	str	r3, [r5, #12]
 80014ae:	8823      	ldrh	r3, [r4, #0]
 80014b0:	78a2      	ldrb	r2, [r4, #2]
 80014b2:	822b      	strh	r3, [r5, #16]
 80014b4:	4613      	mov	r3, r2
 80014b6:	74ab      	strb	r3, [r5, #18]
			Token = strtok(NULL, " "); // fourth token "[register address]"
 80014b8:	4942      	ldr	r1, [pc, #264]	; (80015c4 <Register_Access+0x670>)
 80014ba:	2000      	movs	r0, #0
 80014bc:	f009 f86e 	bl	800a59c <strtok>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a3c      	ldr	r2, [pc, #240]	; (80015b4 <Register_Access+0x660>)
 80014c4:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <Register_Access+0x660>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	493e      	ldr	r1, [pc, #248]	; (80015c8 <Register_Access+0x674>)
 80014ce:	483f      	ldr	r0, [pc, #252]	; (80015cc <Register_Access+0x678>)
 80014d0:	f009 f820 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 80014d4:	493d      	ldr	r1, [pc, #244]	; (80015cc <Register_Access+0x678>)
 80014d6:	4839      	ldr	r0, [pc, #228]	; (80015bc <Register_Access+0x668>)
 80014d8:	f009 f83c 	bl	800a554 <strcat>
			Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <Register_Access+0x660>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2210      	movs	r2, #16
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f009 f931 	bl	800a74c <strtol>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <Register_Access+0x67c>)
 80014f0:	701a      	strb	r2, [r3, #0]
			strcat(Message, "Value Sent: ");
 80014f2:	4832      	ldr	r0, [pc, #200]	; (80015bc <Register_Access+0x668>)
 80014f4:	f7fe fe42 	bl	800017c <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <Register_Access+0x668>)
 80014fe:	4413      	add	r3, r2
 8001500:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <Register_Access+0x680>)
 8001502:	461c      	mov	r4, r3
 8001504:	4613      	mov	r3, r2
 8001506:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001508:	6020      	str	r0, [r4, #0]
 800150a:	6061      	str	r1, [r4, #4]
 800150c:	60a2      	str	r2, [r4, #8]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	7323      	strb	r3, [r4, #12]
			Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8001512:	4931      	ldr	r1, [pc, #196]	; (80015d8 <Register_Access+0x684>)
 8001514:	2000      	movs	r0, #0
 8001516:	f009 f841 	bl	800a59c <strtok>
 800151a:	4603      	mov	r3, r0
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <Register_Access+0x660>)
 800151e:	6013      	str	r3, [r2, #0]
			sprintf(Message_Part, "%s\r\n", Token);
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <Register_Access+0x660>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4928      	ldr	r1, [pc, #160]	; (80015c8 <Register_Access+0x674>)
 8001528:	4828      	ldr	r0, [pc, #160]	; (80015cc <Register_Access+0x678>)
 800152a:	f008 fff3 	bl	800a514 <siprintf>
			strcat(Message, Message_Part);
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <Register_Access+0x678>)
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <Register_Access+0x668>)
 8001532:	f009 f80f 	bl	800a554 <strcat>
			Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <Register_Access+0x660>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2210      	movs	r2, #16
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f009 f904 	bl	800a74c <strtol>
 8001544:	4603      	mov	r3, r0
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <Register_Access+0x688>)
 800154a:	701a      	strb	r2, [r3, #0]
			check = CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <Register_Access+0x67c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <Register_Access+0x688>)
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <Register_Access+0x68c>)
 8001558:	f7ff f836 	bl	80005c8 <CC1200_Write_Single_Register>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <Register_Access+0x690>)
 8001562:	701a      	strb	r2, [r3, #0]
}
 8001564:	e022      	b.n	80015ac <Register_Access+0x658>
			strcat(Message, "Invalid Access\r\n");
 8001566:	4815      	ldr	r0, [pc, #84]	; (80015bc <Register_Access+0x668>)
 8001568:	f7fe fe08 	bl	800017c <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <Register_Access+0x668>)
 8001572:	4413      	add	r3, r2
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <Register_Access+0x694>)
 8001576:	461d      	mov	r5, r3
 8001578:	4614      	mov	r4, r2
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	6028      	str	r0, [r5, #0]
 800157e:	6069      	str	r1, [r5, #4]
 8001580:	60aa      	str	r2, [r5, #8]
 8001582:	60eb      	str	r3, [r5, #12]
 8001584:	7823      	ldrb	r3, [r4, #0]
 8001586:	742b      	strb	r3, [r5, #16]
}
 8001588:	e010      	b.n	80015ac <Register_Access+0x658>
		strcat(Message, "Invalid Access\r\n");
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <Register_Access+0x668>)
 800158c:	f7fe fdf6 	bl	800017c <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Register_Access+0x668>)
 8001596:	4413      	add	r3, r2
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <Register_Access+0x694>)
 800159a:	461d      	mov	r5, r3
 800159c:	4614      	mov	r4, r2
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	6028      	str	r0, [r5, #0]
 80015a2:	6069      	str	r1, [r5, #4]
 80015a4:	60aa      	str	r2, [r5, #8]
 80015a6:	60eb      	str	r3, [r5, #12]
 80015a8:	7823      	ldrb	r3, [r4, #0]
 80015aa:	742b      	strb	r3, [r5, #16]
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdb0      	pop	{r4, r5, r7, pc}
 80015b4:	20002c70 	.word	0x20002c70
 80015b8:	0800bdec 	.word	0x0800bdec
 80015bc:	200004c4 	.word	0x200004c4
 80015c0:	0800be10 	.word	0x0800be10
 80015c4:	0800bb08 	.word	0x0800bb08
 80015c8:	0800bc58 	.word	0x0800bc58
 80015cc:	20002bd8 	.word	0x20002bd8
 80015d0:	20002c76 	.word	0x20002c76
 80015d4:	0800be24 	.word	0x0800be24
 80015d8:	0800bb0c 	.word	0x0800bb0c
 80015dc:	20002c77 	.word	0x20002c77
 80015e0:	20002dd8 	.word	0x20002dd8
 80015e4:	20002c75 	.word	0x20002c75
 80015e8:	0800bdf4 	.word	0x0800bdf4

080015ec <Print_Message>:

void Print_Message(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	Message_Length = strlen(Message);
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <Print_Message+0x24>)
 80015f2:	f7fe fdc3 	bl	800017c <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <Print_Message+0x28>)
 80015fc:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <Print_Message+0x28>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <Print_Message+0x24>)
 8001606:	f008 faeb 	bl	8009be0 <CDC_Transmit_FS>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200004c4 	.word	0x200004c4
 8001614:	20002bd4 	.word	0x20002bd4

08001618 <Command>:
	strcat(Message, "Register Values Reset to Default Values\r\n");
	CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES);
}

void Command(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	sprintf(Message, "User Input: Command\r\n");
 8001622:	4941      	ldr	r1, [pc, #260]	; (8001728 <Command+0x110>)
 8001624:	4841      	ldr	r0, [pc, #260]	; (800172c <Command+0x114>)
 8001626:	f008 ff75 	bl	800a514 <siprintf>
	strcat(Message, "Issued the Following Command: ");
 800162a:	4840      	ldr	r0, [pc, #256]	; (800172c <Command+0x114>)
 800162c:	f7fe fda6 	bl	800017c <strlen>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <Command+0x114>)
 8001636:	4413      	add	r3, r2
 8001638:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <Command+0x118>)
 800163a:	461d      	mov	r5, r3
 800163c:	4614      	mov	r4, r2
 800163e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001640:	6028      	str	r0, [r5, #0]
 8001642:	6069      	str	r1, [r5, #4]
 8001644:	60aa      	str	r2, [r5, #8]
 8001646:	60eb      	str	r3, [r5, #12]
 8001648:	cc07      	ldmia	r4!, {r0, r1, r2}
 800164a:	6128      	str	r0, [r5, #16]
 800164c:	6169      	str	r1, [r5, #20]
 800164e:	61aa      	str	r2, [r5, #24]
 8001650:	8823      	ldrh	r3, [r4, #0]
 8001652:	78a2      	ldrb	r2, [r4, #2]
 8001654:	83ab      	strh	r3, [r5, #28]
 8001656:	4613      	mov	r3, r2
 8001658:	77ab      	strb	r3, [r5, #30]
	Token = strtok((char*) RX_Buffer, " "); // first token "Command:"
 800165a:	4936      	ldr	r1, [pc, #216]	; (8001734 <Command+0x11c>)
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f008 ff9d 	bl	800a59c <strtok>
 8001662:	4603      	mov	r3, r0
 8001664:	4a34      	ldr	r2, [pc, #208]	; (8001738 <Command+0x120>)
 8001666:	6013      	str	r3, [r2, #0]
	Token = strtok(NULL, "\r\n"); // second token "[command strobe]"
 8001668:	4934      	ldr	r1, [pc, #208]	; (800173c <Command+0x124>)
 800166a:	2000      	movs	r0, #0
 800166c:	f008 ff96 	bl	800a59c <strtok>
 8001670:	4603      	mov	r3, r0
 8001672:	4a31      	ldr	r2, [pc, #196]	; (8001738 <Command+0x120>)
 8001674:	6013      	str	r3, [r2, #0]
	sprintf(Message_Part, "%s\r\n", Token);
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <Command+0x120>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4930      	ldr	r1, [pc, #192]	; (8001740 <Command+0x128>)
 800167e:	4831      	ldr	r0, [pc, #196]	; (8001744 <Command+0x12c>)
 8001680:	f008 ff48 	bl	800a514 <siprintf>
	strcat(Message, Message_Part);
 8001684:	492f      	ldr	r1, [pc, #188]	; (8001744 <Command+0x12c>)
 8001686:	4829      	ldr	r0, [pc, #164]	; (800172c <Command+0x114>)
 8001688:	f008 ff64 	bl	800a554 <strcat>
	Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <Command+0x120>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2210      	movs	r2, #16
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f009 f859 	bl	800a74c <strtol>
 800169a:	4603      	mov	r3, r0
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <Command+0x130>)
 80016a0:	701a      	strb	r2, [r3, #0]
	check = CC1200_Command_Strobe(&SPI_Info, Register_Address); // issue command
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <Command+0x130>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4828      	ldr	r0, [pc, #160]	; (800174c <Command+0x134>)
 80016aa:	f7ff f8ae 	bl	800080a <CC1200_Command_Strobe>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <Command+0x138>)
 80016b4:	701a      	strb	r2, [r3, #0]
	if (check == 1)
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <Command+0x138>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d111      	bne.n	80016e2 <Command+0xca>
	{
		strcat(Message, "Invalid Command\r\n");
 80016be:	481b      	ldr	r0, [pc, #108]	; (800172c <Command+0x114>)
 80016c0:	f7fe fd5c 	bl	800017c <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <Command+0x114>)
 80016ca:	4413      	add	r3, r2
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <Command+0x13c>)
 80016ce:	461d      	mov	r5, r3
 80016d0:	4614      	mov	r4, r2
 80016d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d4:	6028      	str	r0, [r5, #0]
 80016d6:	6069      	str	r1, [r5, #4]
 80016d8:	60aa      	str	r2, [r5, #8]
 80016da:	60eb      	str	r3, [r5, #12]
 80016dc:	8823      	ldrh	r3, [r4, #0]
 80016de:	822b      	strh	r3, [r5, #16]
 80016e0:	e00e      	b.n	8001700 <Command+0xe8>
	}
	else // check == 0
	{
		strcat(Message, "Valid Command\r\n");
 80016e2:	4812      	ldr	r0, [pc, #72]	; (800172c <Command+0x114>)
 80016e4:	f7fe fd4a 	bl	800017c <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <Command+0x114>)
 80016ee:	4413      	add	r3, r2
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <Command+0x140>)
 80016f2:	461c      	mov	r4, r3
 80016f4:	4615      	mov	r5, r2
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	6020      	str	r0, [r4, #0]
 80016fa:	6061      	str	r1, [r4, #4]
 80016fc:	60a2      	str	r2, [r4, #8]
 80016fe:	60e3      	str	r3, [r4, #12]
	}
	CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8001700:	213d      	movs	r1, #61	; 0x3d
 8001702:	4812      	ldr	r0, [pc, #72]	; (800174c <Command+0x134>)
 8001704:	f7ff f881 	bl	800080a <CC1200_Command_Strobe>
	sprintf(Message_Part, "CC1200 State: 0X%02X\r\n", MISO_Data[0]);
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <Command+0x144>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4914      	ldr	r1, [pc, #80]	; (8001760 <Command+0x148>)
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <Command+0x12c>)
 8001712:	f008 feff 	bl	800a514 <siprintf>
	strcat(Message, Message_Part);
 8001716:	490b      	ldr	r1, [pc, #44]	; (8001744 <Command+0x12c>)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <Command+0x114>)
 800171a:	f008 ff1b 	bl	800a554 <strcat>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bdb0      	pop	{r4, r5, r7, pc}
 8001726:	bf00      	nop
 8001728:	0800bed0 	.word	0x0800bed0
 800172c:	200004c4 	.word	0x200004c4
 8001730:	0800bee8 	.word	0x0800bee8
 8001734:	0800bb08 	.word	0x0800bb08
 8001738:	20002c70 	.word	0x20002c70
 800173c:	0800bb0c 	.word	0x0800bb0c
 8001740:	0800bc58 	.word	0x0800bc58
 8001744:	20002bd8 	.word	0x20002bd8
 8001748:	20002c76 	.word	0x20002c76
 800174c:	20002dd8 	.word	0x20002dd8
 8001750:	20002c75 	.word	0x20002c75
 8001754:	0800bf08 	.word	0x0800bf08
 8001758:	0800bf1c 	.word	0x0800bf1c
 800175c:	20002de8 	.word	0x20002de8
 8001760:	0800bf2c 	.word	0x0800bf2c

08001764 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
	Read_RX_FIFO();
 800176e:	f7ff fb69 	bl	8000e44 <Read_RX_FIFO>
	Print_Message();
 8001772:	f7ff ff3b 	bl	80015ec <Print_Message>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001786:	f000 fbac 	bl	8001ee2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800178a:	f000 f81b 	bl	80017c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800178e:	f000 f911 	bl	80019b4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001792:	f000 f8e5 	bl	8001960 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001796:	f000 f861 	bl	800185c <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800179a:	f008 f92f 	bl	80099fc <MX_USB_DEVICE_Init>
	MX_TIM2_Init();
 800179e:	f000 f893 	bl	80018c8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <main+0x34>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <main+0x38>)
 80017aa:	4904      	ldr	r1, [pc, #16]	; (80017bc <main+0x3c>)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <main+0x40>)
 80017ae:	f7fe fe71 	bl	8000494 <CC1200_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80017b2:	e7fe      	b.n	80017b2 <main+0x32>
 80017b4:	20002cfc 	.word	0x20002cfc
 80017b8:	40020400 	.word	0x40020400
 80017bc:	20002de8 	.word	0x20002de8
 80017c0:	20002dd8 	.word	0x20002dd8

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b092      	sub	sp, #72	; 0x48
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2234      	movs	r2, #52	; 0x34
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 fe96 	bl	800a504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <SystemClock_Config+0x94>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80017ee:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <SystemClock_Config+0x94>)
 80017f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017fa:	2305      	movs	r3, #5
 80017fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fe:	2302      	movs	r3, #2
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001808:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800180c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800180e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4618      	mov	r0, r3
 800181a:	f002 facb 	bl	8003db4 <HAL_RCC_OscConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001824:	f000 f94c 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001828:	230f      	movs	r3, #15
 800182a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182c:	2303      	movs	r3, #3
 800182e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2101      	movs	r1, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fde7 	bl	8004414 <HAL_RCC_ClockConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800184c:	f000 f938 	bl	8001ac0 <Error_Handler>
  }
}
 8001850:	bf00      	nop
 8001852:	3748      	adds	r7, #72	; 0x48
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40007000 	.word	0x40007000

0800185c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001862:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800186c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_SPI1_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001890:	2210      	movs	r2, #16
 8001892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_SPI1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <MX_SPI1_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_SPI1_Init+0x64>)
 80018a8:	220a      	movs	r2, #10
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_SPI1_Init+0x64>)
 80018ae:	f003 f877 	bl	80049a0 <HAL_SPI_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018b8:	f000 f902 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20002cfc 	.word	0x20002cfc
 80018c4:	40013000 	.word	0x40013000

080018c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_TIM2_Init+0x94>)
 80018e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_TIM2_Init+0x94>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM2_Init+0x94>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_TIM2_Init+0x94>)
 80018fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <MX_TIM2_Init+0x94>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <MX_TIM2_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800190c:	4813      	ldr	r0, [pc, #76]	; (800195c <MX_TIM2_Init+0x94>)
 800190e:	f003 fb3d 	bl	8004f8c <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001918:	f000 f8d2 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	4619      	mov	r1, r3
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <MX_TIM2_Init+0x94>)
 800192a:	f003 fc4a 	bl	80051c2 <HAL_TIM_ConfigClockSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001934:	f000 f8c4 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_TIM2_Init+0x94>)
 8001946:	f003 fe33 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001950:	f000 f8b6 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20002d54 	.word	0x20002d54

08001960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_USART2_UART_Init+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001998:	f003 fe68 	bl	800566c <HAL_UART_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019a2:	f000 f88d 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20002d94 	.word	0x20002d94
 80019b0:	40004400 	.word	0x40004400

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <MX_GPIO_Init+0xfc>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a30:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <MX_GPIO_Init+0x100>)
 8001a32:	f000 fd63 	bl	80024fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2140      	movs	r1, #64	; 0x40
 8001a3a:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <MX_GPIO_Init+0x104>)
 8001a3c:	f000 fd5e 	bl	80024fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <MX_GPIO_Init+0x100>)
 8001a5a:	f000 fbbf 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_GPIO_Init+0x108>)
 8001a76:	f000 fbb1 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a7a:	2340      	movs	r3, #64	; 0x40
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <MX_GPIO_Init+0x104>)
 8001a92:	f000 fba3 	bl	80021dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2028      	movs	r0, #40	; 0x28
 8001a9c:	f000 fb67 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aa0:	2028      	movs	r0, #40	; 0x28
 8001aa2:	f000 fb80 	bl	80021a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_MspInit+0x5c>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_MspInit+0x5c>)
 8001ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001adc:	6253      	str	r3, [r2, #36]	; 0x24
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_MspInit+0x5c>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_MspInit+0x5c>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_MspInit+0x5c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6213      	str	r3, [r2, #32]
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_MspInit+0x5c>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_MspInit+0x5c>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_MspInit+0x5c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6253      	str	r3, [r2, #36]	; 0x24
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_MspInit+0x5c>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b1a:	2007      	movs	r0, #7
 8001b1c:	f000 fb1c 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_SPI_MspInit+0x7c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d127      	bne.n	8001b9e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b7e:	23e0      	movs	r3, #224	; 0xe0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_SPI_MspInit+0x84>)
 8001b9a:	f000 fb1f 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40013000 	.word	0x40013000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d113      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_TIM_Base_MspInit+0x44>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_TIM_Base_MspInit+0x44>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6253      	str	r3, [r2, #36]	; 0x24
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_TIM_Base_MspInit+0x44>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	201c      	movs	r0, #28
 8001be4:	f000 fac3 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be8:	201c      	movs	r0, #28
 8001bea:	f000 fadc 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_UART_MspInit+0x7c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d127      	bne.n	8001c6e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_UART_MspInit+0x80>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_UART_MspInit+0x80>)
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	6253      	str	r3, [r2, #36]	; 0x24
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_UART_MspInit+0x80>)
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0x80>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_UART_MspInit+0x80>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_UART_MspInit+0x80>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c6a:	f000 fab7 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 f95d 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USB_LP_IRQHandler+0x10>)
 8001cda:	f000 fd43 	bl	8002764 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20004700 	.word	0x20004700

08001ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM2_IRQHandler+0x10>)
 8001cee:	f003 f98c 	bl	800500a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20002d54 	.word	0x20002d54

08001cfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001d00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d04:	f000 fc12 	bl	800252c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <_kill>:

int _kill(int pid, int sig)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d24:	f008 fbc4 	bl	800a4b0 <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2216      	movs	r2, #22
 8001d2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_exit>:

void _exit (int status)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d42:	f04f 31ff 	mov.w	r1, #4294967295
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffe7 	bl	8001d1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4c:	e7fe      	b.n	8001d4c <_exit+0x12>

08001d4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e00a      	b.n	8001d76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d60:	f3af 8000 	nop.w
 8001d64:	4601      	mov	r1, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	60ba      	str	r2, [r7, #8]
 8001d6c:	b2ca      	uxtb	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	dbf0      	blt.n	8001d60 <_read+0x12>
  }

  return len;
 8001d7e:	687b      	ldr	r3, [r7, #4]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e009      	b.n	8001dae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	60ba      	str	r2, [r7, #8]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dbf1      	blt.n	8001d9a <_write+0x12>
  }
  return len;
 8001db6:	687b      	ldr	r3, [r7, #4]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_close>:

int _close(int file)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de6:	605a      	str	r2, [r3, #4]
  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <_isatty>:

int _isatty(int file)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <_sbrk+0x5c>)
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <_sbrk+0x60>)
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <_sbrk+0x64>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <_sbrk+0x68>)
 8001e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d207      	bcs.n	8001e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e50:	f008 fb2e 	bl	800a4b0 <__errno>
 8001e54:	4603      	mov	r3, r0
 8001e56:	220c      	movs	r2, #12
 8001e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	e009      	b.n	8001e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <_sbrk+0x64>)
 8001e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20014000 	.word	0x20014000
 8001e80:	00000400 	.word	0x00000400
 8001e84:	20002e6c 	.word	0x20002e6c
 8001e88:	20004c20 	.word	0x20004c20

08001e8c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ebe:	f7ff ffe5 	bl	8001e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f008 fafb 	bl	800a4bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ec6:	f7ff fc5b 	bl	8001780 <main>
  bx lr
 8001eca:	4770      	bx	lr
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8001ed4:	0800c304 	.word	0x0800c304
  ldr r2, =_sbss
 8001ed8:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8001edc:	20004c1c 	.word	0x20004c1c

08001ee0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC1_IRQHandler>

08001ee2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f933 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f80e 	bl	8001f14 <HAL_InitTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e001      	b.n	8001f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f04:	f7ff fde2 	bl	8001acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_InitTick+0x68>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d022      	beq.n	8001f6e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_InitTick+0x6c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_InitTick+0x68>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f940 	bl	80021c2 <HAL_SYSTICK_Config>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10f      	bne.n	8001f68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b0f      	cmp	r3, #15
 8001f4c:	d809      	bhi.n	8001f62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295
 8001f56:	f000 f90a 	bl	800216e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_InitTick+0x70>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	e007      	b.n	8001f72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e004      	b.n	8001f72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e001      	b.n	8001f72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200002d0 	.word	0x200002d0
 8001f80:	200002c8 	.word	0x200002c8
 8001f84:	200002cc 	.word	0x200002cc

08001f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_IncTick+0x1c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <HAL_IncTick+0x1c>)
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20002e70 	.word	0x20002e70
 8001fa8:	200002d0 	.word	0x200002d0

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_GetTick+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20002e70 	.word	0x20002e70

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4906      	ldr	r1, [pc, #24]	; (8002058 <__NVIC_EnableIRQ+0x34>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	; (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
         );
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff90 	bl	800205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff2d 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff42 	bl	8002008 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff90 	bl	80020b0 <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5f 	bl	800205c <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff35 	bl	8002024 <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80021f2:	e160      	b.n	80024b6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8152 	beq.w	80024b0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d005      	beq.n	8002224 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002220:	2b02      	cmp	r3, #2
 8002222:	d130      	bne.n	8002286 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800225a:	2201      	movs	r2, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 0201 	and.w	r2, r3, #1
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b03      	cmp	r3, #3
 8002290:	d017      	beq.n	80022c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d123      	bne.n	8002316 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	6939      	ldr	r1, [r7, #16]
 8002312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80ac 	beq.w	80024b0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002358:	4b5e      	ldr	r3, [pc, #376]	; (80024d4 <HAL_GPIO_Init+0x2f8>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a5d      	ldr	r2, [pc, #372]	; (80024d4 <HAL_GPIO_Init+0x2f8>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <HAL_GPIO_Init+0x2f8>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002370:	4a59      	ldr	r2, [pc, #356]	; (80024d8 <HAL_GPIO_Init+0x2fc>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_GPIO_Init+0x300>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d025      	beq.n	80023e8 <HAL_GPIO_Init+0x20c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a50      	ldr	r2, [pc, #320]	; (80024e0 <HAL_GPIO_Init+0x304>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01f      	beq.n	80023e4 <HAL_GPIO_Init+0x208>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <HAL_GPIO_Init+0x308>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d019      	beq.n	80023e0 <HAL_GPIO_Init+0x204>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a4e      	ldr	r2, [pc, #312]	; (80024e8 <HAL_GPIO_Init+0x30c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x200>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_GPIO_Init+0x310>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1fc>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <HAL_GPIO_Init+0x314>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1f8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a4b      	ldr	r2, [pc, #300]	; (80024f4 <HAL_GPIO_Init+0x318>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1f4>
 80023cc:	2306      	movs	r3, #6
 80023ce:	e00c      	b.n	80023ea <HAL_GPIO_Init+0x20e>
 80023d0:	2307      	movs	r3, #7
 80023d2:	e00a      	b.n	80023ea <HAL_GPIO_Init+0x20e>
 80023d4:	2305      	movs	r3, #5
 80023d6:	e008      	b.n	80023ea <HAL_GPIO_Init+0x20e>
 80023d8:	2304      	movs	r3, #4
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x20e>
 80023dc:	2303      	movs	r3, #3
 80023de:	e004      	b.n	80023ea <HAL_GPIO_Init+0x20e>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x20e>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_GPIO_Init+0x20e>
 80023e8:	2300      	movs	r3, #0
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023fa:	4937      	ldr	r1, [pc, #220]	; (80024d8 <HAL_GPIO_Init+0x2fc>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800242c:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002480:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024aa:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <HAL_GPIO_Init+0x31c>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f47f ae97 	bne.w	80021f4 <HAL_GPIO_Init+0x18>
  }
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020800 	.word	0x40020800
 80024e8:	40020c00 	.word	0x40020c00
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40021400 	.word	0x40021400
 80024f4:	40021800 	.word	0x40021800
 80024f8:	40010400 	.word	0x40010400

080024fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
 8002508:	4613      	mov	r3, r2
 800250a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800250c:	787b      	ldrb	r3, [r7, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002518:	e003      	b.n	8002522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800251a:	887b      	ldrh	r3, [r7, #2]
 800251c:	041a      	lsls	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f90a 	bl	8001764 <HAL_GPIO_EXTI_Callback>
  }
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af06      	add	r7, sp, #24
 8002562:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0d0      	b.n	8002710 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f007 fcf4 	bl	8009f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 f9b1 	bl	80058fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e04c      	b.n	800263a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3301      	adds	r3, #1
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	b298      	uxth	r0, r3
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	3336      	adds	r3, #54	; 0x36
 80025de:	4602      	mov	r2, r0
 80025e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3303      	adds	r3, #3
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3338      	adds	r3, #56	; 0x38
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	333c      	adds	r3, #60	; 0x3c
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	3340      	adds	r3, #64	; 0x40
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	3301      	adds	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3ad      	bcc.n	80025a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e044      	b.n	80026d4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	f203 1369 	addw	r3, r3, #361	; 0x169
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	3301      	adds	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3b5      	bcc.n	800264a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	687e      	ldr	r6, [r7, #4]
 80026e6:	466d      	mov	r5, sp
 80026e8:	f106 0410 	add.w	r4, r6, #16
 80026ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	602b      	str	r3, [r5, #0]
 80026f4:	1d33      	adds	r3, r6, #4
 80026f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f003 f919 	bl	8005930 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002718 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_Start+0x16>
 800272a:	2302      	movs	r3, #2
 800272c:	e016      	b.n	800275c <HAL_PCD_Start+0x44>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f003 f8c8 	bl	80058d0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002740:	2101      	movs	r1, #1
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f007 fbf6 	bl	8009f34 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f005 fdad 	bl	80082ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f005 fda5 	bl	80082c0 <USB_ReadInterrupts>
 8002776:	4603      	mov	r3, r0
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002780:	d102      	bne.n	8002788 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 faf5 	bl	8002d72 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f005 fd97 	bl	80082c0 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279c:	d112      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b0:	b292      	uxth	r2, r2
 80027b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f007 fc55 	bl	800a066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027bc:	2100      	movs	r1, #0
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8c7 	bl	8002952 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f005 fd79 	bl	80082c0 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d8:	d10b      	bne.n	80027f2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ec:	b292      	uxth	r2, r2
 80027ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 fd62 	bl	80082c0 <USB_ReadInterrupts>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002806:	d10b      	bne.n	8002820 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281a:	b292      	uxth	r2, r2
 800281c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f005 fd4b 	bl	80082c0 <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002834:	d126      	bne.n	8002884 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0204 	bic.w	r2, r2, #4
 8002848:	b292      	uxth	r2, r2
 800284a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0208 	bic.w	r2, r2, #8
 8002860:	b292      	uxth	r2, r2
 8002862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f007 fc36 	bl	800a0d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800287e:	b292      	uxth	r2, r2
 8002880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f005 fd19 	bl	80082c0 <USB_ReadInterrupts>
 800288e:	4603      	mov	r3, r0
 8002890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002898:	d126      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0208 	orr.w	r2, r2, #8
 80028ac:	b292      	uxth	r2, r2
 80028ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c4:	b292      	uxth	r2, r2
 80028c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0204 	orr.w	r2, r2, #4
 80028dc:	b292      	uxth	r2, r2
 80028de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f007 fbde 	bl	800a0a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f005 fce7 	bl	80082c0 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d10e      	bne.n	800291c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002910:	b292      	uxth	r2, r2
 8002912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f007 fb97 	bl	800a04a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f005 fccd 	bl	80082c0 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002930:	d10b      	bne.n	800294a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002944:	b292      	uxth	r2, r2
 8002946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_PCD_SetAddress+0x1a>
 8002968:	2302      	movs	r3, #2
 800296a:	e013      	b.n	8002994 <HAL_PCD_SetAddress+0x42>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f005 fc7e 	bl	8008286 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	70fb      	strb	r3, [r7, #3]
 80029ae:	460b      	mov	r3, r1
 80029b0:	803b      	strh	r3, [r7, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da0e      	bge.n	80029e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	705a      	strb	r2, [r3, #1]
 80029de:	e00e      	b.n	80029fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 0207 	and.w	r2, r3, #7
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a0a:	883a      	ldrh	r2, [r7, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	78ba      	ldrb	r2, [r7, #2]
 8002a14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a28:	78bb      	ldrb	r3, [r7, #2]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_EP_Open+0xa6>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e00e      	b.n	8002a60 <HAL_PCD_EP_Open+0xc4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 ff8d 	bl	8005970 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da0e      	bge.n	8002a9a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	705a      	strb	r2, [r3, #1]
 8002a98:	e00e      	b.n	8002ab8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 0207 	and.w	r2, r3, #7
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_PCD_EP_Close+0x6a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e00e      	b.n	8002af0 <HAL_PCD_EP_Close+0x88>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68f9      	ldr	r1, [r7, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 faaf 	bl	8006044 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	460b      	mov	r3, r1
 8002b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	f003 0207 	and.w	r2, r3, #7
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 fc61 	bl	800641c <USB_EPStartXfer>
 8002b5a:	e005      	b.n	8002b68 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6979      	ldr	r1, [r7, #20]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fc5a 	bl	800641c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 0207 	and.w	r2, r3, #7
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002b94:	681b      	ldr	r3, [r3, #0]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	460b      	mov	r3, r1
 8002bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2201      	movs	r2, #1
 8002bea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6979      	ldr	r1, [r7, #20]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 fc07 	bl	800641c <USB_EPStartXfer>
 8002c0e:	e005      	b.n	8002c1c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6979      	ldr	r1, [r7, #20]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 fc00 	bl	800641c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 0207 	and.w	r2, r3, #7
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d901      	bls.n	8002c44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e03e      	b.n	8002cc2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da0e      	bge.n	8002c6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	705a      	strb	r2, [r3, #1]
 8002c68:	e00c      	b.n	8002c84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_EP_SetStall+0x7e>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e00e      	b.n	8002cc2 <HAL_PCD_EP_SetStall+0x9c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 f9ea 	bl	800808c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d901      	bls.n	8002ce8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e040      	b.n	8002d6a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	da0e      	bge.n	8002d0e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	705a      	strb	r2, [r3, #1]
 8002d0c:	e00e      	b.n	8002d2c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 0207 	and.w	r2, r3, #7
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_PCD_EP_ClrStall+0x82>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e00e      	b.n	8002d6a <HAL_PCD_EP_ClrStall+0xa0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 f9e6 	bl	800812c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b08e      	sub	sp, #56	; 0x38
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d7a:	e2ec      	b.n	8003356 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d84:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 8161 	bne.w	800305e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d152      	bne.n	8002e4c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	81fb      	strh	r3, [r7, #14]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3328      	adds	r3, #40	; 0x28
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	3302      	adds	r3, #2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	441a      	add	r2, r3
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f007 f902 	bl	800a016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 829b 	beq.w	8003356 <PCD_EP_ISR_Handler+0x5e4>
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 8296 	bne.w	8003356 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e4a:	e284      	b.n	8003356 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d034      	beq.n	8002ed0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3306      	adds	r3, #6
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f005 fa5f 	bl	8008368 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	823b      	strh	r3, [r7, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	8a3a      	ldrh	r2, [r7, #16]
 8002ec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f007 f877 	bl	8009fbc <HAL_PCD_SetupStageCallback>
 8002ece:	e242      	b.n	8003356 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ed0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f280 823e 	bge.w	8003356 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	83bb      	strh	r3, [r7, #28]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	8bba      	ldrh	r2, [r7, #28]
 8002ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3306      	adds	r3, #6
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d019      	beq.n	8002f60 <PCD_EP_ISR_Handler+0x1ee>
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d015      	beq.n	8002f60 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	6959      	ldr	r1, [r3, #20]
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f005 fa0f 	bl	8008368 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	441a      	add	r2, r3
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f58:	2100      	movs	r1, #0
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f007 f840 	bl	8009fe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 81f2 	bne.w	8003356 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	4413      	add	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d112      	bne.n	8002fc0 <PCD_EP_ISR_Handler+0x24e>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	e02f      	b.n	8003020 <PCD_EP_ISR_Handler+0x2ae>
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8002fc6:	d813      	bhi.n	8002ff0 <PCD_EP_ISR_Handler+0x27e>
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <PCD_EP_ISR_Handler+0x270>
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	3301      	adds	r3, #1
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	029b      	lsls	r3, r3, #10
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	e017      	b.n	8003020 <PCD_EP_ISR_Handler+0x2ae>
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <PCD_EP_ISR_Handler+0x298>
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	3b01      	subs	r3, #1
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	b29b      	uxth	r3, r3
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	b29b      	uxth	r3, r3
 8003012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301a:	b29a      	uxth	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	827b      	strh	r3, [r7, #18]
 8003032:	8a7b      	ldrh	r3, [r7, #18]
 8003034:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003038:	827b      	strh	r3, [r7, #18]
 800303a:	8a7b      	ldrh	r3, [r7, #18]
 800303c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003040:	827b      	strh	r3, [r7, #18]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	8a7b      	ldrh	r3, [r7, #18]
 8003048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	b29b      	uxth	r3, r3
 800305a:	8013      	strh	r3, [r2, #0]
 800305c:	e17b      	b.n	8003356 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003070:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003074:	2b00      	cmp	r3, #0
 8003076:	f280 80ea 	bge.w	800324e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29a      	uxth	r2, r3
 800308c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003090:	4013      	ands	r3, r2
 8003092:	853b      	strh	r3, [r7, #40]	; 0x28
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a8:	b292      	uxth	r2, r2
 80030aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	7b1b      	ldrb	r3, [r3, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d122      	bne.n	8003110 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	3306      	adds	r3, #6
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80030f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	6959      	ldr	r1, [r3, #20]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	88da      	ldrh	r2, [r3, #6]
 8003108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800310a:	f005 f92d 	bl	8008368 <USB_ReadPMA>
 800310e:	e07c      	b.n	800320a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	78db      	ldrb	r3, [r3, #3]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d108      	bne.n	800312a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003118:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800311a:	461a      	mov	r2, r3
 800311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f927 	bl	8003372 <HAL_PCD_EP_DB_Receive>
 8003124:	4603      	mov	r3, r0
 8003126:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003128:	e06f      	b.n	800320a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003144:	847b      	strh	r3, [r7, #34]	; 0x22
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d021      	beq.n	80031c8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	3302      	adds	r3, #2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d02a      	beq.n	800320a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	6959      	ldr	r1, [r3, #20]
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	891a      	ldrh	r2, [r3, #8]
 80031c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031c2:	f005 f8d1 	bl	8008368 <USB_ReadPMA>
 80031c6:	e020      	b.n	800320a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	3306      	adds	r3, #6
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	6959      	ldr	r1, [r3, #20]
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	895a      	ldrh	r2, [r3, #10]
 8003204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003206:	f005 f8af 	bl	8008368 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003210:	441a      	add	r2, r3
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800321c:	441a      	add	r2, r3
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <PCD_EP_ISR_Handler+0x4c2>
 800322a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d206      	bcs.n	8003242 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f006 fed0 	bl	8009fe0 <HAL_PCD_DataOutStageCallback>
 8003240:	e005      	b.n	800324e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f8e7 	bl	800641c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800324e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d07e      	beq.n	8003356 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003258:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	843b      	strh	r3, [r7, #32]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	8c3b      	ldrh	r3, [r7, #32]
 8003298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800329c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	78db      	ldrb	r3, [r3, #3]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d00c      	beq.n	80032c6 <PCD_EP_ISR_Handler+0x554>
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	78db      	ldrb	r3, [r3, #3]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d146      	bne.n	800334a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80032bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d141      	bne.n	800334a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	3302      	adds	r3, #2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ee:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	8bfb      	ldrh	r3, [r7, #30]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d906      	bls.n	8003308 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	8bfb      	ldrh	r3, [r7, #30]
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	619a      	str	r2, [r3, #24]
 8003306:	e002      	b.n	800330e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f006 fe7a 	bl	800a016 <HAL_PCD_DataInStageCallback>
 8003322:	e018      	b.n	8003356 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	8bfb      	ldrh	r3, [r7, #30]
 800332a:	441a      	add	r2, r3
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	8bfb      	ldrh	r3, [r7, #30]
 8003336:	441a      	add	r2, r3
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003342:	4618      	mov	r0, r3
 8003344:	f003 f86a 	bl	800641c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003348:	e005      	b.n	8003356 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800334a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800334c:	461a      	mov	r2, r3
 800334e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f91b 	bl	800358c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800335e:	b29b      	uxth	r3, r3
 8003360:	b21b      	sxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	f6ff ad0a 	blt.w	8002d7c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3738      	adds	r7, #56	; 0x38
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b088      	sub	sp, #32
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	4613      	mov	r3, r2
 800337e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d07e      	beq.n	8003488 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	3302      	adds	r3, #2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	8b7b      	ldrh	r3, [r7, #26]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d306      	bcc.n	80033cc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	8b7b      	ldrh	r3, [r7, #26]
 80033c4:	1ad2      	subs	r2, r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	619a      	str	r2, [r3, #24]
 80033ca:	e002      	b.n	80033d2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2200      	movs	r2, #0
 80033d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d123      	bne.n	8003422 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f4:	833b      	strh	r3, [r7, #24]
 80033f6:	8b3b      	ldrh	r3, [r7, #24]
 80033f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033fc:	833b      	strh	r3, [r7, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	8b3b      	ldrh	r3, [r7, #24]
 800340e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341e:	b29b      	uxth	r3, r3
 8003420:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01f      	beq.n	800346c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	82fb      	strh	r3, [r7, #22]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	8afb      	ldrh	r3, [r7, #22]
 8003458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003464:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003468:	b29b      	uxth	r3, r3
 800346a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800346c:	8b7b      	ldrh	r3, [r7, #26]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8087 	beq.w	8003582 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6959      	ldr	r1, [r3, #20]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	891a      	ldrh	r2, [r3, #8]
 8003480:	8b7b      	ldrh	r3, [r7, #26]
 8003482:	f004 ff71 	bl	8008368 <USB_ReadPMA>
 8003486:	e07c      	b.n	8003582 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	3306      	adds	r3, #6
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	8b7b      	ldrh	r3, [r7, #26]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d306      	bcc.n	80034ca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	8b7b      	ldrh	r3, [r7, #26]
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	619a      	str	r2, [r3, #24]
 80034c8:	e002      	b.n	80034d0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d123      	bne.n	8003520 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f2:	83fb      	strh	r3, [r7, #30]
 80034f4:	8bfb      	ldrh	r3, [r7, #30]
 80034f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034fa:	83fb      	strh	r3, [r7, #30]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	441a      	add	r2, r3
 800350a:	8bfb      	ldrh	r3, [r7, #30]
 800350c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351c:	b29b      	uxth	r3, r3
 800351e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11f      	bne.n	800356a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003544:	83bb      	strh	r3, [r7, #28]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	441a      	add	r2, r3
 8003554:	8bbb      	ldrh	r3, [r7, #28]
 8003556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800355a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003566:	b29b      	uxth	r3, r3
 8003568:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800356a:	8b7b      	ldrh	r3, [r7, #26]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6959      	ldr	r1, [r3, #20]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	895a      	ldrh	r2, [r3, #10]
 800357c:	8b7b      	ldrh	r3, [r7, #26]
 800357e:	f004 fef3 	bl	8008368 <USB_ReadPMA>
    }
  }

  return count;
 8003582:	8b7b      	ldrh	r3, [r7, #26]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b0a2      	sub	sp, #136	; 0x88
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 81c7 	beq.w	8003934 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	3302      	adds	r3, #2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035da:	429a      	cmp	r2, r3
 80035dc:	d907      	bls.n	80035ee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035e6:	1ad2      	subs	r2, r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	619a      	str	r2, [r3, #24]
 80035ec:	e002      	b.n	80035f4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2200      	movs	r2, #0
 80035f2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 80b9 	bne.w	8003770 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d126      	bne.n	8003654 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	4413      	add	r3, r2
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	011a      	lsls	r2, r3, #4
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	4413      	add	r3, r2
 8003628:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003638:	b29a      	uxth	r2, r3
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800364c:	b29a      	uxth	r2, r3
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	e01a      	b.n	800368a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d116      	bne.n	800368a <HAL_PCD_EP_DB_Transmit+0xfe>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	633b      	str	r3, [r7, #48]	; 0x30
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	4413      	add	r3, r2
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	011a      	lsls	r2, r3, #4
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	4413      	add	r3, r2
 800367e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	2200      	movs	r2, #0
 8003688:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	785b      	ldrb	r3, [r3, #1]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d126      	bne.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	011a      	lsls	r2, r3, #4
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4413      	add	r3, r2
 80036ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036de:	b29a      	uxth	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	e017      	b.n	8003716 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d113      	bne.n	8003716 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	4413      	add	r3, r2
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	011a      	lsls	r2, r3, #4
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	4413      	add	r3, r2
 800370a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2200      	movs	r2, #0
 8003714:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f006 fc7a 	bl	800a016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 82d4 	beq.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003748:	827b      	strh	r3, [r7, #18]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	441a      	add	r2, r3
 8003758:	8a7b      	ldrh	r3, [r7, #18]
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]
 800376e:	e2b2      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d021      	beq.n	80037be <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003794:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	441a      	add	r2, r3
 80037a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 8286 	bne.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037d2:	441a      	add	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037e0:	441a      	add	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d309      	bcc.n	8003806 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	621a      	str	r2, [r3, #32]
 8003804:	e015      	b.n	8003832 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800380e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003812:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800381c:	e009      	b.n	8003832 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d155      	bne.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x35a>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003848:	b29b      	uxth	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	4413      	add	r3, r2
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	011a      	lsls	r2, r3, #4
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	4413      	add	r3, r2
 800385c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
 8003862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d112      	bne.n	800388e <HAL_PCD_EP_DB_Transmit+0x302>
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003872:	b29a      	uxth	r2, r3
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003886:	b29a      	uxth	r2, r3
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	e047      	b.n	800391e <HAL_PCD_EP_DB_Transmit+0x392>
 800388e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003890:	2b3e      	cmp	r3, #62	; 0x3e
 8003892:	d811      	bhi.n	80038b8 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	64bb      	str	r3, [r7, #72]	; 0x48
 800389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_PCD_EP_DB_Transmit+0x31e>
 80038a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a6:	3301      	adds	r3, #1
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	029b      	lsls	r3, r3, #10
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	e032      	b.n	800391e <HAL_PCD_EP_DB_Transmit+0x392>
 80038b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <HAL_PCD_EP_DB_Transmit+0x342>
 80038c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ca:	3b01      	subs	r3, #1
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038de:	b29a      	uxth	r2, r3
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e01b      	b.n	800391e <HAL_PCD_EP_DB_Transmit+0x392>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d117      	bne.n	800391e <HAL_PCD_EP_DB_Transmit+0x392>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	643b      	str	r3, [r7, #64]	; 0x40
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	4413      	add	r3, r2
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	011a      	lsls	r2, r3, #4
 800390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390e:	4413      	add	r3, r2
 8003910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003918:	b29a      	uxth	r2, r3
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6959      	ldr	r1, [r3, #20]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	891a      	ldrh	r2, [r3, #8]
 800392a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800392c:	b29b      	uxth	r3, r3
 800392e:	f004 fcd6 	bl	80082de <USB_WritePMA>
 8003932:	e1d0      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393c:	b29b      	uxth	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	3306      	adds	r3, #6
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003968:	429a      	cmp	r2, r3
 800396a:	d307      	bcc.n	800397c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003974:	1ad2      	subs	r2, r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	619a      	str	r2, [r3, #24]
 800397a:	e002      	b.n	8003982 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 80c4 	bne.w	8003b14 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d126      	bne.n	80039e2 <HAL_PCD_EP_DB_Transmit+0x456>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	4413      	add	r3, r2
 80039aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	011a      	lsls	r2, r3, #4
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	4413      	add	r3, r2
 80039b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80039bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e01a      	b.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x48c>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d116      	bne.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x48c>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	677b      	str	r3, [r7, #116]	; 0x74
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fe:	4413      	add	r3, r2
 8003a00:	677b      	str	r3, [r7, #116]	; 0x74
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	011a      	lsls	r2, r3, #4
 8003a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a10:	673b      	str	r3, [r7, #112]	; 0x70
 8003a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d12f      	bne.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a3e:	4413      	add	r3, r2
 8003a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	011a      	lsls	r2, r3, #4
 8003a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	e017      	b.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d113      	bne.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9c:	4413      	add	r3, r2
 8003a9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f006 faaa 	bl	800a016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 8104 	bne.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	8013      	strh	r3, [r2, #0]
 8003b12:	e0e0      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d121      	bne.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 80b4 	bne.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b76:	441a      	add	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b84:	441a      	add	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d309      	bcc.n	8003baa <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba2:	1ad2      	subs	r2, r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	621a      	str	r2, [r3, #32]
 8003ba8:	e015      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bc0:	e009      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	667b      	str	r3, [r7, #100]	; 0x64
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d155      	bne.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x704>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf8:	4413      	add	r3, r2
 8003bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	011a      	lsls	r2, r3, #4
 8003c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c04:	4413      	add	r3, r2
 8003c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d112      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e044      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c3c:	d811      	bhi.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
 8003c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	3301      	adds	r3, #1
 8003c52:	657b      	str	r3, [r7, #84]	; 0x54
 8003c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	e02f      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	657b      	str	r3, [r7, #84]	; 0x54
 8003c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c74:	3b01      	subs	r3, #1
 8003c76:	657b      	str	r3, [r7, #84]	; 0x54
 8003c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	029b      	lsls	r3, r3, #10
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	e018      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d114      	bne.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca6:	4413      	add	r3, r2
 8003ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	011a      	lsls	r2, r3, #4
 8003cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6959      	ldr	r1, [r3, #20]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	895a      	ldrh	r2, [r3, #10]
 8003cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f004 fb04 	bl	80082de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf0:	823b      	strh	r3, [r7, #16]
 8003cf2:	8a3b      	ldrh	r3, [r7, #16]
 8003cf4:	f083 0310 	eor.w	r3, r3, #16
 8003cf8:	823b      	strh	r3, [r7, #16]
 8003cfa:	8a3b      	ldrh	r3, [r7, #16]
 8003cfc:	f083 0320 	eor.w	r3, r3, #32
 8003d00:	823b      	strh	r3, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	8a3b      	ldrh	r3, [r7, #16]
 8003d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3788      	adds	r7, #136	; 0x88
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e009      	b.n	8003d7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d66:	897a      	ldrh	r2, [r7, #10]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d7a:	893b      	ldrh	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	80da      	strh	r2, [r3, #6]
 8003d8e:	e00b      	b.n	8003da8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2201      	movs	r2, #1
 8003d94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e31d      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc6:	4b94      	ldr	r3, [pc, #592]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd0:	4b91      	ldr	r3, [pc, #580]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d07b      	beq.n	8003ede <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d006      	beq.n	8003dfa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCC_OscConfig+0x5e>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d10b      	bne.n	8003e12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfa:	4b87      	ldr	r3, [pc, #540]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d06a      	beq.n	8003edc <HAL_RCC_OscConfig+0x128>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d166      	bne.n	8003edc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e2f7      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d106      	bne.n	8003e28 <HAL_RCC_OscConfig+0x74>
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a7e      	ldr	r2, [pc, #504]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e02d      	b.n	8003e84 <HAL_RCC_OscConfig+0xd0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x96>
 8003e30:	4b79      	ldr	r3, [pc, #484]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a78      	ldr	r2, [pc, #480]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a75      	ldr	r2, [pc, #468]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e01c      	b.n	8003e84 <HAL_RCC_OscConfig+0xd0>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0xb8>
 8003e52:	4b71      	ldr	r3, [pc, #452]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a70      	ldr	r2, [pc, #448]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b6e      	ldr	r3, [pc, #440]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6d      	ldr	r2, [pc, #436]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xd0>
 8003e6c:	4b6a      	ldr	r3, [pc, #424]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a69      	ldr	r2, [pc, #420]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a66      	ldr	r2, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f88e 	bl	8001fac <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe f88a 	bl	8001fac <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e2ad      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ea6:	4b5c      	ldr	r3, [pc, #368]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xe0>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f87a 	bl	8001fac <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe f876 	bl	8001fac <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e299      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ece:	4b52      	ldr	r3, [pc, #328]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x108>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d05a      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d119      	bne.n	8003f2a <HAL_RCC_OscConfig+0x176>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efc:	4b46      	ldr	r3, [pc, #280]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_OscConfig+0x160>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e276      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f14:	4b40      	ldr	r3, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	493d      	ldr	r1, [pc, #244]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f28:	e03a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d020      	beq.n	8003f74 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f32:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCC_OscConfig+0x268>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe f838 	bl	8001fac <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f40:	f7fe f834 	bl	8001fac <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e257      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f52:	4b31      	ldr	r3, [pc, #196]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	492a      	ldr	r1, [pc, #168]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	604b      	str	r3, [r1, #4]
 8003f72:	e015      	b.n	8003fa0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_OscConfig+0x268>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fe f817 	bl	8001fac <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fe f813 	bl	8001fac <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e236      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80b8 	beq.w	800411e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d170      	bne.n	8004096 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_OscConfig+0x218>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e21a      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1a      	ldr	r2, [r3, #32]
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d921      	bls.n	8004020 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fc7d 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e208      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4906      	ldr	r1, [pc, #24]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	4901      	ldr	r1, [pc, #4]	; (8004018 <HAL_RCC_OscConfig+0x264>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
 8004016:	e020      	b.n	800405a <HAL_RCC_OscConfig+0x2a6>
 8004018:	40023800 	.word	0x40023800
 800401c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004020:	4b99      	ldr	r3, [pc, #612]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4996      	ldr	r1, [pc, #600]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004032:	4b95      	ldr	r3, [pc, #596]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	4991      	ldr	r1, [pc, #580]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fc48 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1d3      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	0b5b      	lsrs	r3, r3, #13
 8004060:	3301      	adds	r3, #1
 8004062:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800406a:	4a87      	ldr	r2, [pc, #540]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 800406c:	6892      	ldr	r2, [r2, #8]
 800406e:	0912      	lsrs	r2, r2, #4
 8004070:	f002 020f 	and.w	r2, r2, #15
 8004074:	4985      	ldr	r1, [pc, #532]	; (800428c <HAL_RCC_OscConfig+0x4d8>)
 8004076:	5c8a      	ldrb	r2, [r1, r2]
 8004078:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800407a:	4a85      	ldr	r2, [pc, #532]	; (8004290 <HAL_RCC_OscConfig+0x4dc>)
 800407c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800407e:	4b85      	ldr	r3, [pc, #532]	; (8004294 <HAL_RCC_OscConfig+0x4e0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd ff46 	bl	8001f14 <HAL_InitTick>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d045      	beq.n	800411e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	e1b5      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d029      	beq.n	80040f2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800409e:	4b7e      	ldr	r3, [pc, #504]	; (8004298 <HAL_RCC_OscConfig+0x4e4>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fd ff82 	bl	8001fac <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ac:	f7fd ff7e 	bl	8001fac <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e1a1      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040be:	4b72      	ldr	r3, [pc, #456]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ca:	4b6f      	ldr	r3, [pc, #444]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	496c      	ldr	r1, [pc, #432]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040dc:	4b6a      	ldr	r3, [pc, #424]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	4967      	ldr	r1, [pc, #412]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
 80040f0:	e015      	b.n	800411e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040f2:	4b69      	ldr	r3, [pc, #420]	; (8004298 <HAL_RCC_OscConfig+0x4e4>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fd ff58 	bl	8001fac <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004100:	f7fd ff54 	bl	8001fac <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e177      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004112:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d030      	beq.n	800418c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b5a      	ldr	r3, [pc, #360]	; (800429c <HAL_RCC_OscConfig+0x4e8>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7fd ff38 	bl	8001fac <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004140:	f7fd ff34 	bl	8001fac <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e157      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004152:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x38c>
 800415e:	e015      	b.n	800418c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004160:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCC_OscConfig+0x4e8>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fd ff21 	bl	8001fac <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416e:	f7fd ff1d 	bl	8001fac <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e140      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004180:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80b5 	beq.w	8004304 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	4a36      	ldr	r2, [pc, #216]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6253      	str	r3, [r2, #36]	; 0x24
 80041b6:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <HAL_RCC_OscConfig+0x4ec>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <HAL_RCC_OscConfig+0x4ec>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <HAL_RCC_OscConfig+0x4ec>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fd fee5 	bl	8001fac <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fd fee1 	bl	8001fac <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	; 0x64
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e104      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <HAL_RCC_OscConfig+0x4ec>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x466>
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	6353      	str	r3, [r2, #52]	; 0x34
 8004218:	e02d      	b.n	8004276 <HAL_RCC_OscConfig+0x4c2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x488>
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	6353      	str	r3, [r2, #52]	; 0x34
 800422e:	4b16      	ldr	r3, [pc, #88]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	4a15      	ldr	r2, [pc, #84]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004238:	6353      	str	r3, [r2, #52]	; 0x34
 800423a:	e01c      	b.n	8004276 <HAL_RCC_OscConfig+0x4c2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b05      	cmp	r3, #5
 8004242:	d10c      	bne.n	800425e <HAL_RCC_OscConfig+0x4aa>
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 800424a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800424e:	6353      	str	r3, [r2, #52]	; 0x34
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004254:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6353      	str	r3, [r2, #52]	; 0x34
 800425c:	e00b      	b.n	8004276 <HAL_RCC_OscConfig+0x4c2>
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	6353      	str	r3, [r2, #52]	; 0x34
 800426a:	4b07      	ldr	r3, [pc, #28]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	4a06      	ldr	r2, [pc, #24]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004274:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d024      	beq.n	80042c8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fd fe95 	bl	8001fac <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004284:	e019      	b.n	80042ba <HAL_RCC_OscConfig+0x506>
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	0800c094 	.word	0x0800c094
 8004290:	200002c8 	.word	0x200002c8
 8004294:	200002cc 	.word	0x200002cc
 8004298:	42470020 	.word	0x42470020
 800429c:	42470680 	.word	0x42470680
 80042a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fd fe82 	bl	8001fac <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0a3      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ba:	4b54      	ldr	r3, [pc, #336]	; (800440c <HAL_RCC_OscConfig+0x658>)
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0ee      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4f0>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7fd fe70 	bl	8001fac <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fd fe6c 	bl	8001fac <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e08d      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042e6:	4b49      	ldr	r3, [pc, #292]	; (800440c <HAL_RCC_OscConfig+0x658>)
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ee      	bne.n	80042d0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042f2:	7ffb      	ldrb	r3, [r7, #31]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f8:	4b44      	ldr	r3, [pc, #272]	; (800440c <HAL_RCC_OscConfig+0x658>)
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	4a43      	ldr	r2, [pc, #268]	; (800440c <HAL_RCC_OscConfig+0x658>)
 80042fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004302:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d079      	beq.n	8004400 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d056      	beq.n	80043c0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	2b02      	cmp	r3, #2
 8004318:	d13b      	bne.n	8004392 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_OscConfig+0x65c>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fd fe44 	bl	8001fac <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fd fe40 	bl	8001fac <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e063      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800433a:	4b34      	ldr	r3, [pc, #208]	; (800440c <HAL_RCC_OscConfig+0x658>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004346:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCC_OscConfig+0x658>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	4319      	orrs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	430b      	orrs	r3, r1
 800435e:	492b      	ldr	r1, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x658>)
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004364:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_RCC_OscConfig+0x65c>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fd fe1f 	bl	8001fac <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004372:	f7fd fe1b 	bl	8001fac <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e03e      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_RCC_OscConfig+0x658>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x5be>
 8004390:	e036      	b.n	8004400 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <HAL_RCC_OscConfig+0x65c>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd fe08 	bl	8001fac <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fe04 	bl	8001fac <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e027      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_RCC_OscConfig+0x658>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5ec>
 80043be:	e01f      	b.n	8004400 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e01a      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <HAL_RCC_OscConfig+0x658>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	429a      	cmp	r2, r3
 80043de:	d10d      	bne.n	80043fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800
 8004410:	42470060 	.word	0x42470060

08004414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e11a      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b8f      	ldr	r3, [pc, #572]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d919      	bls.n	800446a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d105      	bne.n	8004448 <HAL_RCC_ClockConfig+0x34>
 800443c:	4b8a      	ldr	r3, [pc, #552]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a89      	ldr	r2, [pc, #548]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 8004442:	f043 0304 	orr.w	r3, r3, #4
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b87      	ldr	r3, [pc, #540]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 0201 	bic.w	r2, r3, #1
 8004450:	4985      	ldr	r1, [pc, #532]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004458:	4b83      	ldr	r3, [pc, #524]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d001      	beq.n	800446a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0f9      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004476:	4b7d      	ldr	r3, [pc, #500]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	497a      	ldr	r1, [pc, #488]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 8004484:	4313      	orrs	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 808e 	beq.w	80045b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800449e:	4b73      	ldr	r3, [pc, #460]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d121      	bne.n	80044ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0d7      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044b6:	4b6d      	ldr	r3, [pc, #436]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d115      	bne.n	80044ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e0cb      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ce:	4b67      	ldr	r3, [pc, #412]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0bf      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044de:	4b63      	ldr	r3, [pc, #396]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0b7      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b5f      	ldr	r3, [pc, #380]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	495c      	ldr	r1, [pc, #368]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004500:	f7fd fd54 	bl	8001fac <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d112      	bne.n	8004534 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fd fd4c 	bl	8001fac <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e09b      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004526:	4b51      	ldr	r3, [pc, #324]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b08      	cmp	r3, #8
 8004530:	d1ee      	bne.n	8004510 <HAL_RCC_ClockConfig+0xfc>
 8004532:	e03e      	b.n	80045b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d112      	bne.n	8004562 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453e:	f7fd fd35 	bl	8001fac <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e084      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004554:	4b45      	ldr	r3, [pc, #276]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_ClockConfig+0x12a>
 8004560:	e027      	b.n	80045b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d11d      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fd fd1e 	bl	8001fac <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e06d      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004582:	4b3a      	ldr	r3, [pc, #232]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d1ee      	bne.n	800456c <HAL_RCC_ClockConfig+0x158>
 800458e:	e010      	b.n	80045b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004590:	f7fd fd0c 	bl	8001fac <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e05b      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80045a6:	4b31      	ldr	r3, [pc, #196]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ee      	bne.n	8004590 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045b2:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d219      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d105      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1be>
 80045c6:	4b28      	ldr	r3, [pc, #160]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a27      	ldr	r2, [pc, #156]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 80045cc:	f043 0304 	orr.w	r3, r3, #4
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b25      	ldr	r3, [pc, #148]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	4923      	ldr	r1, [pc, #140]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b21      	ldr	r3, [pc, #132]	; (8004668 <HAL_RCC_ClockConfig+0x254>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e034      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4917      	ldr	r1, [pc, #92]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490f      	ldr	r1, [pc, #60]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f823 	bl	800467c <HAL_RCC_GetSysClockFreq>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HAL_RCC_ClockConfig+0x258>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	490b      	ldr	r1, [pc, #44]	; (8004670 <HAL_RCC_ClockConfig+0x25c>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <HAL_RCC_ClockConfig+0x260>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RCC_ClockConfig+0x264>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd fc5e 	bl	8001f14 <HAL_InitTick>
 8004658:	4603      	mov	r3, r0
 800465a:	72fb      	strb	r3, [r7, #11]

  return status;
 800465c:	7afb      	ldrb	r3, [r7, #11]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023c00 	.word	0x40023c00
 800466c:	40023800 	.word	0x40023800
 8004670:	0800c094 	.word	0x0800c094
 8004674:	200002c8 	.word	0x200002c8
 8004678:	200002cc 	.word	0x200002cc

0800467c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b092      	sub	sp, #72	; 0x48
 8004682:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004684:	4b79      	ldr	r3, [pc, #484]	; (800486c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800468a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d00d      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x34>
 8004694:	2b0c      	cmp	r3, #12
 8004696:	f200 80d5 	bhi.w	8004844 <HAL_RCC_GetSysClockFreq+0x1c8>
 800469a:	2b04      	cmp	r3, #4
 800469c:	d002      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x28>
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x2e>
 80046a2:	e0cf      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b72      	ldr	r3, [pc, #456]	; (8004870 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80046a6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80046a8:	e0da      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046aa:	4b72      	ldr	r3, [pc, #456]	; (8004874 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80046ae:	e0d7      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80046b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	f003 020f 	and.w	r2, r3, #15
 80046b8:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80046ba:	5c9b      	ldrb	r3, [r3, r2]
 80046bc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	0d9b      	lsrs	r3, r3, #22
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ca:	4b68      	ldr	r3, [pc, #416]	; (800486c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d05d      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	2200      	movs	r2, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	4611      	mov	r1, r2
 80046de:	4604      	mov	r4, r0
 80046e0:	460d      	mov	r5, r1
 80046e2:	4622      	mov	r2, r4
 80046e4:	462b      	mov	r3, r5
 80046e6:	f04f 0000 	mov.w	r0, #0
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	0159      	lsls	r1, r3, #5
 80046f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f4:	0150      	lsls	r0, r2, #5
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4621      	mov	r1, r4
 80046fc:	1a51      	subs	r1, r2, r1
 80046fe:	6139      	str	r1, [r7, #16]
 8004700:	4629      	mov	r1, r5
 8004702:	eb63 0301 	sbc.w	r3, r3, r1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004714:	4659      	mov	r1, fp
 8004716:	018b      	lsls	r3, r1, #6
 8004718:	4651      	mov	r1, sl
 800471a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800471e:	4651      	mov	r1, sl
 8004720:	018a      	lsls	r2, r1, #6
 8004722:	46d4      	mov	ip, sl
 8004724:	ebb2 080c 	subs.w	r8, r2, ip
 8004728:	4659      	mov	r1, fp
 800472a:	eb63 0901 	sbc.w	r9, r3, r1
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800473e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004742:	4690      	mov	r8, r2
 8004744:	4699      	mov	r9, r3
 8004746:	4623      	mov	r3, r4
 8004748:	eb18 0303 	adds.w	r3, r8, r3
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	462b      	mov	r3, r5
 8004750:	eb49 0303 	adc.w	r3, r9, r3
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004762:	4629      	mov	r1, r5
 8004764:	024b      	lsls	r3, r1, #9
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	4604      	mov	r4, r0
 800476c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004770:	4601      	mov	r1, r0
 8004772:	024a      	lsls	r2, r1, #9
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	2200      	movs	r2, #0
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004784:	f7fb fd02 	bl	800018c <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	647b      	str	r3, [r7, #68]	; 0x44
 8004790:	e055      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2200      	movs	r2, #0
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	627a      	str	r2, [r7, #36]	; 0x24
 800479a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800479e:	4642      	mov	r2, r8
 80047a0:	464b      	mov	r3, r9
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	0159      	lsls	r1, r3, #5
 80047ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b0:	0150      	lsls	r0, r2, #5
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	46c4      	mov	ip, r8
 80047b8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80047bc:	4640      	mov	r0, r8
 80047be:	4649      	mov	r1, r9
 80047c0:	468c      	mov	ip, r1
 80047c2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047da:	ebb2 040a 	subs.w	r4, r2, sl
 80047de:	eb63 050b 	sbc.w	r5, r3, fp
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	00eb      	lsls	r3, r5, #3
 80047ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f0:	00e2      	lsls	r2, r4, #3
 80047f2:	4614      	mov	r4, r2
 80047f4:	461d      	mov	r5, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	18e3      	adds	r3, r4, r3
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	460b      	mov	r3, r1
 80047fe:	eb45 0303 	adc.w	r3, r5, r3
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004810:	4629      	mov	r1, r5
 8004812:	028b      	lsls	r3, r1, #10
 8004814:	4620      	mov	r0, r4
 8004816:	4629      	mov	r1, r5
 8004818:	4604      	mov	r4, r0
 800481a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800481e:	4601      	mov	r1, r0
 8004820:	028a      	lsls	r2, r1, #10
 8004822:	4610      	mov	r0, r2
 8004824:	4619      	mov	r1, r3
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	2200      	movs	r2, #0
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	61fa      	str	r2, [r7, #28]
 800482e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004832:	f7fb fcab 	bl	800018c <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4613      	mov	r3, r2
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800483e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004840:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004842:	e00d      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0b5b      	lsrs	r3, r3, #13
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	3301      	adds	r3, #1
 8004854:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800485e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004862:	4618      	mov	r0, r3
 8004864:	3748      	adds	r7, #72	; 0x48
 8004866:	46bd      	mov	sp, r7
 8004868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	007a1200 	.word	0x007a1200
 8004878:	0800c088 	.word	0x0800c088

0800487c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004880:	4b02      	ldr	r3, [pc, #8]	; (800488c <HAL_RCC_GetHCLKFreq+0x10>)
 8004882:	681b      	ldr	r3, [r3, #0]
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	200002c8 	.word	0x200002c8

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004894:	f7ff fff2 	bl	800487c <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	0800c0a4 	.word	0x0800c0a4

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048bc:	f7ff ffde 	bl	800487c <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0adb      	lsrs	r3, r3, #11
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	0800c0a4 	.word	0x0800c0a4

080048e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048ec:	4b29      	ldr	r3, [pc, #164]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d12c      	bne.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e016      	b.n	800493e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491a:	6253      	str	r3, [r2, #36]	; 0x24
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004930:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	4a17      	ldr	r2, [pc, #92]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004944:	d105      	bne.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800494c:	d101      	bne.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800494e:	2301      	movs	r3, #1
 8004950:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0f      	ldr	r2, [pc, #60]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495e:	f043 0304 	orr.w	r3, r3, #4
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b0d      	ldr	r3, [pc, #52]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 0201 	bic.w	r2, r3, #1
 800496c:	490b      	ldr	r1, [pc, #44]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004974:	4b09      	ldr	r3, [pc, #36]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d001      	beq.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800
 8004998:	40007000 	.word	0x40007000
 800499c:	40023c00 	.word	0x40023c00

080049a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e07b      	b.n	8004aaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d108      	bne.n	80049cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c2:	d009      	beq.n	80049d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
 80049ca:	e005      	b.n	80049d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fd f89a 	bl	8001b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	ea42 0103 	orr.w	r1, r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 0104 	and.w	r1, r3, #4
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0210 	and.w	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b08c      	sub	sp, #48	; 0x30
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x26>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e18a      	b.n	8004dee <HAL_SPI_TransmitReceive+0x33c>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae0:	f7fd fa64 	bl	8001fac <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d00f      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x70>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b08:	d107      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x68>
 8004b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d003      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b20:	e15b      	b.n	8004dda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_SPI_TransmitReceive+0x82>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_TransmitReceive+0x82>
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b3a:	e14e      	b.n	8004dda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d003      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2205      	movs	r2, #5
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	887a      	ldrh	r2, [r7, #2]
 8004b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	887a      	ldrh	r2, [r7, #2]
 8004b78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d007      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bac:	d178      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x10a>
 8004bb6:	8b7b      	ldrh	r3, [r7, #26]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d166      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	881a      	ldrh	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be0:	e053      	b.n	8004c8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d11b      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x176>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d016      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x176>
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d113      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	881a      	ldrh	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d119      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x1b8>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d014      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	1c9a      	adds	r2, r3, #2
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c66:	2301      	movs	r3, #1
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c6a:	f7fd f99f 	bl	8001fac <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d807      	bhi.n	8004c8a <HAL_SPI_TransmitReceive+0x1d8>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d003      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c88:	e0a7      	b.n	8004dda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1a6      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x130>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1a1      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x130>
 8004c9e:	e07c      	b.n	8004d9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_TransmitReceive+0x1fc>
 8004ca8:	8b7b      	ldrh	r3, [r7, #26]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d16b      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd4:	e057      	b.n	8004d86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d11c      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x26c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d017      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x26c>
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d114      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d119      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x2ae>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d014      	beq.n	8004d60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d60:	f7fd f924 	bl	8001fac <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d803      	bhi.n	8004d78 <HAL_SPI_TransmitReceive+0x2c6>
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d102      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x2cc>
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d84:	e029      	b.n	8004dda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1a2      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x224>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d19d      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f8b2 	bl	8004f08 <SPI_EndRxTxTransaction>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004db6:	e010      	b.n	8004dda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	e000      	b.n	8004dda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004dd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3730      	adds	r7, #48	; 0x30
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e08:	f7fd f8d0 	bl	8001fac <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e18:	f7fd f8c8 	bl	8001fac <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e1e:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	015b      	lsls	r3, r3, #5
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	e054      	b.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d050      	beq.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e38:	f7fd f8b8 	bl	8001fac <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d13d      	bne.n	8004eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e66:	d111      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	d004      	beq.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7a:	d107      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e94:	d10f      	bne.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e017      	b.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d19b      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200002c8 	.word	0x200002c8

08004f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <SPI_EndRxTxTransaction+0x7c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <SPI_EndRxTxTransaction+0x80>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	0d5b      	lsrs	r3, r3, #21
 8004f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f32:	d112      	bne.n	8004f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7ff ff5a 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d016      	beq.n	8004f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e00f      	b.n	8004f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d0f2      	beq.n	8004f5a <SPI_EndRxTxTransaction+0x52>
 8004f74:	e000      	b.n	8004f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f76:	bf00      	nop
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	200002c8 	.word	0x200002c8
 8004f88:	165e9f81 	.word	0x165e9f81

08004f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e031      	b.n	8005002 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc fdfe 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f000 f9ea 	bl	80053a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b02      	cmp	r3, #2
 800501e:	d122      	bne.n	8005066 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d11b      	bne.n	8005066 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f06f 0202 	mvn.w	r2, #2
 8005036:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f98e 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 8005052:	e005      	b.n	8005060 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f981 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f990 	bl	8005380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d122      	bne.n	80050ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d11b      	bne.n	80050ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f06f 0204 	mvn.w	r2, #4
 800508a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f964 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 80050a6:	e005      	b.n	80050b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f957 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f966 	bl	8005380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d122      	bne.n	800510e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d11b      	bne.n	800510e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0208 	mvn.w	r2, #8
 80050de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f93a 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 80050fa:	e005      	b.n	8005108 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f92d 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f93c 	bl	8005380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d122      	bne.n	8005162 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d11b      	bne.n	8005162 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f06f 0210 	mvn.w	r2, #16
 8005132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2208      	movs	r2, #8
 8005138:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f910 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 800514e:	e005      	b.n	800515c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f903 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f912 	bl	8005380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10e      	bne.n	800518e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d107      	bne.n	800518e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f06f 0201 	mvn.w	r2, #1
 8005186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f8de 	bl	800534a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d10e      	bne.n	80051ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d107      	bne.n	80051ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8ec 	bl	8005392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_TIM_ConfigClockSource+0x18>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e0b3      	b.n	8005342 <HAL_TIM_ConfigClockSource+0x180>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005200:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005212:	d03e      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xd0>
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005218:	f200 8087 	bhi.w	800532a <HAL_TIM_ConfigClockSource+0x168>
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005220:	f000 8085 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005228:	d87f      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x168>
 800522a:	2b70      	cmp	r3, #112	; 0x70
 800522c:	d01a      	beq.n	8005264 <HAL_TIM_ConfigClockSource+0xa2>
 800522e:	2b70      	cmp	r3, #112	; 0x70
 8005230:	d87b      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x168>
 8005232:	2b60      	cmp	r3, #96	; 0x60
 8005234:	d050      	beq.n	80052d8 <HAL_TIM_ConfigClockSource+0x116>
 8005236:	2b60      	cmp	r3, #96	; 0x60
 8005238:	d877      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x168>
 800523a:	2b50      	cmp	r3, #80	; 0x50
 800523c:	d03c      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0xf6>
 800523e:	2b50      	cmp	r3, #80	; 0x50
 8005240:	d873      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x168>
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d058      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0x136>
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d86f      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x168>
 800524a:	2b30      	cmp	r3, #48	; 0x30
 800524c:	d064      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0x156>
 800524e:	2b30      	cmp	r3, #48	; 0x30
 8005250:	d86b      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x168>
 8005252:	2b20      	cmp	r3, #32
 8005254:	d060      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0x156>
 8005256:	2b20      	cmp	r3, #32
 8005258:	d867      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x168>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d05c      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0x156>
 800525e:	2b10      	cmp	r3, #16
 8005260:	d05a      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005262:	e062      	b.n	800532a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6899      	ldr	r1, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f000 f97d 	bl	8005572 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005286:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e04e      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6899      	ldr	r1, [r3, #8]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f000 f966 	bl	8005572 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b4:	609a      	str	r2, [r3, #8]
      break;
 80052b6:	e03b      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6859      	ldr	r1, [r3, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	461a      	mov	r2, r3
 80052c6:	f000 f8dd 	bl	8005484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2150      	movs	r1, #80	; 0x50
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 f934 	bl	800553e <TIM_ITRx_SetConfig>
      break;
 80052d6:	e02b      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	461a      	mov	r2, r3
 80052e6:	f000 f8fb 	bl	80054e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2160      	movs	r1, #96	; 0x60
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f924 	bl	800553e <TIM_ITRx_SetConfig>
      break;
 80052f6:	e01b      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	461a      	mov	r2, r3
 8005306:	f000 f8bd 	bl	8005484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2140      	movs	r1, #64	; 0x40
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f914 	bl	800553e <TIM_ITRx_SetConfig>
      break;
 8005316:	e00b      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 f90b 	bl	800553e <TIM_ITRx_SetConfig>
        break;
 8005328:	e002      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800532e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr

08005392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ba:	d00f      	beq.n	80053dc <TIM_Base_SetConfig+0x38>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a2b      	ldr	r2, [pc, #172]	; (800546c <TIM_Base_SetConfig+0xc8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00b      	beq.n	80053dc <TIM_Base_SetConfig+0x38>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a2a      	ldr	r2, [pc, #168]	; (8005470 <TIM_Base_SetConfig+0xcc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d007      	beq.n	80053dc <TIM_Base_SetConfig+0x38>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a29      	ldr	r2, [pc, #164]	; (8005474 <TIM_Base_SetConfig+0xd0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_Base_SetConfig+0x38>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a28      	ldr	r2, [pc, #160]	; (8005478 <TIM_Base_SetConfig+0xd4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d108      	bne.n	80053ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f4:	d017      	beq.n	8005426 <TIM_Base_SetConfig+0x82>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <TIM_Base_SetConfig+0xc8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <TIM_Base_SetConfig+0x82>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <TIM_Base_SetConfig+0xcc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00f      	beq.n	8005426 <TIM_Base_SetConfig+0x82>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1a      	ldr	r2, [pc, #104]	; (8005474 <TIM_Base_SetConfig+0xd0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00b      	beq.n	8005426 <TIM_Base_SetConfig+0x82>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a19      	ldr	r2, [pc, #100]	; (8005478 <TIM_Base_SetConfig+0xd4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_Base_SetConfig+0x82>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a18      	ldr	r2, [pc, #96]	; (800547c <TIM_Base_SetConfig+0xd8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_Base_SetConfig+0x82>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <TIM_Base_SetConfig+0xdc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d108      	bne.n	8005438 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40010800 	.word	0x40010800
 800547c:	40010c00 	.word	0x40010c00
 8005480:	40011000 	.word	0x40011000

08005484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 030a 	bic.w	r3, r3, #10
 80054c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0210 	bic.w	r2, r3, #16
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800550a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	031b      	lsls	r3, r3, #12
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800551c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	f043 0307 	orr.w	r3, r3, #7
 8005560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	609a      	str	r2, [r3, #8]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	431a      	orrs	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4313      	orrs	r3, r2
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	609a      	str	r2, [r3, #8]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e046      	b.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d00e      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a13      	ldr	r2, [pc, #76]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a12      	ldr	r2, [pc, #72]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a10      	ldr	r2, [pc, #64]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10c      	bne.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40010800 	.word	0x40010800

0800566c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e03f      	b.n	80056fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fc fab2 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2224      	movs	r2, #36	; 0x24
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f829 	bl	8005708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4313      	orrs	r3, r2
 800573c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005748:	f023 030c 	bic.w	r3, r3, #12
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	430b      	orrs	r3, r1
 8005754:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a55      	ldr	r2, [pc, #340]	; (80058c8 <UART_SetConfig+0x1c0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d103      	bne.n	800577e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005776:	f7ff f89f 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	e002      	b.n	8005784 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7ff f887 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8005782:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578c:	d14c      	bne.n	8005828 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009a      	lsls	r2, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	4a49      	ldr	r2, [pc, #292]	; (80058cc <UART_SetConfig+0x1c4>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	0119      	lsls	r1, r3, #4
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009a      	lsls	r2, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c4:	4b41      	ldr	r3, [pc, #260]	; (80058cc <UART_SetConfig+0x1c4>)
 80057c6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2064      	movs	r0, #100	; 0x64
 80057ce:	fb00 f303 	mul.w	r3, r0, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	3332      	adds	r3, #50	; 0x32
 80057d8:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <UART_SetConfig+0x1c4>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e6:	4419      	add	r1, r3
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009a      	lsls	r2, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80057fe:	4b33      	ldr	r3, [pc, #204]	; (80058cc <UART_SetConfig+0x1c4>)
 8005800:	fba3 0302 	umull	r0, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	2064      	movs	r0, #100	; 0x64
 8005808:	fb00 f303 	mul.w	r3, r0, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	3332      	adds	r3, #50	; 0x32
 8005812:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <UART_SetConfig+0x1c4>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	f003 0207 	and.w	r2, r3, #7
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	440a      	add	r2, r1
 8005824:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005826:	e04a      	b.n	80058be <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009a      	lsls	r2, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	4a23      	ldr	r2, [pc, #140]	; (80058cc <UART_SetConfig+0x1c4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	0119      	lsls	r1, r3, #4
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009a      	lsls	r2, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	fbb2 f2f3 	udiv	r2, r2, r3
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <UART_SetConfig+0x1c4>)
 8005860:	fba3 0302 	umull	r0, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2064      	movs	r0, #100	; 0x64
 8005868:	fb00 f303 	mul.w	r3, r0, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	3332      	adds	r3, #50	; 0x32
 8005872:	4a16      	ldr	r2, [pc, #88]	; (80058cc <UART_SetConfig+0x1c4>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800587e:	4419      	add	r1, r3
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009a      	lsls	r2, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	fbb2 f2f3 	udiv	r2, r2, r3
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <UART_SetConfig+0x1c4>)
 8005898:	fba3 0302 	umull	r0, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2064      	movs	r0, #100	; 0x64
 80058a0:	fb00 f303 	mul.w	r3, r0, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a08      	ldr	r2, [pc, #32]	; (80058cc <UART_SetConfig+0x1c4>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 020f 	and.w	r2, r3, #15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	440a      	add	r2, r1
 80058bc:	609a      	str	r2, [r3, #8]
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40013800 	.word	0x40013800
 80058cc:	51eb851f 	.word	0x51eb851f

080058d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005904:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005908:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	b29b      	uxth	r3, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	b29b      	uxth	r3, r3
 800591a:	4013      	ands	r3, r2
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005930:	b084      	sub	sp, #16
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	f107 0014 	add.w	r0, r7, #20
 800593e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	b004      	add	sp, #16
 800596e:	4770      	bx	lr

08005970 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005970:	b480      	push	{r7}
 8005972:	b09b      	sub	sp, #108	; 0x6c
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	78db      	ldrb	r3, [r3, #3]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d81f      	bhi.n	80059e2 <USB_ActivateEndpoint+0x72>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <USB_ActivateEndpoint+0x38>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059eb 	.word	0x080059eb
 80059b4:	080059c7 	.word	0x080059c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059c4:	e012      	b.n	80059ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059d2:	e00b      	b.n	80059ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059e0:	e004      	b.n	80059ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80059e8:	e000      	b.n	80059ec <USB_ActivateEndpoint+0x7c>
      break;
 80059ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	441a      	add	r2, r3
 8005a3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	7b1b      	ldrb	r3, [r3, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 8149 	bne.w	8005cf0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8084 	beq.w	8005b70 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	011a      	lsls	r2, r3, #4
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	88db      	ldrh	r3, [r3, #6]
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	81fb      	strh	r3, [r7, #14]
 8005aaa:	89fb      	ldrh	r3, [r7, #14]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01b      	beq.n	8005aec <USB_ActivateEndpoint+0x17c>
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	81bb      	strh	r3, [r7, #12]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	89bb      	ldrh	r3, [r7, #12]
 8005ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d020      	beq.n	8005b36 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0a:	813b      	strh	r3, [r7, #8]
 8005b0c:	893b      	ldrh	r3, [r7, #8]
 8005b0e:	f083 0320 	eor.w	r3, r3, #32
 8005b12:	813b      	strh	r3, [r7, #8]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	893b      	ldrh	r3, [r7, #8]
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]
 8005b34:	e27f      	b.n	8006036 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4c:	817b      	strh	r3, [r7, #10]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	897b      	ldrh	r3, [r7, #10]
 8005b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	8013      	strh	r3, [r2, #0]
 8005b6e:	e262      	b.n	8006036 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	4413      	add	r3, r2
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	011a      	lsls	r2, r3, #4
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	88db      	ldrh	r3, [r3, #6]
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	4413      	add	r3, r2
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	011a      	lsls	r2, r3, #4
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d112      	bne.n	8005bf6 <USB_ActivateEndpoint+0x286>
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	e02f      	b.n	8005c56 <USB_ActivateEndpoint+0x2e6>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005bfc:	d813      	bhi.n	8005c26 <USB_ActivateEndpoint+0x2b6>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	663b      	str	r3, [r7, #96]	; 0x60
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <USB_ActivateEndpoint+0x2a8>
 8005c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c14:	3301      	adds	r3, #1
 8005c16:	663b      	str	r3, [r7, #96]	; 0x60
 8005c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	e017      	b.n	8005c56 <USB_ActivateEndpoint+0x2e6>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <USB_ActivateEndpoint+0x2d0>
 8005c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	029b      	lsls	r3, r3, #10
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	83fb      	strh	r3, [r7, #30]
 8005c64:	8bfb      	ldrh	r3, [r7, #30]
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01b      	beq.n	8005ca6 <USB_ActivateEndpoint+0x336>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	83bb      	strh	r3, [r7, #28]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8bbb      	ldrh	r3, [r7, #28]
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbc:	837b      	strh	r3, [r7, #26]
 8005cbe:	8b7b      	ldrh	r3, [r7, #26]
 8005cc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cc4:	837b      	strh	r3, [r7, #26]
 8005cc6:	8b7b      	ldrh	r3, [r7, #26]
 8005cc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ccc:	837b      	strh	r3, [r7, #26]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8b7b      	ldrh	r3, [r7, #26]
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
 8005cee:	e1a2      	b.n	8006036 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d3c:	4413      	add	r3, r2
 8005d3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	011a      	lsls	r2, r3, #4
 8005d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	891b      	ldrh	r3, [r3, #8]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	653b      	str	r3, [r7, #80]	; 0x50
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d70:	4413      	add	r3, r2
 8005d72:	653b      	str	r3, [r7, #80]	; 0x50
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	011a      	lsls	r2, r3, #4
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	895b      	ldrh	r3, [r3, #10]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f040 8091 	bne.w	8005ec0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005dac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01b      	beq.n	8005dee <USB_ActivateEndpoint+0x47e>
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01b      	beq.n	8005e3e <USB_ActivateEndpoint+0x4ce>
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]
 8005ebe:	e0ba      	b.n	8006036 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ed0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01d      	beq.n	8005f18 <USB_ActivateEndpoint+0x5a8>
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01d      	beq.n	8005f70 <USB_ActivateEndpoint+0x600>
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	78db      	ldrb	r3, [r3, #3]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d024      	beq.n	8005fc2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f96:	f083 0320 	eor.w	r3, r3, #32
 8005f9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	441a      	add	r2, r3
 8005fa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	8013      	strh	r3, [r2, #0]
 8005fc0:	e01d      	b.n	8005ffe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006036:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800603a:	4618      	mov	r0, r3
 800603c:	376c      	adds	r7, #108	; 0x6c
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006044:	b480      	push	{r7}
 8006046:	b08d      	sub	sp, #52	; 0x34
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	7b1b      	ldrb	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 808e 	bne.w	8006174 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d044      	beq.n	80060ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	81bb      	strh	r3, [r7, #12]
 800606e:	89bb      	ldrh	r3, [r7, #12]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <USB_DeactivateEndpoint+0x6c>
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	817b      	strh	r3, [r7, #10]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	897b      	ldrh	r3, [r7, #10]
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	813b      	strh	r3, [r7, #8]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	893b      	ldrh	r3, [r7, #8]
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
 80060e8:	e192      	b.n	8006410 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	827b      	strh	r3, [r7, #18]
 80060f8:	8a7b      	ldrh	r3, [r7, #18]
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01b      	beq.n	800613a <USB_DeactivateEndpoint+0xf6>
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	823b      	strh	r3, [r7, #16]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	8a3b      	ldrh	r3, [r7, #16]
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	81fb      	strh	r3, [r7, #14]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	89fb      	ldrh	r3, [r7, #14]
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]
 8006172:	e14d      	b.n	8006410 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 80a5 	bne.w	80062c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	843b      	strh	r3, [r7, #32]
 800618c:	8c3b      	ldrh	r3, [r7, #32]
 800618e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01b      	beq.n	80061ce <USB_DeactivateEndpoint+0x18a>
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	83fb      	strh	r3, [r7, #30]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	8bfb      	ldrh	r3, [r7, #30]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	83bb      	strh	r3, [r7, #28]
 80061dc:	8bbb      	ldrh	r3, [r7, #28]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01b      	beq.n	800621e <USB_DeactivateEndpoint+0x1da>
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	837b      	strh	r3, [r7, #26]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	8b7b      	ldrh	r3, [r7, #26]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	833b      	strh	r3, [r7, #24]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8b3b      	ldrh	r3, [r7, #24]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	82fb      	strh	r3, [r7, #22]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	8afb      	ldrh	r3, [r7, #22]
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a4:	82bb      	strh	r3, [r7, #20]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	8abb      	ldrh	r3, [r7, #20]
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
 80062c6:	e0a3      	b.n	8006410 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <USB_DeactivateEndpoint+0x2d4>
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006314:	b29b      	uxth	r3, r3
 8006316:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006326:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <USB_DeactivateEndpoint+0x324>
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	853b      	strh	r3, [r7, #40]	; 0x28
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	b29b      	uxth	r3, r3
 800640e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3734      	adds	r7, #52	; 0x34
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b0cc      	sub	sp, #304	; 0x130
 8006420:	af00      	add	r7, sp, #0
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800642a:	6018      	str	r0, [r3, #0]
 800642c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006434:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b01      	cmp	r3, #1
 8006444:	f041 817d 	bne.w	8007742 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	d908      	bls.n	8006476 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006474:	e007      	b.n	8006486 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	7b1b      	ldrb	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d152      	bne.n	800653c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6959      	ldr	r1, [r3, #20]
 80064a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	88da      	ldrh	r2, [r3, #6]
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f001 ff0e 	bl	80082de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	4619      	mov	r1, r3
 80064e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064f4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	440a      	add	r2, r1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	011a      	lsls	r2, r3, #4
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4413      	add	r3, r2
 8006518:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800651c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006520:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652a:	b29a      	uxth	r2, r3
 800652c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006530:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	f001 b8b5 	b.w	80076a6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800653c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b02      	cmp	r3, #2
 800654a:	f040 84c6 	bne.w	8006eda <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	f240 8443 	bls.w	8006df2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800656c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006570:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	441a      	add	r2, r3
 80065b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d8:	1ad2      	subs	r2, r2, r3
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 823e 	beq.w	8006a8a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800660e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006612:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006616:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800661a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 809a 	bne.w	8006768 <USB_EPStartXfer+0x34c>
 8006634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006640:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006656:	b29b      	uxth	r3, r3
 8006658:	4619      	mov	r1, r3
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006662:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006666:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	440a      	add	r2, r1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	011a      	lsls	r2, r3, #4
 800667e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4413      	add	r3, r2
 800668a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800668e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006692:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d122      	bne.n	80066e6 <USB_EPStartXfer+0x2ca>
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	e079      	b.n	80067da <USB_EPStartXfer+0x3be>
 80066e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ea:	2b3e      	cmp	r3, #62	; 0x3e
 80066ec:	d81b      	bhi.n	8006726 <USB_EPStartXfer+0x30a>
 80066ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80066f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <USB_EPStartXfer+0x2f2>
 8006704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006708:	3301      	adds	r3, #1
 800670a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800670e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006712:	b29b      	uxth	r3, r3
 8006714:	029b      	lsls	r3, r3, #10
 8006716:	b29a      	uxth	r2, r3
 8006718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e059      	b.n	80067da <USB_EPStartXfer+0x3be>
 8006726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <USB_EPStartXfer+0x32a>
 800673c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006740:	3b01      	subs	r3, #1
 8006742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29b      	uxth	r3, r3
 8006750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006758:	b29a      	uxth	r2, r3
 800675a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e038      	b.n	80067da <USB_EPStartXfer+0x3be>
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d130      	bne.n	80067da <USB_EPStartXfer+0x3be>
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	4619      	mov	r1, r3
 800678a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006792:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006796:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	440a      	add	r2, r1
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	011a      	lsls	r2, r3, #4
 80067ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4413      	add	r3, r2
 80067ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80067be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	895b      	ldrh	r3, [r3, #10]
 80067e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6959      	ldr	r1, [r3, #20]
 80067f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006800:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006804:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006808:	6800      	ldr	r0, [r0, #0]
 800680a:	f001 fd68 	bl	80082de <USB_WritePMA>
            ep->xfer_buff += len;
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681e:	441a      	add	r2, r3
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a1a      	ldr	r2, [r3, #32]
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	429a      	cmp	r2, r3
 8006846:	d90f      	bls.n	8006868 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a1a      	ldr	r2, [r3, #32]
 8006854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006858:	1ad2      	subs	r2, r2, r3
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	621a      	str	r2, [r3, #32]
 8006866:	e00e      	b.n	8006886 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 809a 	bne.w	80069cc <USB_EPStartXfer+0x5b0>
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068ca:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	440a      	add	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	011a      	lsls	r2, r3, #4
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d122      	bne.n	800694a <USB_EPStartXfer+0x52e>
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006916:	b29a      	uxth	r2, r3
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006928:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693a:	b29a      	uxth	r2, r3
 800693c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006940:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e083      	b.n	8006a52 <USB_EPStartXfer+0x636>
 800694a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694e:	2b3e      	cmp	r3, #62	; 0x3e
 8006950:	d81b      	bhi.n	800698a <USB_EPStartXfer+0x56e>
 8006952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800695c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <USB_EPStartXfer+0x556>
 8006968:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800696c:	3301      	adds	r3, #1
 800696e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006972:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006976:	b29b      	uxth	r3, r3
 8006978:	029b      	lsls	r3, r3, #10
 800697a:	b29a      	uxth	r2, r3
 800697c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006980:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e063      	b.n	8006a52 <USB_EPStartXfer+0x636>
 800698a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006998:	f003 031f 	and.w	r3, r3, #31
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <USB_EPStartXfer+0x58e>
 80069a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069a4:	3b01      	subs	r3, #1
 80069a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	029b      	lsls	r3, r3, #10
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	e042      	b.n	8006a52 <USB_EPStartXfer+0x636>
 80069cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d13a      	bne.n	8006a52 <USB_EPStartXfer+0x636>
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80069e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	4619      	mov	r1, r3
 8006a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a0e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	440a      	add	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	011a      	lsls	r2, r3, #4
 8006a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	891b      	ldrh	r3, [r3, #8]
 8006a5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6959      	ldr	r1, [r3, #20]
 8006a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a80:	6800      	ldr	r0, [r0, #0]
 8006a82:	f001 fc2c 	bl	80082de <USB_WritePMA>
 8006a86:	f000 be0e 	b.w	80076a6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d16d      	bne.n	8006b76 <USB_EPStartXfer+0x75a>
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aba:	4413      	add	r3, r2
 8006abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	011a      	lsls	r2, r3, #4
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	4413      	add	r3, r2
 8006ad0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d112      	bne.n	8006b04 <USB_EPStartXfer+0x6e8>
 8006ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aec:	801a      	strh	r2, [r3, #0]
 8006aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e063      	b.n	8006bcc <USB_EPStartXfer+0x7b0>
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0a:	d817      	bhi.n	8006b3c <USB_EPStartXfer+0x720>
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <USB_EPStartXfer+0x710>
 8006b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b26:	3301      	adds	r3, #1
 8006b28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e047      	b.n	8006bcc <USB_EPStartXfer+0x7b0>
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <USB_EPStartXfer+0x740>
 8006b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b56:	3b01      	subs	r3, #1
 8006b58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	029b      	lsls	r3, r3, #10
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e02a      	b.n	8006bcc <USB_EPStartXfer+0x7b0>
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d122      	bne.n	8006bcc <USB_EPStartXfer+0x7b0>
 8006b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	653b      	str	r3, [r7, #80]	; 0x50
 8006b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba6:	4413      	add	r3, r2
 8006ba8:	653b      	str	r3, [r7, #80]	; 0x50
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	011a      	lsls	r2, r3, #4
 8006bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bba:	4413      	add	r3, r2
 8006bbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	891b      	ldrh	r3, [r3, #8]
 8006bd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6959      	ldr	r1, [r3, #20]
 8006be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bf2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bf6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	f001 fb6f 	bl	80082de <USB_WritePMA>
            ep->xfer_buff += len;
 8006c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c10:	441a      	add	r2, r3
 8006c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d90f      	bls.n	8006c5a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a1a      	ldr	r2, [r3, #32]
 8006c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	621a      	str	r2, [r3, #32]
 8006c58:	e00e      	b.n	8006c78 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2200      	movs	r2, #0
 8006c76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	643b      	str	r3, [r7, #64]	; 0x40
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d16d      	bne.n	8006d70 <USB_EPStartXfer+0x954>
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	4413      	add	r3, r2
 8006cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	011a      	lsls	r2, r3, #4
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	4413      	add	r3, r2
 8006cca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d112      	bne.n	8006cfe <USB_EPStartXfer+0x8e2>
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	e05d      	b.n	8006dba <USB_EPStartXfer+0x99e>
 8006cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d02:	2b3e      	cmp	r3, #62	; 0x3e
 8006d04:	d817      	bhi.n	8006d36 <USB_EPStartXfer+0x91a>
 8006d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d004      	beq.n	8006d26 <USB_EPStartXfer+0x90a>
 8006d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d20:	3301      	adds	r3, #1
 8006d22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	029b      	lsls	r3, r3, #10
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e041      	b.n	8006dba <USB_EPStartXfer+0x99e>
 8006d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d44:	f003 031f 	and.w	r3, r3, #31
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <USB_EPStartXfer+0x93a>
 8006d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d50:	3b01      	subs	r3, #1
 8006d52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	e024      	b.n	8006dba <USB_EPStartXfer+0x99e>
 8006d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d11c      	bne.n	8006dba <USB_EPStartXfer+0x99e>
 8006d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d94:	4413      	add	r3, r2
 8006d96:	643b      	str	r3, [r7, #64]	; 0x40
 8006d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	011a      	lsls	r2, r3, #4
 8006da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da8:	4413      	add	r3, r2
 8006daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	895b      	ldrh	r3, [r3, #10]
 8006dc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6959      	ldr	r1, [r3, #20]
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006de0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006de4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006de8:	6800      	ldr	r0, [r0, #0]
 8006dea:	f001 fa78 	bl	80082de <USB_WritePMA>
 8006dee:	f000 bc5a 	b.w	80076a6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	441a      	add	r2, r3
 8006e46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e7e:	4413      	add	r3, r2
 8006e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	011a      	lsls	r2, r3, #4
 8006e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e92:	4413      	add	r3, r2
 8006e94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ea2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	891b      	ldrh	r3, [r3, #8]
 8006eb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6959      	ldr	r1, [r3, #20]
 8006ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006eca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ece:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	f001 fa03 	bl	80082de <USB_WritePMA>
 8006ed8:	e3e5      	b.n	80076a6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	441a      	add	r2, r3
 8006f1e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a1a      	ldr	r2, [r3, #32]
 8006f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 81bc 	beq.w	80072f4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	785b      	ldrb	r3, [r3, #1]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d16d      	bne.n	8007076 <USB_EPStartXfer+0xc5a>
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fba:	4413      	add	r3, r2
 8006fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	011a      	lsls	r2, r3, #4
 8006fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fce:	4413      	add	r3, r2
 8006fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd4:	677b      	str	r3, [r7, #116]	; 0x74
 8006fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d112      	bne.n	8007004 <USB_EPStartXfer+0xbe8>
 8006fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	e060      	b.n	80070c6 <USB_EPStartXfer+0xcaa>
 8007004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007008:	2b3e      	cmp	r3, #62	; 0x3e
 800700a:	d817      	bhi.n	800703c <USB_EPStartXfer+0xc20>
 800700c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <USB_EPStartXfer+0xc10>
 8007022:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007026:	3301      	adds	r3, #1
 8007028:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800702c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29a      	uxth	r2, r3
 8007036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e044      	b.n	80070c6 <USB_EPStartXfer+0xcaa>
 800703c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <USB_EPStartXfer+0xc40>
 8007052:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007056:	3b01      	subs	r3, #1
 8007058:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800705c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007060:	b29b      	uxth	r3, r3
 8007062:	029b      	lsls	r3, r3, #10
 8007064:	b29b      	uxth	r3, r3
 8007066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706e:	b29a      	uxth	r2, r3
 8007070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e027      	b.n	80070c6 <USB_EPStartXfer+0xcaa>
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d11f      	bne.n	80070c6 <USB_EPStartXfer+0xcaa>
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800709c:	4413      	add	r3, r2
 800709e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	011a      	lsls	r2, r3, #4
 80070b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070b4:	4413      	add	r3, r2
 80070b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	895b      	ldrh	r3, [r3, #10]
 80070d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6959      	ldr	r1, [r3, #20]
 80070e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070f4:	6800      	ldr	r0, [r0, #0]
 80070f6:	f001 f8f2 	bl	80082de <USB_WritePMA>
          ep->xfer_buff += len;
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695a      	ldr	r2, [r3, #20]
 8007106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710a:	441a      	add	r2, r3
 800710c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a1a      	ldr	r2, [r3, #32]
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	429a      	cmp	r2, r3
 8007132:	d90f      	bls.n	8007154 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6a1a      	ldr	r2, [r3, #32]
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	1ad2      	subs	r2, r2, r3
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	621a      	str	r2, [r3, #32]
 8007152:	e00e      	b.n	8007172 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8295 	beq.w	80076a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d16d      	bne.n	8007268 <USB_EPStartXfer+0xe4c>
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	66bb      	str	r3, [r7, #104]	; 0x68
 8007198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071ac:	4413      	add	r3, r2
 80071ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	011a      	lsls	r2, r3, #4
 80071be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071c0:	4413      	add	r3, r2
 80071c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071c6:	667b      	str	r3, [r7, #100]	; 0x64
 80071c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d112      	bne.n	80071f6 <USB_EPStartXfer+0xdda>
 80071d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071da:	b29a      	uxth	r2, r3
 80071dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071de:	801a      	strh	r2, [r3, #0]
 80071e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	e063      	b.n	80072be <USB_EPStartXfer+0xea2>
 80071f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fa:	2b3e      	cmp	r3, #62	; 0x3e
 80071fc:	d817      	bhi.n	800722e <USB_EPStartXfer+0xe12>
 80071fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <USB_EPStartXfer+0xe02>
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007218:	3301      	adds	r3, #1
 800721a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007222:	b29b      	uxth	r3, r3
 8007224:	029b      	lsls	r3, r3, #10
 8007226:	b29a      	uxth	r2, r3
 8007228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e047      	b.n	80072be <USB_EPStartXfer+0xea2>
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <USB_EPStartXfer+0xe32>
 8007244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007248:	3b01      	subs	r3, #1
 800724a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007252:	b29b      	uxth	r3, r3
 8007254:	029b      	lsls	r3, r3, #10
 8007256:	b29b      	uxth	r3, r3
 8007258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007260:	b29a      	uxth	r2, r3
 8007262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	e02a      	b.n	80072be <USB_EPStartXfer+0xea2>
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d122      	bne.n	80072be <USB_EPStartXfer+0xea2>
 8007278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	673b      	str	r3, [r7, #112]	; 0x70
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007298:	4413      	add	r3, r2
 800729a:	673b      	str	r3, [r7, #112]	; 0x70
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	011a      	lsls	r2, r3, #4
 80072aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ac:	4413      	add	r3, r2
 80072ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	891b      	ldrh	r3, [r3, #8]
 80072ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6959      	ldr	r1, [r3, #20]
 80072da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072ec:	6800      	ldr	r0, [r0, #0]
 80072ee:	f000 fff6 	bl	80082de <USB_WritePMA>
 80072f2:	e1d8      	b.n	80076a6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d178      	bne.n	80073f6 <USB_EPStartXfer+0xfda>
 8007304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007308:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007320:	b29b      	uxth	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007328:	4413      	add	r3, r2
 800732a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	011a      	lsls	r2, r3, #4
 800733c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007340:	4413      	add	r3, r2
 8007342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007346:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800734a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d116      	bne.n	8007380 <USB_EPStartXfer+0xf64>
 8007352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800735e:	b29a      	uxth	r2, r3
 8007360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007376:	b29a      	uxth	r2, r3
 8007378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	e06b      	b.n	8007458 <USB_EPStartXfer+0x103c>
 8007380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007384:	2b3e      	cmp	r3, #62	; 0x3e
 8007386:	d818      	bhi.n	80073ba <USB_EPStartXfer+0xf9e>
 8007388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <USB_EPStartXfer+0xf8c>
 800739e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073a2:	3301      	adds	r3, #1
 80073a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	029b      	lsls	r3, r3, #10
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	e04e      	b.n	8007458 <USB_EPStartXfer+0x103c>
 80073ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <USB_EPStartXfer+0xfbe>
 80073d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073d4:	3b01      	subs	r3, #1
 80073d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073de:	b29b      	uxth	r3, r3
 80073e0:	029b      	lsls	r3, r3, #10
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	e030      	b.n	8007458 <USB_EPStartXfer+0x103c>
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d128      	bne.n	8007458 <USB_EPStartXfer+0x103c>
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800742a:	4413      	add	r3, r2
 800742c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	011a      	lsls	r2, r3, #4
 800743e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007442:	4413      	add	r3, r2
 8007444:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800744c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007450:	b29a      	uxth	r2, r3
 8007452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007456:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	891b      	ldrh	r3, [r3, #8]
 8007464:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6959      	ldr	r1, [r3, #20]
 8007474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007478:	b29b      	uxth	r3, r3
 800747a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800747e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007482:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	f000 ff29 	bl	80082de <USB_WritePMA>
          ep->xfer_buff += len;
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749c:	441a      	add	r2, r3
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a1a      	ldr	r2, [r3, #32]
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d90f      	bls.n	80074e6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a1a      	ldr	r2, [r3, #32]
 80074d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	621a      	str	r2, [r3, #32]
 80074e4:	e00e      	b.n	8007504 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2200      	movs	r2, #0
 8007502:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80cc 	beq.w	80076a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800750e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d178      	bne.n	800761e <USB_EPStartXfer+0x1202>
 800752c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800753a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007548:	b29b      	uxth	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007550:	4413      	add	r3, r2
 8007552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	011a      	lsls	r2, r3, #4
 8007564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007568:	4413      	add	r3, r2
 800756a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800756e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d116      	bne.n	80075a8 <USB_EPStartXfer+0x118c>
 800757a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007586:	b29a      	uxth	r2, r3
 8007588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	e064      	b.n	8007672 <USB_EPStartXfer+0x1256>
 80075a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ac:	2b3e      	cmp	r3, #62	; 0x3e
 80075ae:	d818      	bhi.n	80075e2 <USB_EPStartXfer+0x11c6>
 80075b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <USB_EPStartXfer+0x11b4>
 80075c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ca:	3301      	adds	r3, #1
 80075cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	029b      	lsls	r3, r3, #10
 80075d8:	b29a      	uxth	r2, r3
 80075da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	e047      	b.n	8007672 <USB_EPStartXfer+0x1256>
 80075e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <USB_EPStartXfer+0x11e6>
 80075f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075fc:	3b01      	subs	r3, #1
 80075fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007606:	b29b      	uxth	r3, r3
 8007608:	029b      	lsls	r3, r3, #10
 800760a:	b29b      	uxth	r3, r3
 800760c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007614:	b29a      	uxth	r2, r3
 8007616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	e029      	b.n	8007672 <USB_EPStartXfer+0x1256>
 800761e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d121      	bne.n	8007672 <USB_EPStartXfer+0x1256>
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763c:	b29b      	uxth	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007644:	4413      	add	r3, r2
 8007646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800764a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	011a      	lsls	r2, r3, #4
 8007658:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800765c:	4413      	add	r3, r2
 800765e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766a:	b29a      	uxth	r2, r3
 800766c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007670:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	895b      	ldrh	r3, [r3, #10]
 800767e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6959      	ldr	r1, [r3, #20]
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	b29b      	uxth	r3, r3
 8007694:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007698:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800769c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076a0:	6800      	ldr	r0, [r0, #0]
 80076a2:	f000 fe1c 	bl	80082de <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076c8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d4:	8013      	strh	r3, [r2, #0]
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80076de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076e2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076e6:	8812      	ldrh	r2, [r2, #0]
 80076e8:	f082 0210 	eor.w	r2, r2, #16
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80076f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076fa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076fe:	8812      	ldrh	r2, [r2, #0]
 8007700:	f082 0220 	eor.w	r2, r2, #32
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	441a      	add	r2, r3
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773a:	b29b      	uxth	r3, r3
 800773c:	8013      	strh	r3, [r2, #0]
 800773e:	f000 bc9f 	b.w	8008080 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	7b1b      	ldrb	r3, [r3, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f040 80ae 	bne.w	80078b0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	d917      	bls.n	80077a0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699a      	ldr	r2, [r3, #24]
 800778c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007790:	1ad2      	subs	r2, r2, r3
 8007792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	619a      	str	r2, [r3, #24]
 800779e:	e00e      	b.n	80077be <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80077a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80077b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077da:	b29b      	uxth	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077e2:	4413      	add	r3, r2
 80077e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	011a      	lsls	r2, r3, #4
 80077f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077fa:	4413      	add	r3, r2
 80077fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d116      	bne.n	800783a <USB_EPStartXfer+0x141e>
 800780c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007818:	b29a      	uxth	r2, r3
 800781a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007830:	b29a      	uxth	r2, r3
 8007832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	e3e8      	b.n	800800c <USB_EPStartXfer+0x1bf0>
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	2b3e      	cmp	r3, #62	; 0x3e
 8007840:	d818      	bhi.n	8007874 <USB_EPStartXfer+0x1458>
 8007842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007846:	085b      	lsrs	r3, r3, #1
 8007848:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800784c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <USB_EPStartXfer+0x1446>
 8007858:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800785c:	3301      	adds	r3, #1
 800785e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007862:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007866:	b29b      	uxth	r3, r3
 8007868:	029b      	lsls	r3, r3, #10
 800786a:	b29a      	uxth	r2, r3
 800786c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e3cb      	b.n	800800c <USB_EPStartXfer+0x1bf0>
 8007874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007878:	095b      	lsrs	r3, r3, #5
 800787a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <USB_EPStartXfer+0x1478>
 800788a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800788e:	3b01      	subs	r3, #1
 8007890:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007894:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007898:	b29b      	uxth	r3, r3
 800789a:	029b      	lsls	r3, r3, #10
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e3ad      	b.n	800800c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80078b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	78db      	ldrb	r3, [r3, #3]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	f040 8200 	bne.w	8007cc2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80078c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	785b      	ldrb	r3, [r3, #1]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f040 8091 	bne.w	80079f6 <USB_EPStartXfer+0x15da>
 80078d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078f8:	4413      	add	r3, r2
 80078fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	011a      	lsls	r2, r3, #4
 800790c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007910:	4413      	add	r3, r2
 8007912:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800791a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d116      	bne.n	8007958 <USB_EPStartXfer+0x153c>
 800792a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007936:	b29a      	uxth	r2, r3
 8007938:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800793c:	801a      	strh	r2, [r3, #0]
 800793e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794e:	b29a      	uxth	r2, r3
 8007950:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	e083      	b.n	8007a60 <USB_EPStartXfer+0x1644>
 8007958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b3e      	cmp	r3, #62	; 0x3e
 8007966:	d820      	bhi.n	80079aa <USB_EPStartXfer+0x158e>
 8007968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800797a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <USB_EPStartXfer+0x157c>
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	3301      	adds	r3, #1
 8007994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799c:	b29b      	uxth	r3, r3
 800799e:	029b      	lsls	r3, r3, #10
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e05a      	b.n	8007a60 <USB_EPStartXfer+0x1644>
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f003 031f 	and.w	r3, r3, #31
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <USB_EPStartXfer+0x15be>
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	3b01      	subs	r3, #1
 80079d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	b29b      	uxth	r3, r3
 80079e0:	029b      	lsls	r3, r3, #10
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	e034      	b.n	8007a60 <USB_EPStartXfer+0x1644>
 80079f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d12c      	bne.n	8007a60 <USB_EPStartXfer+0x1644>
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	011a      	lsls	r2, r3, #4
 8007a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a42:	4413      	add	r3, r2
 8007a44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f040 8091 	bne.w	8007ba2 <USB_EPStartXfer+0x1786>
 8007a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	011a      	lsls	r2, r3, #4
 8007ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007abc:	4413      	add	r3, r2
 8007abe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d116      	bne.n	8007b04 <USB_EPStartXfer+0x16e8>
 8007ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b00:	801a      	strh	r2, [r3, #0]
 8007b02:	e07c      	b.n	8007bfe <USB_EPStartXfer+0x17e2>
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b3e      	cmp	r3, #62	; 0x3e
 8007b12:	d820      	bhi.n	8007b56 <USB_EPStartXfer+0x173a>
 8007b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	085b      	lsrs	r3, r3, #1
 8007b22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <USB_EPStartXfer+0x1728>
 8007b3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b3e:	3301      	adds	r3, #1
 8007b40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	029b      	lsls	r3, r3, #10
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	e053      	b.n	8007bfe <USB_EPStartXfer+0x17e2>
 8007b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 031f 	and.w	r3, r3, #31
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <USB_EPStartXfer+0x176a>
 8007b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b80:	3b01      	subs	r3, #1
 8007b82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	029b      	lsls	r3, r3, #10
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e02d      	b.n	8007bfe <USB_EPStartXfer+0x17e2>
 8007ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d125      	bne.n	8007bfe <USB_EPStartXfer+0x17e2>
 8007bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007bc8:	4413      	add	r3, r2
 8007bca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	011a      	lsls	r2, r3, #4
 8007bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007be0:	4413      	add	r3, r2
 8007be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bfc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 81fe 	beq.w	800800c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c30:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <USB_EPStartXfer+0x182c>
 8007c3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10d      	bne.n	8007c64 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c48:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f040 81db 	bne.w	800800c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c56:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 81d4 	bne.w	800800c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	441a      	add	r2, r3
 8007ca8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	8013      	strh	r3, [r2, #0]
 8007cc0:	e1a4      	b.n	800800c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	78db      	ldrb	r3, [r3, #3]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	f040 819a 	bne.w	8008008 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d917      	bls.n	8007d20 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d10:	1ad2      	subs	r2, r2, r3
 8007d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	619a      	str	r2, [r3, #24]
 8007d1e:	e00e      	b.n	8007d3e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d178      	bne.n	8007e40 <USB_EPStartXfer+0x1a24>
 8007d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d72:	4413      	add	r3, r2
 8007d74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	011a      	lsls	r2, r3, #4
 8007d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d116      	bne.n	8007dca <USB_EPStartXfer+0x19ae>
 8007d9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	e06b      	b.n	8007ea2 <USB_EPStartXfer+0x1a86>
 8007dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dce:	2b3e      	cmp	r3, #62	; 0x3e
 8007dd0:	d818      	bhi.n	8007e04 <USB_EPStartXfer+0x19e8>
 8007dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d004      	beq.n	8007df2 <USB_EPStartXfer+0x19d6>
 8007de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dec:	3301      	adds	r3, #1
 8007dee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	029b      	lsls	r3, r3, #10
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e04e      	b.n	8007ea2 <USB_EPStartXfer+0x1a86>
 8007e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e08:	095b      	lsrs	r3, r3, #5
 8007e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e12:	f003 031f 	and.w	r3, r3, #31
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d104      	bne.n	8007e24 <USB_EPStartXfer+0x1a08>
 8007e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	029b      	lsls	r3, r3, #10
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	e030      	b.n	8007ea2 <USB_EPStartXfer+0x1a86>
 8007e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d128      	bne.n	8007ea2 <USB_EPStartXfer+0x1a86>
 8007e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	4413      	add	r3, r2
 8007e76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	011a      	lsls	r2, r3, #4
 8007e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d178      	bne.n	8007fb2 <USB_EPStartXfer+0x1b96>
 8007ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	011a      	lsls	r2, r3, #4
 8007ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007efc:	4413      	add	r3, r2
 8007efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d116      	bne.n	8007f3c <USB_EPStartXfer+0x1b20>
 8007f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e067      	b.n	800800c <USB_EPStartXfer+0x1bf0>
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	2b3e      	cmp	r3, #62	; 0x3e
 8007f42:	d818      	bhi.n	8007f76 <USB_EPStartXfer+0x1b5a>
 8007f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <USB_EPStartXfer+0x1b48>
 8007f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	029b      	lsls	r3, r3, #10
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e04a      	b.n	800800c <USB_EPStartXfer+0x1bf0>
 8007f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <USB_EPStartXfer+0x1b7a>
 8007f8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f90:	3b01      	subs	r3, #1
 8007f92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	029b      	lsls	r3, r3, #10
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fae:	801a      	strh	r2, [r3, #0]
 8007fb0:	e02c      	b.n	800800c <USB_EPStartXfer+0x1bf0>
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d124      	bne.n	800800c <USB_EPStartXfer+0x1bf0>
 8007fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd8:	4413      	add	r3, r2
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	011a      	lsls	r2, r3, #4
 8007fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e001      	b.n	800800c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e03a      	b.n	8008082 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800802e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008032:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008036:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800803a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800803e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008042:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008046:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800804a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800804e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800806c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	b29b      	uxth	r3, r3
 800807e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b4:	81bb      	strh	r3, [r7, #12]
 80080b6:	89bb      	ldrh	r3, [r7, #12]
 80080b8:	f083 0310 	eor.w	r3, r3, #16
 80080bc:	81bb      	strh	r3, [r7, #12]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	441a      	add	r2, r3
 80080c8:	89bb      	ldrh	r3, [r7, #12]
 80080ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080da:	b29b      	uxth	r3, r3
 80080dc:	8013      	strh	r3, [r2, #0]
 80080de:	e01f      	b.n	8008120 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	81fb      	strh	r3, [r7, #14]
 80080f8:	89fb      	ldrh	r3, [r7, #14]
 80080fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080fe:	81fb      	strh	r3, [r7, #14]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	89fb      	ldrh	r3, [r7, #14]
 800810c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811c:	b29b      	uxth	r3, r3
 800811e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr

0800812c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	7b1b      	ldrb	r3, [r3, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 809d 	bne.w	800827a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d04c      	beq.n	80081e2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	823b      	strh	r3, [r7, #16]
 8008156:	8a3b      	ldrh	r3, [r7, #16]
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01b      	beq.n	8008198 <USB_EPClearStall+0x6c>
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	81fb      	strh	r3, [r7, #14]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	441a      	add	r2, r3
 8008182:	89fb      	ldrh	r3, [r7, #14]
 8008184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800818c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008190:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008194:	b29b      	uxth	r3, r3
 8008196:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	78db      	ldrb	r3, [r3, #3]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d06c      	beq.n	800827a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b6:	81bb      	strh	r3, [r7, #12]
 80081b8:	89bb      	ldrh	r3, [r7, #12]
 80081ba:	f083 0320 	eor.w	r3, r3, #32
 80081be:	81bb      	strh	r3, [r7, #12]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	441a      	add	r2, r3
 80081ca:	89bb      	ldrh	r3, [r7, #12]
 80081cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	b29b      	uxth	r3, r3
 80081de:	8013      	strh	r3, [r2, #0]
 80081e0:	e04b      	b.n	800827a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	82fb      	strh	r3, [r7, #22]
 80081f0:	8afb      	ldrh	r3, [r7, #22]
 80081f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01b      	beq.n	8008232 <USB_EPClearStall+0x106>
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008210:	82bb      	strh	r3, [r7, #20]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	441a      	add	r2, r3
 800821c:	8abb      	ldrh	r3, [r7, #20]
 800821e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800822a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822e:	b29b      	uxth	r3, r3
 8008230:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008248:	827b      	strh	r3, [r7, #18]
 800824a:	8a7b      	ldrh	r3, [r7, #18]
 800824c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008250:	827b      	strh	r3, [r7, #18]
 8008252:	8a7b      	ldrh	r3, [r7, #18]
 8008254:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008258:	827b      	strh	r3, [r7, #18]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	441a      	add	r2, r3
 8008264:	8a7b      	ldrh	r3, [r7, #18]
 8008266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008276:	b29b      	uxth	r3, r3
 8008278:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr

08008286 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008286:	b480      	push	{r7}
 8008288:	b083      	sub	sp, #12
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2280      	movs	r2, #128	; 0x80
 800829c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80082d2:	68fb      	ldr	r3, [r7, #12]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr

080082de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082de:	b480      	push	{r7}
 80082e0:	b08d      	sub	sp, #52	; 0x34
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	4611      	mov	r1, r2
 80082ea:	461a      	mov	r2, r3
 80082ec:	460b      	mov	r3, r1
 80082ee:	80fb      	strh	r3, [r7, #6]
 80082f0:	4613      	mov	r3, r2
 80082f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082f4:	88bb      	ldrh	r3, [r7, #4]
 80082f6:	3301      	adds	r3, #1
 80082f8:	085b      	lsrs	r3, r3, #1
 80082fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	005a      	lsls	r2, r3, #1
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008316:	e01e      	b.n	8008356 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	3301      	adds	r3, #1
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	b29b      	uxth	r3, r3
 800832e:	461a      	mov	r2, r3
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	b29a      	uxth	r2, r3
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	3302      	adds	r3, #2
 8008342:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	3302      	adds	r3, #2
 8008348:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	3301      	adds	r3, #1
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	3b01      	subs	r3, #1
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1dd      	bne.n	8008318 <USB_WritePMA+0x3a>
  }
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	3734      	adds	r7, #52	; 0x34
 8008362:	46bd      	mov	sp, r7
 8008364:	bc80      	pop	{r7}
 8008366:	4770      	bx	lr

08008368 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008368:	b480      	push	{r7}
 800836a:	b08b      	sub	sp, #44	; 0x2c
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4611      	mov	r1, r2
 8008374:	461a      	mov	r2, r3
 8008376:	460b      	mov	r3, r1
 8008378:	80fb      	strh	r3, [r7, #6]
 800837a:	4613      	mov	r3, r2
 800837c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800837e:	88bb      	ldrh	r3, [r7, #4]
 8008380:	085b      	lsrs	r3, r3, #1
 8008382:	b29b      	uxth	r3, r3
 8008384:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800838e:	88fb      	ldrh	r3, [r7, #6]
 8008390:	005a      	lsls	r2, r3, #1
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
 80083a0:	e01b      	b.n	80083da <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	3302      	adds	r3, #2
 80083ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	3301      	adds	r3, #1
 80083bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	0a1b      	lsrs	r3, r3, #8
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	3301      	adds	r3, #1
 80083cc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	3302      	adds	r3, #2
 80083d2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	3b01      	subs	r3, #1
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e0      	bne.n	80083a2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80083e0:	88bb      	ldrh	r3, [r7, #4]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	701a      	strb	r2, [r3, #0]
  }
}
 80083fc:	bf00      	nop
 80083fe:	372c      	adds	r7, #44	; 0x2c
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7c1b      	ldrb	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d115      	bne.n	800844a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800841e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008422:	2202      	movs	r2, #2
 8008424:	2181      	movs	r1, #129	; 0x81
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f001 fed9 	bl	800a1de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008436:	2202      	movs	r2, #2
 8008438:	2101      	movs	r1, #1
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fecf 	bl	800a1de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008448:	e012      	b.n	8008470 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800844a:	2340      	movs	r3, #64	; 0x40
 800844c:	2202      	movs	r2, #2
 800844e:	2181      	movs	r1, #129	; 0x81
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fec4 	bl	800a1de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800845c:	2340      	movs	r3, #64	; 0x40
 800845e:	2202      	movs	r2, #2
 8008460:	2101      	movs	r1, #1
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 febb 	bl	800a1de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008470:	2308      	movs	r3, #8
 8008472:	2203      	movs	r2, #3
 8008474:	2182      	movs	r1, #130	; 0x82
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 feb1 	bl	800a1de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008482:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008486:	f001 ffd1 	bl	800a42c <USBD_static_malloc>
 800848a:	4602      	mov	r2, r0
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
 80084a0:	e026      	b.n	80084f0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7c1b      	ldrb	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d6:	2101      	movs	r1, #1
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 ff71 	bl	800a3c0 <USBD_LL_PrepareReceive>
 80084de:	e007      	b.n	80084f0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084e6:	2340      	movs	r3, #64	; 0x40
 80084e8:	2101      	movs	r1, #1
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 ff68 	bl	800a3c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800850a:	2181      	movs	r1, #129	; 0x81
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fe8c 	bl	800a22a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008518:	2101      	movs	r1, #1
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 fe85 	bl	800a22a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008528:	2182      	movs	r1, #130	; 0x82
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 fe7d 	bl	800a22a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00e      	beq.n	800855e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008550:	4618      	mov	r0, r3
 8008552:	f001 ff77 	bl	800a444 <USBD_static_free>
    pdev->pClassData = NULL;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008578:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800858e:	2b00      	cmp	r3, #0
 8008590:	d039      	beq.n	8008606 <USBD_CDC_Setup+0x9e>
 8008592:	2b20      	cmp	r3, #32
 8008594:	d17f      	bne.n	8008696 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	88db      	ldrh	r3, [r3, #6]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d029      	beq.n	80085f2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b25b      	sxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da11      	bge.n	80085cc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80085b4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	88d2      	ldrh	r2, [r2, #6]
 80085ba:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085bc:	6939      	ldr	r1, [r7, #16]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	88db      	ldrh	r3, [r3, #6]
 80085c2:	461a      	mov	r2, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f994 	bl	80098f2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80085ca:	e06b      	b.n	80086a4 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	785a      	ldrb	r2, [r3, #1]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	88db      	ldrh	r3, [r3, #6]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085e2:	6939      	ldr	r1, [r7, #16]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	88db      	ldrh	r3, [r3, #6]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 f9af 	bl	800994e <USBD_CtlPrepareRx>
    break;
 80085f0:	e058      	b.n	80086a4 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	7850      	ldrb	r0, [r2, #1]
 80085fe:	2200      	movs	r2, #0
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	4798      	blx	r3
    break;
 8008604:	e04e      	b.n	80086a4 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	2b0b      	cmp	r3, #11
 800860c:	d02e      	beq.n	800866c <USBD_CDC_Setup+0x104>
 800860e:	2b0b      	cmp	r3, #11
 8008610:	dc38      	bgt.n	8008684 <USBD_CDC_Setup+0x11c>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <USBD_CDC_Setup+0xb4>
 8008616:	2b0a      	cmp	r3, #10
 8008618:	d014      	beq.n	8008644 <USBD_CDC_Setup+0xdc>
 800861a:	e033      	b.n	8008684 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008622:	2b03      	cmp	r3, #3
 8008624:	d107      	bne.n	8008636 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008626:	f107 030c 	add.w	r3, r7, #12
 800862a:	2202      	movs	r2, #2
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 f95f 	bl	80098f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008634:	e02e      	b.n	8008694 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 f8f0 	bl	800981e <USBD_CtlError>
			  ret = USBD_FAIL;
 800863e:	2302      	movs	r3, #2
 8008640:	75fb      	strb	r3, [r7, #23]
      break;
 8008642:	e027      	b.n	8008694 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800864a:	2b03      	cmp	r3, #3
 800864c:	d107      	bne.n	800865e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800864e:	f107 030f 	add.w	r3, r7, #15
 8008652:	2201      	movs	r2, #1
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 f94b 	bl	80098f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800865c:	e01a      	b.n	8008694 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f8dc 	bl	800981e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008666:	2302      	movs	r3, #2
 8008668:	75fb      	strb	r3, [r7, #23]
      break;
 800866a:	e013      	b.n	8008694 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008672:	2b03      	cmp	r3, #3
 8008674:	d00d      	beq.n	8008692 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f8d0 	bl	800981e <USBD_CtlError>
			  ret = USBD_FAIL;
 800867e:	2302      	movs	r3, #2
 8008680:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008682:	e006      	b.n	8008692 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f8c9 	bl	800981e <USBD_CtlError>
      ret = USBD_FAIL;
 800868c:	2302      	movs	r3, #2
 800868e:	75fb      	strb	r3, [r7, #23]
      break;
 8008690:	e000      	b.n	8008694 <USBD_CDC_Setup+0x12c>
      break;
 8008692:	bf00      	nop
    }
    break;
 8008694:	e006      	b.n	80086a4 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 f8c0 	bl	800981e <USBD_CtlError>
    ret = USBD_FAIL;
 800869e:	2302      	movs	r3, #2
 80086a0:	75fb      	strb	r3, [r7, #23]
    break;
 80086a2:	bf00      	nop
  }

  return ret;
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086c0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086c8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d03a      	beq.n	800874a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	331c      	adds	r3, #28
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d029      	beq.n	800873e <USBD_CDC_DataIn+0x90>
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	331c      	adds	r3, #28
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	78f9      	ldrb	r1, [r7, #3]
 80086fe:	68b8      	ldr	r0, [r7, #8]
 8008700:	460b      	mov	r3, r1
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	4403      	add	r3, r0
 800870a:	3338      	adds	r3, #56	; 0x38
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008712:	fb01 f303 	mul.w	r3, r1, r3
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d110      	bne.n	800873e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800871c:	78fa      	ldrb	r2, [r7, #3]
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	440b      	add	r3, r1
 800872a:	331c      	adds	r3, #28
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008730:	78f9      	ldrb	r1, [r7, #3]
 8008732:	2300      	movs	r3, #0
 8008734:	2200      	movs	r2, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fe1f 	bl	800a37a <USBD_LL_Transmit>
 800873c:	e003      	b.n	8008746 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	e000      	b.n	800874c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800874a:	2302      	movs	r3, #2
  }
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008766:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 fe4a 	bl	800a406 <USBD_LL_GetRxDataSize>
 8008772:	4602      	mov	r2, r0
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00d      	beq.n	80087a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008798:	4611      	mov	r1, r2
 800879a:	4798      	blx	r3

    return USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	e000      	b.n	80087a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80087a0:	2302      	movs	r3, #2
  }
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087b8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d015      	beq.n	80087f0 <USBD_CDC_EP0_RxReady+0x46>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80087ca:	2bff      	cmp	r3, #255	; 0xff
 80087cc:	d010      	beq.n	80087f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80087dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087e4:	b292      	uxth	r2, r2
 80087e6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	22ff      	movs	r2, #255	; 0xff
 80087ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2243      	movs	r2, #67	; 0x43
 8008808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800880a:	4b03      	ldr	r3, [pc, #12]	; (8008818 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	2000035c 	.word	0x2000035c

0800881c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2243      	movs	r2, #67	; 0x43
 8008828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800882a:	4b03      	ldr	r3, [pc, #12]	; (8008838 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	20000318 	.word	0x20000318

0800883c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2243      	movs	r2, #67	; 0x43
 8008848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	200003a0 	.word	0x200003a0

0800885c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	220a      	movs	r2, #10
 8008868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800886a:	4b03      	ldr	r3, [pc, #12]	; (8008878 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	200002d4 	.word	0x200002d4

0800887c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr

080088da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80088da:	b480      	push	{r7}
 80088dc:	b085      	sub	sp, #20
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr

08008900 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800890e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008916:	2b00      	cmp	r3, #0
 8008918:	d01c      	beq.n	8008954 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008920:	2b00      	cmp	r3, #0
 8008922:	d115      	bne.n	8008950 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008942:	b29b      	uxth	r3, r3
 8008944:	2181      	movs	r1, #129	; 0x81
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 fd17 	bl	800a37a <USBD_LL_Transmit>

      return USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	e002      	b.n	8008956 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008954:	2302      	movs	r3, #2
  }
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800896c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008974:	2b00      	cmp	r3, #0
 8008976:	d017      	beq.n	80089a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7c1b      	ldrb	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d109      	bne.n	8008994 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800898a:	2101      	movs	r1, #1
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fd17 	bl	800a3c0 <USBD_LL_PrepareReceive>
 8008992:	e007      	b.n	80089a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	2101      	movs	r1, #1
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fd0e 	bl	800a3c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	e000      	b.n	80089aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80089a8:	2302      	movs	r3, #2
  }
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	4613      	mov	r3, r2
 80089be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80089c6:	2302      	movs	r3, #2
 80089c8:	e01a      	b.n	8008a00 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	79fa      	ldrb	r2, [r7, #7]
 80089f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f001 fb7b 	bl	800a0f4 <USBD_LL_Init>

  return USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d006      	beq.n	8008a2a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]
 8008a28:	e001      	b.n	8008a2e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr

08008a3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 fbb0 	bl	800a1a8 <USBD_LL_Start>

  return USBD_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr

08008a66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008a72:	2302      	movs	r3, #2
 8008a74:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00c      	beq.n	8008a9a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	78fa      	ldrb	r2, [r7, #3]
 8008aba:	4611      	mov	r1, r2
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
  return USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 fe62 	bl	80097a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008af0:	461a      	mov	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d016      	beq.n	8008b34 <USBD_LL_SetupStage+0x6a>
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d81c      	bhi.n	8008b44 <USBD_LL_SetupStage+0x7a>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <USBD_LL_SetupStage+0x4a>
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d008      	beq.n	8008b24 <USBD_LL_SetupStage+0x5a>
 8008b12:	e017      	b.n	8008b44 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f9c5 	bl	8008eac <USBD_StdDevReq>
    break;
 8008b22:	e01a      	b.n	8008b5a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fa27 	bl	8008f80 <USBD_StdItfReq>
    break;
 8008b32:	e012      	b.n	8008b5a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa67 	bl	8009010 <USBD_StdEPReq>
    break;
 8008b42:	e00a      	b.n	8008b5a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008b4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 fb88 	bl	800a268 <USBD_LL_StallEP>
    break;
 8008b58:	bf00      	nop
  }

  return USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d14b      	bne.n	8008c10 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008b7e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d134      	bne.n	8008bf4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d919      	bls.n	8008bca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	1ad2      	subs	r2, r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d203      	bcs.n	8008bb8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	e002      	b.n	8008bbe <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fee1 	bl	800998a <USBD_CtlContinueRx>
 8008bc8:	e038      	b.n	8008c3c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d105      	bne.n	8008bec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fede 	bl	80099ae <USBD_CtlSendStatus>
 8008bf2:	e023      	b.n	8008c3c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d11e      	bne.n	8008c3c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008c06:	2100      	movs	r1, #0
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f001 fb2d 	bl	800a268 <USBD_LL_StallEP>
 8008c0e:	e015      	b.n	8008c3c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00d      	beq.n	8008c38 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d108      	bne.n	8008c38 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	7afa      	ldrb	r2, [r7, #11]
 8008c30:	4611      	mov	r1, r2
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	4798      	blx	r3
 8008c36:	e001      	b.n	8008c3c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e000      	b.n	8008c3e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	607a      	str	r2, [r7, #4]
 8008c52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d17f      	bne.n	8008d5a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3314      	adds	r3, #20
 8008c5e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d15c      	bne.n	8008d24 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d915      	bls.n	8008ca2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fe4b 	bl	800992a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c94:	2300      	movs	r3, #0
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 fb90 	bl	800a3c0 <USBD_LL_PrepareReceive>
 8008ca0:	e04e      	b.n	8008d40 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	6912      	ldr	r2, [r2, #16]
 8008caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cae:	fb01 f202 	mul.w	r2, r1, r2
 8008cb2:	1a9b      	subs	r3, r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d11c      	bne.n	8008cf2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d316      	bcc.n	8008cf2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d20f      	bcs.n	8008cf2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fe27 	bl	800992a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f001 fb68 	bl	800a3c0 <USBD_LL_PrepareReceive>
 8008cf0:	e026      	b.n	8008d40 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d105      	bne.n	8008d14 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008d14:	2180      	movs	r1, #128	; 0x80
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f001 faa6 	bl	800a268 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fe59 	bl	80099d4 <USBD_CtlReceiveStatus>
 8008d22:	e00d      	b.n	8008d40 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d004      	beq.n	8008d38 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d38:	2180      	movs	r1, #128	; 0x80
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f001 fa94 	bl	800a268 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d11d      	bne.n	8008d86 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff fe81 	bl	8008a52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008d58:	e015      	b.n	8008d86 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00d      	beq.n	8008d82 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d108      	bne.n	8008d82 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	7afa      	ldrb	r2, [r7, #11]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	4798      	blx	r3
 8008d80:	e001      	b.n	8008d86 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d82:	2302      	movs	r3, #2
 8008d84:	e000      	b.n	8008d88 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d98:	2340      	movs	r3, #64	; 0x40
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fa1d 	bl	800a1de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2240      	movs	r2, #64	; 0x40
 8008db0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008db4:	2340      	movs	r3, #64	; 0x40
 8008db6:	2200      	movs	r2, #0
 8008db8:	2180      	movs	r1, #128	; 0x80
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 fa0f 	bl	800a1de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2240      	movs	r2, #64	; 0x40
 8008dca:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d009      	beq.n	8008e08 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	6852      	ldr	r2, [r2, #4]
 8008e00:	b2d2      	uxtb	r2, r2
 8008e02:	4611      	mov	r1, r2
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	4798      	blx	r3
  }

  return USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	78fa      	ldrb	r2, [r7, #3]
 8008e22:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bc80      	pop	{r7}
 8008e2e:	4770      	bx	lr

08008e30 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2204      	movs	r2, #4
 8008e48:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bc80      	pop	{r7}
 8008e56:	4770      	bx	lr

08008e58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d10b      	bne.n	8008ea2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d005      	beq.n	8008ed2 <USBD_StdDevReq+0x26>
 8008ec6:	2b40      	cmp	r3, #64	; 0x40
 8008ec8:	d84f      	bhi.n	8008f6a <USBD_StdDevReq+0xbe>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d009      	beq.n	8008ee2 <USBD_StdDevReq+0x36>
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	d14b      	bne.n	8008f6a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4798      	blx	r3
    break;
 8008ee0:	e048      	b.n	8008f74 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d839      	bhi.n	8008f5e <USBD_StdDevReq+0xb2>
 8008eea:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <USBD_StdDevReq+0x44>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f41 	.word	0x08008f41
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f5f 	.word	0x08008f5f
 8008efc:	08008f4b 	.word	0x08008f4b
 8008f00:	08008f5f 	.word	0x08008f5f
 8008f04:	08008f23 	.word	0x08008f23
 8008f08:	08008f19 	.word	0x08008f19
 8008f0c:	08008f5f 	.word	0x08008f5f
 8008f10:	08008f37 	.word	0x08008f37
 8008f14:	08008f2d 	.word	0x08008f2d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f9da 	bl	80092d4 <USBD_GetDescriptor>
      break;
 8008f20:	e022      	b.n	8008f68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 facf 	bl	80094c8 <USBD_SetAddress>
      break;
 8008f2a:	e01d      	b.n	8008f68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fb0e 	bl	8009550 <USBD_SetConfig>
      break;
 8008f34:	e018      	b.n	8008f68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fb97 	bl	800966c <USBD_GetConfig>
      break;
 8008f3e:	e013      	b.n	8008f68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fbc7 	bl	80096d6 <USBD_GetStatus>
      break;
 8008f48:	e00e      	b.n	8008f68 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fbf5 	bl	800973c <USBD_SetFeature>
      break;
 8008f52:	e009      	b.n	8008f68 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fc04 	bl	8009764 <USBD_ClrFeature>
      break;
 8008f5c:	e004      	b.n	8008f68 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fc5c 	bl	800981e <USBD_CtlError>
      break;
 8008f66:	bf00      	nop
    }
    break;
 8008f68:	e004      	b.n	8008f74 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fc56 	bl	800981e <USBD_CtlError>
    break;
 8008f72:	bf00      	nop
  }

  return ret;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop

08008f80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f96:	2b40      	cmp	r3, #64	; 0x40
 8008f98:	d005      	beq.n	8008fa6 <USBD_StdItfReq+0x26>
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	d82e      	bhi.n	8008ffc <USBD_StdItfReq+0x7c>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <USBD_StdItfReq+0x26>
 8008fa2:	2b20      	cmp	r3, #32
 8008fa4:	d12a      	bne.n	8008ffc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fac:	3b01      	subs	r3, #1
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d81d      	bhi.n	8008fee <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	889b      	ldrh	r3, [r3, #4]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d813      	bhi.n	8008fe4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	88db      	ldrh	r3, [r3, #6]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d110      	bne.n	8008ff8 <USBD_StdItfReq+0x78>
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10d      	bne.n	8008ff8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fce6 	bl	80099ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008fe2:	e009      	b.n	8008ff8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fc19 	bl	800981e <USBD_CtlError>
      break;
 8008fec:	e004      	b.n	8008ff8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc14 	bl	800981e <USBD_CtlError>
      break;
 8008ff6:	e000      	b.n	8008ffa <USBD_StdItfReq+0x7a>
      break;
 8008ff8:	bf00      	nop
    }
    break;
 8008ffa:	e004      	b.n	8009006 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fc0d 	bl	800981e <USBD_CtlError>
    break;
 8009004:	bf00      	nop
  }

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	889b      	ldrh	r3, [r3, #4]
 8009022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800902c:	2b40      	cmp	r3, #64	; 0x40
 800902e:	d007      	beq.n	8009040 <USBD_StdEPReq+0x30>
 8009030:	2b40      	cmp	r3, #64	; 0x40
 8009032:	f200 8144 	bhi.w	80092be <USBD_StdEPReq+0x2ae>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <USBD_StdEPReq+0x40>
 800903a:	2b20      	cmp	r3, #32
 800903c:	f040 813f 	bne.w	80092be <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
    break;
 800904e:	e13b      	b.n	80092c8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009058:	2b20      	cmp	r3, #32
 800905a:	d10a      	bne.n	8009072 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4798      	blx	r3
 800906a:	4603      	mov	r3, r0
 800906c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	e12b      	b.n	80092ca <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d007      	beq.n	800908a <USBD_StdEPReq+0x7a>
 800907a:	2b03      	cmp	r3, #3
 800907c:	f300 8119 	bgt.w	80092b2 <USBD_StdEPReq+0x2a2>
 8009080:	2b00      	cmp	r3, #0
 8009082:	d072      	beq.n	800916a <USBD_StdEPReq+0x15a>
 8009084:	2b01      	cmp	r3, #1
 8009086:	d03a      	beq.n	80090fe <USBD_StdEPReq+0xee>
 8009088:	e113      	b.n	80092b2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009090:	2b02      	cmp	r3, #2
 8009092:	d002      	beq.n	800909a <USBD_StdEPReq+0x8a>
 8009094:	2b03      	cmp	r3, #3
 8009096:	d015      	beq.n	80090c4 <USBD_StdEPReq+0xb4>
 8009098:	e02b      	b.n	80090f2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00c      	beq.n	80090ba <USBD_StdEPReq+0xaa>
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b80      	cmp	r3, #128	; 0x80
 80090a4:	d009      	beq.n	80090ba <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 f8dc 	bl	800a268 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80090b0:	2180      	movs	r1, #128	; 0x80
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 f8d8 	bl	800a268 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80090b8:	e020      	b.n	80090fc <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fbae 	bl	800981e <USBD_CtlError>
        break;
 80090c2:	e01b      	b.n	80090fc <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	885b      	ldrh	r3, [r3, #2]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10e      	bne.n	80090ea <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <USBD_StdEPReq+0xda>
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	2b80      	cmp	r3, #128	; 0x80
 80090d6:	d008      	beq.n	80090ea <USBD_StdEPReq+0xda>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	88db      	ldrh	r3, [r3, #6]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d104      	bne.n	80090ea <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 f8bf 	bl	800a268 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fc5f 	bl	80099ae <USBD_CtlSendStatus>

        break;
 80090f0:	e004      	b.n	80090fc <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fb92 	bl	800981e <USBD_CtlError>
        break;
 80090fa:	bf00      	nop
      }
      break;
 80090fc:	e0de      	b.n	80092bc <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009104:	2b02      	cmp	r3, #2
 8009106:	d002      	beq.n	800910e <USBD_StdEPReq+0xfe>
 8009108:	2b03      	cmp	r3, #3
 800910a:	d015      	beq.n	8009138 <USBD_StdEPReq+0x128>
 800910c:	e026      	b.n	800915c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00c      	beq.n	800912e <USBD_StdEPReq+0x11e>
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b80      	cmp	r3, #128	; 0x80
 8009118:	d009      	beq.n	800912e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 f8a2 	bl	800a268 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009124:	2180      	movs	r1, #128	; 0x80
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 f89e 	bl	800a268 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800912c:	e01c      	b.n	8009168 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fb74 	bl	800981e <USBD_CtlError>
        break;
 8009136:	e017      	b.n	8009168 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	885b      	ldrh	r3, [r3, #2]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d112      	bne.n	8009166 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009146:	2b00      	cmp	r3, #0
 8009148:	d004      	beq.n	8009154 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 f8a9 	bl	800a2a6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fc2a 	bl	80099ae <USBD_CtlSendStatus>
        }
        break;
 800915a:	e004      	b.n	8009166 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fb5d 	bl	800981e <USBD_CtlError>
        break;
 8009164:	e000      	b.n	8009168 <USBD_StdEPReq+0x158>
        break;
 8009166:	bf00      	nop
      }
      break;
 8009168:	e0a8      	b.n	80092bc <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009170:	2b02      	cmp	r3, #2
 8009172:	d002      	beq.n	800917a <USBD_StdEPReq+0x16a>
 8009174:	2b03      	cmp	r3, #3
 8009176:	d031      	beq.n	80091dc <USBD_StdEPReq+0x1cc>
 8009178:	e095      	b.n	80092a6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d007      	beq.n	8009190 <USBD_StdEPReq+0x180>
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2b80      	cmp	r3, #128	; 0x80
 8009184:	d004      	beq.n	8009190 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb48 	bl	800981e <USBD_CtlError>
          break;
 800918e:	e08f      	b.n	80092b0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	da0b      	bge.n	80091b0 <USBD_StdEPReq+0x1a0>
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	3310      	adds	r3, #16
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	4413      	add	r3, r2
 80091ac:	3304      	adds	r3, #4
 80091ae:	e00a      	b.n	80091c6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	4413      	add	r3, r2
 80091c6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2202      	movs	r2, #2
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fb8c 	bl	80098f2 <USBD_CtlSendData>
          break;
 80091da:	e069      	b.n	80092b0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80091dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	da11      	bge.n	8009208 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	f003 020f 	and.w	r2, r3, #15
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	3318      	adds	r3, #24
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d117      	bne.n	800922e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fb0c 	bl	800981e <USBD_CtlError>
            break;
 8009206:	e053      	b.n	80092b0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	f003 020f 	and.w	r2, r3, #15
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d104      	bne.n	800922e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 faf9 	bl	800981e <USBD_CtlError>
            break;
 800922c:	e040      	b.n	80092b0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800922e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da0b      	bge.n	800924e <USBD_StdEPReq+0x23e>
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800923c:	4613      	mov	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	3310      	adds	r3, #16
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	3304      	adds	r3, #4
 800924c:	e00a      	b.n	8009264 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	4413      	add	r3, r2
 8009264:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <USBD_StdEPReq+0x262>
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b80      	cmp	r3, #128	; 0x80
 8009270:	d103      	bne.n	800927a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	e00e      	b.n	8009298 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f830 	bl	800a2e4 <USBD_LL_IsStallEP>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2201      	movs	r2, #1
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	e002      	b.n	8009298 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2202      	movs	r2, #2
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fb27 	bl	80098f2 <USBD_CtlSendData>
          break;
 80092a4:	e004      	b.n	80092b0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fab8 	bl	800981e <USBD_CtlError>
        break;
 80092ae:	bf00      	nop
      }
      break;
 80092b0:	e004      	b.n	80092bc <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fab2 	bl	800981e <USBD_CtlError>
      break;
 80092ba:	bf00      	nop
    }
    break;
 80092bc:	e004      	b.n	80092c8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 faac 	bl	800981e <USBD_CtlError>
    break;
 80092c6:	bf00      	nop
  }

  return ret;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	f200 80c9 	bhi.w	8009480 <USBD_GetDescriptor+0x1ac>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBD_GetDescriptor+0x20>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009311 	.word	0x08009311
 80092f8:	08009329 	.word	0x08009329
 80092fc:	08009369 	.word	0x08009369
 8009300:	08009481 	.word	0x08009481
 8009304:	08009481 	.word	0x08009481
 8009308:	0800942d 	.word	0x0800942d
 800930c:	08009453 	.word	0x08009453
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 010a 	add.w	r1, r7, #10
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
    break;
 8009326:	e0b0      	b.n	800948a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7c1b      	ldrb	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10d      	bne.n	800934c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f107 020a 	add.w	r2, r7, #10
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	2202      	movs	r2, #2
 8009348:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800934a:	e09e      	b.n	800948a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	f107 020a 	add.w	r2, r7, #10
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	2202      	movs	r2, #2
 8009364:	701a      	strb	r2, [r3, #0]
    break;
 8009366:	e090      	b.n	800948a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	885b      	ldrh	r3, [r3, #2]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b05      	cmp	r3, #5
 8009370:	d856      	bhi.n	8009420 <USBD_GetDescriptor+0x14c>
 8009372:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <USBD_GetDescriptor+0xa4>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	08009391 	.word	0x08009391
 800937c:	080093a9 	.word	0x080093a9
 8009380:	080093c1 	.word	0x080093c1
 8009384:	080093d9 	.word	0x080093d9
 8009388:	080093f1 	.word	0x080093f1
 800938c:	08009409 	.word	0x08009409
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	7c12      	ldrb	r2, [r2, #16]
 800939c:	f107 010a 	add.w	r1, r7, #10
 80093a0:	4610      	mov	r0, r2
 80093a2:	4798      	blx	r3
 80093a4:	60f8      	str	r0, [r7, #12]
      break;
 80093a6:	e040      	b.n	800942a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7c12      	ldrb	r2, [r2, #16]
 80093b4:	f107 010a 	add.w	r1, r7, #10
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
      break;
 80093be:	e034      	b.n	800942a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	7c12      	ldrb	r2, [r2, #16]
 80093cc:	f107 010a 	add.w	r1, r7, #10
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	60f8      	str	r0, [r7, #12]
      break;
 80093d6:	e028      	b.n	800942a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	7c12      	ldrb	r2, [r2, #16]
 80093e4:	f107 010a 	add.w	r1, r7, #10
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
 80093ec:	60f8      	str	r0, [r7, #12]
      break;
 80093ee:	e01c      	b.n	800942a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 010a 	add.w	r1, r7, #10
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
      break;
 8009406:	e010      	b.n	800942a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 010a 	add.w	r1, r7, #10
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
      break;
 800941e:	e004      	b.n	800942a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f9fb 	bl	800981e <USBD_CtlError>
      return;
 8009428:	e04b      	b.n	80094c2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800942a:	e02e      	b.n	800948a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7c1b      	ldrb	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d109      	bne.n	8009448 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	f107 020a 	add.w	r2, r7, #10
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
      break;
 8009446:	e020      	b.n	800948a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9e7 	bl	800981e <USBD_CtlError>
      return;
 8009450:	e037      	b.n	80094c2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	7c1b      	ldrb	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10d      	bne.n	8009476 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	f107 020a 	add.w	r2, r7, #10
 8009466:	4610      	mov	r0, r2
 8009468:	4798      	blx	r3
 800946a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3301      	adds	r3, #1
 8009470:	2207      	movs	r2, #7
 8009472:	701a      	strb	r2, [r3, #0]
      break;
 8009474:	e009      	b.n	800948a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f9d0 	bl	800981e <USBD_CtlError>
      return;
 800947e:	e020      	b.n	80094c2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f9cb 	bl	800981e <USBD_CtlError>
    return;
 8009488:	e01b      	b.n	80094c2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800948a:	897b      	ldrh	r3, [r7, #10]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d011      	beq.n	80094b4 <USBD_GetDescriptor+0x1e0>
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	88db      	ldrh	r3, [r3, #6]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00d      	beq.n	80094b4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	88da      	ldrh	r2, [r3, #6]
 800949c:	897b      	ldrh	r3, [r7, #10]
 800949e:	4293      	cmp	r3, r2
 80094a0:	bf28      	it	cs
 80094a2:	4613      	movcs	r3, r2
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80094a8:	897b      	ldrh	r3, [r7, #10]
 80094aa:	461a      	mov	r2, r3
 80094ac:	68f9      	ldr	r1, [r7, #12]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fa1f 	bl	80098f2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	88db      	ldrh	r3, [r3, #6]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fa76 	bl	80099ae <USBD_CtlSendStatus>
  }
}
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	889b      	ldrh	r3, [r3, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d130      	bne.n	800953c <USBD_SetAddress+0x74>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88db      	ldrh	r3, [r3, #6]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d12c      	bne.n	800953c <USBD_SetAddress+0x74>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	885b      	ldrh	r3, [r3, #2]
 80094e6:	2b7f      	cmp	r3, #127	; 0x7f
 80094e8:	d828      	bhi.n	800953c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	d104      	bne.n	800950a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f98b 	bl	800981e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009508:	e01d      	b.n	8009546 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	7bfa      	ldrb	r2, [r7, #15]
 800950e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 ff10 	bl	800a33c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fa46 	bl	80099ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d004      	beq.n	8009532 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009530:	e009      	b.n	8009546 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953a:	e004      	b.n	8009546 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f96d 	bl	800981e <USBD_CtlError>
  }
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	885b      	ldrh	r3, [r3, #2]
 800955e:	b2da      	uxtb	r2, r3
 8009560:	4b41      	ldr	r3, [pc, #260]	; (8009668 <USBD_SetConfig+0x118>)
 8009562:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009564:	4b40      	ldr	r3, [pc, #256]	; (8009668 <USBD_SetConfig+0x118>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d904      	bls.n	8009576 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f955 	bl	800981e <USBD_CtlError>
 8009574:	e075      	b.n	8009662 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800957c:	2b02      	cmp	r3, #2
 800957e:	d002      	beq.n	8009586 <USBD_SetConfig+0x36>
 8009580:	2b03      	cmp	r3, #3
 8009582:	d023      	beq.n	80095cc <USBD_SetConfig+0x7c>
 8009584:	e062      	b.n	800964c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009586:	4b38      	ldr	r3, [pc, #224]	; (8009668 <USBD_SetConfig+0x118>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01a      	beq.n	80095c4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800958e:	4b36      	ldr	r3, [pc, #216]	; (8009668 <USBD_SetConfig+0x118>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2203      	movs	r2, #3
 800959c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095a0:	4b31      	ldr	r3, [pc, #196]	; (8009668 <USBD_SetConfig+0x118>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fa5d 	bl	8008a66 <USBD_SetClassConfig>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d104      	bne.n	80095bc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f932 	bl	800981e <USBD_CtlError>
          return;
 80095ba:	e052      	b.n	8009662 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f9f6 	bl	80099ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80095c2:	e04e      	b.n	8009662 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f9f2 	bl	80099ae <USBD_CtlSendStatus>
      break;
 80095ca:	e04a      	b.n	8009662 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095cc:	4b26      	ldr	r3, [pc, #152]	; (8009668 <USBD_SetConfig+0x118>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d112      	bne.n	80095fa <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80095dc:	4b22      	ldr	r3, [pc, #136]	; (8009668 <USBD_SetConfig+0x118>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80095e6:	4b20      	ldr	r3, [pc, #128]	; (8009668 <USBD_SetConfig+0x118>)
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fa59 	bl	8008aa4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f9db 	bl	80099ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80095f8:	e033      	b.n	8009662 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80095fa:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <USBD_SetConfig+0x118>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	d01d      	beq.n	8009644 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff fa47 	bl	8008aa4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <USBD_SetConfig+0x118>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009620:	4b11      	ldr	r3, [pc, #68]	; (8009668 <USBD_SetConfig+0x118>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff fa1d 	bl	8008a66 <USBD_SetClassConfig>
 800962c:	4603      	mov	r3, r0
 800962e:	2b02      	cmp	r3, #2
 8009630:	d104      	bne.n	800963c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f8f2 	bl	800981e <USBD_CtlError>
          return;
 800963a:	e012      	b.n	8009662 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f9b6 	bl	80099ae <USBD_CtlSendStatus>
      break;
 8009642:	e00e      	b.n	8009662 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f9b2 	bl	80099ae <USBD_CtlSendStatus>
      break;
 800964a:	e00a      	b.n	8009662 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f8e5 	bl	800981e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009654:	4b04      	ldr	r3, [pc, #16]	; (8009668 <USBD_SetConfig+0x118>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff fa22 	bl	8008aa4 <USBD_ClrClassConfig>
      break;
 8009660:	bf00      	nop
    }
  }
}
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20002e74 	.word	0x20002e74

0800966c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	88db      	ldrh	r3, [r3, #6]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d004      	beq.n	8009688 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f8cc 	bl	800981e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009686:	e022      	b.n	80096ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800968e:	2b02      	cmp	r3, #2
 8009690:	dc02      	bgt.n	8009698 <USBD_GetConfig+0x2c>
 8009692:	2b00      	cmp	r3, #0
 8009694:	dc03      	bgt.n	800969e <USBD_GetConfig+0x32>
 8009696:	e015      	b.n	80096c4 <USBD_GetConfig+0x58>
 8009698:	2b03      	cmp	r3, #3
 800969a:	d00b      	beq.n	80096b4 <USBD_GetConfig+0x48>
 800969c:	e012      	b.n	80096c4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3308      	adds	r3, #8
 80096a8:	2201      	movs	r2, #1
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f920 	bl	80098f2 <USBD_CtlSendData>
      break;
 80096b2:	e00c      	b.n	80096ce <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3304      	adds	r3, #4
 80096b8:	2201      	movs	r2, #1
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f918 	bl	80098f2 <USBD_CtlSendData>
      break;
 80096c2:	e004      	b.n	80096ce <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f8a9 	bl	800981e <USBD_CtlError>
      break;
 80096cc:	bf00      	nop
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096e6:	3b01      	subs	r3, #1
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d81e      	bhi.n	800972a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	88db      	ldrh	r3, [r3, #6]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d004      	beq.n	80096fe <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f891 	bl	800981e <USBD_CtlError>
      break;
 80096fc:	e01a      	b.n	8009734 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d005      	beq.n	800971a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f043 0202 	orr.w	r2, r3, #2
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	330c      	adds	r3, #12
 800971e:	2202      	movs	r2, #2
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f8e5 	bl	80098f2 <USBD_CtlSendData>
    break;
 8009728:	e004      	b.n	8009734 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f876 	bl	800981e <USBD_CtlError>
    break;
 8009732:	bf00      	nop
  }
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d106      	bne.n	800975c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f929 	bl	80099ae <USBD_CtlSendStatus>
  }

}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009774:	3b01      	subs	r3, #1
 8009776:	2b02      	cmp	r3, #2
 8009778:	d80b      	bhi.n	8009792 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d10c      	bne.n	800979c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f90f 	bl	80099ae <USBD_CtlSendStatus>
    }
    break;
 8009790:	e004      	b.n	800979c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f842 	bl	800981e <USBD_CtlError>
    break;
 800979a:	e000      	b.n	800979e <USBD_ClrFeature+0x3a>
    break;
 800979c:	bf00      	nop
  }
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781a      	ldrb	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	785a      	ldrb	r2, [r3, #1]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	3302      	adds	r3, #2
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	3303      	adds	r3, #3
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4413      	add	r3, r2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	3304      	adds	r3, #4
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	3305      	adds	r3, #5
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	4413      	add	r3, r2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	3306      	adds	r3, #6
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b29a      	uxth	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	3307      	adds	r3, #7
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	b29b      	uxth	r3, r3
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	b29b      	uxth	r3, r3
 800980c:	4413      	add	r3, r2
 800980e:	b29a      	uxth	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	80da      	strh	r2, [r3, #6]

}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr

0800981e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009828:	2180      	movs	r1, #128	; 0x80
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fd1c 	bl	800a268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009830:	2100      	movs	r1, #0
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fd18 	bl	800a268 <USBD_LL_StallEP>
}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d032      	beq.n	80098bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f834 	bl	80098c4 <USBD_GetLen>
 800985c:	4603      	mov	r3, r0
 800985e:	3301      	adds	r3, #1
 8009860:	b29b      	uxth	r3, r3
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	b29a      	uxth	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	75fa      	strb	r2, [r7, #23]
 8009870:	461a      	mov	r2, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	4413      	add	r3, r2
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	7812      	ldrb	r2, [r2, #0]
 800987a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	75fa      	strb	r2, [r7, #23]
 8009882:	461a      	mov	r2, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4413      	add	r3, r2
 8009888:	2203      	movs	r2, #3
 800988a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800988c:	e012      	b.n	80098b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	60fa      	str	r2, [r7, #12]
 8009894:	7dfa      	ldrb	r2, [r7, #23]
 8009896:	1c51      	adds	r1, r2, #1
 8009898:	75f9      	strb	r1, [r7, #23]
 800989a:	4611      	mov	r1, r2
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	440a      	add	r2, r1
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	75fa      	strb	r2, [r7, #23]
 80098aa:	461a      	mov	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4413      	add	r3, r2
 80098b0:	2200      	movs	r2, #0
 80098b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e8      	bne.n	800988e <USBD_GetString+0x4e>
    }
  }
}
 80098bc:	bf00      	nop
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80098d0:	e005      	b.n	80098de <USBD_GetLen+0x1a>
    {
        len++;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	3301      	adds	r3, #1
 80098d6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3301      	adds	r3, #1
 80098dc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1f5      	bne.n	80098d2 <USBD_GetLen+0xe>
    }

    return len;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr

080098f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	4613      	mov	r3, r2
 80098fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2202      	movs	r2, #2
 8009904:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009908:	88fa      	ldrh	r2, [r7, #6]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009914:	88fb      	ldrh	r3, [r7, #6]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	2100      	movs	r1, #0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fd2d 	bl	800a37a <USBD_LL_Transmit>

  return USBD_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	4613      	mov	r3, r2
 8009936:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009938:	88fb      	ldrh	r3, [r7, #6]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 fd1b 	bl	800a37a <USBD_LL_Transmit>

  return USBD_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	4613      	mov	r3, r2
 800995a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2203      	movs	r2, #3
 8009960:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009964:	88fa      	ldrh	r2, [r7, #6]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800996c:	88fa      	ldrh	r2, [r7, #6]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	2100      	movs	r1, #0
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fd20 	bl	800a3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	4613      	mov	r3, r2
 8009996:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fd0e 	bl	800a3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2204      	movs	r2, #4
 80099ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099be:	2300      	movs	r3, #0
 80099c0:	2200      	movs	r2, #0
 80099c2:	2100      	movs	r1, #0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fcd8 	bl	800a37a <USBD_LL_Transmit>

  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2205      	movs	r2, #5
 80099e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80099e4:	2300      	movs	r3, #0
 80099e6:	2200      	movs	r2, #0
 80099e8:	2100      	movs	r1, #0
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fce8 	bl	800a3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a00:	2200      	movs	r2, #0
 8009a02:	4912      	ldr	r1, [pc, #72]	; (8009a4c <MX_USB_DEVICE_Init+0x50>)
 8009a04:	4812      	ldr	r0, [pc, #72]	; (8009a50 <MX_USB_DEVICE_Init+0x54>)
 8009a06:	f7fe ffd4 	bl	80089b2 <USBD_Init>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a10:	f7f8 f856 	bl	8001ac0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a14:	490f      	ldr	r1, [pc, #60]	; (8009a54 <MX_USB_DEVICE_Init+0x58>)
 8009a16:	480e      	ldr	r0, [pc, #56]	; (8009a50 <MX_USB_DEVICE_Init+0x54>)
 8009a18:	f7fe fff6 	bl	8008a08 <USBD_RegisterClass>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a22:	f7f8 f84d 	bl	8001ac0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a26:	490c      	ldr	r1, [pc, #48]	; (8009a58 <MX_USB_DEVICE_Init+0x5c>)
 8009a28:	4809      	ldr	r0, [pc, #36]	; (8009a50 <MX_USB_DEVICE_Init+0x54>)
 8009a2a:	f7fe ff27 	bl	800887c <USBD_CDC_RegisterInterface>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a34:	f7f8 f844 	bl	8001ac0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a38:	4805      	ldr	r0, [pc, #20]	; (8009a50 <MX_USB_DEVICE_Init+0x54>)
 8009a3a:	f7fe fffe 	bl	8008a3a <USBD_Start>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a44:	f7f8 f83c 	bl	8001ac0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a48:	bf00      	nop
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	200003f4 	.word	0x200003f4
 8009a50:	20002e78 	.word	0x20002e78
 8009a54:	200002e0 	.word	0x200002e0
 8009a58:	200003e4 	.word	0x200003e4

08009a5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a60:	2200      	movs	r2, #0
 8009a62:	4905      	ldr	r1, [pc, #20]	; (8009a78 <CDC_Init_FS+0x1c>)
 8009a64:	4805      	ldr	r0, [pc, #20]	; (8009a7c <CDC_Init_FS+0x20>)
 8009a66:	f7fe ff1f 	bl	80088a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a6a:	4905      	ldr	r1, [pc, #20]	; (8009a80 <CDC_Init_FS+0x24>)
 8009a6c:	4803      	ldr	r0, [pc, #12]	; (8009a7c <CDC_Init_FS+0x20>)
 8009a6e:	f7fe ff34 	bl	80088da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20003d00 	.word	0x20003d00
 8009a7c:	20002e78 	.word	0x20002e78
 8009a80:	20003500 	.word	0x20003500

08009a84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a84:	b480      	push	{r7}
 8009a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr
	...

08009a94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	2b23      	cmp	r3, #35	; 0x23
 8009aa8:	d84a      	bhi.n	8009b40 <CDC_Control_FS+0xac>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <CDC_Control_FS+0x1c>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009b41 	.word	0x08009b41
 8009ab4:	08009b41 	.word	0x08009b41
 8009ab8:	08009b41 	.word	0x08009b41
 8009abc:	08009b41 	.word	0x08009b41
 8009ac0:	08009b41 	.word	0x08009b41
 8009ac4:	08009b41 	.word	0x08009b41
 8009ac8:	08009b41 	.word	0x08009b41
 8009acc:	08009b41 	.word	0x08009b41
 8009ad0:	08009b41 	.word	0x08009b41
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009b41 	.word	0x08009b41
 8009adc:	08009b41 	.word	0x08009b41
 8009ae0:	08009b41 	.word	0x08009b41
 8009ae4:	08009b41 	.word	0x08009b41
 8009ae8:	08009b41 	.word	0x08009b41
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009b41 	.word	0x08009b41
 8009af4:	08009b41 	.word	0x08009b41
 8009af8:	08009b41 	.word	0x08009b41
 8009afc:	08009b41 	.word	0x08009b41
 8009b00:	08009b41 	.word	0x08009b41
 8009b04:	08009b41 	.word	0x08009b41
 8009b08:	08009b41 	.word	0x08009b41
 8009b0c:	08009b41 	.word	0x08009b41
 8009b10:	08009b41 	.word	0x08009b41
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	08009b41 	.word	0x08009b41
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b41 	.word	0x08009b41
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b41 	.word	0x08009b41
 8009b38:	08009b41 	.word	0x08009b41
 8009b3c:	08009b41 	.word	0x08009b41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b40:	bf00      	nop
  }

  return (USBD_OK);
 8009b42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bc80      	pop	{r7}
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop

08009b50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	e014      	b.n	8009b8a <CDC_Receive_FS+0x3a>
	{
	if (RX_Buffer_Len < MAX_RX_BUFFER_SIZE)
 8009b60:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b68:	d20c      	bcs.n	8009b84 <CDC_Receive_FS+0x34>
	{
	  RX_Buffer[RX_Buffer_Len] = Buf[i];
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	441a      	add	r2, r3
 8009b70:	4b18      	ldr	r3, [pc, #96]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	7811      	ldrb	r1, [r2, #0]
 8009b76:	4a18      	ldr	r2, [pc, #96]	; (8009bd8 <CDC_Receive_FS+0x88>)
 8009b78:	54d1      	strb	r1, [r2, r3]
	  RX_Buffer_Len = RX_Buffer_Len + 1;
 8009b7a:	4b16      	ldr	r3, [pc, #88]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	4a14      	ldr	r2, [pc, #80]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009b82:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	3301      	adds	r3, #1
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d8e5      	bhi.n	8009b60 <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (RX_Buffer_Len > 0 && RX_Buffer[RX_Buffer_Len - 1] == '\n')
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00f      	beq.n	8009bbc <CDC_Receive_FS+0x6c>
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4a0d      	ldr	r2, [pc, #52]	; (8009bd8 <CDC_Receive_FS+0x88>)
 8009ba4:	5cd3      	ldrb	r3, [r2, r3]
 8009ba6:	2b0a      	cmp	r3, #10
 8009ba8:	d108      	bne.n	8009bbc <CDC_Receive_FS+0x6c>
	{
		// Process the received message
		Process_Received_Message(RX_Buffer, RX_Buffer_Len);
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4809      	ldr	r0, [pc, #36]	; (8009bd8 <CDC_Receive_FS+0x88>)
 8009bb2:	f000 f83b 	bl	8009c2c <Process_Received_Message>
		// Clear the receive buffer
		RX_Buffer_Len = 0;
 8009bb6:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <CDC_Receive_FS+0x84>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4807      	ldr	r0, [pc, #28]	; (8009bdc <CDC_Receive_FS+0x8c>)
 8009bc0:	f7fe fe8b 	bl	80088da <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009bc4:	4805      	ldr	r0, [pc, #20]	; (8009bdc <CDC_Receive_FS+0x8c>)
 8009bc6:	f7fe feca 	bl	800895e <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8009bca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	200034fc 	.word	0x200034fc
 8009bd8:	20003114 	.word	0x20003114
 8009bdc:	20002e78 	.word	0x20002e78

08009be0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bf0:	4b0d      	ldr	r3, [pc, #52]	; (8009c28 <CDC_Transmit_FS+0x48>)
 8009bf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009bf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e00b      	b.n	8009c1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c06:	887b      	ldrh	r3, [r7, #2]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	4806      	ldr	r0, [pc, #24]	; (8009c28 <CDC_Transmit_FS+0x48>)
 8009c0e:	f7fe fe4b 	bl	80088a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c12:	4805      	ldr	r0, [pc, #20]	; (8009c28 <CDC_Transmit_FS+0x48>)
 8009c14:	f7fe fe74 	bl	8008900 <USBD_CDC_TransmitPacket>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20002e78 	.word	0x20002e78

08009c2c <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* RX_Buffer, uint32_t RX_Buffer_Len)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
	if (strncmp((char*) RX_Buffer, "configure", strlen("configure")) == 0) // if configure
 8009c36:	2209      	movs	r2, #9
 8009c38:	4931      	ldr	r1, [pc, #196]	; (8009d00 <Process_Received_Message+0xd4>)
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fc99 	bl	800a572 <strncmp>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <Process_Received_Message+0x28>
	{
		Configure(RX_Buffer, RX_Buffer_Len);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7f6 fedf 	bl	8000a0c <Configure>
		Print_Message();
 8009c4e:	f7f7 fccd 	bl	80015ec <Print_Message>
 8009c52:	e050      	b.n	8009cf6 <Process_Received_Message+0xca>
	}
	else if (strncmp((char*) RX_Buffer, "transmit", strlen("transmit")) == 0)
 8009c54:	2208      	movs	r2, #8
 8009c56:	492b      	ldr	r1, [pc, #172]	; (8009d04 <Process_Received_Message+0xd8>)
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fc8a 	bl	800a572 <strncmp>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <Process_Received_Message+0x46>
	{
		Transmit(RX_Buffer, RX_Buffer_Len);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7f7 f812 	bl	8000c90 <Transmit>
		Print_Message();
 8009c6c:	f7f7 fcbe 	bl	80015ec <Print_Message>
 8009c70:	e041      	b.n	8009cf6 <Process_Received_Message+0xca>
	}
	else if (strncmp((char*) RX_Buffer, "receive", strlen("receive")) == 0)
 8009c72:	2207      	movs	r2, #7
 8009c74:	4924      	ldr	r1, [pc, #144]	; (8009d08 <Process_Received_Message+0xdc>)
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fc7b 	bl	800a572 <strncmp>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <Process_Received_Message+0x64>
	{
		Receive(RX_Buffer, RX_Buffer_Len);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7f7 f8a5 	bl	8000dd4 <Receive>
		Print_Message();
 8009c8a:	f7f7 fcaf 	bl	80015ec <Print_Message>
 8009c8e:	e032      	b.n	8009cf6 <Process_Received_Message+0xca>
	}
	else if (strncmp((char*) RX_Buffer, "status", strlen("status")) == 0)
 8009c90:	2206      	movs	r2, #6
 8009c92:	491e      	ldr	r1, [pc, #120]	; (8009d0c <Process_Received_Message+0xe0>)
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fc6c 	bl	800a572 <strncmp>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d106      	bne.n	8009cae <Process_Received_Message+0x82>
	{
		Status(RX_Buffer, RX_Buffer_Len);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7f7 f91c 	bl	8000ee0 <Status>
		Print_Message();
 8009ca8:	f7f7 fca0 	bl	80015ec <Print_Message>
 8009cac:	e023      	b.n	8009cf6 <Process_Received_Message+0xca>
	}
	else if (strncmp((char*) RX_Buffer, "register", strlen("register")) == 0)
 8009cae:	2208      	movs	r2, #8
 8009cb0:	4917      	ldr	r1, [pc, #92]	; (8009d10 <Process_Received_Message+0xe4>)
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fc5d 	bl	800a572 <strncmp>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d106      	bne.n	8009ccc <Process_Received_Message+0xa0>
	{
		Register_Access(RX_Buffer, RX_Buffer_Len);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7f7 f947 	bl	8000f54 <Register_Access>
		Print_Message();
 8009cc6:	f7f7 fc91 	bl	80015ec <Print_Message>
 8009cca:	e014      	b.n	8009cf6 <Process_Received_Message+0xca>
	}
	else if (strncmp((char*) RX_Buffer, "command", strlen("command")) == 0)
 8009ccc:	2207      	movs	r2, #7
 8009cce:	4911      	ldr	r1, [pc, #68]	; (8009d14 <Process_Received_Message+0xe8>)
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fc4e 	bl	800a572 <strncmp>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d106      	bne.n	8009cea <Process_Received_Message+0xbe>
	{
		Command(RX_Buffer, RX_Buffer_Len);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7f7 fc9a 	bl	8001618 <Command>
		Print_Message();
 8009ce4:	f7f7 fc82 	bl	80015ec <Print_Message>
 8009ce8:	e005      	b.n	8009cf6 <Process_Received_Message+0xca>
	}
	else
	{
		CDC_Transmit_FS(RX_Buffer, RX_Buffer_Len);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff ff75 	bl	8009be0 <CDC_Transmit_FS>
	}
	return 0;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	0800c004 	.word	0x0800c004
 8009d04:	0800c010 	.word	0x0800c010
 8009d08:	0800c01c 	.word	0x0800c01c
 8009d0c:	0800c024 	.word	0x0800c024
 8009d10:	0800c02c 	.word	0x0800c02c
 8009d14:	0800c038 	.word	0x0800c038

08009d18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2212      	movs	r2, #18
 8009d28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d2a:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bc80      	pop	{r7}
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	20000410 	.word	0x20000410

08009d3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	6039      	str	r1, [r7, #0]
 8009d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2204      	movs	r2, #4
 8009d4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bc80      	pop	{r7}
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	20000424 	.word	0x20000424

08009d60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d6c:	79fb      	ldrb	r3, [r7, #7]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d105      	bne.n	8009d7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4907      	ldr	r1, [pc, #28]	; (8009d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d76:	4808      	ldr	r0, [pc, #32]	; (8009d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d78:	f7ff fd62 	bl	8009840 <USBD_GetString>
 8009d7c:	e004      	b.n	8009d88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	4904      	ldr	r1, [pc, #16]	; (8009d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d82:	4805      	ldr	r0, [pc, #20]	; (8009d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d84:	f7ff fd5c 	bl	8009840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d88:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20004500 	.word	0x20004500
 8009d98:	0800c040 	.word	0x0800c040

08009d9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	4904      	ldr	r1, [pc, #16]	; (8009dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009dac:	4804      	ldr	r0, [pc, #16]	; (8009dc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009dae:	f7ff fd47 	bl	8009840 <USBD_GetString>
  return USBD_StrDesc;
 8009db2:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20004500 	.word	0x20004500
 8009dc0:	0800c058 	.word	0x0800c058

08009dc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	6039      	str	r1, [r7, #0]
 8009dce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	221a      	movs	r2, #26
 8009dd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dd6:	f000 f843 	bl	8009e60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dda:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20000428 	.word	0x20000428

08009de8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	6039      	str	r1, [r7, #0]
 8009df2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d105      	bne.n	8009e06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	4907      	ldr	r1, [pc, #28]	; (8009e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dfe:	4808      	ldr	r0, [pc, #32]	; (8009e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e00:	f7ff fd1e 	bl	8009840 <USBD_GetString>
 8009e04:	e004      	b.n	8009e10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	4904      	ldr	r1, [pc, #16]	; (8009e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e0a:	4805      	ldr	r0, [pc, #20]	; (8009e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e0c:	f7ff fd18 	bl	8009840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e10:	4b02      	ldr	r3, [pc, #8]	; (8009e1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20004500 	.word	0x20004500
 8009e20:	0800c06c 	.word	0x0800c06c

08009e24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	6039      	str	r1, [r7, #0]
 8009e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d105      	bne.n	8009e42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	4907      	ldr	r1, [pc, #28]	; (8009e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e3a:	4808      	ldr	r0, [pc, #32]	; (8009e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e3c:	f7ff fd00 	bl	8009840 <USBD_GetString>
 8009e40:	e004      	b.n	8009e4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	4904      	ldr	r1, [pc, #16]	; (8009e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e46:	4805      	ldr	r0, [pc, #20]	; (8009e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e48:	f7ff fcfa 	bl	8009840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e4c:	4b02      	ldr	r3, [pc, #8]	; (8009e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20004500 	.word	0x20004500
 8009e5c:	0800c078 	.word	0x0800c078

08009e60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e66:	4b0f      	ldr	r3, [pc, #60]	; (8009ea4 <Get_SerialNum+0x44>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ea8 <Get_SerialNum+0x48>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e72:	4b0e      	ldr	r3, [pc, #56]	; (8009eac <Get_SerialNum+0x4c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e86:	2208      	movs	r2, #8
 8009e88:	4909      	ldr	r1, [pc, #36]	; (8009eb0 <Get_SerialNum+0x50>)
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 f814 	bl	8009eb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e90:	2204      	movs	r2, #4
 8009e92:	4908      	ldr	r1, [pc, #32]	; (8009eb4 <Get_SerialNum+0x54>)
 8009e94:	68b8      	ldr	r0, [r7, #8]
 8009e96:	f000 f80f 	bl	8009eb8 <IntToUnicode>
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	1ff800d0 	.word	0x1ff800d0
 8009ea8:	1ff800d4 	.word	0x1ff800d4
 8009eac:	1ff800d8 	.word	0x1ff800d8
 8009eb0:	2000042a 	.word	0x2000042a
 8009eb4:	2000043a 	.word	0x2000043a

08009eb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]
 8009ece:	e027      	b.n	8009f20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	0f1b      	lsrs	r3, r3, #28
 8009ed4:	2b09      	cmp	r3, #9
 8009ed6:	d80b      	bhi.n	8009ef0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	0f1b      	lsrs	r3, r3, #28
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	005b      	lsls	r3, r3, #1
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	440b      	add	r3, r1
 8009ee8:	3230      	adds	r2, #48	; 0x30
 8009eea:	b2d2      	uxtb	r2, r2
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	e00a      	b.n	8009f06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	0f1b      	lsrs	r3, r3, #28
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	4619      	mov	r1, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	440b      	add	r3, r1
 8009f00:	3237      	adds	r2, #55	; 0x37
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	3301      	adds	r3, #1
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	4413      	add	r3, r2
 8009f16:	2200      	movs	r2, #0
 8009f18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	75fb      	strb	r3, [r7, #23]
 8009f20:	7dfa      	ldrb	r2, [r7, #23]
 8009f22:	79fb      	ldrb	r3, [r7, #7]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d3d3      	bcc.n	8009ed0 <IntToUnicode+0x18>
  }
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bc80      	pop	{r7}
 8009f32:	4770      	bx	lr

08009f34 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d106      	bne.n	8009f54 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	4a08      	ldr	r2, [pc, #32]	; (8009f6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009f4c:	f043 0301 	orr.w	r3, r3, #1
 8009f50:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009f52:	e005      	b.n	8009f60 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4a04      	ldr	r2, [pc, #16]	; (8009f6c <HAL_PCDEx_SetConnectionState+0x38>)
 8009f5a:	f023 0301 	bic.w	r3, r3, #1
 8009f5e:	6053      	str	r3, [r2, #4]
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bc80      	pop	{r7}
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	40010000 	.word	0x40010000

08009f70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a0d      	ldr	r2, [pc, #52]	; (8009fb4 <HAL_PCD_MspInit+0x44>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d113      	bne.n	8009faa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f82:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <HAL_PCD_MspInit+0x48>)
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	4a0c      	ldr	r2, [pc, #48]	; (8009fb8 <HAL_PCD_MspInit+0x48>)
 8009f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f8c:	6253      	str	r3, [r2, #36]	; 0x24
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <HAL_PCD_MspInit+0x48>)
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	2014      	movs	r0, #20
 8009fa0:	f7f8 f8e5 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009fa4:	2014      	movs	r0, #20
 8009fa6:	f7f8 f8fe 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	40005c00 	.word	0x40005c00
 8009fb8:	40023800 	.word	0x40023800

08009fbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	f7fe fd79 	bl	8008aca <USBD_LL_SetupStage>
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ff2:	78fa      	ldrb	r2, [r7, #3]
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	440b      	add	r3, r1
 800a000:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	4619      	mov	r1, r3
 800a00a:	f7fe fdab 	bl	8008b64 <USBD_LL_DataOutStage>
}
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b082      	sub	sp, #8
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	460b      	mov	r3, r1
 800a020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a028:	78fa      	ldrb	r2, [r7, #3]
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	440b      	add	r3, r1
 800a036:	333c      	adds	r3, #60	; 0x3c
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	78fb      	ldrb	r3, [r7, #3]
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7fe fe02 	bl	8008c46 <USBD_LL_DataInStage>
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fe ff0d 	bl	8008e78 <USBD_LL_SOF>
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a06e:	2301      	movs	r3, #1
 800a070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d001      	beq.n	800a07e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a07a:	f7f7 fd21 	bl	8001ac0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a084:	7bfa      	ldrb	r2, [r7, #15]
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe fec2 	bl	8008e12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fe7b 	bl	8008d90 <USBD_LL_Reset>
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe febc 	bl	8008e30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <HAL_PCD_SuspendCallback+0x30>)
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	4a03      	ldr	r2, [pc, #12]	; (800a0d4 <HAL_PCD_SuspendCallback+0x30>)
 800a0c6:	f043 0306 	orr.w	r3, r3, #6
 800a0ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	e000ed00 	.word	0xe000ed00

0800a0d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe feb6 	bl	8008e58 <USBD_LL_Resume>
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a0fc:	4a28      	ldr	r2, [pc, #160]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a26      	ldr	r2, [pc, #152]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a108:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800a10c:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a10e:	4a25      	ldr	r2, [pc, #148]	; (800a1a4 <USBD_LL_Init+0xb0>)
 800a110:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a112:	4b23      	ldr	r3, [pc, #140]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a114:	2208      	movs	r2, #8
 800a116:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a118:	4b21      	ldr	r3, [pc, #132]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a11a:	2202      	movs	r2, #2
 800a11c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a11e:	4b20      	ldr	r3, [pc, #128]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a120:	2202      	movs	r2, #2
 800a122:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a124:	4b1e      	ldr	r3, [pc, #120]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a126:	2200      	movs	r2, #0
 800a128:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a12a:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a130:	481b      	ldr	r0, [pc, #108]	; (800a1a0 <USBD_LL_Init+0xac>)
 800a132:	f7f8 fa13 	bl	800255c <HAL_PCD_Init>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a13c:	f7f7 fcc0 	bl	8001ac0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a146:	2318      	movs	r3, #24
 800a148:	2200      	movs	r2, #0
 800a14a:	2100      	movs	r1, #0
 800a14c:	f7f9 fdf0 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a156:	2358      	movs	r3, #88	; 0x58
 800a158:	2200      	movs	r2, #0
 800a15a:	2180      	movs	r1, #128	; 0x80
 800a15c:	f7f9 fde8 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a166:	23c0      	movs	r3, #192	; 0xc0
 800a168:	2200      	movs	r2, #0
 800a16a:	2181      	movs	r1, #129	; 0x81
 800a16c:	f7f9 fde0 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a176:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a17a:	2200      	movs	r2, #0
 800a17c:	2101      	movs	r1, #1
 800a17e:	f7f9 fdd7 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a18c:	2200      	movs	r2, #0
 800a18e:	2182      	movs	r1, #130	; 0x82
 800a190:	f7f9 fdce 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20004700 	.word	0x20004700
 800a1a4:	40005c00 	.word	0x40005c00

0800a1a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f8 faaa 	bl	8002718 <HAL_PCD_Start>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f944 	bl	800a458 <USBD_Get_USB_Status>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	4608      	mov	r0, r1
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	70fb      	strb	r3, [r7, #3]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70bb      	strb	r3, [r7, #2]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a206:	78bb      	ldrb	r3, [r7, #2]
 800a208:	883a      	ldrh	r2, [r7, #0]
 800a20a:	78f9      	ldrb	r1, [r7, #3]
 800a20c:	f7f8 fbc6 	bl	800299c <HAL_PCD_EP_Open>
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4618      	mov	r0, r3
 800a218:	f000 f91e 	bl	800a458 <USBD_Get_USB_Status>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a220:	7bbb      	ldrb	r3, [r7, #14]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	4611      	mov	r1, r2
 800a248:	4618      	mov	r0, r3
 800a24a:	f7f8 fc0d 	bl	8002a68 <HAL_PCD_EP_Close>
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	4618      	mov	r0, r3
 800a256:	f000 f8ff 	bl	800a458 <USBD_Get_USB_Status>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a282:	78fa      	ldrb	r2, [r7, #3]
 800a284:	4611      	mov	r1, r2
 800a286:	4618      	mov	r0, r3
 800a288:	f7f8 fccd 	bl	8002c26 <HAL_PCD_EP_SetStall>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f8e0 	bl	800a458 <USBD_Get_USB_Status>
 800a298:	4603      	mov	r3, r0
 800a29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a2c0:	78fa      	ldrb	r2, [r7, #3]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f8 fd00 	bl	8002cca <HAL_PCD_EP_ClrStall>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 f8c1 	bl	800a458 <USBD_Get_USB_Status>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a2f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	da0c      	bge.n	800a31a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a306:	68f9      	ldr	r1, [r7, #12]
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	4613      	mov	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	440b      	add	r3, r1
 800a314:	3302      	adds	r3, #2
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	e00b      	b.n	800a332 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a320:	68f9      	ldr	r1, [r7, #12]
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	440b      	add	r3, r1
 800a32c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a330:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr

0800a33c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a356:	78fa      	ldrb	r2, [r7, #3]
 800a358:	4611      	mov	r1, r2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7f8 faf9 	bl	8002952 <HAL_PCD_SetAddress>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f876 	bl	800a458 <USBD_Get_USB_Status>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a370:	7bbb      	ldrb	r3, [r7, #14]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b086      	sub	sp, #24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	461a      	mov	r2, r3
 800a386:	460b      	mov	r3, r1
 800a388:	72fb      	strb	r3, [r7, #11]
 800a38a:	4613      	mov	r3, r2
 800a38c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a39c:	893b      	ldrh	r3, [r7, #8]
 800a39e:	7af9      	ldrb	r1, [r7, #11]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	f7f8 fbfd 	bl	8002ba0 <HAL_PCD_EP_Transmit>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 f853 	bl	800a458 <USBD_Get_USB_Status>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	607a      	str	r2, [r7, #4]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	72fb      	strb	r3, [r7, #11]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a3e2:	893b      	ldrh	r3, [r7, #8]
 800a3e4:	7af9      	ldrb	r1, [r7, #11]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	f7f8 fb86 	bl	8002af8 <HAL_PCD_EP_Receive>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 f830 	bl	800a458 <USBD_Get_USB_Status>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a418:	78fa      	ldrb	r2, [r7, #3]
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7f8 fba8 	bl	8002b72 <HAL_PCD_EP_GetRxCount>
 800a422:	4603      	mov	r3, r0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a434:	4b02      	ldr	r3, [pc, #8]	; (800a440 <USBD_static_malloc+0x14>)
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr
 800a440:	200049ec 	.word	0x200049ec

0800a444 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]

}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	bc80      	pop	{r7}
 800a454:	4770      	bx	lr
	...

0800a458 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d817      	bhi.n	800a49c <USBD_Get_USB_Status+0x44>
 800a46c:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <USBD_Get_USB_Status+0x1c>)
 800a46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a472:	bf00      	nop
 800a474:	0800a485 	.word	0x0800a485
 800a478:	0800a48b 	.word	0x0800a48b
 800a47c:	0800a491 	.word	0x0800a491
 800a480:	0800a497 	.word	0x0800a497
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
    break;
 800a488:	e00b      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a48a:	2302      	movs	r3, #2
 800a48c:	73fb      	strb	r3, [r7, #15]
    break;
 800a48e:	e008      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a490:	2301      	movs	r3, #1
 800a492:	73fb      	strb	r3, [r7, #15]
    break;
 800a494:	e005      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a496:	2302      	movs	r3, #2
 800a498:	73fb      	strb	r3, [r7, #15]
    break;
 800a49a:	e002      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a49c:	2302      	movs	r3, #2
 800a49e:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a0:	bf00      	nop
  }
  return usb_status;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop

0800a4b0 <__errno>:
 800a4b0:	4b01      	ldr	r3, [pc, #4]	; (800a4b8 <__errno+0x8>)
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20000444 	.word	0x20000444

0800a4bc <__libc_init_array>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	2600      	movs	r6, #0
 800a4c0:	4d0c      	ldr	r5, [pc, #48]	; (800a4f4 <__libc_init_array+0x38>)
 800a4c2:	4c0d      	ldr	r4, [pc, #52]	; (800a4f8 <__libc_init_array+0x3c>)
 800a4c4:	1b64      	subs	r4, r4, r5
 800a4c6:	10a4      	asrs	r4, r4, #2
 800a4c8:	42a6      	cmp	r6, r4
 800a4ca:	d109      	bne.n	800a4e0 <__libc_init_array+0x24>
 800a4cc:	f001 fb04 	bl	800bad8 <_init>
 800a4d0:	2600      	movs	r6, #0
 800a4d2:	4d0a      	ldr	r5, [pc, #40]	; (800a4fc <__libc_init_array+0x40>)
 800a4d4:	4c0a      	ldr	r4, [pc, #40]	; (800a500 <__libc_init_array+0x44>)
 800a4d6:	1b64      	subs	r4, r4, r5
 800a4d8:	10a4      	asrs	r4, r4, #2
 800a4da:	42a6      	cmp	r6, r4
 800a4dc:	d105      	bne.n	800a4ea <__libc_init_array+0x2e>
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e4:	4798      	blx	r3
 800a4e6:	3601      	adds	r6, #1
 800a4e8:	e7ee      	b.n	800a4c8 <__libc_init_array+0xc>
 800a4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ee:	4798      	blx	r3
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	e7f2      	b.n	800a4da <__libc_init_array+0x1e>
 800a4f4:	0800c2fc 	.word	0x0800c2fc
 800a4f8:	0800c2fc 	.word	0x0800c2fc
 800a4fc:	0800c2fc 	.word	0x0800c2fc
 800a500:	0800c300 	.word	0x0800c300

0800a504 <memset>:
 800a504:	4603      	mov	r3, r0
 800a506:	4402      	add	r2, r0
 800a508:	4293      	cmp	r3, r2
 800a50a:	d100      	bne.n	800a50e <memset+0xa>
 800a50c:	4770      	bx	lr
 800a50e:	f803 1b01 	strb.w	r1, [r3], #1
 800a512:	e7f9      	b.n	800a508 <memset+0x4>

0800a514 <siprintf>:
 800a514:	b40e      	push	{r1, r2, r3}
 800a516:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a51a:	b500      	push	{lr}
 800a51c:	b09c      	sub	sp, #112	; 0x70
 800a51e:	ab1d      	add	r3, sp, #116	; 0x74
 800a520:	9002      	str	r0, [sp, #8]
 800a522:	9006      	str	r0, [sp, #24]
 800a524:	9107      	str	r1, [sp, #28]
 800a526:	9104      	str	r1, [sp, #16]
 800a528:	4808      	ldr	r0, [pc, #32]	; (800a54c <siprintf+0x38>)
 800a52a:	4909      	ldr	r1, [pc, #36]	; (800a550 <siprintf+0x3c>)
 800a52c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a530:	9105      	str	r1, [sp, #20]
 800a532:	6800      	ldr	r0, [r0, #0]
 800a534:	a902      	add	r1, sp, #8
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	f000 fa82 	bl	800aa40 <_svfiprintf_r>
 800a53c:	2200      	movs	r2, #0
 800a53e:	9b02      	ldr	r3, [sp, #8]
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	b01c      	add	sp, #112	; 0x70
 800a544:	f85d eb04 	ldr.w	lr, [sp], #4
 800a548:	b003      	add	sp, #12
 800a54a:	4770      	bx	lr
 800a54c:	20000444 	.word	0x20000444
 800a550:	ffff0208 	.word	0xffff0208

0800a554 <strcat>:
 800a554:	4602      	mov	r2, r0
 800a556:	b510      	push	{r4, lr}
 800a558:	7814      	ldrb	r4, [r2, #0]
 800a55a:	4613      	mov	r3, r2
 800a55c:	3201      	adds	r2, #1
 800a55e:	2c00      	cmp	r4, #0
 800a560:	d1fa      	bne.n	800a558 <strcat+0x4>
 800a562:	3b01      	subs	r3, #1
 800a564:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a568:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a56c:	2a00      	cmp	r2, #0
 800a56e:	d1f9      	bne.n	800a564 <strcat+0x10>
 800a570:	bd10      	pop	{r4, pc}

0800a572 <strncmp>:
 800a572:	4603      	mov	r3, r0
 800a574:	b510      	push	{r4, lr}
 800a576:	b172      	cbz	r2, 800a596 <strncmp+0x24>
 800a578:	3901      	subs	r1, #1
 800a57a:	1884      	adds	r4, r0, r2
 800a57c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a580:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a584:	4290      	cmp	r0, r2
 800a586:	d101      	bne.n	800a58c <strncmp+0x1a>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d101      	bne.n	800a590 <strncmp+0x1e>
 800a58c:	1a80      	subs	r0, r0, r2
 800a58e:	bd10      	pop	{r4, pc}
 800a590:	2800      	cmp	r0, #0
 800a592:	d1f3      	bne.n	800a57c <strncmp+0xa>
 800a594:	e7fa      	b.n	800a58c <strncmp+0x1a>
 800a596:	4610      	mov	r0, r2
 800a598:	e7f9      	b.n	800a58e <strncmp+0x1c>
	...

0800a59c <strtok>:
 800a59c:	4b16      	ldr	r3, [pc, #88]	; (800a5f8 <strtok+0x5c>)
 800a59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	681f      	ldr	r7, [r3, #0]
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a5a8:	460e      	mov	r6, r1
 800a5aa:	b9ec      	cbnz	r4, 800a5e8 <strtok+0x4c>
 800a5ac:	2050      	movs	r0, #80	; 0x50
 800a5ae:	f000 f907 	bl	800a7c0 <malloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	65b8      	str	r0, [r7, #88]	; 0x58
 800a5b6:	b920      	cbnz	r0, 800a5c2 <strtok+0x26>
 800a5b8:	2157      	movs	r1, #87	; 0x57
 800a5ba:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <strtok+0x60>)
 800a5bc:	4810      	ldr	r0, [pc, #64]	; (800a600 <strtok+0x64>)
 800a5be:	f000 f8cf 	bl	800a760 <__assert_func>
 800a5c2:	e9c0 4400 	strd	r4, r4, [r0]
 800a5c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a5ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a5ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a5d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a5d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a5da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a5de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a5e2:	6184      	str	r4, [r0, #24]
 800a5e4:	7704      	strb	r4, [r0, #28]
 800a5e6:	6244      	str	r4, [r0, #36]	; 0x24
 800a5e8:	4631      	mov	r1, r6
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f4:	f000 b806 	b.w	800a604 <__strtok_r>
 800a5f8:	20000444 	.word	0x20000444
 800a5fc:	0800c0b0 	.word	0x0800c0b0
 800a600:	0800c0c7 	.word	0x0800c0c7

0800a604 <__strtok_r>:
 800a604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a606:	b908      	cbnz	r0, 800a60c <__strtok_r+0x8>
 800a608:	6810      	ldr	r0, [r2, #0]
 800a60a:	b188      	cbz	r0, 800a630 <__strtok_r+0x2c>
 800a60c:	4604      	mov	r4, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	4620      	mov	r0, r4
 800a612:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a616:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a61a:	b91e      	cbnz	r6, 800a624 <__strtok_r+0x20>
 800a61c:	b965      	cbnz	r5, 800a638 <__strtok_r+0x34>
 800a61e:	4628      	mov	r0, r5
 800a620:	6015      	str	r5, [r2, #0]
 800a622:	e005      	b.n	800a630 <__strtok_r+0x2c>
 800a624:	42b5      	cmp	r5, r6
 800a626:	d1f6      	bne.n	800a616 <__strtok_r+0x12>
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1f0      	bne.n	800a60e <__strtok_r+0xa>
 800a62c:	6014      	str	r4, [r2, #0]
 800a62e:	7003      	strb	r3, [r0, #0]
 800a630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a632:	461c      	mov	r4, r3
 800a634:	e00c      	b.n	800a650 <__strtok_r+0x4c>
 800a636:	b915      	cbnz	r5, 800a63e <__strtok_r+0x3a>
 800a638:	460e      	mov	r6, r1
 800a63a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a63e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a642:	42ab      	cmp	r3, r5
 800a644:	d1f7      	bne.n	800a636 <__strtok_r+0x32>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0f3      	beq.n	800a632 <__strtok_r+0x2e>
 800a64a:	2300      	movs	r3, #0
 800a64c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a650:	6014      	str	r4, [r2, #0]
 800a652:	e7ed      	b.n	800a630 <__strtok_r+0x2c>

0800a654 <_strtol_l.constprop.0>:
 800a654:	2b01      	cmp	r3, #1
 800a656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a65a:	4680      	mov	r8, r0
 800a65c:	d001      	beq.n	800a662 <_strtol_l.constprop.0+0xe>
 800a65e:	2b24      	cmp	r3, #36	; 0x24
 800a660:	d906      	bls.n	800a670 <_strtol_l.constprop.0+0x1c>
 800a662:	f7ff ff25 	bl	800a4b0 <__errno>
 800a666:	2316      	movs	r3, #22
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	2000      	movs	r0, #0
 800a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a670:	460d      	mov	r5, r1
 800a672:	4f35      	ldr	r7, [pc, #212]	; (800a748 <_strtol_l.constprop.0+0xf4>)
 800a674:	4628      	mov	r0, r5
 800a676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a67a:	5de6      	ldrb	r6, [r4, r7]
 800a67c:	f016 0608 	ands.w	r6, r6, #8
 800a680:	d1f8      	bne.n	800a674 <_strtol_l.constprop.0+0x20>
 800a682:	2c2d      	cmp	r4, #45	; 0x2d
 800a684:	d12f      	bne.n	800a6e6 <_strtol_l.constprop.0+0x92>
 800a686:	2601      	movs	r6, #1
 800a688:	782c      	ldrb	r4, [r5, #0]
 800a68a:	1c85      	adds	r5, r0, #2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d057      	beq.n	800a740 <_strtol_l.constprop.0+0xec>
 800a690:	2b10      	cmp	r3, #16
 800a692:	d109      	bne.n	800a6a8 <_strtol_l.constprop.0+0x54>
 800a694:	2c30      	cmp	r4, #48	; 0x30
 800a696:	d107      	bne.n	800a6a8 <_strtol_l.constprop.0+0x54>
 800a698:	7828      	ldrb	r0, [r5, #0]
 800a69a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a69e:	2858      	cmp	r0, #88	; 0x58
 800a6a0:	d149      	bne.n	800a736 <_strtol_l.constprop.0+0xe2>
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	786c      	ldrb	r4, [r5, #1]
 800a6a6:	3502      	adds	r5, #2
 800a6a8:	2700      	movs	r7, #0
 800a6aa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a6ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a6b2:	fbbe f9f3 	udiv	r9, lr, r3
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a6bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a6c0:	f1bc 0f09 	cmp.w	ip, #9
 800a6c4:	d814      	bhi.n	800a6f0 <_strtol_l.constprop.0+0x9c>
 800a6c6:	4664      	mov	r4, ip
 800a6c8:	42a3      	cmp	r3, r4
 800a6ca:	dd22      	ble.n	800a712 <_strtol_l.constprop.0+0xbe>
 800a6cc:	2f00      	cmp	r7, #0
 800a6ce:	db1d      	blt.n	800a70c <_strtol_l.constprop.0+0xb8>
 800a6d0:	4581      	cmp	r9, r0
 800a6d2:	d31b      	bcc.n	800a70c <_strtol_l.constprop.0+0xb8>
 800a6d4:	d101      	bne.n	800a6da <_strtol_l.constprop.0+0x86>
 800a6d6:	45a2      	cmp	sl, r4
 800a6d8:	db18      	blt.n	800a70c <_strtol_l.constprop.0+0xb8>
 800a6da:	2701      	movs	r7, #1
 800a6dc:	fb00 4003 	mla	r0, r0, r3, r4
 800a6e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6e4:	e7ea      	b.n	800a6bc <_strtol_l.constprop.0+0x68>
 800a6e6:	2c2b      	cmp	r4, #43	; 0x2b
 800a6e8:	bf04      	itt	eq
 800a6ea:	782c      	ldrbeq	r4, [r5, #0]
 800a6ec:	1c85      	addeq	r5, r0, #2
 800a6ee:	e7cd      	b.n	800a68c <_strtol_l.constprop.0+0x38>
 800a6f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a6f4:	f1bc 0f19 	cmp.w	ip, #25
 800a6f8:	d801      	bhi.n	800a6fe <_strtol_l.constprop.0+0xaa>
 800a6fa:	3c37      	subs	r4, #55	; 0x37
 800a6fc:	e7e4      	b.n	800a6c8 <_strtol_l.constprop.0+0x74>
 800a6fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a702:	f1bc 0f19 	cmp.w	ip, #25
 800a706:	d804      	bhi.n	800a712 <_strtol_l.constprop.0+0xbe>
 800a708:	3c57      	subs	r4, #87	; 0x57
 800a70a:	e7dd      	b.n	800a6c8 <_strtol_l.constprop.0+0x74>
 800a70c:	f04f 37ff 	mov.w	r7, #4294967295
 800a710:	e7e6      	b.n	800a6e0 <_strtol_l.constprop.0+0x8c>
 800a712:	2f00      	cmp	r7, #0
 800a714:	da07      	bge.n	800a726 <_strtol_l.constprop.0+0xd2>
 800a716:	2322      	movs	r3, #34	; 0x22
 800a718:	4670      	mov	r0, lr
 800a71a:	f8c8 3000 	str.w	r3, [r8]
 800a71e:	2a00      	cmp	r2, #0
 800a720:	d0a4      	beq.n	800a66c <_strtol_l.constprop.0+0x18>
 800a722:	1e69      	subs	r1, r5, #1
 800a724:	e005      	b.n	800a732 <_strtol_l.constprop.0+0xde>
 800a726:	b106      	cbz	r6, 800a72a <_strtol_l.constprop.0+0xd6>
 800a728:	4240      	negs	r0, r0
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	d09e      	beq.n	800a66c <_strtol_l.constprop.0+0x18>
 800a72e:	2f00      	cmp	r7, #0
 800a730:	d1f7      	bne.n	800a722 <_strtol_l.constprop.0+0xce>
 800a732:	6011      	str	r1, [r2, #0]
 800a734:	e79a      	b.n	800a66c <_strtol_l.constprop.0+0x18>
 800a736:	2430      	movs	r4, #48	; 0x30
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1b5      	bne.n	800a6a8 <_strtol_l.constprop.0+0x54>
 800a73c:	2308      	movs	r3, #8
 800a73e:	e7b3      	b.n	800a6a8 <_strtol_l.constprop.0+0x54>
 800a740:	2c30      	cmp	r4, #48	; 0x30
 800a742:	d0a9      	beq.n	800a698 <_strtol_l.constprop.0+0x44>
 800a744:	230a      	movs	r3, #10
 800a746:	e7af      	b.n	800a6a8 <_strtol_l.constprop.0+0x54>
 800a748:	0800c161 	.word	0x0800c161

0800a74c <strtol>:
 800a74c:	4613      	mov	r3, r2
 800a74e:	460a      	mov	r2, r1
 800a750:	4601      	mov	r1, r0
 800a752:	4802      	ldr	r0, [pc, #8]	; (800a75c <strtol+0x10>)
 800a754:	6800      	ldr	r0, [r0, #0]
 800a756:	f7ff bf7d 	b.w	800a654 <_strtol_l.constprop.0>
 800a75a:	bf00      	nop
 800a75c:	20000444 	.word	0x20000444

0800a760 <__assert_func>:
 800a760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a762:	4614      	mov	r4, r2
 800a764:	461a      	mov	r2, r3
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <__assert_func+0x2c>)
 800a768:	4605      	mov	r5, r0
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68d8      	ldr	r0, [r3, #12]
 800a76e:	b14c      	cbz	r4, 800a784 <__assert_func+0x24>
 800a770:	4b07      	ldr	r3, [pc, #28]	; (800a790 <__assert_func+0x30>)
 800a772:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a776:	9100      	str	r1, [sp, #0]
 800a778:	462b      	mov	r3, r5
 800a77a:	4906      	ldr	r1, [pc, #24]	; (800a794 <__assert_func+0x34>)
 800a77c:	f000 f80e 	bl	800a79c <fiprintf>
 800a780:	f000 fe1c 	bl	800b3bc <abort>
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <__assert_func+0x38>)
 800a786:	461c      	mov	r4, r3
 800a788:	e7f3      	b.n	800a772 <__assert_func+0x12>
 800a78a:	bf00      	nop
 800a78c:	20000444 	.word	0x20000444
 800a790:	0800c124 	.word	0x0800c124
 800a794:	0800c131 	.word	0x0800c131
 800a798:	0800c15f 	.word	0x0800c15f

0800a79c <fiprintf>:
 800a79c:	b40e      	push	{r1, r2, r3}
 800a79e:	b503      	push	{r0, r1, lr}
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	ab03      	add	r3, sp, #12
 800a7a4:	4805      	ldr	r0, [pc, #20]	; (800a7bc <fiprintf+0x20>)
 800a7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	f000 fa6f 	bl	800ac90 <_vfiprintf_r>
 800a7b2:	b002      	add	sp, #8
 800a7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b8:	b003      	add	sp, #12
 800a7ba:	4770      	bx	lr
 800a7bc:	20000444 	.word	0x20000444

0800a7c0 <malloc>:
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <malloc+0xc>)
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	f000 b86b 	b.w	800a8a0 <_malloc_r>
 800a7ca:	bf00      	nop
 800a7cc:	20000444 	.word	0x20000444

0800a7d0 <_free_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	2900      	cmp	r1, #0
 800a7d6:	d040      	beq.n	800a85a <_free_r+0x8a>
 800a7d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7dc:	1f0c      	subs	r4, r1, #4
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bfb8      	it	lt
 800a7e2:	18e4      	addlt	r4, r4, r3
 800a7e4:	f001 f844 	bl	800b870 <__malloc_lock>
 800a7e8:	4a1c      	ldr	r2, [pc, #112]	; (800a85c <_free_r+0x8c>)
 800a7ea:	6813      	ldr	r3, [r2, #0]
 800a7ec:	b933      	cbnz	r3, 800a7fc <_free_r+0x2c>
 800a7ee:	6063      	str	r3, [r4, #4]
 800a7f0:	6014      	str	r4, [r2, #0]
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7f8:	f001 b840 	b.w	800b87c <__malloc_unlock>
 800a7fc:	42a3      	cmp	r3, r4
 800a7fe:	d908      	bls.n	800a812 <_free_r+0x42>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	1821      	adds	r1, r4, r0
 800a804:	428b      	cmp	r3, r1
 800a806:	bf01      	itttt	eq
 800a808:	6819      	ldreq	r1, [r3, #0]
 800a80a:	685b      	ldreq	r3, [r3, #4]
 800a80c:	1809      	addeq	r1, r1, r0
 800a80e:	6021      	streq	r1, [r4, #0]
 800a810:	e7ed      	b.n	800a7ee <_free_r+0x1e>
 800a812:	461a      	mov	r2, r3
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	b10b      	cbz	r3, 800a81c <_free_r+0x4c>
 800a818:	42a3      	cmp	r3, r4
 800a81a:	d9fa      	bls.n	800a812 <_free_r+0x42>
 800a81c:	6811      	ldr	r1, [r2, #0]
 800a81e:	1850      	adds	r0, r2, r1
 800a820:	42a0      	cmp	r0, r4
 800a822:	d10b      	bne.n	800a83c <_free_r+0x6c>
 800a824:	6820      	ldr	r0, [r4, #0]
 800a826:	4401      	add	r1, r0
 800a828:	1850      	adds	r0, r2, r1
 800a82a:	4283      	cmp	r3, r0
 800a82c:	6011      	str	r1, [r2, #0]
 800a82e:	d1e0      	bne.n	800a7f2 <_free_r+0x22>
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	4401      	add	r1, r0
 800a836:	6011      	str	r1, [r2, #0]
 800a838:	6053      	str	r3, [r2, #4]
 800a83a:	e7da      	b.n	800a7f2 <_free_r+0x22>
 800a83c:	d902      	bls.n	800a844 <_free_r+0x74>
 800a83e:	230c      	movs	r3, #12
 800a840:	602b      	str	r3, [r5, #0]
 800a842:	e7d6      	b.n	800a7f2 <_free_r+0x22>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	1821      	adds	r1, r4, r0
 800a848:	428b      	cmp	r3, r1
 800a84a:	bf01      	itttt	eq
 800a84c:	6819      	ldreq	r1, [r3, #0]
 800a84e:	685b      	ldreq	r3, [r3, #4]
 800a850:	1809      	addeq	r1, r1, r0
 800a852:	6021      	streq	r1, [r4, #0]
 800a854:	6063      	str	r3, [r4, #4]
 800a856:	6054      	str	r4, [r2, #4]
 800a858:	e7cb      	b.n	800a7f2 <_free_r+0x22>
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	20004c0c 	.word	0x20004c0c

0800a860 <sbrk_aligned>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	4e0e      	ldr	r6, [pc, #56]	; (800a89c <sbrk_aligned+0x3c>)
 800a864:	460c      	mov	r4, r1
 800a866:	6831      	ldr	r1, [r6, #0]
 800a868:	4605      	mov	r5, r0
 800a86a:	b911      	cbnz	r1, 800a872 <sbrk_aligned+0x12>
 800a86c:	f000 fcd6 	bl	800b21c <_sbrk_r>
 800a870:	6030      	str	r0, [r6, #0]
 800a872:	4621      	mov	r1, r4
 800a874:	4628      	mov	r0, r5
 800a876:	f000 fcd1 	bl	800b21c <_sbrk_r>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d00a      	beq.n	800a894 <sbrk_aligned+0x34>
 800a87e:	1cc4      	adds	r4, r0, #3
 800a880:	f024 0403 	bic.w	r4, r4, #3
 800a884:	42a0      	cmp	r0, r4
 800a886:	d007      	beq.n	800a898 <sbrk_aligned+0x38>
 800a888:	1a21      	subs	r1, r4, r0
 800a88a:	4628      	mov	r0, r5
 800a88c:	f000 fcc6 	bl	800b21c <_sbrk_r>
 800a890:	3001      	adds	r0, #1
 800a892:	d101      	bne.n	800a898 <sbrk_aligned+0x38>
 800a894:	f04f 34ff 	mov.w	r4, #4294967295
 800a898:	4620      	mov	r0, r4
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	20004c10 	.word	0x20004c10

0800a8a0 <_malloc_r>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	1ccd      	adds	r5, r1, #3
 800a8a6:	f025 0503 	bic.w	r5, r5, #3
 800a8aa:	3508      	adds	r5, #8
 800a8ac:	2d0c      	cmp	r5, #12
 800a8ae:	bf38      	it	cc
 800a8b0:	250c      	movcc	r5, #12
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	db01      	blt.n	800a8bc <_malloc_r+0x1c>
 800a8b8:	42a9      	cmp	r1, r5
 800a8ba:	d905      	bls.n	800a8c8 <_malloc_r+0x28>
 800a8bc:	230c      	movs	r3, #12
 800a8be:	2600      	movs	r6, #0
 800a8c0:	603b      	str	r3, [r7, #0]
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c8:	4e2e      	ldr	r6, [pc, #184]	; (800a984 <_malloc_r+0xe4>)
 800a8ca:	f000 ffd1 	bl	800b870 <__malloc_lock>
 800a8ce:	6833      	ldr	r3, [r6, #0]
 800a8d0:	461c      	mov	r4, r3
 800a8d2:	bb34      	cbnz	r4, 800a922 <_malloc_r+0x82>
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f7ff ffc2 	bl	800a860 <sbrk_aligned>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	4604      	mov	r4, r0
 800a8e0:	d14d      	bne.n	800a97e <_malloc_r+0xde>
 800a8e2:	6834      	ldr	r4, [r6, #0]
 800a8e4:	4626      	mov	r6, r4
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d140      	bne.n	800a96c <_malloc_r+0xcc>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	eb04 0803 	add.w	r8, r4, r3
 800a8f4:	f000 fc92 	bl	800b21c <_sbrk_r>
 800a8f8:	4580      	cmp	r8, r0
 800a8fa:	d13a      	bne.n	800a972 <_malloc_r+0xd2>
 800a8fc:	6821      	ldr	r1, [r4, #0]
 800a8fe:	3503      	adds	r5, #3
 800a900:	1a6d      	subs	r5, r5, r1
 800a902:	f025 0503 	bic.w	r5, r5, #3
 800a906:	3508      	adds	r5, #8
 800a908:	2d0c      	cmp	r5, #12
 800a90a:	bf38      	it	cc
 800a90c:	250c      	movcc	r5, #12
 800a90e:	4638      	mov	r0, r7
 800a910:	4629      	mov	r1, r5
 800a912:	f7ff ffa5 	bl	800a860 <sbrk_aligned>
 800a916:	3001      	adds	r0, #1
 800a918:	d02b      	beq.n	800a972 <_malloc_r+0xd2>
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	442b      	add	r3, r5
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	e00e      	b.n	800a940 <_malloc_r+0xa0>
 800a922:	6822      	ldr	r2, [r4, #0]
 800a924:	1b52      	subs	r2, r2, r5
 800a926:	d41e      	bmi.n	800a966 <_malloc_r+0xc6>
 800a928:	2a0b      	cmp	r2, #11
 800a92a:	d916      	bls.n	800a95a <_malloc_r+0xba>
 800a92c:	1961      	adds	r1, r4, r5
 800a92e:	42a3      	cmp	r3, r4
 800a930:	6025      	str	r5, [r4, #0]
 800a932:	bf18      	it	ne
 800a934:	6059      	strne	r1, [r3, #4]
 800a936:	6863      	ldr	r3, [r4, #4]
 800a938:	bf08      	it	eq
 800a93a:	6031      	streq	r1, [r6, #0]
 800a93c:	5162      	str	r2, [r4, r5]
 800a93e:	604b      	str	r3, [r1, #4]
 800a940:	4638      	mov	r0, r7
 800a942:	f104 060b 	add.w	r6, r4, #11
 800a946:	f000 ff99 	bl	800b87c <__malloc_unlock>
 800a94a:	f026 0607 	bic.w	r6, r6, #7
 800a94e:	1d23      	adds	r3, r4, #4
 800a950:	1af2      	subs	r2, r6, r3
 800a952:	d0b6      	beq.n	800a8c2 <_malloc_r+0x22>
 800a954:	1b9b      	subs	r3, r3, r6
 800a956:	50a3      	str	r3, [r4, r2]
 800a958:	e7b3      	b.n	800a8c2 <_malloc_r+0x22>
 800a95a:	6862      	ldr	r2, [r4, #4]
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	bf0c      	ite	eq
 800a960:	6032      	streq	r2, [r6, #0]
 800a962:	605a      	strne	r2, [r3, #4]
 800a964:	e7ec      	b.n	800a940 <_malloc_r+0xa0>
 800a966:	4623      	mov	r3, r4
 800a968:	6864      	ldr	r4, [r4, #4]
 800a96a:	e7b2      	b.n	800a8d2 <_malloc_r+0x32>
 800a96c:	4634      	mov	r4, r6
 800a96e:	6876      	ldr	r6, [r6, #4]
 800a970:	e7b9      	b.n	800a8e6 <_malloc_r+0x46>
 800a972:	230c      	movs	r3, #12
 800a974:	4638      	mov	r0, r7
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	f000 ff80 	bl	800b87c <__malloc_unlock>
 800a97c:	e7a1      	b.n	800a8c2 <_malloc_r+0x22>
 800a97e:	6025      	str	r5, [r4, #0]
 800a980:	e7de      	b.n	800a940 <_malloc_r+0xa0>
 800a982:	bf00      	nop
 800a984:	20004c0c 	.word	0x20004c0c

0800a988 <__ssputs_r>:
 800a988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98c:	688e      	ldr	r6, [r1, #8]
 800a98e:	4682      	mov	sl, r0
 800a990:	429e      	cmp	r6, r3
 800a992:	460c      	mov	r4, r1
 800a994:	4690      	mov	r8, r2
 800a996:	461f      	mov	r7, r3
 800a998:	d838      	bhi.n	800aa0c <__ssputs_r+0x84>
 800a99a:	898a      	ldrh	r2, [r1, #12]
 800a99c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9a0:	d032      	beq.n	800aa08 <__ssputs_r+0x80>
 800a9a2:	6825      	ldr	r5, [r4, #0]
 800a9a4:	6909      	ldr	r1, [r1, #16]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	eba5 0901 	sub.w	r9, r5, r1
 800a9ac:	6965      	ldr	r5, [r4, #20]
 800a9ae:	444b      	add	r3, r9
 800a9b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9b8:	106d      	asrs	r5, r5, #1
 800a9ba:	429d      	cmp	r5, r3
 800a9bc:	bf38      	it	cc
 800a9be:	461d      	movcc	r5, r3
 800a9c0:	0553      	lsls	r3, r2, #21
 800a9c2:	d531      	bpl.n	800aa28 <__ssputs_r+0xa0>
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7ff ff6b 	bl	800a8a0 <_malloc_r>
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	b950      	cbnz	r0, 800a9e4 <__ssputs_r+0x5c>
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	f8ca 3000 	str.w	r3, [sl]
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e4:	464a      	mov	r2, r9
 800a9e6:	6921      	ldr	r1, [r4, #16]
 800a9e8:	f000 ff1a 	bl	800b820 <memcpy>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	6126      	str	r6, [r4, #16]
 800a9fa:	444e      	add	r6, r9
 800a9fc:	6026      	str	r6, [r4, #0]
 800a9fe:	463e      	mov	r6, r7
 800aa00:	6165      	str	r5, [r4, #20]
 800aa02:	eba5 0509 	sub.w	r5, r5, r9
 800aa06:	60a5      	str	r5, [r4, #8]
 800aa08:	42be      	cmp	r6, r7
 800aa0a:	d900      	bls.n	800aa0e <__ssputs_r+0x86>
 800aa0c:	463e      	mov	r6, r7
 800aa0e:	4632      	mov	r2, r6
 800aa10:	4641      	mov	r1, r8
 800aa12:	6820      	ldr	r0, [r4, #0]
 800aa14:	f000 ff12 	bl	800b83c <memmove>
 800aa18:	68a3      	ldr	r3, [r4, #8]
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	1b9b      	subs	r3, r3, r6
 800aa1e:	60a3      	str	r3, [r4, #8]
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	4433      	add	r3, r6
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	e7db      	b.n	800a9e0 <__ssputs_r+0x58>
 800aa28:	462a      	mov	r2, r5
 800aa2a:	f000 ff2d 	bl	800b888 <_realloc_r>
 800aa2e:	4606      	mov	r6, r0
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d1e1      	bne.n	800a9f8 <__ssputs_r+0x70>
 800aa34:	4650      	mov	r0, sl
 800aa36:	6921      	ldr	r1, [r4, #16]
 800aa38:	f7ff feca 	bl	800a7d0 <_free_r>
 800aa3c:	e7c7      	b.n	800a9ce <__ssputs_r+0x46>
	...

0800aa40 <_svfiprintf_r>:
 800aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	4698      	mov	r8, r3
 800aa46:	898b      	ldrh	r3, [r1, #12]
 800aa48:	4607      	mov	r7, r0
 800aa4a:	061b      	lsls	r3, r3, #24
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	4614      	mov	r4, r2
 800aa50:	b09d      	sub	sp, #116	; 0x74
 800aa52:	d50e      	bpl.n	800aa72 <_svfiprintf_r+0x32>
 800aa54:	690b      	ldr	r3, [r1, #16]
 800aa56:	b963      	cbnz	r3, 800aa72 <_svfiprintf_r+0x32>
 800aa58:	2140      	movs	r1, #64	; 0x40
 800aa5a:	f7ff ff21 	bl	800a8a0 <_malloc_r>
 800aa5e:	6028      	str	r0, [r5, #0]
 800aa60:	6128      	str	r0, [r5, #16]
 800aa62:	b920      	cbnz	r0, 800aa6e <_svfiprintf_r+0x2e>
 800aa64:	230c      	movs	r3, #12
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	e0d1      	b.n	800ac12 <_svfiprintf_r+0x1d2>
 800aa6e:	2340      	movs	r3, #64	; 0x40
 800aa70:	616b      	str	r3, [r5, #20]
 800aa72:	2300      	movs	r3, #0
 800aa74:	9309      	str	r3, [sp, #36]	; 0x24
 800aa76:	2320      	movs	r3, #32
 800aa78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa7c:	2330      	movs	r3, #48	; 0x30
 800aa7e:	f04f 0901 	mov.w	r9, #1
 800aa82:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac2c <_svfiprintf_r+0x1ec>
 800aa8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa8e:	4623      	mov	r3, r4
 800aa90:	469a      	mov	sl, r3
 800aa92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa96:	b10a      	cbz	r2, 800aa9c <_svfiprintf_r+0x5c>
 800aa98:	2a25      	cmp	r2, #37	; 0x25
 800aa9a:	d1f9      	bne.n	800aa90 <_svfiprintf_r+0x50>
 800aa9c:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa0:	d00b      	beq.n	800aaba <_svfiprintf_r+0x7a>
 800aaa2:	465b      	mov	r3, fp
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f7ff ff6d 	bl	800a988 <__ssputs_r>
 800aaae:	3001      	adds	r0, #1
 800aab0:	f000 80aa 	beq.w	800ac08 <_svfiprintf_r+0x1c8>
 800aab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aab6:	445a      	add	r2, fp
 800aab8:	9209      	str	r2, [sp, #36]	; 0x24
 800aaba:	f89a 3000 	ldrb.w	r3, [sl]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 80a2 	beq.w	800ac08 <_svfiprintf_r+0x1c8>
 800aac4:	2300      	movs	r3, #0
 800aac6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aace:	f10a 0a01 	add.w	sl, sl, #1
 800aad2:	9304      	str	r3, [sp, #16]
 800aad4:	9307      	str	r3, [sp, #28]
 800aad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aada:	931a      	str	r3, [sp, #104]	; 0x68
 800aadc:	4654      	mov	r4, sl
 800aade:	2205      	movs	r2, #5
 800aae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae4:	4851      	ldr	r0, [pc, #324]	; (800ac2c <_svfiprintf_r+0x1ec>)
 800aae6:	f000 fe8d 	bl	800b804 <memchr>
 800aaea:	9a04      	ldr	r2, [sp, #16]
 800aaec:	b9d8      	cbnz	r0, 800ab26 <_svfiprintf_r+0xe6>
 800aaee:	06d0      	lsls	r0, r2, #27
 800aaf0:	bf44      	itt	mi
 800aaf2:	2320      	movmi	r3, #32
 800aaf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaf8:	0711      	lsls	r1, r2, #28
 800aafa:	bf44      	itt	mi
 800aafc:	232b      	movmi	r3, #43	; 0x2b
 800aafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab02:	f89a 3000 	ldrb.w	r3, [sl]
 800ab06:	2b2a      	cmp	r3, #42	; 0x2a
 800ab08:	d015      	beq.n	800ab36 <_svfiprintf_r+0xf6>
 800ab0a:	4654      	mov	r4, sl
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f04f 0c0a 	mov.w	ip, #10
 800ab12:	9a07      	ldr	r2, [sp, #28]
 800ab14:	4621      	mov	r1, r4
 800ab16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab1a:	3b30      	subs	r3, #48	; 0x30
 800ab1c:	2b09      	cmp	r3, #9
 800ab1e:	d94e      	bls.n	800abbe <_svfiprintf_r+0x17e>
 800ab20:	b1b0      	cbz	r0, 800ab50 <_svfiprintf_r+0x110>
 800ab22:	9207      	str	r2, [sp, #28]
 800ab24:	e014      	b.n	800ab50 <_svfiprintf_r+0x110>
 800ab26:	eba0 0308 	sub.w	r3, r0, r8
 800ab2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	46a2      	mov	sl, r4
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	e7d2      	b.n	800aadc <_svfiprintf_r+0x9c>
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	1d19      	adds	r1, r3, #4
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	9103      	str	r1, [sp, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	bfbb      	ittet	lt
 800ab42:	425b      	neglt	r3, r3
 800ab44:	f042 0202 	orrlt.w	r2, r2, #2
 800ab48:	9307      	strge	r3, [sp, #28]
 800ab4a:	9307      	strlt	r3, [sp, #28]
 800ab4c:	bfb8      	it	lt
 800ab4e:	9204      	strlt	r2, [sp, #16]
 800ab50:	7823      	ldrb	r3, [r4, #0]
 800ab52:	2b2e      	cmp	r3, #46	; 0x2e
 800ab54:	d10c      	bne.n	800ab70 <_svfiprintf_r+0x130>
 800ab56:	7863      	ldrb	r3, [r4, #1]
 800ab58:	2b2a      	cmp	r3, #42	; 0x2a
 800ab5a:	d135      	bne.n	800abc8 <_svfiprintf_r+0x188>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	3402      	adds	r4, #2
 800ab60:	1d1a      	adds	r2, r3, #4
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	9203      	str	r2, [sp, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	bfb8      	it	lt
 800ab6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab6e:	9305      	str	r3, [sp, #20]
 800ab70:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ac30 <_svfiprintf_r+0x1f0>
 800ab74:	2203      	movs	r2, #3
 800ab76:	4650      	mov	r0, sl
 800ab78:	7821      	ldrb	r1, [r4, #0]
 800ab7a:	f000 fe43 	bl	800b804 <memchr>
 800ab7e:	b140      	cbz	r0, 800ab92 <_svfiprintf_r+0x152>
 800ab80:	2340      	movs	r3, #64	; 0x40
 800ab82:	eba0 000a 	sub.w	r0, r0, sl
 800ab86:	fa03 f000 	lsl.w	r0, r3, r0
 800ab8a:	9b04      	ldr	r3, [sp, #16]
 800ab8c:	3401      	adds	r4, #1
 800ab8e:	4303      	orrs	r3, r0
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab96:	2206      	movs	r2, #6
 800ab98:	4826      	ldr	r0, [pc, #152]	; (800ac34 <_svfiprintf_r+0x1f4>)
 800ab9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab9e:	f000 fe31 	bl	800b804 <memchr>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d038      	beq.n	800ac18 <_svfiprintf_r+0x1d8>
 800aba6:	4b24      	ldr	r3, [pc, #144]	; (800ac38 <_svfiprintf_r+0x1f8>)
 800aba8:	bb1b      	cbnz	r3, 800abf2 <_svfiprintf_r+0x1b2>
 800abaa:	9b03      	ldr	r3, [sp, #12]
 800abac:	3307      	adds	r3, #7
 800abae:	f023 0307 	bic.w	r3, r3, #7
 800abb2:	3308      	adds	r3, #8
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb8:	4433      	add	r3, r6
 800abba:	9309      	str	r3, [sp, #36]	; 0x24
 800abbc:	e767      	b.n	800aa8e <_svfiprintf_r+0x4e>
 800abbe:	460c      	mov	r4, r1
 800abc0:	2001      	movs	r0, #1
 800abc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800abc6:	e7a5      	b.n	800ab14 <_svfiprintf_r+0xd4>
 800abc8:	2300      	movs	r3, #0
 800abca:	f04f 0c0a 	mov.w	ip, #10
 800abce:	4619      	mov	r1, r3
 800abd0:	3401      	adds	r4, #1
 800abd2:	9305      	str	r3, [sp, #20]
 800abd4:	4620      	mov	r0, r4
 800abd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abda:	3a30      	subs	r2, #48	; 0x30
 800abdc:	2a09      	cmp	r2, #9
 800abde:	d903      	bls.n	800abe8 <_svfiprintf_r+0x1a8>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0c5      	beq.n	800ab70 <_svfiprintf_r+0x130>
 800abe4:	9105      	str	r1, [sp, #20]
 800abe6:	e7c3      	b.n	800ab70 <_svfiprintf_r+0x130>
 800abe8:	4604      	mov	r4, r0
 800abea:	2301      	movs	r3, #1
 800abec:	fb0c 2101 	mla	r1, ip, r1, r2
 800abf0:	e7f0      	b.n	800abd4 <_svfiprintf_r+0x194>
 800abf2:	ab03      	add	r3, sp, #12
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	462a      	mov	r2, r5
 800abf8:	4638      	mov	r0, r7
 800abfa:	4b10      	ldr	r3, [pc, #64]	; (800ac3c <_svfiprintf_r+0x1fc>)
 800abfc:	a904      	add	r1, sp, #16
 800abfe:	f3af 8000 	nop.w
 800ac02:	1c42      	adds	r2, r0, #1
 800ac04:	4606      	mov	r6, r0
 800ac06:	d1d6      	bne.n	800abb6 <_svfiprintf_r+0x176>
 800ac08:	89ab      	ldrh	r3, [r5, #12]
 800ac0a:	065b      	lsls	r3, r3, #25
 800ac0c:	f53f af2c 	bmi.w	800aa68 <_svfiprintf_r+0x28>
 800ac10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac12:	b01d      	add	sp, #116	; 0x74
 800ac14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac18:	ab03      	add	r3, sp, #12
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	462a      	mov	r2, r5
 800ac1e:	4638      	mov	r0, r7
 800ac20:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <_svfiprintf_r+0x1fc>)
 800ac22:	a904      	add	r1, sp, #16
 800ac24:	f000 f9d4 	bl	800afd0 <_printf_i>
 800ac28:	e7eb      	b.n	800ac02 <_svfiprintf_r+0x1c2>
 800ac2a:	bf00      	nop
 800ac2c:	0800c261 	.word	0x0800c261
 800ac30:	0800c267 	.word	0x0800c267
 800ac34:	0800c26b 	.word	0x0800c26b
 800ac38:	00000000 	.word	0x00000000
 800ac3c:	0800a989 	.word	0x0800a989

0800ac40 <__sfputc_r>:
 800ac40:	6893      	ldr	r3, [r2, #8]
 800ac42:	b410      	push	{r4}
 800ac44:	3b01      	subs	r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	6093      	str	r3, [r2, #8]
 800ac4a:	da07      	bge.n	800ac5c <__sfputc_r+0x1c>
 800ac4c:	6994      	ldr	r4, [r2, #24]
 800ac4e:	42a3      	cmp	r3, r4
 800ac50:	db01      	blt.n	800ac56 <__sfputc_r+0x16>
 800ac52:	290a      	cmp	r1, #10
 800ac54:	d102      	bne.n	800ac5c <__sfputc_r+0x1c>
 800ac56:	bc10      	pop	{r4}
 800ac58:	f000 baf0 	b.w	800b23c <__swbuf_r>
 800ac5c:	6813      	ldr	r3, [r2, #0]
 800ac5e:	1c58      	adds	r0, r3, #1
 800ac60:	6010      	str	r0, [r2, #0]
 800ac62:	7019      	strb	r1, [r3, #0]
 800ac64:	4608      	mov	r0, r1
 800ac66:	bc10      	pop	{r4}
 800ac68:	4770      	bx	lr

0800ac6a <__sfputs_r>:
 800ac6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	460f      	mov	r7, r1
 800ac70:	4614      	mov	r4, r2
 800ac72:	18d5      	adds	r5, r2, r3
 800ac74:	42ac      	cmp	r4, r5
 800ac76:	d101      	bne.n	800ac7c <__sfputs_r+0x12>
 800ac78:	2000      	movs	r0, #0
 800ac7a:	e007      	b.n	800ac8c <__sfputs_r+0x22>
 800ac7c:	463a      	mov	r2, r7
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac84:	f7ff ffdc 	bl	800ac40 <__sfputc_r>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d1f3      	bne.n	800ac74 <__sfputs_r+0xa>
 800ac8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac90 <_vfiprintf_r>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	460d      	mov	r5, r1
 800ac96:	4614      	mov	r4, r2
 800ac98:	4698      	mov	r8, r3
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	b09d      	sub	sp, #116	; 0x74
 800ac9e:	b118      	cbz	r0, 800aca8 <_vfiprintf_r+0x18>
 800aca0:	6983      	ldr	r3, [r0, #24]
 800aca2:	b90b      	cbnz	r3, 800aca8 <_vfiprintf_r+0x18>
 800aca4:	f000 fca8 	bl	800b5f8 <__sinit>
 800aca8:	4b89      	ldr	r3, [pc, #548]	; (800aed0 <_vfiprintf_r+0x240>)
 800acaa:	429d      	cmp	r5, r3
 800acac:	d11b      	bne.n	800ace6 <_vfiprintf_r+0x56>
 800acae:	6875      	ldr	r5, [r6, #4]
 800acb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acb2:	07d9      	lsls	r1, r3, #31
 800acb4:	d405      	bmi.n	800acc2 <_vfiprintf_r+0x32>
 800acb6:	89ab      	ldrh	r3, [r5, #12]
 800acb8:	059a      	lsls	r2, r3, #22
 800acba:	d402      	bmi.n	800acc2 <_vfiprintf_r+0x32>
 800acbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acbe:	f000 fd39 	bl	800b734 <__retarget_lock_acquire_recursive>
 800acc2:	89ab      	ldrh	r3, [r5, #12]
 800acc4:	071b      	lsls	r3, r3, #28
 800acc6:	d501      	bpl.n	800accc <_vfiprintf_r+0x3c>
 800acc8:	692b      	ldr	r3, [r5, #16]
 800acca:	b9eb      	cbnz	r3, 800ad08 <_vfiprintf_r+0x78>
 800accc:	4629      	mov	r1, r5
 800acce:	4630      	mov	r0, r6
 800acd0:	f000 fb06 	bl	800b2e0 <__swsetup_r>
 800acd4:	b1c0      	cbz	r0, 800ad08 <_vfiprintf_r+0x78>
 800acd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd8:	07dc      	lsls	r4, r3, #31
 800acda:	d50e      	bpl.n	800acfa <_vfiprintf_r+0x6a>
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	b01d      	add	sp, #116	; 0x74
 800ace2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace6:	4b7b      	ldr	r3, [pc, #492]	; (800aed4 <_vfiprintf_r+0x244>)
 800ace8:	429d      	cmp	r5, r3
 800acea:	d101      	bne.n	800acf0 <_vfiprintf_r+0x60>
 800acec:	68b5      	ldr	r5, [r6, #8]
 800acee:	e7df      	b.n	800acb0 <_vfiprintf_r+0x20>
 800acf0:	4b79      	ldr	r3, [pc, #484]	; (800aed8 <_vfiprintf_r+0x248>)
 800acf2:	429d      	cmp	r5, r3
 800acf4:	bf08      	it	eq
 800acf6:	68f5      	ldreq	r5, [r6, #12]
 800acf8:	e7da      	b.n	800acb0 <_vfiprintf_r+0x20>
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	0598      	lsls	r0, r3, #22
 800acfe:	d4ed      	bmi.n	800acdc <_vfiprintf_r+0x4c>
 800ad00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad02:	f000 fd18 	bl	800b736 <__retarget_lock_release_recursive>
 800ad06:	e7e9      	b.n	800acdc <_vfiprintf_r+0x4c>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0c:	2320      	movs	r3, #32
 800ad0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad12:	2330      	movs	r3, #48	; 0x30
 800ad14:	f04f 0901 	mov.w	r9, #1
 800ad18:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad1c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aedc <_vfiprintf_r+0x24c>
 800ad20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad24:	4623      	mov	r3, r4
 800ad26:	469a      	mov	sl, r3
 800ad28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2c:	b10a      	cbz	r2, 800ad32 <_vfiprintf_r+0xa2>
 800ad2e:	2a25      	cmp	r2, #37	; 0x25
 800ad30:	d1f9      	bne.n	800ad26 <_vfiprintf_r+0x96>
 800ad32:	ebba 0b04 	subs.w	fp, sl, r4
 800ad36:	d00b      	beq.n	800ad50 <_vfiprintf_r+0xc0>
 800ad38:	465b      	mov	r3, fp
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7ff ff93 	bl	800ac6a <__sfputs_r>
 800ad44:	3001      	adds	r0, #1
 800ad46:	f000 80aa 	beq.w	800ae9e <_vfiprintf_r+0x20e>
 800ad4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad4c:	445a      	add	r2, fp
 800ad4e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad50:	f89a 3000 	ldrb.w	r3, [sl]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 80a2 	beq.w	800ae9e <_vfiprintf_r+0x20e>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad64:	f10a 0a01 	add.w	sl, sl, #1
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	9307      	str	r3, [sp, #28]
 800ad6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad70:	931a      	str	r3, [sp, #104]	; 0x68
 800ad72:	4654      	mov	r4, sl
 800ad74:	2205      	movs	r2, #5
 800ad76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7a:	4858      	ldr	r0, [pc, #352]	; (800aedc <_vfiprintf_r+0x24c>)
 800ad7c:	f000 fd42 	bl	800b804 <memchr>
 800ad80:	9a04      	ldr	r2, [sp, #16]
 800ad82:	b9d8      	cbnz	r0, 800adbc <_vfiprintf_r+0x12c>
 800ad84:	06d1      	lsls	r1, r2, #27
 800ad86:	bf44      	itt	mi
 800ad88:	2320      	movmi	r3, #32
 800ad8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad8e:	0713      	lsls	r3, r2, #28
 800ad90:	bf44      	itt	mi
 800ad92:	232b      	movmi	r3, #43	; 0x2b
 800ad94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad98:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad9e:	d015      	beq.n	800adcc <_vfiprintf_r+0x13c>
 800ada0:	4654      	mov	r4, sl
 800ada2:	2000      	movs	r0, #0
 800ada4:	f04f 0c0a 	mov.w	ip, #10
 800ada8:	9a07      	ldr	r2, [sp, #28]
 800adaa:	4621      	mov	r1, r4
 800adac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adb0:	3b30      	subs	r3, #48	; 0x30
 800adb2:	2b09      	cmp	r3, #9
 800adb4:	d94e      	bls.n	800ae54 <_vfiprintf_r+0x1c4>
 800adb6:	b1b0      	cbz	r0, 800ade6 <_vfiprintf_r+0x156>
 800adb8:	9207      	str	r2, [sp, #28]
 800adba:	e014      	b.n	800ade6 <_vfiprintf_r+0x156>
 800adbc:	eba0 0308 	sub.w	r3, r0, r8
 800adc0:	fa09 f303 	lsl.w	r3, r9, r3
 800adc4:	4313      	orrs	r3, r2
 800adc6:	46a2      	mov	sl, r4
 800adc8:	9304      	str	r3, [sp, #16]
 800adca:	e7d2      	b.n	800ad72 <_vfiprintf_r+0xe2>
 800adcc:	9b03      	ldr	r3, [sp, #12]
 800adce:	1d19      	adds	r1, r3, #4
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	9103      	str	r1, [sp, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	bfbb      	ittet	lt
 800add8:	425b      	neglt	r3, r3
 800adda:	f042 0202 	orrlt.w	r2, r2, #2
 800adde:	9307      	strge	r3, [sp, #28]
 800ade0:	9307      	strlt	r3, [sp, #28]
 800ade2:	bfb8      	it	lt
 800ade4:	9204      	strlt	r2, [sp, #16]
 800ade6:	7823      	ldrb	r3, [r4, #0]
 800ade8:	2b2e      	cmp	r3, #46	; 0x2e
 800adea:	d10c      	bne.n	800ae06 <_vfiprintf_r+0x176>
 800adec:	7863      	ldrb	r3, [r4, #1]
 800adee:	2b2a      	cmp	r3, #42	; 0x2a
 800adf0:	d135      	bne.n	800ae5e <_vfiprintf_r+0x1ce>
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	3402      	adds	r4, #2
 800adf6:	1d1a      	adds	r2, r3, #4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	9203      	str	r2, [sp, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bfb8      	it	lt
 800ae00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aee0 <_vfiprintf_r+0x250>
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	4650      	mov	r0, sl
 800ae0e:	7821      	ldrb	r1, [r4, #0]
 800ae10:	f000 fcf8 	bl	800b804 <memchr>
 800ae14:	b140      	cbz	r0, 800ae28 <_vfiprintf_r+0x198>
 800ae16:	2340      	movs	r3, #64	; 0x40
 800ae18:	eba0 000a 	sub.w	r0, r0, sl
 800ae1c:	fa03 f000 	lsl.w	r0, r3, r0
 800ae20:	9b04      	ldr	r3, [sp, #16]
 800ae22:	3401      	adds	r4, #1
 800ae24:	4303      	orrs	r3, r0
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2c:	2206      	movs	r2, #6
 800ae2e:	482d      	ldr	r0, [pc, #180]	; (800aee4 <_vfiprintf_r+0x254>)
 800ae30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae34:	f000 fce6 	bl	800b804 <memchr>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d03f      	beq.n	800aebc <_vfiprintf_r+0x22c>
 800ae3c:	4b2a      	ldr	r3, [pc, #168]	; (800aee8 <_vfiprintf_r+0x258>)
 800ae3e:	bb1b      	cbnz	r3, 800ae88 <_vfiprintf_r+0x1f8>
 800ae40:	9b03      	ldr	r3, [sp, #12]
 800ae42:	3307      	adds	r3, #7
 800ae44:	f023 0307 	bic.w	r3, r3, #7
 800ae48:	3308      	adds	r3, #8
 800ae4a:	9303      	str	r3, [sp, #12]
 800ae4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4e:	443b      	add	r3, r7
 800ae50:	9309      	str	r3, [sp, #36]	; 0x24
 800ae52:	e767      	b.n	800ad24 <_vfiprintf_r+0x94>
 800ae54:	460c      	mov	r4, r1
 800ae56:	2001      	movs	r0, #1
 800ae58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae5c:	e7a5      	b.n	800adaa <_vfiprintf_r+0x11a>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f04f 0c0a 	mov.w	ip, #10
 800ae64:	4619      	mov	r1, r3
 800ae66:	3401      	adds	r4, #1
 800ae68:	9305      	str	r3, [sp, #20]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae70:	3a30      	subs	r2, #48	; 0x30
 800ae72:	2a09      	cmp	r2, #9
 800ae74:	d903      	bls.n	800ae7e <_vfiprintf_r+0x1ee>
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0c5      	beq.n	800ae06 <_vfiprintf_r+0x176>
 800ae7a:	9105      	str	r1, [sp, #20]
 800ae7c:	e7c3      	b.n	800ae06 <_vfiprintf_r+0x176>
 800ae7e:	4604      	mov	r4, r0
 800ae80:	2301      	movs	r3, #1
 800ae82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae86:	e7f0      	b.n	800ae6a <_vfiprintf_r+0x1da>
 800ae88:	ab03      	add	r3, sp, #12
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	462a      	mov	r2, r5
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4b16      	ldr	r3, [pc, #88]	; (800aeec <_vfiprintf_r+0x25c>)
 800ae92:	a904      	add	r1, sp, #16
 800ae94:	f3af 8000 	nop.w
 800ae98:	4607      	mov	r7, r0
 800ae9a:	1c78      	adds	r0, r7, #1
 800ae9c:	d1d6      	bne.n	800ae4c <_vfiprintf_r+0x1bc>
 800ae9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea0:	07d9      	lsls	r1, r3, #31
 800aea2:	d405      	bmi.n	800aeb0 <_vfiprintf_r+0x220>
 800aea4:	89ab      	ldrh	r3, [r5, #12]
 800aea6:	059a      	lsls	r2, r3, #22
 800aea8:	d402      	bmi.n	800aeb0 <_vfiprintf_r+0x220>
 800aeaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeac:	f000 fc43 	bl	800b736 <__retarget_lock_release_recursive>
 800aeb0:	89ab      	ldrh	r3, [r5, #12]
 800aeb2:	065b      	lsls	r3, r3, #25
 800aeb4:	f53f af12 	bmi.w	800acdc <_vfiprintf_r+0x4c>
 800aeb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeba:	e711      	b.n	800ace0 <_vfiprintf_r+0x50>
 800aebc:	ab03      	add	r3, sp, #12
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	462a      	mov	r2, r5
 800aec2:	4630      	mov	r0, r6
 800aec4:	4b09      	ldr	r3, [pc, #36]	; (800aeec <_vfiprintf_r+0x25c>)
 800aec6:	a904      	add	r1, sp, #16
 800aec8:	f000 f882 	bl	800afd0 <_printf_i>
 800aecc:	e7e4      	b.n	800ae98 <_vfiprintf_r+0x208>
 800aece:	bf00      	nop
 800aed0:	0800c2b4 	.word	0x0800c2b4
 800aed4:	0800c2d4 	.word	0x0800c2d4
 800aed8:	0800c294 	.word	0x0800c294
 800aedc:	0800c261 	.word	0x0800c261
 800aee0:	0800c267 	.word	0x0800c267
 800aee4:	0800c26b 	.word	0x0800c26b
 800aee8:	00000000 	.word	0x00000000
 800aeec:	0800ac6b 	.word	0x0800ac6b

0800aef0 <_printf_common>:
 800aef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef4:	4616      	mov	r6, r2
 800aef6:	4699      	mov	r9, r3
 800aef8:	688a      	ldr	r2, [r1, #8]
 800aefa:	690b      	ldr	r3, [r1, #16]
 800aefc:	4607      	mov	r7, r0
 800aefe:	4293      	cmp	r3, r2
 800af00:	bfb8      	it	lt
 800af02:	4613      	movlt	r3, r2
 800af04:	6033      	str	r3, [r6, #0]
 800af06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af0a:	460c      	mov	r4, r1
 800af0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af10:	b10a      	cbz	r2, 800af16 <_printf_common+0x26>
 800af12:	3301      	adds	r3, #1
 800af14:	6033      	str	r3, [r6, #0]
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	0699      	lsls	r1, r3, #26
 800af1a:	bf42      	ittt	mi
 800af1c:	6833      	ldrmi	r3, [r6, #0]
 800af1e:	3302      	addmi	r3, #2
 800af20:	6033      	strmi	r3, [r6, #0]
 800af22:	6825      	ldr	r5, [r4, #0]
 800af24:	f015 0506 	ands.w	r5, r5, #6
 800af28:	d106      	bne.n	800af38 <_printf_common+0x48>
 800af2a:	f104 0a19 	add.w	sl, r4, #25
 800af2e:	68e3      	ldr	r3, [r4, #12]
 800af30:	6832      	ldr	r2, [r6, #0]
 800af32:	1a9b      	subs	r3, r3, r2
 800af34:	42ab      	cmp	r3, r5
 800af36:	dc28      	bgt.n	800af8a <_printf_common+0x9a>
 800af38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af3c:	1e13      	subs	r3, r2, #0
 800af3e:	6822      	ldr	r2, [r4, #0]
 800af40:	bf18      	it	ne
 800af42:	2301      	movne	r3, #1
 800af44:	0692      	lsls	r2, r2, #26
 800af46:	d42d      	bmi.n	800afa4 <_printf_common+0xb4>
 800af48:	4649      	mov	r1, r9
 800af4a:	4638      	mov	r0, r7
 800af4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af50:	47c0      	blx	r8
 800af52:	3001      	adds	r0, #1
 800af54:	d020      	beq.n	800af98 <_printf_common+0xa8>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	68e5      	ldr	r5, [r4, #12]
 800af5a:	f003 0306 	and.w	r3, r3, #6
 800af5e:	2b04      	cmp	r3, #4
 800af60:	bf18      	it	ne
 800af62:	2500      	movne	r5, #0
 800af64:	6832      	ldr	r2, [r6, #0]
 800af66:	f04f 0600 	mov.w	r6, #0
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	bf08      	it	eq
 800af6e:	1aad      	subeq	r5, r5, r2
 800af70:	6922      	ldr	r2, [r4, #16]
 800af72:	bf08      	it	eq
 800af74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af78:	4293      	cmp	r3, r2
 800af7a:	bfc4      	itt	gt
 800af7c:	1a9b      	subgt	r3, r3, r2
 800af7e:	18ed      	addgt	r5, r5, r3
 800af80:	341a      	adds	r4, #26
 800af82:	42b5      	cmp	r5, r6
 800af84:	d11a      	bne.n	800afbc <_printf_common+0xcc>
 800af86:	2000      	movs	r0, #0
 800af88:	e008      	b.n	800af9c <_printf_common+0xac>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4652      	mov	r2, sl
 800af8e:	4649      	mov	r1, r9
 800af90:	4638      	mov	r0, r7
 800af92:	47c0      	blx	r8
 800af94:	3001      	adds	r0, #1
 800af96:	d103      	bne.n	800afa0 <_printf_common+0xb0>
 800af98:	f04f 30ff 	mov.w	r0, #4294967295
 800af9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa0:	3501      	adds	r5, #1
 800afa2:	e7c4      	b.n	800af2e <_printf_common+0x3e>
 800afa4:	2030      	movs	r0, #48	; 0x30
 800afa6:	18e1      	adds	r1, r4, r3
 800afa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afac:	1c5a      	adds	r2, r3, #1
 800afae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afb2:	4422      	add	r2, r4
 800afb4:	3302      	adds	r3, #2
 800afb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afba:	e7c5      	b.n	800af48 <_printf_common+0x58>
 800afbc:	2301      	movs	r3, #1
 800afbe:	4622      	mov	r2, r4
 800afc0:	4649      	mov	r1, r9
 800afc2:	4638      	mov	r0, r7
 800afc4:	47c0      	blx	r8
 800afc6:	3001      	adds	r0, #1
 800afc8:	d0e6      	beq.n	800af98 <_printf_common+0xa8>
 800afca:	3601      	adds	r6, #1
 800afcc:	e7d9      	b.n	800af82 <_printf_common+0x92>
	...

0800afd0 <_printf_i>:
 800afd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afd4:	7e0f      	ldrb	r7, [r1, #24]
 800afd6:	4691      	mov	r9, r2
 800afd8:	2f78      	cmp	r7, #120	; 0x78
 800afda:	4680      	mov	r8, r0
 800afdc:	460c      	mov	r4, r1
 800afde:	469a      	mov	sl, r3
 800afe0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afe6:	d807      	bhi.n	800aff8 <_printf_i+0x28>
 800afe8:	2f62      	cmp	r7, #98	; 0x62
 800afea:	d80a      	bhi.n	800b002 <_printf_i+0x32>
 800afec:	2f00      	cmp	r7, #0
 800afee:	f000 80d9 	beq.w	800b1a4 <_printf_i+0x1d4>
 800aff2:	2f58      	cmp	r7, #88	; 0x58
 800aff4:	f000 80a4 	beq.w	800b140 <_printf_i+0x170>
 800aff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800affc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b000:	e03a      	b.n	800b078 <_printf_i+0xa8>
 800b002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b006:	2b15      	cmp	r3, #21
 800b008:	d8f6      	bhi.n	800aff8 <_printf_i+0x28>
 800b00a:	a101      	add	r1, pc, #4	; (adr r1, 800b010 <_printf_i+0x40>)
 800b00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b07d 	.word	0x0800b07d
 800b018:	0800aff9 	.word	0x0800aff9
 800b01c:	0800aff9 	.word	0x0800aff9
 800b020:	0800aff9 	.word	0x0800aff9
 800b024:	0800aff9 	.word	0x0800aff9
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800aff9 	.word	0x0800aff9
 800b030:	0800aff9 	.word	0x0800aff9
 800b034:	0800aff9 	.word	0x0800aff9
 800b038:	0800aff9 	.word	0x0800aff9
 800b03c:	0800b18b 	.word	0x0800b18b
 800b040:	0800b0ad 	.word	0x0800b0ad
 800b044:	0800b16d 	.word	0x0800b16d
 800b048:	0800aff9 	.word	0x0800aff9
 800b04c:	0800aff9 	.word	0x0800aff9
 800b050:	0800b1ad 	.word	0x0800b1ad
 800b054:	0800aff9 	.word	0x0800aff9
 800b058:	0800b0ad 	.word	0x0800b0ad
 800b05c:	0800aff9 	.word	0x0800aff9
 800b060:	0800aff9 	.word	0x0800aff9
 800b064:	0800b175 	.word	0x0800b175
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	1d1a      	adds	r2, r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	602a      	str	r2, [r5, #0]
 800b070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b078:	2301      	movs	r3, #1
 800b07a:	e0a4      	b.n	800b1c6 <_printf_i+0x1f6>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	6829      	ldr	r1, [r5, #0]
 800b080:	0606      	lsls	r6, r0, #24
 800b082:	f101 0304 	add.w	r3, r1, #4
 800b086:	d50a      	bpl.n	800b09e <_printf_i+0xce>
 800b088:	680e      	ldr	r6, [r1, #0]
 800b08a:	602b      	str	r3, [r5, #0]
 800b08c:	2e00      	cmp	r6, #0
 800b08e:	da03      	bge.n	800b098 <_printf_i+0xc8>
 800b090:	232d      	movs	r3, #45	; 0x2d
 800b092:	4276      	negs	r6, r6
 800b094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b098:	230a      	movs	r3, #10
 800b09a:	485e      	ldr	r0, [pc, #376]	; (800b214 <_printf_i+0x244>)
 800b09c:	e019      	b.n	800b0d2 <_printf_i+0x102>
 800b09e:	680e      	ldr	r6, [r1, #0]
 800b0a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	bf18      	it	ne
 800b0a8:	b236      	sxthne	r6, r6
 800b0aa:	e7ef      	b.n	800b08c <_printf_i+0xbc>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	6820      	ldr	r0, [r4, #0]
 800b0b0:	1d19      	adds	r1, r3, #4
 800b0b2:	6029      	str	r1, [r5, #0]
 800b0b4:	0601      	lsls	r1, r0, #24
 800b0b6:	d501      	bpl.n	800b0bc <_printf_i+0xec>
 800b0b8:	681e      	ldr	r6, [r3, #0]
 800b0ba:	e002      	b.n	800b0c2 <_printf_i+0xf2>
 800b0bc:	0646      	lsls	r6, r0, #25
 800b0be:	d5fb      	bpl.n	800b0b8 <_printf_i+0xe8>
 800b0c0:	881e      	ldrh	r6, [r3, #0]
 800b0c2:	2f6f      	cmp	r7, #111	; 0x6f
 800b0c4:	bf0c      	ite	eq
 800b0c6:	2308      	moveq	r3, #8
 800b0c8:	230a      	movne	r3, #10
 800b0ca:	4852      	ldr	r0, [pc, #328]	; (800b214 <_printf_i+0x244>)
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0d2:	6865      	ldr	r5, [r4, #4]
 800b0d4:	2d00      	cmp	r5, #0
 800b0d6:	bfa8      	it	ge
 800b0d8:	6821      	ldrge	r1, [r4, #0]
 800b0da:	60a5      	str	r5, [r4, #8]
 800b0dc:	bfa4      	itt	ge
 800b0de:	f021 0104 	bicge.w	r1, r1, #4
 800b0e2:	6021      	strge	r1, [r4, #0]
 800b0e4:	b90e      	cbnz	r6, 800b0ea <_printf_i+0x11a>
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	d04d      	beq.n	800b186 <_printf_i+0x1b6>
 800b0ea:	4615      	mov	r5, r2
 800b0ec:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0f0:	fb03 6711 	mls	r7, r3, r1, r6
 800b0f4:	5dc7      	ldrb	r7, [r0, r7]
 800b0f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0fa:	4637      	mov	r7, r6
 800b0fc:	42bb      	cmp	r3, r7
 800b0fe:	460e      	mov	r6, r1
 800b100:	d9f4      	bls.n	800b0ec <_printf_i+0x11c>
 800b102:	2b08      	cmp	r3, #8
 800b104:	d10b      	bne.n	800b11e <_printf_i+0x14e>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	07de      	lsls	r6, r3, #31
 800b10a:	d508      	bpl.n	800b11e <_printf_i+0x14e>
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	6861      	ldr	r1, [r4, #4]
 800b110:	4299      	cmp	r1, r3
 800b112:	bfde      	ittt	le
 800b114:	2330      	movle	r3, #48	; 0x30
 800b116:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b11a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b11e:	1b52      	subs	r2, r2, r5
 800b120:	6122      	str	r2, [r4, #16]
 800b122:	464b      	mov	r3, r9
 800b124:	4621      	mov	r1, r4
 800b126:	4640      	mov	r0, r8
 800b128:	f8cd a000 	str.w	sl, [sp]
 800b12c:	aa03      	add	r2, sp, #12
 800b12e:	f7ff fedf 	bl	800aef0 <_printf_common>
 800b132:	3001      	adds	r0, #1
 800b134:	d14c      	bne.n	800b1d0 <_printf_i+0x200>
 800b136:	f04f 30ff 	mov.w	r0, #4294967295
 800b13a:	b004      	add	sp, #16
 800b13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b140:	4834      	ldr	r0, [pc, #208]	; (800b214 <_printf_i+0x244>)
 800b142:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b146:	6829      	ldr	r1, [r5, #0]
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b14e:	6029      	str	r1, [r5, #0]
 800b150:	061d      	lsls	r5, r3, #24
 800b152:	d514      	bpl.n	800b17e <_printf_i+0x1ae>
 800b154:	07df      	lsls	r7, r3, #31
 800b156:	bf44      	itt	mi
 800b158:	f043 0320 	orrmi.w	r3, r3, #32
 800b15c:	6023      	strmi	r3, [r4, #0]
 800b15e:	b91e      	cbnz	r6, 800b168 <_printf_i+0x198>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	f023 0320 	bic.w	r3, r3, #32
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	2310      	movs	r3, #16
 800b16a:	e7af      	b.n	800b0cc <_printf_i+0xfc>
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	f043 0320 	orr.w	r3, r3, #32
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	2378      	movs	r3, #120	; 0x78
 800b176:	4828      	ldr	r0, [pc, #160]	; (800b218 <_printf_i+0x248>)
 800b178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b17c:	e7e3      	b.n	800b146 <_printf_i+0x176>
 800b17e:	0659      	lsls	r1, r3, #25
 800b180:	bf48      	it	mi
 800b182:	b2b6      	uxthmi	r6, r6
 800b184:	e7e6      	b.n	800b154 <_printf_i+0x184>
 800b186:	4615      	mov	r5, r2
 800b188:	e7bb      	b.n	800b102 <_printf_i+0x132>
 800b18a:	682b      	ldr	r3, [r5, #0]
 800b18c:	6826      	ldr	r6, [r4, #0]
 800b18e:	1d18      	adds	r0, r3, #4
 800b190:	6961      	ldr	r1, [r4, #20]
 800b192:	6028      	str	r0, [r5, #0]
 800b194:	0635      	lsls	r5, r6, #24
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	d501      	bpl.n	800b19e <_printf_i+0x1ce>
 800b19a:	6019      	str	r1, [r3, #0]
 800b19c:	e002      	b.n	800b1a4 <_printf_i+0x1d4>
 800b19e:	0670      	lsls	r0, r6, #25
 800b1a0:	d5fb      	bpl.n	800b19a <_printf_i+0x1ca>
 800b1a2:	8019      	strh	r1, [r3, #0]
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	4615      	mov	r5, r2
 800b1a8:	6123      	str	r3, [r4, #16]
 800b1aa:	e7ba      	b.n	800b122 <_printf_i+0x152>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	602a      	str	r2, [r5, #0]
 800b1b4:	681d      	ldr	r5, [r3, #0]
 800b1b6:	6862      	ldr	r2, [r4, #4]
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	f000 fb23 	bl	800b804 <memchr>
 800b1be:	b108      	cbz	r0, 800b1c4 <_printf_i+0x1f4>
 800b1c0:	1b40      	subs	r0, r0, r5
 800b1c2:	6060      	str	r0, [r4, #4]
 800b1c4:	6863      	ldr	r3, [r4, #4]
 800b1c6:	6123      	str	r3, [r4, #16]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ce:	e7a8      	b.n	800b122 <_printf_i+0x152>
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	47d0      	blx	sl
 800b1da:	3001      	adds	r0, #1
 800b1dc:	d0ab      	beq.n	800b136 <_printf_i+0x166>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	079b      	lsls	r3, r3, #30
 800b1e2:	d413      	bmi.n	800b20c <_printf_i+0x23c>
 800b1e4:	68e0      	ldr	r0, [r4, #12]
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	4298      	cmp	r0, r3
 800b1ea:	bfb8      	it	lt
 800b1ec:	4618      	movlt	r0, r3
 800b1ee:	e7a4      	b.n	800b13a <_printf_i+0x16a>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	4632      	mov	r2, r6
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	47d0      	blx	sl
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	d09b      	beq.n	800b136 <_printf_i+0x166>
 800b1fe:	3501      	adds	r5, #1
 800b200:	68e3      	ldr	r3, [r4, #12]
 800b202:	9903      	ldr	r1, [sp, #12]
 800b204:	1a5b      	subs	r3, r3, r1
 800b206:	42ab      	cmp	r3, r5
 800b208:	dcf2      	bgt.n	800b1f0 <_printf_i+0x220>
 800b20a:	e7eb      	b.n	800b1e4 <_printf_i+0x214>
 800b20c:	2500      	movs	r5, #0
 800b20e:	f104 0619 	add.w	r6, r4, #25
 800b212:	e7f5      	b.n	800b200 <_printf_i+0x230>
 800b214:	0800c272 	.word	0x0800c272
 800b218:	0800c283 	.word	0x0800c283

0800b21c <_sbrk_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	2300      	movs	r3, #0
 800b220:	4d05      	ldr	r5, [pc, #20]	; (800b238 <_sbrk_r+0x1c>)
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	602b      	str	r3, [r5, #0]
 800b228:	f7f6 fdfa 	bl	8001e20 <_sbrk>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_sbrk_r+0x1a>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_sbrk_r+0x1a>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20004c18 	.word	0x20004c18

0800b23c <__swbuf_r>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	460e      	mov	r6, r1
 800b240:	4614      	mov	r4, r2
 800b242:	4605      	mov	r5, r0
 800b244:	b118      	cbz	r0, 800b24e <__swbuf_r+0x12>
 800b246:	6983      	ldr	r3, [r0, #24]
 800b248:	b90b      	cbnz	r3, 800b24e <__swbuf_r+0x12>
 800b24a:	f000 f9d5 	bl	800b5f8 <__sinit>
 800b24e:	4b21      	ldr	r3, [pc, #132]	; (800b2d4 <__swbuf_r+0x98>)
 800b250:	429c      	cmp	r4, r3
 800b252:	d12b      	bne.n	800b2ac <__swbuf_r+0x70>
 800b254:	686c      	ldr	r4, [r5, #4]
 800b256:	69a3      	ldr	r3, [r4, #24]
 800b258:	60a3      	str	r3, [r4, #8]
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	071a      	lsls	r2, r3, #28
 800b25e:	d52f      	bpl.n	800b2c0 <__swbuf_r+0x84>
 800b260:	6923      	ldr	r3, [r4, #16]
 800b262:	b36b      	cbz	r3, 800b2c0 <__swbuf_r+0x84>
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	6820      	ldr	r0, [r4, #0]
 800b268:	b2f6      	uxtb	r6, r6
 800b26a:	1ac0      	subs	r0, r0, r3
 800b26c:	6963      	ldr	r3, [r4, #20]
 800b26e:	4637      	mov	r7, r6
 800b270:	4283      	cmp	r3, r0
 800b272:	dc04      	bgt.n	800b27e <__swbuf_r+0x42>
 800b274:	4621      	mov	r1, r4
 800b276:	4628      	mov	r0, r5
 800b278:	f000 f92a 	bl	800b4d0 <_fflush_r>
 800b27c:	bb30      	cbnz	r0, 800b2cc <__swbuf_r+0x90>
 800b27e:	68a3      	ldr	r3, [r4, #8]
 800b280:	3001      	adds	r0, #1
 800b282:	3b01      	subs	r3, #1
 800b284:	60a3      	str	r3, [r4, #8]
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	6022      	str	r2, [r4, #0]
 800b28c:	701e      	strb	r6, [r3, #0]
 800b28e:	6963      	ldr	r3, [r4, #20]
 800b290:	4283      	cmp	r3, r0
 800b292:	d004      	beq.n	800b29e <__swbuf_r+0x62>
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	07db      	lsls	r3, r3, #31
 800b298:	d506      	bpl.n	800b2a8 <__swbuf_r+0x6c>
 800b29a:	2e0a      	cmp	r6, #10
 800b29c:	d104      	bne.n	800b2a8 <__swbuf_r+0x6c>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f000 f915 	bl	800b4d0 <_fflush_r>
 800b2a6:	b988      	cbnz	r0, 800b2cc <__swbuf_r+0x90>
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <__swbuf_r+0x9c>)
 800b2ae:	429c      	cmp	r4, r3
 800b2b0:	d101      	bne.n	800b2b6 <__swbuf_r+0x7a>
 800b2b2:	68ac      	ldr	r4, [r5, #8]
 800b2b4:	e7cf      	b.n	800b256 <__swbuf_r+0x1a>
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <__swbuf_r+0xa0>)
 800b2b8:	429c      	cmp	r4, r3
 800b2ba:	bf08      	it	eq
 800b2bc:	68ec      	ldreq	r4, [r5, #12]
 800b2be:	e7ca      	b.n	800b256 <__swbuf_r+0x1a>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 f80c 	bl	800b2e0 <__swsetup_r>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d0cb      	beq.n	800b264 <__swbuf_r+0x28>
 800b2cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b2d0:	e7ea      	b.n	800b2a8 <__swbuf_r+0x6c>
 800b2d2:	bf00      	nop
 800b2d4:	0800c2b4 	.word	0x0800c2b4
 800b2d8:	0800c2d4 	.word	0x0800c2d4
 800b2dc:	0800c294 	.word	0x0800c294

0800b2e0 <__swsetup_r>:
 800b2e0:	4b32      	ldr	r3, [pc, #200]	; (800b3ac <__swsetup_r+0xcc>)
 800b2e2:	b570      	push	{r4, r5, r6, lr}
 800b2e4:	681d      	ldr	r5, [r3, #0]
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	b125      	cbz	r5, 800b2f6 <__swsetup_r+0x16>
 800b2ec:	69ab      	ldr	r3, [r5, #24]
 800b2ee:	b913      	cbnz	r3, 800b2f6 <__swsetup_r+0x16>
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 f981 	bl	800b5f8 <__sinit>
 800b2f6:	4b2e      	ldr	r3, [pc, #184]	; (800b3b0 <__swsetup_r+0xd0>)
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	d10f      	bne.n	800b31c <__swsetup_r+0x3c>
 800b2fc:	686c      	ldr	r4, [r5, #4]
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b304:	0719      	lsls	r1, r3, #28
 800b306:	d42c      	bmi.n	800b362 <__swsetup_r+0x82>
 800b308:	06dd      	lsls	r5, r3, #27
 800b30a:	d411      	bmi.n	800b330 <__swsetup_r+0x50>
 800b30c:	2309      	movs	r3, #9
 800b30e:	6033      	str	r3, [r6, #0]
 800b310:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	81a3      	strh	r3, [r4, #12]
 800b31a:	e03e      	b.n	800b39a <__swsetup_r+0xba>
 800b31c:	4b25      	ldr	r3, [pc, #148]	; (800b3b4 <__swsetup_r+0xd4>)
 800b31e:	429c      	cmp	r4, r3
 800b320:	d101      	bne.n	800b326 <__swsetup_r+0x46>
 800b322:	68ac      	ldr	r4, [r5, #8]
 800b324:	e7eb      	b.n	800b2fe <__swsetup_r+0x1e>
 800b326:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <__swsetup_r+0xd8>)
 800b328:	429c      	cmp	r4, r3
 800b32a:	bf08      	it	eq
 800b32c:	68ec      	ldreq	r4, [r5, #12]
 800b32e:	e7e6      	b.n	800b2fe <__swsetup_r+0x1e>
 800b330:	0758      	lsls	r0, r3, #29
 800b332:	d512      	bpl.n	800b35a <__swsetup_r+0x7a>
 800b334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b336:	b141      	cbz	r1, 800b34a <__swsetup_r+0x6a>
 800b338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b33c:	4299      	cmp	r1, r3
 800b33e:	d002      	beq.n	800b346 <__swsetup_r+0x66>
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fa45 	bl	800a7d0 <_free_r>
 800b346:	2300      	movs	r3, #0
 800b348:	6363      	str	r3, [r4, #52]	; 0x34
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	2300      	movs	r3, #0
 800b354:	6063      	str	r3, [r4, #4]
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	89a3      	ldrh	r3, [r4, #12]
 800b35c:	f043 0308 	orr.w	r3, r3, #8
 800b360:	81a3      	strh	r3, [r4, #12]
 800b362:	6923      	ldr	r3, [r4, #16]
 800b364:	b94b      	cbnz	r3, 800b37a <__swsetup_r+0x9a>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b370:	d003      	beq.n	800b37a <__swsetup_r+0x9a>
 800b372:	4621      	mov	r1, r4
 800b374:	4630      	mov	r0, r6
 800b376:	f000 fa05 	bl	800b784 <__smakebuf_r>
 800b37a:	89a0      	ldrh	r0, [r4, #12]
 800b37c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b380:	f010 0301 	ands.w	r3, r0, #1
 800b384:	d00a      	beq.n	800b39c <__swsetup_r+0xbc>
 800b386:	2300      	movs	r3, #0
 800b388:	60a3      	str	r3, [r4, #8]
 800b38a:	6963      	ldr	r3, [r4, #20]
 800b38c:	425b      	negs	r3, r3
 800b38e:	61a3      	str	r3, [r4, #24]
 800b390:	6923      	ldr	r3, [r4, #16]
 800b392:	b943      	cbnz	r3, 800b3a6 <__swsetup_r+0xc6>
 800b394:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b398:	d1ba      	bne.n	800b310 <__swsetup_r+0x30>
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	0781      	lsls	r1, r0, #30
 800b39e:	bf58      	it	pl
 800b3a0:	6963      	ldrpl	r3, [r4, #20]
 800b3a2:	60a3      	str	r3, [r4, #8]
 800b3a4:	e7f4      	b.n	800b390 <__swsetup_r+0xb0>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	e7f7      	b.n	800b39a <__swsetup_r+0xba>
 800b3aa:	bf00      	nop
 800b3ac:	20000444 	.word	0x20000444
 800b3b0:	0800c2b4 	.word	0x0800c2b4
 800b3b4:	0800c2d4 	.word	0x0800c2d4
 800b3b8:	0800c294 	.word	0x0800c294

0800b3bc <abort>:
 800b3bc:	2006      	movs	r0, #6
 800b3be:	b508      	push	{r3, lr}
 800b3c0:	f000 faba 	bl	800b938 <raise>
 800b3c4:	2001      	movs	r0, #1
 800b3c6:	f7f6 fcb8 	bl	8001d3a <_exit>
	...

0800b3cc <__sflush_r>:
 800b3cc:	898a      	ldrh	r2, [r1, #12]
 800b3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	0710      	lsls	r0, r2, #28
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	d457      	bmi.n	800b488 <__sflush_r+0xbc>
 800b3d8:	684b      	ldr	r3, [r1, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	dc04      	bgt.n	800b3e8 <__sflush_r+0x1c>
 800b3de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	dc01      	bgt.n	800b3e8 <__sflush_r+0x1c>
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ea:	2e00      	cmp	r6, #0
 800b3ec:	d0fa      	beq.n	800b3e4 <__sflush_r+0x18>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3f4:	682f      	ldr	r7, [r5, #0]
 800b3f6:	602b      	str	r3, [r5, #0]
 800b3f8:	d032      	beq.n	800b460 <__sflush_r+0x94>
 800b3fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	075a      	lsls	r2, r3, #29
 800b400:	d505      	bpl.n	800b40e <__sflush_r+0x42>
 800b402:	6863      	ldr	r3, [r4, #4]
 800b404:	1ac0      	subs	r0, r0, r3
 800b406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b408:	b10b      	cbz	r3, 800b40e <__sflush_r+0x42>
 800b40a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b40c:	1ac0      	subs	r0, r0, r3
 800b40e:	2300      	movs	r3, #0
 800b410:	4602      	mov	r2, r0
 800b412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b414:	4628      	mov	r0, r5
 800b416:	6a21      	ldr	r1, [r4, #32]
 800b418:	47b0      	blx	r6
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	d106      	bne.n	800b42e <__sflush_r+0x62>
 800b420:	6829      	ldr	r1, [r5, #0]
 800b422:	291d      	cmp	r1, #29
 800b424:	d82c      	bhi.n	800b480 <__sflush_r+0xb4>
 800b426:	4a29      	ldr	r2, [pc, #164]	; (800b4cc <__sflush_r+0x100>)
 800b428:	40ca      	lsrs	r2, r1
 800b42a:	07d6      	lsls	r6, r2, #31
 800b42c:	d528      	bpl.n	800b480 <__sflush_r+0xb4>
 800b42e:	2200      	movs	r2, #0
 800b430:	6062      	str	r2, [r4, #4]
 800b432:	6922      	ldr	r2, [r4, #16]
 800b434:	04d9      	lsls	r1, r3, #19
 800b436:	6022      	str	r2, [r4, #0]
 800b438:	d504      	bpl.n	800b444 <__sflush_r+0x78>
 800b43a:	1c42      	adds	r2, r0, #1
 800b43c:	d101      	bne.n	800b442 <__sflush_r+0x76>
 800b43e:	682b      	ldr	r3, [r5, #0]
 800b440:	b903      	cbnz	r3, 800b444 <__sflush_r+0x78>
 800b442:	6560      	str	r0, [r4, #84]	; 0x54
 800b444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b446:	602f      	str	r7, [r5, #0]
 800b448:	2900      	cmp	r1, #0
 800b44a:	d0cb      	beq.n	800b3e4 <__sflush_r+0x18>
 800b44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b450:	4299      	cmp	r1, r3
 800b452:	d002      	beq.n	800b45a <__sflush_r+0x8e>
 800b454:	4628      	mov	r0, r5
 800b456:	f7ff f9bb 	bl	800a7d0 <_free_r>
 800b45a:	2000      	movs	r0, #0
 800b45c:	6360      	str	r0, [r4, #52]	; 0x34
 800b45e:	e7c2      	b.n	800b3e6 <__sflush_r+0x1a>
 800b460:	6a21      	ldr	r1, [r4, #32]
 800b462:	2301      	movs	r3, #1
 800b464:	4628      	mov	r0, r5
 800b466:	47b0      	blx	r6
 800b468:	1c41      	adds	r1, r0, #1
 800b46a:	d1c7      	bne.n	800b3fc <__sflush_r+0x30>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d0c4      	beq.n	800b3fc <__sflush_r+0x30>
 800b472:	2b1d      	cmp	r3, #29
 800b474:	d001      	beq.n	800b47a <__sflush_r+0xae>
 800b476:	2b16      	cmp	r3, #22
 800b478:	d101      	bne.n	800b47e <__sflush_r+0xb2>
 800b47a:	602f      	str	r7, [r5, #0]
 800b47c:	e7b2      	b.n	800b3e4 <__sflush_r+0x18>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	e7ae      	b.n	800b3e6 <__sflush_r+0x1a>
 800b488:	690f      	ldr	r7, [r1, #16]
 800b48a:	2f00      	cmp	r7, #0
 800b48c:	d0aa      	beq.n	800b3e4 <__sflush_r+0x18>
 800b48e:	0793      	lsls	r3, r2, #30
 800b490:	bf18      	it	ne
 800b492:	2300      	movne	r3, #0
 800b494:	680e      	ldr	r6, [r1, #0]
 800b496:	bf08      	it	eq
 800b498:	694b      	ldreq	r3, [r1, #20]
 800b49a:	1bf6      	subs	r6, r6, r7
 800b49c:	600f      	str	r7, [r1, #0]
 800b49e:	608b      	str	r3, [r1, #8]
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	dd9f      	ble.n	800b3e4 <__sflush_r+0x18>
 800b4a4:	4633      	mov	r3, r6
 800b4a6:	463a      	mov	r2, r7
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	6a21      	ldr	r1, [r4, #32]
 800b4ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b4b0:	47e0      	blx	ip
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	dc06      	bgt.n	800b4c4 <__sflush_r+0xf8>
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	e790      	b.n	800b3e6 <__sflush_r+0x1a>
 800b4c4:	4407      	add	r7, r0
 800b4c6:	1a36      	subs	r6, r6, r0
 800b4c8:	e7ea      	b.n	800b4a0 <__sflush_r+0xd4>
 800b4ca:	bf00      	nop
 800b4cc:	20400001 	.word	0x20400001

0800b4d0 <_fflush_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	690b      	ldr	r3, [r1, #16]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	b913      	cbnz	r3, 800b4e0 <_fflush_r+0x10>
 800b4da:	2500      	movs	r5, #0
 800b4dc:	4628      	mov	r0, r5
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	b118      	cbz	r0, 800b4ea <_fflush_r+0x1a>
 800b4e2:	6983      	ldr	r3, [r0, #24]
 800b4e4:	b90b      	cbnz	r3, 800b4ea <_fflush_r+0x1a>
 800b4e6:	f000 f887 	bl	800b5f8 <__sinit>
 800b4ea:	4b14      	ldr	r3, [pc, #80]	; (800b53c <_fflush_r+0x6c>)
 800b4ec:	429c      	cmp	r4, r3
 800b4ee:	d11b      	bne.n	800b528 <_fflush_r+0x58>
 800b4f0:	686c      	ldr	r4, [r5, #4]
 800b4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d0ef      	beq.n	800b4da <_fflush_r+0xa>
 800b4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4fc:	07d0      	lsls	r0, r2, #31
 800b4fe:	d404      	bmi.n	800b50a <_fflush_r+0x3a>
 800b500:	0599      	lsls	r1, r3, #22
 800b502:	d402      	bmi.n	800b50a <_fflush_r+0x3a>
 800b504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b506:	f000 f915 	bl	800b734 <__retarget_lock_acquire_recursive>
 800b50a:	4628      	mov	r0, r5
 800b50c:	4621      	mov	r1, r4
 800b50e:	f7ff ff5d 	bl	800b3cc <__sflush_r>
 800b512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b514:	4605      	mov	r5, r0
 800b516:	07da      	lsls	r2, r3, #31
 800b518:	d4e0      	bmi.n	800b4dc <_fflush_r+0xc>
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	059b      	lsls	r3, r3, #22
 800b51e:	d4dd      	bmi.n	800b4dc <_fflush_r+0xc>
 800b520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b522:	f000 f908 	bl	800b736 <__retarget_lock_release_recursive>
 800b526:	e7d9      	b.n	800b4dc <_fflush_r+0xc>
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <_fflush_r+0x70>)
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d101      	bne.n	800b532 <_fflush_r+0x62>
 800b52e:	68ac      	ldr	r4, [r5, #8]
 800b530:	e7df      	b.n	800b4f2 <_fflush_r+0x22>
 800b532:	4b04      	ldr	r3, [pc, #16]	; (800b544 <_fflush_r+0x74>)
 800b534:	429c      	cmp	r4, r3
 800b536:	bf08      	it	eq
 800b538:	68ec      	ldreq	r4, [r5, #12]
 800b53a:	e7da      	b.n	800b4f2 <_fflush_r+0x22>
 800b53c:	0800c2b4 	.word	0x0800c2b4
 800b540:	0800c2d4 	.word	0x0800c2d4
 800b544:	0800c294 	.word	0x0800c294

0800b548 <std>:
 800b548:	2300      	movs	r3, #0
 800b54a:	b510      	push	{r4, lr}
 800b54c:	4604      	mov	r4, r0
 800b54e:	e9c0 3300 	strd	r3, r3, [r0]
 800b552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b556:	6083      	str	r3, [r0, #8]
 800b558:	8181      	strh	r1, [r0, #12]
 800b55a:	6643      	str	r3, [r0, #100]	; 0x64
 800b55c:	81c2      	strh	r2, [r0, #14]
 800b55e:	6183      	str	r3, [r0, #24]
 800b560:	4619      	mov	r1, r3
 800b562:	2208      	movs	r2, #8
 800b564:	305c      	adds	r0, #92	; 0x5c
 800b566:	f7fe ffcd 	bl	800a504 <memset>
 800b56a:	4b05      	ldr	r3, [pc, #20]	; (800b580 <std+0x38>)
 800b56c:	6224      	str	r4, [r4, #32]
 800b56e:	6263      	str	r3, [r4, #36]	; 0x24
 800b570:	4b04      	ldr	r3, [pc, #16]	; (800b584 <std+0x3c>)
 800b572:	62a3      	str	r3, [r4, #40]	; 0x28
 800b574:	4b04      	ldr	r3, [pc, #16]	; (800b588 <std+0x40>)
 800b576:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b578:	4b04      	ldr	r3, [pc, #16]	; (800b58c <std+0x44>)
 800b57a:	6323      	str	r3, [r4, #48]	; 0x30
 800b57c:	bd10      	pop	{r4, pc}
 800b57e:	bf00      	nop
 800b580:	0800b971 	.word	0x0800b971
 800b584:	0800b993 	.word	0x0800b993
 800b588:	0800b9cb 	.word	0x0800b9cb
 800b58c:	0800b9ef 	.word	0x0800b9ef

0800b590 <_cleanup_r>:
 800b590:	4901      	ldr	r1, [pc, #4]	; (800b598 <_cleanup_r+0x8>)
 800b592:	f000 b8af 	b.w	800b6f4 <_fwalk_reent>
 800b596:	bf00      	nop
 800b598:	0800b4d1 	.word	0x0800b4d1

0800b59c <__sfmoreglue>:
 800b59c:	2268      	movs	r2, #104	; 0x68
 800b59e:	b570      	push	{r4, r5, r6, lr}
 800b5a0:	1e4d      	subs	r5, r1, #1
 800b5a2:	4355      	muls	r5, r2
 800b5a4:	460e      	mov	r6, r1
 800b5a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5aa:	f7ff f979 	bl	800a8a0 <_malloc_r>
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	b140      	cbz	r0, 800b5c4 <__sfmoreglue+0x28>
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b5b8:	300c      	adds	r0, #12
 800b5ba:	60a0      	str	r0, [r4, #8]
 800b5bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5c0:	f7fe ffa0 	bl	800a504 <memset>
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}

0800b5c8 <__sfp_lock_acquire>:
 800b5c8:	4801      	ldr	r0, [pc, #4]	; (800b5d0 <__sfp_lock_acquire+0x8>)
 800b5ca:	f000 b8b3 	b.w	800b734 <__retarget_lock_acquire_recursive>
 800b5ce:	bf00      	nop
 800b5d0:	20004c15 	.word	0x20004c15

0800b5d4 <__sfp_lock_release>:
 800b5d4:	4801      	ldr	r0, [pc, #4]	; (800b5dc <__sfp_lock_release+0x8>)
 800b5d6:	f000 b8ae 	b.w	800b736 <__retarget_lock_release_recursive>
 800b5da:	bf00      	nop
 800b5dc:	20004c15 	.word	0x20004c15

0800b5e0 <__sinit_lock_acquire>:
 800b5e0:	4801      	ldr	r0, [pc, #4]	; (800b5e8 <__sinit_lock_acquire+0x8>)
 800b5e2:	f000 b8a7 	b.w	800b734 <__retarget_lock_acquire_recursive>
 800b5e6:	bf00      	nop
 800b5e8:	20004c16 	.word	0x20004c16

0800b5ec <__sinit_lock_release>:
 800b5ec:	4801      	ldr	r0, [pc, #4]	; (800b5f4 <__sinit_lock_release+0x8>)
 800b5ee:	f000 b8a2 	b.w	800b736 <__retarget_lock_release_recursive>
 800b5f2:	bf00      	nop
 800b5f4:	20004c16 	.word	0x20004c16

0800b5f8 <__sinit>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	f7ff fff0 	bl	800b5e0 <__sinit_lock_acquire>
 800b600:	69a3      	ldr	r3, [r4, #24]
 800b602:	b11b      	cbz	r3, 800b60c <__sinit+0x14>
 800b604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b608:	f7ff bff0 	b.w	800b5ec <__sinit_lock_release>
 800b60c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b610:	6523      	str	r3, [r4, #80]	; 0x50
 800b612:	4b13      	ldr	r3, [pc, #76]	; (800b660 <__sinit+0x68>)
 800b614:	4a13      	ldr	r2, [pc, #76]	; (800b664 <__sinit+0x6c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	62a2      	str	r2, [r4, #40]	; 0x28
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	bf08      	it	eq
 800b61e:	2301      	moveq	r3, #1
 800b620:	4620      	mov	r0, r4
 800b622:	bf08      	it	eq
 800b624:	61a3      	streq	r3, [r4, #24]
 800b626:	f000 f81f 	bl	800b668 <__sfp>
 800b62a:	6060      	str	r0, [r4, #4]
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 f81b 	bl	800b668 <__sfp>
 800b632:	60a0      	str	r0, [r4, #8]
 800b634:	4620      	mov	r0, r4
 800b636:	f000 f817 	bl	800b668 <__sfp>
 800b63a:	2200      	movs	r2, #0
 800b63c:	2104      	movs	r1, #4
 800b63e:	60e0      	str	r0, [r4, #12]
 800b640:	6860      	ldr	r0, [r4, #4]
 800b642:	f7ff ff81 	bl	800b548 <std>
 800b646:	2201      	movs	r2, #1
 800b648:	2109      	movs	r1, #9
 800b64a:	68a0      	ldr	r0, [r4, #8]
 800b64c:	f7ff ff7c 	bl	800b548 <std>
 800b650:	2202      	movs	r2, #2
 800b652:	2112      	movs	r1, #18
 800b654:	68e0      	ldr	r0, [r4, #12]
 800b656:	f7ff ff77 	bl	800b548 <std>
 800b65a:	2301      	movs	r3, #1
 800b65c:	61a3      	str	r3, [r4, #24]
 800b65e:	e7d1      	b.n	800b604 <__sinit+0xc>
 800b660:	0800c0ac 	.word	0x0800c0ac
 800b664:	0800b591 	.word	0x0800b591

0800b668 <__sfp>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	4607      	mov	r7, r0
 800b66c:	f7ff ffac 	bl	800b5c8 <__sfp_lock_acquire>
 800b670:	4b1e      	ldr	r3, [pc, #120]	; (800b6ec <__sfp+0x84>)
 800b672:	681e      	ldr	r6, [r3, #0]
 800b674:	69b3      	ldr	r3, [r6, #24]
 800b676:	b913      	cbnz	r3, 800b67e <__sfp+0x16>
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff ffbd 	bl	800b5f8 <__sinit>
 800b67e:	3648      	adds	r6, #72	; 0x48
 800b680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b684:	3b01      	subs	r3, #1
 800b686:	d503      	bpl.n	800b690 <__sfp+0x28>
 800b688:	6833      	ldr	r3, [r6, #0]
 800b68a:	b30b      	cbz	r3, 800b6d0 <__sfp+0x68>
 800b68c:	6836      	ldr	r6, [r6, #0]
 800b68e:	e7f7      	b.n	800b680 <__sfp+0x18>
 800b690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b694:	b9d5      	cbnz	r5, 800b6cc <__sfp+0x64>
 800b696:	4b16      	ldr	r3, [pc, #88]	; (800b6f0 <__sfp+0x88>)
 800b698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b69c:	60e3      	str	r3, [r4, #12]
 800b69e:	6665      	str	r5, [r4, #100]	; 0x64
 800b6a0:	f000 f847 	bl	800b732 <__retarget_lock_init_recursive>
 800b6a4:	f7ff ff96 	bl	800b5d4 <__sfp_lock_release>
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6b4:	6025      	str	r5, [r4, #0]
 800b6b6:	61a5      	str	r5, [r4, #24]
 800b6b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6bc:	f7fe ff22 	bl	800a504 <memset>
 800b6c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6cc:	3468      	adds	r4, #104	; 0x68
 800b6ce:	e7d9      	b.n	800b684 <__sfp+0x1c>
 800b6d0:	2104      	movs	r1, #4
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	f7ff ff62 	bl	800b59c <__sfmoreglue>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	6030      	str	r0, [r6, #0]
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d1d5      	bne.n	800b68c <__sfp+0x24>
 800b6e0:	f7ff ff78 	bl	800b5d4 <__sfp_lock_release>
 800b6e4:	230c      	movs	r3, #12
 800b6e6:	603b      	str	r3, [r7, #0]
 800b6e8:	e7ee      	b.n	800b6c8 <__sfp+0x60>
 800b6ea:	bf00      	nop
 800b6ec:	0800c0ac 	.word	0x0800c0ac
 800b6f0:	ffff0001 	.word	0xffff0001

0800b6f4 <_fwalk_reent>:
 800b6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	4688      	mov	r8, r1
 800b6fc:	2700      	movs	r7, #0
 800b6fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b706:	f1b9 0901 	subs.w	r9, r9, #1
 800b70a:	d505      	bpl.n	800b718 <_fwalk_reent+0x24>
 800b70c:	6824      	ldr	r4, [r4, #0]
 800b70e:	2c00      	cmp	r4, #0
 800b710:	d1f7      	bne.n	800b702 <_fwalk_reent+0xe>
 800b712:	4638      	mov	r0, r7
 800b714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b718:	89ab      	ldrh	r3, [r5, #12]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d907      	bls.n	800b72e <_fwalk_reent+0x3a>
 800b71e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b722:	3301      	adds	r3, #1
 800b724:	d003      	beq.n	800b72e <_fwalk_reent+0x3a>
 800b726:	4629      	mov	r1, r5
 800b728:	4630      	mov	r0, r6
 800b72a:	47c0      	blx	r8
 800b72c:	4307      	orrs	r7, r0
 800b72e:	3568      	adds	r5, #104	; 0x68
 800b730:	e7e9      	b.n	800b706 <_fwalk_reent+0x12>

0800b732 <__retarget_lock_init_recursive>:
 800b732:	4770      	bx	lr

0800b734 <__retarget_lock_acquire_recursive>:
 800b734:	4770      	bx	lr

0800b736 <__retarget_lock_release_recursive>:
 800b736:	4770      	bx	lr

0800b738 <__swhatbuf_r>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	460e      	mov	r6, r1
 800b73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b740:	4614      	mov	r4, r2
 800b742:	2900      	cmp	r1, #0
 800b744:	461d      	mov	r5, r3
 800b746:	b096      	sub	sp, #88	; 0x58
 800b748:	da08      	bge.n	800b75c <__swhatbuf_r+0x24>
 800b74a:	2200      	movs	r2, #0
 800b74c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b750:	602a      	str	r2, [r5, #0]
 800b752:	061a      	lsls	r2, r3, #24
 800b754:	d410      	bmi.n	800b778 <__swhatbuf_r+0x40>
 800b756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b75a:	e00e      	b.n	800b77a <__swhatbuf_r+0x42>
 800b75c:	466a      	mov	r2, sp
 800b75e:	f000 f96d 	bl	800ba3c <_fstat_r>
 800b762:	2800      	cmp	r0, #0
 800b764:	dbf1      	blt.n	800b74a <__swhatbuf_r+0x12>
 800b766:	9a01      	ldr	r2, [sp, #4]
 800b768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b76c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b770:	425a      	negs	r2, r3
 800b772:	415a      	adcs	r2, r3
 800b774:	602a      	str	r2, [r5, #0]
 800b776:	e7ee      	b.n	800b756 <__swhatbuf_r+0x1e>
 800b778:	2340      	movs	r3, #64	; 0x40
 800b77a:	2000      	movs	r0, #0
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	b016      	add	sp, #88	; 0x58
 800b780:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b784 <__smakebuf_r>:
 800b784:	898b      	ldrh	r3, [r1, #12]
 800b786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b788:	079d      	lsls	r5, r3, #30
 800b78a:	4606      	mov	r6, r0
 800b78c:	460c      	mov	r4, r1
 800b78e:	d507      	bpl.n	800b7a0 <__smakebuf_r+0x1c>
 800b790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	6123      	str	r3, [r4, #16]
 800b798:	2301      	movs	r3, #1
 800b79a:	6163      	str	r3, [r4, #20]
 800b79c:	b002      	add	sp, #8
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	466a      	mov	r2, sp
 800b7a2:	ab01      	add	r3, sp, #4
 800b7a4:	f7ff ffc8 	bl	800b738 <__swhatbuf_r>
 800b7a8:	9900      	ldr	r1, [sp, #0]
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff f877 	bl	800a8a0 <_malloc_r>
 800b7b2:	b948      	cbnz	r0, 800b7c8 <__smakebuf_r+0x44>
 800b7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b8:	059a      	lsls	r2, r3, #22
 800b7ba:	d4ef      	bmi.n	800b79c <__smakebuf_r+0x18>
 800b7bc:	f023 0303 	bic.w	r3, r3, #3
 800b7c0:	f043 0302 	orr.w	r3, r3, #2
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	e7e3      	b.n	800b790 <__smakebuf_r+0xc>
 800b7c8:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <__smakebuf_r+0x7c>)
 800b7ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	9b00      	ldr	r3, [sp, #0]
 800b7d8:	6120      	str	r0, [r4, #16]
 800b7da:	6163      	str	r3, [r4, #20]
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	b15b      	cbz	r3, 800b7f8 <__smakebuf_r+0x74>
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7e6:	f000 f93b 	bl	800ba60 <_isatty_r>
 800b7ea:	b128      	cbz	r0, 800b7f8 <__smakebuf_r+0x74>
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f023 0303 	bic.w	r3, r3, #3
 800b7f2:	f043 0301 	orr.w	r3, r3, #1
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	89a0      	ldrh	r0, [r4, #12]
 800b7fa:	4305      	orrs	r5, r0
 800b7fc:	81a5      	strh	r5, [r4, #12]
 800b7fe:	e7cd      	b.n	800b79c <__smakebuf_r+0x18>
 800b800:	0800b591 	.word	0x0800b591

0800b804 <memchr>:
 800b804:	4603      	mov	r3, r0
 800b806:	b510      	push	{r4, lr}
 800b808:	b2c9      	uxtb	r1, r1
 800b80a:	4402      	add	r2, r0
 800b80c:	4293      	cmp	r3, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	d101      	bne.n	800b816 <memchr+0x12>
 800b812:	2000      	movs	r0, #0
 800b814:	e003      	b.n	800b81e <memchr+0x1a>
 800b816:	7804      	ldrb	r4, [r0, #0]
 800b818:	3301      	adds	r3, #1
 800b81a:	428c      	cmp	r4, r1
 800b81c:	d1f6      	bne.n	800b80c <memchr+0x8>
 800b81e:	bd10      	pop	{r4, pc}

0800b820 <memcpy>:
 800b820:	440a      	add	r2, r1
 800b822:	4291      	cmp	r1, r2
 800b824:	f100 33ff 	add.w	r3, r0, #4294967295
 800b828:	d100      	bne.n	800b82c <memcpy+0xc>
 800b82a:	4770      	bx	lr
 800b82c:	b510      	push	{r4, lr}
 800b82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b832:	4291      	cmp	r1, r2
 800b834:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b838:	d1f9      	bne.n	800b82e <memcpy+0xe>
 800b83a:	bd10      	pop	{r4, pc}

0800b83c <memmove>:
 800b83c:	4288      	cmp	r0, r1
 800b83e:	b510      	push	{r4, lr}
 800b840:	eb01 0402 	add.w	r4, r1, r2
 800b844:	d902      	bls.n	800b84c <memmove+0x10>
 800b846:	4284      	cmp	r4, r0
 800b848:	4623      	mov	r3, r4
 800b84a:	d807      	bhi.n	800b85c <memmove+0x20>
 800b84c:	1e43      	subs	r3, r0, #1
 800b84e:	42a1      	cmp	r1, r4
 800b850:	d008      	beq.n	800b864 <memmove+0x28>
 800b852:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b85a:	e7f8      	b.n	800b84e <memmove+0x12>
 800b85c:	4601      	mov	r1, r0
 800b85e:	4402      	add	r2, r0
 800b860:	428a      	cmp	r2, r1
 800b862:	d100      	bne.n	800b866 <memmove+0x2a>
 800b864:	bd10      	pop	{r4, pc}
 800b866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b86a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b86e:	e7f7      	b.n	800b860 <memmove+0x24>

0800b870 <__malloc_lock>:
 800b870:	4801      	ldr	r0, [pc, #4]	; (800b878 <__malloc_lock+0x8>)
 800b872:	f7ff bf5f 	b.w	800b734 <__retarget_lock_acquire_recursive>
 800b876:	bf00      	nop
 800b878:	20004c14 	.word	0x20004c14

0800b87c <__malloc_unlock>:
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <__malloc_unlock+0x8>)
 800b87e:	f7ff bf5a 	b.w	800b736 <__retarget_lock_release_recursive>
 800b882:	bf00      	nop
 800b884:	20004c14 	.word	0x20004c14

0800b888 <_realloc_r>:
 800b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88c:	4680      	mov	r8, r0
 800b88e:	4614      	mov	r4, r2
 800b890:	460e      	mov	r6, r1
 800b892:	b921      	cbnz	r1, 800b89e <_realloc_r+0x16>
 800b894:	4611      	mov	r1, r2
 800b896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b89a:	f7ff b801 	b.w	800a8a0 <_malloc_r>
 800b89e:	b92a      	cbnz	r2, 800b8ac <_realloc_r+0x24>
 800b8a0:	f7fe ff96 	bl	800a7d0 <_free_r>
 800b8a4:	4625      	mov	r5, r4
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ac:	f000 f8fa 	bl	800baa4 <_malloc_usable_size_r>
 800b8b0:	4284      	cmp	r4, r0
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	d802      	bhi.n	800b8bc <_realloc_r+0x34>
 800b8b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8ba:	d812      	bhi.n	800b8e2 <_realloc_r+0x5a>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4640      	mov	r0, r8
 800b8c0:	f7fe ffee 	bl	800a8a0 <_malloc_r>
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d0ed      	beq.n	800b8a6 <_realloc_r+0x1e>
 800b8ca:	42bc      	cmp	r4, r7
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	bf28      	it	cs
 800b8d2:	463a      	movcs	r2, r7
 800b8d4:	f7ff ffa4 	bl	800b820 <memcpy>
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4640      	mov	r0, r8
 800b8dc:	f7fe ff78 	bl	800a7d0 <_free_r>
 800b8e0:	e7e1      	b.n	800b8a6 <_realloc_r+0x1e>
 800b8e2:	4635      	mov	r5, r6
 800b8e4:	e7df      	b.n	800b8a6 <_realloc_r+0x1e>

0800b8e6 <_raise_r>:
 800b8e6:	291f      	cmp	r1, #31
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	d904      	bls.n	800b8fa <_raise_r+0x14>
 800b8f0:	2316      	movs	r3, #22
 800b8f2:	6003      	str	r3, [r0, #0]
 800b8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f8:	bd38      	pop	{r3, r4, r5, pc}
 800b8fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8fc:	b112      	cbz	r2, 800b904 <_raise_r+0x1e>
 800b8fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b902:	b94b      	cbnz	r3, 800b918 <_raise_r+0x32>
 800b904:	4620      	mov	r0, r4
 800b906:	f000 f831 	bl	800b96c <_getpid_r>
 800b90a:	462a      	mov	r2, r5
 800b90c:	4601      	mov	r1, r0
 800b90e:	4620      	mov	r0, r4
 800b910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b914:	f000 b818 	b.w	800b948 <_kill_r>
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d00a      	beq.n	800b932 <_raise_r+0x4c>
 800b91c:	1c59      	adds	r1, r3, #1
 800b91e:	d103      	bne.n	800b928 <_raise_r+0x42>
 800b920:	2316      	movs	r3, #22
 800b922:	6003      	str	r3, [r0, #0]
 800b924:	2001      	movs	r0, #1
 800b926:	e7e7      	b.n	800b8f8 <_raise_r+0x12>
 800b928:	2400      	movs	r4, #0
 800b92a:	4628      	mov	r0, r5
 800b92c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b930:	4798      	blx	r3
 800b932:	2000      	movs	r0, #0
 800b934:	e7e0      	b.n	800b8f8 <_raise_r+0x12>
	...

0800b938 <raise>:
 800b938:	4b02      	ldr	r3, [pc, #8]	; (800b944 <raise+0xc>)
 800b93a:	4601      	mov	r1, r0
 800b93c:	6818      	ldr	r0, [r3, #0]
 800b93e:	f7ff bfd2 	b.w	800b8e6 <_raise_r>
 800b942:	bf00      	nop
 800b944:	20000444 	.word	0x20000444

0800b948 <_kill_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	2300      	movs	r3, #0
 800b94c:	4d06      	ldr	r5, [pc, #24]	; (800b968 <_kill_r+0x20>)
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	4611      	mov	r1, r2
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	f7f6 f9e0 	bl	8001d1a <_kill>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	d102      	bne.n	800b964 <_kill_r+0x1c>
 800b95e:	682b      	ldr	r3, [r5, #0]
 800b960:	b103      	cbz	r3, 800b964 <_kill_r+0x1c>
 800b962:	6023      	str	r3, [r4, #0]
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	bf00      	nop
 800b968:	20004c18 	.word	0x20004c18

0800b96c <_getpid_r>:
 800b96c:	f7f6 b9ce 	b.w	8001d0c <_getpid>

0800b970 <__sread>:
 800b970:	b510      	push	{r4, lr}
 800b972:	460c      	mov	r4, r1
 800b974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b978:	f000 f89c 	bl	800bab4 <_read_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	bfab      	itete	ge
 800b980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b982:	89a3      	ldrhlt	r3, [r4, #12]
 800b984:	181b      	addge	r3, r3, r0
 800b986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b98a:	bfac      	ite	ge
 800b98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b98e:	81a3      	strhlt	r3, [r4, #12]
 800b990:	bd10      	pop	{r4, pc}

0800b992 <__swrite>:
 800b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	461f      	mov	r7, r3
 800b998:	898b      	ldrh	r3, [r1, #12]
 800b99a:	4605      	mov	r5, r0
 800b99c:	05db      	lsls	r3, r3, #23
 800b99e:	460c      	mov	r4, r1
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	d505      	bpl.n	800b9b0 <__swrite+0x1e>
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ac:	f000 f868 	bl	800ba80 <_lseek_r>
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	463b      	mov	r3, r7
 800b9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	f000 b817 	b.w	800b9f8 <_write_r>

0800b9ca <__sseek>:
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d2:	f000 f855 	bl	800ba80 <_lseek_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	bf15      	itete	ne
 800b9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9e6:	81a3      	strheq	r3, [r4, #12]
 800b9e8:	bf18      	it	ne
 800b9ea:	81a3      	strhne	r3, [r4, #12]
 800b9ec:	bd10      	pop	{r4, pc}

0800b9ee <__sclose>:
 800b9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f2:	f000 b813 	b.w	800ba1c <_close_r>
	...

0800b9f8 <_write_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	4611      	mov	r1, r2
 800ba00:	2200      	movs	r2, #0
 800ba02:	4d05      	ldr	r5, [pc, #20]	; (800ba18 <_write_r+0x20>)
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f6 f9be 	bl	8001d88 <_write>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_write_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_write_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	20004c18 	.word	0x20004c18

0800ba1c <_close_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	2300      	movs	r3, #0
 800ba20:	4d05      	ldr	r5, [pc, #20]	; (800ba38 <_close_r+0x1c>)
 800ba22:	4604      	mov	r4, r0
 800ba24:	4608      	mov	r0, r1
 800ba26:	602b      	str	r3, [r5, #0]
 800ba28:	f7f6 f9ca 	bl	8001dc0 <_close>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_close_r+0x1a>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_close_r+0x1a>
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	20004c18 	.word	0x20004c18

0800ba3c <_fstat_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	2300      	movs	r3, #0
 800ba40:	4d06      	ldr	r5, [pc, #24]	; (800ba5c <_fstat_r+0x20>)
 800ba42:	4604      	mov	r4, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	4611      	mov	r1, r2
 800ba48:	602b      	str	r3, [r5, #0]
 800ba4a:	f7f6 f9c4 	bl	8001dd6 <_fstat>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	d102      	bne.n	800ba58 <_fstat_r+0x1c>
 800ba52:	682b      	ldr	r3, [r5, #0]
 800ba54:	b103      	cbz	r3, 800ba58 <_fstat_r+0x1c>
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	bd38      	pop	{r3, r4, r5, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20004c18 	.word	0x20004c18

0800ba60 <_isatty_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	2300      	movs	r3, #0
 800ba64:	4d05      	ldr	r5, [pc, #20]	; (800ba7c <_isatty_r+0x1c>)
 800ba66:	4604      	mov	r4, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	602b      	str	r3, [r5, #0]
 800ba6c:	f7f6 f9c2 	bl	8001df4 <_isatty>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_isatty_r+0x1a>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_isatty_r+0x1a>
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	20004c18 	.word	0x20004c18

0800ba80 <_lseek_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	4611      	mov	r1, r2
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4d05      	ldr	r5, [pc, #20]	; (800baa0 <_lseek_r+0x20>)
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f7f6 f9ba 	bl	8001e08 <_lseek>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_lseek_r+0x1e>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_lseek_r+0x1e>
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	20004c18 	.word	0x20004c18

0800baa4 <_malloc_usable_size_r>:
 800baa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa8:	1f18      	subs	r0, r3, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bfbc      	itt	lt
 800baae:	580b      	ldrlt	r3, [r1, r0]
 800bab0:	18c0      	addlt	r0, r0, r3
 800bab2:	4770      	bx	lr

0800bab4 <_read_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	4611      	mov	r1, r2
 800babc:	2200      	movs	r2, #0
 800babe:	4d05      	ldr	r5, [pc, #20]	; (800bad4 <_read_r+0x20>)
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f7f6 f943 	bl	8001d4e <_read>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_read_r+0x1e>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_read_r+0x1e>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	20004c18 	.word	0x20004c18

0800bad8 <_init>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr

0800bae4 <_fini>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	bf00      	nop
 800bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baea:	bc08      	pop	{r3}
 800baec:	469e      	mov	lr, r3
 800baee:	4770      	bx	lr
