
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008750  08008750  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008758  08008758  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a68  2000017c  080088dc  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001be4  080088dc  00021be4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010449  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc2  00000000  00000000  000305ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000333b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  000341c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018762  00000000  00000000  00034eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011501  00000000  00000000  0004d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeb0  00000000  00000000  0005eb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e99cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038fc  00000000  00000000  000e9a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000017c 	.word	0x2000017c
 8000158:	00000000 	.word	0x00000000
 800015c:	080086cc 	.word	0x080086cc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000180 	.word	0x20000180
 8000178:	080086cc 	.word	0x080086cc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
	//RXTransmit function
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049e:	f000 fa70 	bl	8000982 <HAL_Init>

	// CC1200 Packet Protocol
	// Standard FIFO Access : R/W B 1 1 1 1 1 1
	// Read=1, Write=0
	// Burst=1,Single=0;
	uint8_t ADDRESS_BYTE = 0x3F; // 0 0 1 1 1 1 1 1
 80004a2:	233f      	movs	r3, #63	; 0x3f
 80004a4:	71fb      	strb	r3, [r7, #7]
	uint8_t DATA_BYTE = 0xAA;    // 1 0 1 0 1 0 1 0
 80004a6:	23aa      	movs	r3, #170	; 0xaa
 80004a8:	71bb      	strb	r3, [r7, #6]
	uint8_t CC1200_TEST_PACKET[2] = {ADDRESS_BYTE, DATA_BYTE}; // write data to TX FIFO
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	713b      	strb	r3, [r7, #4]
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	717b      	strb	r3, [r7, #5]
	uint8_t CC1200_STATUS_BYTES[2]; // receive status information

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f825 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f8cf 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f8a3 	bl	8000604 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004be:	f000 f86b 	bl	8000598 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004c2:	f007 fc4d 	bl	8007d60 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // pull CS high
 80004c6:	2201      	movs	r2, #1
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	480b      	ldr	r0, [pc, #44]	; (80004f8 <main+0x60>)
 80004cc:	f000 fd66 	bl	8000f9c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//CDC_Transmit_FS("Hello World\r\n", sizeof("Hello World\r\n"));

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	4808      	ldr	r0, [pc, #32]	; (80004f8 <main+0x60>)
 80004d6:	f000 fd61 	bl	8000f9c <HAL_GPIO_WritePin>

		//HAL_SPI_Transmit(&hspi1, &TEST_PACKET, 1, 100);

		// CC1200 Data Packet Test
		HAL_SPI_TransmitReceive(&hspi1, CC1200_TEST_PACKET, CC1200_STATUS_BYTES, 2, HAL_MAX_DELAY);
 80004da:	463a      	mov	r2, r7
 80004dc:	1d39      	adds	r1, r7, #4
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2302      	movs	r3, #2
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x64>)
 80004e8:	f003 f833 	bl	8003552 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2140      	movs	r1, #64	; 0x40
 80004f0:	4801      	ldr	r0, [pc, #4]	; (80004f8 <main+0x60>)
 80004f2:	f000 fd53 	bl	8000f9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004f6:	e7eb      	b.n	80004d0 <main+0x38>
 80004f8:	40020400 	.word	0x40020400
 80004fc:	20000198 	.word	0x20000198

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b092      	sub	sp, #72	; 0x48
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2234      	movs	r2, #52	; 0x34
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 f8d4 	bl	80086bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <SystemClock_Config+0x94>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <SystemClock_Config+0x94>)
 800052c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000530:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000536:	2305      	movs	r3, #5
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000544:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000548:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800054a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800054e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4618      	mov	r0, r3
 8000556:	f002 f97d 	bl	8002854 <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000560:	f000 f8e8 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2303      	movs	r3, #3
 800056a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2101      	movs	r1, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fc99 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000588:	f000 f8d4 	bl	8000734 <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3748      	adds	r7, #72	; 0x48
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40007000 	.word	0x40007000

08000598 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_SPI1_Init+0x64>)
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <MX_SPI1_Init+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <MX_SPI1_Init+0x64>)
 80005a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_SPI1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_SPI1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_SPI1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_SPI1_Init+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_SPI1_Init+0x64>)
 80005c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_SPI1_Init+0x64>)
 80005cc:	2210      	movs	r2, #16
 80005ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MX_SPI1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_SPI1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <MX_SPI1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_SPI1_Init+0x64>)
 80005e4:	220a      	movs	r2, #10
 80005e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_SPI1_Init+0x64>)
 80005ea:	f002 ff29 	bl	8003440 <HAL_SPI_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005f4:	f000 f89e 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000198 	.word	0x20000198
 8000600:	40013000 	.word	0x40013000

08000604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_USART2_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800063c:	f003 f9f6 	bl	8003a2c <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f875 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200001f0 	.word	0x200001f0
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_GPIO_Init+0xd0>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a27      	ldr	r2, [pc, #156]	; (8000728 <MX_GPIO_Init+0xd0>)
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a21      	ldr	r2, [pc, #132]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2140      	movs	r1, #64	; 0x40
 80006d2:	4816      	ldr	r0, [pc, #88]	; (800072c <MX_GPIO_Init+0xd4>)
 80006d4:	f000 fc62 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 80006d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <MX_GPIO_Init+0xd8>)
 80006f0:	f000 fac4 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <MX_GPIO_Init+0xd4>)
 800070c:	f000 fab6 	bl	8000c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2028      	movs	r0, #40	; 0x28
 8000716:	f000 fa7a 	bl	8000c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071a:	2028      	movs	r0, #40	; 0x28
 800071c:	f000 fa93 	bl	8000c46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40020400 	.word	0x40020400
 8000730:	40020800 	.word	0x40020800

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_MspInit+0x5c>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <HAL_MspInit+0x5c>)
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_MspInit+0x5c>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x5c>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x5c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6213      	str	r3, [r2, #32]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x5c>)
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x5c>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x5c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6253      	str	r3, [r2, #36]	; 0x24
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x5c>)
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800078e:	2007      	movs	r0, #7
 8000790:	f000 fa32 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_SPI_MspInit+0x7c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d127      	bne.n	8000812 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_SPI_MspInit+0x80>)
 80007c4:	6a1b      	ldr	r3, [r3, #32]
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <HAL_SPI_MspInit+0x80>)
 80007c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007cc:	6213      	str	r3, [r2, #32]
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_SPI_MspInit+0x80>)
 80007d0:	6a1b      	ldr	r3, [r3, #32]
 80007d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_SPI_MspInit+0x80>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <HAL_SPI_MspInit+0x80>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_SPI_MspInit+0x80>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007f2:	23e0      	movs	r3, #224	; 0xe0
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000802:	2305      	movs	r3, #5
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_SPI_MspInit+0x84>)
 800080e:	f000 fa35 	bl	8000c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40013000 	.word	0x40013000
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_UART_MspInit+0x7c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d127      	bne.n	800089a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x80>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <HAL_UART_MspInit+0x80>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	6253      	str	r3, [r2, #36]	; 0x24
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0x80>)
 8000858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x80>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <HAL_UART_MspInit+0x80>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_UART_MspInit+0x80>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087a:	230c      	movs	r3, #12
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088a:	2307      	movs	r3, #7
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_UART_MspInit+0x84>)
 8000896:	f000 f9f1 	bl	8000c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 f897 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <USB_LP_IRQHandler+0x10>)
 8000906:	f000 fc7d 	bl	8001204 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200016d8 	.word	0x200016d8

08000914 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000918:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800091c:	f000 fb56 	bl	8000fcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000920:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000924:	f000 fb52 	bl	8000fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095e:	f7ff ffe5 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f007 fe87 	bl	8008674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff fd97 	bl	8000498 <main>
  bx lr
 800096a:	4770      	bx	lr
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000974:	08008760 	.word	0x08008760
  ldr r2, =_sbss
 8000978:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800097c:	20001be4 	.word	0x20001be4

08000980 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_IRQHandler>

08000982 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f933 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f80e 	bl	80009b4 <HAL_InitTick>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e001      	b.n	80009a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a4:	f7ff fecc 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_InitTick+0x68>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d022      	beq.n	8000a0e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_InitTick+0x6c>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_InitTick+0x68>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f940 	bl	8000c62 <HAL_SYSTICK_Config>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10f      	bne.n	8000a08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d809      	bhi.n	8000a02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	2200      	movs	r2, #0
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295
 80009f6:	f000 f90a 	bl	8000c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_InitTick+0x70>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e007      	b.n	8000a12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e004      	b.n	8000a12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e001      	b.n	8000a12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x1c>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <HAL_IncTick+0x1c>)
 8000a38:	6013      	str	r3, [r2, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000234 	.word	0x20000234
 8000a48:	20000008 	.word	0x20000008

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <HAL_GetTick+0x10>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000234 	.word	0x20000234

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4906      	ldr	r1, [pc, #24]	; (8000af8 <__NVIC_EnableIRQ+0x34>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff90 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff2d 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff42 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff90 	bl	8000b50 <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5f 	bl	8000afc <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff35 	bl	8000ac4 <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa2 	bl	8000bb4 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c92:	e160      	b.n	8000f56 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 8152 	beq.w	8000f50 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d005      	beq.n	8000cc4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d130      	bne.n	8000d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	f003 0201 	and.w	r2, r3, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d017      	beq.n	8000d62 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d123      	bne.n	8000db6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	6939      	ldr	r1, [r7, #16]
 8000db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0203 	and.w	r2, r3, #3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 80ac 	beq.w	8000f50 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df8:	4b5e      	ldr	r3, [pc, #376]	; (8000f74 <HAL_GPIO_Init+0x2f8>)
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	4a5d      	ldr	r2, [pc, #372]	; (8000f74 <HAL_GPIO_Init+0x2f8>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6213      	str	r3, [r2, #32]
 8000e04:	4b5b      	ldr	r3, [pc, #364]	; (8000f74 <HAL_GPIO_Init+0x2f8>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e10:	4a59      	ldr	r2, [pc, #356]	; (8000f78 <HAL_GPIO_Init+0x2fc>)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a51      	ldr	r2, [pc, #324]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d025      	beq.n	8000e88 <HAL_GPIO_Init+0x20c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a50      	ldr	r2, [pc, #320]	; (8000f80 <HAL_GPIO_Init+0x304>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d01f      	beq.n	8000e84 <HAL_GPIO_Init+0x208>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_GPIO_Init+0x308>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d019      	beq.n	8000e80 <HAL_GPIO_Init+0x204>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <HAL_GPIO_Init+0x30c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_Init+0x200>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_GPIO_Init+0x310>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x1fc>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <HAL_GPIO_Init+0x314>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x1f8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <HAL_GPIO_Init+0x318>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x1f4>
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	e00c      	b.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e70:	2307      	movs	r3, #7
 8000e72:	e00a      	b.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e74:	2305      	movs	r3, #5
 8000e76:	e008      	b.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e006      	b.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e004      	b.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	f002 0203 	and.w	r2, r2, #3
 8000e90:	0092      	lsls	r2, r2, #2
 8000e92:	4093      	lsls	r3, r2
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e9a:	4937      	ldr	r1, [pc, #220]	; (8000f78 <HAL_GPIO_Init+0x2fc>)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ecc:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef6:	4a28      	ldr	r2, [pc, #160]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f47f ae97 	bne.w	8000c94 <HAL_GPIO_Init+0x18>
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa4a 	bl	8000484 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	b08b      	sub	sp, #44	; 0x2c
 8001000:	af06      	add	r7, sp, #24
 8001002:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0d0      	b.n	80011b0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f007 f886 	bl	8008134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fe41 	bl	8003cbc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e04c      	b.n	80010da <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	3301      	adds	r3, #1
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	b298      	uxth	r0, r3
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3336      	adds	r3, #54	; 0x36
 800107e:	4602      	mov	r2, r0
 8001080:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	3303      	adds	r3, #3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	3338      	adds	r3, #56	; 0x38
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	333c      	adds	r3, #60	; 0x3c
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	3340      	adds	r3, #64	; 0x40
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	3301      	adds	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3ad      	bcc.n	8001040 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e044      	b.n	8001174 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3b5      	bcc.n	80010ea <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	687e      	ldr	r6, [r7, #4]
 8001186:	466d      	mov	r5, sp
 8001188:	f106 0410 	add.w	r4, r6, #16
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	602b      	str	r3, [r5, #0]
 8001194:	1d33      	adds	r3, r6, #4
 8001196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f002 fda9 	bl	8003cf0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_PCD_Start+0x16>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e016      	b.n	80011fc <HAL_PCD_Start+0x44>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fd58 	bl	8003c90 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011e0:	2101      	movs	r1, #1
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f006 ff88 	bl	80080f8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 fa3d 	bl	800666c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f005 fa35 	bl	8006680 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001220:	d102      	bne.n	8001228 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 faf5 	bl	8001812 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f005 fa27 	bl	8006680 <USB_ReadInterrupts>
 8001232:	4603      	mov	r3, r0
 8001234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123c:	d112      	bne.n	8001264 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001250:	b292      	uxth	r2, r2
 8001252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f006 ffe7 	bl	800822a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800125c:	2100      	movs	r1, #0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f8c7 	bl	80013f2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f005 fa09 	bl	8006680 <USB_ReadInterrupts>
 800126e:	4603      	mov	r3, r0
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001278:	d10b      	bne.n	8001292 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800128c:	b292      	uxth	r2, r2
 800128e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f005 f9f2 	bl	8006680 <USB_ReadInterrupts>
 800129c:	4603      	mov	r3, r0
 800129e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012a6:	d10b      	bne.n	80012c0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012ba:	b292      	uxth	r2, r2
 80012bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 f9db 	bl	8006680 <USB_ReadInterrupts>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d4:	d126      	bne.n	8001324 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012de:	b29a      	uxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0204 	bic.w	r2, r2, #4
 80012e8:	b292      	uxth	r2, r2
 80012ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0208 	bic.w	r2, r2, #8
 8001300:	b292      	uxth	r2, r2
 8001302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f006 ffc8 	bl	800829c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800131e:	b292      	uxth	r2, r2
 8001320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f005 f9a9 	bl	8006680 <USB_ReadInterrupts>
 800132e:	4603      	mov	r3, r0
 8001330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001338:	d126      	bne.n	8001388 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0208 	orr.w	r2, r2, #8
 800134c:	b292      	uxth	r2, r2
 800134e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135a:	b29a      	uxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001364:	b292      	uxth	r2, r2
 8001366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	b292      	uxth	r2, r2
 800137e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f006 ff70 	bl	8008268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f005 f977 	bl	8006680 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139c:	d10e      	bne.n	80013bc <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 ff29 	bl	800820e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 f95d 	bl	8006680 <USB_ReadInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d0:	d10b      	bne.n	80013ea <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013e4:	b292      	uxth	r2, r2
 80013e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_PCD_SetAddress+0x1a>
 8001408:	2302      	movs	r3, #2
 800140a:	e013      	b.n	8001434 <HAL_PCD_SetAddress+0x42>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f005 f90e 	bl	8006646 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4603      	mov	r3, r0
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	460b      	mov	r3, r1
 8001450:	803b      	strh	r3, [r7, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800145a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800145e:	2b00      	cmp	r3, #0
 8001460:	da0e      	bge.n	8001480 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2201      	movs	r2, #1
 800147c:	705a      	strb	r2, [r3, #1]
 800147e:	e00e      	b.n	800149e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	f003 0207 	and.w	r2, r3, #7
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014aa:	883a      	ldrh	r2, [r7, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	78ba      	ldrb	r2, [r7, #2]
 80014b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014c8:	78bb      	ldrb	r3, [r7, #2]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d102      	bne.n	80014d4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_PCD_EP_Open+0xa6>
 80014de:	2302      	movs	r3, #2
 80014e0:	e00e      	b.n	8001500 <HAL_PCD_EP_Open+0xc4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68f9      	ldr	r1, [r7, #12]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fc1d 	bl	8003d30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80014fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da0e      	bge.n	800153a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	705a      	strb	r2, [r3, #1]
 8001538:	e00e      	b.n	8001558 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	f003 0207 	and.w	r2, r3, #7
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_PCD_EP_Close+0x6a>
 800156e:	2302      	movs	r3, #2
 8001570:	e00e      	b.n	8001590 <HAL_PCD_EP_Close+0x88>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	4618      	mov	r0, r3
 8001582:	f002 ff3f 	bl	8004404 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	f003 0207 	and.w	r2, r3, #7
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2200      	movs	r2, #0
 80015d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 f8f1 	bl	80047dc <USB_EPStartXfer>
 80015fa:	e005      	b.n	8001608 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6979      	ldr	r1, [r7, #20]
 8001602:	4618      	mov	r0, r3
 8001604:	f003 f8ea 	bl	80047dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	f003 0207 	and.w	r2, r3, #7
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001634:	681b      	ldr	r3, [r3, #0]
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	460b      	mov	r3, r1
 800164e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2201      	movs	r2, #1
 800168a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	b2da      	uxtb	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6979      	ldr	r1, [r7, #20]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 f897 	bl	80047dc <USB_EPStartXfer>
 80016ae:	e005      	b.n	80016bc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6979      	ldr	r1, [r7, #20]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f890 	bl	80047dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	f003 0207 	and.w	r2, r3, #7
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d901      	bls.n	80016e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e03e      	b.n	8001762 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0e      	bge.n	800170a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	705a      	strb	r2, [r3, #1]
 8001708:	e00c      	b.n	8001724 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	b2da      	uxtb	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_PCD_EP_SetStall+0x7e>
 8001740:	2302      	movs	r3, #2
 8001742:	e00e      	b.n	8001762 <HAL_PCD_EP_SetStall+0x9c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fe7a 	bl	800644c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	f003 020f 	and.w	r2, r3, #15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	d901      	bls.n	8001788 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e040      	b.n	800180a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da0e      	bge.n	80017ae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	705a      	strb	r2, [r3, #1]
 80017ac:	e00e      	b.n	80017cc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	f003 0207 	and.w	r2, r3, #7
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_EP_ClrStall+0x82>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e00e      	b.n	800180a <HAL_PCD_EP_ClrStall+0xa0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68f9      	ldr	r1, [r7, #12]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 fe76 	bl	80064ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b08e      	sub	sp, #56	; 0x38
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800181a:	e2ec      	b.n	8001df6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001824:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001832:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 8161 	bne.w	8001afe <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800183c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d152      	bne.n	80018ec <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001856:	81fb      	strh	r3, [r7, #14]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001866:	b29b      	uxth	r3, r3
 8001868:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3328      	adds	r3, #40	; 0x28
 800186e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001878:	b29b      	uxth	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	3302      	adds	r3, #2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	441a      	add	r2, r3
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018aa:	2100      	movs	r1, #0
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f006 fc94 	bl	80081da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 829b 	beq.w	8001df6 <PCD_EP_ISR_Handler+0x5e4>
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f040 8296 	bne.w	8001df6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b292      	uxth	r2, r2
 80018de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018ea:	e284      	b.n	8001df6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001902:	2b00      	cmp	r3, #0
 8001904:	d034      	beq.n	8001970 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800190e:	b29b      	uxth	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	3306      	adds	r3, #6
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	4413      	add	r3, r2
 8001924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001944:	b29b      	uxth	r3, r3
 8001946:	f004 feef 	bl	8006728 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29a      	uxth	r2, r3
 8001952:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001956:	4013      	ands	r3, r2
 8001958:	823b      	strh	r3, [r7, #16]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	8a3a      	ldrh	r2, [r7, #16]
 8001960:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001964:	b292      	uxth	r2, r2
 8001966:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f006 fc09 	bl	8008180 <HAL_PCD_SetupStageCallback>
 800196e:	e242      	b.n	8001df6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001970:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001974:	2b00      	cmp	r3, #0
 8001976:	f280 823e 	bge.w	8001df6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29a      	uxth	r2, r3
 8001982:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001986:	4013      	ands	r3, r2
 8001988:	83bb      	strh	r3, [r7, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	8bba      	ldrh	r2, [r7, #28]
 8001990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001994:	b292      	uxth	r2, r2
 8001996:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	3306      	adds	r3, #6
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d019      	beq.n	8001a00 <PCD_EP_ISR_Handler+0x1ee>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d015      	beq.n	8001a00 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	6959      	ldr	r1, [r3, #20]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	f004 fe9f 	bl	8006728 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	441a      	add	r2, r3
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019f8:	2100      	movs	r1, #0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f006 fbd2 	bl	80081a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 81f2 	bne.w	8001df6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4413      	add	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d112      	bne.n	8001a60 <PCD_EP_ISR_Handler+0x24e>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	801a      	strh	r2, [r3, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	801a      	strh	r2, [r3, #0]
 8001a5e:	e02f      	b.n	8001ac0 <PCD_EP_ISR_Handler+0x2ae>
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b3e      	cmp	r3, #62	; 0x3e
 8001a66:	d813      	bhi.n	8001a90 <PCD_EP_ISR_Handler+0x27e>
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <PCD_EP_ISR_Handler+0x270>
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	3301      	adds	r3, #1
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	801a      	strh	r2, [r3, #0]
 8001a8e:	e017      	b.n	8001ac0 <PCD_EP_ISR_Handler+0x2ae>
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <PCD_EP_ISR_Handler+0x298>
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad0:	827b      	strh	r3, [r7, #18]
 8001ad2:	8a7b      	ldrh	r3, [r7, #18]
 8001ad4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ad8:	827b      	strh	r3, [r7, #18]
 8001ada:	8a7b      	ldrh	r3, [r7, #18]
 8001adc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ae0:	827b      	strh	r3, [r7, #18]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	8a7b      	ldrh	r3, [r7, #18]
 8001ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	8013      	strh	r3, [r2, #0]
 8001afc:	e17b      	b.n	8001df6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b10:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f280 80ea 	bge.w	8001cee <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b30:	4013      	ands	r3, r2
 8001b32:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b4c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	7b1b      	ldrb	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d122      	bne.n	8001bb0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3306      	adds	r3, #6
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b92:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001b94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8087 	beq.w	8001caa <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	6959      	ldr	r1, [r3, #20]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	88da      	ldrh	r2, [r3, #6]
 8001ba8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001baa:	f004 fdbd 	bl	8006728 <USB_ReadPMA>
 8001bae:	e07c      	b.n	8001caa <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	78db      	ldrb	r3, [r3, #3]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d108      	bne.n	8001bca <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bba:	461a      	mov	r2, r3
 8001bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f927 	bl	8001e12 <HAL_PCD_EP_DB_Receive>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001bc8:	e06f      	b.n	8001caa <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	441a      	add	r2, r3
 8001bf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d021      	beq.n	8001c68 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c4c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001c4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d02a      	beq.n	8001caa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	6959      	ldr	r1, [r3, #20]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	891a      	ldrh	r2, [r3, #8]
 8001c60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c62:	f004 fd61 	bl	8006728 <USB_ReadPMA>
 8001c66:	e020      	b.n	8001caa <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3306      	adds	r3, #6
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c90:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001c92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	6959      	ldr	r1, [r3, #20]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	895a      	ldrh	r2, [r3, #10]
 8001ca4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ca6:	f004 fd3f 	bl	8006728 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cb0:	441a      	add	r2, r3
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cbc:	441a      	add	r2, r3
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <PCD_EP_ISR_Handler+0x4c2>
 8001cca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d206      	bcs.n	8001ce2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f006 fa62 	bl	80081a4 <HAL_PCD_DataOutStageCallback>
 8001ce0:	e005      	b.n	8001cee <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fd77 	bl	80047dc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001cee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d07e      	beq.n	8001df6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001cf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	843b      	strh	r3, [r7, #32]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	441a      	add	r2, r3
 8001d36:	8c3b      	ldrh	r3, [r7, #32]
 8001d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d00c      	beq.n	8001d66 <PCD_EP_ISR_Handler+0x554>
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	78db      	ldrb	r3, [r3, #3]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d146      	bne.n	8001dea <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d141      	bne.n	8001dea <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d8e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	8bfb      	ldrh	r3, [r7, #30]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d906      	bls.n	8001da8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	8bfb      	ldrh	r3, [r7, #30]
 8001da0:	1ad2      	subs	r2, r2, r3
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	619a      	str	r2, [r3, #24]
 8001da6:	e002      	b.n	8001dae <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f006 fa0c 	bl	80081da <HAL_PCD_DataInStageCallback>
 8001dc2:	e018      	b.n	8001df6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	8bfb      	ldrh	r3, [r7, #30]
 8001dca:	441a      	add	r2, r3
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	8bfb      	ldrh	r3, [r7, #30]
 8001dd6:	441a      	add	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fcfa 	bl	80047dc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001de8:	e005      	b.n	8001df6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001dea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dec:	461a      	mov	r2, r3
 8001dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f91b 	bl	800202c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f6ff ad0a 	blt.w	800181c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3738      	adds	r7, #56	; 0x38
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b088      	sub	sp, #32
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d07e      	beq.n	8001f28 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	8b7b      	ldrh	r3, [r7, #26]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d306      	bcc.n	8001e6c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	8b7b      	ldrh	r3, [r7, #26]
 8001e64:	1ad2      	subs	r2, r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	619a      	str	r2, [r3, #24]
 8001e6a:	e002      	b.n	8001e72 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d123      	bne.n	8001ec2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e94:	833b      	strh	r3, [r7, #24]
 8001e96:	8b3b      	ldrh	r3, [r7, #24]
 8001e98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e9c:	833b      	strh	r3, [r7, #24]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	441a      	add	r2, r3
 8001eac:	8b3b      	ldrh	r3, [r7, #24]
 8001eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01f      	beq.n	8001f0c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	82fb      	strh	r3, [r7, #22]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	441a      	add	r2, r3
 8001ef6:	8afb      	ldrh	r3, [r7, #22]
 8001ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f0c:	8b7b      	ldrh	r3, [r7, #26]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	6959      	ldr	r1, [r3, #20]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	891a      	ldrh	r2, [r3, #8]
 8001f20:	8b7b      	ldrh	r3, [r7, #26]
 8001f22:	f004 fc01 	bl	8006728 <USB_ReadPMA>
 8001f26:	e07c      	b.n	8002022 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3306      	adds	r3, #6
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	8b7b      	ldrh	r3, [r7, #26]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d306      	bcc.n	8001f6a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	8b7b      	ldrh	r3, [r7, #26]
 8001f62:	1ad2      	subs	r2, r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	e002      	b.n	8001f70 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d123      	bne.n	8001fc0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f92:	83fb      	strh	r3, [r7, #30]
 8001f94:	8bfb      	ldrh	r3, [r7, #30]
 8001f96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f9a:	83fb      	strh	r3, [r7, #30]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	8bfb      	ldrh	r3, [r7, #30]
 8001fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11f      	bne.n	800200a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe4:	83bb      	strh	r3, [r7, #28]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	441a      	add	r2, r3
 8001ff4:	8bbb      	ldrh	r3, [r7, #28]
 8001ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002006:	b29b      	uxth	r3, r3
 8002008:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800200a:	8b7b      	ldrh	r3, [r7, #26]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	6959      	ldr	r1, [r3, #20]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	895a      	ldrh	r2, [r3, #10]
 800201c:	8b7b      	ldrh	r3, [r7, #26]
 800201e:	f004 fb83 	bl	8006728 <USB_ReadPMA>
    }
  }

  return count;
 8002022:	8b7b      	ldrh	r3, [r7, #26]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0a2      	sub	sp, #136	; 0x88
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 81c7 	beq.w	80023d4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	3302      	adds	r3, #2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800207a:	429a      	cmp	r2, r3
 800207c:	d907      	bls.n	800208e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	619a      	str	r2, [r3, #24]
 800208c:	e002      	b.n	8002094 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f040 80b9 	bne.w	8002210 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d126      	bne.n	80020f4 <HAL_PCD_EP_DB_Transmit+0xc8>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	4413      	add	r3, r2
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	011a      	lsls	r2, r3, #4
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020d8:	b29a      	uxth	r2, r3
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	e01a      	b.n	800212a <HAL_PCD_EP_DB_Transmit+0xfe>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d116      	bne.n	800212a <HAL_PCD_EP_DB_Transmit+0xfe>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002110:	4413      	add	r3, r2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	011a      	lsls	r2, r3, #4
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	4413      	add	r3, r2
 800211e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	2200      	movs	r2, #0
 8002128:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d126      	bne.n	8002186 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4413      	add	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	011a      	lsls	r2, r3, #4
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800216a:	b29a      	uxth	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800217e:	b29a      	uxth	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	e017      	b.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d113      	bne.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	4413      	add	r3, r2
 800219e:	623b      	str	r3, [r7, #32]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	011a      	lsls	r2, r3, #4
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	4413      	add	r3, r2
 80021aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2200      	movs	r2, #0
 80021b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f006 f80c 	bl	80081da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 82d4 	beq.w	8002776 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e8:	827b      	strh	r3, [r7, #18]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	8a7b      	ldrh	r3, [r7, #18]
 80021fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	b29b      	uxth	r3, r3
 800220c:	8013      	strh	r3, [r2, #0]
 800220e:	e2b2      	b.n	8002776 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d021      	beq.n	800225e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002234:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	441a      	add	r2, r3
 8002246:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800224a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800224e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225a:	b29b      	uxth	r3, r3
 800225c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002264:	2b01      	cmp	r3, #1
 8002266:	f040 8286 	bne.w	8002776 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002272:	441a      	add	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002280:	441a      	add	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	d309      	bcc.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6a1a      	ldr	r2, [r3, #32]
 800229c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	621a      	str	r2, [r3, #32]
 80022a4:	e015      	b.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80022ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022bc:	e009      	b.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d155      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0x35a>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	4413      	add	r3, r2
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	011a      	lsls	r2, r3, #4
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
 8002302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002304:	2b00      	cmp	r3, #0
 8002306:	d112      	bne.n	800232e <HAL_PCD_EP_DB_Transmit+0x302>
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002312:	b29a      	uxth	r2, r3
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	801a      	strh	r2, [r3, #0]
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002326:	b29a      	uxth	r2, r3
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	e047      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x392>
 800232e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002330:	2b3e      	cmp	r3, #62	; 0x3e
 8002332:	d811      	bhi.n	8002358 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	64bb      	str	r3, [r7, #72]	; 0x48
 800233a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_PCD_EP_DB_Transmit+0x31e>
 8002344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002346:	3301      	adds	r3, #1
 8002348:	64bb      	str	r3, [r7, #72]	; 0x48
 800234a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234c:	b29b      	uxth	r3, r3
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	b29a      	uxth	r2, r3
 8002352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	e032      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x392>
 8002358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	64bb      	str	r3, [r7, #72]	; 0x48
 800235e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <HAL_PCD_EP_DB_Transmit+0x342>
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	3b01      	subs	r3, #1
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
 800236e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002370:	b29b      	uxth	r3, r3
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	b29b      	uxth	r3, r3
 8002376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237e:	b29a      	uxth	r2, r3
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	e01b      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x392>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d117      	bne.n	80023be <HAL_PCD_EP_DB_Transmit+0x392>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a2:	4413      	add	r3, r2
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	011a      	lsls	r2, r3, #4
 80023ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ae:	4413      	add	r3, r2
 80023b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	6959      	ldr	r1, [r3, #20]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	891a      	ldrh	r2, [r3, #8]
 80023ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f004 f966 	bl	800669e <USB_WritePMA>
 80023d2:	e1d0      	b.n	8002776 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	3306      	adds	r3, #6
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002408:	429a      	cmp	r2, r3
 800240a:	d307      	bcc.n	800241c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002414:	1ad2      	subs	r2, r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	619a      	str	r2, [r3, #24]
 800241a:	e002      	b.n	8002422 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 80c4 	bne.w	80025b4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d126      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0x456>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	4413      	add	r3, r2
 800244a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	011a      	lsls	r2, r3, #4
 8002452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002454:	4413      	add	r3, r2
 8002456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800245a:	66bb      	str	r3, [r7, #104]	; 0x68
 800245c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002466:	b29a      	uxth	r2, r3
 8002468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247a:	b29a      	uxth	r2, r3
 800247c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	e01a      	b.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	785b      	ldrb	r3, [r3, #1]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d116      	bne.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x48c>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	677b      	str	r3, [r7, #116]	; 0x74
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249e:	4413      	add	r3, r2
 80024a0:	677b      	str	r3, [r7, #116]	; 0x74
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	011a      	lsls	r2, r3, #4
 80024a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024aa:	4413      	add	r3, r2
 80024ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024b0:	673b      	str	r3, [r7, #112]	; 0x70
 80024b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b4:	2200      	movs	r2, #0
 80024b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d12f      	bne.n	8002526 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024de:	4413      	add	r3, r2
 80024e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ee:	4413      	add	r3, r2
 80024f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002504:	b29a      	uxth	r2, r3
 8002506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800250a:	801a      	strh	r2, [r3, #0]
 800250c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251c:	b29a      	uxth	r2, r3
 800251e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002522:	801a      	strh	r2, [r3, #0]
 8002524:	e017      	b.n	8002556 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d113      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x52a>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253c:	4413      	add	r3, r2
 800253e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	011a      	lsls	r2, r3, #4
 8002546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002548:	4413      	add	r3, r2
 800254a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800254e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002552:	2200      	movs	r2, #0
 8002554:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f005 fe3c 	bl	80081da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 8104 	bne.w	8002776 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002588:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	441a      	add	r2, r3
 800259a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800259e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	8013      	strh	r3, [r2, #0]
 80025b2:	e0e0      	b.n	8002776 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d121      	bne.n	8002602 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fe:	b29b      	uxth	r3, r3
 8002600:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002608:	2b01      	cmp	r3, #1
 800260a:	f040 80b4 	bne.w	8002776 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002616:	441a      	add	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002624:	441a      	add	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	429a      	cmp	r2, r3
 8002634:	d309      	bcc.n	800264a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	621a      	str	r2, [r3, #32]
 8002648:	e015      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002652:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002656:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002660:	e009      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2200      	movs	r2, #0
 800266c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	667b      	str	r3, [r7, #100]	; 0x64
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d155      	bne.n	8002730 <HAL_PCD_EP_DB_Transmit+0x704>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002698:	4413      	add	r3, r2
 800269a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	011a      	lsls	r2, r3, #4
 80026a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a4:	4413      	add	r3, r2
 80026a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80026b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	e044      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x736>
 80026d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026da:	2b3e      	cmp	r3, #62	; 0x3e
 80026dc:	d811      	bhi.n	8002702 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80026de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	657b      	str	r3, [r7, #84]	; 0x54
 80026e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	3301      	adds	r3, #1
 80026f2:	657b      	str	r3, [r7, #84]	; 0x54
 80026f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	e02f      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x736>
 8002702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	657b      	str	r3, [r7, #84]	; 0x54
 8002708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	3b01      	subs	r3, #1
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	b29b      	uxth	r3, r3
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	b29b      	uxth	r3, r3
 8002720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002728:	b29a      	uxth	r2, r3
 800272a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	e018      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x736>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d114      	bne.n	8002762 <HAL_PCD_EP_DB_Transmit+0x736>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002746:	4413      	add	r3, r2
 8002748:	667b      	str	r3, [r7, #100]	; 0x64
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	011a      	lsls	r2, r3, #4
 8002750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002752:	4413      	add	r3, r2
 8002754:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002758:	663b      	str	r3, [r7, #96]	; 0x60
 800275a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275c:	b29a      	uxth	r2, r3
 800275e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002760:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	6959      	ldr	r1, [r3, #20]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	895a      	ldrh	r2, [r3, #10]
 800276e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002770:	b29b      	uxth	r3, r3
 8002772:	f003 ff94 	bl	800669e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002790:	823b      	strh	r3, [r7, #16]
 8002792:	8a3b      	ldrh	r3, [r7, #16]
 8002794:	f083 0310 	eor.w	r3, r3, #16
 8002798:	823b      	strh	r3, [r7, #16]
 800279a:	8a3b      	ldrh	r3, [r7, #16]
 800279c:	f083 0320 	eor.w	r3, r3, #32
 80027a0:	823b      	strh	r3, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	8a3b      	ldrh	r3, [r7, #16]
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3788      	adds	r7, #136	; 0x88
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	4613      	mov	r3, r2
 80027e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027e2:	897b      	ldrh	r3, [r7, #10]
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	897b      	ldrh	r3, [r7, #10]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4413      	add	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e009      	b.n	800281a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002806:	897a      	ldrh	r2, [r7, #10]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800281a:	893b      	ldrh	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2200      	movs	r2, #0
 8002824:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	b29a      	uxth	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	80da      	strh	r2, [r3, #6]
 800282e:	e00b      	b.n	8002848 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2201      	movs	r2, #1
 8002834:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	b29a      	uxth	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b29a      	uxth	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e31d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4b94      	ldr	r3, [pc, #592]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002870:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d07b      	beq.n	800297e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d006      	beq.n	800289a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d10b      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06a      	beq.n	800297c <HAL_RCC_OscConfig+0x128>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d166      	bne.n	800297c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e2f7      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x74>
 80028ba:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7e      	ldr	r2, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e02d      	b.n	8002924 <HAL_RCC_OscConfig+0xd0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x96>
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a78      	ldr	r2, [pc, #480]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0xd0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0xb8>
 80028f2:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a70      	ldr	r2, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6d      	ldr	r2, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xd0>
 800290c:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a66      	ldr	r2, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe f88e 	bl	8000a4c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe f88a 	bl	8000a4c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e2ad      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xe0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe f87a 	bl	8000a4c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe f876 	bl	8000a4c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e299      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x108>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d05a      	beq.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d005      	beq.n	800299c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d119      	bne.n	80029ca <HAL_RCC_OscConfig+0x176>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x160>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e276      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	493d      	ldr	r1, [pc, #244]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c8:	e03a      	b.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d020      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d2:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_RCC_OscConfig+0x268>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f838 	bl	8000a4c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7fe f834 	bl	8000a4c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e257      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	492a      	ldr	r1, [pc, #168]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_RCC_OscConfig+0x268>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f817 	bl	8000a4c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a22:	f7fe f813 	bl	8000a4c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e236      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80b8 	beq.w	8002bbe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d170      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x218>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e21a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d921      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fc7d 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e208      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	4901      	ldr	r1, [pc, #4]	; (8002ab8 <HAL_RCC_OscConfig+0x264>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
 8002ab6:	e020      	b.n	8002afa <HAL_RCC_OscConfig+0x2a6>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac0:	4b99      	ldr	r3, [pc, #612]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4996      	ldr	r1, [pc, #600]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad2:	4b95      	ldr	r3, [pc, #596]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	4991      	ldr	r1, [pc, #580]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fc48 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1d3      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	0b5b      	lsrs	r3, r3, #13
 8002b00:	3301      	adds	r3, #1
 8002b02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b0a:	4a87      	ldr	r2, [pc, #540]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b0c:	6892      	ldr	r2, [r2, #8]
 8002b0e:	0912      	lsrs	r2, r2, #4
 8002b10:	f002 020f 	and.w	r2, r2, #15
 8002b14:	4985      	ldr	r1, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x4d8>)
 8002b16:	5c8a      	ldrb	r2, [r1, r2]
 8002b18:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b1a:	4a85      	ldr	r2, [pc, #532]	; (8002d30 <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HAL_RCC_OscConfig+0x4e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd ff46 	bl	80009b4 <HAL_InitTick>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d045      	beq.n	8002bbe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	e1b5      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d029      	beq.n	8002b92 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b3e:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <HAL_RCC_OscConfig+0x4e4>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fd ff82 	bl	8000a4c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4c:	f7fd ff7e 	bl	8000a4c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1a1      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b5e:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6a:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	496c      	ldr	r1, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7c:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	4967      	ldr	r1, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b92:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x4e4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fd ff58 	bl	8000a4c <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba0:	f7fd ff54 	bl	8000a4c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e177      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d030      	beq.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7fd ff38 	bl	8000a4c <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be0:	f7fd ff34 	bl	8000a4c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e157      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x38c>
 8002bfe:	e015      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fd ff21 	bl	8000a4c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7fd ff1d 	bl	8000a4c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e140      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80b5 	beq.w	8002da4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6253      	str	r3, [r2, #36]	; 0x24
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a32      	ldr	r2, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fd fee5 	bl	8000a4c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fd fee1 	bl	8000a4c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e104      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x466>
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6353      	str	r3, [r2, #52]	; 0x34
 8002cb8:	e02d      	b.n	8002d16 <HAL_RCC_OscConfig+0x4c2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x488>
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ccc:	6353      	str	r3, [r2, #52]	; 0x34
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cd8:	6353      	str	r3, [r2, #52]	; 0x34
 8002cda:	e01c      	b.n	8002d16 <HAL_RCC_OscConfig+0x4c2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4aa>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cee:	6353      	str	r3, [r2, #52]	; 0x34
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6353      	str	r3, [r2, #52]	; 0x34
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4c2>
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d08:	6353      	str	r3, [r2, #52]	; 0x34
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	4a06      	ldr	r2, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x4d4>)
 8002d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d14:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d024      	beq.n	8002d68 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fd fe95 	bl	8000a4c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d24:	e019      	b.n	8002d5a <HAL_RCC_OscConfig+0x506>
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08008738 	.word	0x08008738
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004
 8002d38:	42470020 	.word	0x42470020
 8002d3c:	42470680 	.word	0x42470680
 8002d40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7fd fe82 	bl	8000a4c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0a3      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ee      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4f0>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fd fe70 	bl	8000a4c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fd fe6c 	bl	8000a4c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e08d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ee      	bne.n	8002d70 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d98:	4b44      	ldr	r3, [pc, #272]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	4a43      	ldr	r2, [pc, #268]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d079      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d056      	beq.n	8002e60 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d13b      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x65c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fd fe44 	bl	8000a4c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fd fe40 	bl	8000a4c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e063      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	4319      	orrs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	492b      	ldr	r1, [pc, #172]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x65c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fd fe1f 	bl	8000a4c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fd fe1b 	bl	8000a4c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e03e      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x5be>
 8002e30:	e036      	b.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_RCC_OscConfig+0x65c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fd fe08 	bl	8000a4c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fd fe04 	bl	8000a4c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e027      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5ec>
 8002e5e:	e01f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_RCC_OscConfig+0x658>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	42470060 	.word	0x42470060

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e11a      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d919      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x34>
 8002edc:	4b8a      	ldr	r3, [pc, #552]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a89      	ldr	r2, [pc, #548]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b87      	ldr	r3, [pc, #540]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 0201 	bic.w	r2, r3, #1
 8002ef0:	4985      	ldr	r1, [pc, #532]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0f9      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	497a      	ldr	r1, [pc, #488]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 808e 	beq.w	8003052 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3e:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0d7      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f56:	4b6d      	ldr	r3, [pc, #436]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0cb      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0bf      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f7e:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0b7      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	495c      	ldr	r1, [pc, #368]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fd fd54 	bl	8000a4c <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d112      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7fd fd4c 	bl	8000a4c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e09b      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc6:	4b51      	ldr	r3, [pc, #324]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d1ee      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xfc>
 8002fd2:	e03e      	b.n	8003052 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d112      	bne.n	8003002 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fde:	f7fd fd35 	bl	8000a4c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e084      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d1ee      	bne.n	8002fde <HAL_RCC_ClockConfig+0x12a>
 8003000:	e027      	b.n	8003052 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d11d      	bne.n	8003046 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fd fd1e 	bl	8000a4c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e06d      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_ClockConfig+0x158>
 800302e:	e010      	b.n	8003052 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7fd fd0c 	bl	8000a4c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e05b      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ee      	bne.n	8003030 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003052:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d219      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d105      	bne.n	8003072 <HAL_RCC_ClockConfig+0x1be>
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a27      	ldr	r2, [pc, #156]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	4923      	ldr	r1, [pc, #140]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_RCC_ClockConfig+0x254>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e034      	b.n	80030fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4917      	ldr	r1, [pc, #92]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	490f      	ldr	r1, [pc, #60]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d2:	f000 f823 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_ClockConfig+0x258>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	490b      	ldr	r1, [pc, #44]	; (8003110 <HAL_RCC_ClockConfig+0x25c>)
 80030e4:	5ccb      	ldrb	r3, [r1, r3]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x264>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fc5e 	bl	80009b4 <HAL_InitTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80030fc:	7afb      	ldrb	r3, [r7, #11]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00
 800310c:	40023800 	.word	0x40023800
 8003110:	08008738 	.word	0x08008738
 8003114:	20000000 	.word	0x20000000
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003120:	b092      	sub	sp, #72	; 0x48
 8003122:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d00d      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x34>
 8003134:	2b0c      	cmp	r3, #12
 8003136:	f200 80d5 	bhi.w	80032e4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x28>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x2e>
 8003142:	e0cf      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003148:	e0da      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314a:	4b72      	ldr	r3, [pc, #456]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800314e:	e0d7      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800315e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003160:	0d9b      	lsrs	r3, r3, #22
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316a:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d05d      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	2200      	movs	r2, #0
 800317a:	4618      	mov	r0, r3
 800317c:	4611      	mov	r1, r2
 800317e:	4604      	mov	r4, r0
 8003180:	460d      	mov	r5, r1
 8003182:	4622      	mov	r2, r4
 8003184:	462b      	mov	r3, r5
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003194:	0150      	lsls	r0, r2, #5
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4621      	mov	r1, r4
 800319c:	1a51      	subs	r1, r2, r1
 800319e:	6139      	str	r1, [r7, #16]
 80031a0:	4629      	mov	r1, r5
 80031a2:	eb63 0301 	sbc.w	r3, r3, r1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b4:	4659      	mov	r1, fp
 80031b6:	018b      	lsls	r3, r1, #6
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031be:	4651      	mov	r1, sl
 80031c0:	018a      	lsls	r2, r1, #6
 80031c2:	46d4      	mov	ip, sl
 80031c4:	ebb2 080c 	subs.w	r8, r2, ip
 80031c8:	4659      	mov	r1, fp
 80031ca:	eb63 0901 	sbc.w	r9, r3, r1
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031e2:	4690      	mov	r8, r2
 80031e4:	4699      	mov	r9, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	eb18 0303 	adds.w	r3, r8, r3
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	462b      	mov	r3, r5
 80031f0:	eb49 0303 	adc.w	r3, r9, r3
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003202:	4629      	mov	r1, r5
 8003204:	024b      	lsls	r3, r1, #9
 8003206:	4620      	mov	r0, r4
 8003208:	4629      	mov	r1, r5
 800320a:	4604      	mov	r4, r0
 800320c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003210:	4601      	mov	r1, r0
 8003212:	024a      	lsls	r2, r1, #9
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	2200      	movs	r2, #0
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
 800321e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003220:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003224:	f7fc ffaa 	bl	800017c <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
 8003230:	e055      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	2200      	movs	r2, #0
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	627a      	str	r2, [r7, #36]	; 0x24
 800323a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800323e:	4642      	mov	r2, r8
 8003240:	464b      	mov	r3, r9
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	0159      	lsls	r1, r3, #5
 800324c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003250:	0150      	lsls	r0, r2, #5
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	46c4      	mov	ip, r8
 8003258:	ebb2 0a0c 	subs.w	sl, r2, ip
 800325c:	4640      	mov	r0, r8
 800325e:	4649      	mov	r1, r9
 8003260:	468c      	mov	ip, r1
 8003262:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003272:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003276:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800327a:	ebb2 040a 	subs.w	r4, r2, sl
 800327e:	eb63 050b 	sbc.w	r5, r3, fp
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	00eb      	lsls	r3, r5, #3
 800328c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003290:	00e2      	lsls	r2, r4, #3
 8003292:	4614      	mov	r4, r2
 8003294:	461d      	mov	r5, r3
 8003296:	4603      	mov	r3, r0
 8003298:	18e3      	adds	r3, r4, r3
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	460b      	mov	r3, r1
 800329e:	eb45 0303 	adc.w	r3, r5, r3
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b0:	4629      	mov	r1, r5
 80032b2:	028b      	lsls	r3, r1, #10
 80032b4:	4620      	mov	r0, r4
 80032b6:	4629      	mov	r1, r5
 80032b8:	4604      	mov	r4, r0
 80032ba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80032be:	4601      	mov	r1, r0
 80032c0:	028a      	lsls	r2, r1, #10
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	2200      	movs	r2, #0
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d2:	f7fc ff53 	bl	800017c <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4613      	mov	r3, r2
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80032de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80032e2:	e00d      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0b5b      	lsrs	r3, r3, #13
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	3301      	adds	r3, #1
 80032f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80032fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003302:	4618      	mov	r0, r3
 8003304:	3748      	adds	r7, #72	; 0x48
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200
 8003318:	0800872c 	.word	0x0800872c

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	20000000 	.word	0x20000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08008748 	.word	0x08008748

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffde 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	08008748 	.word	0x08008748

08003380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800338c:	4b29      	ldr	r3, [pc, #164]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d12c      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003398:	4b26      	ldr	r3, [pc, #152]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e016      	b.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	6253      	str	r3, [r2, #36]	; 0x24
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80033d0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033dc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033e4:	d105      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033ec:	d101      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80033ee:	2301      	movs	r3, #1
 80033f0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 0201 	bic.w	r2, r3, #1
 800340c:	490b      	ldr	r1, [pc, #44]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40007000 	.word	0x40007000
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07b      	b.n	800354a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d108      	bne.n	800346c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003462:	d009      	beq.n	8003478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
 800346a:	e005      	b.n	8003478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd f984 	bl	80007a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0104 	and.w	r1, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0210 	and.w	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b08c      	sub	sp, #48	; 0x30
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003560:	2301      	movs	r3, #1
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x26>
 8003574:	2302      	movs	r3, #2
 8003576:	e18a      	b.n	800388e <HAL_SPI_TransmitReceive+0x33c>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003580:	f7fd fa64 	bl	8000a4c <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800359a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d00f      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x70>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a8:	d107      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x68>
 80035b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d003      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
 80035bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035c0:	e15b      	b.n	800387a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x82>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x82>
 80035ce:	887b      	ldrh	r3, [r7, #2]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035da:	e14e      	b.n	800387a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d003      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	887a      	ldrh	r2, [r7, #2]
 8003606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d007      	beq.n	8003644 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364c:	d178      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_TransmitReceive+0x10a>
 8003656:	8b7b      	ldrh	r3, [r7, #26]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d166      	bne.n	800372a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003680:	e053      	b.n	800372a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d11b      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x176>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x176>
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d113      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d119      	bne.n	800370a <HAL_SPI_TransmitReceive+0x1b8>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d014      	beq.n	800370a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	b292      	uxth	r2, r2
 80036ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	1c9a      	adds	r2, r3, #2
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003706:	2301      	movs	r3, #1
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800370a:	f7fd f99f 	bl	8000a4c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003716:	429a      	cmp	r2, r3
 8003718:	d807      	bhi.n	800372a <HAL_SPI_TransmitReceive+0x1d8>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d003      	beq.n	800372a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003728:	e0a7      	b.n	800387a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1a6      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x130>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1a1      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x130>
 800373e:	e07c      	b.n	800383a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_SPI_TransmitReceive+0x1fc>
 8003748:	8b7b      	ldrh	r3, [r7, #26]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d16b      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003774:	e057      	b.n	8003826 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d11c      	bne.n	80037be <HAL_SPI_TransmitReceive+0x26c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d017      	beq.n	80037be <HAL_SPI_TransmitReceive+0x26c>
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d114      	bne.n	80037be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d119      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x2ae>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d014      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037fc:	2301      	movs	r3, #1
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003800:	f7fd f924 	bl	8000a4c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800380c:	429a      	cmp	r2, r3
 800380e:	d803      	bhi.n	8003818 <HAL_SPI_TransmitReceive+0x2c6>
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d102      	bne.n	800381e <HAL_SPI_TransmitReceive+0x2cc>
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003824:	e029      	b.n	800387a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1a2      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x224>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d19d      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f8b2 	bl	80039a8 <SPI_EndRxTxTransaction>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003856:	e010      	b.n	800387a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	e000      	b.n	800387a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003878:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800388a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800388e:	4618      	mov	r0, r3
 8003890:	3730      	adds	r7, #48	; 0x30
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038a8:	f7fd f8d0 	bl	8000a4c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038b8:	f7fd f8c8 	bl	8000a4c <HAL_GetTick>
 80038bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038be:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	015b      	lsls	r3, r3, #5
 80038c4:	0d1b      	lsrs	r3, r3, #20
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ce:	e054      	b.n	800397a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d050      	beq.n	800397a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038d8:	f7fd f8b8 	bl	8000a4c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d902      	bls.n	80038ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d13d      	bne.n	800396a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003906:	d111      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	d004      	beq.n	800391c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d107      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003934:	d10f      	bne.n	8003956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e017      	b.n	800399a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3b01      	subs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d19b      	bne.n	80038d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <SPI_EndRxTxTransaction+0x7c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <SPI_EndRxTxTransaction+0x80>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0d5b      	lsrs	r3, r3, #21
 80039c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039d2:	d112      	bne.n	80039fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ff5a 	bl	8003898 <SPI_WaitFlagStateUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e00f      	b.n	8003a1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d0f2      	beq.n	80039fa <SPI_EndRxTxTransaction+0x52>
 8003a14:	e000      	b.n	8003a18 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a16:	bf00      	nop
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000
 8003a28:	165e9f81 	.word	0x165e9f81

08003a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e03f      	b.n	8003abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fc fee8 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f829 	bl	8003ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b08:	f023 030c 	bic.w	r3, r3, #12
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a55      	ldr	r2, [pc, #340]	; (8003c88 <UART_SetConfig+0x1c0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d103      	bne.n	8003b3e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b36:	f7ff fc0f 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	e002      	b.n	8003b44 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7ff fbf7 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8003b42:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	d14c      	bne.n	8003be8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009a      	lsls	r2, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	4a49      	ldr	r2, [pc, #292]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	0119      	lsls	r1, r3, #4
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009a      	lsls	r2, r3, #2
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b84:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003b86:	fba3 0302 	umull	r0, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2064      	movs	r0, #100	; 0x64
 8003b8e:	fb00 f303 	mul.w	r3, r0, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a3c      	ldr	r2, [pc, #240]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba6:	4419      	add	r1, r3
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009a      	lsls	r2, r3, #2
 8003bb2:	441a      	add	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003bc0:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2064      	movs	r0, #100	; 0x64
 8003bc8:	fb00 f303 	mul.w	r3, r0, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	440a      	add	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be6:	e04a      	b.n	8003c7e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	0119      	lsls	r1, r3, #4
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c20:	fba3 0302 	umull	r0, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2064      	movs	r0, #100	; 0x64
 8003c28:	fb00 f303 	mul.w	r3, r0, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3e:	4419      	add	r1, r3
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c58:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2064      	movs	r0, #100	; 0x64
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	51eb851f 	.word	0x51eb851f

08003c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ca0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ca4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cc4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4013      	ands	r3, r2
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	f107 0014 	add.w	r0, r7, #20
 8003cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr

08003d30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b09b      	sub	sp, #108	; 0x6c
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	78db      	ldrb	r3, [r3, #3]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d81f      	bhi.n	8003da2 <USB_ActivateEndpoint+0x72>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <USB_ActivateEndpoint+0x38>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003dab 	.word	0x08003dab
 8003d74:	08003d87 	.word	0x08003d87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d84:	e012      	b.n	8003dac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d92:	e00b      	b.n	8003dac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d9c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003da0:	e004      	b.n	8003dac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003da8:	e000      	b.n	8003dac <USB_ActivateEndpoint+0x7c>
      break;
 8003daa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	7b1b      	ldrb	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 8149 	bne.w	80040b0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8084 	beq.w	8003f30 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4413      	add	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	011a      	lsls	r2, r3, #4
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	88db      	ldrh	r3, [r3, #6]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	81fb      	strh	r3, [r7, #14]
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <USB_ActivateEndpoint+0x17c>
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	81bb      	strh	r3, [r7, #12]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	89bb      	ldrh	r3, [r7, #12]
 8003e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	78db      	ldrb	r3, [r3, #3]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d020      	beq.n	8003ef6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	813b      	strh	r3, [r7, #8]
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	f083 0320 	eor.w	r3, r3, #32
 8003ed2:	813b      	strh	r3, [r7, #8]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	893b      	ldrh	r3, [r7, #8]
 8003ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]
 8003ef4:	e27f      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	897b      	ldrh	r3, [r7, #10]
 8003f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8013      	strh	r3, [r2, #0]
 8003f2e:	e262      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	4413      	add	r3, r2
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	011a      	lsls	r2, r3, #4
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	88db      	ldrh	r3, [r3, #6]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	4413      	add	r3, r2
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	011a      	lsls	r2, r3, #4
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	4413      	add	r3, r2
 8003f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <USB_ActivateEndpoint+0x286>
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e02f      	b.n	8004016 <USB_ActivateEndpoint+0x2e6>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b3e      	cmp	r3, #62	; 0x3e
 8003fbc:	d813      	bhi.n	8003fe6 <USB_ActivateEndpoint+0x2b6>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <USB_ActivateEndpoint+0x2a8>
 8003fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	e017      	b.n	8004016 <USB_ActivateEndpoint+0x2e6>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <USB_ActivateEndpoint+0x2d0>
 8003ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8004000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004002:	b29b      	uxth	r3, r3
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	b29b      	uxth	r3, r3
 8004008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004010:	b29a      	uxth	r2, r3
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	83fb      	strh	r3, [r7, #30]
 8004024:	8bfb      	ldrh	r3, [r7, #30]
 8004026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01b      	beq.n	8004066 <USB_ActivateEndpoint+0x336>
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004044:	83bb      	strh	r3, [r7, #28]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	8bbb      	ldrh	r3, [r7, #28]
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800405e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	837b      	strh	r3, [r7, #26]
 800407e:	8b7b      	ldrh	r3, [r7, #26]
 8004080:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004084:	837b      	strh	r3, [r7, #26]
 8004086:	8b7b      	ldrh	r3, [r7, #26]
 8004088:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800408c:	837b      	strh	r3, [r7, #26]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	8b7b      	ldrh	r3, [r7, #26]
 800409a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	8013      	strh	r3, [r2, #0]
 80040ae:	e1a2      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fc:	4413      	add	r3, r2
 80040fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	011a      	lsls	r2, r3, #4
 8004106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004108:	4413      	add	r3, r2
 800410a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410e:	657b      	str	r3, [r7, #84]	; 0x54
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	891b      	ldrh	r3, [r3, #8]
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	653b      	str	r3, [r7, #80]	; 0x50
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004130:	4413      	add	r3, r2
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	4413      	add	r3, r2
 800413e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	895b      	ldrh	r3, [r3, #10]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	b29b      	uxth	r3, r3
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f040 8091 	bne.w	8004280 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800416c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800416e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01b      	beq.n	80041ae <USB_ActivateEndpoint+0x47e>
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80041bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01b      	beq.n	80041fe <USB_ActivateEndpoint+0x4ce>
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004216:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004218:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800421c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800421e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004224:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425c:	867b      	strh	r3, [r7, #50]	; 0x32
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
 800427e:	e0ba      	b.n	80043f6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004290:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01d      	beq.n	80042d8 <USB_ActivateEndpoint+0x5a8>
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01d      	beq.n	8004330 <USB_ActivateEndpoint+0x600>
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	78db      	ldrb	r3, [r3, #3]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d024      	beq.n	8004382 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004352:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004356:	f083 0320 	eor.w	r3, r3, #32
 800435a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800436c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	b29b      	uxth	r3, r3
 800437e:	8013      	strh	r3, [r2, #0]
 8004380:	e01d      	b.n	80043be <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004398:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80043f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	376c      	adds	r7, #108	; 0x6c
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004404:	b480      	push	{r7}
 8004406:	b08d      	sub	sp, #52	; 0x34
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	7b1b      	ldrb	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 808e 	bne.w	8004534 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d044      	beq.n	80044aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	81bb      	strh	r3, [r7, #12]
 800442e:	89bb      	ldrh	r3, [r7, #12]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <USB_DeactivateEndpoint+0x6c>
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	817b      	strh	r3, [r7, #10]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004468:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004486:	813b      	strh	r3, [r7, #8]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]
 80044a8:	e192      	b.n	80047d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	827b      	strh	r3, [r7, #18]
 80044b8:	8a7b      	ldrh	r3, [r7, #18]
 80044ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01b      	beq.n	80044fa <USB_DeactivateEndpoint+0xf6>
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	823b      	strh	r3, [r7, #16]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8a3b      	ldrh	r3, [r7, #16]
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800450c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004510:	81fb      	strh	r3, [r7, #14]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
 8004532:	e14d      	b.n	80047d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 80a5 	bne.w	8004688 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	843b      	strh	r3, [r7, #32]
 800454c:	8c3b      	ldrh	r3, [r7, #32]
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01b      	beq.n	800458e <USB_DeactivateEndpoint+0x18a>
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	83fb      	strh	r3, [r7, #30]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8bfb      	ldrh	r3, [r7, #30]
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	83bb      	strh	r3, [r7, #28]
 800459c:	8bbb      	ldrh	r3, [r7, #28]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01b      	beq.n	80045de <USB_DeactivateEndpoint+0x1da>
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	837b      	strh	r3, [r7, #26]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	833b      	strh	r3, [r7, #24]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	8b3b      	ldrh	r3, [r7, #24]
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462c:	82fb      	strh	r3, [r7, #22]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	8afb      	ldrh	r3, [r7, #22]
 800463a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464a:	b29b      	uxth	r3, r3
 800464c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004664:	82bb      	strh	r3, [r7, #20]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	8abb      	ldrh	r3, [r7, #20]
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
 8004686:	e0a3      	b.n	80047d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01b      	beq.n	80046d8 <USB_DeactivateEndpoint+0x2d4>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <USB_DeactivateEndpoint+0x324>
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	853b      	strh	r3, [r7, #40]	; 0x28
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004720:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800474c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475c:	b29b      	uxth	r3, r3
 800475e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004776:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3734      	adds	r7, #52	; 0x34
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b0cc      	sub	sp, #304	; 0x130
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ea:	6018      	str	r0, [r3, #0]
 80047ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	f041 817d 	bne.w	8005b02 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d908      	bls.n	8004836 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004834:	e007      	b.n	8004846 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	7b1b      	ldrb	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d152      	bne.n	80048fc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6959      	ldr	r1, [r3, #20]
 8004862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	88da      	ldrh	r2, [r3, #6]
 800486e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004872:	b29b      	uxth	r3, r3
 8004874:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004878:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f001 ff0e 	bl	800669e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004886:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800488a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800488e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4619      	mov	r1, r3
 80048a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048b4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	440a      	add	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	011a      	lsls	r2, r3, #4
 80048cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4413      	add	r3, r2
 80048d8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	f001 b8b5 	b.w	8005a66 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	78db      	ldrb	r3, [r3, #3]
 8004908:	2b02      	cmp	r3, #2
 800490a:	f040 84c6 	bne.w	800529a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800490e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	f240 8443 	bls.w	80051b2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800492c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800493a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004984:	b29b      	uxth	r3, r3
 8004986:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004998:	1ad2      	subs	r2, r2, r3
 800499a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 823e 	beq.w	8004e4a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 809a 	bne.w	8004b28 <USB_EPStartXfer+0x34c>
 80049f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a00:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a26:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d122      	bne.n	8004aa6 <USB_EPStartXfer+0x2ca>
 8004a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	e079      	b.n	8004b9a <USB_EPStartXfer+0x3be>
 8004aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8004aac:	d81b      	bhi.n	8004ae6 <USB_EPStartXfer+0x30a>
 8004aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <USB_EPStartXfer+0x2f2>
 8004ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004adc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	e059      	b.n	8004b9a <USB_EPStartXfer+0x3be>
 8004ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <USB_EPStartXfer+0x32a>
 8004afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b00:	3b01      	subs	r3, #1
 8004b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	801a      	strh	r2, [r3, #0]
 8004b26:	e038      	b.n	8004b9a <USB_EPStartXfer+0x3be>
 8004b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d130      	bne.n	8004b9a <USB_EPStartXfer+0x3be>
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b56:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	011a      	lsls	r2, r3, #4
 8004b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b72:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	895b      	ldrh	r3, [r3, #10]
 8004ba6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6959      	ldr	r1, [r3, #20]
 8004bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bc0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bc4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bc8:	6800      	ldr	r0, [r0, #0]
 8004bca:	f001 fd68 	bl	800669e <USB_WritePMA>
            ep->xfer_buff += len;
 8004bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bde:	441a      	add	r2, r3
 8004be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a1a      	ldr	r2, [r3, #32]
 8004bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d90f      	bls.n	8004c28 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a1a      	ldr	r2, [r3, #32]
 8004c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c18:	1ad2      	subs	r2, r2, r3
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	621a      	str	r2, [r3, #32]
 8004c26:	e00e      	b.n	8004c46 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 809a 	bne.w	8004d8c <USB_EPStartXfer+0x5b0>
 8004c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c64:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c8a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	440a      	add	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	011a      	lsls	r2, r3, #4
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d122      	bne.n	8004d0a <USB_EPStartXfer+0x52e>
 8004cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e083      	b.n	8004e12 <USB_EPStartXfer+0x636>
 8004d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d10:	d81b      	bhi.n	8004d4a <USB_EPStartXfer+0x56e>
 8004d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <USB_EPStartXfer+0x556>
 8004d28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	029b      	lsls	r3, r3, #10
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	e063      	b.n	8004e12 <USB_EPStartXfer+0x636>
 8004d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <USB_EPStartXfer+0x58e>
 8004d60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	e042      	b.n	8004e12 <USB_EPStartXfer+0x636>
 8004d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d13a      	bne.n	8004e12 <USB_EPStartXfer+0x636>
 8004d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004da4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004da8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dce:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4413      	add	r3, r2
 8004df2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	891b      	ldrh	r3, [r3, #8]
 8004e1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e40:	6800      	ldr	r0, [r0, #0]
 8004e42:	f001 fc2c 	bl	800669e <USB_WritePMA>
 8004e46:	f000 be0e 	b.w	8005a66 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d16d      	bne.n	8004f36 <USB_EPStartXfer+0x75a>
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7a:	4413      	add	r3, r2
 8004e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	011a      	lsls	r2, r3, #4
 8004e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8e:	4413      	add	r3, r2
 8004e90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e94:	647b      	str	r3, [r7, #68]	; 0x44
 8004e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d112      	bne.n	8004ec4 <USB_EPStartXfer+0x6e8>
 8004e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	e063      	b.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8004eca:	d817      	bhi.n	8004efc <USB_EPStartXfer+0x720>
 8004ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <USB_EPStartXfer+0x710>
 8004ee2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004eec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	029b      	lsls	r3, r3, #10
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e047      	b.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <USB_EPStartXfer+0x740>
 8004f12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f16:	3b01      	subs	r3, #1
 8004f18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	e02a      	b.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d122      	bne.n	8004f8c <USB_EPStartXfer+0x7b0>
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	653b      	str	r3, [r7, #80]	; 0x50
 8004f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f66:	4413      	add	r3, r2
 8004f68:	653b      	str	r3, [r7, #80]	; 0x50
 8004f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	011a      	lsls	r2, r3, #4
 8004f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	891b      	ldrh	r3, [r3, #8]
 8004f98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6959      	ldr	r1, [r3, #20]
 8004fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fb2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fb6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	f001 fb6f 	bl	800669e <USB_WritePMA>
            ep->xfer_buff += len;
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	441a      	add	r2, r3
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d90f      	bls.n	800501a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	621a      	str	r2, [r3, #32]
 8005018:	e00e      	b.n	8005038 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
 8005044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d16d      	bne.n	8005130 <USB_EPStartXfer+0x954>
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	4413      	add	r3, r2
 8005076:	63bb      	str	r3, [r7, #56]	; 0x38
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	011a      	lsls	r2, r3, #4
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	4413      	add	r3, r2
 800508a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d112      	bne.n	80050be <USB_EPStartXfer+0x8e2>
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	e05d      	b.n	800517a <USB_EPStartXfer+0x99e>
 80050be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c2:	2b3e      	cmp	r3, #62	; 0x3e
 80050c4:	d817      	bhi.n	80050f6 <USB_EPStartXfer+0x91a>
 80050c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <USB_EPStartXfer+0x90a>
 80050dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050e0:	3301      	adds	r3, #1
 80050e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	029b      	lsls	r3, r3, #10
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	e041      	b.n	800517a <USB_EPStartXfer+0x99e>
 80050f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <USB_EPStartXfer+0x93a>
 800510c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005110:	3b01      	subs	r3, #1
 8005112:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005116:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800511a:	b29b      	uxth	r3, r3
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	b29b      	uxth	r3, r3
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29a      	uxth	r2, r3
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	e024      	b.n	800517a <USB_EPStartXfer+0x99e>
 8005130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d11c      	bne.n	800517a <USB_EPStartXfer+0x99e>
 8005140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	4413      	add	r3, r2
 8005156:	643b      	str	r3, [r7, #64]	; 0x40
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	011a      	lsls	r2, r3, #4
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	4413      	add	r3, r2
 800516a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005174:	b29a      	uxth	r2, r3
 8005176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005178:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	895b      	ldrh	r3, [r3, #10]
 8005186:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6959      	ldr	r1, [r3, #20]
 8005196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519a:	b29b      	uxth	r3, r3
 800519c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051a8:	6800      	ldr	r0, [r0, #0]
 80051aa:	f001 fa78 	bl	800669e <USB_WritePMA>
 80051ae:	f000 bc5a 	b.w	8005a66 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523e:	4413      	add	r3, r2
 8005240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	011a      	lsls	r2, r3, #4
 8005250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005252:	4413      	add	r3, r2
 8005254:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005258:	65bb      	str	r3, [r7, #88]	; 0x58
 800525a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525e:	b29a      	uxth	r2, r3
 8005260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005262:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	891b      	ldrh	r3, [r3, #8]
 8005270:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6959      	ldr	r1, [r3, #20]
 8005280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005284:	b29b      	uxth	r3, r3
 8005286:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800528a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800528e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005292:	6800      	ldr	r0, [r0, #0]
 8005294:	f001 fa03 	bl	800669e <USB_WritePMA>
 8005298:	e3e5      	b.n	8005a66 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800529a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80052c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a1a      	ldr	r2, [r3, #32]
 8005302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005306:	1ad2      	subs	r2, r2, r3
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005318:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 81bc 	beq.w	80056b4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800533c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d16d      	bne.n	8005436 <USB_EPStartXfer+0xc5a>
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	67bb      	str	r3, [r7, #120]	; 0x78
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537a:	4413      	add	r3, r2
 800537c:	67bb      	str	r3, [r7, #120]	; 0x78
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538e:	4413      	add	r3, r2
 8005390:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005394:	677b      	str	r3, [r7, #116]	; 0x74
 8005396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d112      	bne.n	80053c4 <USB_EPStartXfer+0xbe8>
 800539e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e060      	b.n	8005486 <USB_EPStartXfer+0xcaa>
 80053c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ca:	d817      	bhi.n	80053fc <USB_EPStartXfer+0xc20>
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <USB_EPStartXfer+0xc10>
 80053e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053e6:	3301      	adds	r3, #1
 80053e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	e044      	b.n	8005486 <USB_EPStartXfer+0xcaa>
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <USB_EPStartXfer+0xc40>
 8005412:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005416:	3b01      	subs	r3, #1
 8005418:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800541c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005420:	b29b      	uxth	r3, r3
 8005422:	029b      	lsls	r3, r3, #10
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e027      	b.n	8005486 <USB_EPStartXfer+0xcaa>
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d11f      	bne.n	8005486 <USB_EPStartXfer+0xcaa>
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800545c:	4413      	add	r3, r2
 800545e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	011a      	lsls	r2, r3, #4
 8005470:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005474:	4413      	add	r3, r2
 8005476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800547a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800547c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005480:	b29a      	uxth	r2, r3
 8005482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005484:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	895b      	ldrh	r3, [r3, #10]
 8005492:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6959      	ldr	r1, [r3, #20]
 80054a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054b4:	6800      	ldr	r0, [r0, #0]
 80054b6:	f001 f8f2 	bl	800669e <USB_WritePMA>
          ep->xfer_buff += len;
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ca:	441a      	add	r2, r3
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80054d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d90f      	bls.n	8005514 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005504:	1ad2      	subs	r2, r2, r3
 8005506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	621a      	str	r2, [r3, #32]
 8005512:	e00e      	b.n	8005532 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8295 	beq.w	8005a66 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d16d      	bne.n	8005628 <USB_EPStartXfer+0xe4c>
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	66bb      	str	r3, [r7, #104]	; 0x68
 8005558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800556c:	4413      	add	r3, r2
 800556e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	011a      	lsls	r2, r3, #4
 800557e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005580:	4413      	add	r3, r2
 8005582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005586:	667b      	str	r3, [r7, #100]	; 0x64
 8005588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d112      	bne.n	80055b6 <USB_EPStartXfer+0xdda>
 8005590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800559a:	b29a      	uxth	r2, r3
 800559c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e063      	b.n	800567e <USB_EPStartXfer+0xea2>
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	2b3e      	cmp	r3, #62	; 0x3e
 80055bc:	d817      	bhi.n	80055ee <USB_EPStartXfer+0xe12>
 80055be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <USB_EPStartXfer+0xe02>
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d8:	3301      	adds	r3, #1
 80055da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	029b      	lsls	r3, r3, #10
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e047      	b.n	800567e <USB_EPStartXfer+0xea2>
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <USB_EPStartXfer+0xe32>
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005608:	3b01      	subs	r3, #1
 800560a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005620:	b29a      	uxth	r2, r3
 8005622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	e02a      	b.n	800567e <USB_EPStartXfer+0xea2>
 8005628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d122      	bne.n	800567e <USB_EPStartXfer+0xea2>
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	673b      	str	r3, [r7, #112]	; 0x70
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005658:	4413      	add	r3, r2
 800565a:	673b      	str	r3, [r7, #112]	; 0x70
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566c:	4413      	add	r3, r2
 800566e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	b29a      	uxth	r2, r3
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800567e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	891b      	ldrh	r3, [r3, #8]
 800568a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056ac:	6800      	ldr	r0, [r0, #0]
 80056ae:	f000 fff6 	bl	800669e <USB_WritePMA>
 80056b2:	e1d8      	b.n	8005a66 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d178      	bne.n	80057b6 <USB_EPStartXfer+0xfda>
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e8:	4413      	add	r3, r2
 80056ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	011a      	lsls	r2, r3, #4
 80056fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005700:	4413      	add	r3, r2
 8005702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800570a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d116      	bne.n	8005740 <USB_EPStartXfer+0xf64>
 8005712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571e:	b29a      	uxth	r2, r3
 8005720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005736:	b29a      	uxth	r2, r3
 8005738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e06b      	b.n	8005818 <USB_EPStartXfer+0x103c>
 8005740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005744:	2b3e      	cmp	r3, #62	; 0x3e
 8005746:	d818      	bhi.n	800577a <USB_EPStartXfer+0xf9e>
 8005748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <USB_EPStartXfer+0xf8c>
 800575e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005762:	3301      	adds	r3, #1
 8005764:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005768:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800576c:	b29b      	uxth	r3, r3
 800576e:	029b      	lsls	r3, r3, #10
 8005770:	b29a      	uxth	r2, r3
 8005772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	e04e      	b.n	8005818 <USB_EPStartXfer+0x103c>
 800577a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <USB_EPStartXfer+0xfbe>
 8005790:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005794:	3b01      	subs	r3, #1
 8005796:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800579a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800579e:	b29b      	uxth	r3, r3
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e030      	b.n	8005818 <USB_EPStartXfer+0x103c>
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d128      	bne.n	8005818 <USB_EPStartXfer+0x103c>
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057ea:	4413      	add	r3, r2
 80057ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005802:	4413      	add	r3, r2
 8005804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	b29a      	uxth	r2, r3
 8005812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005816:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	891b      	ldrh	r3, [r3, #8]
 8005824:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6959      	ldr	r1, [r3, #20]
 8005834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005838:	b29b      	uxth	r3, r3
 800583a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800583e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005842:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	f000 ff29 	bl	800669e <USB_WritePMA>
          ep->xfer_buff += len;
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585c:	441a      	add	r2, r3
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d90f      	bls.n	80058a6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a1a      	ldr	r2, [r3, #32]
 8005892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	621a      	str	r2, [r3, #32]
 80058a4:	e00e      	b.n	80058c4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80cc 	beq.w	8005a66 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d178      	bne.n	80059de <USB_EPStartXfer+0x1202>
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005910:	4413      	add	r3, r2
 8005912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	011a      	lsls	r2, r3, #4
 8005924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005928:	4413      	add	r3, r2
 800592a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800592e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <USB_EPStartXfer+0x118c>
 800593a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005946:	b29a      	uxth	r2, r3
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595e:	b29a      	uxth	r2, r3
 8005960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e064      	b.n	8005a32 <USB_EPStartXfer+0x1256>
 8005968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596c:	2b3e      	cmp	r3, #62	; 0x3e
 800596e:	d818      	bhi.n	80059a2 <USB_EPStartXfer+0x11c6>
 8005970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800597a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <USB_EPStartXfer+0x11b4>
 8005986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598a:	3301      	adds	r3, #1
 800598c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005994:	b29b      	uxth	r3, r3
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	b29a      	uxth	r2, r3
 800599a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	e047      	b.n	8005a32 <USB_EPStartXfer+0x1256>
 80059a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <USB_EPStartXfer+0x11e6>
 80059b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059bc:	3b01      	subs	r3, #1
 80059be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e029      	b.n	8005a32 <USB_EPStartXfer+0x1256>
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d121      	bne.n	8005a32 <USB_EPStartXfer+0x1256>
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a04:	4413      	add	r3, r2
 8005a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	011a      	lsls	r2, r3, #4
 8005a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	895b      	ldrh	r3, [r3, #10]
 8005a3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6959      	ldr	r1, [r3, #20]
 8005a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a60:	6800      	ldr	r0, [r0, #0]
 8005a62:	f000 fe1c 	bl	800669e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a88:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a94:	8013      	strh	r3, [r2, #0]
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005a9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aa2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	f082 0210 	eor.w	r2, r2, #16
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ab6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aba:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005abe:	8812      	ldrh	r2, [r2, #0]
 8005ac0:	f082 0220 	eor.w	r2, r2, #32
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]
 8005afe:	f000 bc9f 	b.w	8006440 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	7b1b      	ldrb	r3, [r3, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 80ae 	bne.w	8005c70 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d917      	bls.n	8005b60 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	619a      	str	r2, [r3, #24]
 8005b5e:	e00e      	b.n	8005b7e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d116      	bne.n	8005bfa <USB_EPStartXfer+0x141e>
 8005bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	e3e8      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8005bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8005c00:	d818      	bhi.n	8005c34 <USB_EPStartXfer+0x1458>
 8005c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <USB_EPStartXfer+0x1446>
 8005c18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e3cb      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8005c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <USB_EPStartXfer+0x1478>
 8005c4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e3ad      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	78db      	ldrb	r3, [r3, #3]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	f040 8200 	bne.w	8006082 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 8091 	bne.w	8005db6 <USB_EPStartXfer+0x15da>
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cb8:	4413      	add	r3, r2
 8005cba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	011a      	lsls	r2, r3, #4
 8005ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d116      	bne.n	8005d18 <USB_EPStartXfer+0x153c>
 8005cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e083      	b.n	8005e20 <USB_EPStartXfer+0x1644>
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b3e      	cmp	r3, #62	; 0x3e
 8005d26:	d820      	bhi.n	8005d6a <USB_EPStartXfer+0x158e>
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <USB_EPStartXfer+0x157c>
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d52:	3301      	adds	r3, #1
 8005d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	029b      	lsls	r3, r3, #10
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e05a      	b.n	8005e20 <USB_EPStartXfer+0x1644>
 8005d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <USB_EPStartXfer+0x15be>
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d94:	3b01      	subs	r3, #1
 8005d96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e034      	b.n	8005e20 <USB_EPStartXfer+0x1644>
 8005db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d12c      	bne.n	8005e20 <USB_EPStartXfer+0x1644>
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dea:	4413      	add	r3, r2
 8005dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	011a      	lsls	r2, r3, #4
 8005dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 8091 	bne.w	8005f62 <USB_EPStartXfer+0x1786>
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e64:	4413      	add	r3, r2
 8005e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	011a      	lsls	r2, r3, #4
 8005e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d116      	bne.n	8005ec4 <USB_EPStartXfer+0x16e8>
 8005e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e07c      	b.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed2:	d820      	bhi.n	8005f16 <USB_EPStartXfer+0x173a>
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <USB_EPStartXfer+0x1728>
 8005efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005efe:	3301      	adds	r3, #1
 8005f00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e053      	b.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <USB_EPStartXfer+0x176a>
 8005f3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f40:	3b01      	subs	r3, #1
 8005f42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e02d      	b.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d125      	bne.n	8005fbe <USB_EPStartXfer+0x17e2>
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f88:	4413      	add	r3, r2
 8005f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	011a      	lsls	r2, r3, #4
 8005f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fbc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 81fe 	beq.w	80063cc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ff0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <USB_EPStartXfer+0x182c>
 8005ffc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10d      	bne.n	8006024 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006008:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800600c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 81db 	bne.w	80063cc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006016:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 81d4 	bne.w	80063cc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800604e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]
 8006080:	e1a4      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	2b01      	cmp	r3, #1
 8006090:	f040 819a 	bne.w	80063c8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d917      	bls.n	80060e0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	619a      	str	r2, [r3, #24]
 80060de:	e00e      	b.n	80060fe <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d178      	bne.n	8006200 <USB_EPStartXfer+0x1a24>
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800614a:	4413      	add	r3, r2
 800614c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d116      	bne.n	800618a <USB_EPStartXfer+0x19ae>
 800615c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e06b      	b.n	8006262 <USB_EPStartXfer+0x1a86>
 800618a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618e:	2b3e      	cmp	r3, #62	; 0x3e
 8006190:	d818      	bhi.n	80061c4 <USB_EPStartXfer+0x19e8>
 8006192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800619c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <USB_EPStartXfer+0x19d6>
 80061a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ac:	3301      	adds	r3, #1
 80061ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e04e      	b.n	8006262 <USB_EPStartXfer+0x1a86>
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <USB_EPStartXfer+0x1a08>
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061de:	3b01      	subs	r3, #1
 80061e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e030      	b.n	8006262 <USB_EPStartXfer+0x1a86>
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d128      	bne.n	8006262 <USB_EPStartXfer+0x1a86>
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	4413      	add	r3, r2
 8006236:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011a      	lsls	r2, r3, #4
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	4413      	add	r3, r2
 800624e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006252:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	b29a      	uxth	r2, r3
 800625c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d178      	bne.n	8006372 <USB_EPStartXfer+0x1b96>
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800628e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a4:	4413      	add	r3, r2
 80062a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062bc:	4413      	add	r3, r2
 80062be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d116      	bne.n	80062fc <USB_EPStartXfer+0x1b20>
 80062ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e067      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	2b3e      	cmp	r3, #62	; 0x3e
 8006302:	d818      	bhi.n	8006336 <USB_EPStartXfer+0x1b5a>
 8006304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800630e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <USB_EPStartXfer+0x1b48>
 800631a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e04a      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8006336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <USB_EPStartXfer+0x1b7a>
 800634c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006350:	3b01      	subs	r3, #1
 8006352:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800635a:	b29b      	uxth	r3, r3
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e02c      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d124      	bne.n	80063cc <USB_EPStartXfer+0x1bf0>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006390:	b29b      	uxth	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006398:	4413      	add	r3, r2
 800639a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	011a      	lsls	r2, r3, #4
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b0:	4413      	add	r3, r2
 80063b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063be:	b29a      	uxth	r2, r3
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e001      	b.n	80063cc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e03a      	b.n	8006442 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80063f6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80063fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006402:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006406:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800640a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800640e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006412:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800642c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643c:	b29b      	uxth	r3, r3
 800643e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d020      	beq.n	80064a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006474:	81bb      	strh	r3, [r7, #12]
 8006476:	89bb      	ldrh	r3, [r7, #12]
 8006478:	f083 0310 	eor.w	r3, r3, #16
 800647c:	81bb      	strh	r3, [r7, #12]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	89bb      	ldrh	r3, [r7, #12]
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]
 800649e:	e01f      	b.n	80064e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	81fb      	strh	r3, [r7, #14]
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064be:	81fb      	strh	r3, [r7, #14]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	441a      	add	r2, r3
 80064ca:	89fb      	ldrh	r3, [r7, #14]
 80064cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064dc:	b29b      	uxth	r3, r3
 80064de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	7b1b      	ldrb	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 809d 	bne.w	800663a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d04c      	beq.n	80065a2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	823b      	strh	r3, [r7, #16]
 8006516:	8a3b      	ldrh	r3, [r7, #16]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <USB_EPClearStall+0x6c>
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	81fb      	strh	r3, [r7, #14]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	89fb      	ldrh	r3, [r7, #14]
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d06c      	beq.n	800663a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006576:	81bb      	strh	r3, [r7, #12]
 8006578:	89bb      	ldrh	r3, [r7, #12]
 800657a:	f083 0320 	eor.w	r3, r3, #32
 800657e:	81bb      	strh	r3, [r7, #12]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	89bb      	ldrh	r3, [r7, #12]
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
 80065a0:	e04b      	b.n	800663a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	82fb      	strh	r3, [r7, #22]
 80065b0:	8afb      	ldrh	r3, [r7, #22]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01b      	beq.n	80065f2 <USB_EPClearStall+0x106>
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d0:	82bb      	strh	r3, [r7, #20]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	8abb      	ldrh	r3, [r7, #20]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006608:	827b      	strh	r3, [r7, #18]
 800660a:	8a7b      	ldrh	r3, [r7, #18]
 800660c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006610:	827b      	strh	r3, [r7, #18]
 8006612:	8a7b      	ldrh	r3, [r7, #18]
 8006614:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006618:	827b      	strh	r3, [r7, #18]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	8a7b      	ldrh	r3, [r7, #18]
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d103      	bne.n	8006660 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800668e:	b29b      	uxth	r3, r3
 8006690:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800669e:	b480      	push	{r7}
 80066a0:	b08d      	sub	sp, #52	; 0x34
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	4611      	mov	r1, r2
 80066aa:	461a      	mov	r2, r3
 80066ac:	460b      	mov	r3, r1
 80066ae:	80fb      	strh	r3, [r7, #6]
 80066b0:	4613      	mov	r3, r2
 80066b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066b4:	88bb      	ldrh	r3, [r7, #4]
 80066b6:	3301      	adds	r3, #1
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	005a      	lsls	r2, r3, #1
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	e01e      	b.n	8006716 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	3301      	adds	r3, #1
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	3302      	adds	r3, #2
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	3302      	adds	r3, #2
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	3301      	adds	r3, #1
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	3b01      	subs	r3, #1
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1dd      	bne.n	80066d8 <USB_WritePMA+0x3a>
  }
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	3734      	adds	r7, #52	; 0x34
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006728:	b480      	push	{r7}
 800672a:	b08b      	sub	sp, #44	; 0x2c
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	460b      	mov	r3, r1
 8006738:	80fb      	strh	r3, [r7, #6]
 800673a:	4613      	mov	r3, r2
 800673c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800673e:	88bb      	ldrh	r3, [r7, #4]
 8006740:	085b      	lsrs	r3, r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	005a      	lsls	r2, r3, #1
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	e01b      	b.n	800679a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	3302      	adds	r3, #2
 800676e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	3301      	adds	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	b2da      	uxtb	r2, r3
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	3302      	adds	r3, #2
 8006792:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	3b01      	subs	r3, #1
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e0      	bne.n	8006762 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80067a0:	88bb      	ldrh	r3, [r7, #4]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	701a      	strb	r2, [r3, #0]
  }
}
 80067bc:	bf00      	nop
 80067be:	372c      	adds	r7, #44	; 0x2c
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr

080067c6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	7c1b      	ldrb	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d115      	bne.n	800680a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e2:	2202      	movs	r2, #2
 80067e4:	2181      	movs	r1, #129	; 0x81
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fddb 	bl	80083a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067f6:	2202      	movs	r2, #2
 80067f8:	2101      	movs	r1, #1
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 fdd1 	bl	80083a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006808:	e012      	b.n	8006830 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	2202      	movs	r2, #2
 800680e:	2181      	movs	r1, #129	; 0x81
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fdc6 	bl	80083a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800681c:	2340      	movs	r3, #64	; 0x40
 800681e:	2202      	movs	r2, #2
 8006820:	2101      	movs	r1, #1
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fdbd 	bl	80083a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006830:	2308      	movs	r3, #8
 8006832:	2203      	movs	r2, #3
 8006834:	2182      	movs	r1, #130	; 0x82
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 fdb3 	bl	80083a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006842:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006846:	f001 fed3 	bl	80085f0 <USBD_static_malloc>
 800684a:	4602      	mov	r2, r0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
 8006860:	e026      	b.n	80068b0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006868:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7c1b      	ldrb	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006896:	2101      	movs	r1, #1
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fe73 	bl	8008584 <USBD_LL_PrepareReceive>
 800689e:	e007      	b.n	80068b0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	2101      	movs	r1, #1
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f001 fe6a 	bl	8008584 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068ca:	2181      	movs	r1, #129	; 0x81
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fd8e 	bl	80083ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fd87 	bl	80083ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068e8:	2182      	movs	r1, #130	; 0x82
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fd7f 	bl	80083ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006910:	4618      	mov	r0, r3
 8006912:	f001 fe79 	bl	8008608 <USBD_static_free>
    pdev->pClassData = NULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006938:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800694e:	2b00      	cmp	r3, #0
 8006950:	d039      	beq.n	80069c6 <USBD_CDC_Setup+0x9e>
 8006952:	2b20      	cmp	r3, #32
 8006954:	d17f      	bne.n	8006a56 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	88db      	ldrh	r3, [r3, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d029      	beq.n	80069b2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b25b      	sxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	da11      	bge.n	800698c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006974:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	88d2      	ldrh	r2, [r2, #6]
 800697a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800697c:	6939      	ldr	r1, [r7, #16]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	461a      	mov	r2, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f966 	bl	8007c56 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800698a:	e06b      	b.n	8006a64 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	785a      	ldrb	r2, [r3, #1]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88db      	ldrh	r3, [r3, #6]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069a2:	6939      	ldr	r1, [r7, #16]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	88db      	ldrh	r3, [r3, #6]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 f981 	bl	8007cb2 <USBD_CtlPrepareRx>
    break;
 80069b0:	e058      	b.n	8006a64 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	7850      	ldrb	r0, [r2, #1]
 80069be:	2200      	movs	r2, #0
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	4798      	blx	r3
    break;
 80069c4:	e04e      	b.n	8006a64 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b0b      	cmp	r3, #11
 80069cc:	d02e      	beq.n	8006a2c <USBD_CDC_Setup+0x104>
 80069ce:	2b0b      	cmp	r3, #11
 80069d0:	dc38      	bgt.n	8006a44 <USBD_CDC_Setup+0x11c>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <USBD_CDC_Setup+0xb4>
 80069d6:	2b0a      	cmp	r3, #10
 80069d8:	d014      	beq.n	8006a04 <USBD_CDC_Setup+0xdc>
 80069da:	e033      	b.n	8006a44 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d107      	bne.n	80069f6 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80069e6:	f107 030c 	add.w	r3, r7, #12
 80069ea:	2202      	movs	r2, #2
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 f931 	bl	8007c56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80069f4:	e02e      	b.n	8006a54 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 f8c2 	bl	8007b82 <USBD_CtlError>
			  ret = USBD_FAIL;
 80069fe:	2302      	movs	r3, #2
 8006a00:	75fb      	strb	r3, [r7, #23]
      break;
 8006a02:	e027      	b.n	8006a54 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d107      	bne.n	8006a1e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006a0e:	f107 030f 	add.w	r3, r7, #15
 8006a12:	2201      	movs	r2, #1
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f91d 	bl	8007c56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006a1c:	e01a      	b.n	8006a54 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f8ae 	bl	8007b82 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a26:	2302      	movs	r3, #2
 8006a28:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2a:	e013      	b.n	8006a54 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d00d      	beq.n	8006a52 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 f8a2 	bl	8007b82 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a42:	e006      	b.n	8006a52 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f89b 	bl	8007b82 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a50:	e000      	b.n	8006a54 <USBD_CDC_Setup+0x12c>
      break;
 8006a52:	bf00      	nop
    }
    break;
 8006a54:	e006      	b.n	8006a64 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 f892 	bl	8007b82 <USBD_CtlError>
    ret = USBD_FAIL;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	75fb      	strb	r3, [r7, #23]
    break;
 8006a62:	bf00      	nop
  }

  return ret;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a80:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a88:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d03a      	beq.n	8006b0a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	331c      	adds	r3, #28
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d029      	beq.n	8006afe <USBD_CDC_DataIn+0x90>
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	331c      	adds	r3, #28
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	78f9      	ldrb	r1, [r7, #3]
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4403      	add	r3, r0
 8006aca:	3338      	adds	r3, #56	; 0x38
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	331c      	adds	r3, #28
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006af0:	78f9      	ldrb	r1, [r7, #3]
 8006af2:	2300      	movs	r3, #0
 8006af4:	2200      	movs	r2, #0
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 fd21 	bl	800853e <USBD_LL_Transmit>
 8006afc:	e003      	b.n	8006b06 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e000      	b.n	8006b0c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b0a:	2302      	movs	r3, #2
  }
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fd4c 	bl	80085ca <USBD_LL_GetRxDataSize>
 8006b32:	4602      	mov	r2, r0
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4798      	blx	r3

    return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b78:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <USBD_CDC_EP0_RxReady+0x46>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b8a:	2bff      	cmp	r3, #255	; 0xff
 8006b8c:	d010      	beq.n	8006bb0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ba4:	b292      	uxth	r2, r2
 8006ba6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	22ff      	movs	r2, #255	; 0xff
 8006bac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2243      	movs	r2, #67	; 0x43
 8006bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20000094 	.word	0x20000094

08006bdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2243      	movs	r2, #67	; 0x43
 8006be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000050 	.word	0x20000050

08006bfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2243      	movs	r2, #67	; 0x43
 8006c08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	200000d8 	.word	0x200000d8

08006c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	220a      	movs	r2, #10
 8006c28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	2000000c 	.word	0x2000000c

08006c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006caa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d017      	beq.n	8006d0a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	7c1b      	ldrb	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cec:	2101      	movs	r1, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fc48 	bl	8008584 <USBD_LL_PrepareReceive>
 8006cf4:	e007      	b.n	8006d06 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cfc:	2340      	movs	r3, #64	; 0x40
 8006cfe:	2101      	movs	r1, #1
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fc3f 	bl	8008584 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e000      	b.n	8006d0c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d0a:	2302      	movs	r3, #2
  }
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e01a      	b.n	8006d62 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	79fa      	ldrb	r2, [r7, #7]
 8006d58:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f001 faac 	bl	80082b8 <USBD_LL_Init>

  return USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d006      	beq.n	8006d8c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
 8006d8a:	e001      	b.n	8006d90 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fae1 	bl	800836c <USBD_LL_Start>

  return USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00c      	beq.n	8006dfc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	4611      	mov	r1, r2
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	78fa      	ldrb	r2, [r7, #3]
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fe63 	bl	8007b0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006e52:	461a      	mov	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d016      	beq.n	8006e96 <USBD_LL_SetupStage+0x6a>
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d81c      	bhi.n	8006ea6 <USBD_LL_SetupStage+0x7a>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <USBD_LL_SetupStage+0x4a>
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d008      	beq.n	8006e86 <USBD_LL_SetupStage+0x5a>
 8006e74:	e017      	b.n	8006ea6 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f9c6 	bl	8007210 <USBD_StdDevReq>
    break;
 8006e84:	e01a      	b.n	8006ebc <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa28 	bl	80072e4 <USBD_StdItfReq>
    break;
 8006e94:	e012      	b.n	8006ebc <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa68 	bl	8007374 <USBD_StdEPReq>
    break;
 8006ea4:	e00a      	b.n	8006ebc <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006eac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fab9 	bl	800842c <USBD_LL_StallEP>
    break;
 8006eba:	bf00      	nop
  }

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d14b      	bne.n	8006f72 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ee0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d134      	bne.n	8006f56 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d919      	bls.n	8006f2c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	1ad2      	subs	r2, r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d203      	bcs.n	8006f1a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	e002      	b.n	8006f20 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 fee2 	bl	8007cee <USBD_CtlContinueRx>
 8006f2a:	e038      	b.n	8006f9e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d105      	bne.n	8006f4e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fedf 	bl	8007d12 <USBD_CtlSendStatus>
 8006f54:	e023      	b.n	8006f9e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f5c:	2b05      	cmp	r3, #5
 8006f5e:	d11e      	bne.n	8006f9e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006f68:	2100      	movs	r1, #0
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 fa5e 	bl	800842c <USBD_LL_StallEP>
 8006f70:	e015      	b.n	8006f9e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d108      	bne.n	8006f9a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	7afa      	ldrb	r2, [r7, #11]
 8006f92:	4611      	mov	r1, r2
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	4798      	blx	r3
 8006f98:	e001      	b.n	8006f9e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e000      	b.n	8006fa0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d17f      	bne.n	80070bc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3314      	adds	r3, #20
 8006fc0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d15c      	bne.n	8007086 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d915      	bls.n	8007004 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fe4c 	bl	8007c8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 fac1 	bl	8008584 <USBD_LL_PrepareReceive>
 8007002:	e04e      	b.n	80070a2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	6912      	ldr	r2, [r2, #16]
 800700c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007010:	fb01 f202 	mul.w	r2, r1, r2
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d11c      	bne.n	8007054 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007022:	429a      	cmp	r2, r3
 8007024:	d316      	bcc.n	8007054 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007030:	429a      	cmp	r2, r3
 8007032:	d20f      	bcs.n	8007054 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007034:	2200      	movs	r2, #0
 8007036:	2100      	movs	r1, #0
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fe28 	bl	8007c8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007046:	2300      	movs	r3, #0
 8007048:	2200      	movs	r2, #0
 800704a:	2100      	movs	r1, #0
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f001 fa99 	bl	8008584 <USBD_LL_PrepareReceive>
 8007052:	e026      	b.n	80070a2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007066:	2b03      	cmp	r3, #3
 8007068:	d105      	bne.n	8007076 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f001 f9d7 	bl	800842c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 fe5a 	bl	8007d38 <USBD_CtlReceiveStatus>
 8007084:	e00d      	b.n	80070a2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800708c:	2b04      	cmp	r3, #4
 800708e:	d004      	beq.n	800709a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800709a:	2180      	movs	r1, #128	; 0x80
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f001 f9c5 	bl	800842c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d11d      	bne.n	80070e8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff fe81 	bl	8006db4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80070ba:	e015      	b.n	80070e8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00d      	beq.n	80070e4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d108      	bne.n	80070e4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	7afa      	ldrb	r2, [r7, #11]
 80070dc:	4611      	mov	r1, r2
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	4798      	blx	r3
 80070e2:	e001      	b.n	80070e8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070e4:	2302      	movs	r3, #2
 80070e6:	e000      	b.n	80070ea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070fa:	2340      	movs	r3, #64	; 0x40
 80070fc:	2200      	movs	r2, #0
 80070fe:	2100      	movs	r1, #0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 f94e 	bl	80083a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2240      	movs	r2, #64	; 0x40
 8007112:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007116:	2340      	movs	r3, #64	; 0x40
 8007118:	2200      	movs	r2, #0
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 f940 	bl	80083a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2240      	movs	r2, #64	; 0x40
 800712c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6852      	ldr	r2, [r2, #4]
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	4611      	mov	r1, r2
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
  }

  return USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr

08007192 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2204      	movs	r2, #4
 80071aa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d10b      	bne.n	8007204 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d005      	beq.n	8007236 <USBD_StdDevReq+0x26>
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d84f      	bhi.n	80072ce <USBD_StdDevReq+0xbe>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <USBD_StdDevReq+0x36>
 8007232:	2b20      	cmp	r3, #32
 8007234:	d14b      	bne.n	80072ce <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
    break;
 8007244:	e048      	b.n	80072d8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b09      	cmp	r3, #9
 800724c:	d839      	bhi.n	80072c2 <USBD_StdDevReq+0xb2>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBD_StdDevReq+0x44>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	080072a5 	.word	0x080072a5
 8007258:	080072b9 	.word	0x080072b9
 800725c:	080072c3 	.word	0x080072c3
 8007260:	080072af 	.word	0x080072af
 8007264:	080072c3 	.word	0x080072c3
 8007268:	08007287 	.word	0x08007287
 800726c:	0800727d 	.word	0x0800727d
 8007270:	080072c3 	.word	0x080072c3
 8007274:	0800729b 	.word	0x0800729b
 8007278:	08007291 	.word	0x08007291
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9da 	bl	8007638 <USBD_GetDescriptor>
      break;
 8007284:	e022      	b.n	80072cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 facf 	bl	800782c <USBD_SetAddress>
      break;
 800728e:	e01d      	b.n	80072cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fb0e 	bl	80078b4 <USBD_SetConfig>
      break;
 8007298:	e018      	b.n	80072cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fb97 	bl	80079d0 <USBD_GetConfig>
      break;
 80072a2:	e013      	b.n	80072cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fbc7 	bl	8007a3a <USBD_GetStatus>
      break;
 80072ac:	e00e      	b.n	80072cc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fbf5 	bl	8007aa0 <USBD_SetFeature>
      break;
 80072b6:	e009      	b.n	80072cc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fc04 	bl	8007ac8 <USBD_ClrFeature>
      break;
 80072c0:	e004      	b.n	80072cc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc5c 	bl	8007b82 <USBD_CtlError>
      break;
 80072ca:	bf00      	nop
    }
    break;
 80072cc:	e004      	b.n	80072d8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc56 	bl	8007b82 <USBD_CtlError>
    break;
 80072d6:	bf00      	nop
  }

  return ret;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop

080072e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d005      	beq.n	800730a <USBD_StdItfReq+0x26>
 80072fe:	2b40      	cmp	r3, #64	; 0x40
 8007300:	d82e      	bhi.n	8007360 <USBD_StdItfReq+0x7c>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <USBD_StdItfReq+0x26>
 8007306:	2b20      	cmp	r3, #32
 8007308:	d12a      	bne.n	8007360 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007310:	3b01      	subs	r3, #1
 8007312:	2b02      	cmp	r3, #2
 8007314:	d81d      	bhi.n	8007352 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	889b      	ldrh	r3, [r3, #4]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d813      	bhi.n	8007348 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
 800732e:	4603      	mov	r3, r0
 8007330:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	88db      	ldrh	r3, [r3, #6]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d110      	bne.n	800735c <USBD_StdItfReq+0x78>
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10d      	bne.n	800735c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fce6 	bl	8007d12 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007346:	e009      	b.n	800735c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fc19 	bl	8007b82 <USBD_CtlError>
      break;
 8007350:	e004      	b.n	800735c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc14 	bl	8007b82 <USBD_CtlError>
      break;
 800735a:	e000      	b.n	800735e <USBD_StdItfReq+0x7a>
      break;
 800735c:	bf00      	nop
    }
    break;
 800735e:	e004      	b.n	800736a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fc0d 	bl	8007b82 <USBD_CtlError>
    break;
 8007368:	bf00      	nop
  }

  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	889b      	ldrh	r3, [r3, #4]
 8007386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	d007      	beq.n	80073a4 <USBD_StdEPReq+0x30>
 8007394:	2b40      	cmp	r3, #64	; 0x40
 8007396:	f200 8144 	bhi.w	8007622 <USBD_StdEPReq+0x2ae>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <USBD_StdEPReq+0x40>
 800739e:	2b20      	cmp	r3, #32
 80073a0:	f040 813f 	bne.w	8007622 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
    break;
 80073b2:	e13b      	b.n	800762c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d10a      	bne.n	80073d6 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]

      return ret;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	e12b      	b.n	800762e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d007      	beq.n	80073ee <USBD_StdEPReq+0x7a>
 80073de:	2b03      	cmp	r3, #3
 80073e0:	f300 8119 	bgt.w	8007616 <USBD_StdEPReq+0x2a2>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d072      	beq.n	80074ce <USBD_StdEPReq+0x15a>
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d03a      	beq.n	8007462 <USBD_StdEPReq+0xee>
 80073ec:	e113      	b.n	8007616 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d002      	beq.n	80073fe <USBD_StdEPReq+0x8a>
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d015      	beq.n	8007428 <USBD_StdEPReq+0xb4>
 80073fc:	e02b      	b.n	8007456 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <USBD_StdEPReq+0xaa>
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	d009      	beq.n	800741e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f80c 	bl	800842c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 f808 	bl	800842c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800741c:	e020      	b.n	8007460 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fbae 	bl	8007b82 <USBD_CtlError>
        break;
 8007426:	e01b      	b.n	8007460 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	885b      	ldrh	r3, [r3, #2]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10e      	bne.n	800744e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <USBD_StdEPReq+0xda>
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d008      	beq.n	800744e <USBD_StdEPReq+0xda>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	88db      	ldrh	r3, [r3, #6]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 ffef 	bl	800842c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fc5f 	bl	8007d12 <USBD_CtlSendStatus>

        break;
 8007454:	e004      	b.n	8007460 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fb92 	bl	8007b82 <USBD_CtlError>
        break;
 800745e:	bf00      	nop
      }
      break;
 8007460:	e0de      	b.n	8007620 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007468:	2b02      	cmp	r3, #2
 800746a:	d002      	beq.n	8007472 <USBD_StdEPReq+0xfe>
 800746c:	2b03      	cmp	r3, #3
 800746e:	d015      	beq.n	800749c <USBD_StdEPReq+0x128>
 8007470:	e026      	b.n	80074c0 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <USBD_StdEPReq+0x11e>
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d009      	beq.n	8007492 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 ffd2 	bl	800842c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007488:	2180      	movs	r1, #128	; 0x80
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 ffce 	bl	800842c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007490:	e01c      	b.n	80074cc <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fb74 	bl	8007b82 <USBD_CtlError>
        break;
 800749a:	e017      	b.n	80074cc <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	885b      	ldrh	r3, [r3, #2]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d112      	bne.n	80074ca <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 ffd9 	bl	800846a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc2a 	bl	8007d12 <USBD_CtlSendStatus>
        }
        break;
 80074be:	e004      	b.n	80074ca <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fb5d 	bl	8007b82 <USBD_CtlError>
        break;
 80074c8:	e000      	b.n	80074cc <USBD_StdEPReq+0x158>
        break;
 80074ca:	bf00      	nop
      }
      break;
 80074cc:	e0a8      	b.n	8007620 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d002      	beq.n	80074de <USBD_StdEPReq+0x16a>
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d031      	beq.n	8007540 <USBD_StdEPReq+0x1cc>
 80074dc:	e095      	b.n	800760a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <USBD_StdEPReq+0x180>
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b80      	cmp	r3, #128	; 0x80
 80074e8:	d004      	beq.n	80074f4 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fb48 	bl	8007b82 <USBD_CtlError>
          break;
 80074f2:	e08f      	b.n	8007614 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80074f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da0b      	bge.n	8007514 <USBD_StdEPReq+0x1a0>
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	3310      	adds	r3, #16
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4413      	add	r3, r2
 8007510:	3304      	adds	r3, #4
 8007512:	e00a      	b.n	800752a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2202      	movs	r2, #2
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb8c 	bl	8007c56 <USBD_CtlSendData>
          break;
 800753e:	e069      	b.n	8007614 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	da11      	bge.n	800756c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	3318      	adds	r3, #24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d117      	bne.n	8007592 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fb0c 	bl	8007b82 <USBD_CtlError>
            break;
 800756a:	e053      	b.n	8007614 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	f003 020f 	and.w	r2, r3, #15
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 faf9 	bl	8007b82 <USBD_CtlError>
            break;
 8007590:	e040      	b.n	8007614 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	da0b      	bge.n	80075b2 <USBD_StdEPReq+0x23e>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	3310      	adds	r3, #16
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	3304      	adds	r3, #4
 80075b0:	e00a      	b.n	80075c8 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4413      	add	r3, r2
 80075c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <USBD_StdEPReq+0x262>
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	2b80      	cmp	r3, #128	; 0x80
 80075d4:	d103      	bne.n	80075de <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e00e      	b.n	80075fc <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 ff60 	bl	80084a8 <USBD_LL_IsStallEP>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	e002      	b.n	80075fc <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2202      	movs	r2, #2
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb27 	bl	8007c56 <USBD_CtlSendData>
          break;
 8007608:	e004      	b.n	8007614 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fab8 	bl	8007b82 <USBD_CtlError>
        break;
 8007612:	bf00      	nop
      }
      break;
 8007614:	e004      	b.n	8007620 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fab2 	bl	8007b82 <USBD_CtlError>
      break;
 800761e:	bf00      	nop
    }
    break;
 8007620:	e004      	b.n	800762c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 faac 	bl	8007b82 <USBD_CtlError>
    break;
 800762a:	bf00      	nop
  }

  return ret;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	885b      	ldrh	r3, [r3, #2]
 8007646:	0a1b      	lsrs	r3, r3, #8
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	2b06      	cmp	r3, #6
 800764e:	f200 80c9 	bhi.w	80077e4 <USBD_GetDescriptor+0x1ac>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <USBD_GetDescriptor+0x20>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	08007675 	.word	0x08007675
 800765c:	0800768d 	.word	0x0800768d
 8007660:	080076cd 	.word	0x080076cd
 8007664:	080077e5 	.word	0x080077e5
 8007668:	080077e5 	.word	0x080077e5
 800766c:	08007791 	.word	0x08007791
 8007670:	080077b7 	.word	0x080077b7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	7c12      	ldrb	r2, [r2, #16]
 8007680:	f107 010a 	add.w	r1, r7, #10
 8007684:	4610      	mov	r0, r2
 8007686:	4798      	blx	r3
 8007688:	60f8      	str	r0, [r7, #12]
    break;
 800768a:	e0b0      	b.n	80077ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7c1b      	ldrb	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10d      	bne.n	80076b0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f107 020a 	add.w	r2, r7, #10
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	2202      	movs	r2, #2
 80076ac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80076ae:	e09e      	b.n	80077ee <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	f107 020a 	add.w	r2, r7, #10
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
 80076c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3301      	adds	r3, #1
 80076c6:	2202      	movs	r2, #2
 80076c8:	701a      	strb	r2, [r3, #0]
    break;
 80076ca:	e090      	b.n	80077ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	d856      	bhi.n	8007784 <USBD_GetDescriptor+0x14c>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <USBD_GetDescriptor+0xa4>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	080076f5 	.word	0x080076f5
 80076e0:	0800770d 	.word	0x0800770d
 80076e4:	08007725 	.word	0x08007725
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	08007755 	.word	0x08007755
 80076f0:	0800776d 	.word	0x0800776d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7c12      	ldrb	r2, [r2, #16]
 8007700:	f107 010a 	add.w	r1, r7, #10
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	60f8      	str	r0, [r7, #12]
      break;
 800770a:	e040      	b.n	800778e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 010a 	add.w	r1, r7, #10
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
      break;
 8007722:	e034      	b.n	800778e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 010a 	add.w	r1, r7, #10
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
      break;
 800773a:	e028      	b.n	800778e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 010a 	add.w	r1, r7, #10
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
      break;
 8007752:	e01c      	b.n	800778e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 010a 	add.w	r1, r7, #10
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
      break;
 800776a:	e010      	b.n	800778e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	7c12      	ldrb	r2, [r2, #16]
 8007778:	f107 010a 	add.w	r1, r7, #10
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
      break;
 8007782:	e004      	b.n	800778e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f9fb 	bl	8007b82 <USBD_CtlError>
      return;
 800778c:	e04b      	b.n	8007826 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800778e:	e02e      	b.n	80077ee <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7c1b      	ldrb	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800779e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a0:	f107 020a 	add.w	r2, r7, #10
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
      break;
 80077aa:	e020      	b.n	80077ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9e7 	bl	8007b82 <USBD_CtlError>
      return;
 80077b4:	e037      	b.n	8007826 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7c1b      	ldrb	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10d      	bne.n	80077da <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	f107 020a 	add.w	r2, r7, #10
 80077ca:	4610      	mov	r0, r2
 80077cc:	4798      	blx	r3
 80077ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	2207      	movs	r2, #7
 80077d6:	701a      	strb	r2, [r3, #0]
      break;
 80077d8:	e009      	b.n	80077ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9d0 	bl	8007b82 <USBD_CtlError>
      return;
 80077e2:	e020      	b.n	8007826 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f9cb 	bl	8007b82 <USBD_CtlError>
    return;
 80077ec:	e01b      	b.n	8007826 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80077ee:	897b      	ldrh	r3, [r7, #10]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d011      	beq.n	8007818 <USBD_GetDescriptor+0x1e0>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	88db      	ldrh	r3, [r3, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	88da      	ldrh	r2, [r3, #6]
 8007800:	897b      	ldrh	r3, [r7, #10]
 8007802:	4293      	cmp	r3, r2
 8007804:	bf28      	it	cs
 8007806:	4613      	movcs	r3, r2
 8007808:	b29b      	uxth	r3, r3
 800780a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800780c:	897b      	ldrh	r3, [r7, #10]
 800780e:	461a      	mov	r2, r3
 8007810:	68f9      	ldr	r1, [r7, #12]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa1f 	bl	8007c56 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	88db      	ldrh	r3, [r3, #6]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa76 	bl	8007d12 <USBD_CtlSendStatus>
  }
}
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	889b      	ldrh	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d130      	bne.n	80078a0 <USBD_SetAddress+0x74>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	88db      	ldrh	r3, [r3, #6]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d12c      	bne.n	80078a0 <USBD_SetAddress+0x74>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	885b      	ldrh	r3, [r3, #2]
 800784a:	2b7f      	cmp	r3, #127	; 0x7f
 800784c:	d828      	bhi.n	80078a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	885b      	ldrh	r3, [r3, #2]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007860:	2b03      	cmp	r3, #3
 8007862:	d104      	bne.n	800786e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f98b 	bl	8007b82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786c:	e01d      	b.n	80078aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7bfa      	ldrb	r2, [r7, #15]
 8007872:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fe40 	bl	8008500 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa46 	bl	8007d12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007894:	e009      	b.n	80078aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789e:	e004      	b.n	80078aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f96d 	bl	8007b82 <USBD_CtlError>
  }
}
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	4b41      	ldr	r3, [pc, #260]	; (80079cc <USBD_SetConfig+0x118>)
 80078c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078c8:	4b40      	ldr	r3, [pc, #256]	; (80079cc <USBD_SetConfig+0x118>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d904      	bls.n	80078da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f955 	bl	8007b82 <USBD_CtlError>
 80078d8:	e075      	b.n	80079c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d002      	beq.n	80078ea <USBD_SetConfig+0x36>
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d023      	beq.n	8007930 <USBD_SetConfig+0x7c>
 80078e8:	e062      	b.n	80079b0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80078ea:	4b38      	ldr	r3, [pc, #224]	; (80079cc <USBD_SetConfig+0x118>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01a      	beq.n	8007928 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80078f2:	4b36      	ldr	r3, [pc, #216]	; (80079cc <USBD_SetConfig+0x118>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2203      	movs	r2, #3
 8007900:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007904:	4b31      	ldr	r3, [pc, #196]	; (80079cc <USBD_SetConfig+0x118>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff fa5c 	bl	8006dc8 <USBD_SetClassConfig>
 8007910:	4603      	mov	r3, r0
 8007912:	2b02      	cmp	r3, #2
 8007914:	d104      	bne.n	8007920 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f932 	bl	8007b82 <USBD_CtlError>
          return;
 800791e:	e052      	b.n	80079c6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f9f6 	bl	8007d12 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007926:	e04e      	b.n	80079c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f9f2 	bl	8007d12 <USBD_CtlSendStatus>
      break;
 800792e:	e04a      	b.n	80079c6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007930:	4b26      	ldr	r3, [pc, #152]	; (80079cc <USBD_SetConfig+0x118>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d112      	bne.n	800795e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007940:	4b22      	ldr	r3, [pc, #136]	; (80079cc <USBD_SetConfig+0x118>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800794a:	4b20      	ldr	r3, [pc, #128]	; (80079cc <USBD_SetConfig+0x118>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff fa58 	bl	8006e06 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f9db 	bl	8007d12 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800795c:	e033      	b.n	80079c6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800795e:	4b1b      	ldr	r3, [pc, #108]	; (80079cc <USBD_SetConfig+0x118>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	429a      	cmp	r2, r3
 800796a:	d01d      	beq.n	80079a8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fa46 	bl	8006e06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800797a:	4b14      	ldr	r3, [pc, #80]	; (80079cc <USBD_SetConfig+0x118>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007984:	4b11      	ldr	r3, [pc, #68]	; (80079cc <USBD_SetConfig+0x118>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fa1c 	bl	8006dc8 <USBD_SetClassConfig>
 8007990:	4603      	mov	r3, r0
 8007992:	2b02      	cmp	r3, #2
 8007994:	d104      	bne.n	80079a0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8f2 	bl	8007b82 <USBD_CtlError>
          return;
 800799e:	e012      	b.n	80079c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9b6 	bl	8007d12 <USBD_CtlSendStatus>
      break;
 80079a6:	e00e      	b.n	80079c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9b2 	bl	8007d12 <USBD_CtlSendStatus>
      break;
 80079ae:	e00a      	b.n	80079c6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f8e5 	bl	8007b82 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80079b8:	4b04      	ldr	r3, [pc, #16]	; (80079cc <USBD_SetConfig+0x118>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fa21 	bl	8006e06 <USBD_ClrClassConfig>
      break;
 80079c4:	bf00      	nop
    }
  }
}
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000238 	.word	0x20000238

080079d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	88db      	ldrh	r3, [r3, #6]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d004      	beq.n	80079ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f8cc 	bl	8007b82 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80079ea:	e022      	b.n	8007a32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	dc02      	bgt.n	80079fc <USBD_GetConfig+0x2c>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dc03      	bgt.n	8007a02 <USBD_GetConfig+0x32>
 80079fa:	e015      	b.n	8007a28 <USBD_GetConfig+0x58>
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d00b      	beq.n	8007a18 <USBD_GetConfig+0x48>
 8007a00:	e012      	b.n	8007a28 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f920 	bl	8007c56 <USBD_CtlSendData>
      break;
 8007a16:	e00c      	b.n	8007a32 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f918 	bl	8007c56 <USBD_CtlSendData>
      break;
 8007a26:	e004      	b.n	8007a32 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f8a9 	bl	8007b82 <USBD_CtlError>
      break;
 8007a30:	bf00      	nop
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d81e      	bhi.n	8007a8e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	88db      	ldrh	r3, [r3, #6]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d004      	beq.n	8007a62 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f891 	bl	8007b82 <USBD_CtlError>
      break;
 8007a60:	e01a      	b.n	8007a98 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f043 0202 	orr.w	r2, r3, #2
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	330c      	adds	r3, #12
 8007a82:	2202      	movs	r2, #2
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8e5 	bl	8007c56 <USBD_CtlSendData>
    break;
 8007a8c:	e004      	b.n	8007a98 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f876 	bl	8007b82 <USBD_CtlError>
    break;
 8007a96:	bf00      	nop
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d106      	bne.n	8007ac0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f929 	bl	8007d12 <USBD_CtlSendStatus>
  }

}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d80b      	bhi.n	8007af6 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	885b      	ldrh	r3, [r3, #2]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10c      	bne.n	8007b00 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f90f 	bl	8007d12 <USBD_CtlSendStatus>
    }
    break;
 8007af4:	e004      	b.n	8007b00 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f842 	bl	8007b82 <USBD_CtlError>
    break;
 8007afe:	e000      	b.n	8007b02 <USBD_ClrFeature+0x3a>
    break;
 8007b00:	bf00      	nop
  }
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	785a      	ldrb	r2, [r3, #1]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	3302      	adds	r3, #2
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	3303      	adds	r3, #3
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4413      	add	r3, r2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	3304      	adds	r3, #4
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	3305      	adds	r3, #5
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3306      	adds	r3, #6
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	3307      	adds	r3, #7
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4413      	add	r3, r2
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	80da      	strh	r2, [r3, #6]

}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr

08007b82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fc4c 	bl	800842c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007b94:	2100      	movs	r1, #0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fc48 	bl	800842c <USBD_LL_StallEP>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d032      	beq.n	8007c20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 f834 	bl	8007c28 <USBD_GetLen>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	75fa      	strb	r2, [r7, #23]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4413      	add	r3, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	7812      	ldrb	r2, [r2, #0]
 8007bde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	75fa      	strb	r2, [r7, #23]
 8007be6:	461a      	mov	r2, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4413      	add	r3, r2
 8007bec:	2203      	movs	r2, #3
 8007bee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007bf0:	e012      	b.n	8007c18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	60fa      	str	r2, [r7, #12]
 8007bf8:	7dfa      	ldrb	r2, [r7, #23]
 8007bfa:	1c51      	adds	r1, r2, #1
 8007bfc:	75f9      	strb	r1, [r7, #23]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	440a      	add	r2, r1
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	75fa      	strb	r2, [r7, #23]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4413      	add	r3, r2
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e8      	bne.n	8007bf2 <USBD_GetString+0x4e>
    }
  }
}
 8007c20:	bf00      	nop
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007c34:	e005      	b.n	8007c42 <USBD_GetLen+0x1a>
    {
        len++;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f5      	bne.n	8007c36 <USBD_GetLen+0xe>
    }

    return len;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr

08007c56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	4613      	mov	r3, r2
 8007c62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007c78:	88fb      	ldrh	r3, [r7, #6]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fc5d 	bl	800853e <USBD_LL_Transmit>

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 fc4b 	bl	800853e <USBD_LL_Transmit>

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007cd0:	88fa      	ldrh	r2, [r7, #6]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fc50 	bl	8008584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	2100      	movs	r1, #0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fc3e 	bl	8008584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d22:	2300      	movs	r3, #0
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fc08 	bl	800853e <USBD_LL_Transmit>

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2205      	movs	r2, #5
 8007d44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fc18 	bl	8008584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d64:	2200      	movs	r2, #0
 8007d66:	4912      	ldr	r1, [pc, #72]	; (8007db0 <MX_USB_DEVICE_Init+0x50>)
 8007d68:	4812      	ldr	r0, [pc, #72]	; (8007db4 <MX_USB_DEVICE_Init+0x54>)
 8007d6a:	f7fe ffd3 	bl	8006d14 <USBD_Init>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d74:	f7f8 fcde 	bl	8000734 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d78:	490f      	ldr	r1, [pc, #60]	; (8007db8 <MX_USB_DEVICE_Init+0x58>)
 8007d7a:	480e      	ldr	r0, [pc, #56]	; (8007db4 <MX_USB_DEVICE_Init+0x54>)
 8007d7c:	f7fe fff5 	bl	8006d6a <USBD_RegisterClass>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d86:	f7f8 fcd5 	bl	8000734 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d8a:	490c      	ldr	r1, [pc, #48]	; (8007dbc <MX_USB_DEVICE_Init+0x5c>)
 8007d8c:	4809      	ldr	r0, [pc, #36]	; (8007db4 <MX_USB_DEVICE_Init+0x54>)
 8007d8e:	f7fe ff55 	bl	8006c3c <USBD_CDC_RegisterInterface>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d98:	f7f8 fccc 	bl	8000734 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d9c:	4805      	ldr	r0, [pc, #20]	; (8007db4 <MX_USB_DEVICE_Init+0x54>)
 8007d9e:	f7fe fffd 	bl	8006d9c <USBD_Start>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007da8:	f7f8 fcc4 	bl	8000734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007dac:	bf00      	nop
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	2000012c 	.word	0x2000012c
 8007db4:	2000023c 	.word	0x2000023c
 8007db8:	20000018 	.word	0x20000018
 8007dbc:	2000011c 	.word	0x2000011c

08007dc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4905      	ldr	r1, [pc, #20]	; (8007ddc <CDC_Init_FS+0x1c>)
 8007dc8:	4805      	ldr	r0, [pc, #20]	; (8007de0 <CDC_Init_FS+0x20>)
 8007dca:	f7fe ff4d 	bl	8006c68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dce:	4905      	ldr	r1, [pc, #20]	; (8007de4 <CDC_Init_FS+0x24>)
 8007dd0:	4803      	ldr	r0, [pc, #12]	; (8007de0 <CDC_Init_FS+0x20>)
 8007dd2:	f7fe ff62 	bl	8006c9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000cd8 	.word	0x20000cd8
 8007de0:	2000023c 	.word	0x2000023c
 8007de4:	200004d8 	.word	0x200004d8

08007de8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007dec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr
	...

08007df8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
 8007e04:	4613      	mov	r3, r2
 8007e06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	2b23      	cmp	r3, #35	; 0x23
 8007e0c:	d84a      	bhi.n	8007ea4 <CDC_Control_FS+0xac>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <CDC_Control_FS+0x1c>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007ea5 	.word	0x08007ea5
 8007e18:	08007ea5 	.word	0x08007ea5
 8007e1c:	08007ea5 	.word	0x08007ea5
 8007e20:	08007ea5 	.word	0x08007ea5
 8007e24:	08007ea5 	.word	0x08007ea5
 8007e28:	08007ea5 	.word	0x08007ea5
 8007e2c:	08007ea5 	.word	0x08007ea5
 8007e30:	08007ea5 	.word	0x08007ea5
 8007e34:	08007ea5 	.word	0x08007ea5
 8007e38:	08007ea5 	.word	0x08007ea5
 8007e3c:	08007ea5 	.word	0x08007ea5
 8007e40:	08007ea5 	.word	0x08007ea5
 8007e44:	08007ea5 	.word	0x08007ea5
 8007e48:	08007ea5 	.word	0x08007ea5
 8007e4c:	08007ea5 	.word	0x08007ea5
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	08007ea5 	.word	0x08007ea5
 8007e58:	08007ea5 	.word	0x08007ea5
 8007e5c:	08007ea5 	.word	0x08007ea5
 8007e60:	08007ea5 	.word	0x08007ea5
 8007e64:	08007ea5 	.word	0x08007ea5
 8007e68:	08007ea5 	.word	0x08007ea5
 8007e6c:	08007ea5 	.word	0x08007ea5
 8007e70:	08007ea5 	.word	0x08007ea5
 8007e74:	08007ea5 	.word	0x08007ea5
 8007e78:	08007ea5 	.word	0x08007ea5
 8007e7c:	08007ea5 	.word	0x08007ea5
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ea5 	.word	0x08007ea5
 8007e88:	08007ea5 	.word	0x08007ea5
 8007e8c:	08007ea5 	.word	0x08007ea5
 8007e90:	08007ea5 	.word	0x08007ea5
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007ea5 	.word	0x08007ea5
 8007e9c:	08007ea5 	.word	0x08007ea5
 8007ea0:	08007ea5 	.word	0x08007ea5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ea4:	bf00      	nop
  }

  return (USBD_OK);
 8007ea6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop

08007eb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <CDC_Receive_FS+0x24>)
 8007ec2:	f7fe feea 	bl	8006c9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ec6:	4804      	ldr	r0, [pc, #16]	; (8007ed8 <CDC_Receive_FS+0x24>)
 8007ec8:	f7fe fefa 	bl	8006cc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ecc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	2000023c 	.word	0x2000023c

08007edc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2212      	movs	r2, #18
 8007eec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007eee:	4b03      	ldr	r3, [pc, #12]	; (8007efc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000148 	.word	0x20000148

08007f00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f12:	4b03      	ldr	r3, [pc, #12]	; (8007f20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	2000015c 	.word	0x2000015c

08007f24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4907      	ldr	r1, [pc, #28]	; (8007f58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f3a:	4808      	ldr	r0, [pc, #32]	; (8007f5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f3c:	f7ff fe32 	bl	8007ba4 <USBD_GetString>
 8007f40:	e004      	b.n	8007f4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	4904      	ldr	r1, [pc, #16]	; (8007f58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f46:	4805      	ldr	r0, [pc, #20]	; (8007f5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f48:	f7ff fe2c 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200014d8 	.word	0x200014d8
 8007f5c:	080086e4 	.word	0x080086e4

08007f60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	4904      	ldr	r1, [pc, #16]	; (8007f80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f70:	4804      	ldr	r0, [pc, #16]	; (8007f84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f72:	f7ff fe17 	bl	8007ba4 <USBD_GetString>
  return USBD_StrDesc;
 8007f76:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	200014d8 	.word	0x200014d8
 8007f84:	080086fc 	.word	0x080086fc

08007f88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	221a      	movs	r2, #26
 8007f98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f9a:	f000 f843 	bl	8008024 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f9e:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000160 	.word	0x20000160

08007fac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d105      	bne.n	8007fca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4907      	ldr	r1, [pc, #28]	; (8007fe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fc2:	4808      	ldr	r0, [pc, #32]	; (8007fe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fc4:	f7ff fdee 	bl	8007ba4 <USBD_GetString>
 8007fc8:	e004      	b.n	8007fd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	4904      	ldr	r1, [pc, #16]	; (8007fe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fce:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fd0:	f7ff fde8 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fd4:	4b02      	ldr	r3, [pc, #8]	; (8007fe0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200014d8 	.word	0x200014d8
 8007fe4:	08008710 	.word	0x08008710

08007fe8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4907      	ldr	r1, [pc, #28]	; (800801c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ffe:	4808      	ldr	r0, [pc, #32]	; (8008020 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008000:	f7ff fdd0 	bl	8007ba4 <USBD_GetString>
 8008004:	e004      	b.n	8008010 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	4904      	ldr	r1, [pc, #16]	; (800801c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800800a:	4805      	ldr	r0, [pc, #20]	; (8008020 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800800c:	f7ff fdca 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	200014d8 	.word	0x200014d8
 8008020:	0800871c 	.word	0x0800871c

08008024 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <Get_SerialNum+0x44>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <Get_SerialNum+0x48>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <Get_SerialNum+0x4c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4413      	add	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800804a:	2208      	movs	r2, #8
 800804c:	4909      	ldr	r1, [pc, #36]	; (8008074 <Get_SerialNum+0x50>)
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 f814 	bl	800807c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008054:	2204      	movs	r2, #4
 8008056:	4908      	ldr	r1, [pc, #32]	; (8008078 <Get_SerialNum+0x54>)
 8008058:	68b8      	ldr	r0, [r7, #8]
 800805a:	f000 f80f 	bl	800807c <IntToUnicode>
  }
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	1ff800d0 	.word	0x1ff800d0
 800806c:	1ff800d4 	.word	0x1ff800d4
 8008070:	1ff800d8 	.word	0x1ff800d8
 8008074:	20000162 	.word	0x20000162
 8008078:	20000172 	.word	0x20000172

0800807c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800808e:	2300      	movs	r3, #0
 8008090:	75fb      	strb	r3, [r7, #23]
 8008092:	e027      	b.n	80080e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	0f1b      	lsrs	r3, r3, #28
 8008098:	2b09      	cmp	r3, #9
 800809a:	d80b      	bhi.n	80080b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	0f1b      	lsrs	r3, r3, #28
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4619      	mov	r1, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	440b      	add	r3, r1
 80080ac:	3230      	adds	r2, #48	; 0x30
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	e00a      	b.n	80080ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	0f1b      	lsrs	r3, r3, #28
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	4619      	mov	r1, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	440b      	add	r3, r1
 80080c4:	3237      	adds	r2, #55	; 0x37
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	3301      	adds	r3, #1
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	4413      	add	r3, r2
 80080da:	2200      	movs	r2, #0
 80080dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	3301      	adds	r3, #1
 80080e2:	75fb      	strb	r3, [r7, #23]
 80080e4:	7dfa      	ldrb	r2, [r7, #23]
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d3d3      	bcc.n	8008094 <IntToUnicode+0x18>
  }
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d106      	bne.n	8008118 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <HAL_PCDEx_SetConnectionState+0x38>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	4a08      	ldr	r2, [pc, #32]	; (8008130 <HAL_PCDEx_SetConnectionState+0x38>)
 8008110:	f043 0301 	orr.w	r3, r3, #1
 8008114:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008116:	e005      	b.n	8008124 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <HAL_PCDEx_SetConnectionState+0x38>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4a04      	ldr	r2, [pc, #16]	; (8008130 <HAL_PCDEx_SetConnectionState+0x38>)
 800811e:	f023 0301 	bic.w	r3, r3, #1
 8008122:	6053      	str	r3, [r2, #4]
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000

08008134 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0d      	ldr	r2, [pc, #52]	; (8008178 <HAL_PCD_MspInit+0x44>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d113      	bne.n	800816e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008146:	4b0d      	ldr	r3, [pc, #52]	; (800817c <HAL_PCD_MspInit+0x48>)
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	4a0c      	ldr	r2, [pc, #48]	; (800817c <HAL_PCD_MspInit+0x48>)
 800814c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008150:	6253      	str	r3, [r2, #36]	; 0x24
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <HAL_PCD_MspInit+0x48>)
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	2014      	movs	r0, #20
 8008164:	f7f8 fd53 	bl	8000c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008168:	2014      	movs	r0, #20
 800816a:	f7f8 fd6c 	bl	8000c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40005c00 	.word	0x40005c00
 800817c:	40023800 	.word	0x40023800

08008180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f7fe fe48 	bl	8006e2c <USBD_LL_SetupStage>
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	440b      	add	r3, r1
 80081c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f7fe fe7a 	bl	8006ec6 <USBD_LL_DataOutStage>
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	440b      	add	r3, r1
 80081fa:	333c      	adds	r3, #60	; 0x3c
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	4619      	mov	r1, r3
 8008202:	f7fe fed1 	bl	8006fa8 <USBD_LL_DataInStage>
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe ffdc 	bl	80071da <USBD_LL_SOF>
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008232:	2301      	movs	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d001      	beq.n	8008242 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800823e:	f7f8 fa79 	bl	8000734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe ff91 	bl	8007174 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe ff4a 	bl	80070f2 <USBD_LL_Reset>
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe ff8b 	bl	8007192 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <HAL_PCD_SuspendCallback+0x30>)
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	4a03      	ldr	r2, [pc, #12]	; (8008298 <HAL_PCD_SuspendCallback+0x30>)
 800828a:	f043 0306 	orr.w	r3, r3, #6
 800828e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	e000ed00 	.word	0xe000ed00

0800829c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe ff85 	bl	80071ba <USBD_LL_Resume>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80082c0:	4a28      	ldr	r2, [pc, #160]	; (8008364 <USBD_LL_Init+0xac>)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a26      	ldr	r2, [pc, #152]	; (8008364 <USBD_LL_Init+0xac>)
 80082cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80082d0:	4b24      	ldr	r3, [pc, #144]	; (8008364 <USBD_LL_Init+0xac>)
 80082d2:	4a25      	ldr	r2, [pc, #148]	; (8008368 <USBD_LL_Init+0xb0>)
 80082d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80082d6:	4b23      	ldr	r3, [pc, #140]	; (8008364 <USBD_LL_Init+0xac>)
 80082d8:	2208      	movs	r2, #8
 80082da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80082dc:	4b21      	ldr	r3, [pc, #132]	; (8008364 <USBD_LL_Init+0xac>)
 80082de:	2202      	movs	r2, #2
 80082e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082e2:	4b20      	ldr	r3, [pc, #128]	; (8008364 <USBD_LL_Init+0xac>)
 80082e4:	2202      	movs	r2, #2
 80082e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80082e8:	4b1e      	ldr	r3, [pc, #120]	; (8008364 <USBD_LL_Init+0xac>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80082ee:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <USBD_LL_Init+0xac>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80082f4:	481b      	ldr	r0, [pc, #108]	; (8008364 <USBD_LL_Init+0xac>)
 80082f6:	f7f8 fe81 	bl	8000ffc <HAL_PCD_Init>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008300:	f7f8 fa18 	bl	8000734 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800830a:	2318      	movs	r3, #24
 800830c:	2200      	movs	r2, #0
 800830e:	2100      	movs	r1, #0
 8008310:	f7fa fa5e 	bl	80027d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800831a:	2358      	movs	r3, #88	; 0x58
 800831c:	2200      	movs	r2, #0
 800831e:	2180      	movs	r1, #128	; 0x80
 8008320:	f7fa fa56 	bl	80027d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800832a:	23c0      	movs	r3, #192	; 0xc0
 800832c:	2200      	movs	r2, #0
 800832e:	2181      	movs	r1, #129	; 0x81
 8008330:	f7fa fa4e 	bl	80027d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800833a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800833e:	2200      	movs	r2, #0
 8008340:	2101      	movs	r1, #1
 8008342:	f7fa fa45 	bl	80027d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800834c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008350:	2200      	movs	r2, #0
 8008352:	2182      	movs	r1, #130	; 0x82
 8008354:	f7fa fa3c 	bl	80027d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	200016d8 	.word	0x200016d8
 8008368:	40005c00 	.word	0x40005c00

0800836c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008382:	4618      	mov	r0, r3
 8008384:	f7f8 ff18 	bl	80011b8 <HAL_PCD_Start>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 f944 	bl	800861c <USBD_Get_USB_Status>
 8008394:	4603      	mov	r3, r0
 8008396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008398:	7bbb      	ldrb	r3, [r7, #14]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	4608      	mov	r0, r1
 80083ac:	4611      	mov	r1, r2
 80083ae:	461a      	mov	r2, r3
 80083b0:	4603      	mov	r3, r0
 80083b2:	70fb      	strb	r3, [r7, #3]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70bb      	strb	r3, [r7, #2]
 80083b8:	4613      	mov	r3, r2
 80083ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80083ca:	78bb      	ldrb	r3, [r7, #2]
 80083cc:	883a      	ldrh	r2, [r7, #0]
 80083ce:	78f9      	ldrb	r1, [r7, #3]
 80083d0:	f7f9 f834 	bl	800143c <HAL_PCD_EP_Open>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f91e 	bl	800861c <USBD_Get_USB_Status>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	4611      	mov	r1, r2
 800840c:	4618      	mov	r0, r3
 800840e:	f7f9 f87b 	bl	8001508 <HAL_PCD_EP_Close>
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f8ff 	bl	800861c <USBD_Get_USB_Status>
 800841e:	4603      	mov	r3, r0
 8008420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008422:	7bbb      	ldrb	r3, [r7, #14]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7f9 f93b 	bl	80016c6 <HAL_PCD_EP_SetStall>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f8e0 	bl	800861c <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008460:	7bbb      	ldrb	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7f9 f96e 	bl	800176a <HAL_PCD_EP_ClrStall>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 f8c1 	bl	800861c <USBD_Get_USB_Status>
 800849a:	4603      	mov	r3, r0
 800849c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849e:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80084ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da0c      	bge.n	80084de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	440b      	add	r3, r1
 80084d8:	3302      	adds	r3, #2
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	e00b      	b.n	80084f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e4:	68f9      	ldr	r1, [r7, #12]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	440b      	add	r3, r1
 80084f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80084f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr

08008500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f7f8 ff67 	bl	80013f2 <HAL_PCD_SetAddress>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f876 	bl	800861c <USBD_Get_USB_Status>
 8008530:	4603      	mov	r3, r0
 8008532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008534:	7bbb      	ldrb	r3, [r7, #14]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	461a      	mov	r2, r3
 800854a:	460b      	mov	r3, r1
 800854c:	72fb      	strb	r3, [r7, #11]
 800854e:	4613      	mov	r3, r2
 8008550:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008560:	893b      	ldrh	r3, [r7, #8]
 8008562:	7af9      	ldrb	r1, [r7, #11]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	f7f9 f86b 	bl	8001640 <HAL_PCD_EP_Transmit>
 800856a:	4603      	mov	r3, r0
 800856c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f853 	bl	800861c <USBD_Get_USB_Status>
 8008576:	4603      	mov	r3, r0
 8008578:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800857a:	7dbb      	ldrb	r3, [r7, #22]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	461a      	mov	r2, r3
 8008590:	460b      	mov	r3, r1
 8008592:	72fb      	strb	r3, [r7, #11]
 8008594:	4613      	mov	r3, r2
 8008596:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085a6:	893b      	ldrh	r3, [r7, #8]
 80085a8:	7af9      	ldrb	r1, [r7, #11]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	f7f8 fff4 	bl	8001598 <HAL_PCD_EP_Receive>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f830 	bl	800861c <USBD_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	4611      	mov	r1, r2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f9 f816 	bl	8001612 <HAL_PCD_EP_GetRxCount>
 80085e6:	4603      	mov	r3, r0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <USBD_static_malloc+0x14>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr
 8008604:	200019c4 	.word	0x200019c4

08008608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr
	...

0800861c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	2b03      	cmp	r3, #3
 800862e:	d817      	bhi.n	8008660 <USBD_Get_USB_Status+0x44>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <USBD_Get_USB_Status+0x1c>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	08008649 	.word	0x08008649
 800863c:	0800864f 	.word	0x0800864f
 8008640:	08008655 	.word	0x08008655
 8008644:	0800865b 	.word	0x0800865b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	e00b      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800864e:	2302      	movs	r3, #2
 8008650:	73fb      	strb	r3, [r7, #15]
    break;
 8008652:	e008      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
    break;
 8008658:	e005      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800865a:	2302      	movs	r3, #2
 800865c:	73fb      	strb	r3, [r7, #15]
    break;
 800865e:	e002      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008660:	2302      	movs	r3, #2
 8008662:	73fb      	strb	r3, [r7, #15]
    break;
 8008664:	bf00      	nop
  }
  return usb_status;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	bc80      	pop	{r7}
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop

08008674 <__libc_init_array>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	2600      	movs	r6, #0
 8008678:	4d0c      	ldr	r5, [pc, #48]	; (80086ac <__libc_init_array+0x38>)
 800867a:	4c0d      	ldr	r4, [pc, #52]	; (80086b0 <__libc_init_array+0x3c>)
 800867c:	1b64      	subs	r4, r4, r5
 800867e:	10a4      	asrs	r4, r4, #2
 8008680:	42a6      	cmp	r6, r4
 8008682:	d109      	bne.n	8008698 <__libc_init_array+0x24>
 8008684:	f000 f822 	bl	80086cc <_init>
 8008688:	2600      	movs	r6, #0
 800868a:	4d0a      	ldr	r5, [pc, #40]	; (80086b4 <__libc_init_array+0x40>)
 800868c:	4c0a      	ldr	r4, [pc, #40]	; (80086b8 <__libc_init_array+0x44>)
 800868e:	1b64      	subs	r4, r4, r5
 8008690:	10a4      	asrs	r4, r4, #2
 8008692:	42a6      	cmp	r6, r4
 8008694:	d105      	bne.n	80086a2 <__libc_init_array+0x2e>
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	f855 3b04 	ldr.w	r3, [r5], #4
 800869c:	4798      	blx	r3
 800869e:	3601      	adds	r6, #1
 80086a0:	e7ee      	b.n	8008680 <__libc_init_array+0xc>
 80086a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a6:	4798      	blx	r3
 80086a8:	3601      	adds	r6, #1
 80086aa:	e7f2      	b.n	8008692 <__libc_init_array+0x1e>
 80086ac:	08008758 	.word	0x08008758
 80086b0:	08008758 	.word	0x08008758
 80086b4:	08008758 	.word	0x08008758
 80086b8:	0800875c 	.word	0x0800875c

080086bc <memset>:
 80086bc:	4603      	mov	r3, r0
 80086be:	4402      	add	r2, r0
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d100      	bne.n	80086c6 <memset+0xa>
 80086c4:	4770      	bx	lr
 80086c6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ca:	e7f9      	b.n	80086c0 <memset+0x4>

080086cc <_init>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr

080086d8 <_fini>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr
